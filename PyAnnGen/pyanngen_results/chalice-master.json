{
    "chalice-master/setup.py": {
        "recursive_include": {
            "name": "recursive_include",
            "location": 10,
            "return": [
                "list[str]",
                "str",
                "bool",
                "Optional[int]",
                "Optional[str]"
            ],
            "arguments": {
                "relative_dir": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "chalice-master/chalice/analyzer.py": {
        "get_client_calls": {
            "name": "get_client_calls",
            "location": 47,
            "return": [
                "str",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "source_code": [
                    "str"
                ]
            }
        },
        "get_client_calls_for_app": {
            "name": "get_client_calls_for_app",
            "location": 63,
            "return": [
                "str",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "source_code": [
                    "str"
                ]
            }
        },
        "parse_code": {
            "name": "parse_code",
            "location": 80,
            "return": [
                "ParsedCode",
                "Type",
                "str",
                "int",
                "Iterable[Any]"
            ],
            "arguments": {
                "source_code": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "filename": [
                    "typing.Text",
                    "str",
                    "Mapping[str, Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "BaseType.__repr__": {
            "name": "__repr__",
            "location": 88,
            "return": [
                "typing.Text",
                "str",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseType.__eq__": {
            "name": "__eq__",
            "location": 92,
            "return": [
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "str",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]",
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "Boto3ClientType.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "service_name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Boto3ClientType.__eq__": {
            "name": "__eq__",
            "location": 125,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "float"
                ]
            }
        },
        "Boto3ClientType.__repr__": {
            "name": "__repr__",
            "location": 134,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Boto3ClientMethodType.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "service_name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "method_name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Boto3ClientMethodType.__eq__": {
            "name": "__eq__",
            "location": 145,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str"
                ]
            }
        },
        "Boto3ClientMethodType.__repr__": {
            "name": "__repr__",
            "location": 153,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionType.__init__": {
            "name": "__init__",
            "location": 172,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "return_type": [
                    "bool",
                    "str"
                ]
            }
        },
        "FunctionType.__eq__": {
            "name": "__eq__",
            "location": 176,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "float"
                ]
            }
        },
        "FunctionType.__repr__": {
            "name": "__repr__",
            "location": 182,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringLiteral.__init__": {
            "name": "__init__",
            "location": 191,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "ParsedCode.__init__": {
            "name": "__init__",
            "location": 197,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "parsed_ast": [
                    "str",
                    "Optional[Dict]",
                    "dict[, ]",
                    "None"
                ],
                "symbol_table": [
                    "str",
                    "float",
                    "Tuple[int]",
                    "tuple[int]"
                ]
            }
        },
        "APICallCollector.__init__": {
            "name": "__init__",
            "location": 209,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "binder": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "APICallCollector.collect_api_calls": {
            "name": "collect_api_calls",
            "location": 214,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]"
                ]
            }
        },
        "APICallCollector.visit": {
            "name": "visit",
            "location": 219,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ChainedSymbolTable.__init__": {
            "name": "__init__",
            "location": 229,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "local_table": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "global_table": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ChainedSymbolTable.new_sub_table": {
            "name": "new_sub_table",
            "location": 236,
            "return": [],
            "arguments": {
                "self": [],
                "local_table": [
                    "bool",
                    "str",
                    "list",
                    "list[]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ChainedSymbolTable.get_inferred_type": {
            "name": "get_inferred_type",
            "location": 243,
            "return": [
                "Type[Any]",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "ChainedSymbolTable.set_inferred_type": {
            "name": "set_inferred_type",
            "location": 263,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "inferred_type": [
                    "str",
                    "List[Type]",
                    "list[typing.Type]",
                    "type",
                    "typing.Type",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "ChainedSymbolTable.lookup_sub_namespace": {
            "name": "lookup_sub_namespace",
            "location": 268,
            "return": [
                "List[Dict[str, Any]]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "lineno": [
                    "str",
                    "None",
                    "Optional[int]",
                    "int",
                    "Optional[IO[bytes]]",
                    "typing.IO",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "ChainedSymbolTable.get_sub_namespaces": {
            "name": "get_sub_namespaces",
            "location": 282,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChainedSymbolTable.get_name": {
            "name": "get_name",
            "location": 286,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChainedSymbolTable.get_symbols": {
            "name": "get_symbols",
            "location": 290,
            "return": [
                "Optional[str]",
                "str",
                "Optional[List[str]]",
                "Callable[[], None]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChainedSymbolTable.register_ast_node_for_symbol": {
            "name": "register_ast_node_for_symbol",
            "location": 294,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "node": [
                    "str",
                    "Type[T]",
                    "typing.Type"
                ]
            }
        },
        "ChainedSymbolTable.lookup_ast_node_for_symbol": {
            "name": "lookup_ast_node_for_symbol",
            "location": 299,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "ChainedSymbolTable.has_ast_node_for_symbol": {
            "name": "has_ast_node_for_symbol",
            "location": 310,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TypeBinder.__init__": {
            "name": "__init__",
            "location": 321,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeBinder.get_type_for_node": {
            "name": "get_type_for_node",
            "location": 325,
            "return": [
                "Union[type, Tuple[type, ...]]",
                "Optional[Match]",
                "Dict[str, Any]",
                "str",
                "Mapping"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "TypeBinder.set_type_for_node": {
            "name": "set_type_for_node",
            "location": 329,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Set[str]",
                    "set[str]",
                    "set",
                    "set[]"
                ],
                "inferred_type": [
                    "Set[str]",
                    "set[str]",
                    "set",
                    "set[]"
                ]
            }
        },
        "SymbolTableTypeInfer.__init__": {
            "name": "__init__",
            "location": 338,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "parsed_code": [
                    "str",
                    "Exception",
                    "typing.Type",
                    "type",
                    "Type"
                ],
                "binder": [
                    "int",
                    "None",
                    "bool",
                    "Optional[str]",
                    "str"
                ],
                "visited": [
                    "str",
                    "None",
                    "Union[str, None]",
                    "Optional[Dict[Hashable, Any]]",
                    "dict[typing.Hashable, typing.Any]"
                ]
            }
        },
        "SymbolTableTypeInfer.bind_types": {
            "name": "bind_types",
            "location": 350,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "Iterator",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SymbolTableTypeInfer.known_types": {
            "name": "known_types",
            "location": 355,
            "return": [
                "dict[, ]",
                "str",
                "Mapping",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "scope_name": [
                    "str",
                    "None"
                ]
            }
        },
        "SymbolTableTypeInfer._set_inferred_type_for_name": {
            "name": "_set_inferred_type_for_name",
            "location": 370,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "List[Type]",
                    "list[typing.Type]",
                    "str",
                    "Type",
                    "typing.Type",
                    "Mapping",
                    "typing.Mapping"
                ],
                "inferred_type": [
                    "List[Type]",
                    "list[typing.Type]",
                    "str",
                    "Type",
                    "typing.Type",
                    "Mapping",
                    "typing.Mapping"
                ]
            }
        },
        "SymbolTableTypeInfer._set_inferred_type_for_node": {
            "name": "_set_inferred_type_for_node",
            "location": 374,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Type[Any]",
                    "bool",
                    "typing.Type",
                    "BinaryIO",
                    "typing.BinaryIO"
                ],
                "inferred_type": [
                    "Type[Any]",
                    "bool",
                    "typing.Type",
                    "BinaryIO",
                    "typing.BinaryIO"
                ]
            }
        },
        "SymbolTableTypeInfer._get_inferred_type_for_node": {
            "name": "_get_inferred_type_for_node",
            "location": 378,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ]
            }
        },
        "SymbolTableTypeInfer._new_inference_scope": {
            "name": "_new_inference_scope",
            "location": 382,
            "return": [
                "str",
                "int",
                "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal]]",
                "typing.Type",
                "float",
                "typing.Final"
            ],
            "arguments": {
                "self": [],
                "parsed_code": [
                    "str",
                    "int"
                ],
                "binder": [
                    "str",
                    "int"
                ],
                "visited": [
                    "str",
                    "int"
                ]
            }
        },
        "SymbolTableTypeInfer.visit_Import": {
            "name": "visit_Import",
            "location": 387,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "SymbolTableTypeInfer.visit_Name": {
            "name": "visit_Name",
            "location": 397,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SymbolTableTypeInfer.visit_Assign": {
            "name": "visit_Assign",
            "location": 405,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SymbolTableTypeInfer.visit_Attribute": {
            "name": "visit_Attribute",
            "location": 422,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SymbolTableTypeInfer.visit_Call": {
            "name": "visit_Call",
            "location": 442,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SymbolTableTypeInfer.visit_Lambda": {
            "name": "visit_Lambda",
            "location": 479,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SymbolTableTypeInfer._infer_function_call": {
            "name": "_infer_function_call",
            "location": 488,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SymbolTableTypeInfer._map_function_params": {
            "name": "_map_function_params",
            "location": 516,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sub_table": [
                    "List[Type]",
                    "list[typing.Type]",
                    "Type",
                    "typing.Type"
                ],
                "node": [
                    "bool",
                    "str"
                ],
                "def_node": [
                    "bool",
                    "str",
                    "list",
                    "list[]"
                ]
            }
        },
        "SymbolTableTypeInfer._get_name": {
            "name": "_get_name",
            "location": 527,
            "return": [
                "str",
                "bool",
                "Union[int, float, complex]",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bytes"
                ]
            }
        },
        "SymbolTableTypeInfer.visit_FunctionDef": {
            "name": "visit_FunctionDef",
            "location": 534,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SymbolTableTypeInfer.visit_AsyncFunctionDef": {
            "name": "visit_AsyncFunctionDef",
            "location": 544,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SymbolTableTypeInfer.visit_ClassDef": {
            "name": "visit_ClassDef",
            "location": 551,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SymbolTableTypeInfer.visit_DictComp": {
            "name": "visit_DictComp",
            "location": 557,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]"
                ]
            }
        },
        "SymbolTableTypeInfer.visit_Return": {
            "name": "visit_Return",
            "location": 561,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SymbolTableTypeInfer.visit_ListComp": {
            "name": "visit_ListComp",
            "location": 573,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]"
                ]
            }
        },
        "SymbolTableTypeInfer.visit_GeneratorExp": {
            "name": "visit_GeneratorExp",
            "location": 580,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]"
                ]
            }
        },
        "SymbolTableTypeInfer._visit_first_comprehension_generator": {
            "name": "_visit_first_comprehension_generator",
            "location": 588,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "SymbolTableTypeInfer._collect_comprehension_children": {
            "name": "_collect_comprehension_children",
            "location": 595,
            "return": [
                "list[]",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SymbolTableTypeInfer._visit_comprehension_children": {
            "name": "_visit_comprehension_children",
            "location": 617,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "comprehension_type": []
            }
        },
        "SymbolTableTypeInfer._handle_comprehension": {
            "name": "_handle_comprehension",
            "location": 642,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "comprehension_type": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "SymbolTableTypeInfer._get_matching_sub_namespace": {
            "name": "_get_matching_sub_namespace",
            "location": 647,
            "return": [
                "None",
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "lineno": [
                    "str",
                    "int",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "SymbolTableTypeInfer.visit": {
            "name": "visit",
            "location": 660,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "AppViewTypeInfer.__init__": {
            "name": "__init__",
            "location": 673,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "parsed_code": [
                    "str",
                    "Union[str, Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "Union[str, bytes]",
                    "bytes"
                ]
            }
        },
        "AppViewTypeInfer.bind_types": {
            "name": "bind_types",
            "location": 681,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "Iterator",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppViewTypeInfer.visit_FunctionDef": {
            "name": "visit_FunctionDef",
            "location": 687,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "AppViewTypeInfer._is_chalice_view": {
            "name": "_is_chalice_view",
            "location": 696,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int",
                    "Set[str]",
                    "set[str]",
                    "List[List[str]]",
                    "list[list[str]]"
                ]
            }
        }
    },
    "chalice-master/chalice/app.py": {
        "handle_extra_types": {
            "name": "handle_extra_types",
            "location": 64,
            "return": [
                "float",
                "Dict[str, Any]",
                "str",
                "Dict[str, str]",
                "Optional[int]"
            ],
            "arguments": {
                "obj": []
            }
        },
        "error_response": {
            "name": "error_response",
            "location": 79,
            "return": [
                "Response",
                "dict",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "message": [
                    "int",
                    "str",
                    "tuple[typing.Union[str,None,str]]",
                    "Union[int,str]",
                    "Tuple[Optional[str], str]"
                ],
                "error_code": [
                    "int",
                    "str",
                    "tuple[typing.Union[str,None,str]]",
                    "Union[int,str]",
                    "Tuple[Optional[str], str]"
                ],
                "http_status_code": [
                    "int",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "headers": [
                    "int",
                    "None",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "_matches_content_type": {
            "name": "_matches_content_type",
            "location": 87,
            "return": [
                "bool"
            ],
            "arguments": {
                "content_type": [
                    "str",
                    "Mapping[str, Any]",
                    "int",
                    "Optional[str]"
                ],
                "valid_content_types": [
                    "str",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "set[str]",
                    "Type[T]",
                    "Set[str]"
                ]
            }
        },
        "_content_type_header_contains": {
            "name": "_content_type_header_contains",
            "location": 98,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "Callable[[], Any]"
            ],
            "arguments": {
                "content_type_header": [
                    "str",
                    "list[str]",
                    "List[str]",
                    "List[Union[str, Any]]"
                ],
                "valid_content_types": [
                    "set[typing.Union[str,str,str,str,str,str,str,str,str,str]]",
                    "str",
                    "Set[str]",
                    "bytes",
                    "dict[typing.Union[str,bytes,bytes,bytes,bytes,bytes,bytes,bytes,bytes,bytes], typing.Any]",
                    "Dict[str, Any]",
                    "list[]",
                    "Optional[Dict[str, Any]]",
                    "list"
                ]
            }
        },
        "WebsocketDisconnectedError.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "connection_id": [
                    "str",
                    "int"
                ]
            }
        },
        "MultiDict.__init__": {
            "name": "__init__",
            "location": 191,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mapping": [
                    "Optional[Dict[str, str]]",
                    "dict[str, str]",
                    "Optional[str]",
                    "None",
                    "Optional[Tuple[int, int]]",
                    "str",
                    "Optional[Dict]",
                    "tuple[typing.Union[int,int]]",
                    "Callable[[str], None]",
                    "dict[, ]",
                    "Tuple[Optional[str], Optional[str]]",
                    "typing.Callable[str, None]",
                    "tuple[typing.Union[str,None,str,None]]"
                ]
            }
        },
        "MultiDict.__getitem__": {
            "name": "__getitem__",
            "location": 197,
            "return": [
                "bool",
                "int",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "MultiDict.__setitem__": {
            "name": "__setitem__",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str",
                    "bool"
                ],
                "v": [
                    "str",
                    "bool"
                ]
            }
        },
        "MultiDict.__delitem__": {
            "name": "__delitem__",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "float",
                    "int",
                    "str",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "MultiDict.getlist": {
            "name": "getlist",
            "location": 209,
            "return": [
                "list[]",
                "List[str]",
                "str",
                "Optional[Union[str, Any]]",
                "List[Tuple]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "dict",
                    "dict[, ]",
                    "str",
                    "Tuple[bytes, int]",
                    "tuple[typing.Union[bytes,int]]",
                    "Dict[str, tuple]",
                    "dict[str, tuple[]]"
                ]
            }
        },
        "MultiDict.__len__": {
            "name": "__len__",
            "location": 212,
            "return": [
                "int",
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiDict.__iter__": {
            "name": "__iter__",
            "location": 215,
            "return": [
                "Callable",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiDict.__repr__": {
            "name": "__repr__",
            "location": 218,
            "return": [
                "typing.Text",
                "str",
                "dict",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiDict.__str__": {
            "name": "__str__",
            "location": 221,
            "return": [
                "str",
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaseInsensitiveMapping.__init__": {
            "name": "__init__",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapping": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[Dict]",
                    "dict[, ]",
                    "Dict[str, str]",
                    "None",
                    "dict[str, str]"
                ]
            }
        },
        "CaseInsensitiveMapping.__getitem__": {
            "name": "__getitem__",
            "location": 232,
            "return": [
                "str",
                "Dict[str, List[Any]]",
                "Union[str, bytes]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "str",
                    "int",
                    "float",
                    "tuple"
                ]
            }
        },
        "CaseInsensitiveMapping.__iter__": {
            "name": "__iter__",
            "location": 235,
            "return": [
                "Callable",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaseInsensitiveMapping.__len__": {
            "name": "__len__",
            "location": 238,
            "return": [
                "int",
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaseInsensitiveMapping.__repr__": {
            "name": "__repr__",
            "location": 241,
            "return": [
                "typing.Text",
                "DefaultDict[int, List[Any]]",
                "OrderedDict",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Authorizer.to_swagger": {
            "name": "to_swagger",
            "location": 249,
            "return": [
                "typing.Dict[builtins.str, typing.Any]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Authorizer.with_scopes": {
            "name": "with_scopes",
            "location": 252,
            "return": [
                "'Authorizer'",
                "None"
            ],
            "arguments": {
                "self": [],
                "scopes": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "IAMAuthorizer.__init__": {
            "name": "__init__",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IAMAuthorizer.to_swagger": {
            "name": "to_swagger",
            "location": 263,
            "return": [
                "bool",
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IAMAuthorizer.with_scopes": {
            "name": "with_scopes",
            "location": 271,
            "return": [
                "'Authorizer'",
                "None"
            ],
            "arguments": {
                "self": [],
                "scopes": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "CognitoUserPoolAuthorizer.__init__": {
            "name": "__init__",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "None"
                ],
                "provider_arns": [
                    "Optional[str]",
                    "str",
                    "Sequence[str]",
                    "None",
                    "typing.Sequence[str]"
                ],
                "header": [
                    "typing.Text",
                    "str",
                    "Optional[str]"
                ],
                "scopes": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "Sequence",
                    "typing.Sequence[]",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "CognitoUserPoolAuthorizer.to_swagger": {
            "name": "to_swagger",
            "location": 294,
            "return": [
                "bool",
                "dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, ]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CognitoUserPoolAuthorizer.with_scopes": {
            "name": "with_scopes",
            "location": 306,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "scopes": [
                    "int",
                    "Optional[int]",
                    "str",
                    "None",
                    "float",
                    "bool",
                    "tuple[str]",
                    "Tuple[str]"
                ]
            }
        },
        "CustomAuthorizer.__init__": {
            "name": "__init__",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "OrderedDict",
                    "typing.OrderedDict"
                ],
                "authorizer_uri": [
                    "bool",
                    "str",
                    "tuple[str]",
                    "Tuple[str]",
                    "int"
                ],
                "ttl_seconds": [
                    "int",
                    "bool",
                    "str",
                    "Tuple[str]"
                ],
                "header": [
                    "typing.Text",
                    "str",
                    "Mapping[str, Any]",
                    "bytes"
                ],
                "invoke_role_arn": [
                    "bool",
                    "None",
                    "str",
                    "Tuple[str]",
                    "int",
                    "tuple[str]"
                ],
                "scopes": [
                    "bool",
                    "None",
                    "str",
                    "Tuple[str]",
                    "int",
                    "tuple[str]"
                ]
            }
        },
        "CustomAuthorizer.to_swagger": {
            "name": "to_swagger",
            "location": 327,
            "return": [
                "float",
                "dict",
                "decimal.Decimal",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomAuthorizer.with_scopes": {
            "name": "with_scopes",
            "location": 344,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "scopes": [
                    "int",
                    "Optional[int]",
                    "str",
                    "None",
                    "float",
                    "bool",
                    "tuple[str]",
                    "Tuple[str]"
                ]
            }
        },
        "CORSConfig.__init__": {
            "name": "__init__",
            "location": 357,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "allow_origin": [
                    "typing.Text",
                    "bool",
                    "str",
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "Sequence[str]"
                ],
                "allow_headers": [
                    "Sequence[Dict]",
                    "str",
                    "None",
                    "typing.Sequence[dict[, ]]",
                    "Dict[str, int]",
                    "dict[str, int]"
                ],
                "expose_headers": [
                    "Union[List, Dict, None]",
                    "None",
                    "Sequence[str]",
                    "int",
                    "list[]",
                    "Optional[List[str]]",
                    "dict[, ]",
                    "Optional[float]",
                    "typing.Sequence[str]",
                    "list[str]",
                    "float"
                ],
                "max_age": [
                    "int",
                    "None",
                    "Dict[str, int]",
                    "dict[str, int]",
                    "float",
                    "bool",
                    "Optional[Union[int, float]]",
                    "Optional[int]",
                    "Iterable[str]"
                ],
                "allow_credentials": [
                    "bool",
                    "None",
                    "str",
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "dict[, ]",
                    "Optional[int]",
                    "dict[str, typing.Any]",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "CORSConfig.allow_headers": {
            "name": "allow_headers",
            "location": 379,
            "return": [
                "str",
                "bool",
                "int",
                "Dict[str, Any]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CORSConfig.get_access_control_headers": {
            "name": "get_access_control_headers",
            "location": 382,
            "return": [
                "dict[typing.Text, str]",
                "str",
                "Dict[str, Union[str, int]]",
                "Dict[str, Any]",
                "dict",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CORSConfig.__eq__": {
            "name": "__eq__",
            "location": 402,
            "return": [
                "bool",
                "int",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bytes",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Request.__init__": {
            "name": "__init__",
            "location": 415,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event_dict": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "lambda_context": [
                    "dict",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "Request._base64decode": {
            "name": "_base64decode",
            "location": 439,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "encoded": [
                    "str",
                    "int"
                ]
            }
        },
        "Request.raw_body": {
            "name": "raw_body",
            "location": 446,
            "return": [
                "str",
                "typing.Match",
                "IO",
                "None",
                "Mapping[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.json_body": {
            "name": "json_body",
            "location": 457,
            "return": [
                "str",
                "int",
                "IO",
                "Mapping[str, Any]",
                "typing.OrderedDict",
                "Exception",
                "typing.Type",
                "tuple[typing.Union[typing.Literal,typing.Literal]]",
                "set[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.to_dict": {
            "name": "to_dict",
            "location": 466,
            "return": [
                "str",
                "bytes",
                "bool",
                "Sequence[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.to_original_event": {
            "name": "to_original_event",
            "location": 480,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.__init__": {
            "name": "__init__",
            "location": 492,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "str",
                    "bytes"
                ],
                "headers": [
                    "Optional[str]",
                    "str",
                    "None",
                    "bytes",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "status_code": [
                    "int",
                    "Optional[int]",
                    "Tuple[int, int]"
                ]
            }
        },
        "Response.to_dict": {
            "name": "to_dict",
            "location": 503,
            "return": [
                "dict[typing.Text, typing.Union[dict[, ],dict[str, str],list[str],str]]",
                "dict",
                "Optional[str]",
                "Optional[Dict[str, Any]]",
                "List[dict]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "binary_types": [
                    "str",
                    "None",
                    "int",
                    "bool",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "Response._sort_headers": {
            "name": "_sort_headers",
            "location": 522,
            "return": [
                "tuple[typing.Union[dict[typing.Union[tuple[typing.Union[str,bytes]],tuple[typing.Union[int,dict[str, typing.Any]]]], typing.Union[tuple[typing.Union[str,bytes]],tuple[typing.Union[int,dict[str, typing.Any]]]]],dict[typing.Union[tuple[typing.Union[str,bytes]],tuple[typing.Union[int,dict[str, typing.Any]]]], list[]]]]",
                "int",
                "List[str]",
                "Dict[str, str]",
                "dict",
                "bytes",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "all_headers": [
                    "dict[, ]",
                    "List[\"libkol.types.ItemQuantity\"]",
                    "dict[str, bytes]",
                    "dict",
                    "dict[str, str]",
                    "dict[int, dict[str, typing.Any]]",
                    "Dict[str, bytes]",
                    "Dict[str, str]",
                    "Dict[int, Dict[str, Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Response._b64encode_body_if_needed": {
            "name": "_b64encode_body_if_needed",
            "location": 534,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response_dict": [
                    "dict",
                    "Optional[Tuple]",
                    "Dict[Any, Union[Any, Any]]",
                    "Tuple[int]"
                ],
                "binary_types": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Response._base64encode": {
            "name": "_base64encode",
            "location": 561,
            "return": [
                "Dict[str, List[int]]",
                "Dict[str, str]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "list[int]",
                    "List[int]",
                    "Union[bytes, str]"
                ]
            }
        },
        "RouteEntry.__init__": {
            "name": "__init__",
            "location": 572,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "view_function": [
                    "Callable[..., Awaitable]",
                    "typing.Callable[_, collections.abc.Awaitable[]]",
                    "tuple",
                    "tuple[]",
                    "float",
                    "list",
                    "list[]",
                    "Iterator[Any]",
                    "typing.Iterator"
                ],
                "view_name": [
                    "str",
                    "int",
                    "dict[str, list[typing.Any]]",
                    "Dict[str, List[Any]]",
                    "bool"
                ],
                "path": [
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "method": [
                    "str",
                    "int"
                ],
                "api_key_required": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "content_types": [
                    "str",
                    "None",
                    "List[str]",
                    "dict",
                    "list[str]",
                    "dict[, ]"
                ],
                "cors": [
                    "bool",
                    "str",
                    "int",
                    "Optional[Tuple[Any, Any]]",
                    "List[str]"
                ],
                "authorizer": [
                    "Optional[Any]",
                    "None",
                    "Optional[Callable[[], Any]]",
                    "int",
                    "typing.Any",
                    "Optional[dict]",
                    "typing.Callable[[], typing.Any]",
                    "dict[, ]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "RouteEntry._parse_view_args": {
            "name": "_parse_view_args",
            "location": 599,
            "return": [
                "list[]",
                "bool",
                "int",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RouteEntry.__eq__": {
            "name": "__eq__",
            "location": 607,
            "return": [
                "bool",
                "Dict[str, Any]",
                "str",
                "Dict[str, Dict[str, Any]]",
                "dict",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "str",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]",
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "APIGateway.__init__": {
            "name": "__init__",
            "location": 620,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "APIGateway.default_binary_types": {
            "name": "default_binary_types",
            "location": 625,
            "return": [
                "str",
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebsocketAPI.__init__": {
            "name": "__init__",
            "location": 633,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "dict",
                    "None",
                    "int",
                    "dict[, ]",
                    "Optional[Tuple[Any, str]]",
                    "bool",
                    "tuple[typing.Union[typing.Any,str]]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "WebsocketAPI.configure": {
            "name": "configure",
            "location": 642,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "domain_name": [
                    "str"
                ],
                "stage": [
                    "str"
                ]
            }
        },
        "WebsocketAPI.configure_from_api_id": {
            "name": "configure_from_api_id",
            "location": 650,
            "return": [
                "None",
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]",
                "str",
                "Iterator[Any]",
                "Iterator[Dict[str, str]]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "api_id": [
                    "str",
                    "int"
                ],
                "stage": [
                    "str",
                    "int",
                    "Tuple[str]",
                    "tuple[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "WebsocketAPI._get_region": {
            "name": "_get_region",
            "location": 668,
            "return": [
                "bool",
                "str",
                "dict",
                "List[int]",
                "set[]",
                "dict[int, str]",
                "list[]",
                "list[str]",
                "dict[str, dict[str, typing.Any]]",
                "frozenset"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebsocketAPI._get_client": {
            "name": "_get_client",
            "location": 691,
            "return": [
                "Callable",
                "str",
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebsocketAPI.send": {
            "name": "send",
            "location": 709,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection_id": [
                    "str",
                    "float",
                    "int",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "message": [
                    "int",
                    "str"
                ]
            }
        },
        "WebsocketAPI.close": {
            "name": "close",
            "location": 719,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection_id": [
                    "int",
                    "str"
                ]
            }
        },
        "WebsocketAPI.info": {
            "name": "info",
            "location": 728,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "connection_id": [
                    "str",
                    "int"
                ]
            }
        },
        "DecoratorAPI.middleware": {
            "name": "middleware",
            "location": 741,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "event_type": [
                    "typing.Text",
                    "Callable",
                    "str",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "DecoratorAPI.authorizer": {
            "name": "authorizer",
            "location": 752,
            "return": [
                "type",
                "List[Dict[str, Any]]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "ttl_seconds": [
                    "str",
                    "None",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "execution_role": [
                    "str",
                    "None",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "name": [
                    "str",
                    "None",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "header": [
                    "typing.Text",
                    "str",
                    "Callable"
                ]
            }
        },
        "DecoratorAPI.on_s3_event": {
            "name": "on_s3_event",
            "location": 767,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[Dict[str, str]]",
                "Iterator[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ],
                "events": [
                    "str",
                    "None"
                ],
                "prefix": [
                    "str",
                    "None"
                ],
                "suffix": [
                    "str",
                    "None"
                ],
                "name": [
                    "str",
                    "None"
                ]
            }
        },
        "DecoratorAPI.on_sns_message": {
            "name": "on_sns_message",
            "location": 779,
            "return": [],
            "arguments": {
                "self": [],
                "topic": [
                    "str",
                    "int"
                ],
                "name": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "DecoratorAPI.on_sqs_message": {
            "name": "on_sqs_message",
            "location": 787,
            "return": [],
            "arguments": {
                "self": [],
                "queue": [
                    "bool",
                    "None",
                    "Optional[Sequence[Any]]",
                    "Callable[[T], Any]",
                    "typing.Sequence[typing.Any]",
                    "typing.Callable[T, typing.Any]"
                ],
                "batch_size": [
                    "int",
                    "bool",
                    "Optional[Sequence[Any]]",
                    "Callable[[T], Any]"
                ],
                "name": [
                    "bool",
                    "None",
                    "Optional[Sequence[Any]]",
                    "Callable[[T], Any]",
                    "typing.Sequence[typing.Any]",
                    "typing.Callable[T, typing.Any]"
                ],
                "queue_arn": [
                    "bool",
                    "None",
                    "Optional[Sequence[Any]]",
                    "Callable[[T], Any]",
                    "typing.Sequence[typing.Any]",
                    "typing.Callable[T, typing.Any]"
                ],
                "maximum_batching_window_in_seconds": [
                    "int",
                    "bool",
                    "Optional[Sequence[Any]]",
                    "Callable[[T], Any]"
                ]
            }
        },
        "DecoratorAPI.on_cw_event": {
            "name": "on_cw_event",
            "location": 804,
            "return": [
                "int",
                "type",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "event_pattern": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "name": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "DecoratorAPI.schedule": {
            "name": "schedule",
            "location": 812,
            "return": [
                "type",
                "List[Dict[str, Any]]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "expression": [
                    "str",
                    "bool",
                    "int"
                ],
                "name": [
                    "str",
                    "None",
                    "bool",
                    "int"
                ],
                "description": [
                    "typing.Text",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "DecoratorAPI.on_kinesis_record": {
            "name": "on_kinesis_record",
            "location": 821,
            "return": [],
            "arguments": {
                "self": [],
                "stream": [
                    "bool",
                    "str"
                ],
                "batch_size": [
                    "int",
                    "bool",
                    "str"
                ],
                "starting_position": [
                    "typing.Text",
                    "bool",
                    "str"
                ],
                "name": [
                    "bool",
                    "str",
                    "None"
                ],
                "maximum_batching_window_in_seconds": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "DecoratorAPI.on_dynamodb_record": {
            "name": "on_dynamodb_record",
            "location": 837,
            "return": [],
            "arguments": {
                "self": [],
                "stream_arn": [
                    "str",
                    "Optional[Sequence[Any]]",
                    "typing.Sequence[typing.Any]",
                    "Optional[List[str]]",
                    "None",
                    "list[str]"
                ],
                "batch_size": [
                    "int",
                    "str",
                    "Optional[Sequence[Any]]",
                    "Optional[List[str]]"
                ],
                "starting_position": [
                    "typing.Text",
                    "str",
                    "Optional[Sequence[Any]]",
                    "Optional[List[str]]"
                ],
                "name": [
                    "str",
                    "None",
                    "Optional[Sequence[Any]]",
                    "Optional[List[str]]",
                    "typing.Sequence[typing.Any]",
                    "list[str]"
                ],
                "maximum_batching_window_in_seconds": [
                    "int",
                    "str",
                    "Optional[Sequence[Any]]",
                    "Optional[List[str]]"
                ]
            }
        },
        "DecoratorAPI.route": {
            "name": "route",
            "location": 855,
            "return": [
                "type",
                "List[Dict[str, Any]]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "DecoratorAPI.lambda_function": {
            "name": "lambda_function",
            "location": 865,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "DecoratorAPI.on_ws_connect": {
            "name": "on_ws_connect",
            "location": 870,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "DecoratorAPI.on_ws_disconnect": {
            "name": "on_ws_disconnect",
            "location": 878,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "DecoratorAPI.on_ws_message": {
            "name": "on_ws_message",
            "location": 886,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "DecoratorAPI._create_registration_function": {
            "name": "_create_registration_function",
            "location": 893,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "handler_type": [
                    "bool",
                    "str",
                    "typing.Type",
                    "Type",
                    "list[str]",
                    "List[str]",
                    "type"
                ],
                "name": [
                    "bool",
                    "None",
                    "str",
                    "Type",
                    "List[str]",
                    "typing.Type",
                    "type",
                    "list[str]"
                ],
                "registration_kwargs": [
                    "bool",
                    "None",
                    "str",
                    "Type",
                    "List[str]",
                    "typing.Type",
                    "type",
                    "list[str]"
                ]
            }
        },
        "DecoratorAPI._wrap_handler": {
            "name": "_wrap_handler",
            "location": 914,
            "return": [
                "str",
                "dict",
                "EventSourceHandler",
                "bytes",
                "WebsocketEventSourceHandler",
                "ChaliceAuthorizer",
                "dict[, ]",
                "PureLambdaWrapper"
            ],
            "arguments": {
                "self": [],
                "handler_type": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]"
                ],
                "handler_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "user_handler": [
                    "dict",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "DecoratorAPI._get_middleware_handlers": {
            "name": "_get_middleware_handlers",
            "location": 952,
            "return": [
                "typing.List",
                "None"
            ],
            "arguments": {
                "self": [],
                "event_type": [
                    "str",
                    "bool"
                ]
            }
        },
        "DecoratorAPI._register_handler": {
            "name": "_register_handler",
            "location": 955,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler_type": [
                    "str",
                    "int"
                ],
                "name": [
                    "str",
                    "int"
                ],
                "user_handler": [
                    "str",
                    "int"
                ],
                "wrapped_handler": [
                    "str",
                    "int"
                ],
                "kwargs": [],
                "options": [
                    "str",
                    "int"
                ]
            }
        },
        "DecoratorAPI.register_middleware": {
            "name": "register_middleware",
            "location": 962,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "typing.Iterable[T]",
                    "bool",
                    "Iterable[T]",
                    "bytes",
                    "int",
                    "list"
                ],
                "event_type": [
                    "typing.Text",
                    "Iterable[T]",
                    "bool",
                    "int",
                    "list",
                    "bytes"
                ]
            }
        },
        "_HandlerRegistration.__init__": {
            "name": "__init__",
            "location": 969,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_HandlerRegistration.register_middleware": {
            "name": "register_middleware",
            "location": 979,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "List[str]",
                    "list[str]",
                    "str",
                    "list",
                    "list[]",
                    "List[dict]",
                    "list[dict[, ]]"
                ],
                "event_type": [
                    "typing.Text",
                    "List[str]",
                    "list",
                    "str",
                    "List[dict]"
                ]
            }
        },
        "_HandlerRegistration._do_register_handler": {
            "name": "_do_register_handler",
            "location": 983,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler_type": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "typing.Type",
                    "Type",
                    "int"
                ],
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "user_handler": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "wrapped_handler": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[bool]",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "kwargs": [],
                "options": [
                    "None",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_HandlerRegistration._attach_websocket_handler": {
            "name": "_attach_websocket_handler",
            "location": 1011,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "bool",
                    "str",
                    "None",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "_HandlerRegistration._register_on_ws_connect": {
            "name": "_register_on_ws_connect",
            "location": 1029,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "user_handler": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "handler_string": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "kwargs": []
            }
        },
        "_HandlerRegistration._register_on_ws_message": {
            "name": "_register_on_ws_message",
            "location": 1040,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "user_handler": [
                    "str",
                    "bool",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "handler_string": [
                    "str",
                    "bool",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "kwargs": []
            }
        },
        "_HandlerRegistration._register_on_ws_disconnect": {
            "name": "_register_on_ws_disconnect",
            "location": 1054,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "user_handler": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "handler_string": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "kwargs": []
            }
        },
        "_HandlerRegistration._register_lambda_function": {
            "name": "_register_lambda_function",
            "location": 1065,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "Optional[List[Any]]",
                    "None",
                    "Optional[str]",
                    "list[typing.Any]"
                ],
                "user_handler": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "Optional[List[Any]]",
                    "None",
                    "Optional[str]",
                    "list[typing.Any]"
                ],
                "handler_string": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "Optional[List[Any]]",
                    "None",
                    "Optional[str]",
                    "list[typing.Any]"
                ]
            }
        },
        "_HandlerRegistration._register_on_s3_event": {
            "name": "_register_on_s3_event",
            "location": 1075,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "type",
                    "typing.Type"
                ],
                "handler_string": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "type",
                    "typing.Type"
                ],
                "kwargs": []
            }
        },
        "_HandlerRegistration._register_on_sns_message": {
            "name": "_register_on_sns_message",
            "location": 1092,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]",
                    "Optional[bool]",
                    "None"
                ],
                "handler_string": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]",
                    "Optional[bool]",
                    "None"
                ],
                "kwargs": []
            }
        },
        "_HandlerRegistration._register_on_sqs_message": {
            "name": "_register_on_sqs_message",
            "location": 1104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "handler_string": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "kwargs": []
            }
        },
        "_HandlerRegistration._register_on_kinesis_record": {
            "name": "_register_on_kinesis_record",
            "location": 1127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "bytes",
                    "Dict[str, object]",
                    "dict[str, object]"
                ],
                "handler_string": [
                    "str",
                    "int",
                    "bytes",
                    "Dict[str, object]",
                    "dict[str, _]"
                ],
                "kwargs": []
            }
        },
        "_HandlerRegistration._register_on_dynamodb_record": {
            "name": "_register_on_dynamodb_record",
            "location": 1144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "handler_string": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "kwargs": []
            }
        },
        "_HandlerRegistration._register_on_cw_event": {
            "name": "_register_on_cw_event",
            "location": 1159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "None"
                ],
                "handler_string": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "None"
                ],
                "kwargs": []
            }
        },
        "_HandlerRegistration._register_schedule": {
            "name": "_register_schedule",
            "location": 1168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None",
                    "Union[str, List[str], Tuple[str, ...]]",
                    "list[str]",
                    "tuple[typing.Union[str,...]]"
                ],
                "handler_string": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None",
                    "Union[str, List[str], Tuple[str, ...]]",
                    "list[str]",
                    "tuple[typing.Union[str,_]]"
                ],
                "kwargs": []
            }
        },
        "_HandlerRegistration._register_authorizer": {
            "name": "_register_authorizer",
            "location": 1178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "bytes",
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "Optional[Any]",
                    "typing.Any"
                ],
                "handler_string": [
                    "str",
                    "Optional[str]",
                    "None",
                    "bytes",
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "Optional[Any]",
                    "typing.Any"
                ],
                "wrapped_handler": [
                    "str",
                    "Union[str, int]",
                    "int"
                ],
                "kwargs": []
            }
        },
        "_HandlerRegistration._register_route": {
            "name": "_register_route",
            "location": 1199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Mapping[str, str]",
                    "typing.Mapping",
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]"
                ],
                "user_handler": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Optional[bool]",
                    "None",
                    "Optional[Any]",
                    "typing.Any"
                ],
                "kwargs": []
            }
        },
        "Chalice.__init__": {
            "name": "__init__",
            "location": 1247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "debug": [
                    "bool",
                    "List[str]",
                    "Optional[Union[str, Callable, bool]]",
                    "str",
                    "FrozenSet"
                ],
                "configure_logs": [
                    "bool",
                    "List[str]",
                    "str",
                    "Optional[Union[str, Callable, bool]]",
                    "Optional[bool]"
                ],
                "env": [
                    "None",
                    "Optional[str]",
                    "bool",
                    "str",
                    "Optional[bool]",
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "Chalice._initialize": {
            "name": "_initialize",
            "location": 1264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "bool",
                    "str",
                    "dict",
                    "Mapping[str, str]"
                ]
            }
        },
        "Chalice.debug": {
            "name": "debug",
            "location": 1277,
            "return": [
                "None",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Dict[str, Any]",
                    "int",
                    "Set[str]",
                    "decimal.Decimal",
                    "str"
                ]
            }
        },
        "Chalice._configure_logging": {
            "name": "_configure_logging",
            "location": 1281,
            "return": [
                "None",
                "bytes",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Chalice._already_configured": {
            "name": "_already_configured",
            "location": 1293,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "log": [
                    "Optional[dict]",
                    "str",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "Chalice._configure_log_level": {
            "name": "_configure_log_level",
            "location": 1302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Chalice.register_blueprint": {
            "name": "register_blueprint",
            "location": 1309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "blueprint": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "name_prefix": [
                    "str",
                    "None",
                    "bool",
                    "List[str]",
                    "list[str]"
                ],
                "url_prefix": [
                    "str",
                    "None",
                    "bool",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Chalice._register_handler": {
            "name": "_register_handler",
            "location": 1315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler_type": [
                    "str",
                    "Optional[str]",
                    "None",
                    "IO",
                    "typing.IO"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "IO",
                    "typing.IO"
                ],
                "user_handler": [
                    "str",
                    "Optional[str]",
                    "None",
                    "IO",
                    "typing.IO"
                ],
                "wrapped_handler": [
                    "str",
                    "Optional[str]",
                    "None",
                    "IO",
                    "typing.IO"
                ],
                "kwargs": [],
                "options": [
                    "str",
                    "None",
                    "Optional[str]",
                    "IO",
                    "typing.IO"
                ]
            }
        },
        "Chalice._register_on_ws_connect": {
            "name": "_register_on_ws_connect",
            "location": 1324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "typing.Mapping",
                    "bool",
                    "Optional[Callable[[Dict], bool]]",
                    "None",
                    "dict",
                    "typing.Callable[dict[, ], bool]",
                    "dict[, ]",
                    "Union[str, List[str]]",
                    "list[str]"
                ],
                "user_handler": [
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "typing.Mapping",
                    "bool",
                    "Optional[Callable[[Dict], bool]]",
                    "None",
                    "dict",
                    "typing.Callable[dict[, ], bool]",
                    "dict[, ]",
                    "Union[str, List[str]]",
                    "list[str]"
                ],
                "handler_string": [
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "typing.Mapping",
                    "bool",
                    "Optional[Callable[[Dict], bool]]",
                    "None",
                    "dict",
                    "typing.Callable[dict[, ], bool]",
                    "dict[, ]",
                    "Union[str, List[str]]",
                    "list[str]"
                ],
                "kwargs": []
            }
        },
        "Chalice._register_on_ws_message": {
            "name": "_register_on_ws_message",
            "location": 1332,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "typing.Mapping",
                    "bool",
                    "Optional[Callable[[Dict], bool]]",
                    "None",
                    "dict",
                    "typing.Callable[dict[, ], bool]",
                    "dict[, ]",
                    "Union[str, List[str]]",
                    "list[str]"
                ],
                "user_handler": [
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "typing.Mapping",
                    "bool",
                    "Optional[Callable[[Dict], bool]]",
                    "None",
                    "dict",
                    "typing.Callable[dict[, ], bool]",
                    "dict[, ]",
                    "Union[str, List[str]]",
                    "list[str]"
                ],
                "handler_string": [
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "typing.Mapping",
                    "bool",
                    "Optional[Callable[[Dict], bool]]",
                    "None",
                    "dict",
                    "typing.Callable[dict[, ], bool]",
                    "dict[, ]",
                    "Union[str, List[str]]",
                    "list[str]"
                ],
                "kwargs": []
            }
        },
        "Chalice._register_on_ws_disconnect": {
            "name": "_register_on_ws_disconnect",
            "location": 1340,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "typing.Mapping",
                    "bool",
                    "Optional[Callable[[Dict], bool]]",
                    "None",
                    "dict",
                    "typing.Callable[dict[, ], bool]",
                    "dict[, ]",
                    "Union[str, List[str]]",
                    "list[str]"
                ],
                "user_handler": [
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "typing.Mapping",
                    "bool",
                    "Optional[Callable[[Dict], bool]]",
                    "None",
                    "dict",
                    "typing.Callable[dict[, ], bool]",
                    "dict[, ]",
                    "Union[str, List[str]]",
                    "list[str]"
                ],
                "handler_string": [
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "typing.Mapping",
                    "bool",
                    "Optional[Callable[[Dict], bool]]",
                    "None",
                    "dict",
                    "typing.Callable[dict[, ], bool]",
                    "dict[, ]",
                    "Union[str, List[str]]",
                    "list[str]"
                ],
                "kwargs": []
            }
        },
        "Chalice._get_middleware_handlers": {
            "name": "_get_middleware_handlers",
            "location": 1348,
            "return": [
                "typing.Generator[]",
                "bool",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "event_type": [
                    "str",
                    "Optional[Union[int, float]]",
                    "Type[Any]",
                    "int",
                    "float",
                    "None",
                    "typing.Type"
                ]
            }
        },
        "Chalice.__call__": {
            "name": "__call__",
            "location": 1357,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "event": [],
                "context": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "eth.abc.StateAPI"
                ]
            }
        },
        "BuiltinAuthConfig.__init__": {
            "name": "__init__",
            "location": 1375,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ],
                "handler_string": [
                    "str",
                    "int"
                ],
                "ttl_seconds": [
                    "Optional[int]",
                    "None",
                    "Optional[bool]",
                    "int"
                ],
                "execution_role": [
                    "Optional[str]",
                    "bool",
                    "None",
                    "str"
                ],
                "header": [
                    "typing.Text",
                    "str",
                    "int"
                ]
            }
        },
        "ChaliceAuthorizer.__init__": {
            "name": "__init__",
            "location": 1409,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "int",
                    "str"
                ],
                "func": [
                    "typing.Callable[..., typing.Any]",
                    "Optional[Callable[..., Any]]",
                    "float",
                    "None",
                    "Callable[[None], bool]",
                    "typing.Sequence[]",
                    "Sequence",
                    "Optional[Sequence[Any]]"
                ],
                "scopes": [
                    "str",
                    "None",
                    "Iterable[str]",
                    "Set[str]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "ChaliceAuthorizer.__call__": {
            "name": "__call__",
            "location": 1420,
            "return": [
                "dict[, ]",
                "bool",
                "dict[int, typing.Any]",
                "int",
                "dict[str, int]",
                "Iterable['Notification']",
                "typing.DefaultDict",
                "\"Namespace\"",
                "dict[str, str]",
                "dict",
                "AuthResponse",
                "List['Product']",
                "\"TransactionModel\""
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "context": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "ChaliceAuthorizer._transform_event": {
            "name": "_transform_event",
            "location": 1431,
            "return": [
                "AuthRequest"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Mapping[str, Any]"
                ]
            }
        },
        "ChaliceAuthorizer.with_scopes": {
            "name": "with_scopes",
            "location": 1436,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "scopes": [
                    "int",
                    "Optional[int]",
                    "str",
                    "None",
                    "float",
                    "bool",
                    "tuple[str]",
                    "Tuple[str]"
                ]
            }
        },
        "AuthRequest.__init__": {
            "name": "__init__",
            "location": 1443,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "auth_type": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "token": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Union[str, \"DatabaseURL\"]"
                ],
                "method_arn": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Union[str, \"DatabaseURL\"]"
                ]
            }
        },
        "AuthResponse.__init__": {
            "name": "__init__",
            "location": 1453,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "routes": [
                    "List[Tuple[str, str]]",
                    "list[tuple[typing.Union[str,str]]]",
                    "str",
                    "Optional[Tuple[int, int]]",
                    "bytes",
                    "tuple[typing.Union[int,int]]",
                    "None",
                    "Union[int, str]",
                    "int"
                ],
                "principal_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "context": [
                    "str",
                    "None",
                    "int",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "AuthResponse.to_dict": {
            "name": "to_dict",
            "location": 1464,
            "return": [
                "dict[typing.Text, ]",
                "int",
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Optional[str]",
                    "str",
                    "eth.abc.BlockHeaderAPI",
                    "None",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "AuthResponse._generate_policy": {
            "name": "_generate_policy",
            "location": 1471,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,list[dict[typing.Text, typing.Union[typing.Text,list[str],tuple[typing.Union[str,str,str,str]],list[tuple[typing.Union[str,str]]],list[],int]]]]]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str"
                ]
            }
        },
        "AuthResponse._generate_allowed_resources": {
            "name": "_generate_allowed_resources",
            "location": 1484,
            "return": [
                "list[]",
                "str",
                "Type[Any]",
                "bool",
                "list",
                "Dict[str, int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "AuthResponse._generate_arn": {
            "name": "_generate_arn",
            "location": 1506,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "route": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "request": [
                    "str",
                    "int"
                ],
                "method": [
                    "typing.Text",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "AuthRoute.__init__": {
            "name": "__init__",
            "location": 1540,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "methods": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "LambdaFunction.__init__": {
            "name": "__init__",
            "location": 1546,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "str",
                    "Mapping",
                    "typing.Mapping",
                    "tuple",
                    "tuple[]"
                ],
                "name": [
                    "str"
                ],
                "handler_string": [
                    "str"
                ]
            }
        },
        "LambdaFunction.__call__": {
            "name": "__call__",
            "location": 1552,
            "return": [
                "int",
                "Optional[Dict[str, str]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict",
                    "dict[, ]"
                ],
                "context": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "BaseEventSourceConfig.__init__": {
            "name": "__init__",
            "location": 1559,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "handler_string": [
                    "str"
                ]
            }
        },
        "ScheduledEventConfig.__init__": {
            "name": "__init__",
            "location": 1565,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[Callable[[dict], None]]",
                    "typing.Callable[dict[, ], None]",
                    "Optional[Callable[[], None]]",
                    "None"
                ],
                "handler_string": [
                    "str",
                    "Optional[Callable[[dict], None]]",
                    "typing.Callable[dict[, ], None]",
                    "Optional[Callable[[], None]]",
                    "None"
                ],
                "schedule_expression": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "description": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "CloudWatchEventConfig.__init__": {
            "name": "__init__",
            "location": 1576,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "typing.Callable[[], int]",
                    "Callable[[], int]",
                    "int"
                ],
                "handler_string": [
                    "str",
                    "bool",
                    "typing.Callable[_, int]",
                    "Callable[[], int]",
                    "int"
                ],
                "event_pattern": [
                    "Optional[int]",
                    "int",
                    "str",
                    "Dict[int, datetime.datetime]",
                    "bytes",
                    "None",
                    "dict[int, datetime.datetime]"
                ]
            }
        },
        "ScheduleExpression.to_string": {
            "name": "to_string",
            "location": 1583,
            "return": [
                "builtins.str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rate.__init__": {
            "name": "__init__",
            "location": 1592,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "float",
                    "Union[int, float]"
                ],
                "unit": [
                    "str",
                    "float",
                    "int",
                    "datetime.time"
                ]
            }
        },
        "Rate.to_string": {
            "name": "to_string",
            "location": 1596,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cron.__init__": {
            "name": "__init__",
            "location": 1606,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "minutes": [
                    "int",
                    "Optional[int]",
                    "None",
                    "Optional[Sequence[int]]",
                    "typing.Sequence[int]",
                    "Optional[str]",
                    "str"
                ],
                "hours": [
                    "int",
                    "Optional[int]",
                    "None",
                    "Optional[Sequence[int]]",
                    "typing.Sequence[int]",
                    "Optional[str]",
                    "str"
                ],
                "day_of_month": [
                    "int",
                    "Optional[int]",
                    "None",
                    "Optional[Sequence[int]]",
                    "typing.Sequence[int]"
                ],
                "month": [
                    "int",
                    "Optional[int]",
                    "None",
                    "Optional[Sequence[int]]",
                    "typing.Sequence[int]",
                    "Optional[str]",
                    "str"
                ],
                "day_of_week": [
                    "int",
                    "Optional[int]",
                    "None",
                    "Optional[Sequence[int]]",
                    "typing.Sequence[int]"
                ],
                "year": [
                    "int",
                    "Optional[int]",
                    "None",
                    "Optional[Sequence[int]]",
                    "typing.Sequence[int]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "Cron.to_string": {
            "name": "to_string",
            "location": 1616,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3EventConfig.__init__": {
            "name": "__init__",
            "location": 1628,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "bucket": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "events": [
                    "str",
                    "Union[str, Sequence[str]]",
                    "typing.Sequence[str]"
                ],
                "prefix": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "suffix": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "handler_string": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "SNSEventConfig.__init__": {
            "name": "__init__",
            "location": 1639,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ],
                "handler_string": [
                    "str",
                    "bool"
                ],
                "topic": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "SQSEventConfig.__init__": {
            "name": "__init__",
            "location": 1645,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "None",
                    "Type[Any]",
                    "typing.Mapping",
                    "Optional[Iterable[Any]]",
                    "typing.Type",
                    "int",
                    "typing.Iterable[typing.Any]"
                ],
                "handler_string": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "None",
                    "Type[Any]",
                    "typing.Mapping",
                    "Optional[Iterable[Any]]",
                    "typing.Type",
                    "int",
                    "typing.Iterable[typing.Any]"
                ],
                "queue": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "None",
                    "list",
                    "List[str]",
                    "list[]",
                    "list[str]"
                ],
                "queue_arn": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "None",
                    "list",
                    "List[str]",
                    "list[]",
                    "list[str]"
                ],
                "batch_size": [
                    "int",
                    "str",
                    "float",
                    "bool",
                    "Union[float, int]"
                ],
                "maximum_batching_window_in_seconds": [
                    "int",
                    "bytes",
                    "None",
                    "str",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "KinesisEventConfig.__init__": {
            "name": "__init__",
            "location": 1657,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "bool"
                ],
                "handler_string": [
                    "str",
                    "int",
                    "bool"
                ],
                "stream": [
                    "str",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "batch_size": [
                    "bool",
                    "str",
                    "int",
                    "list[str]",
                    "List[str]"
                ],
                "starting_position": [
                    "str",
                    "int",
                    "Type",
                    "typing.Type"
                ],
                "maximum_batching_window_in_seconds": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "DynamoDBEventConfig.__init__": {
            "name": "__init__",
            "location": 1669,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "handler_string": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "stream_arn": [
                    "str",
                    "bool",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "Optional[str]",
                    "None"
                ],
                "batch_size": [
                    "str",
                    "int",
                    "float",
                    "bool",
                    "list[int]",
                    "Optional[List[int]]",
                    "None"
                ],
                "starting_position": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "int"
                ],
                "maximum_batching_window_in_seconds": [
                    "int",
                    "bytes",
                    "float",
                    "bool"
                ]
            }
        },
        "WebsocketConnectConfig.__init__": {
            "name": "__init__",
            "location": 1683,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "handler_string": [
                    "str"
                ],
                "user_handler": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "WebsocketMessageConfig.__init__": {
            "name": "__init__",
            "location": 1691,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "route_key_handled": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "handler_string": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "user_handler": [
                    "typing.Callable[, ]",
                    "Callable",
                    "tuple[]",
                    "typing.Mapping",
                    "Callable[..., Awaitable]",
                    "typing.Sequence[typing.Mapping]",
                    "tuple",
                    "typing.Sequence[typing.Sequence[typing.Any]]",
                    "Mapping",
                    "Sequence",
                    "Sequence[Mapping[str, Any]]",
                    "Sequence[Any]",
                    "Sequence[Sequence[Any]]"
                ]
            }
        },
        "WebsocketDisconnectConfig.__init__": {
            "name": "__init__",
            "location": 1701,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "handler_string": [
                    "str"
                ],
                "user_handler": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "PureLambdaWrapper.__init__": {
            "name": "__init__",
            "location": 1709,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "original_func": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "PureLambdaWrapper.__call__": {
            "name": "__call__",
            "location": 1716,
            "return": [
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "MiddlewareHandler.__init__": {
            "name": "__init__",
            "location": 1725,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "typing.Iterable[]",
                    "Iterable",
                    "typing.BinaryIO",
                    "str",
                    "Iterable[Any]",
                    "BinaryIO",
                    "slice"
                ],
                "next_handler": [
                    "typing.Iterable[]",
                    "Iterable",
                    "typing.BinaryIO",
                    "str",
                    "slice",
                    "Iterable[Any]",
                    "BinaryIO"
                ]
            }
        },
        "MiddlewareHandler.__call__": {
            "name": "__call__",
            "location": 1730,
            "return": [
                "str",
                "List[float]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "BaseLambdaHandler.__call__": {
            "name": "__call__",
            "location": 1735,
            "return": [
                "typing.Any",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict",
                    "dict[, ]"
                ],
                "context": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "BaseLambdaHandler._build_middleware_handlers": {
            "name": "_build_middleware_handlers",
            "location": 1738,
            "return": [
                "bool",
                "MiddlewareHandler"
            ],
            "arguments": {
                "self": [],
                "handlers": [
                    "set[typing.Union[str,str,str,str,str,str,str]]",
                    "str",
                    "set",
                    "Iterable",
                    "int",
                    "Set[str]"
                ],
                "original_handler": [
                    "bool"
                ]
            }
        },
        "EventSourceHandler.__init__": {
            "name": "__init__",
            "location": 1749,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "int",
                    "Optional[int]",
                    "None",
                    "Mapping",
                    "typing.Mapping",
                    "eth.abc.BlockHeaderAPI",
                    "eth.abc.DatabaseAPI"
                ],
                "event_class": [
                    "bytes",
                    "dict[, ]",
                    "dict",
                    "list[dict[, ]]",
                    "Iterable[eth.abc.BlockHeaderAPI]",
                    "typing.Callable[, ]",
                    "List[Dict]",
                    "Callable"
                ],
                "middleware_handlers": [
                    "Dict[str, Any]",
                    "None",
                    "eth.abc.BlockHeaderAPI",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "EventSourceHandler.middleware_handlers": {
            "name": "middleware_handlers",
            "location": 1766,
            "return": [
                "None",
                "str",
                "dict[int, list[str]]",
                "dict[str, typing.Union[int,str]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "EventSourceHandler.__call__": {
            "name": "__call__",
            "location": 1769,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        },
        "WebsocketEventSourceHandler.__init__": {
            "name": "__init__",
            "location": 1781,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "int",
                    "Optional[int]",
                    "None",
                    "Mapping",
                    "typing.Mapping",
                    "eth.abc.BlockHeaderAPI",
                    "eth.abc.DatabaseAPI"
                ],
                "event_class": [
                    "bytes",
                    "dict[, ]",
                    "dict",
                    "list[dict[, ]]",
                    "Iterable[eth.abc.BlockHeaderAPI]",
                    "typing.Callable[, ]",
                    "List[Dict]",
                    "Callable"
                ],
                "websocket_api": [
                    "bool",
                    "eth.abc.BlockHeaderAPI"
                ],
                "middleware_handlers": [
                    "Dict[str, Any]",
                    "None",
                    "eth.abc.BlockHeaderAPI",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "WebsocketEventSourceHandler.__call__": {
            "name": "__call__",
            "location": 1794,
            "return": [
                "int",
                "bool",
                "None",
                "dict[, ]",
                "dict[, dict[, ]]",
                "str",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "Dict[str, Any]",
                    "eth.abc.StateAPI"
                ],
                "context": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "RestAPIEventHandler.__init__": {
            "name": "__init__",
            "location": 1813,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "route_table": [
                    "bool",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "None",
                    "int",
                    "dict[str, bool]",
                    "Optional[Dict[str, Any]]",
                    "tuple[typing.Union[int,str]]",
                    "Dict[str, bool]",
                    "dict[, ]",
                    "Tuple[int, str]",
                    "dict"
                ],
                "api": [
                    "bool",
                    "int"
                ],
                "log": [
                    "str",
                    "None",
                    "Optional[logging.Logger]",
                    "Optional[str]"
                ],
                "debug": [
                    "bool",
                    "str",
                    "List[str]",
                    "list[str]",
                    "Optional[Any]",
                    "typing.Any",
                    "Optional[bool]",
                    "None"
                ],
                "middleware_handlers": [
                    "None"
                ]
            }
        },
        "RestAPIEventHandler._global_error_handler": {
            "name": "_global_error_handler",
            "location": 1828,
            "return": [
                "str",
                "Exception",
                "Dict[str, str]",
                "int",
                "Dict[str, Union[str, Set]]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "bytes",
                    "str",
                    "Sequence",
                    "typing.Sequence[]"
                ],
                "get_response": [
                    "bytes",
                    "str",
                    "Sequence",
                    "typing.Sequence[]"
                ]
            }
        },
        "RestAPIEventHandler.create_request_object": {
            "name": "create_request_object",
            "location": 1835,
            "return": [
                "Request",
                "bool",
                "None",
                "Dict[str, Any]",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "tuple",
                    "tuple[]"
                ],
                "context": []
            }
        },
        "RestAPIEventHandler.__call__": {
            "name": "__call__",
            "location": 1848,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict",
                    "dict[, ]"
                ],
                "context": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "RestAPIEventHandler._main_rest_api_handler": {
            "name": "_main_rest_api_handler",
            "location": 1859,
            "return": [
                "str",
                "Optional[Mapping[str, Any]]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "context": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "Dict[str, Tuple[Any, Any, Any]]",
                    "dict[str, tuple[typing.Union[typing.Any,typing.Any,typing.Any]]]"
                ]
            }
        },
        "RestAPIEventHandler._validate_binary_response": {
            "name": "_validate_binary_response",
            "location": 1918,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request_headers": [],
                "response_headers": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "str",
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]",
                    "Tuple[bytes, bytes, bytes]",
                    "dict"
                ]
            }
        },
        "RestAPIEventHandler._get_view_function_response": {
            "name": "_get_view_function_response",
            "location": 1938,
            "return": [
                "Response",
                "dict",
                "bool",
                "Dict[str, str]",
                "str",
                "Dict[str, Type[Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "view_function": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "function_args": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "RestAPIEventHandler._unhandled_exception_to_response": {
            "name": "_unhandled_exception_to_response",
            "location": 1959,
            "return": [
                "Response",
                "dict",
                "Dict[str, Any]",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RestAPIEventHandler._validate_response": {
            "name": "_validate_response",
            "location": 1976,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "Iterator",
                    "str",
                    "typing.Iterator"
                ]
            }
        },
        "RestAPIEventHandler._cors_enabled_for_route": {
            "name": "_cors_enabled_for_route",
            "location": 1982,
            "return": [
                "bool",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "route_entry": [
                    "bool",
                    "str",
                    "AsyncGenerator",
                    "collections.abc.AsyncGenerator",
                    "logging.LogRecord",
                    "list[]",
                    "list",
                    "list[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        },
        "RestAPIEventHandler._get_cors_headers": {
            "name": "_get_cors_headers",
            "location": 1985,
            "return": [
                "int",
                "Dict[str, str]",
                "str",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "cors": [
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "RestAPIEventHandler._add_cors_headers": {
            "name": "_add_cors_headers",
            "location": 1988,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "Exception",
                    "dict[, ]",
                    "str",
                    "dict",
                    "tuple[typing.Union[str,int]]",
                    "Tuple[str, int]",
                    "Literal"
                ],
                "cors_headers": [
                    "dict[, ]",
                    "dict",
                    "dict[str, str]",
                    "list",
                    "dict[int, dict[str, typing.Any]]",
                    "Dict[str, str]",
                    "Dict[int, Dict[str, Any]]"
                ]
            }
        },
        "BaseLambdaEvent.__init__": {
            "name": "__init__",
            "location": 2000,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event_dict": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "context": [
                    "Optional[Dict[str, str]]",
                    "dict[str, str]",
                    "Optional[dict]",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "BaseLambdaEvent._extract_attributes": {
            "name": "_extract_attributes",
            "location": 2006,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event_dict": [
                    "dict",
                    "dict[, ]",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "Type[T]",
                    "None",
                    "typing.Type"
                ]
            }
        },
        "BaseLambdaEvent.to_dict": {
            "name": "to_dict",
            "location": 2009,
            "return": [
                "dict",
                "Optional[str]",
                "Dict[str, Dict[str, Any]]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LambdaFunctionEvent.__init__": {
            "name": "__init__",
            "location": 2018,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event_dict": [
                    "Dict[str, Any]",
                    "int",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ],
                "context": [
                    "Optional[Dict[str, str]]",
                    "dict[str, str]",
                    "Optional[dict]",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "LambdaFunctionEvent._extract_attributes": {
            "name": "_extract_attributes",
            "location": 2022,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event_dict": [
                    "dict",
                    "dict[, ]",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "Type[T]",
                    "None",
                    "typing.Type"
                ]
            }
        },
        "LambdaFunctionEvent.to_dict": {
            "name": "to_dict",
            "location": 2025,
            "return": [
                "int",
                "str",
                "dict",
                "Tuple[int, int]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CloudWatchEvent._extract_attributes": {
            "name": "_extract_attributes",
            "location": 2030,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event_dict": [
                    "str",
                    "dict",
                    "Union[int, float]",
                    "Dict[str, Any]"
                ]
            }
        },
        "WebsocketEvent.__init__": {
            "name": "__init__",
            "location": 2043,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event_dict": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "context": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "WebsocketEvent._extract_attributes": {
            "name": "_extract_attributes",
            "location": 2047,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event_dict": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "WebsocketEvent.json_body": {
            "name": "json_body",
            "location": 2055,
            "return": [
                "str",
                "int",
                "IO",
                "Mapping[str, Any]",
                "typing.Type",
                "dict[typing.Any, typing.Union[typing.Any,typing.Any]]",
                "list[typing.Union[typing.Any,typing.Any]]",
                "dict[str, str]",
                "dict[int, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SNSEvent._extract_attributes": {
            "name": "_extract_attributes",
            "location": 2066,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event_dict": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "S3Event._extract_attributes": {
            "name": "_extract_attributes",
            "location": 2075,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event_dict": [
                    "list[dict[str, typing.Any]]",
                    "int",
                    "List[Dict[str, Any]]",
                    "float",
                    "Optional[float]"
                ]
            }
        },
        "SQSEvent._extract_attributes": {
            "name": "_extract_attributes",
            "location": 2082,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event_dict": [
                    "dict",
                    "dict[, ]",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "Type[T]",
                    "None",
                    "typing.Type"
                ]
            }
        },
        "SQSEvent.__iter__": {
            "name": "__iter__",
            "location": 2087,
            "return": [
                "typing.Iterator['SQSRecord']",
                "typing.Generator[SQSRecord]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQSRecord._extract_attributes": {
            "name": "_extract_attributes",
            "location": 2094,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event_dict": [
                    "str",
                    "list[]",
                    "Union[int, float]",
                    "list"
                ]
            }
        },
        "KinesisEvent._extract_attributes": {
            "name": "_extract_attributes",
            "location": 2100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event_dict": [
                    "dict",
                    "dict[, ]",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "Type[T]",
                    "None",
                    "typing.Type"
                ]
            }
        },
        "KinesisEvent.__iter__": {
            "name": "__iter__",
            "location": 2103,
            "return": [
                "typing.Iterator['KinesisRecord']",
                "typing.Generator[KinesisRecord]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KinesisRecord._extract_attributes": {
            "name": "_extract_attributes",
            "location": 2109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event_dict": [
                    "[dict]",
                    "Callable[[], str]",
                    "bool"
                ]
            }
        },
        "DynamoDBEvent._extract_attributes": {
            "name": "_extract_attributes",
            "location": 2121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event_dict": [
                    "dict",
                    "dict[, ]",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "Type[T]",
                    "None",
                    "typing.Type"
                ]
            }
        },
        "DynamoDBEvent.__iter__": {
            "name": "__iter__",
            "location": 2124,
            "return": [
                "typing.Iterator['DynamoDBRecord']",
                "typing.Generator[DynamoDBRecord]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DynamoDBRecord._extract_attributes": {
            "name": "_extract_attributes",
            "location": 2131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event_dict": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "DynamoDBRecord.table_name": {
            "name": "table_name",
            "location": 2148,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Blueprint.__init__": {
            "name": "__init__",
            "location": 2166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "import_name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Blueprint.log": {
            "name": "log",
            "location": 2174,
            "return": [
                "str",
                "Mapping[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Blueprint.current_request": {
            "name": "current_request",
            "location": 2182,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Blueprint.current_app": {
            "name": "current_app",
            "location": 2192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Blueprint.lambda_context": {
            "name": "lambda_context",
            "location": 2201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blueprint.register": {
            "name": "register",
            "location": 2209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [],
                "options": [
                    "bool",
                    "str",
                    "Optional[bool]"
                ]
            }
        },
        "Blueprint.register_middleware": {
            "name": "register_middleware",
            "location": 2226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "event_type": [
                    "Dict[str, Any]",
                    "typing.Text"
                ]
            }
        },
        "Blueprint._register_handler": {
            "name": "_register_handler",
            "location": 2235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler_type": [
                    "str",
                    "int"
                ],
                "name": [
                    "str",
                    "int"
                ],
                "user_handler": [
                    "str",
                    "int"
                ],
                "wrapped_handler": [
                    "str",
                    "int"
                ],
                "kwargs": [],
                "options": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "Blueprint._get_middleware_handlers": {
            "name": "_get_middleware_handlers",
            "location": 2259,
            "return": [
                "list[]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "event_type": [
                    "str",
                    "bool"
                ]
            }
        },
        "ConvertToMiddleware.__init__": {
            "name": "__init__",
            "location": 2281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lambda_wrapper": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "ConvertToMiddleware.__call__": {
            "name": "__call__",
            "location": 2284,
            "return": [],
            "arguments": {
                "self": [],
                "event": [
                    "float"
                ],
                "get_response": [
                    "float"
                ]
            }
        },
        "ConvertToMiddleware._extract_original_param": {
            "name": "_extract_original_param",
            "location": 2292,
            "return": [
                "tuple[]",
                "int",
                "bool",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "unquote_str": {
            "name": "unquote_str",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "str"
                ],
                "encoding": [
                    "str",
                    "typing.Text"
                ]
            }
        },
        "DecoratorAPI.middleware._middleware_wrapper": {
            "name": "_middleware_wrapper",
            "location": 745,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "bool"
                ]
            }
        },
        "DecoratorAPI._create_registration_function._register_handler": {
            "name": "_register_handler",
            "location": 897,
            "return": [],
            "arguments": {
                "user_handler": [
                    "str",
                    "int"
                ]
            }
        },
        "RestAPIEventHandler.__call__.wrapped_event": {
            "name": "wrapped_event",
            "location": 1849,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "Blueprint._register_handler._register_blueprint_handler": {
            "name": "_register_blueprint_handler",
            "location": 2244,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "options": []
            }
        },
        "ConvertToMiddleware.__call__.wrapped": {
            "name": "wrapped",
            "location": 2288,
            "return": [],
            "arguments": {
                "original_event": [],
                "context": []
            }
        }
    },
    "chalice-master/chalice/awsclient.py": {
        "ReadTimeout.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "LambdaClientError.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "original_error": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "Optional[str]"
                ],
                "context": [
                    "int",
                    "bool",
                    "List[str]",
                    "Optional[List[str]]",
                    "float"
                ]
            }
        },
        "LambdaErrorContext.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "function_name": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "client_method_name": [
                    "str",
                    "Optional[str]"
                ],
                "deployment_size": [
                    "int",
                    "bytes",
                    "dict",
                    "Optional[dict]",
                    "str",
                    "Tuple[int, int]"
                ]
            }
        },
        "TypedAWSClient.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "List[str]",
                    "Sequence[str]",
                    "bool"
                ],
                "sleep": [
                    "str",
                    "List[str]",
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "TypedAWSClient.resolve_endpoint": {
            "name": "resolve_endpoint",
            "location": 134,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "str",
                    "trezor.utils.Writer",
                    "dict",
                    "raiden.utils.Tuple[int, int]",
                    "bytes",
                    "utils.Node",
                    "bool"
                ],
                "region": [
                    "str",
                    "trezor.utils.Writer",
                    "dict",
                    "raiden.utils.Tuple[int, int]",
                    "bytes",
                    "utils.Node",
                    "bool"
                ]
            }
        },
        "TypedAWSClient.endpoint_from_arn": {
            "name": "endpoint_from_arn",
            "location": 144,
            "return": [
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "arn": [
                    "str",
                    "Callable"
                ]
            }
        },
        "TypedAWSClient.endpoint_dns_suffix": {
            "name": "endpoint_dns_suffix",
            "location": 156,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "float",
                    "utils.Node",
                    "T",
                    "str"
                ],
                "region": [
                    "float",
                    "utils.Node",
                    "T",
                    "str"
                ]
            }
        },
        "TypedAWSClient.endpoint_dns_suffix_from_arn": {
            "name": "endpoint_dns_suffix_from_arn",
            "location": 168,
            "return": [
                "int",
                "Sequence[float]",
                "Set[str]",
                "Tuple[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "arn": [
                    "int",
                    "Sequence[float]",
                    "Set[str]",
                    "Tuple[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "TypedAWSClient.service_principal": {
            "name": "service_principal",
            "location": 180,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "str"
                ],
                "region": [
                    "str"
                ],
                "url_suffix": [
                    "str",
                    "bool"
                ]
            }
        },
        "TypedAWSClient.lambda_function_exists": {
            "name": "lambda_function_exists",
            "location": 257,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Callable"
                ]
            }
        },
        "TypedAWSClient.api_mapping_exists": {
            "name": "api_mapping_exists",
            "location": 266,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "domain_name": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "api_map_key": [
                    "str",
                    "int"
                ]
            }
        },
        "TypedAWSClient.get_domain_name": {
            "name": "get_domain_name",
            "location": 282,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "domain_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TypedAWSClient.domain_name_exists": {
            "name": "domain_name_exists",
            "location": 292,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "domain_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TypedAWSClient.domain_name_exists_v2": {
            "name": "domain_name_exists_v2",
            "location": 300,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "domain_name": [
                    "str",
                    "dict"
                ]
            }
        },
        "TypedAWSClient.get_function_configuration": {
            "name": "get_function_configuration",
            "location": 309,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TypedAWSClient._create_vpc_config": {
            "name": "_create_vpc_config",
            "location": 315,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "Optional[dict]"
            ],
            "arguments": {
                "self": [],
                "security_group_ids": [
                    "Optional[str]",
                    "str",
                    "Optional[int]"
                ],
                "subnet_ids": [
                    "Optional[str]",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "TypedAWSClient.publish_layer": {
            "name": "publish_layer",
            "location": 331,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "layer_name": [
                    "str",
                    "list",
                    "List[str]"
                ],
                "zip_contents": [
                    "str",
                    "list",
                    "List[str]"
                ],
                "runtime": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "TypedAWSClient.delete_layer_version": {
            "name": "delete_layer_version",
            "location": 346,
            "return": [
                "str",
                "purplship.core.utils.xml.Element",
                "Optional[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "layer_version_arn": [
                    "str",
                    "bool"
                ]
            }
        },
        "TypedAWSClient.get_layer_version": {
            "name": "get_layer_version",
            "location": 357,
            "return": [
                "bool",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "layer_version_arn": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "TypedAWSClient.create_function": {
            "name": "create_function",
            "location": 367,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "Iterator",
                "Container[str]"
            ],
            "arguments": {
                "self": [],
                "function_name": [
                    "Optional[str]",
                    "str"
                ],
                "role_arn": [
                    "Optional[str]",
                    "str",
                    "int",
                    "bool"
                ],
                "zip_contents": [
                    "Optional[str]",
                    "str",
                    "int",
                    "bool"
                ],
                "runtime": [
                    "Optional[str]",
                    "str",
                    "int",
                    "bool"
                ],
                "handler": [
                    "Optional[str]",
                    "str",
                    "int",
                    "bool"
                ],
                "environment_variables": [
                    "Optional[Union[str, int]]",
                    "Optional[str]",
                    "bool",
                    "FrozenSet[str]"
                ],
                "tags": [
                    "Optional[str]",
                    "str",
                    "Optional[Sequence[Any]]",
                    "Optional[Iterable[str]]",
                    "bool",
                    "Optional[Sequence[str]]",
                    "Optional[Any]"
                ],
                "xray": [
                    "bool",
                    "Optional[bool]"
                ],
                "timeout": [
                    "Optional[str]",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "str"
                ],
                "memory_size": [
                    "Optional[bool]",
                    "Optional[\"Node\"]",
                    "Optional[Union[str, int]]"
                ],
                "security_group_ids": [
                    "bool",
                    "Optional[Union[str, Callable, bool]]",
                    "Optional[qcodes.utils.validators.Validator]",
                    "FrozenSet[str]"
                ],
                "subnet_ids": [
                    "bool",
                    "Optional[Union[str, Callable, bool]]",
                    "Optional[qcodes.utils.validators.Validator]",
                    "FrozenSet[str]"
                ],
                "layers": [
                    "Optional[str]",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "TypedAWSClient._wait_for_active": {
            "name": "_wait_for_active",
            "location": 415,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "function_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TypedAWSClient.create_api_mapping": {
            "name": "create_api_mapping",
            "location": 421,
            "return": [
                "Dict[str, Any]",
                "bool",
                "Tuple[int, int]",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "domain_name": [
                    "str",
                    "int",
                    "bool"
                ],
                "path_key": [
                    "str",
                    "int",
                    "bool"
                ],
                "api_id": [
                    "str",
                    "int",
                    "bool"
                ],
                "stage": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "TypedAWSClient.create_base_path_mapping": {
            "name": "create_base_path_mapping",
            "location": 436,
            "return": [
                "str",
                "Callable",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "domain_name": [
                    "str",
                    "int"
                ],
                "path_key": [
                    "str",
                    "int"
                ],
                "api_id": [
                    "str",
                    "int"
                ],
                "stage": [
                    "str",
                    "int"
                ]
            }
        },
        "TypedAWSClient._create_base_path_mapping": {
            "name": "_create_base_path_mapping",
            "location": 451,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "base_path_args": [
                    "bool",
                    "str",
                    "Type['BaseConfig']",
                    "Optional[str]"
                ]
            }
        },
        "TypedAWSClient._create_api_mapping": {
            "name": "_create_api_mapping",
            "location": 465,
            "return": [
                "Dict[str, Any]",
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "api_args": [
                    "dict",
                    "bool",
                    "Dict[str, Any]",
                    "Optional[List[str]]",
                    "List[str]",
                    "Optional[tuple]"
                ]
            }
        },
        "TypedAWSClient.create_domain_name": {
            "name": "create_domain_name",
            "location": 477,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "protocol": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Mapping[str, str]"
                ],
                "domain_name": [
                    "Type",
                    "Optional[T]",
                    "Optional[str]",
                    "str",
                    "Optional[Pattern]"
                ],
                "endpoint_type": [
                    "Type",
                    "Optional[T]",
                    "Optional[str]",
                    "str",
                    "Optional[Pattern]"
                ],
                "certificate_arn": [
                    "str",
                    "bool",
                    "cmk.utils.type_defs.TagGroups",
                    "Optional[Dict]",
                    "Optional[Dict[str, Any]]"
                ],
                "security_policy": [
                    "Optional[str]",
                    "Optional[Any]",
                    "Optional[Dict[Hashable, Any]]",
                    "Optional[Type]"
                ],
                "tags": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "TypedAWSClient._create_domain_name": {
            "name": "_create_domain_name",
            "location": 515,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "api_args": [
                    "float",
                    "int",
                    "bool",
                    "List[str]",
                    "Optional[List[str]]",
                    "Callable[[Any], bool]",
                    "str",
                    "bytes"
                ]
            }
        },
        "TypedAWSClient._create_domain_name_v2": {
            "name": "_create_domain_name_v2",
            "location": 550,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "api_args": [
                    "str",
                    "Optional[Dict]",
                    "bool"
                ]
            }
        },
        "TypedAWSClient._create_lambda_function": {
            "name": "_create_lambda_function",
            "location": 572,
            "return": [
                "Iterable",
                "Type",
                "Tuple[float, float, float]"
            ],
            "arguments": {
                "self": [],
                "api_args": [
                    "float",
                    "T"
                ]
            }
        },
        "TypedAWSClient._is_settling_error": {
            "name": "_is_settling_error",
            "location": 588,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "str",
                    "float",
                    "int",
                    "Exception"
                ]
            }
        },
        "TypedAWSClient.invoke_function": {
            "name": "invoke_function",
            "location": 595,
            "return": [
                "str",
                "purplship.core.utils.xml.Element",
                "int",
                "List[cmk.utils.type_defs.HostName]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "payload": [
                    "Optional[str]",
                    "Callable[[Any], bool]",
                    "bool"
                ]
            }
        },
        "TypedAWSClient._is_iam_role_related_error": {
            "name": "_is_iam_role_related_error",
            "location": 609,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "str",
                    "Exception",
                    "werkzeug.exceptions.Unauthorized"
                ]
            }
        },
        "TypedAWSClient._get_lambda_code_deployment_error": {
            "name": "_get_lambda_code_deployment_error",
            "location": 623,
            "return": [
                "List[str]",
                "str",
                "dict",
                "Dict[str, str]",
                "Dict[str, Callable[[], Any]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "BaseException",
                    "Exception",
                    "Optional[Type[BaseException]]",
                    "Type",
                    "Callable"
                ],
                "context": [
                    "Exception",
                    "BaseException",
                    "Optional[Type[BaseException]]"
                ]
            }
        },
        "TypedAWSClient.delete_function": {
            "name": "delete_function",
            "location": 646,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "function_name": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "TypedAWSClient.get_custom_domain_params_v2": {
            "name": "get_custom_domain_params_v2",
            "location": 654,
            "return": [
                "bool",
                "Dict[str, str]",
                "Dict[str, List[Callable]]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "domain_name": [
                    "str",
                    "Optional[str]",
                    "Callable[[Any], str]",
                    "Sequence[Any]"
                ],
                "endpoint_type": [
                    "str",
                    "Optional[str]",
                    "Callable[[Any], str]",
                    "Sequence[Any]"
                ],
                "certificate_arn": [
                    "str",
                    "Optional[str]",
                    "Callable[[Any], str]",
                    "Sequence[Any]"
                ],
                "security_policy": [
                    "str",
                    "Optional[str]",
                    "Callable[[Any], str]",
                    "Sequence[Any]"
                ],
                "tags": [
                    "Sequence[str]",
                    "Optional[str]",
                    "List[str]",
                    "bytes",
                    "str",
                    "Optional[List[str]]",
                    "bool",
                    "cmk.utils.type_defs.LabelSources"
                ]
            }
        },
        "TypedAWSClient.get_custom_domain_patch_operations": {
            "name": "get_custom_domain_patch_operations",
            "location": 677,
            "return": [
                "List[str]",
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "certificate_arn": [
                    "int",
                    "List[str]",
                    "float"
                ],
                "endpoint_type": [
                    "int",
                    "str",
                    "bool"
                ],
                "security_policy": [
                    "Optional[List[str]]",
                    "Dict[str, str]",
                    "bool"
                ]
            }
        },
        "TypedAWSClient.update_domain_name": {
            "name": "update_domain_name",
            "location": 704,
            "return": [
                "str",
                "Callable[[str], bool]"
            ],
            "arguments": {
                "self": [],
                "protocol": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Mapping[str, str]"
                ],
                "domain_name": [
                    "str",
                    "Callable[..., str]"
                ],
                "endpoint_type": [
                    "str",
                    "dict",
                    "constants.Rank",
                    "Union[None, str, int]",
                    "Optional[str]"
                ],
                "certificate_arn": [
                    "str",
                    "dict",
                    "constants.Rank",
                    "Union[None, str, int]",
                    "Optional[str]"
                ],
                "security_policy": [
                    "str",
                    "dict",
                    "constants.Rank",
                    "Union[None, str, int]",
                    "Optional[str]"
                ],
                "tags": [
                    "str",
                    "Optional[List[str]]",
                    "Tuple[str, str]"
                ]
            }
        },
        "TypedAWSClient._update_resource_tags": {
            "name": "_update_resource_tags",
            "location": 742,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "resource_arn": [
                    "str",
                    "Dict[str, str]",
                    "Tuple[str]"
                ],
                "requested_tags": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "TypedAWSClient._remove_unrequested_resource_tags": {
            "name": "_remove_unrequested_resource_tags",
            "location": 754,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "resource_arn": [
                    "str"
                ],
                "requested_tags": [
                    "Dict[str, str]",
                    "str",
                    "T",
                    "List[str]"
                ],
                "remote_tags": [
                    "Dict[str, str]",
                    "str",
                    "T",
                    "List[str]"
                ]
            }
        },
        "TypedAWSClient._add_missing_or_differing_value_resource_tags": {
            "name": "_add_missing_or_differing_value_resource_tags",
            "location": 762,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "resource_arn": [
                    "str",
                    "bool",
                    "Dict[str, List[str]]"
                ],
                "requested_tags": [
                    "str",
                    "Optional[Sequence[str]]",
                    "bool",
                    "Optional[Dict[str, str]]",
                    "Dict[str, str]",
                    "Optional[Dict[str, Any]]"
                ],
                "remote_tags": [
                    "str",
                    "Optional[Sequence[str]]",
                    "bool",
                    "Optional[Dict[str, str]]",
                    "Dict[str, str]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "TypedAWSClient._update_domain_name": {
            "name": "_update_domain_name",
            "location": 771,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "custom_domain_name": [
                    "str",
                    "Optional[str]",
                    "recidiviz.ingesscrape.constants.ScrapeType"
                ],
                "patch_operations": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "Iterable[str]"
                ]
            }
        },
        "TypedAWSClient._update_domain_name_v2": {
            "name": "_update_domain_name_v2",
            "location": 814,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "api_args": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Callable",
                    "Optional[str]"
                ]
            }
        },
        "TypedAWSClient.delete_domain_name": {
            "name": "delete_domain_name",
            "location": 837,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "domain_name": [
                    "str"
                ]
            }
        },
        "TypedAWSClient.delete_api_mapping": {
            "name": "delete_api_mapping",
            "location": 852,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "domain_name": [
                    "str",
                    "list"
                ],
                "path_key": [
                    "str",
                    "list"
                ]
            }
        },
        "TypedAWSClient.update_function": {
            "name": "update_function",
            "location": 861,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "function_name": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ],
                "zip_contents": [
                    "str",
                    "Optional[str]"
                ],
                "environment_variables": [
                    "str",
                    "bool",
                    "int"
                ],
                "runtime": [
                    "str",
                    "bool",
                    "int"
                ],
                "tags": [
                    "Callable",
                    "dict",
                    "Optional[str]",
                    "List[str]",
                    "bool"
                ],
                "xray": [
                    "str",
                    "bool",
                    "int"
                ],
                "timeout": [
                    "str",
                    "bool",
                    "int"
                ],
                "memory_size": [
                    "str",
                    "bool",
                    "int"
                ],
                "role_arn": [
                    "str",
                    "bool",
                    "int"
                ],
                "subnet_ids": [
                    "str",
                    "bool",
                    "int"
                ],
                "security_group_ids": [
                    "str",
                    "bool",
                    "int"
                ],
                "layers": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "TypedAWSClient._update_function_code": {
            "name": "_update_function_code",
            "location": 900,
            "return": [
                "list",
                "Type",
                "Dict[str, Tuple[int, int]]",
                "List[Dict[str, str]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "function_name": [
                    "str",
                    "dict",
                    "bool"
                ],
                "zip_contents": [
                    "str",
                    "dict",
                    "bool"
                ]
            }
        },
        "TypedAWSClient._wait_for_function_update": {
            "name": "_wait_for_function_update",
            "location": 917,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "function_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TypedAWSClient.put_function_concurrency": {
            "name": "put_function_concurrency",
            "location": 923,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "function_name": [
                    "str",
                    "Callable[[Any], str]",
                    "Dict[str, str]"
                ],
                "reserved_concurrent_executions": [
                    "str",
                    "Callable[[Any], str]",
                    "Dict[str, str]"
                ]
            }
        },
        "TypedAWSClient.delete_function_concurrency": {
            "name": "delete_function_concurrency",
            "location": 931,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "function_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TypedAWSClient._update_function_config": {
            "name": "_update_function_config",
            "location": 937,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "environment_variables": [
                    "int",
                    "bool",
                    "Optional[Union[str, \"PostalAddress\"]]",
                    "Iterable[str]",
                    "str"
                ],
                "runtime": [
                    "Optional[bool]",
                    "Optional[int]",
                    "int",
                    "Optional[List[int]]",
                    "str"
                ],
                "timeout": [
                    "Optional[bool]",
                    "Optional[int]",
                    "int",
                    "Optional[List[int]]",
                    "str"
                ],
                "memory_size": [
                    "bool",
                    "Optional[bool]",
                    "int",
                    "Optional[Union[str, \"PostalAddress\"]]",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]"
                ],
                "role_arn": [
                    "bool",
                    "int",
                    "Optional[bool]",
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "subnet_ids": [
                    "Optional[int]",
                    "str",
                    "dict",
                    "int"
                ],
                "security_group_ids": [
                    "Optional[int]",
                    "str",
                    "dict",
                    "int"
                ],
                "function_name": [
                    "str",
                    "int",
                    "Optional[str]",
                    "List[Tuple[int, int]]",
                    "List[str]"
                ],
                "layers": [
                    "Optional[bool]",
                    "Optional[int]",
                    "int",
                    "Optional[List[int]]",
                    "str"
                ],
                "xray": [
                    "bool",
                    "int",
                    "Optional[Set[int]]",
                    "Iterable[str]",
                    "Set[int]"
                ]
            }
        },
        "TypedAWSClient._do_update_function_config": {
            "name": "_do_update_function_config",
            "location": 973,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "function_name": [
                    "str",
                    "dict",
                    "type"
                ],
                "kwargs": []
            }
        },
        "TypedAWSClient._update_function_tags": {
            "name": "_update_function_tags",
            "location": 984,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "function_arn": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Type[Any]"
                ],
                "requested_tags": [
                    "str"
                ]
            }
        },
        "TypedAWSClient._remove_unrequested_remote_tags": {
            "name": "_remove_unrequested_remote_tags",
            "location": 993,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "function_arn": [
                    "str",
                    "Union[str, List[str]]",
                    "int",
                    "list"
                ],
                "requested_tags": [
                    "str",
                    "Optional[List[str]]",
                    "Mapping[str, Type[Any]]",
                    "set",
                    "Dict[str, str]",
                    "List[str]",
                    "MutableSet[str]"
                ],
                "remote_tags": [
                    "str",
                    "Optional[List[str]]",
                    "Mapping[str, Type[Any]]",
                    "set",
                    "Dict[str, str]",
                    "List[str]",
                    "MutableSet[str]"
                ]
            }
        },
        "TypedAWSClient._add_missing_or_differing_value_requested_tags": {
            "name": "_add_missing_or_differing_value_requested_tags",
            "location": 1001,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "function_arn": [
                    "List[Tuple[str, str]]",
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "requested_tags": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "[str]"
                ],
                "remote_tags": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "[str]"
                ]
            }
        },
        "TypedAWSClient.get_role_arn_for_name": {
            "name": "get_role_arn_for_name",
            "location": 1010,
            "return": [
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "TypedAWSClient.get_role": {
            "name": "get_role",
            "location": 1015,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "TypedAWSClient.delete_role_policy": {
            "name": "delete_role_policy",
            "location": 1024,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "role_name": [
                    "str",
                    "List[str]"
                ],
                "policy_name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "TypedAWSClient.put_role_policy": {
            "name": "put_role_policy",
            "location": 1029,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "role_name": [
                    "str",
                    "Optional[str]"
                ],
                "policy_name": [
                    "str",
                    "Optional[str]"
                ],
                "policy_document": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TypedAWSClient.create_role": {
            "name": "create_role",
            "location": 1037,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]"
                ],
                "trust_policy": [
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "policy": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TypedAWSClient.delete_role": {
            "name": "delete_role",
            "location": 1053,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "TypedAWSClient.get_rest_api_id": {
            "name": "get_rest_api_id",
            "location": 1064,
            "return": [
                "Optional[str]",
                "bool",
                "Dict[str, Any]",
                "Optional[Dict[str, Any]]",
                "str",
                "type"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "TypedAWSClient.get_rest_api": {
            "name": "get_rest_api",
            "location": 1082,
            "return": [
                "str",
                "bool",
                "dict",
                "set",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "rest_api_id": [
                    "str",
                    "bool"
                ]
            }
        },
        "TypedAWSClient.import_rest_api": {
            "name": "import_rest_api",
            "location": 1093,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "swagger_document": [
                    "str",
                    "raiden.utils.ChainID",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Mapping",
                    "Exception"
                ],
                "endpoint_type": [
                    "str",
                    "raiden.utils.ChainID",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Mapping",
                    "Exception"
                ]
            }
        },
        "TypedAWSClient.update_api_from_swagger": {
            "name": "update_api_from_swagger",
            "location": 1103,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rest_api_id": [
                    "str",
                    "Mapping[str, Any]",
                    "int"
                ],
                "swagger_document": [
                    "str",
                    "Mapping[str, Any]",
                    "int"
                ]
            }
        },
        "TypedAWSClient.update_rest_api": {
            "name": "update_rest_api",
            "location": 1111,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rest_api_id": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "patch_operations": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "TypedAWSClient.delete_rest_api": {
            "name": "delete_rest_api",
            "location": 1119,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rest_api_id": [
                    "str"
                ]
            }
        },
        "TypedAWSClient.deploy_rest_api": {
            "name": "deploy_rest_api",
            "location": 1127,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rest_api_id": [
                    "str",
                    "int"
                ],
                "api_gateway_stage": [
                    "str",
                    "int"
                ],
                "xray": [
                    "str",
                    "int"
                ]
            }
        },
        "TypedAWSClient.add_permission_for_apigateway": {
            "name": "add_permission_for_apigateway",
            "location": 1136,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "function_name": [
                    "str",
                    "Optional[int]",
                    "Dict[str, str]",
                    "Optional[str]"
                ],
                "region_name": [
                    "str",
                    "Mapping[str, Any]",
                    "Callable",
                    "int",
                    "bool",
                    "raiden.utils.Address"
                ],
                "account_id": [
                    "str",
                    "Mapping[str, Any]",
                    "Callable",
                    "int",
                    "bool",
                    "raiden.utils.Address"
                ],
                "rest_api_id": [
                    "str",
                    "Mapping[str, Any]",
                    "Callable",
                    "int",
                    "bool",
                    "raiden.utils.Address"
                ],
                "random_id": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "TypedAWSClient.add_permission_for_apigateway_v2": {
            "name": "add_permission_for_apigateway_v2",
            "location": 1155,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "function_name": [
                    "str",
                    "bytes"
                ],
                "region_name": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "account_id": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "api_id": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "random_id": [
                    "Optional[int]",
                    "str",
                    "int"
                ]
            }
        },
        "TypedAWSClient.get_function_policy": {
            "name": "get_function_policy",
            "location": 1168,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "function_name": [
                    "str",
                    "dict",
                    "Type[T]"
                ]
            }
        },
        "TypedAWSClient.download_sdk": {
            "name": "download_sdk",
            "location": 1183,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "rest_api_id": [
                    "int",
                    "str",
                    "bool"
                ],
                "output_dir": [
                    "str"
                ],
                "api_gateway_stage": [
                    "int",
                    "str",
                    "bool"
                ],
                "sdk_type": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "TypedAWSClient.get_sdk_download_stream": {
            "name": "get_sdk_download_stream",
            "location": 1219,
            "return": [
                "bytes",
                "Dict[str, str]",
                "Dict[str, Dict[str, Any]]",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "rest_api_id": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "int"
                ],
                "api_gateway_stage": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "int"
                ],
                "sdk_type": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "TypedAWSClient.subscribe_function_to_topic": {
            "name": "subscribe_function_to_topic",
            "location": 1234,
            "return": [
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "topic_arn": [
                    "bool",
                    "purplship.core.utils.Element",
                    "Optional[Callable]",
                    "raiden.constants.EthClient",
                    "list"
                ],
                "function_arn": [
                    "bool",
                    "purplship.core.utils.Element",
                    "Optional[Callable]",
                    "raiden.constants.EthClient",
                    "list"
                ]
            }
        },
        "TypedAWSClient.unsubscribe_from_topic": {
            "name": "unsubscribe_from_topic",
            "location": 1242,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "subscription_arn": [
                    "Callable",
                    "Optional[str]",
                    "Callable[[str], None]",
                    "str",
                    "purplship.core.utils.xml.Element"
                ]
            }
        },
        "TypedAWSClient.verify_sns_subscription_current": {
            "name": "verify_sns_subscription_current",
            "location": 1247,
            "return": [
                "bool",
                "List[str]",
                "int",
                "dict",
                "float"
            ],
            "arguments": {
                "self": [],
                "subscription_arn": [
                    "str",
                    "Optional[str]",
                    "type",
                    "Optional[Dict[str, Any]]"
                ],
                "topic_name": [
                    "str",
                    "Optional[str]"
                ],
                "function_arn": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TypedAWSClient.add_permission_for_sns_topic": {
            "name": "add_permission_for_sns_topic",
            "location": 1269,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "topic_arn": [
                    "str",
                    "Type",
                    "Type[T]"
                ],
                "function_arn": [
                    "str",
                    "Type",
                    "Type[T]"
                ]
            }
        },
        "TypedAWSClient.remove_permission_for_sns_topic": {
            "name": "remove_permission_for_sns_topic",
            "location": 1277,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "topic_arn": [
                    "str"
                ],
                "function_arn": [
                    "str"
                ]
            }
        },
        "TypedAWSClient._build_source_arn_str": {
            "name": "_build_source_arn_str",
            "location": 1285,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "region_name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "account_id": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "rest_api_id": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "TypedAWSClient.partition_name": {
            "name": "partition_name",
            "location": 1298,
            "return": [
                "str",
                "List[cmk.utils.type_defs.HostName]",
                "purplship.core.utils.xml.Element"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypedAWSClient.region_name": {
            "name": "region_name",
            "location": 1303,
            "return": [
                "str",
                "Optional[str]",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypedAWSClient.iter_log_events": {
            "name": "iter_log_events",
            "location": 1307,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "log_group_name": [
                    "str",
                    "Optional[Dict[str, str]]",
                    "Sequence[str]",
                    "Optional[str]"
                ],
                "start_time": [
                    "bytes",
                    "List[str]",
                    "str",
                    "int"
                ],
                "interleaved": [
                    "str",
                    "Optional[Dict[str, str]]",
                    "Sequence[str]",
                    "Optional[str]"
                ]
            }
        },
        "TypedAWSClient._iter_log_messages": {
            "name": "_iter_log_messages",
            "location": 1324,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pages": []
            }
        },
        "TypedAWSClient._convert_to_datetime": {
            "name": "_convert_to_datetime",
            "location": 1338,
            "return": [
                "datetime.datetime",
                "str"
            ],
            "arguments": {
                "self": [],
                "integer_timestamp": [
                    "int",
                    "datetime.datetime",
                    "Optional[int]",
                    "str",
                    "float"
                ]
            }
        },
        "TypedAWSClient.filter_log_events": {
            "name": "filter_log_events",
            "location": 1342,
            "return": [
                "dict",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "log_group_name": [
                    "str",
                    "Optional[str]"
                ],
                "start_time": [
                    "int",
                    "Optional[Iterable[str]]",
                    "List[str]",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "next_token": [
                    "Optional[str]",
                    "str",
                    "int",
                    "Optional[datetime.datetime]"
                ]
            }
        },
        "TypedAWSClient._convert_types_on_response": {
            "name": "_convert_types_on_response",
            "location": 1369,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "response": [
                    "dict",
                    "Dict[str, Any]",
                    "requests.Response",
                    "int"
                ]
            }
        },
        "TypedAWSClient._client": {
            "name": "_client",
            "location": 1373,
            "return": [
                "dict",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "service_name": [
                    "str"
                ]
            }
        },
        "TypedAWSClient.add_permission_for_authorizer": {
            "name": "add_permission_for_authorizer",
            "location": 1380,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rest_api_id": [
                    "str",
                    "List[Dict[str, Any]]",
                    "Optional[str]",
                    "Sequence[str]",
                    "Optional[Dict[str, str]]",
                    "int"
                ],
                "function_arn": [
                    "str",
                    "int"
                ],
                "random_id": [
                    "Optional[str]",
                    "Optional[bool]",
                    "Dict['cirq.Qid', str]",
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "TypedAWSClient.get_or_create_rule_arn": {
            "name": "get_or_create_rule_arn",
            "location": 1418,
            "return": [
                "List[str]",
                "int",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "rule_name": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "schedule_expression": [
                    "str",
                    "int",
                    "list"
                ],
                "event_pattern": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "bool",
                    "Optional[\"CustomerReference\"]"
                ],
                "rule_description": [
                    "Optional[bool]",
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "TypedAWSClient.delete_rule": {
            "name": "delete_rule",
            "location": 1438,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rule_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TypedAWSClient.connect_rule_to_lambda": {
            "name": "connect_rule_to_lambda",
            "location": 1446,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rule_name": [
                    "str",
                    "bool",
                    "Set[str]"
                ],
                "function_arn": [
                    "str",
                    "bool",
                    "Set[str]"
                ]
            }
        },
        "TypedAWSClient.add_permission_for_cloudwatch_event": {
            "name": "add_permission_for_cloudwatch_event",
            "location": 1452,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rule_arn": [
                    "str",
                    "Type[T]",
                    "Callable",
                    "type"
                ],
                "function_arn": [
                    "str",
                    "Type[T]",
                    "Callable",
                    "type"
                ]
            }
        },
        "TypedAWSClient.connect_s3_bucket_to_lambda": {
            "name": "connect_s3_bucket_to_lambda",
            "location": 1460,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str",
                    "dict"
                ],
                "function_arn": [
                    "Optional[str]",
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Mapping[str, T]"
                ],
                "events": [
                    "Optional[str]",
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Mapping[str, T]"
                ],
                "prefix": [
                    "Optional[Sequence[Any]]",
                    "Dict[str, Any]",
                    "str",
                    "list",
                    "Optional[str]"
                ],
                "suffix": [
                    "Optional[Sequence[Any]]",
                    "Dict[str, Any]",
                    "str",
                    "list",
                    "Optional[str]"
                ]
            }
        },
        "TypedAWSClient._merge_s3_notification_config": {
            "name": "_merge_s3_notification_config",
            "location": 1503,
            "return": [
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "existing_config": [
                    "bool",
                    "List[Dict[str, Any]]"
                ],
                "new_config": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "TypedAWSClient.add_permission_for_s3_event": {
            "name": "add_permission_for_s3_event",
            "location": 1526,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str",
                    "int"
                ],
                "function_arn": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "Sequence[Optional[str]]",
                    "int"
                ],
                "account_id": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "Sequence[Optional[str]]",
                    "int"
                ]
            }
        },
        "TypedAWSClient.remove_permission_for_s3_event": {
            "name": "remove_permission_for_s3_event",
            "location": 1537,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str",
                    "int"
                ],
                "function_arn": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Sequence[Optional[str]]",
                    "int"
                ],
                "account_id": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Sequence[Optional[str]]",
                    "int"
                ]
            }
        },
        "TypedAWSClient.disconnect_s3_bucket_from_lambda": {
            "name": "disconnect_s3_bucket_from_lambda",
            "location": 1549,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str",
                    "Callable"
                ],
                "function_arn": [
                    "bool",
                    "str"
                ]
            }
        },
        "TypedAWSClient._add_lambda_permission_if_needed": {
            "name": "_add_lambda_permission_if_needed",
            "location": 1568,
            "return": [
                "Dict[str, Any]",
                "Optional[bool]",
                "type",
                "Type[T]",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "source_arn": [
                    "str",
                    "dict",
                    "bool",
                    "constants.Rank",
                    "Union[None, str, int]"
                ],
                "function_arn": [
                    "str",
                    "type"
                ],
                "service_name": [
                    "str",
                    "Optional[int]",
                    "Optional[str]",
                    "bool"
                ],
                "source_account": [
                    "Optional[str]",
                    "str",
                    "int"
                ]
            }
        },
        "TypedAWSClient._policy_gives_access": {
            "name": "_policy_gives_access",
            "location": 1589,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "policy": [
                    "str",
                    "Iterable[str]"
                ],
                "source_arn": [
                    "str",
                    "Callable",
                    "Optional[str]"
                ],
                "service_name": [
                    "str",
                    "Callable",
                    "Optional[str]"
                ]
            }
        },
        "TypedAWSClient._statement_gives_arn_access": {
            "name": "_statement_gives_arn_access",
            "location": 1620,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "statement": [
                    "Dict[str, str]",
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "source_arn": [
                    "str",
                    "Optional[cmk.utils.type_defs.SectionName]",
                    "Dict[str, Any]"
                ],
                "service_name": [
                    "str",
                    "Optional[str]"
                ],
                "source_account": [
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "Dict[str, Union[str, Any]]",
                    "str"
                ]
            }
        },
        "TypedAWSClient._remove_lambda_permission_if_needed": {
            "name": "_remove_lambda_permission_if_needed",
            "location": 1643,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "source_arn": [
                    "str",
                    "Optional[object]"
                ],
                "function_arn": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "service_name": [
                    "str",
                    "Optional[object]"
                ],
                "source_account": [
                    "Optional[str]",
                    "str",
                    "int",
                    "Optional[Any]"
                ]
            }
        },
        "TypedAWSClient.create_lambda_event_source": {
            "name": "create_lambda_event_source",
            "location": 1662,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "event_source_arn": [
                    "int"
                ],
                "function_name": [
                    "int"
                ],
                "batch_size": [
                    "int"
                ],
                "starting_position": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "bool"
                ],
                "maximum_batching_window_in_seconds": [
                    "int",
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "TypedAWSClient.update_lambda_event_source": {
            "name": "update_lambda_event_source",
            "location": 1681,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event_uuid": [
                    "int",
                    "bool",
                    "bytes"
                ],
                "batch_size": [
                    "int",
                    "bool",
                    "bytes"
                ],
                "maximum_batching_window_in_seconds": [
                    "bool",
                    "int",
                    "Dict[str, int]",
                    "Iterable[str]",
                    "Union[int, Dict[str, int]]",
                    "Dict[str, List[str]]",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "TypedAWSClient.remove_lambda_event_source": {
            "name": "remove_lambda_event_source",
            "location": 1697,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event_uuid": [
                    "str"
                ]
            }
        },
        "TypedAWSClient.verify_event_source_current": {
            "name": "verify_event_source_current",
            "location": 1707,
            "return": [
                "bool",
                "str",
                "Iterable[cmk.utils.type_defs.SectionName]"
            ],
            "arguments": {
                "self": [],
                "event_uuid": [
                    "str",
                    "Optional[Dict[str, bytes]]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, str]",
                    "bool"
                ],
                "resource_name": [
                    "str",
                    "Optional[str]",
                    "cmk.utils.type_defs.UserId"
                ],
                "service_name": [
                    "str",
                    "Optional[str]",
                    "cmk.utils.type_defs.UserId"
                ],
                "function_arn": [
                    "str",
                    "Optional[str]",
                    "cmk.utils.type_defs.UserId"
                ]
            }
        },
        "TypedAWSClient.verify_event_source_arn_current": {
            "name": "verify_event_source_arn_current",
            "location": 1735,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "event_uuid": [],
                "event_source_arn": [
                    "str",
                    "dict",
                    "Type[Tuple[Any, Any, Any]]",
                    "Dict[str, Any]"
                ],
                "function_arn": [
                    "str",
                    "dict",
                    "Type[Tuple[Any, Any, Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "TypedAWSClient.create_websocket_api": {
            "name": "create_websocket_api",
            "location": 1756,
            "return": [
                "Dict[str, Any]",
                "cmk.utils.type_defs.UserId",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "TypedAWSClient.get_websocket_api_id": {
            "name": "get_websocket_api_id",
            "location": 1770,
            "return": [
                "bool",
                "str",
                "Optional[Dict[str, Any]]",
                "type"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "TypedAWSClient.websocket_api_exists": {
            "name": "websocket_api_exists",
            "location": 1778,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "api_id": [
                    "int",
                    "str"
                ]
            }
        },
        "TypedAWSClient.delete_websocket_api": {
            "name": "delete_websocket_api",
            "location": 1788,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "api_id": [
                    "str"
                ]
            }
        },
        "TypedAWSClient.create_websocket_integration": {
            "name": "create_websocket_integration",
            "location": 1796,
            "return": [
                "List[Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "api_id": [
                    "str",
                    "datetime.datetime"
                ],
                "lambda_function": [
                    "str",
                    "datetime.datetime"
                ],
                "handler_type": [
                    "str",
                    "datetime.datetime"
                ]
            }
        },
        "TypedAWSClient.create_websocket_route": {
            "name": "create_websocket_route",
            "location": 1813,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "api_id": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "route_key": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "integration_id": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "TypedAWSClient.delete_websocket_routes": {
            "name": "delete_websocket_routes",
            "location": 1823,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "api_id": [
                    "int",
                    "dict",
                    "str"
                ],
                "routes": [
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "TypedAWSClient.delete_websocket_integrations": {
            "name": "delete_websocket_integrations",
            "location": 1832,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "api_id": [
                    "int",
                    "dict",
                    "str"
                ],
                "integrations": [
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "TypedAWSClient.deploy_websocket_api": {
            "name": "deploy_websocket_api",
            "location": 1841,
            "return": [
                "dict",
                "cmk.utils.type_defs.UserId",
                "purplship.providers.ups.utils.Settings",
                "List[int]",
                "Optional[Tuple]",
                "werkzeug.exceptions.HTTPException"
            ],
            "arguments": {
                "self": [],
                "api_id": [
                    "str",
                    "int"
                ]
            }
        },
        "TypedAWSClient.get_websocket_routes": {
            "name": "get_websocket_routes",
            "location": 1848,
            "return": [
                "Set[str]",
                "Iterable[str]",
                "str",
                "Dict[str, str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "api_id": [
                    "str",
                    "int",
                    "uuid.UUID"
                ]
            }
        },
        "TypedAWSClient.get_websocket_integrations": {
            "name": "get_websocket_integrations",
            "location": 1854,
            "return": [
                "List[str]",
                "str",
                "List[Dict[str, str]]",
                "Optional[Union[int, str]]",
                "bool",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "api_id": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Set[int]"
                ]
            }
        },
        "TypedAWSClient.create_stage": {
            "name": "create_stage",
            "location": 1860,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "api_id": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "stage_name": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "deployment_id": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "TypedAWSClient._call_client_method_with_retries": {
            "name": "_call_client_method_with_retries",
            "location": 1869,
            "return": [
                "Dict[str, Tuple[Any, Any]]",
                "Callable[[], None]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[Any]]"
                ],
                "kwargs": [],
                "max_attempts": [
                    "int"
                ],
                "should_retry": [
                    "int",
                    "Optional[int]"
                ],
                "delay_time": [
                    "Callable",
                    "int",
                    "Tuple[int, int, int]",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "retryable_exceptions": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TypedAWSClient._random_id": {
            "name": "_random_id",
            "location": 1905,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "chalice-master/chalice/compat.py": {
        "pip_import_string": {
            "name": "pip_import_string",
            "location": 14,
            "return": [
                "typing.Text",
                "str",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Callable",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "is_broken_pipe_error": {
            "name": "is_broken_pipe_error",
            "location": 132,
            "return": [
                "bool",
                "Dict[str, Any]",
                "str",
                "Exception"
            ],
            "arguments": {
                "error": [
                    "str",
                    "list[]",
                    "Optional[list]",
                    "None",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "mypy.errors.Errors",
                    "errors.Error"
                ]
            }
        },
        "prevent_msvc_compiling_patch": {
            "name": "prevent_msvc_compiling_patch",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "prevent_msvc_compiling_patch.raise_compile_error": {
            "name": "raise_compile_error",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "chalice-master/chalice/config.py": {
        "Config.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "chalice_stage": [
                    "str",
                    "Optional[str]"
                ],
                "function_name": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "user_provided_params": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]",
                    "typing.Any",
                    "Optional[Any]",
                    "Optional[Literal[\"only_clustered\", \"include_clustered\"]]"
                ],
                "config_from_disk": [
                    "Optional[Set[int]]",
                    "str",
                    "None",
                    "set[int]"
                ],
                "default_params": [
                    "Optional[Set[int]]",
                    "None",
                    "str",
                    "Optional[Union[str, Any]]",
                    "set[int]",
                    "Optional[str]",
                    "typing.Any"
                ],
                "layers": [
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "Config.create": {
            "name": "create",
            "location": 103,
            "return": [
                "str",
                "bool",
                "Callable",
                "int"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "int"
                ],
                "chalice_stage": [
                    "bool",
                    "int"
                ],
                "function_name": [
                    "Optional[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "Config.profile": {
            "name": "profile",
            "location": 111,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.app_name": {
            "name": "app_name",
            "location": 116,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.project_dir": {
            "name": "project_dir",
            "location": 121,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.chalice_app": {
            "name": "chalice_app",
            "location": 126,
            "return": [
                "bool",
                "Optional[str]",
                "Chalice",
                "dict[, ]",
                "dict[str, typing.Union[bool,str]]",
                "dict[str, dict[str, typing.Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.config_from_disk": {
            "name": "config_from_disk",
            "location": 147,
            "return": [
                "dict",
                "str",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.lambda_python_version": {
            "name": "lambda_python_version",
            "location": 152,
            "return": [
                "typing.Text",
                "int",
                "list",
                "bytes",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.layers": {
            "name": "layers",
            "location": 171,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.api_gateway_custom_domain": {
            "name": "api_gateway_custom_domain",
            "location": 178,
            "return": [
                "int",
                "List[int]",
                "Optional[int]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.websocket_api_custom_domain": {
            "name": "websocket_api_custom_domain",
            "location": 184,
            "return": [
                "List[int]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config._chain_lookup": {
            "name": "_chain_lookup",
            "location": 189,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "dict[, ]",
                    "dict",
                    "tuple[typing.Union[dict[, ],dict[, ]]]",
                    "bool",
                    "Tuple[dict, dict]",
                    "dict[str, typing.Union[str,typing.Any]]",
                    "Dict[str, Union[str, Any]]",
                    "Dict[str, Any]"
                ],
                "varies_per_chalice_stage": [
                    "bool",
                    "float",
                    "int",
                    "str"
                ],
                "varies_per_function": [
                    "bool",
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "Config._chain_merge": {
            "name": "_chain_merge",
            "location": 214,
            "return": [
                "dict[, ]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "Dict[str, Sequence[str]]",
                    "dict[str, typing.Sequence[str]]",
                    "Dict[str, Sequence[Any]]",
                    "dict[str, typing.Sequence[typing.Any]]",
                    "Optional[Dict]",
                    "None"
                ]
            }
        },
        "Config.config_file_version": {
            "name": "config_file_version",
            "location": 237,
            "return": [
                "str",
                "Optional[str]",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.api_gateway_stage": {
            "name": "api_gateway_stage",
            "location": 245,
            "return": [
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.api_gateway_endpoint_type": {
            "name": "api_gateway_endpoint_type",
            "location": 251,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Config.api_gateway_endpoint_vpce": {
            "name": "api_gateway_endpoint_vpce",
            "location": 257,
            "return": [
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.api_gateway_policy_file": {
            "name": "api_gateway_policy_file",
            "location": 263,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.minimum_compression_size": {
            "name": "minimum_compression_size",
            "location": 269,
            "return": [
                "Callable",
                "str",
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.iam_policy_file": {
            "name": "iam_policy_file",
            "location": 275,
            "return": [
                "str",
                "TextIO",
                "BinaryIO",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.lambda_memory_size": {
            "name": "lambda_memory_size",
            "location": 282,
            "return": [
                "Callable",
                "str",
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.lambda_timeout": {
            "name": "lambda_timeout",
            "location": 289,
            "return": [
                "List[int]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.automatic_layer": {
            "name": "automatic_layer",
            "location": 296,
            "return": [
                "bool",
                "int",
                "list[bytes]",
                "typing.DefaultDict",
                "dict[str, typing.Union[typing.Any,typing.Any]]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.iam_role_arn": {
            "name": "iam_role_arn",
            "location": 306,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.manage_iam_role": {
            "name": "manage_iam_role",
            "location": 313,
            "return": [
                "bool",
                "dict[str, typing.Any]",
                "list[dict[, ]]",
                "typing.Deque",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.autogen_policy": {
            "name": "autogen_policy",
            "location": 328,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.xray_enabled": {
            "name": "xray_enabled",
            "location": 335,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.environment_variables": {
            "name": "environment_variables",
            "location": 342,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.tags": {
            "name": "tags",
            "location": 347,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.security_group_ids": {
            "name": "security_group_ids",
            "location": 355,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.subnet_ids": {
            "name": "subnet_ids",
            "location": 362,
            "return": [
                "str",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.reserved_concurrency": {
            "name": "reserved_concurrency",
            "location": 369,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.scope": {
            "name": "scope",
            "location": 375,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "chalice_stage": [
                    "str"
                ],
                "function_name": [
                    "str"
                ]
            }
        },
        "Config.deployed_resources": {
            "name": "deployed_resources",
            "location": 391,
            "return": [
                "DeployedResources",
                "str",
                "List[dict]",
                "float"
            ],
            "arguments": {
                "self": [],
                "chalice_stage_name": [
                    "str",
                    "Container[str]",
                    "typing.Container"
                ]
            }
        },
        "Config._try_old_deployer_values": {
            "name": "_try_old_deployer_values",
            "location": 413,
            "return": [
                "int",
                "Dict[str, int]",
                "List[int]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "chalice_stage_name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "Config._load_json_file": {
            "name": "_load_json_file",
            "location": 424,
            "return": [
                "None",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "deployed_file": [
                    "str",
                    "bool"
                ]
            }
        },
        "Config._upgrade_deployed_values": {
            "name": "_upgrade_deployed_values",
            "location": 431,
            "return": [
                "DeployedResources",
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "chalice_stage_name": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "BinaryIO",
                    "Optional[object]"
                ],
                "data": [
                    "str",
                    "bool"
                ]
            }
        },
        "Config._upgrade_lambda_functions": {
            "name": "_upgrade_lambda_functions",
            "location": 441,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resources": [
                    "float"
                ],
                "deployed": [
                    "dict[str, str]",
                    "bool",
                    "Mapping",
                    "Type[Any]",
                    "Callable[..., None]",
                    "Optional[Dict[str, str]]"
                ],
                "prefix": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "Config._upgrade_rest_api": {
            "name": "_upgrade_rest_api",
            "location": 469,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resources": [
                    "list[str]",
                    "list[]",
                    "List[str]",
                    "list",
                    "Iterable[float]",
                    "str",
                    "Optional[str]"
                ],
                "deployed": [
                    "list[str]",
                    "List[str]",
                    "list[]",
                    "str",
                    "list",
                    "Iterable[float]",
                    "Optional[str]"
                ]
            }
        },
        "DeployedResources.__init__": {
            "name": "__init__",
            "location": 482,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "deployed_values": [
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "int",
                    "float"
                ]
            }
        },
        "DeployedResources.empty": {
            "name": "empty",
            "location": 491,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "DeployedResources.resource_values": {
            "name": "resource_values",
            "location": 495,
            "return": [
                "str",
                "type",
                "dict",
                "Optional[Type[Exception]]",
                "Optional[Exception]",
                "Optional[Type[BaseException]]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "DeployedResources.resource_names": {
            "name": "resource_names",
            "location": 505,
            "return": [
                "list[]",
                "List[str]",
                "Tuple[str]",
                "str",
                "FrozenSet[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "chalice-master/chalice/constants.py": {},
    "chalice-master/chalice/invoke.py": {
        "_response_is_error": {
            "name": "_response_is_error",
            "location": 17,
            "return": [
                "bool",
                "str",
                "Optional[Union[str, Any]]",
                "dict"
            ],
            "arguments": {
                "response": [
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "LambdaInvokeHandler.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "invoker": [
                    "int",
                    "float",
                    "bool"
                ],
                "formatter": [
                    "int",
                    "float",
                    "bool"
                ],
                "ui": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "LambdaInvokeHandler.invoke": {
            "name": "invoke",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "int",
                    "None",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "LambdaInvoker.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "lambda_arn": [
                    "float",
                    "bool"
                ],
                "client": [
                    "float",
                    "bool"
                ]
            }
        },
        "LambdaInvoker.invoke": {
            "name": "invoke",
            "location": 55,
            "return": [
                "Optional[str]",
                "cmk.utils.type_defs.EventRule",
                "cmk.utils.type_defs.UserId",
                "bytes",
                "Hashable"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "int",
                    "None",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "LambdaResponseFormatter.format_response": {
            "name": "format_response",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "str",
                    "tuple[typing.Union[str,int]]",
                    "purplship.core.utils.xml.Element",
                    "Tuple[str, int]"
                ]
            }
        },
        "LambdaResponseFormatter._format_error": {
            "name": "_format_error",
            "location": 78,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "formatted": [
                    "str"
                ],
                "payload": [
                    "str",
                    "Pattern",
                    "typing.Pattern"
                ]
            }
        },
        "LambdaResponseFormatter._format_stacktrace": {
            "name": "_format_stacktrace",
            "location": 93,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "formatted": [
                    "str"
                ],
                "stack_trace": [
                    "str",
                    "list[]",
                    "Optional[str]",
                    "bool",
                    "list"
                ]
            }
        },
        "LambdaResponseFormatter._format_frame": {
            "name": "_format_frame",
            "location": 99,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "formatted": [
                    "str"
                ],
                "frame": [
                    "str"
                ]
            }
        },
        "LambdaResponseFormatter._format_success": {
            "name": "_format_success",
            "location": 116,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "formatted": [
                    "str",
                    "int",
                    "float"
                ],
                "payload": [
                    "str",
                    "int",
                    "float"
                ]
            }
        }
    },
    "chalice-master/chalice/local.py": {
        "create_local_server": {
            "name": "create_local_server",
            "location": 58,
            "return": [
                "dict"
            ],
            "arguments": {
                "app_obj": [
                    "dict",
                    "bool",
                    "Sequence[int]",
                    "List[Dict]"
                ],
                "config": [
                    "int",
                    "str",
                    "bool",
                    "Optional[int]"
                ],
                "host": [
                    "int",
                    "str",
                    "bool",
                    "Optional[int]"
                ],
                "port": [
                    "int",
                    "str",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "Clock.time": {
            "name": "time",
            "location": 53,
            "return": [
                "float",
                "int",
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalARNBuilder.build_arn": {
            "name": "build_arn",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "ARNMatcher.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target_arn": [
                    "slice",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "ARNMatcher._resource_match": {
            "name": "_resource_match",
            "location": 97,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "Sequence[float]",
                    "list",
                    "str"
                ]
            }
        },
        "ARNMatcher.does_any_resource_match": {
            "name": "does_any_resource_match",
            "location": 109,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "resources": [
                    "Dict[str, Dict[str, int]]",
                    "bool"
                ]
            }
        },
        "RouteMatcher.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "route_urls": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "RouteMatcher.match_route": {
            "name": "match_route",
            "location": 126,
            "return": [
                "bool",
                "str",
                "Union[int, float, complex]",
                "list",
                "int"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "LambdaEventConverter.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "route_matcher": [
                    "int",
                    "Optional[bool]",
                    "bool",
                    "str"
                ],
                "binary_types": [
                    "str",
                    "Optional[str]",
                    "Optional[Type]"
                ]
            }
        },
        "LambdaEventConverter._is_binary": {
            "name": "_is_binary",
            "location": 174,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "Type[BaseException]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "Dict[str, str]",
                    "aiohttp.web.Request"
                ]
            }
        },
        "LambdaEventConverter.create_lambda_event": {
            "name": "create_lambda_event",
            "location": 178,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "Set[str]"
                ],
                "path": [
                    "str",
                    "Optional[str]"
                ],
                "headers": [
                    "str",
                    "Set[str]"
                ],
                "body": [
                    "Optional[str]",
                    "str",
                    "dict",
                    "Union[str, List[str]]"
                ]
            }
        },
        "LocalGatewayException.__init__": {
            "name": "__init__",
            "location": 211,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "str",
                    "bytes",
                    "Optional[Callable]"
                ],
                "body": [
                    "bool",
                    "Tuple[Any, int]",
                    "Dict[int, float]",
                    "List[str]",
                    "Optional[List[Any]]"
                ]
            }
        },
        "LambdaContext.__init__": {
            "name": "__init__",
            "location": 230,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "function_name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "memory_size": [
                    "Iterable[str]",
                    "bool",
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "max_runtime_ms": [
                    "int",
                    "Callable[[], float]",
                    "float"
                ],
                "time_source": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Optional[bool]"
                ]
            }
        },
        "LambdaContext._current_time_millis": {
            "name": "_current_time_millis",
            "location": 289,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LambdaContext.get_remaining_time_in_millis": {
            "name": "get_remaining_time_in_millis",
            "location": 293,
            "return": [
                "str",
                "Dict[str, Any]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalGatewayAuthorizer.__init__": {
            "name": "__init__",
            "location": 304,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app_object": [
                    "dict",
                    "Callable",
                    "cmk.base.config.HostConfig"
                ]
            }
        },
        "LocalGatewayAuthorizer.authorize": {
            "name": "authorize",
            "location": 309,
            "return": [
                "solo.config.app.Config",
                "int",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "raw_path": [
                    "str",
                    "Callable[[str], str]"
                ],
                "lambda_event": [
                    "str",
                    "List[float]",
                    "List[str]"
                ],
                "lambda_context": [
                    "Callable"
                ]
            }
        },
        "LocalGatewayAuthorizer._check_can_invoke_view_function": {
            "name": "_check_can_invoke_view_function",
            "location": 379,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arn": [
                    "str",
                    "int",
                    "Optional[Dict]",
                    "bool"
                ],
                "auth_result": [
                    "str",
                    "Optional[Dict]",
                    "dict",
                    "bool"
                ]
            }
        },
        "LocalGatewayAuthorizer._route_for_event": {
            "name": "_route_for_event",
            "location": 394,
            "return": [
                "Optional[bool]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "lambda_event": [
                    "str",
                    "opentrons.config.pipette_config.PipetteConfig",
                    "dict"
                ]
            }
        },
        "LocalGatewayAuthorizer._update_lambda_event": {
            "name": "_update_lambda_event",
            "location": 411,
            "return": [
                "str",
                "app.models.dto.ClientInfo",
                "dict"
            ],
            "arguments": {
                "self": [],
                "lambda_event": [
                    "bool",
                    "int",
                    "list"
                ],
                "auth_result": [
                    "dict"
                ]
            }
        },
        "LocalGatewayAuthorizer._prepare_authorizer_event": {
            "name": "_prepare_authorizer_event",
            "location": 420,
            "return": [
                "Mapping[str, Any]",
                "sideeye.config.ASCParsingConfig"
            ],
            "arguments": {
                "self": [],
                "arn": [
                    "str",
                    "bool",
                    "int"
                ],
                "lambda_event": [
                    "Callable[..., None]",
                    "bool",
                    "int",
                    "threading.Event"
                ],
                "lambda_context": [
                    "str",
                    "Sequence[str]",
                    "raiden.app.App"
                ]
            }
        },
        "LocalGatewayAuthorizer._decode_jwt_payload": {
            "name": "_decode_jwt_payload",
            "location": 436,
            "return": [
                "int",
                "bool",
                "Optional[float]",
                "Dict[str, str]",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "jwt": [
                    "str",
                    "Iterable[int]"
                ]
            }
        },
        "LocalGatewayAuthorizer._base64_pad": {
            "name": "_base64_pad",
            "location": 442,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[str]",
                    "list",
                    "str",
                    "int",
                    "List[Union[int, float]]",
                    "tuple"
                ]
            }
        },
        "LocalGateway.__init__": {
            "name": "__init__",
            "location": 455,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app_object": [
                    "cmk.base.config.HostConfig"
                ],
                "config": [
                    "sphinx.config.Config",
                    "model.Config",
                    "virgene.config.Config",
                    "dict",
                    "Config"
                ]
            }
        },
        "LocalGateway._generate_lambda_context": {
            "name": "_generate_lambda_context",
            "location": 465,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalGateway._generate_lambda_event": {
            "name": "_generate_lambda_event",
            "location": 477,
            "return": [
                "Mapping[str, Any]",
                "sideeye.config.ASCParsingConfig"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "path": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "headers": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "body": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "LocalGateway._has_user_defined_options_method": {
            "name": "_has_user_defined_options_method",
            "location": 485,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "lambda_event": [
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "LocalGateway.handle_request": {
            "name": "handle_request",
            "location": 490,
            "return": [
                "dict",
                "Exception",
                "Dict[str, str]",
                "Optional[Dict[str, Any]]",
                "Dict[str, Union[str, Set]]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "Dict[str, Any]"
                ],
                "path": [
                    "str",
                    "dict",
                    "bool"
                ],
                "headers": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "body": [
                    "str"
                ]
            }
        },
        "LocalGateway._autogen_options_headers": {
            "name": "_autogen_options_headers",
            "location": 548,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "lambda_event": [
                    "Dict[str, Any]"
                ]
            }
        },
        "ChaliceRequestHandler.__init__": {
            "name": "__init__",
            "location": 585,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [],
                "client_address": [],
                "server": [],
                "app_object": [
                    "str",
                    "Callable[..., None]"
                ],
                "config": [
                    "str",
                    "Callable[..., None]"
                ]
            }
        },
        "ChaliceRequestHandler._parse_payload": {
            "name": "_parse_payload",
            "location": 591,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChaliceRequestHandler._generic_handle": {
            "name": "_generic_handle",
            "location": 600,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ChaliceRequestHandler._handle_binary": {
            "name": "_handle_binary",
            "location": 619,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "dict"
                ]
            }
        },
        "ChaliceRequestHandler._send_error_response": {
            "name": "_send_error_response",
            "location": 626,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "error": [
                    "dict",
                    "BaseException",
                    "str",
                    "Callable"
                ]
            }
        },
        "ChaliceRequestHandler._send_http_response": {
            "name": "_send_http_response",
            "location": 633,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "code": [
                    "bytes",
                    "str",
                    "dict",
                    "Optional[str]",
                    "List[Tuple[str, str]]",
                    "int",
                    "Optional[bytes]"
                ],
                "headers": [
                    "bytes",
                    "str",
                    "dict",
                    "Optional[str]",
                    "List[Tuple[str, str]]",
                    "int",
                    "Optional[bytes]"
                ],
                "body": [
                    "Callable[..., None]",
                    "Optional[Type[Any]]",
                    "Optional[dict]",
                    "str",
                    "List[int]"
                ]
            }
        },
        "ChaliceRequestHandler._send_http_response_with_body": {
            "name": "_send_http_response_with_body",
            "location": 640,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "code": [
                    "Optional[str]",
                    "str",
                    "Sequence[Tuple[str, int]]"
                ],
                "headers": [
                    "str",
                    "int",
                    "MutableMapping"
                ],
                "body": [
                    "\"ks.Series[str]\"",
                    "str",
                    "List[int]"
                ]
            }
        },
        "ChaliceRequestHandler._send_http_response_no_body": {
            "name": "_send_http_response_no_body",
            "location": 655,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "int",
                    "Optional[Dict]",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "headers": [
                    "str",
                    "Callable[[], bool]",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "ChaliceRequestHandler._send_headers": {
            "name": "_send_headers",
            "location": 661,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, Any]",
                    "flask.Request",
                    "List[\"libkol.types.ItemQuantity\"]",
                    "Dict[int, Dict[str, Any]]"
                ]
            }
        },
        "LocalDevServer.__init__": {
            "name": "__init__",
            "location": 686,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app_object": [
                    "nucypher.cli.config.GroupGeneralConfig",
                    "str",
                    "Optional[str]",
                    "cmk.base.config.HostConfig"
                ],
                "config": [
                    "bool",
                    "Config",
                    "rl_algorithms.utils.config.ConfigDict",
                    "Optional[bool]"
                ],
                "host": [
                    "int",
                    "bool",
                    "str"
                ],
                "port": [
                    "int",
                    "str",
                    "Optional[Union[int, float]]",
                    "bool"
                ],
                "handler_cls": [
                    "bool",
                    "Config",
                    "rl_algorithms.utils.config.ConfigDict",
                    "Optional[bool]"
                ],
                "server_cls": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "LocalDevServer.handle_single_request": {
            "name": "handle_single_request",
            "location": 697,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalDevServer.serve_forever": {
            "name": "serve_forever",
            "location": 701,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalDevServer.shutdown": {
            "name": "shutdown",
            "location": 706,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPServerThread.__init__": {
            "name": "__init__",
            "location": 721,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "server_factory": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "HTTPServerThread.run": {
            "name": "run",
            "location": 728,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPServerThread.shutdown": {
            "name": "shutdown",
            "location": 733,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalChalice.current_request": {
            "name": "current_request",
            "location": 754,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        }
    },
    "chalice-master/chalice/logs.py": {
        "display_logs": {
            "name": "display_logs",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "retriever": [
                    "List[str]",
                    "hackathon.utils.utils.ResultsMessage",
                    "List[Optional[str]]"
                ],
                "stream": [
                    "str",
                    "bytes",
                    "Union[str, int]"
                ],
                "retrieve_options": [
                    "list[str]",
                    "List[str]",
                    "list[typing.Optional[str]]",
                    "hackathon.utils.utils.ResultsMessage",
                    "List[Optional[str]]"
                ]
            }
        },
        "LogRetrieveOptions.create": {
            "name": "create",
            "location": 26,
            "return": [
                "dict",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "float",
                    "typing.Callable[, ]",
                    "robot_server.service.session.session_types.base_session.SessionMetaData",
                    "robot_server.service.session.configuration.SessionConfiguration",
                    "Callable"
                ],
                "follow": [
                    "bool",
                    "Type[T]",
                    "Type[tuple]",
                    "int",
                    "Dict[str, str]",
                    "Dict[str, bool]",
                    "str"
                ],
                "since": [
                    "str",
                    "None",
                    "Optional[\"Texte\"]",
                    "list[str]",
                    "List[str]",
                    "typing.Any",
                    "Optional[Any]",
                    "Optional[str]"
                ]
            }
        },
        "LogRetriever.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "log_event_generator": [
                    "bytes",
                    "bool",
                    "datetime",
                    "typing.Sequence[int]",
                    "Sequence[int]",
                    "Exception",
                    "Optional[Exception]",
                    "None"
                ],
                "log_group_name": [
                    "str",
                    "dict[, ]",
                    "dict",
                    "None",
                    "Optional[str]",
                    "Union[str, Iterable[str]]"
                ]
            }
        },
        "LogRetriever.create_from_lambda_arn": {
            "name": "create_from_lambda_arn",
            "location": 61,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "Exception",
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "log_event_generator": [
                    "Exception",
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "lambda_arn": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Dict[str, str]"
                ]
            }
        },
        "LogRetriever._is_lambda_message": {
            "name": "_is_lambda_message",
            "location": 78,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "list[dict[, ]]",
                    "List[dict]",
                    "list[]",
                    "Dict[Hashable, Any]",
                    "list",
                    "Dict[str, Any]"
                ]
            }
        },
        "LogRetriever.retrieve_logs": {
            "name": "retrieve_logs",
            "location": 95,
            "return": [
                "typing.Generator[]",
                "int",
                "None",
                "bytes",
                "raiden.utils.Signature"
            ],
            "arguments": {
                "self": [],
                "retrieve_options": [
                    "str",
                    "float",
                    "int",
                    "bool"
                ]
            }
        },
        "BaseLogEventGenerator.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "float",
                    "utils.clienClient"
                ]
            }
        },
        "BaseLogEventGenerator.iter_log_events": {
            "name": "iter_log_events",
            "location": 146,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "log_group_name": [
                    "str",
                    "bool",
                    "List[Dict]",
                    "list[dict[, ]]"
                ],
                "options": [
                    "str",
                    "bool",
                    "List[Dict]",
                    "list[dict[, ]]"
                ]
            }
        },
        "LogEventGenerator.iter_log_events": {
            "name": "iter_log_events",
            "location": 152,
            "return": [
                "",
                "typing.Generator[typing.Text]"
            ],
            "arguments": {
                "self": [],
                "log_group_name": [
                    "str"
                ],
                "options": [
                    "str"
                ]
            }
        },
        "FollowLogEventGenerator.__init__": {
            "name": "__init__",
            "location": 164,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "sleep": [
                    "int",
                    "Optional[str]",
                    "str"
                ],
                "poll_time": [
                    "str",
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "List[int]",
                    "Optional[int]"
                ]
            }
        },
        "FollowLogEventGenerator.iter_log_events": {
            "name": "iter_log_events",
            "location": 172,
            "return": [
                "int",
                "typing.Generator[]",
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "log_group_name": [
                    "str",
                    "grouper.models.base.session.Session"
                ],
                "options": [
                    "str",
                    "int"
                ]
            }
        },
        "FollowLogEventGenerator._loop_on_filter_log_events": {
            "name": "_loop_on_filter_log_events",
            "location": 182,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "log_group_name": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None",
                    "bool"
                ],
                "start_time": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None",
                    "bool"
                ]
            }
        },
        "FollowLogEventGenerator._in_cache": {
            "name": "_in_cache",
            "location": 220,
            "return": [
                "bool",
                "\"Task\"",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Dict[str, Any]",
                    "Optional[Dict]"
                ]
            }
        },
        "FollowLogEventGenerator._add_to_cache": {
            "name": "_add_to_cache",
            "location": 224,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict",
                    "Union['AbstractSetIntStr', 'MappingIntStrAny']",
                    "Iterator[dict]",
                    "Dict[str, float]"
                ]
            }
        },
        "FollowLogEventGenerator._prune_old_cache_entries": {
            "name": "_prune_old_cache_entries",
            "location": 228,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "AsyncGenerator",
                    "collections.abc.AsyncGenerator"
                ]
            }
        }
    },
    "chalice-master/chalice/package.py": {
        "create_app_packager": {
            "name": "create_app_packager",
            "location": 29,
            "return": [
                "AppPackager",
                "type",
                "Config",
                "Optional[dict]"
            ],
            "arguments": {
                "config": [
                    "str",
                    "Dict[str, Dict[str, str]]",
                    "dict[str, dict[str, str]]"
                ],
                "options": [
                    "str",
                    "int",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "bool"
                ],
                "package_format": [
                    "typing.Text",
                    "str",
                    "bool",
                    "int",
                    "List[str]"
                ],
                "template_format": [
                    "typing.Text",
                    "str",
                    "Union[str, BinaryIO]"
                ],
                "merge_template": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]"
                ]
            }
        },
        "PackageOptions.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "float",
                    "utils.clienClient"
                ]
            }
        },
        "PackageOptions.service_principal": {
            "name": "service_principal",
            "location": 92,
            "return": [
                "bool",
                "str",
                "purplship.core.utils.xml.Element"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "dict",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "ResourceBuilder.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "application_builder": [
                    "bool",
                    "str",
                    "Optional[List[Any]]",
                    "list[typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "deps_builder": [
                    "bool",
                    "str",
                    "Optional[List[Any]]",
                    "list[typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "build_stage": [
                    "List[str]",
                    "int",
                    "list[str]",
                    "Optional[str]",
                    "str",
                    "Dict[str, Any]",
                    "None",
                    "Optional[Tuple[str, str]]",
                    "dict[str, typing.Any]",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        },
        "ResourceBuilder.construct_resources": {
            "name": "construct_resources",
            "location": 112,
            "return": [
                "dict[str, typing.Any]",
                "int",
                "dict[str, typing.Type]",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "str",
                    "robotica.types.Config",
                    "None"
                ],
                "chalice_stage_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "TemplateGenerator.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "int",
                    "sphinx.config.Config",
                    "model.Config",
                    "virgene.config.Config",
                    "_pytesconfig.Config",
                    "\"Step\""
                ],
                "options": [
                    "bool",
                    "None",
                    "list[dict[, ]]",
                    "Optional[bool]",
                    "isorsettings.Config",
                    "List[dict]",
                    "config.ConfigFile"
                ]
            }
        },
        "TemplateGenerator.dispatch": {
            "name": "dispatch",
            "location": 132,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "Type",
                    "typing.Type"
                ],
                "template": [
                    "str",
                    "int",
                    "Exception"
                ]
            }
        },
        "TemplateGenerator.generate": {
            "name": "generate",
            "location": 138,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resources": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TemplateGenerator._generate_filebasediampolicy": {
            "name": "_generate_filebasediampolicy",
            "location": 142,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "list",
                    "list[]",
                    "List[Type]",
                    "list[typing.Type]",
                    "List[str]",
                    "list[str]"
                ],
                "template": [
                    "list",
                    "list[]",
                    "List[Type]",
                    "list[typing.Type]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "TemplateGenerator._generate_autogeniampolicy": {
            "name": "_generate_autogeniampolicy",
            "location": 146,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "list",
                    "list[]",
                    "List[Type]",
                    "list[typing.Type]",
                    "List[str]",
                    "list[str]"
                ],
                "template": [
                    "list",
                    "list[]",
                    "List[Type]",
                    "list[typing.Type]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "TemplateGenerator._generate_deploymentpackage": {
            "name": "_generate_deploymentpackage",
            "location": 150,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "list",
                    "list[]",
                    "List[Type]",
                    "list[typing.Type]",
                    "List[str]",
                    "list[str]"
                ],
                "template": [
                    "list",
                    "list[]",
                    "List[Type]",
                    "list[typing.Type]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "TemplateGenerator._generate_precreatediamrole": {
            "name": "_generate_precreatediamrole",
            "location": 154,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "list",
                    "list[]",
                    "List[Type]",
                    "list[typing.Type]",
                    "List[str]",
                    "list[str]"
                ],
                "template": [
                    "list",
                    "list[]",
                    "List[Type]",
                    "list[typing.Type]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "TemplateGenerator._default": {
            "name": "_default",
            "location": 158,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "Exception",
                    "mypy.nodes.TypeInfo"
                ],
                "template": [
                    "list",
                    "bool",
                    "list[]",
                    "Sequence[Tuple[int, int]]",
                    "typing.Sequence[tuple[typing.Union[int,int]]]",
                    "List[Type]",
                    "list[typing.Type]"
                ]
            }
        },
        "SAMTemplateGenerator.__init__": {
            "name": "__init__",
            "location": 173,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[, ]",
                    "dict",
                    "str",
                    "typing.Sequence[int]",
                    "Sequence[int]",
                    "nucypher.config.characters.UrsulaConfiguration"
                ],
                "options": [
                    "dict[, ]",
                    "dict",
                    "str",
                    "typing.Sequence[int]",
                    "Sequence[int]",
                    "nucypher.config.characters.UrsulaConfiguration"
                ]
            }
        },
        "SAMTemplateGenerator.generate": {
            "name": "generate",
            "location": 179,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "resources": [
                    "str",
                    "int",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "SAMTemplateGenerator._generate_lambdalayer": {
            "name": "_generate_lambdalayer",
            "location": 187,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "Type",
                    "typing.Type",
                    "Set[util.image.models.ImageType]",
                    "set[T]"
                ],
                "template": [
                    "str",
                    "float",
                    "Iterable[str]"
                ]
            }
        },
        "SAMTemplateGenerator._generate_scheduledevent": {
            "name": "_generate_scheduledevent",
            "location": 201,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "Type",
                    "None",
                    "typing.Type"
                ],
                "template": [
                    "str",
                    "Optional[str]",
                    "BaseException",
                    "Exception",
                    "Type[BaseException]",
                    "type"
                ]
            }
        },
        "SAMTemplateGenerator._generate_cloudwatchevent": {
            "name": "_generate_cloudwatchevent",
            "location": 217,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "Type",
                    "None",
                    "typing.Type"
                ],
                "template": [
                    "str",
                    "Optional[str]",
                    "BaseException",
                    "Exception",
                    "Type[BaseException]",
                    "type"
                ]
            }
        },
        "SAMTemplateGenerator._generate_lambdafunction": {
            "name": "_generate_lambdafunction",
            "location": 235,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "typing.Mapping",
                    "str",
                    "Mapping[str, str]",
                    "int",
                    "typing.Type",
                    "Type",
                    "astroid.nodes.ClassDef"
                ],
                "template": [
                    "str",
                    "int",
                    "Exception"
                ]
            }
        },
        "SAMTemplateGenerator._add_iam_role": {
            "name": "_add_iam_role",
            "location": 287,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "int",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "cfn_resource": [
                    "str",
                    "dict"
                ]
            }
        },
        "SAMTemplateGenerator._generate_restapi": {
            "name": "_generate_restapi",
            "location": 302,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "typing.Callable[str, str]",
                    "mypy.nodes.ClassDef",
                    "typing.Sequence[typing.Any]",
                    "Callable[[str], str]",
                    "Sequence[Any]"
                ],
                "template": [
                    "str",
                    "int",
                    "Callable",
                    "Dict[str, int]",
                    "float"
                ]
            }
        },
        "SAMTemplateGenerator._inject_restapi_outputs": {
            "name": "_inject_restapi_outputs",
            "location": 358,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "mypy.nodes.Context",
                    "mypy.nodes.NameExpr"
                ]
            }
        },
        "SAMTemplateGenerator._add_websocket_lambda_integration": {
            "name": "_add_websocket_lambda_integration",
            "location": 392,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "api_ref": [
                    "int",
                    "typing.Callable[, ]",
                    "Callable",
                    "zam_repondeur.services.fetch.an.dossiers.models.DossierRef"
                ],
                "websocket_handler": [
                    "int",
                    "typing.Callable[, ]",
                    "Callable",
                    "zam_repondeur.services.fetch.an.dossiers.models.DossierRef"
                ],
                "resources": [
                    "int",
                    "Callable",
                    "zam_repondeur.services.fetch.an.dossiers.models.DossierRef"
                ]
            }
        },
        "SAMTemplateGenerator._add_websocket_lambda_invoke_permission": {
            "name": "_add_websocket_lambda_invoke_permission",
            "location": 417,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "api_ref": [
                    "Dict[str, Any]",
                    "Exception",
                    "dict[str, typing.Any]"
                ],
                "websocket_handler": [
                    "Dict[str, Any]",
                    "Exception",
                    "dict[str, typing.Any]"
                ],
                "resources": [
                    "Dict[str, Any]",
                    "Exception"
                ]
            }
        },
        "SAMTemplateGenerator._add_websocket_lambda_integrations": {
            "name": "_add_websocket_lambda_integrations",
            "location": 437,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "api_ref": [
                    "str",
                    "bytes",
                    "models.scenes.scenes_base.Scene"
                ],
                "resources": [
                    "int"
                ]
            }
        },
        "SAMTemplateGenerator._create_route_for_key": {
            "name": "_create_route_for_key",
            "location": 451,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Union[str,dict[str, typing.Any],dict[, ],None,dict[typing.Text, list[typing.Union[typing.Text,list[typing.Union[typing.Text,dict[typing.Text, typing.Text]]]]]]]]]]",
                "cmk.utils.type_defs.EventRule",
                "Dict[str, Union[str, Set]]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "route_key": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[Dict]",
                    "dict[, ]",
                    "dict",
                    "None"
                ],
                "api_ref": [
                    "str"
                ]
            }
        },
        "SAMTemplateGenerator._generate_websocketapi": {
            "name": "_generate_websocketapi",
            "location": 475,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "Union[str, List[str]]",
                    "list[str]",
                    "Type",
                    "typing.Type",
                    "Set[util.image.models.ImageType]",
                    "set[T]",
                    "taxonomy.db.models.Taxon",
                    "typing.Container",
                    "Container[\"Taxon\"]"
                ],
                "template": [
                    "str",
                    "type",
                    "mypy.nodes.Context"
                ]
            }
        },
        "SAMTemplateGenerator._inject_websocketapi_outputs": {
            "name": "_inject_websocketapi_outputs",
            "location": 517,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "mypy.nodes.Context",
                    "mypy.nodes.NameExpr"
                ]
            }
        },
        "SAMTemplateGenerator._generate_managediamrole": {
            "name": "_generate_managediamrole",
            "location": 572,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "Type",
                    "typing.Type",
                    "int",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "str",
                    "None",
                    "astroid.nodes.ClassDef"
                ],
                "template": [
                    "str",
                    "Set[util.image.models.ImageType]",
                    "cmk.utils.type_defs.CheckPluginName.Str",
                    "int"
                ]
            }
        },
        "SAMTemplateGenerator._generate_s3bucketnotification": {
            "name": "_generate_s3bucketnotification",
            "location": 589,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "list",
                    "list[]",
                    "bool",
                    "List[Tuple[int, str]]",
                    "list[tuple[typing.Union[int,str]]]",
                    "List[str]",
                    "list[str]"
                ],
                "template": [
                    "list",
                    "list[]",
                    "bool",
                    "List[Tuple[int, str]]",
                    "list[tuple[typing.Union[int,str]]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "SAMTemplateGenerator._generate_snslambdasubscription": {
            "name": "_generate_snslambdasubscription",
            "location": 599,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "Type",
                    "typing.Type",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "template": [
                    "str",
                    "Optional[str]",
                    "BaseException",
                    "Exception",
                    "Type[BaseException]",
                    "type"
                ]
            }
        },
        "SAMTemplateGenerator._generate_sqseventsource": {
            "name": "_generate_sqseventsource",
            "location": 626,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "Type",
                    "typing.Type",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "template": [
                    "str",
                    "Optional[str]",
                    "BaseException",
                    "Exception",
                    "Type[BaseException]",
                    "type"
                ]
            }
        },
        "SAMTemplateGenerator._generate_kinesiseventsource": {
            "name": "_generate_kinesiseventsource",
            "location": 653,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "Type",
                    "typing.Type",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "template": [
                    "str",
                    "Optional[str]",
                    "BaseException",
                    "Exception",
                    "Type[BaseException]",
                    "type"
                ]
            }
        },
        "SAMTemplateGenerator._generate_dynamodbeventsource": {
            "name": "_generate_dynamodbeventsource",
            "location": 680,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "Type",
                    "typing.Type",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "template": [
                    "str",
                    "Optional[str]",
                    "BaseException",
                    "Exception",
                    "Type[BaseException]",
                    "type"
                ]
            }
        },
        "SAMTemplateGenerator._generate_apimapping": {
            "name": "_generate_apimapping",
            "location": 701,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "list",
                    "list[]",
                    "List[Type]",
                    "list[typing.Type]",
                    "List[str]",
                    "list[str]"
                ],
                "template": [
                    "list",
                    "list[]",
                    "List[Type]",
                    "list[typing.Type]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "SAMTemplateGenerator._generate_domainname": {
            "name": "_generate_domainname",
            "location": 705,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "list",
                    "list[]",
                    "List[Type]",
                    "list[typing.Type]",
                    "List[str]",
                    "list[str]"
                ],
                "template": [
                    "list",
                    "list[]",
                    "List[Type]",
                    "list[typing.Type]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "SAMTemplateGenerator._add_domain_name": {
            "name": "_add_domain_name",
            "location": 709,
            "return": [
                "None",
                "faustypes.models.ModelT",
                "Optional[str]",
                "Dict[str, Any]",
                "Iterator[Tuple[str, str]]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "typing.Type",
                    "type",
                    "Type[Any]"
                ],
                "template": [
                    "str",
                    "Type"
                ]
            }
        },
        "SAMTemplateGenerator._add_websocket_domain_name": {
            "name": "_add_websocket_domain_name",
            "location": 747,
            "return": [
                "None",
                "faustypes.models.ModelT",
                "Iterator[Tuple[str, str]]",
                "Optional[str]",
                "Dict[str, Any]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str"
                ],
                "template": [
                    "str",
                    "dict"
                ]
            }
        },
        "SAMTemplateGenerator._register_cfn_resource_name": {
            "name": "_register_cfn_resource_name",
            "location": 776,
            "return": [
                "str",
                "Type",
                "dict[, ]",
                "zerver.models.Realm",
                "typing.Type",
                "Callable[..., T]",
                "set[str]",
                "Optional[str]",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "TerraformGenerator.__init__": {
            "name": "__init__",
            "location": 791,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "str",
                    "typing.Sequence[]",
                    "Sequence",
                    "Config",
                    "pyramid.config.Configurator"
                ],
                "options": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "str",
                    "typing.Sequence[]",
                    "Sequence",
                    "Config",
                    "pyramid.config.Configurator"
                ]
            }
        },
        "TerraformGenerator.generate": {
            "name": "generate",
            "location": 796,
            "return": [
                "dict[typing.Text, typing.Union[dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, dict[typing.Text, typing.Text]]]],dict[typing.Text, dict[typing.Text, dict[typing.Text, dict[typing.Text, ]]]]]]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "resources": [
                    "str",
                    "int",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TerraformGenerator._fref": {
            "name": "_fref",
            "location": 827,
            "return": [
                "typing.Text",
                "str",
                "cmk.utils.type_defs.HostName",
                "dict",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "lambda_function": [
                    "str",
                    "Dict[str, List[str]]",
                    "dict[str, list[str]]",
                    "Optional[List[Any]]",
                    "list[typing.Any]",
                    "None"
                ],
                "attr": [
                    "typing.Text",
                    "str",
                    "Dict[str, List[str]]",
                    "Optional[List[Any]]"
                ]
            }
        },
        "TerraformGenerator._arnref": {
            "name": "_arnref",
            "location": 832,
            "return": [
                "str",
                "List[List[int]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "arn_template": [
                    "mypy.nodes.Expression",
                    "str",
                    "dict"
                ]
            }
        },
        "TerraformGenerator._generate_managediamrole": {
            "name": "_generate_managediamrole",
            "location": 841,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ],
                "template": [
                    "str",
                    "Type",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "TerraformGenerator._add_websocket_lambda_integration": {
            "name": "_add_websocket_lambda_integration",
            "location": 860,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "websocket_api_id": [
                    "str"
                ],
                "websocket_handler": [
                    "str",
                    "list",
                    "list[]",
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ],
                "template": [
                    "str"
                ]
            }
        },
        "TerraformGenerator._add_websocket_lambda_invoke_permission": {
            "name": "_add_websocket_lambda_invoke_permission",
            "location": 883,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "websocket_api_id": [
                    "str"
                ],
                "websocket_handler": [
                    "str",
                    "bytes",
                    "List[str]",
                    "list[str]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "template": [
                    "str"
                ]
            }
        },
        "TerraformGenerator._add_websockets_route": {
            "name": "_add_websockets_route",
            "location": 903,
            "return": [
                "typing.Text",
                "bool",
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "websocket_api_id": [
                    "str",
                    "ocspdash.models.Authority"
                ],
                "route_key": [
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "typing.Mapping",
                    "None"
                ],
                "template": [
                    "str",
                    "ocspdash.models.Authority"
                ]
            }
        },
        "TerraformGenerator._add_websocket_domain_name": {
            "name": "_add_websocket_domain_name",
            "location": 929,
            "return": [
                "None",
                "faustypes.models.ModelT",
                "Iterator[Tuple[str, str]]",
                "Optional[str]",
                "Dict[str, Any]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "websocket_api_id": [
                    "str"
                ],
                "resource": [
                    "str",
                    "Optional[str]",
                    "None",
                    "int",
                    "Optional[int]",
                    "list[str]",
                    "Union[None, List[str]]",
                    "bool"
                ],
                "template": [
                    "str"
                ]
            }
        },
        "TerraformGenerator._inject_websocketapi_outputs": {
            "name": "_inject_websocketapi_outputs",
            "location": 959,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "websocket_api_id": [
                    "str",
                    "int",
                    "Union[int,str]"
                ],
                "template": [
                    "str",
                    "models.combaai_impl.AIType",
                    "Union[str, Tuple[str, ...]]"
                ]
            }
        },
        "TerraformGenerator._generate_websocketapi": {
            "name": "_generate_websocketapi",
            "location": 1002,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "typing.Mapping",
                    "Mapping[str, str]",
                    "None",
                    "Optional[zerver.models.Stream]",
                    "mypy.nodes.FuncBase"
                ],
                "template": [
                    "str",
                    "Exception",
                    "Dict[str, Any]",
                    "Callable",
                    "bool"
                ]
            }
        },
        "TerraformGenerator._generate_s3bucketnotification": {
            "name": "_generate_s3bucketnotification",
            "location": 1057,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "mypy.nodes.MypyFile"
                ],
                "template": [
                    "str",
                    "Type",
                    "Optional[zerver.models.Stream]",
                    "dict"
                ]
            }
        },
        "TerraformGenerator._generate_sqseventsource": {
            "name": "_generate_sqseventsource",
            "location": 1095,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "typing.Type",
                    "type",
                    "typing.Iterable[A]",
                    "esm.models.service_instance.ServiceInstance",
                    "Type",
                    "Iterable[viewer.models.Archive]"
                ],
                "template": [
                    "mypy.nodes.ClassDef",
                    "Type",
                    "node.Node",
                    "Callable",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "TerraformGenerator._generate_kinesiseventsource": {
            "name": "_generate_kinesiseventsource",
            "location": 1114,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "int",
                    "Union[mypy.nodes.FuncDef, mypy.nodes.OverloadedFuncDef, mypy.nodes.Decorator]",
                    "x509_pki.models.Certificate"
                ],
                "template": [
                    "str",
                    "Union[mypy.nodes.FuncDef, mypy.nodes.OverloadedFuncDef, mypy.nodes.Decorator]",
                    "int",
                    "x509_pki.models.Certificate"
                ]
            }
        },
        "TerraformGenerator._generate_dynamodbeventsource": {
            "name": "_generate_dynamodbeventsource",
            "location": 1129,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "int",
                    "Node",
                    "str",
                    "float",
                    "Optional[float]",
                    "None"
                ],
                "template": [
                    "str",
                    "int",
                    "Node",
                    "Optional[float]"
                ]
            }
        },
        "TerraformGenerator._generate_snslambdasubscription": {
            "name": "_generate_snslambdasubscription",
            "location": 1141,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "Exception"
                ],
                "template": [
                    "str",
                    "Type",
                    "taxonomy.db.models.Taxon",
                    "Container[\"Taxon\"]"
                ]
            }
        },
        "TerraformGenerator._generate_cloudwatchevent": {
            "name": "_generate_cloudwatchevent",
            "location": 1165,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "typing.Any",
                    "mypy.nodes.Context",
                    "list[str]",
                    "Any",
                    "Union[str, List[str]]"
                ],
                "template": [
                    "str",
                    "list[str]",
                    "mypy.nodes.Context",
                    "Any",
                    "Union[str, List[str]]"
                ]
            }
        },
        "TerraformGenerator._generate_scheduledevent": {
            "name": "_generate_scheduledevent",
            "location": 1176,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "typing.Type",
                    "Type",
                    "typing.Container",
                    "taxonomy.db.models.Taxon",
                    "list[str]",
                    "Container[\"Taxon\"]",
                    "Union[str, List[str]]"
                ],
                "template": [
                    "str",
                    "list[str]",
                    "Type",
                    "taxonomy.db.models.Taxon",
                    "Container[\"Taxon\"]",
                    "Union[str, List[str]]"
                ]
            }
        },
        "TerraformGenerator._cwe_helper": {
            "name": "_cwe_helper",
            "location": 1188,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "typing.Container",
                    "taxonomy.db.models.Taxon",
                    "list[str]",
                    "Container[\"Taxon\"]",
                    "Union[str, List[str]]"
                ],
                "template": [
                    "str",
                    "list[str]",
                    "taxonomy.db.models.Taxon",
                    "Container[\"Taxon\"]",
                    "Union[str, List[str]]"
                ]
            }
        },
        "TerraformGenerator._generate_lambdalayer": {
            "name": "_generate_lambdalayer",
            "location": 1208,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "typing.Type",
                    "Type",
                    "Exception",
                    "x509_pki.models.Certificate",
                    "None",
                    "Optional[zerver.models.Stream]"
                ],
                "template": [
                    "x509_pki.models.Certificate",
                    "bool",
                    "int"
                ]
            }
        },
        "TerraformGenerator._generate_lambdafunction": {
            "name": "_generate_lambdafunction",
            "location": 1219,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "typing.Type",
                    "Type",
                    "Exception",
                    "None",
                    "Type[Exception]",
                    "Optional[zerver.models.Stream]"
                ],
                "template": [
                    "str",
                    "Union[str, List[str]]",
                    "list[str]"
                ]
            }
        },
        "TerraformGenerator._generate_restapi": {
            "name": "_generate_restapi",
            "location": 1269,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "mypy.nodes.CallExpr"
                ],
                "template": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "TerraformGenerator._add_domain_name": {
            "name": "_add_domain_name",
            "location": 1349,
            "return": [
                "None",
                "faustypes.models.ModelT",
                "Optional[str]",
                "Dict[str, Any]",
                "Iterator[Tuple[str, str]]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "typing.Type",
                    "type",
                    "deeplearning.ml4pl.models.batch.BatchIterator",
                    "Type[Any]",
                    "util.image.models.ImageType"
                ],
                "template": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Type"
                ]
            }
        },
        "TerraformGenerator._add_domain_name_outputs": {
            "name": "_add_domain_name_outputs",
            "location": 1382,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "domain_resource_name": [
                    "str"
                ],
                "endpoint_type": [
                    "str"
                ],
                "template": [
                    "str",
                    "Optional[str]",
                    "Type"
                ]
            }
        },
        "TerraformGenerator._generate_apimapping": {
            "name": "_generate_apimapping",
            "location": 1401,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "list",
                    "list[]",
                    "List[Type]",
                    "list[typing.Type]",
                    "List[str]",
                    "list[str]"
                ],
                "template": [
                    "list",
                    "list[]",
                    "List[Type]",
                    "list[typing.Type]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "TerraformGenerator._generate_domainname": {
            "name": "_generate_domainname",
            "location": 1405,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "list",
                    "list[]",
                    "List[Type]",
                    "list[typing.Type]",
                    "List[str]",
                    "list[str]"
                ],
                "template": [
                    "list",
                    "list[]",
                    "List[Type]",
                    "list[typing.Type]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "AppPackager.__init__": {
            "name": "__init__",
            "location": 1411,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "templater": [
                    "str",
                    "int",
                    "dict[, ]",
                    "dict[str, str]",
                    "dict",
                    "bool",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ],
                "resource_builder": [
                    "str",
                    "int",
                    "os.PathLike"
                ],
                "post_processor": [
                    "int",
                    "str"
                ],
                "template_serializer": [
                    "str",
                    "bytes"
                ],
                "osutils": [
                    "str",
                    "int",
                    "dict[, ]",
                    "dict[str, str]",
                    "dict",
                    "bool",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "AppPackager._to_json": {
            "name": "_to_json",
            "location": 1425,
            "return": [
                "Dict[str, Any]",
                "ajapaik.ajapaik.models.Album",
                "float",
                "hackathon.utils.utils.DataMessage"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "float",
                    "str",
                    "dict",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "AppPackager._to_yaml": {
            "name": "_to_yaml",
            "location": 1429,
            "return": [
                "str",
                "bool",
                "List[dict]",
                "float"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "Callable[[Mapping], Awaitable]",
                    "typing.Callable[typing.Mapping, collections.abc.Awaitable[]]",
                    "Optional[list]",
                    "list[]",
                    "Set[str]",
                    "None",
                    "set[str]"
                ]
            }
        },
        "AppPackager.package_app": {
            "name": "package_app",
            "location": 1433,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "cerise.config.Config",
                    "sphinx.config.Config",
                    "pyramid.config.Configurator",
                    "entity_embeddings.Config",
                    "cmk.utils.type_defs.OptionalConfigSerial"
                ],
                "outdir": [
                    "bool",
                    "str",
                    "cmk.utils.type_defs.UserId",
                    "dict[, ]",
                    "dss.config.Replica",
                    "dict"
                ],
                "chalice_stage_name": [
                    "cerise.config.Config",
                    "sphinx.config.Config",
                    "pyramid.config.Configurator",
                    "entity_embeddings.Config",
                    "cmk.utils.type_defs.OptionalConfigSerial"
                ]
            }
        },
        "TemplatePostProcessor.__init__": {
            "name": "__init__",
            "location": 1456,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "osutils": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "TemplatePostProcessor.process": {
            "name": "process",
            "location": 1460,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "bool"
                ],
                "config": [
                    "str",
                    "bool"
                ],
                "outdir": [
                    "str",
                    "bool"
                ],
                "chalice_stage_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "SAMCodeLocationPostProcessor.process": {
            "name": "process",
            "location": 1467,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[Tuple[str, str]]",
                    "list[tuple[typing.Union[str,str]]]"
                ],
                "config": [
                    "str",
                    "bool"
                ],
                "outdir": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[Tuple[str, str]]",
                    "list[tuple[typing.Union[str,str]]]"
                ],
                "chalice_stage_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "SAMCodeLocationPostProcessor._fixup_deployment_package": {
            "name": "_fixup_deployment_package",
            "location": 1471,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "mypy.nodes.SymbolTable"
                ],
                "outdir": [
                    "str",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "TerraformCodeLocationPostProcessor.process": {
            "name": "process",
            "location": 1497,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "list[str]",
                    "Dict[str, Any]",
                    "bool",
                    "Mapping[str, str]",
                    "List[str]"
                ],
                "config": [
                    "str",
                    "bool"
                ],
                "outdir": [
                    "str",
                    "bool"
                ],
                "chalice_stage_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "TemplateMergePostProcessor.__init__": {
            "name": "__init__",
            "location": 1522,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "osutils": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ],
                "merger": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "Optional[int]",
                    "None"
                ],
                "template_serializer": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ],
                "merge_template": [
                    "bool",
                    "None",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TemplateMergePostProcessor.process": {
            "name": "process",
            "location": 1534,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "Optional[Iterable[T]]",
                    "bool",
                    "zerver.models.Realm.Domain",
                    "trezor.utils.Writer",
                    "str"
                ],
                "config": [
                    "str",
                    "bool"
                ],
                "outdir": [
                    "str",
                    "bool"
                ],
                "chalice_stage_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "TemplateMergePostProcessor._load_template_to_merge": {
            "name": "_load_template_to_merge",
            "location": 1543,
            "return": [
                "Callable[[Any], bool]",
                "contests.models.Submission",
                "str",
                "int",
                "dict[typing.Any, str]",
                "dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompositePostProcessor.__init__": {
            "name": "__init__",
            "location": 1556,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "processors": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "CompositePostProcessor.process": {
            "name": "process",
            "location": 1560,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "dict[, ]",
                    "None",
                    "config.Config",
                    "cmk.utils.type_defs.ServiceName",
                    "cmk.base.config.ConfigCache",
                    "cmk.utils.type_defs.HostName",
                    "dict",
                    "Optional[Iterable[str]]"
                ],
                "config": [
                    "dict[, ]",
                    "None",
                    "config.Config",
                    "cmk.utils.type_defs.ServiceName",
                    "cmk.base.config.ConfigCache",
                    "cmk.utils.type_defs.HostName",
                    "dict",
                    "Optional[Iterable[str]]"
                ],
                "outdir": [
                    "dict[, ]",
                    "None",
                    "config.Config",
                    "cmk.utils.type_defs.ServiceName",
                    "cmk.base.config.ConfigCache",
                    "cmk.utils.type_defs.HostName",
                    "dict",
                    "Optional[Iterable[str]]"
                ],
                "chalice_stage_name": [
                    "dict[, ]",
                    "None",
                    "config.Config",
                    "cmk.utils.type_defs.ServiceName",
                    "cmk.base.config.ConfigCache",
                    "cmk.utils.type_defs.HostName",
                    "dict",
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "TemplateMerger.merge": {
            "name": "merge",
            "location": 1567,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "file_template": [
                    "str",
                    "bool",
                    "graphx.core.entities.Node",
                    "Node",
                    "int"
                ],
                "chalice_template": [
                    "str",
                    "bool",
                    "graphx.core.entities.Node",
                    "Node",
                    "int"
                ]
            }
        },
        "TemplateDeepMerger.merge": {
            "name": "merge",
            "location": 1573,
            "return": [
                "bool",
                "str",
                "MutableSet[T]"
            ],
            "arguments": {
                "self": [],
                "file_template": [
                    "str",
                    "IO[str]",
                    "typing.IO",
                    "BinaryIO",
                    "typing.BinaryIO"
                ],
                "chalice_template": [
                    "str",
                    "IO[str]",
                    "typing.IO",
                    "BinaryIO",
                    "typing.BinaryIO"
                ]
            }
        },
        "TemplateDeepMerger._merge": {
            "name": "_merge",
            "location": 1577,
            "return": [
                "typing.TextIO",
                "models.Subtask",
                "dict[, ]",
                "bool",
                "List[List[int]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "file_template": [
                    "typing.TextIO",
                    "nativecards.lib.dicts.models.DictionaryEntry",
                    "dict[, ]",
                    "TextIO",
                    "dict"
                ],
                "chalice_template": [
                    "typing.TextIO",
                    "nativecards.lib.dicts.models.DictionaryEntry",
                    "dict[, ]",
                    "TextIO",
                    "dict"
                ]
            }
        },
        "TemplateDeepMerger._merge_dict": {
            "name": "_merge_dict",
            "location": 1584,
            "return": [
                "dict[, ]",
                "str",
                "bool",
                "List[Dict]",
                "Mapping[str, Any]",
                "Dict[int, Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "file_template": [
                    "dict[str, str]",
                    "Dict[str, str]",
                    "Tuple[Any, Any, Any]",
                    "salon.models.ServiceTemplateSet",
                    "str"
                ],
                "chalice_template": [
                    "dict[, ]",
                    "dict",
                    "str"
                ]
            }
        },
        "TemplateSerializer.load_template": {
            "name": "load_template",
            "location": 1595,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "file_contents": [
                    "str",
                    "int",
                    "bytes"
                ],
                "filename": [
                    "typing.Text",
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "TemplateSerializer.serialize_template": {
            "name": "serialize_template",
            "location": 1599,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "contents": [
                    "str",
                    "bool",
                    "list[str]",
                    "List[str]",
                    "app.models.TweetContent",
                    "tracim.models.data.Content"
                ]
            }
        },
        "JSONTemplateSerializer.serialize_template": {
            "name": "serialize_template",
            "location": 1607,
            "return": [
                "Mapping[str, Any]",
                "str",
                "salon.models.Stylist"
            ],
            "arguments": {
                "self": [],
                "contents": [
                    "str",
                    "bytes",
                    "dict[, ]",
                    "salon.models.Stylist",
                    "dict"
                ]
            }
        },
        "JSONTemplateSerializer.load_template": {
            "name": "load_template",
            "location": 1611,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "file_contents": [
                    "str",
                    "bytes",
                    "List[Tuple[str, int]]",
                    "list[tuple[typing.Union[str,int]]]"
                ],
                "filename": [
                    "str",
                    "typing.Text"
                ]
            }
        },
        "YAMLTemplateSerializer.is_yaml_template": {
            "name": "is_yaml_template",
            "location": 1624,
            "return": [
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional[str]",
                    "None"
                ],
                "template_name": [
                    "str",
                    "int"
                ]
            }
        },
        "YAMLTemplateSerializer.serialize_template": {
            "name": "serialize_template",
            "location": 1629,
            "return": [
                "Dict[str, Any]",
                "cmk.utils.type_defs.EventRule"
            ],
            "arguments": {
                "self": [],
                "contents": [
                    "str",
                    "typing.IO",
                    "tracim.models.data.Content",
                    "IO",
                    "app.models.TweetContent"
                ]
            }
        },
        "YAMLTemplateSerializer.load_template": {
            "name": "load_template",
            "location": 1633,
            "return": [
                "bool",
                "List[src.main.core.models.display.Display]",
                "int",
                "server.models.Bike"
            ],
            "arguments": {
                "self": [],
                "file_contents": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "filename": [
                    "str",
                    "typing.Text"
                ]
            }
        },
        "YAMLTemplateSerializer._custom_sam_instrinsics": {
            "name": "_custom_sam_instrinsics",
            "location": 1646,
            "return": [
                "dict[typing.Text, typing.Union[list[],dict[str, str]]]",
                "str",
                "List[str]",
                "bool",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "loader": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "typing.Callable[, ]",
                    "Callable"
                ],
                "tag_prefix": [
                    "str",
                    "bool"
                ],
                "node": [
                    "str",
                    "Optional[dict]",
                    "dict[, ]",
                    "Optional[Set[str]]",
                    "None",
                    "Optional[Any]",
                    "set[str]",
                    "dict",
                    "typing.Any"
                ]
            }
        },
        "YAMLTemplateSerializer._get_value": {
            "name": "_get_value",
            "location": 1654,
            "return": [
                "dict[str, str]",
                "str",
                "dict[int, int]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "loader": [
                    "Node",
                    "Dict[str, Any]",
                    "Optional[mypy.nodes.SymbolNode]"
                ],
                "node": [
                    "dict[, ]",
                    "mypy.nodes.MypyFile",
                    "Node",
                    "mypy.nodes.Node",
                    "dict"
                ]
            }
        }
    },
    "chalice-master/chalice/pipeline.py": {
        "create_buildspec_v2": {
            "name": "create_buildspec_v2",
            "location": 12,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, dict[typing.Text, typing.Union[list[typing.Text],dict[typing.Text, ]]]],dict[typing.Text, typing.Union[typing.Text,list[typing.Text]]]]]",
                "str",
                "int"
            ],
            "arguments": {
                "pipeline_params": [
                    "bool",
                    "list",
                    "list[]",
                    "dict",
                    "dict[, ]",
                    "Callable[[], Awaitable[Mapping]]",
                    "typing.Callable[[], collections.abc.Awaitable[typing.Mapping]]",
                    "List[Dict[str, str]]",
                    "list[dict[str, str]]"
                ]
            }
        },
        "create_buildspec_legacy": {
            "name": "create_buildspec_legacy",
            "location": 48,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, dict[typing.Text, list[typing.Text]]],dict[typing.Text, typing.Union[typing.Text,list[typing.Text]]]]]",
                "bool",
                "float"
            ],
            "arguments": {
                "pipeline_params": [
                    "bool",
                    "str",
                    "list[str]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "InvalidCodeBuildPythonVersion.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "str",
                    "int",
                    "bytes"
                ],
                "msg": [
                    "None",
                    "Optional[str]",
                    "float",
                    "str",
                    "int",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "PipelineParameters.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "app_name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "lambda_python_version": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Iterable[str]",
                    "None",
                    "typing.Iterable[str]"
                ],
                "codebuild_image": [
                    "bool",
                    "str",
                    "None",
                    "FrozenSet[str]",
                    "frozenset"
                ],
                "code_source": [
                    "typing.Text",
                    "str",
                    "dict",
                    "List[object]",
                    "int",
                    "bool",
                    "Optional[str]",
                    "Sequence[str]"
                ],
                "chalice_version_range": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[bool]",
                    "bool"
                ],
                "pipeline_version": [
                    "typing.Text",
                    "bool",
                    "Optional[str]",
                    "Iterable[str]",
                    "str"
                ]
            }
        },
        "PipelineParameters._extract_version": {
            "name": "_extract_version",
            "location": 104,
            "return": [
                "str",
                "Iterable[Tuple[str, str]]",
                "Dict[str, Any]",
                "Dict[int, str]"
            ],
            "arguments": {
                "self": [],
                "lambda_python_version": [
                    "str",
                    "Pattern",
                    "typing.Pattern"
                ]
            }
        },
        "PipelineParameters._lock_to_minor_version": {
            "name": "_lock_to_minor_version",
            "location": 111,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasePipelineTemplate.create_template": {
            "name": "create_template",
            "location": 120,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "pipeline_params": [
                    "str"
                ]
            }
        },
        "CreatePipelineTemplateV2.create_template": {
            "name": "create_template",
            "location": 144,
            "return": [
                "Optional[str]",
                "Union[\"SAONegotiator\", Collection[\"SAONegotiator\"]]",
                "callable"
            ],
            "arguments": {
                "self": [],
                "pipeline_params": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "CreatePipelineTemplateV2._validate_python_version": {
            "name": "_validate_python_version",
            "location": 160,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "python_version": [
                    "str",
                    "int",
                    "Iterable[str]",
                    "Iterable[int]",
                    "Optional[Dict[str, Any]]",
                    "Union[Literal, str]",
                    "Optional[str]"
                ]
            }
        },
        "CreatePipelineTemplateLegacy.create_template": {
            "name": "create_template",
            "location": 200,
            "return": [
                "Optional[str]",
                "Union[\"SAONegotiator\", Collection[\"SAONegotiator\"]]",
                "callable"
            ],
            "arguments": {
                "self": [],
                "pipeline_params": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "CreatePipelineTemplateLegacy._get_codebuild_image": {
            "name": "_get_codebuild_image",
            "location": 218,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "params": []
            }
        },
        "BaseResource.add_to_template": {
            "name": "add_to_template",
            "location": 230,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "int",
                    "List[str]",
                    "bytes",
                    "list[str]"
                ],
                "pipeline_params": [
                    "str",
                    "int",
                    "List[str]",
                    "bytes",
                    "list[str]"
                ]
            }
        },
        "CodeCommitSourceRepository.add_to_template": {
            "name": "add_to_template",
            "location": 236,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "Optional[str]",
                    "type"
                ],
                "pipeline_params": [
                    "str",
                    "int",
                    "List[str]",
                    "bytes",
                    "list[str]"
                ]
            }
        },
        "GithubSource.add_to_template": {
            "name": "add_to_template",
            "location": 258,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "Mapping[str, str]",
                    "Union[str, bytes]",
                    "int"
                ],
                "pipeline_params": [
                    "str",
                    "Mapping[str, str]",
                    "int",
                    "typing.Mapping",
                    "Union[str, bytes]",
                    "bytes"
                ]
            }
        },
        "CodeBuild.__init__": {
            "name": "__init__",
            "location": 300,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "buildspec_generator": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "CodeBuild.add_to_template": {
            "name": "add_to_template",
            "location": 304,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "dict[str, typing.Any]",
                    "str",
                    "Optional[str]",
                    "Union[type, Tuple[type, object]]",
                    "Dict[str, Any]"
                ],
                "pipeline_params": [
                    "str"
                ]
            }
        },
        "CodeBuild._add_package_build": {
            "name": "_add_package_build",
            "location": 315,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resources": [
                    "Union[str, IO]",
                    "IO[str]",
                    "IO",
                    "Dict[str, str]"
                ],
                "pipeline_params": [
                    "str",
                    "Union[str, IO]",
                    "typing.IO",
                    "IO[str]",
                    "dict[str, str]",
                    "IO",
                    "Dict[str, str]"
                ]
            }
        },
        "CodeBuild._add_s3_bucket": {
            "name": "_add_s3_bucket",
            "location": 353,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resources": [
                    "List[str]",
                    "str",
                    "bytes",
                    "Iterable[str]"
                ],
                "outputs": [
                    "List[str]",
                    "str",
                    "bytes",
                    "Iterable[str]"
                ]
            }
        },
        "CodeBuild._add_codebuild_role": {
            "name": "_add_codebuild_role",
            "location": 360,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resources": [
                    "bool"
                ],
                "outputs": [
                    "bool"
                ]
            }
        },
        "CodeBuild._add_codebuild_policy": {
            "name": "_add_codebuild_policy",
            "location": 389,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resources": [
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "CodePipeline.add_to_template": {
            "name": "add_to_template",
            "location": 406,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "dict[str, typing.Any]",
                    "str",
                    "Optional[str]",
                    "Union[type, Tuple[type, object]]",
                    "Dict[str, Any]"
                ],
                "pipeline_params": [
                    "str",
                    "Mapping[str, str]",
                    "int",
                    "typing.Mapping",
                    "Union[str, bytes]",
                    "bytes"
                ]
            }
        },
        "CodePipeline._add_cfn_deploy_role": {
            "name": "_add_cfn_deploy_role",
            "location": 415,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resources": [
                    "bool"
                ],
                "outputs": [
                    "bool"
                ]
            }
        },
        "CodePipeline._add_pipeline": {
            "name": "_add_pipeline",
            "location": 458,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resources": [
                    "int",
                    "Optional[str]"
                ],
                "pipeline_params": [
                    "int",
                    "Optional[int]",
                    "str",
                    "None",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "CodePipeline._create_pipeline_stages": {
            "name": "_create_pipeline_stages",
            "location": 478,
            "return": [
                "list[typing.Union[list[],str,dict[str, str]]]",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "pipeline_params": [
                    "str",
                    "bool"
                ]
            }
        },
        "CodePipeline._code_commit_source": {
            "name": "_code_commit_source",
            "location": 490,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,list[dict[typing.Text, typing.Union[dict[typing.Text, typing.Union[typing.Text,int]],dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Text]]],list[dict[typing.Text, typing.Text]],int,typing.Text]]]]]",
                "Optional[str]",
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodePipeline._create_source_stage": {
            "name": "_create_source_stage",
            "location": 519,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "pipeline_params": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "bool",
                    "List[str]",
                    "list[str]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "CodePipeline._github_source": {
            "name": "_github_source",
            "location": 525,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,list[dict[typing.Text, typing.Union[typing.Text,int,list[dict[typing.Text, typing.Text]],dict[typing.Text, typing.Union[dict[typing.Text, typing.Text],dict[typing.Text, list[typing.Union[typing.Text,list[typing.Union[typing.Text,dict[typing.Text, typing.Text]]]]]],typing.Text,bool]]]]]]]",
                "str",
                "type",
                "Tuple[str, str]",
                "Dict[str, Any]",
                "Optional[int]",
                "Match"
            ],
            "arguments": {
                "self": [],
                "pipeline_version": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "typing.Iterable[str]",
                    "Optional[List[int]]",
                    "None"
                ]
            }
        },
        "CodePipeline._create_build_stage": {
            "name": "_create_build_stage",
            "location": 562,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,list[dict[typing.Text, typing.Union[list[dict[typing.Text, typing.Text]],typing.Text,dict[typing.Text, typing.Text],dict[typing.Text, dict[typing.Text, typing.Text]],int]]]]]",
                "Mapping[str, str]",
                "Tuple[str, str]",
                "Dict[str, Any]",
                "bool",
                "dict",
                "Optional[int]",
                "Dict[str, List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodePipeline._create_beta_stage": {
            "name": "_create_beta_stage",
            "location": 595,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,list[dict[typing.Text, typing.Union[list[dict[typing.Text, typing.Text]],typing.Text,dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Text]]],int]]]]]",
                "List[str]",
                "Optional[int]",
                "str",
                "Dict[str, Any]",
                "Type[T]",
                "Dict[str, Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodePipeline._add_bucket_store": {
            "name": "_add_bucket_store",
            "location": 657,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resources": [
                    "List[str]",
                    "bytes",
                    "Iterable[str]"
                ],
                "outputs": [
                    "List[str]",
                    "bytes",
                    "Iterable[str]"
                ]
            }
        },
        "CodePipeline._add_codepipeline_role": {
            "name": "_add_codepipeline_role",
            "location": 671,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resources": [
                    "str",
                    "Type[T]",
                    "T",
                    "Callable[[str], T]"
                ],
                "outputs": [
                    "bool"
                ]
            }
        },
        "BuildSpecExtractor.extract_buildspec": {
            "name": "extract_buildspec",
            "location": 707,
            "return": [
                "dict[, ]",
                "int",
                "list[str]",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "Optional[str]",
                    "Union[str, Iterable[str]]",
                    "int"
                ]
            }
        }
    },
    "chalice-master/chalice/policy.py": {
        "policy_from_source_code": {
            "name": "policy_from_source_code",
            "location": 25,
            "return": [
                "str",
                "set[str]",
                "bool",
                "typing.Type",
                "bytes",
                "list[]"
            ],
            "arguments": {
                "source_code": [
                    "str",
                    "Optional[List[int]]",
                    "list[int]",
                    "None"
                ]
            }
        },
        "load_api_policy_actions": {
            "name": "load_api_policy_actions",
            "location": 34,
            "return": [
                "str",
                "Optional[int]",
                "bool"
            ],
            "arguments": {}
        },
        "load_custom_policy_actions": {
            "name": "load_custom_policy_actions",
            "location": 39,
            "return": [
                "str",
                "Optional[int]",
                "bool"
            ],
            "arguments": {}
        },
        "_load_json_file": {
            "name": "_load_json_file",
            "location": 44,
            "return": [
                "Callable[[Any], bool]",
                "str",
                "Callable",
                "Mapping"
            ],
            "arguments": {
                "relative_filename": [
                    "str"
                ]
            }
        },
        "diff_policies": {
            "name": "diff_policies",
            "location": 53,
            "return": [
                "dict[typing.Text, int]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "old": [
                    "bool",
                    "float",
                    "int"
                ],
                "new": [
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "_create_simple_format": {
            "name": "_create_simple_format",
            "location": 67,
            "return": [
                "dict[str, str]",
                "int",
                "dict[, ]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "policy": [
                    "str",
                    "bool",
                    "int",
                    "Set[str]"
                ]
            }
        },
        "AppPolicyGenerator.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "osutils": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "AppPolicyGenerator.generate_policy": {
            "name": "generate_policy",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "config": [
                    "str",
                    "dict[str, str]",
                    "app.config.HealthCheckConfig",
                    "pyramid.config.Configurator",
                    "utils.config_generator.Configurations",
                    "Dict[str, str]",
                    "tbump.config.Config",
                    "entity_embeddings.Config",
                    "app.config.MQConfig"
                ]
            }
        },
        "PolicyBuilder.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "dict",
                    "str",
                    "None",
                    "dict[, ]"
                ],
                "api_policy_actions": [
                    "str",
                    "None",
                    "Optional[str]",
                    "bool",
                    "dict[str, str]",
                    "Optional[Dict[str, str]]",
                    "typing.Sequence[str]",
                    "Sequence[str]",
                    "raiden.utils.Optional[raiden.utils.Dict[str, raiden.utils.Any]]"
                ],
                "custom_policy_actions": [
                    "Optional[str]",
                    "None",
                    "raiden.utils.ChannelID",
                    "str",
                    "Type[T]",
                    "typing.Type"
                ]
            }
        },
        "PolicyBuilder.build_policy_from_api_calls": {
            "name": "build_policy_from_api_calls",
            "location": 125,
            "return": [
                "dict[typing.Text, typing.Union[list[],typing.DefaultDict,list[int],int,str]]",
                "bool",
                "str",
                "int",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "client_calls": [
                    "str",
                    "bytes",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "PolicyBuilder._build_statements_from_client_calls": {
            "name": "_build_statements_from_client_calls",
            "location": 134,
            "return": [
                "list[dict[typing.Text, typing.Union[typing.Text,list[typing.Text]]]]",
                "str",
                "cmk.utils.type_defs.HostName",
                "bool"
            ],
            "arguments": {
                "self": [],
                "client_calls": [
                    "str",
                    "Callable",
                    "int"
                ]
            }
        },
        "PolicyBuilder._get_actions_from_api_calls": {
            "name": "_get_actions_from_api_calls",
            "location": 156,
            "return": [
                "list[]",
                "Optional[str]",
                "Optional[float]",
                "Optional[bool]",
                "str"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "str",
                    "Optional[str]"
                ],
                "client_calls": [
                    "list[str]",
                    "int",
                    "tuple[typing.Union[str,str,str]]",
                    "List[str]",
                    "Tuple[str, str, str]",
                    "Callable"
                ]
            }
        },
        "PolicyBuilder._get_actions_from_high_level_calls": {
            "name": "_get_actions_from_high_level_calls",
            "location": 176,
            "return": [
                "list[]",
                "List[Dict]",
                "str",
                "List[str]",
                "List[List[Any]]",
                "Set[cmk.utils.type_defs.HostName]"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "str",
                    "int",
                    "raiden.utils.BlockIdentifier",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.ChannelID",
                    "bool"
                ],
                "client_calls": [
                    "bytes",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "chalice-master/chalice/test.py": {
        "Client.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "bool",
                    "str",
                    "starlette.types.ASGIApp"
                ],
                "stage_name": [
                    "typing.Text",
                    "str",
                    "dict",
                    "Optional[str]",
                    "int"
                ],
                "project_dir": [
                    "typing.Text",
                    "Tuple[str]",
                    "str",
                    "int"
                ]
            }
        },
        "Client._chalice_config": {
            "name": "_chalice_config",
            "location": 35,
            "return": [
                "typing.Type",
                "dict",
                "dict[str, typing.Union[typing.Any,str]]",
                "dict[typing.Any, dict[, ]]",
                "Dict[str, Any]",
                "Config",
                "app.config.MQConfig",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.http": {
            "name": "http",
            "location": 49,
            "return": [
                "Optional[str]",
                "int",
                "str",
                "TestHTTPClient"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.lambda_": {
            "name": "lambda_",
            "location": 56,
            "return": [
                "Optional[str]",
                "int",
                "str",
                "TestLambdaClient"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.events": {
            "name": "events",
            "location": 64,
            "return": [
                "int",
                "Callable",
                "str",
                "dict",
                "dict[str, str]",
                "type",
                "TestEventsClient",
                "Config"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.__enter__": {
            "name": "__enter__",
            "location": 70,
            "return": [
                "Client",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.__exit__": {
            "name": "__exit__",
            "location": 74,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "exception_type": [
                    "Optional[types.TracebackType]",
                    "None",
                    "Optional[Any]",
                    "typing.Any",
                    "Optional[BaseException]",
                    "BaseException",
                    "Optional[Type[BaseException]]",
                    "typing.Type",
                    "Optional[Exception]",
                    "Exception"
                ],
                "exception_value": [
                    "Optional[types.TracebackType]",
                    "None",
                    "Optional[Any]",
                    "typing.Any",
                    "Optional[BaseException]",
                    "BaseException",
                    "Optional[Type[BaseException]]",
                    "typing.Type",
                    "Optional[Exception]",
                    "Exception"
                ],
                "traceback": [
                    "Optional[types.TracebackType]",
                    "None",
                    "Optional[Any]",
                    "typing.Any",
                    "Optional[BaseException]",
                    "BaseException",
                    "Optional[Type[BaseException]]",
                    "typing.Type",
                    "Optional[Exception]",
                    "Exception"
                ]
            }
        },
        "BaseClient._patched_env_vars": {
            "name": "_patched_env_vars",
            "location": 86,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "environment_variables": [
                    "dict[str, typing.Any]",
                    "str",
                    "dict[str, str]",
                    "dict[, ]",
                    "MutableMapping",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "TestHTTPClient.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [],
                "config": [
                    "dict[, ]",
                    "sphinx.config.Config",
                    "model.Config",
                    "virgene.config.Config",
                    "dict"
                ]
            }
        },
        "TestHTTPClient.request": {
            "name": "request",
            "location": 109,
            "return": [
                "Dict[str, Any]",
                "str",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ],
                "path": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "headers": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "list[str]",
                    "Optional[Dict[Any, Any]]",
                    "dict[typing.Any, typing.Any]"
                ],
                "body": [
                    "bytes",
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestHTTPClient._error_response": {
            "name": "_error_response",
            "location": 124,
            "return": [
                "HTTPResponse",
                "str",
                "Optional[bytes]",
                "Tuple[str, int, Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "str",
                    "Optional[\"Response\"]",
                    "None",
                    "MutableMapping",
                    "typing.MutableMapping"
                ]
            }
        },
        "TestHTTPClient.get": {
            "name": "get",
            "location": 132,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "os.PathLike"
                ]
            }
        },
        "TestHTTPClient.post": {
            "name": "post",
            "location": 136,
            "return": [
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "os.PathLike"
                ]
            }
        },
        "TestHTTPClient.put": {
            "name": "put",
            "location": 140,
            "return": [
                "str",
                "Optional[Mapping]",
                "int",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "os.PathLike"
                ]
            }
        },
        "TestHTTPClient.patch": {
            "name": "patch",
            "location": 144,
            "return": [
                "bytes",
                "Dict[str, str]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "os.PathLike"
                ]
            }
        },
        "TestHTTPClient.options": {
            "name": "options",
            "location": 148,
            "return": [
                "str",
                "Optional[Mapping]",
                "bytes",
                "Dict[str, Dict[str, str]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "os.PathLike"
                ]
            }
        },
        "TestHTTPClient.delete": {
            "name": "delete",
            "location": 152,
            "return": [
                "str",
                "bool",
                "Optional[Mapping]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "os.PathLike"
                ]
            }
        },
        "TestHTTPClient.head": {
            "name": "head",
            "location": 156,
            "return": [
                "bytes",
                "Dict[str, str]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "os.PathLike"
                ]
            }
        },
        "HTTPResponse.__init__": {
            "name": "__init__",
            "location": 162,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "List[int]",
                    "str",
                    "list[int]",
                    "int",
                    "bool",
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "None",
                    "Optional[Callable]",
                    "typing.Callable[, ]"
                ],
                "headers": [
                    "str",
                    "int",
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "Tuple[str, str]",
                    "None",
                    "tuple[typing.Union[str,str]]"
                ],
                "status_code": [
                    "int",
                    "Optional[int]",
                    "None",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "HTTPResponse.json_body": {
            "name": "json_body",
            "location": 169,
            "return": [
                "None",
                "str",
                "int",
                "Tuple[List[Any], int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse.create_from_dict": {
            "name": "create_from_dict",
            "location": 177,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "int"
                ],
                "response_dict": [
                    "dict"
                ]
            }
        },
        "TestEventsClient.__init__": {
            "name": "__init__",
            "location": 195,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "TestEventsClient.generate_sns_event": {
            "name": "generate_sns_event",
            "location": 199,
            "return": [
                "dict[typing.Text, list[dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Union[collections.abc.Awaitable[],int,str,None,bytes,dict[typing.Text, dict[typing.Text, typing.Text]]]]]]]]",
                "Mapping[str, Any]",
                "sideeye.config.ASCParsingConfig"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Awaitable",
                    "int",
                    "collections.abc.Awaitable[]"
                ],
                "subject": [
                    "typing.Text",
                    "Awaitable",
                    "int"
                ],
                "message_attributes": [
                    "bool",
                    "None",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "TestEventsClient.generate_s3_event": {
            "name": "generate_s3_event",
            "location": 229,
            "return": [
                "dict[typing.Text, list[dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Union[dict[typing.Text, typing.Union[typing.Text,list[str],dict[, ],dict[typing.Text, typing.Text]]],typing.Text,dict[typing.Text, typing.Union[typing.Text,list[str],dict[, ],int]]]]]]]]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ],
                "key": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ],
                "event_name": [
                    "typing.Text",
                    "str",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "TestEventsClient.generate_sqs_event": {
            "name": "generate_sqs_event",
            "location": 266,
            "return": [
                "dict[typing.Text, list[dict[typing.Text, typing.Union[dict[typing.Text, typing.Text],typing.Text]]]]",
                "Mapping[str, Any]",
                "sideeye.config.ASCParsingConfig"
            ],
            "arguments": {
                "self": [],
                "message_bodies": [
                    "str"
                ],
                "queue_name": [
                    "str",
                    "typing.Text"
                ]
            }
        },
        "TestEventsClient.generate_cw_event": {
            "name": "generate_cw_event",
            "location": 287,
            "return": [
                "dict[typing.Text, typing.Union[int,typing.Text,None]]",
                "dict",
                "Config",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "None",
                    "Optional[str]",
                    "types.ModuleType"
                ],
                "detail_type": [
                    "str",
                    "None",
                    "Optional[str]",
                    "types.ModuleType"
                ],
                "detail": [
                    "str",
                    "None",
                    "Optional[str]",
                    "types.ModuleType"
                ],
                "resources": [
                    "str",
                    "None",
                    "Optional[str]",
                    "types.ModuleType"
                ],
                "region": [
                    "typing.Text",
                    "str",
                    "Optional[str]",
                    "types.ModuleType"
                ]
            }
        },
        "TestEventsClient.generate_kinesis_event": {
            "name": "generate_kinesis_event",
            "location": 303,
            "return": [
                "dict[typing.Text, list[dict[typing.Text, typing.Union[dict[typing.Text, typing.Union[typing.Text,float]],typing.Text]]]]",
                "List[dict]",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "message_bodies": [
                    "str",
                    "Optional[str]"
                ],
                "stream_name": [
                    "typing.Text",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TestLambdaClient.__init__": {
            "name": "__init__",
            "location": 328,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "dict[, ]",
                    "Config",
                    "typing.Type",
                    "dict",
                    "type"
                ],
                "config": [
                    "dict[, ]",
                    "sphinx.config.Config",
                    "model.Config",
                    "virgene.config.Config",
                    "dict"
                ]
            }
        },
        "TestLambdaClient.invoke": {
            "name": "invoke",
            "location": 333,
            "return": [
                "InvokeResponse",
                "str",
                "Optional[str]",
                "Dict[str, Any]",
                "Tuple[str, Optional[int]]"
            ],
            "arguments": {
                "self": [],
                "function_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "payload": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Tuple[type]",
                    "tuple[typing.Type]"
                ]
            }
        },
        "InvokeResponse.__init__": {
            "name": "__init__",
            "location": 349,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "int",
                    "float",
                    "bool",
                    "apistar.types.RouteConfig"
                ]
            }
        }
    },
    "chalice-master/chalice/utils.py": {
        "to_cfn_resource_name": {
            "name": "to_cfn_resource_name",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "remove_stage_from_deployed_values": {
            "name": "remove_stage_from_deployed_values",
            "location": 55,
            "return": [
                "None",
                "int",
                "dict",
                "str"
            ],
            "arguments": {
                "key": [
                    "str",
                    "bool",
                    "list[str]",
                    "float",
                    "List[str]",
                    "KT",
                    "int"
                ],
                "filename": [
                    "str",
                    "bytes",
                    "Union[str, bytes]"
                ]
            }
        },
        "record_deployed_values": {
            "name": "record_deployed_values",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "deployed_values": [
                    "dict[, ]",
                    "dict",
                    "dict[str, str]",
                    "dict[str, list[str]]",
                    "bool",
                    "int",
                    "Dict[str, str]",
                    "Dict[str, List[str]]"
                ],
                "filename": [
                    "str",
                    "int",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "serialize_to_json": {
            "name": "serialize_to_json",
            "location": 93,
            "return": [
                "bool",
                "bytes",
                "List[str]"
            ],
            "arguments": {
                "data": [
                    "dict[, ]",
                    "dict",
                    "bool",
                    "dict[str, object]",
                    "Dict[str, object]",
                    "Dict[str, Any]"
                ]
            }
        },
        "create_zip_file": {
            "name": "create_zip_file",
            "location": 155,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "source_dir": [
                    "str",
                    "None",
                    "io.TextIOBase",
                    "Optional[str]"
                ],
                "outfile": [
                    "str"
                ]
            }
        },
        "getting_started_prompt": {
            "name": "getting_started_prompt",
            "location": 333,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "prompter": [
                    "int",
                    "str"
                ]
            }
        },
        "ChaliceZipFile.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChaliceZipFile.write": {
            "name": "write",
            "location": 121,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "arcname": [
                    "str",
                    "None"
                ],
                "compress_type": [
                    "str",
                    "None"
                ],
                "compresslevel": [
                    "bool",
                    "None",
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "ChaliceZipFile._create_zipinfo": {
            "name": "_create_zipinfo",
            "location": 131,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Union[int, str]",
                    "int",
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "arcname": [
                    "Optional[Tuple[str, str]]",
                    "bool",
                    "tuple[typing.Union[str,str]]",
                    "None",
                    "Optional[List[str]]",
                    "list[str]"
                ],
                "compress_type": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "OSUtils.environ": {
            "name": "environ",
            "location": 178,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OSUtils.open": {
            "name": "open",
            "location": 182,
            "return": [
                "typing.IO",
                "Dict[str, Dict[str, int]]",
                "Iterable[str]",
                "List[Dict]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "mode": [
                    "str"
                ]
            }
        },
        "OSUtils.open_zip": {
            "name": "open_zip",
            "location": 186,
            "return": [
                "ChaliceZipFile",
                "bytes",
                "List[str]",
                "Dict[str, str]",
                "Dict[str, Any]",
                "Optional[Dict[str, Any]]",
                "IO[bytes]"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "bool"
                ],
                "mode": [
                    "str",
                    "bool"
                ],
                "compression": [
                    "str",
                    "bool"
                ]
            }
        },
        "OSUtils.remove_file": {
            "name": "remove_file",
            "location": 191,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "OSUtils.file_exists": {
            "name": "file_exists",
            "location": 201,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "OSUtils.get_file_contents": {
            "name": "get_file_contents",
            "location": 205,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "binary": [
                    "bool",
                    "str",
                    "List[str]",
                    "List[Tuple[str, str, str]]"
                ],
                "encoding": [
                    "typing.Text",
                    "str",
                    "bool"
                ]
            }
        },
        "OSUtils.set_file_contents": {
            "name": "set_file_contents",
            "location": 219,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "contents": [
                    "str",
                    "IO[bytes]",
                    "typing.IO"
                ],
                "binary": [
                    "bool",
                    "str",
                    "BinaryIO",
                    "dict"
                ]
            }
        },
        "OSUtils.extract_zipfile": {
            "name": "extract_zipfile",
            "location": 228,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "zipfile_path": [
                    "str"
                ],
                "unpack_dir": [
                    "str"
                ]
            }
        },
        "OSUtils.extract_tarfile": {
            "name": "extract_tarfile",
            "location": 233,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tarfile_path": [
                    "str"
                ],
                "unpack_dir": [
                    "str"
                ]
            }
        },
        "OSUtils.directory_exists": {
            "name": "directory_exists",
            "location": 238,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "OSUtils.get_directory_contents": {
            "name": "get_directory_contents",
            "location": 242,
            "return": [
                "str",
                "List[str]",
                "io.TextIO"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "OSUtils.makedirs": {
            "name": "makedirs",
            "location": 246,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int"
                ]
            }
        },
        "OSUtils.dirname": {
            "name": "dirname",
            "location": 250,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "OSUtils.abspath": {
            "name": "abspath",
            "location": 254,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "OSUtils.joinpath": {
            "name": "joinpath",
            "location": 258,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OSUtils.walk": {
            "name": "walk",
            "location": 262,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None"
                ],
                "followlinks": [
                    "bool",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "OSUtils.copytree": {
            "name": "copytree",
            "location": 266,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [],
                "destination": [
                    "str",
                    "bytes",
                    "Union[int, str]",
                    "int"
                ]
            }
        },
        "OSUtils.rmtree": {
            "name": "rmtree",
            "location": 279,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "OSUtils.copy": {
            "name": "copy",
            "location": 283,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "destination": [
                    "str",
                    "float",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "OSUtils.move": {
            "name": "move",
            "location": 287,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ],
                "destination": [
                    "str"
                ]
            }
        },
        "OSUtils.tempdir": {
            "name": "tempdir",
            "location": 292,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OSUtils.popen": {
            "name": "popen",
            "location": 300,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "bool",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]",
                    "None"
                ],
                "stdout": [
                    "List[str]",
                    "None",
                    "str",
                    "bool",
                    "list[str]",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]"
                ],
                "stderr": [
                    "List[str]",
                    "None",
                    "str",
                    "bool",
                    "list[str]",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]"
                ],
                "env": [
                    "List[str]",
                    "None",
                    "str",
                    "bool",
                    "list[str]",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]"
                ]
            }
        },
        "OSUtils.mtime": {
            "name": "mtime",
            "location": 305,
            "return": [
                "str",
                "int",
                "Iterable[Sequence[str]]",
                "List[str]",
                "IO[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "OSUtils.stat": {
            "name": "stat",
            "location": 309,
            "return": [
                "str",
                "Tuple[str]",
                "List[str]",
                "Sequence[str]",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "OSUtils.normalized_filename": {
            "name": "normalized_filename",
            "location": 313,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "OSUtils.pipe": {
            "name": "pipe",
            "location": 324,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OSUtils.basename": {
            "name": "basename",
            "location": 328,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "UI.__init__": {
            "name": "__init__",
            "location": 339,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "out": [
                    "Dict[bytes, bytes]",
                    "None",
                    "str",
                    "dict[bytes, bytes]",
                    "Optional[datetime.tzinfo]"
                ],
                "err": [
                    "Optional[str]",
                    "str",
                    "None",
                    "dict",
                    "dict[, ]"
                ],
                "confirm": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "float",
                    "Optional[int]",
                    "Optional[float]"
                ]
            }
        },
        "UI.write": {
            "name": "write",
            "location": 355,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "float",
                    "dict[, ]",
                    "int",
                    "datetime.datetime",
                    "dict"
                ]
            }
        },
        "UI.error": {
            "name": "error",
            "location": 359,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "bytes",
                    "IO",
                    "typing.IO",
                    "TextIO",
                    "typing.TextIO"
                ]
            }
        },
        "UI.confirm": {
            "name": "confirm",
            "location": 363,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "typing.Callable[, ]",
                    "Optional[str]",
                    "typing.Sequence[typing.Any]",
                    "Callable",
                    "dict[str, typing.Any]",
                    "Sequence[Any]",
                    "Dict[str, Any]"
                ],
                "default": [
                    "bool",
                    "int",
                    "str",
                    "Optional[bool]",
                    "Optional[str]",
                    "Callable",
                    "Sequence[Any]",
                    "Dict[str, Any]"
                ],
                "abort": [
                    "bool",
                    "int",
                    "str",
                    "Optional[bool]",
                    "Optional[str]",
                    "Callable",
                    "Sequence[Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "PipeReader.__init__": {
            "name": "__init__",
            "location": 372,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "PipeReader.read": {
            "name": "read",
            "location": 376,
            "return": [
                "None",
                "str",
                "Optional[str]",
                "Optional[List[Any]]",
                "list",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimestampConverter.__init__": {
            "name": "__init__",
            "location": 396,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "now": [
                    "int",
                    "None",
                    "str",
                    "Optional[datetime.datetime]",
                    "datetime.datetime"
                ]
            }
        },
        "TimestampConverter.timestamp_to_datetime": {
            "name": "timestamp_to_datetime",
            "location": 402,
            "return": [
                "str",
                "int",
                "bytes",
                "Tuple[str, str]",
                "set[tuple[]]",
                "bool",
                "dict[str, typing.Union[typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any]]",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "TimestampConverter._relative_timestamp_to_datetime": {
            "name": "_relative_timestamp_to_datetime",
            "location": 419,
            "return": [
                "int",
                "float",
                "bytes",
                "Callable[[T], None]",
                "tuple",
                "str"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "float",
                    "int",
                    "None",
                    "Optional[Union[int, float]]",
                    "Optional[float]",
                    "datetime.date"
                ],
                "unit": [
                    "float",
                    "int",
                    "str",
                    "datetime.datetime"
                ]
            }
        },
        "TimestampConverter.parse_iso8601_timestamp": {
            "name": "parse_iso8601_timestamp",
            "location": 424,
            "return": [
                "list",
                "str"
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "chalice-master/chalice/__init__.py": {},
    "chalice-master/chalice/api/__init__.py": {
        "package_app": {
            "name": "package_app",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "project_dir": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "output_dir": [
                    "str"
                ],
                "stage": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "chalice_config": [
                    "str",
                    "None",
                    "Optional[str]",
                    "dict[, ]",
                    "dict",
                    "Optional['SparkSession']"
                ],
                "package_format": [
                    "typing.Text",
                    "str",
                    "bool"
                ],
                "template_format": [
                    "typing.Text",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "chalice-master/chalice/cdk/construct.py": {
        "Chalice.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[dict]"
                ],
                "id": [
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "source_dir": [
                    "str",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]",
                    "None"
                ],
                "stage_config": [
                    "bool",
                    "None",
                    "Optional[str]",
                    "Optional[bool]",
                    "str"
                ],
                "preserve_logical_ids": [
                    "bool",
                    "str"
                ]
            }
        },
        "Chalice._package_app": {
            "name": "_package_app",
            "location": 89,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Chalice._generate_sam_template_with_assets": {
            "name": "_generate_sam_template_with_assets",
            "location": 98,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "chalice_out_dir": [
                    "str"
                ],
                "package_id": [
                    "str"
                ]
            }
        },
        "Chalice._filter_resources": {
            "name": "_filter_resources",
            "location": 131,
            "return": [
                "list[]",
                "str",
                "List[int]",
                "Tuple[int, int]",
                "Set[str]",
                "int",
                "List[Callable[[], None]]",
                "Tuple[List[int], List[int]]"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "Dict[str, List[str]]",
                    "Dict[str, Any]"
                ],
                "resource_type": [
                    "str",
                    "dict[str, list[str]]",
                    "Dict[str, List[str]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Chalice.get_resource": {
            "name": "get_resource",
            "location": 136,
            "return": [
                "str",
                "Optional[str]",
                "Type[Any]"
            ],
            "arguments": {
                "self": [],
                "resource_name": [
                    "str"
                ]
            }
        },
        "Chalice.get_role": {
            "name": "get_role",
            "location": 140,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "role_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Chalice.get_function": {
            "name": "get_function",
            "location": 151,
            "return": [
                "Type[BaseException]",
                "Type[T]"
            ],
            "arguments": {
                "self": [],
                "function_name": [
                    "str"
                ]
            }
        },
        "Chalice.add_environment_variable": {
            "name": "add_environment_variable",
            "location": 164,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "value": [
                    "str",
                    "bytes",
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "function_name": [
                    "str",
                    "Optional[int]",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "chalice-master/chalice/cdk/__init__.py": {},
    "chalice-master/chalice/cli/factory.py": {
        "create_botocore_session": {
            "name": "create_botocore_session",
            "location": 41,
            "return": [
                "Session",
                "str",
                "Iterable[str]",
                "float",
                "Tuple[str, str]"
            ],
            "arguments": {
                "profile": [
                    "bool",
                    "None",
                    "str",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "debug": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "Optional[List[str]]",
                    "Optional[str]"
                ],
                "connection_timeout": [
                    "Optional[str]",
                    "str",
                    "None",
                    "int",
                    "Callable[[str], str]",
                    "typing.Callable[str, str]"
                ],
                "read_timeout": [
                    "int",
                    "None",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "max_retries": [
                    "int",
                    "None",
                    "Optional[float]",
                    "Optional[Dict[str, Any]]",
                    "float",
                    "Optional[str]",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "_add_chalice_user_agent": {
            "name": "_add_chalice_user_agent",
            "location": 63,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "session": [
                    "grouper.models.base.session.Session",
                    "arxiv.users.domain.Session"
                ]
            }
        },
        "_inject_large_request_body_filter": {
            "name": "_inject_large_request_body_filter",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "NoSuchFunctionError.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "UnknownConfigFileVersion.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "LargeRequestBodyFilter.filter": {
            "name": "filter",
            "location": 94,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional['cirq.SingleQubitGate']",
                    "None"
                ]
            }
        },
        "CLIFactory.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "project_dir": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "debug": [
                    "bool",
                    "dict",
                    "str",
                    "MutableMapping[str, str]",
                    "int"
                ],
                "profile": [
                    "dict",
                    "None",
                    "str",
                    "int",
                    "dict[, ]",
                    "MutableMapping[str, str]",
                    "typing.MutableMapping"
                ],
                "environ": [
                    "None",
                    "str",
                    "Optional[str]",
                    "Optional['Directory']"
                ]
            }
        },
        "CLIFactory.create_botocore_session": {
            "name": "create_botocore_session",
            "location": 121,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "connection_timeout": [
                    "int",
                    "float",
                    "None"
                ],
                "read_timeout": [
                    "int",
                    "float",
                    "None"
                ],
                "max_retries": [
                    "int",
                    "float",
                    "None"
                ]
            }
        },
        "CLIFactory.create_default_deployer": {
            "name": "create_default_deployer",
            "location": 130,
            "return": [
                "Dict[str, Any]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "Exception"
                ],
                "config": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "Exception"
                ],
                "ui": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "Exception"
                ]
            }
        },
        "CLIFactory.create_plan_only_deployer": {
            "name": "create_plan_only_deployer",
            "location": 134,
            "return": [
                "dict",
                "cmk.utils.type_defs.EventRule"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "dict[, ]",
                    "logging.Logger",
                    "None",
                    "conflow.manager.Config",
                    "dict",
                    "Optional[Dict]"
                ],
                "config": [
                    "dict[, ]",
                    "logging.Logger",
                    "None",
                    "conflow.manager.Config",
                    "dict",
                    "Optional[Dict]"
                ],
                "ui": [
                    "dict[, ]",
                    "logging.Logger",
                    "None",
                    "conflow.manager.Config",
                    "dict",
                    "Optional[Dict]"
                ]
            }
        },
        "CLIFactory.create_deletion_deployer": {
            "name": "create_deletion_deployer",
            "location": 138,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "sqlalchemy.orm.session.Session",
                    "requests.Session",
                    "cmsysboutils.Session"
                ],
                "ui": [
                    "str",
                    "sqlalchemy.orm.session.Session",
                    "requests.Session",
                    "cmsysboutils.Session"
                ]
            }
        },
        "CLIFactory.create_deployment_reporter": {
            "name": "create_deployment_reporter",
            "location": 143,
            "return": [
                "DeploymentReporter",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "ui": [
                    "bool",
                    "float"
                ]
            }
        },
        "CLIFactory.create_config_obj": {
            "name": "create_config_obj",
            "location": 147,
            "return": [
                "Config",
                "app.App",
                "Optional[dict]",
                "str",
                "dict",
                "neuromation.api.Config",
                "bool",
                "cmk.utils.type_defs.OptionalConfigSerial",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "chalice_stage_name": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ],
                "autogen_policy": [
                    "Optional[bool]",
                    "None",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "api_gateway_stage": [
                    "Optional[bool]",
                    "None",
                    "float",
                    "Optional[Union[\"Date\", str]]",
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "user_provided_params": [
                    "None",
                    "str",
                    "Optional[str]",
                    "bool",
                    "raiden.utils.Optional[raiden.utils.UserDepositAddress]",
                    "Optional[bool]"
                ]
            }
        },
        "CLIFactory._validate_config_from_disk": {
            "name": "_validate_config_from_disk",
            "location": 182,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[str, typing.Any]",
                    "Config",
                    "Dict[str, Any]",
                    "pyramid.config.Configurator",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "CLIFactory.create_app_packager": {
            "name": "create_app_packager",
            "location": 192,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "str"
                ],
                "options": [
                    "str"
                ],
                "package_format": [
                    "str"
                ],
                "template_format": [
                    "str"
                ],
                "merge_template": [
                    "str",
                    "None"
                ]
            }
        },
        "CLIFactory.create_log_retriever": {
            "name": "create_log_retriever",
            "location": 199,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "lambda_arn": [
                    "bytes",
                    "str",
                    "bool",
                    "Optional[List[Type]]",
                    "list[typing.Type]",
                    "None"
                ],
                "follow_logs": [
                    "bool",
                    "None",
                    "app.db_models.user.User",
                    "list[F]",
                    "Optional['SparkSession']",
                    "List[app.schemas.farm.Farm]"
                ]
            }
        },
        "CLIFactory.create_stdin_reader": {
            "name": "create_stdin_reader",
            "location": 212,
            "return": [
                "PipeReader",
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "CLIFactory.create_lambda_invoke_handler": {
            "name": "create_lambda_invoke_handler",
            "location": 218,
            "return": [
                "LambdaInvokeHandler",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "stage": [
                    "str"
                ]
            }
        },
        "CLIFactory.load_chalice_app": {
            "name": "load_chalice_app",
            "location": 248,
            "return": [
                "app.App",
                "app.executor.Application"
            ],
            "arguments": {
                "self": [],
                "environment_variables": [
                    "Dict[str, Set[str]]",
                    "None",
                    "str",
                    "dict[str, set[str]]",
                    "Optional[bool]",
                    "Optional[Union['AbstractSetIntStr', 'MappingIntStrAny']]",
                    "bool"
                ],
                "validate_feature_flags": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "FrozenSet[Any]",
                    "Optional[List[Any]]",
                    "List[int]"
                ]
            }
        },
        "CLIFactory.load_project_config": {
            "name": "load_project_config",
            "location": 291,
            "return": [
                "bytes",
                "Callable",
                "Dict[str, Dict[str, str]]",
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CLIFactory.create_local_server": {
            "name": "create_local_server",
            "location": 302,
            "return": [
                "cmk.utils.type_defs.EventRule",
                "Dict[str, Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "app_obj": [
                    "str",
                    "int",
                    "None",
                    "Optional[logging.Logger]",
                    "bool"
                ],
                "config": [
                    "str",
                    "int",
                    "None",
                    "Optional[logging.Logger]",
                    "bool"
                ],
                "host": [
                    "str",
                    "int",
                    "None",
                    "Optional[logging.Logger]",
                    "bool"
                ],
                "port": [
                    "str",
                    "int",
                    "None",
                    "Optional[logging.Logger]",
                    "bool"
                ]
            }
        },
        "CLIFactory.create_package_options": {
            "name": "create_package_options",
            "location": 306,
            "return": [
                "PackageOptions",
                "Mapping[str, Any]",
                "Callable[[List, bool], None]",
                "raiden.utils.List[raiden.raiden_service.RaidenService]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "chalice-master/chalice/cli/newproj.py": {
        "create_new_project_skeleton": {
            "name": "create_new_project_skeleton",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "project_name": [
                    "str",
                    "bool"
                ],
                "project_type": [
                    "typing.Text",
                    "str",
                    "List[str]"
                ]
            }
        },
        "get_templated_content": {
            "name": "get_templated_content",
            "location": 131,
            "return": [
                "Union[str, IO]",
                "str",
                "dict",
                "IO[str]"
            ],
            "arguments": {
                "contents": [
                    "str",
                    "Exception"
                ],
                "template_kwargs": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "list_available_projects": {
            "name": "list_available_projects",
            "location": 149,
            "return": [
                "list[ProjectTemplate]",
                "bool",
                "int",
                "taskiinfrastructure.data.json.repositories.project_repository.JsonProjectRepository",
                "dict"
            ],
            "arguments": {
                "templates_dir": [
                    "str"
                ],
                "osutils": [
                    "str"
                ]
            }
        },
        "getting_started_prompt": {
            "name": "getting_started_prompt",
            "location": 160,
            "return": [
                "Optional[bool]",
                "bool",
                "str",
                "Optional[Dict[str, str]]",
                "List[str]"
            ],
            "arguments": {}
        },
        "ProjectTemplate.description": {
            "name": "description",
            "location": 82,
            "return": [
                "str",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectCreator.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "osutils": [
                    "Optional[float]",
                    "None",
                    "Optional[str]",
                    "float",
                    "int",
                    "Optional[int]",
                    "str",
                    "Optional[Callable]",
                    "Optional[Hashable]",
                    "typing.Callable[, ]",
                    "typing.Hashable"
                ]
            }
        },
        "ProjectCreator.create_new_project": {
            "name": "create_new_project",
            "location": 96,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "source_dir": [
                    "str"
                ],
                "destination_dir": [
                    "str"
                ],
                "template_kwargs": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "ProjectCreator._iter_files": {
            "name": "_iter_files",
            "location": 110,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[str,str,list[str]]]]"
            ],
            "arguments": {
                "self": [],
                "source_dir": [
                    "str"
                ],
                "destination_dir": [
                    "str",
                    "int"
                ]
            }
        },
        "ProjectCreator._should_ignore": {
            "name": "_should_ignore",
            "location": 123,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "dict[str, dict[str, str]]",
                    "Dict[str, Dict[str, str]]",
                    "list[str]",
                    "List[str]",
                    "list[tuple[typing.Union[int,int]]]",
                    "List[Tuple[int, int]]",
                    "List[Tuple[int, int, int, int]]"
                ]
            }
        },
        "get_templated_content.lookup_var": {
            "name": "lookup_var",
            "location": 133,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "match": [
                    "type",
                    "str",
                    "List[float]",
                    "Iterable[str]",
                    "Optional[str]",
                    "Optional[Sequence[str]]",
                    "List[str]",
                    "dict"
                ]
            }
        }
    },
    "chalice-master/chalice/cli/reloader.py": {
        "get_best_worker_process": {
            "name": "get_best_worker_process",
            "location": 41,
            "return": [
                "str",
                "Iterable[int]",
                "dict"
            ],
            "arguments": {}
        },
        "start_parent_process": {
            "name": "start_parent_process",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "env": [
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "start_worker_process": {
            "name": "start_worker_process",
            "location": 59,
            "return": [
                "int",
                "Tuple[str, str]",
                "str",
                "list"
            ],
            "arguments": {
                "server_factory": [
                    "str"
                ],
                "root_dir": [
                    "str",
                    "bool"
                ],
                "worker_process_cls": [
                    "str",
                    "None",
                    "Optional[Any]",
                    "bool",
                    "typing.Any",
                    "Optional[float]",
                    "float",
                    "Optional[\"Frame\"]",
                    "Optional[bool]"
                ]
            }
        },
        "run_with_reloader": {
            "name": "run_with_reloader",
            "location": 96,
            "return": [
                "Optional[Callable[[None], None]]",
                "int"
            ],
            "arguments": {
                "server_factory": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ],
                "env": [
                    "dict[str, str]",
                    "dict[, ]",
                    "bool",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "Optional[dict]",
                    "bytes"
                ],
                "root_dir": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ],
                "worker_process_cls": [
                    "str",
                    "bool",
                    "None",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "ParentProcess.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "dict",
                    "dict[, ]",
                    "List[dict]",
                    "list[dict[, ]]"
                ],
                "popen": [
                    "str",
                    "Mapping[str, str]",
                    "typing.Mapping",
                    "dict",
                    "dict[, ]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "ParentProcess.main": {
            "name": "main",
            "location": 78,
            "return": [
                "bytes",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "chalice-master/chalice/cli/__init__.py": {
        "_configure_logging": {
            "name": "_configure_logging",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "level": [
                    "int",
                    "str",
                    "bool"
                ],
                "format_string": [
                    "int",
                    "None",
                    "str",
                    "bytes",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "get_system_info": {
            "name": "get_system_info",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "cli": {
            "name": "cli",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "click.Context",
                    "bool",
                    "list[int]",
                    "List[int]",
                    "list[str]",
                    "List[str]"
                ],
                "project_dir": [
                    "str",
                    "int",
                    "None",
                    "click.Context",
                    "Optional[str]"
                ],
                "debug": [
                    "bool",
                    "click.Context",
                    "str"
                ]
            }
        },
        "_configure_cli_env_vars": {
            "name": "_configure_cli_env_vars",
            "location": 92,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "local": {
            "name": "local",
            "location": 110,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "click.Context",
                    "homeassistant_cli.config.Configuration"
                ],
                "host": [
                    "typing.Text",
                    "bool",
                    "str"
                ],
                "port": [
                    "int",
                    "bool",
                    "str"
                ],
                "stage": [
                    "bool",
                    "str",
                    "int"
                ],
                "autoreload": [
                    "bool"
                ]
            }
        },
        "create_local_server": {
            "name": "create_local_server",
            "location": 138,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "factory": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ],
                "host": [
                    "int",
                    "str",
                    "bool"
                ],
                "port": [
                    "int",
                    "str",
                    "bool"
                ],
                "stage": [
                    "dict[, ]",
                    "bytes",
                    "dict",
                    "int",
                    "list[str]",
                    "List[str]",
                    "dict[str, typing.Any]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "run_local_server": {
            "name": "run_local_server",
            "location": 152,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "factory": [
                    "str",
                    "int"
                ],
                "host": [
                    "str",
                    "int"
                ],
                "port": [
                    "str",
                    "int"
                ],
                "stage": [
                    "str",
                    "int"
                ]
            }
        },
        "deploy": {
            "name": "deploy",
            "location": 174,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "str",
                    "click.Context"
                ],
                "autogen_policy": [
                    "str",
                    "int",
                    "list[tuple[typing.Union[str,str]]]",
                    "click.Context",
                    "List[Tuple[str, str]]"
                ],
                "profile": [
                    "bool",
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "int",
                    "homeassistant_cli.config.Configuration"
                ],
                "api_gateway_stage": [
                    "str",
                    "int",
                    "list[tuple[typing.Union[str,str]]]",
                    "click.Context",
                    "List[Tuple[str, str]]"
                ],
                "stage": [
                    "str",
                    "bool",
                    "None",
                    "click.Context",
                    "Optional[str]"
                ],
                "connection_timeout": [
                    "bool",
                    "float",
                    "raiden.utils.BlockTimeout",
                    "str",
                    "raiden.utils.ChainID",
                    "raiden.utils.Iterator[raiden.utils.Port]",
                    "raiden.constants.Environment"
                ]
            }
        },
        "dev": {
            "name": "dev",
            "location": 195,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "plan": {
            "name": "plan",
            "location": 225,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "dict[str, typing.Any]",
                    "bool",
                    "click.Context",
                    "trezor.utils.HashWriter",
                    "Dict[str, Any]"
                ],
                "autogen_policy": [
                    "str",
                    "bool",
                    "click.Context",
                    "int"
                ],
                "profile": [
                    "bool",
                    "str",
                    "typing.Callable[, ]",
                    "int",
                    "homeassistant_cli.config.Configuration",
                    "Callable"
                ],
                "api_gateway_stage": [
                    "str",
                    "bool",
                    "click.Context",
                    "int"
                ],
                "stage": [
                    "str",
                    "bool",
                    "click.Context"
                ]
            }
        },
        "appgraph": {
            "name": "appgraph",
            "location": 259,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "dict[str, typing.Any]",
                    "bool",
                    "click.Context",
                    "trezor.utils.HashWriter",
                    "Dict[str, Any]"
                ],
                "autogen_policy": [
                    "str",
                    "bool",
                    "click.Context",
                    "int"
                ],
                "profile": [
                    "bool",
                    "str",
                    "typing.Callable[, ]",
                    "int",
                    "homeassistant_cli.config.Configuration",
                    "Callable"
                ],
                "api_gateway_stage": [
                    "str",
                    "bool",
                    "click.Context",
                    "int"
                ],
                "stage": [
                    "str",
                    "bool",
                    "click.Context",
                    "int"
                ]
            }
        },
        "invoke": {
            "name": "invoke",
            "location": 287,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "bool",
                    "click.Context",
                    "tuple[typing.Union[int,int]]",
                    "Tuple[int, int]",
                    "int"
                ],
                "name": [
                    "click.Context"
                ],
                "profile": [
                    "str",
                    "bool"
                ],
                "stage": [
                    "Exception",
                    "str",
                    "click.core.Context"
                ]
            }
        },
        "delete": {
            "name": "delete",
            "location": 328,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "click.Context",
                    "homeassistant_cli.config.Configuration"
                ],
                "profile": [
                    "homeassistant_cli.config.Configuration"
                ],
                "stage": [
                    "str",
                    "int",
                    "click.Context",
                    "None",
                    "click.core.Context",
                    "Optional[int]"
                ]
            }
        },
        "logs": {
            "name": "logs",
            "location": 369,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "click.Context"
                ],
                "num_entries": [
                    "int",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "include_lambda_messages": [
                    "int",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "stage": [
                    "int",
                    "str",
                    "None",
                    "bool",
                    "click.Context",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "click.Context",
                    "list[str]",
                    "List[str]"
                ],
                "since": [
                    "int",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "follow": [
                    "bool",
                    "Optional[int]",
                    "None",
                    "Optional[str]",
                    "str"
                ],
                "profile": [
                    "str",
                    "bool"
                ]
            }
        },
        "gen_policy": {
            "name": "gen_policy",
            "location": 393,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "click.Context"
                ],
                "filename": [
                    "bool",
                    "click.Context",
                    "str",
                    "list[str]",
                    "List[str]"
                ]
            }
        },
        "new_project": {
            "name": "new_project",
            "location": 412,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "click.Context"
                ],
                "project_name": [
                    "str",
                    "list[str]",
                    "click.Context",
                    "List[str]"
                ],
                "profile": [
                    "bool",
                    "Union[click.Option, click.Parameter]",
                    "click.Parameter"
                ],
                "project_type": [
                    "str"
                ]
            }
        },
        "url": {
            "name": "url",
            "location": 432,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "click.Context",
                    "homeassistant_cli.config.Configuration"
                ],
                "stage": [
                    "str",
                    "click.core.Context",
                    "None",
                    "bytes",
                    "click.Context",
                    "Optional[str]"
                ]
            }
        },
        "generate_sdk": {
            "name": "generate_sdk",
            "location": 454,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "dict[str, typing.Any]",
                    "bool",
                    "Dict[str, Any]",
                    "homeassistant_cli.config.Configuration",
                    "trezor.utils.HashWriter",
                    "click.Context"
                ],
                "sdk_type": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None"
                ],
                "stage": [
                    "str",
                    "bool",
                    "list[str]",
                    "List[str]",
                    "list[tuple[typing.Union[str,str]]]",
                    "List[Tuple[str, str]]",
                    "int"
                ],
                "outdir": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None"
                ]
            }
        },
        "generate_models": {
            "name": "generate_models",
            "location": 477,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "click.Context",
                    "click.core.Context"
                ],
                "stage": [
                    "bool",
                    "click.Context"
                ]
            }
        },
        "package": {
            "name": "package",
            "location": 526,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "str",
                    "float",
                    "typing.Callable[, ]",
                    "Callable",
                    "int",
                    "click.Context",
                    "Literal"
                ],
                "single_file": [
                    "str"
                ],
                "stage": [
                    "str",
                    "bool",
                    "int"
                ],
                "merge_template": [
                    "str",
                    "bool"
                ],
                "out": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "pkg_format": [
                    "str",
                    "bool"
                ],
                "template_format": [
                    "str",
                    "bool"
                ],
                "profile": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "generate_pipeline": {
            "name": "generate_pipeline",
            "location": 586,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "str",
                    "click.Context"
                ],
                "pipeline_version": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "typing.Type",
                    "int",
                    "Type['BaseConfig']"
                ],
                "codebuild_image": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "typing.Type",
                    "int",
                    "Type['BaseConfig']"
                ],
                "source": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "typing.Type",
                    "int",
                    "Type['BaseConfig']"
                ],
                "buildspec_file": [
                    "str",
                    "click.Context",
                    "Optional[str]",
                    "bool"
                ],
                "filename": [
                    "str",
                    "Tuple[int]",
                    "Optional[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 629,
            "return": [
                "int",
                "str",
                "List[str]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "chalice-master/chalice/cli/filewatch/eventbased.py": {
        "WatchdogWorkerProcess._start_file_watcher": {
            "name": "_start_file_watcher",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "project_dir": [
                    "str"
                ]
            }
        },
        "WatchdogFileWatcher.watch_for_file_changes": {
            "name": "watch_for_file_changes",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "root_dir": [
                    "str"
                ],
                "callback": [
                    "str"
                ]
            }
        },
        "WatchdogRestarter.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "restart_event": [
                    "int",
                    "Callable[..., None]",
                    "typing.Callable[..., None]"
                ]
            }
        },
        "WatchdogRestarter.on_any_event": {
            "name": "on_any_event",
            "location": 36,
            "return": [
                "None",
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "int",
                    "threading.Event",
                    "list[]",
                    "events.Event",
                    "set[]",
                    "\"Event\"",
                    "list",
                    "set"
                ]
            }
        },
        "WatchdogRestarter.__call__": {
            "name": "__call__",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "chalice-master/chalice/cli/filewatch/stat.py": {
        "StatWorkerProcess._start_file_watcher": {
            "name": "_start_file_watcher",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "project_dir": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "StatWorkerProcess._on_file_change": {
            "name": "_on_file_change",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatFileWatcher.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "osutils": [
                    "Optional[float]",
                    "None",
                    "Optional[str]",
                    "float",
                    "int",
                    "Optional[int]",
                    "str",
                    "Optional[Callable]",
                    "Optional[Hashable]",
                    "typing.Callable[, ]",
                    "typing.Hashable"
                ]
            }
        },
        "StatFileWatcher.watch_for_file_changes": {
            "name": "watch_for_file_changes",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "root_dir": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "callback": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "StatFileWatcher.poll_for_changes_until_shutdown": {
            "name": "poll_for_changes_until_shutdown",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "root_dir": [
                    "str",
                    "TextIO",
                    "typing.TextIO",
                    "IO",
                    "typing.IO",
                    "List[str]",
                    "list[str]"
                ],
                "callback": [
                    "str",
                    "IO[Any]",
                    "typing.IO"
                ]
            }
        },
        "StatFileWatcher._seed_mtime_cache": {
            "name": "_seed_mtime_cache",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "root_dir": [
                    "str",
                    "IO[Any]",
                    "typing.IO"
                ]
            }
        },
        "StatFileWatcher._single_pass_poll": {
            "name": "_single_pass_poll",
            "location": 61,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "self": [],
                "root_dir": [
                    "str",
                    "bytes"
                ],
                "callback": [
                    "bool"
                ]
            }
        },
        "StatFileWatcher._is_changed_file": {
            "name": "_is_changed_file",
            "location": 75,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int",
                    "dict[, ]",
                    "dict",
                    "bool"
                ],
                "new_mtimes": [
                    "str",
                    "Optional[str]",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "StatFileWatcher._recursive_walk_files": {
            "name": "_recursive_walk_files",
            "location": 91,
            "return": [
                "",
                "typing.Generator[typing.Union[str,int,typing.Pattern,dict[str, str],dict[typing.Any, tuple[typing.Union[typing.Any,typing.Any]]],dict[, ]]]"
            ],
            "arguments": {
                "self": [],
                "root_dir": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "IO[Any]",
                    "typing.IO"
                ]
            }
        }
    },
    "chalice-master/chalice/cli/filewatch/__init__.py": {
        "FileWatcher.watch_for_file_changes": {
            "name": "watch_for_file_changes",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "root_dir": [
                    "Iterable[Optional[Any]]",
                    "bool",
                    "typing.Iterable[typing.Optional[typing.Any]]",
                    "str"
                ],
                "callback": [
                    "Iterable[Optional[Any]]",
                    "bool",
                    "typing.Iterable[typing.Optional[typing.Any]]",
                    "str"
                ]
            }
        },
        "WorkerProcess.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "http_thread": [
                    "Sequence[int]",
                    "typing.Sequence[int]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "WorkerProcess.main": {
            "name": "main",
            "location": 31,
            "return": [
                "int",
                "str",
                "Optional[Dict[str, Any]]",
                "bytes",
                "dict",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "project_dir": [
                    "str"
                ],
                "timeout": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "WorkerProcess._start_file_watcher": {
            "name": "_start_file_watcher",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "project_dir": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "chalice-master/chalice/deploy/appgraph.py": {
        "ApplicationGraphBuilder.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApplicationGraphBuilder.build": {
            "name": "build",
            "location": 27,
            "return": [
                "Application",
                "bool",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "None",
                    "dict[, ]",
                    "tracim.models.data.Workspace",
                    "tracim.models.data.Content",
                    "tracim.models.data.User",
                    "Optional[pyramid.config.Configurator]",
                    "dict"
                ],
                "stage_name": [
                    "str",
                    "dict[, ]",
                    "tracim.models.data.User",
                    "tracim.models.data.Workspace",
                    "tracim.models.data.Content",
                    "dict"
                ]
            }
        },
        "ApplicationGraphBuilder._create_custom_domain_name": {
            "name": "_create_custom_domain_name",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "api_type": [
                    "bool",
                    "str"
                ],
                "domain_name_data": [
                    "Optional[str]",
                    "bool"
                ],
                "endpoint_configuration": [
                    "bool",
                    "str"
                ],
                "api_gateway_stage": [
                    "int",
                    "float",
                    "str",
                    "Optional[Tuple[int, int]]",
                    "tuple[typing.Union[int,int]]",
                    "list",
                    "None",
                    "list[]"
                ]
            }
        },
        "ApplicationGraphBuilder._create_api_mapping_model": {
            "name": "_create_api_mapping_model",
            "location": 70,
            "return": [
                "APIMapping",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "stage": [
                    "str"
                ]
            }
        },
        "ApplicationGraphBuilder._create_lambda_event_resources": {
            "name": "_create_lambda_event_resources",
            "location": 83,
            "return": [
                "list[]",
                "Tuple[bytes]",
                "float",
                "app.models.Tweet",
                "Dict[str, List[str]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[, ]",
                    "dict",
                    "config.Config"
                ],
                "deployment": [
                    "str",
                    "dict[, ]",
                    "bool",
                    "dict",
                    "dict[str, dict[, ]]",
                    "Dict[str, dict]",
                    "Dict[str, Any]"
                ],
                "stage_name": [
                    "str",
                    "dict[, ]",
                    "bool",
                    "dict",
                    "dict[str, dict[, ]]",
                    "Dict[str, dict]",
                    "Dict[str, Any]"
                ]
            }
        },
        "ApplicationGraphBuilder._create_rest_api_model": {
            "name": "_create_rest_api_model",
            "location": 131,
            "return": [
                "RestAPI",
                "str",
                "int",
                "list",
                "Optional[List[str]]",
                "annofabapi.models.Inspection"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[, ]",
                    "str",
                    "pyramid.config.Configurator",
                    "entity_embeddings.Config",
                    "zaimcsvconverter.config.SFCardViewerConfig",
                    "dict"
                ],
                "deployment": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ],
                "stage_name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "ApplicationGraphBuilder._get_default_private_api_policy": {
            "name": "_get_default_private_api_policy",
            "location": 199,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,list[dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, dict[typing.Text, ]]]]]]]",
                "str",
                "int",
                "MutableSequence[utils.CWLObjectType]",
                "Type"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "str",
                    "pyramid.config.Configurator",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "ApplicationGraphBuilder._create_websocket_api_model": {
            "name": "_create_websocket_api_model",
            "location": 214,
            "return": [
                "bool",
                "WebsocketAPI"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "tracim.models.data.Content"
                ],
                "deployment": [
                    "str",
                    "cmk.utils.type_defs.ServiceName",
                    "dict[, ]",
                    "dict[str, str]",
                    "cmk.base.config.ConfigCache",
                    "None",
                    "cmk.utils.type_defs.HostName",
                    "config.Config",
                    "dict",
                    "Dict[str, str]",
                    "Optional[Iterable[str]]"
                ],
                "stage_name": [
                    "str",
                    "cmk.utils.type_defs.ServiceName",
                    "dict[, ]",
                    "dict[str, str]",
                    "cmk.base.config.ConfigCache",
                    "None",
                    "cmk.utils.type_defs.HostName",
                    "config.Config",
                    "dict",
                    "Dict[str, str]",
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "ApplicationGraphBuilder._create_cwe_subscription": {
            "name": "_create_cwe_subscription",
            "location": 267,
            "return": [
                "CloudWatchEvent",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "deployment": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "event_source": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "stage_name": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "ApplicationGraphBuilder._create_scheduled_model": {
            "name": "_create_scheduled_model",
            "location": 291,
            "return": [
                "ScheduledEvent",
                "solo.config.app.Config",
                "str",
                "List[cmk.utils.type_defs.HostName]",
                "app.models.Game",
                "cmk.utils.type_defs.HostName",
                "cmk.utils.type_defs.ServiceName"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "deployment": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "event_source": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "stage_name": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "ApplicationGraphBuilder._create_domain_name_model": {
            "name": "_create_domain_name_model",
            "location": 328,
            "return": [
                "DomainName",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "protocol": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ],
                "data": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ],
                "endpoint_type": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "Optional[List[dict]]",
                    "list[dict[, ]]",
                    "dict",
                    "None",
                    "Optional[List[str]]",
                    "dict[, ]",
                    "Optional[bool]",
                    "bool"
                ],
                "api_mapping": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "ApplicationGraphBuilder._create_lambda_model": {
            "name": "_create_lambda_model",
            "location": 352,
            "return": [
                "str",
                "Dict[str, List[str]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "str",
                    "bool"
                ],
                "deployment": [
                    "str",
                    "None",
                    "Optional[str]",
                    "set[str]",
                    "cmk.utils.tags.AuxTag",
                    "Set[str]"
                ],
                "name": [
                    "str",
                    "zerver.models.Realm"
                ],
                "handler_name": [
                    "str",
                    "None",
                    "Optional[str]",
                    "set[str]",
                    "cmk.utils.tags.AuxTag",
                    "Set[str]"
                ],
                "stage_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "ApplicationGraphBuilder._get_managed_lambda_layer": {
            "name": "_get_managed_lambda_layer",
            "location": 372,
            "return": [
                "Optional[int]",
                "None",
                "str",
                "Optional[str]",
                "int",
                "bool",
                "dict[str, typing.Any]",
                "dict",
                "LambdaLayer"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "str",
                    "config.Config",
                    "pyramid.config.Configurator",
                    "azafea.config.Config"
                ]
            }
        },
        "ApplicationGraphBuilder._get_role_reference": {
            "name": "_get_role_reference",
            "location": 387,
            "return": [
                "str",
                "dict[str, typing.Union[typing.Any,typing.Any]]",
                "salon.models.Stylist",
                "Callable",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "str"
                ],
                "stage_name": [
                    "str"
                ],
                "function_name": [
                    "str"
                ]
            }
        },
        "ApplicationGraphBuilder._get_role_identifier": {
            "name": "_get_role_identifier",
            "location": 399,
            "return": [
                "str",
                "int",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "role": [
                    "float",
                    "abilian.core.models.subjects.Principal",
                    "salon.models.Stylist",
                    "salon.models.StylisAvailableWeekDay"
                ]
            }
        },
        "ApplicationGraphBuilder._create_role_reference": {
            "name": "_create_role_reference",
            "location": 408,
            "return": [
                "PreCreatedIAMRole",
                "ManagedIAMRole",
                "type",
                "Type[object]",
                "List[\"ElementHandle\"]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Tuple[type]",
                    "tuple[typing.Type]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "stage_name": [
                    "str"
                ],
                "function_name": [
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "ApplicationGraphBuilder._get_vpc_params": {
            "name": "_get_vpc_params",
            "location": 447,
            "return": [
                "tuple[]",
                "str",
                "tuple[list[]]",
                "cmk.utils.type_defs.UserId",
                "int",
                "django.db.models.query.QuerySet"
            ],
            "arguments": {
                "self": [],
                "function_name": [
                    "str",
                    "models.Taxonomy.Id"
                ],
                "config": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "ApplicationGraphBuilder._get_lambda_layers": {
            "name": "_get_lambda_layers",
            "location": 465,
            "return": [
                "list[]",
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[str, typing.Any]",
                    "lightbus.config.Config",
                    "Dict[str, Any]",
                    "opentrons.config.robot_configs.robot_config",
                    "Config",
                    "pyramid.config.Configurator"
                ]
            }
        },
        "ApplicationGraphBuilder._build_lambda_function": {
            "name": "_build_lambda_function",
            "location": 470,
            "return": [
                "LambdaFunction",
                "type",
                "str"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "str"
                ],
                "name": [
                    "str",
                    "int",
                    "models.KippoProject"
                ],
                "handler_name": [
                    "str",
                    "models.KippoProject"
                ],
                "deployment": [
                    "str",
                    "models.KippoProject"
                ],
                "role": [
                    "str",
                    "models.KippoProject"
                ]
            }
        },
        "ApplicationGraphBuilder._inject_role_traits": {
            "name": "_inject_role_traits",
            "location": 503,
            "return": [
                "None",
                "app.models.Article",
                "core.models.Resource",
                "Iterator"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "str"
                ],
                "role": [
                    "str",
                    "list[tuple[typing.Union[int,int,float]]]",
                    "models.Model",
                    "allennlp.models.Model",
                    "models.cf_recommend_models.ICfRecommendationModel",
                    "List[Tuple[int, int, float]]"
                ]
            }
        },
        "ApplicationGraphBuilder._create_bucket_notification": {
            "name": "_create_bucket_notification",
            "location": 513,
            "return": [
                "str",
                "S3BucketNotification"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "None"
                ],
                "deployment": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "None"
                ],
                "s3_event": [
                    "str",
                    "bool",
                    "Optional[int]",
                    "None",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]"
                ],
                "stage_name": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "None"
                ]
            }
        },
        "ApplicationGraphBuilder._create_sns_subscription": {
            "name": "_create_sns_subscription",
            "location": 536,
            "return": [
                "SNSLambdaSubscription",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[, ]",
                    "dict",
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, Any]",
                    "neuromation.api.Config",
                    "Config",
                    "config.Config"
                ],
                "deployment": [
                    "dict[, ]",
                    "dict",
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, Any]",
                    "neuromation.api.Config",
                    "Config",
                    "config.Config"
                ],
                "sns_config": [
                    "dict[, ]",
                    "dict",
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, Any]",
                    "neuromation.api.Config",
                    "Config",
                    "config.Config"
                ],
                "stage_name": [
                    "dict[, ]",
                    "dict",
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, Any]",
                    "neuromation.api.Config",
                    "Config",
                    "config.Config"
                ]
            }
        },
        "ApplicationGraphBuilder._create_sqs_subscription": {
            "name": "_create_sqs_subscription",
            "location": 556,
            "return": [
                "SQSEventSource",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[, ]",
                    "dict",
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, Any]",
                    "neuromation.api.Config",
                    "Config",
                    "config.Config"
                ],
                "deployment": [
                    "dict[, ]",
                    "dict",
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, Any]",
                    "neuromation.api.Config",
                    "Config",
                    "config.Config"
                ],
                "sqs_config": [
                    "dict[, ]",
                    "dict",
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, Any]",
                    "neuromation.api.Config",
                    "Config",
                    "config.Config"
                ],
                "stage_name": [
                    "dict[, ]",
                    "dict",
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, Any]",
                    "neuromation.api.Config",
                    "Config",
                    "config.Config"
                ]
            }
        },
        "ApplicationGraphBuilder._create_kinesis_subscription": {
            "name": "_create_kinesis_subscription",
            "location": 584,
            "return": [
                "KinesisEventSource",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[, ]",
                    "dict",
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, Any]",
                    "neuromation.api.Config",
                    "Config",
                    "config.Config"
                ],
                "deployment": [
                    "dict[, ]",
                    "dict",
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, Any]",
                    "neuromation.api.Config",
                    "Config",
                    "config.Config"
                ],
                "kinesis_config": [
                    "dict[, ]",
                    "dict",
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, Any]",
                    "neuromation.api.Config",
                    "Config",
                    "config.Config"
                ],
                "stage_name": [
                    "dict[, ]",
                    "dict",
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, Any]",
                    "neuromation.api.Config",
                    "Config",
                    "config.Config"
                ]
            }
        },
        "ApplicationGraphBuilder._create_ddb_subscription": {
            "name": "_create_ddb_subscription",
            "location": 608,
            "return": [
                "DynamoDBEventSource",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[, ]",
                    "dict",
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, Any]",
                    "neuromation.api.Config",
                    "Config",
                    "config.Config"
                ],
                "deployment": [
                    "dict[, ]",
                    "dict",
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, Any]",
                    "neuromation.api.Config",
                    "Config",
                    "config.Config"
                ],
                "ddb_config": [
                    "dict[, ]",
                    "dict",
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, Any]",
                    "neuromation.api.Config",
                    "Config",
                    "config.Config"
                ],
                "stage_name": [
                    "dict[, ]",
                    "dict",
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, Any]",
                    "neuromation.api.Config",
                    "Config",
                    "config.Config"
                ]
            }
        },
        "DependencyBuilder.__init__": {
            "name": "__init__",
            "location": 634,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DependencyBuilder.build_dependencies": {
            "name": "build_dependencies",
            "location": 638,
            "return": [
                "bool",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "bool"
                ]
            }
        },
        "DependencyBuilder._traverse": {
            "name": "_traverse",
            "location": 646,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "Callable[..., bool]",
                    "int",
                    "Iterable[int]"
                ],
                "ordered": [
                    "utils.CWLObjectType",
                    "str",
                    "int",
                    "topicdb.core.models.occurrence.Occurrence"
                ],
                "seen": [
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "GraphPrettyPrint.__init__": {
            "name": "__init__",
            "location": 664,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "ui": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "GraphPrettyPrint.display_graph": {
            "name": "display_graph",
            "location": 668,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "GraphPrettyPrint._traverse": {
            "name": "_traverse",
            "location": 674,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "str",
                    "raiden.utils.Address"
                ],
                "level": [
                    "bool",
                    "Iterable[T]",
                    "Callable"
                ]
            }
        },
        "GraphPrettyPrint._get_model_text": {
            "name": "_get_model_text",
            "location": 684,
            "return": [
                "str",
                "typing.Text",
                "Set[str]",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "str",
                    "bool",
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ],
                "spaces": [
                    "list",
                    "List[str]",
                    "str"
                ],
                "level": [
                    "int",
                    "list[dict[str, typing.Any]]",
                    "str",
                    "Callable",
                    "bool",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "GraphPrettyPrint._add_remaining_lines": {
            "name": "_add_remaining_lines",
            "location": 700,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "str"
                ],
                "remaining": [
                    "str",
                    "int"
                ],
                "full": [
                    "str"
                ]
            }
        },
        "GraphPrettyPrint._get_filtered_params": {
            "name": "_get_filtered_params",
            "location": 708,
            "return": [
                "str",
                "bool",
                "Callable[..., None]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[str]",
                    "salon.models.Stylist"
                ]
            }
        }
    },
    "chalice-master/chalice/deploy/deployer.py": {
        "create_plan_only_deployer": {
            "name": "create_plan_only_deployer",
            "location": 253,
            "return": [
                "str",
                "List[str]",
                "Optional[str]",
                "cmk.utils.type_defs.EventRule",
                "Dict[str, Union[str, Set]]"
            ],
            "arguments": {
                "session": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "str",
                    "list[P]",
                    "pymap.config.IMAPConfig",
                    "List['PydanticModelField']"
                ],
                "config": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "str",
                    "list[P]",
                    "pymap.config.IMAPConfig",
                    "List['PydanticModelField']"
                ],
                "ui": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "str",
                    "list[P]",
                    "pymap.config.IMAPConfig",
                    "List['PydanticModelField']"
                ]
            }
        },
        "create_default_deployer": {
            "name": "create_default_deployer",
            "location": 259,
            "return": [
                "Set[str]",
                "str",
                "cmk.utils.type_defs.EventRule",
                "dict",
                "bool"
            ],
            "arguments": {
                "session": [
                    "str",
                    "dict[str, typing.Any]",
                    "pymap.config.IMAPConfig",
                    "Dict[str, Any]",
                    "config.ConfigManager",
                    "Config"
                ],
                "config": [
                    "str",
                    "dict[str, typing.Any]",
                    "pymap.config.IMAPConfig",
                    "Dict[str, Any]",
                    "config.ConfigManager",
                    "Config"
                ],
                "ui": [
                    "str",
                    "dict[str, typing.Any]",
                    "pymap.config.IMAPConfig",
                    "Dict[str, Any]",
                    "config.ConfigManager",
                    "Config"
                ]
            }
        },
        "_create_deployer": {
            "name": "_create_deployer",
            "location": 264,
            "return": [
                "Deployer",
                "bool",
                "str",
                "allennlp.models.archival.Archive"
            ],
            "arguments": {
                "session": [
                    "Optional[Any]",
                    "bool",
                    "typing.Any",
                    "None"
                ],
                "config": [
                    "dict",
                    "dict[, ]"
                ],
                "ui": [
                    "dict",
                    "dict[, ]"
                ],
                "executor_cls": [
                    "dict",
                    "dict[, ]"
                ],
                "recorder_cls": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "create_build_stage": {
            "name": "create_build_stage",
            "location": 289,
            "return": [
                "BuildStage",
                "str",
                "Dict[str, Any]",
                "bool",
                "dict"
            ],
            "arguments": {
                "osutils": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]"
                ],
                "ui": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "list",
                    "list[]"
                ],
                "swagger_gen": [
                    "Union[Callable, None]",
                    "typing.Callable[, ]",
                    "bool",
                    "List[str]",
                    "None",
                    "list[str]",
                    "Dict[str, Any]",
                    "\"Config\"",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ],
                "config": [
                    "int",
                    "sphinx.config.Config",
                    "model.Config",
                    "virgene.config.Config",
                    "Config"
                ]
            }
        },
        "create_deletion_deployer": {
            "name": "create_deletion_deployer",
            "location": 339,
            "return": [
                "Deployer",
                "bool",
                "str",
                "allennlp.models.archival.Archive"
            ],
            "arguments": {
                "client": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ],
                "ui": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "ChaliceDeploymentError.__init__": {
            "name": "__init__",
            "location": 147,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "ChaliceDeploymentError._get_error_location": {
            "name": "_get_error_location",
            "location": 162,
            "return": [
                "typing.Text",
                "int",
                "str",
                "List[List[int]]",
                "cmk.utils.type_defs.EventRule",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "Exception",
                    "str",
                    "BaseException",
                    "bool"
                ]
            }
        },
        "ChaliceDeploymentError._get_error_message": {
            "name": "_get_error_message",
            "location": 176,
            "return": [
                "str",
                "int",
                "Callable",
                "List[List[int]]"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "str",
                    "TextIO",
                    "typing.TextIO"
                ]
            }
        },
        "ChaliceDeploymentError._get_error_message_for_connection_error": {
            "name": "_get_error_message_for_connection_error",
            "location": 185,
            "return": [
                "Dict[str, Any]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "connection_error": [
                    "bool",
                    "list",
                    "list[]",
                    "List[str]",
                    "list[str]",
                    "Callable[..., None]",
                    "typing.Callable[..., None]"
                ]
            }
        },
        "ChaliceDeploymentError._get_error_suggestion": {
            "name": "_get_error_suggestion",
            "location": 208,
            "return": [
                "None",
                "str",
                "typing.Text",
                "int",
                "Callable",
                "List[List[int]]"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "str",
                    "bool",
                    "dict",
                    "Exception",
                    "dict[, ]"
                ]
            }
        },
        "ChaliceDeploymentError._wrap_text": {
            "name": "_wrap_text",
            "location": 230,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "indent": [
                    "typing.Text",
                    "str",
                    "List[str]"
                ]
            }
        },
        "ChaliceDeploymentError._get_verb_from_client_method": {
            "name": "_get_verb_from_client_method",
            "location": 239,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "client_method_name": [
                    "str",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "typing.Type",
                    "type",
                    "requests.Session"
                ]
            }
        },
        "ChaliceDeploymentError._get_mb": {
            "name": "_get_mb",
            "location": 248,
            "return": [
                "typing.Text",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "Deployer.__init__": {
            "name": "__init__",
            "location": 355,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "application_builder": [
                    "bool",
                    "str",
                    "Optional[List[Any]]",
                    "list[typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "deps_builder": [
                    "bool",
                    "str",
                    "Optional[List[Any]]",
                    "list[typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "build_stage": [
                    "List[str]",
                    "int",
                    "list[str]",
                    "Optional[str]",
                    "str",
                    "Dict[str, Any]",
                    "None",
                    "Optional[Tuple[str, str]]",
                    "dict[str, typing.Any]",
                    "tuple[typing.Union[str,str]]"
                ],
                "plan_stage": [
                    "bool",
                    "str",
                    "Optional[List[Any]]",
                    "list[typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "sweeper": [
                    "bool",
                    "str",
                    "Optional[List[Any]]",
                    "list[typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "executor": [
                    "bool",
                    "str",
                    "Optional[List[Any]]",
                    "list[typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "recorder": [
                    "bool",
                    "str",
                    "Optional[List[Any]]",
                    "list[typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Deployer.deploy": {
            "name": "deploy",
            "location": 373,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Type",
                    "Dict[str, Any]",
                    "entity_embeddings.Config",
                    "Type[config.Config]",
                    "zaimcsvconverter.config.SFCardViewerConfig"
                ],
                "chalice_stage_name": [
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Type",
                    "Dict[str, Any]",
                    "entity_embeddings.Config",
                    "Type[config.Config]",
                    "zaimcsvconverter.config.SFCardViewerConfig"
                ]
            }
        },
        "Deployer._deploy": {
            "name": "_deploy",
            "location": 380,
            "return": [
                "dict[typing.Text, typing.Text]",
                "str",
                "int",
                "concurrenfutures.Executor",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[, ]",
                    "dict",
                    "app.config.HealthCheckConfig",
                    "entity_embeddings.Config",
                    "pyramid.config.Configurator",
                    "zaimcsvconverter.config.SFCardViewerConfig"
                ],
                "chalice_stage_name": [
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "Deployer._validate_config": {
            "name": "_validate_config",
            "location": 405,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "typing.Mapping",
                    "Mapping[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "config.Config"
                ]
            }
        },
        "BaseDeployStep.handle": {
            "name": "handle",
            "location": 414,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[str, typing.Any]",
                    "lightbus.config.Config",
                    "str",
                    "None",
                    "Dict[str, Any]",
                    "opentrons.config.robot_configs.robot_config",
                    "pyramid.config.Configurator",
                    "Optional[str]"
                ],
                "resource": [
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "config.ConfigStorage",
                    "dict"
                ]
            }
        },
        "InjectDefaults.__init__": {
            "name": "__init__",
            "location": 423,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "lambda_timeout": [
                    "int",
                    "str"
                ],
                "lambda_memory_size": [
                    "int",
                    "Tuple[int, int]",
                    "Union[Tuple[int, int], int]"
                ],
                "tls_version": [
                    "int",
                    "bool",
                    "constants.HttpVersion",
                    "Optional[int]",
                    "Set[Tuple[int, int]]"
                ]
            }
        },
        "InjectDefaults.handle_lambdafunction": {
            "name": "handle_lambdafunction",
            "location": 431,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[str, typing.Any]",
                    "bool",
                    "Dict[str, Any]",
                    "Config",
                    "core.Config",
                    "revlibs.connections.config.Config"
                ],
                "resource": [
                    "tuple[typing.Union[int,int]]",
                    "zam_repondeur.models.Article",
                    "None",
                    "Optional[Tuple[int, int]]",
                    "int",
                    "Optional[int]",
                    "list[str]",
                    "Optional[Iterable[str]]",
                    "Optional[List[str]]"
                ]
            }
        },
        "InjectDefaults.handle_domainname": {
            "name": "handle_domainname",
            "location": 438,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[str, typing.Any]",
                    "bool",
                    "Dict[str, Any]",
                    "Config",
                    "core.Config",
                    "revlibs.connections.config.Config"
                ],
                "resource": [
                    "list[S]",
                    "bool",
                    "asyncpg_migrate.model.Config",
                    "List[jinete.models.Stop]",
                    "models.Form700Filing",
                    "models.User"
                ]
            }
        },
        "DeploymentPackager.__init__": {
            "name": "__init__",
            "location": 446,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "packager": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "DeploymentPackager.handle_deploymentpackage": {
            "name": "handle_deploymentpackage",
            "location": 450,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "str",
                    "sphinx.config.Config",
                    "list[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "resource": [
                    "str",
                    "dict[, ]",
                    "dict",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "core_lib.core.models.Event"
                ]
            }
        },
        "ManagedLayerDeploymentPackager.__init__": {
            "name": "__init__",
            "location": 462,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "lambda_packager": [
                    "int",
                    "float",
                    "bool"
                ],
                "layer_packager": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "ManagedLayerDeploymentPackager.handle_lambdafunction": {
            "name": "handle_lambdafunction",
            "location": 470,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, Any]",
                    "config.ConfigFile",
                    "cmk.base.config.ConfigCache"
                ],
                "resource": [
                    "dict[, ]",
                    "dict",
                    "utils.config_generator.Configurations",
                    "Config"
                ]
            }
        },
        "ManagedLayerDeploymentPackager.handle_lambdalayer": {
            "name": "handle_lambdalayer",
            "location": 486,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, Any]",
                    "config.ConfigFile",
                    "cmk.base.config.ConfigCache"
                ],
                "resource": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "SwaggerBuilder.__init__": {
            "name": "__init__",
            "location": 504,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "swagger_generator": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "SwaggerBuilder.handle_restapi": {
            "name": "handle_restapi",
            "location": 508,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "str",
                    "utils.config_generator.Configurations",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict",
                    "core.common.Config"
                ],
                "resource": [
                    "dict[str, typing.Any]",
                    "str",
                    "_pytesconfig.Config",
                    "core.common.Config",
                    "Dict[str, Any]"
                ]
            }
        },
        "LambdaEventSourcePolicyInjector.__init__": {
            "name": "__init__",
            "location": 516,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LambdaEventSourcePolicyInjector.handle_sqseventsource": {
            "name": "handle_sqseventsource",
            "location": 522,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[str, typing.Any]",
                    "bool",
                    "Dict[str, Any]",
                    "Config",
                    "core.Config",
                    "revlibs.connections.config.Config"
                ],
                "resource": [
                    "dict[str, typing.Any]",
                    "config.Config",
                    "typing.Mapping",
                    "Dict[str, Any]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "LambdaEventSourcePolicyInjector.handle_kinesiseventsource": {
            "name": "handle_kinesiseventsource",
            "location": 539,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[str, typing.Any]",
                    "bool",
                    "Dict[str, Any]",
                    "Config",
                    "core.Config",
                    "revlibs.connections.config.Config"
                ],
                "resource": [
                    "dict[str, typing.Any]",
                    "config.Config",
                    "typing.Mapping",
                    "Dict[str, Any]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "LambdaEventSourcePolicyInjector.handle_dynamodbeventsource": {
            "name": "handle_dynamodbeventsource",
            "location": 551,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[str, typing.Any]",
                    "bool",
                    "Dict[str, Any]",
                    "Config",
                    "core.Config",
                    "revlibs.connections.config.Config"
                ],
                "resource": [
                    "dict[str, typing.Any]",
                    "config.Config",
                    "typing.Mapping",
                    "Dict[str, Any]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "LambdaEventSourcePolicyInjector._needs_policy_injected": {
            "name": "_needs_policy_injected",
            "location": 563,
            "return": [
                "bool",
                "str",
                "float",
                "bytearray"
            ],
            "arguments": {
                "self": [],
                "role": [
                    "bool",
                    "str",
                    "dict[str, typing.Any]",
                    "abilian.core.models.subjects.Principal",
                    "set[int]",
                    "Dict[str, Any]",
                    "salon.models.Stylist",
                    "Set[int]",
                    "int"
                ]
            }
        },
        "LambdaEventSourcePolicyInjector._inject_trigger_policy": {
            "name": "_inject_trigger_policy",
            "location": 571,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "document": [
                    "str",
                    "int",
                    "T"
                ],
                "policy": [
                    "int",
                    "str",
                    "T"
                ]
            }
        },
        "WebsocketPolicyInjector.__init__": {
            "name": "__init__",
            "location": 577,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebsocketPolicyInjector.handle_websocketapi": {
            "name": "handle_websocketapi",
            "location": 581,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "pyramid.config.Configurator",
                    "_pytesconfig.Config",
                    "config.Config",
                    "isorsettings.Config"
                ],
                "resource": [
                    "pyramid.config.Configurator",
                    "_pytesconfig.Config",
                    "config.Config",
                    "isorsettings.Config"
                ]
            }
        },
        "WebsocketPolicyInjector._inject_into_function": {
            "name": "_inject_into_function",
            "location": 587,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "bool",
                    "str",
                    "None",
                    "Optional[bool]",
                    "typing.Type",
                    "int",
                    "Optional[Type[Any]]"
                ],
                "lambda_function": [
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "None",
                    "int"
                ]
            }
        },
        "WebsocketPolicyInjector._inject_policy": {
            "name": "_inject_policy",
            "location": 604,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "document": [
                    "str",
                    "int",
                    "T"
                ],
                "policy": [
                    "int",
                    "str",
                    "T"
                ]
            }
        },
        "PolicyGenerator.__init__": {
            "name": "__init__",
            "location": 610,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "policy_gen": [
                    "int",
                    "float",
                    "bool"
                ],
                "osutils": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "PolicyGenerator._read_document_from_file": {
            "name": "_read_document_from_file",
            "location": 615,
            "return": [
                "str",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Mapping[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "PolicyGenerator.handle_filebasediampolicy": {
            "name": "handle_filebasediampolicy",
            "location": 623,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[str, typing.Any]",
                    "bool",
                    "Dict[str, Any]",
                    "Config",
                    "core.Config",
                    "revlibs.connections.config.Config"
                ],
                "resource": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]",
                    "Union[int, str]",
                    "trinity.config.ChainConfig",
                    "Optional[requests.Response]"
                ]
            }
        },
        "PolicyGenerator.handle_restapi": {
            "name": "handle_restapi",
            "location": 627,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[str, typing.Any]",
                    "bool",
                    "Dict[str, Any]",
                    "Config",
                    "core.Config",
                    "revlibs.connections.config.Config"
                ],
                "resource": [
                    "str",
                    "cmk.base.config.ConfigCache",
                    "videoarchiver.tvasahi.models.Episode",
                    "requests.cookies.RequestsCookieJar",
                    "cmk.base.config.HostConfig",
                    "snapcrafinternal.project_loader._config.Config"
                ]
            }
        },
        "PolicyGenerator.handle_autogeniampolicy": {
            "name": "handle_autogeniampolicy",
            "location": 634,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "typing.Mapping",
                    "config.Config",
                    "dict[, ]",
                    "Mapping[str, Any]",
                    "dict"
                ],
                "resource": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "typing.Callable[, ]",
                    "asyncpg_migrate.model.Config",
                    "Callable"
                ]
            }
        },
        "BuildStage.__init__": {
            "name": "__init__",
            "location": 644,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "steps": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "BuildStage.execute": {
            "name": "execute",
            "location": 648,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "str",
                    "pyramid.config.Configurator",
                    "None",
                    "Optional[str]",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]"
                ],
                "resources": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "bool",
                    "Config",
                    "core.Config",
                    "revlibs.connections.config.Config"
                ]
            }
        },
        "ResultsRecorder.__init__": {
            "name": "__init__",
            "location": 656,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "osutils": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "ResultsRecorder.record_results": {
            "name": "record_results",
            "location": 660,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "bool",
                    "str",
                    "list[]",
                    "list",
                    "dict[, ]",
                    "int",
                    "dict"
                ],
                "chalice_stage_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "project_dir": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "NoopResultsRecorder.record_results": {
            "name": "record_results",
            "location": 677,
            "return": [
                "None",
                "Optional[str]",
                "bool",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Set[int]",
                    "set[int]",
                    "list[str]",
                    "List[str]",
                    "zerver.models.UserProfile",
                    "zerver.models.Message"
                ],
                "chalice_stage_name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Set[int]",
                    "set[int]",
                    "list[str]",
                    "List[str]",
                    "zerver.models.UserProfile",
                    "zerver.models.Message"
                ],
                "project_dir": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Set[int]",
                    "set[int]",
                    "list[str]",
                    "List[str]",
                    "zerver.models.UserProfile",
                    "zerver.models.Message"
                ]
            }
        },
        "DeploymentReporter.__init__": {
            "name": "__init__",
            "location": 692,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "ui": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "DeploymentReporter.generate_report": {
            "name": "generate_report",
            "location": 696,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "deployed_values": [
                    "list[]",
                    "dict",
                    "Union[Dict, List]"
                ]
            }
        },
        "DeploymentReporter._report_rest_api": {
            "name": "_report_rest_api",
            "location": 711,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "int",
                    "T"
                ],
                "report": [
                    "int",
                    "str",
                    "T"
                ]
            }
        },
        "DeploymentReporter._report_websocket_api": {
            "name": "_report_websocket_api",
            "location": 715,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "int",
                    "T"
                ],
                "report": [
                    "int",
                    "str",
                    "T"
                ]
            }
        },
        "DeploymentReporter._report_domain_name": {
            "name": "_report_domain_name",
            "location": 720,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "list[]",
                    "list",
                    "str",
                    "list[str]",
                    "List[str]",
                    "tuple[]",
                    "Callable[[], None]",
                    "tuple"
                ],
                "report": [
                    "list[]",
                    "list[str]",
                    "list",
                    "List[str]",
                    "str",
                    "Callable[[], None]",
                    "tuple"
                ]
            }
        },
        "DeploymentReporter._report_lambda_function": {
            "name": "_report_lambda_function",
            "location": 730,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "float"
                ],
                "report": [
                    "float"
                ]
            }
        },
        "DeploymentReporter._report_lambda_layer": {
            "name": "_report_lambda_layer",
            "location": 734,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "int",
                    "T"
                ],
                "report": [
                    "int",
                    "str",
                    "T"
                ]
            }
        },
        "DeploymentReporter._default_report": {
            "name": "_default_report",
            "location": 739,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "bool",
                    "Any",
                    "typing.Any",
                    "Optional[str]",
                    "None"
                ],
                "report": [
                    "str",
                    "bool",
                    "Any",
                    "typing.Any",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "DeploymentReporter.display_report": {
            "name": "display_report",
            "location": 745,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "deployed_values": [
                    "str",
                    "bool",
                    "float",
                    "int",
                    "app.models.move.Coordinate"
                ]
            }
        }
    },
    "chalice-master/chalice/deploy/executor.py": {
        "BaseExecutor.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "float",
                    "utils.clienClient"
                ],
                "ui": [
                    "str",
                    "float",
                    "utils.clienClient"
                ]
            }
        },
        "BaseExecutor.execute": {
            "name": "execute",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "plan": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Executor.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "List[str]",
                    "str",
                    "list[str]"
                ],
                "ui": [
                    "List[str]",
                    "str",
                    "list[str]"
                ]
            }
        },
        "Executor.execute": {
            "name": "execute",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "plan": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "bytes",
                    "Callable[[bytes], bytes]",
                    "typing.Callable[bytes, bytes]"
                ]
            }
        },
        "Executor._default_handler": {
            "name": "_default_handler",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "instruction": [
                    "str",
                    "zam_repondeur.models.Lecture"
                ]
            }
        },
        "Executor._do_apicall": {
            "name": "_do_apicall",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "instruction": [
                    "None",
                    "str",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "dict[, ]",
                    "raiden.utils.Address",
                    "dict"
                ]
            }
        },
        "Executor._do_copyvariable": {
            "name": "_do_copyvariable",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "instruction": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "Executor._do_storevalue": {
            "name": "_do_storevalue",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "instruction": [
                    "type",
                    "typing.Type"
                ]
            }
        },
        "Executor._do_storemultiplevalue": {
            "name": "_do_storemultiplevalue",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "instruction": [
                    "khetha.models.Question"
                ]
            }
        },
        "Executor._do_recordresourcevariable": {
            "name": "_do_recordresourcevariable",
            "location": 81,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "instruction": [
                    "bool",
                    "dict",
                    "str",
                    "dict[, ]",
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "Executor._do_recordresourcevalue": {
            "name": "_do_recordresourcevalue",
            "location": 90,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "instruction": [
                    "dict",
                    "bool",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "Executor._add_to_deployed_values": {
            "name": "_add_to_deployed_values",
            "location": 99,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "str",
                    "dict",
                    "zam_repondeur.models.Lecture",
                    "Dict[str, str]"
                ]
            }
        },
        "Executor._do_jpsearch": {
            "name": "_do_jpsearch",
            "location": 110,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "instruction": [
                    "Optional[abilian.core.models.Model]",
                    "float",
                    "None"
                ]
            }
        },
        "Executor._do_builtinfunction": {
            "name": "_do_builtinfunction",
            "location": 116,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "instruction": [
                    "bool",
                    "str",
                    "dict[, ]",
                    "dict",
                    "zerver.models.Stream"
                ]
            }
        },
        "Executor._resolve_variables": {
            "name": "_resolve_variables",
            "location": 160,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "api_call": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "VariableResolver.resolve_variables": {
            "name": "resolve_variables",
            "location": 171,
            "return": [
                "int",
                "typing.Type",
                "bool",
                "typing.Callable[..., collections.abc.Awaitable[None]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Type",
                    "typing.Type",
                    "str",
                    "Callable[..., Awaitable[None]]",
                    "typing.Callable[..., collections.abc.Awaitable[None]]"
                ],
                "variables": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "VariableResolver._resolve_variable": {
            "name": "_resolve_variable",
            "location": 182,
            "return": [
                "str",
                "Callable[..., T]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Type",
                    "typing.Type"
                ],
                "variables": [
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "VariableResolver._resolve_stringformat": {
            "name": "_resolve_stringformat",
            "location": 186,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool"
                ],
                "variables": [
                    "dict",
                    "dict[, ]",
                    "Optional[Any]",
                    "typing.Any",
                    "str",
                    "Sequence[Union[str, int]]",
                    "int",
                    "None",
                    "Sequence[str]",
                    "typing.Sequence[typing.Union[str,int]]"
                ]
            }
        },
        "VariableResolver._resolve_keydatavariable": {
            "name": "_resolve_keydatavariable",
            "location": 191,
            "return": [
                "str",
                "type"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Type",
                    "str",
                    "typing.Type",
                    "int",
                    "dict",
                    "dict[, ]"
                ],
                "variables": [
                    "Type",
                    "str",
                    "typing.Type",
                    "int",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "VariableResolver._resolve_placeholder": {
            "name": "_resolve_placeholder",
            "location": 195,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "variables": []
            }
        },
        "VariableResolver._resolve_dict": {
            "name": "_resolve_dict",
            "location": 201,
            "return": [
                "dict[typing.Union[tuple[typing.Union[str,int]],tuple[typing.Union[str,list[typing.Callable[, ]]]]], ]",
                "str",
                "bool",
                "List[Dict]",
                "Mapping[str, Any]",
                "Dict[int, Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "dict[, ]",
                    "dict",
                    "dict[str, int]",
                    "dict[str, list[typing.Callable[, ]]]",
                    "Dict[str, int]",
                    "bool",
                    "Dict[str, Any]",
                    "Dict[str, List[Callable]]"
                ],
                "variables": [
                    "str",
                    "Callable[[Any], None]",
                    "typing.Callable[typing.Any, None]",
                    "Optional[\"libkol.Item\"]",
                    "None"
                ]
            }
        },
        "VariableResolver._resolve_list": {
            "name": "_resolve_list",
            "location": 212,
            "return": [
                "list[]",
                "str",
                "List[Dict]",
                "List[int]",
                "List[List[Any]]",
                "list"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Callable",
                    "bool",
                    "vimiv.utils.customtypes.FuncT",
                    "float"
                ],
                "variables": [
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]",
                    "int",
                    "list",
                    "list[]",
                    "Tuple[Any, float]",
                    "tuple[typing.Union[typing.Any,float]]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "DisplayOnlyExecutor.execute": {
            "name": "execute",
            "location": 228,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "plan": [
                    "int",
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "models.Question"
                ]
            }
        },
        "DisplayOnlyExecutor._write_spillover": {
            "name": "_write_spillover",
            "location": 238,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "spillover_values": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "bool",
                    "float",
                    "Match"
                ]
            }
        },
        "DisplayOnlyExecutor._default_handler": {
            "name": "_default_handler",
            "location": 248,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "instruction": [
                    "str",
                    "bool"
                ],
                "spillover_values": [
                    "float",
                    "bool",
                    "Optional[T]",
                    "None"
                ]
            }
        },
        "DisplayOnlyExecutor._format_dict": {
            "name": "_format_dict",
            "location": 262,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "dict_value": [
                    "dict[, ]",
                    "dict",
                    "bool",
                    "List[List[str]]",
                    "List[str]",
                    "str",
                    "Iterable[Any]",
                    "int"
                ],
                "spillover_values": [
                    "str",
                    "List[str]",
                    "dict",
                    "Dict[str, str]",
                    "Set[str]"
                ]
            }
        },
        "DisplayOnlyExecutor._upper_snake_case": {
            "name": "_upper_snake_case",
            "location": 284,
            "return": [
                "int",
                "float",
                "list[str]",
                "bool",
                "IO",
                "bytes",
                "List[str]",
                "cmk.utils.type_defs.HostAddress"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int"
                ]
            }
        },
        "UnresolvedValueError.__init__": {
            "name": "__init__",
            "location": 299,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "dict[, ]",
                    "dict",
                    "None",
                    "typing.MutableMapping",
                    "Iterable",
                    "Optional[Iterable]",
                    "MutableMapping",
                    "T"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "method_name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "UnresolvedValueError.__str__": {
            "name": "__str__",
            "location": 306,
            "return": [
                "int",
                "str",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "chalice-master/chalice/deploy/models.py": {
        "TLSVersion.create": {
            "name": "create",
            "location": 31,
            "return": [
                "typing.Text",
                "Optional[bool]",
                "None",
                "Optional[str]",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict[str, typing.Any]",
                    "int",
                    "bool",
                    "Mapping[str, str]",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "str_version": [
                    "str",
                    "float",
                    "int",
                    "Union[int, str]"
                ]
            }
        },
        "Model.dependencies": {
            "name": "dependencies",
            "location": 114,
            "return": [
                "list[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.dependencies": {
            "name": "dependencies",
            "location": 131,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagedIAMRole.dependencies": {
            "name": "dependencies",
            "location": 173,
            "return": [
                "list[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LambdaLayer.dependencies": {
            "name": "dependencies",
            "location": 186,
            "return": [
                "str",
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LambdaFunction.dependencies": {
            "name": "dependencies",
            "location": 212,
            "return": [
                "list[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionEventSubscriber.dependencies": {
            "name": "dependencies",
            "location": 225,
            "return": [
                "list[]",
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DomainName.dependencies": {
            "name": "dependencies",
            "location": 265,
            "return": [
                "list[]",
                "Dict[str, Any]",
                "str",
                "Dict[str, int]",
                "Dict[str, Dict[str, str]]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "RestAPI.dependencies": {
            "name": "dependencies",
            "location": 284,
            "return": [
                "List[Dict]",
                "str",
                "List[str]",
                "List[int]",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebsocketAPI.dependencies": {
            "name": "dependencies",
            "location": 304,
            "return": [
                "list[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueueARN.queue_name": {
            "name": "queue_name",
            "location": 338,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Container[str]",
                "bool",
                "Union[List, Dict]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "chalice-master/chalice/deploy/packager.py": {
        "MissingDependencyError.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "missing": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "NoSuchPackageError.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "package_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "UnsupportedPackageError.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "package_name": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "BaseLambdaDeploymentPackager.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "osutils": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[List]",
                    "Sequence[str]",
                    "Dict[str, Tuple[str, str]]"
                ],
                "dependency_builder": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[List]",
                    "Sequence[str]",
                    "Dict[str, Tuple[str, str]]"
                ],
                "ui": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[List]",
                    "Sequence[str]",
                    "Dict[str, Tuple[str, str]]"
                ]
            }
        },
        "BaseLambdaDeploymentPackager.create_deployment_package": {
            "name": "create_deployment_package",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "project_dir": [
                    "bool",
                    "str"
                ],
                "python_version": [
                    "bool",
                    "str"
                ]
            }
        },
        "BaseLambdaDeploymentPackager._get_requirements_filename": {
            "name": "_get_requirements_filename",
            "location": 93,
            "return": [
                "Union[str, IO]",
                "str",
                "IO[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "project_dir": [
                    "str",
                    "bytes"
                ]
            }
        },
        "BaseLambdaDeploymentPackager._add_vendor_files": {
            "name": "_add_vendor_files",
            "location": 98,
            "return": [
                "Set[str]",
                "str",
                "List[str]",
                "Tuple[int, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "zipped": [
                    "str"
                ],
                "dirname": [
                    "str",
                    "Union[str, IO]",
                    "Tuple[int, int]",
                    "IO[str]",
                    "bytes",
                    "IO[bytes]"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "BaseLambdaDeploymentPackager.deployment_package_filename": {
            "name": "deployment_package_filename",
            "location": 112,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "project_dir": [
                    "str"
                ],
                "python_version": [
                    "str"
                ]
            }
        },
        "BaseLambdaDeploymentPackager._deployment_package_filename": {
            "name": "_deployment_package_filename",
            "location": 124,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "project_dir": [
                    "str"
                ],
                "python_version": [
                    "str",
                    "Set[str]",
                    "List[tuple]",
                    "Tuple[str]",
                    "set",
                    "Set[cmk.utils.type_defs.HostName]",
                    "Dict[str, Any]",
                    "AbstractSet[str]"
                ],
                "prefix": [
                    "str",
                    "Set[str]",
                    "List[tuple]",
                    "Tuple[str]",
                    "set",
                    "Set[cmk.utils.type_defs.HostName]",
                    "Dict[str, Any]",
                    "AbstractSet[str]"
                ]
            }
        },
        "BaseLambdaDeploymentPackager._add_py_deps": {
            "name": "_add_py_deps",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "zip_fileobj": [
                    "str",
                    "Optional[str]",
                    "IO[Any]"
                ],
                "deps_dir": [
                    "BinaryIO",
                    "Optional[bool]",
                    "int"
                ],
                "prefix": [
                    "str",
                    "zipfile.ZipFile",
                    "Dict[str, str]"
                ]
            }
        },
        "BaseLambdaDeploymentPackager._add_app_files": {
            "name": "_add_app_files",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "zip_fileobj": [
                    "str"
                ],
                "project_dir": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "BaseLambdaDeploymentPackager._iter_app_filenames": {
            "name": "_iter_app_filenames",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "project_dir": [
                    "str",
                    "bool"
                ]
            }
        },
        "BaseLambdaDeploymentPackager._hash_project_dir": {
            "name": "_hash_project_dir",
            "location": 173,
            "return": [
                "str",
                "List[str]",
                "Type[Any]"
            ],
            "arguments": {
                "self": [],
                "requirements_filename": [
                    "Dict[str, Any]",
                    "Callable",
                    "bool"
                ],
                "vendor_dir": [
                    "str"
                ],
                "project_dir": [
                    "str",
                    "bool"
                ]
            }
        },
        "BaseLambdaDeploymentPackager._hash_vendor_dir": {
            "name": "_hash_vendor_dir",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "vendor_dir": [
                    "str"
                ],
                "md5": [
                    "Dict[str, Any]",
                    "bytes",
                    "dict",
                    "str",
                    "List[str]"
                ]
            }
        },
        "BaseLambdaDeploymentPackager.inject_latest_app": {
            "name": "inject_latest_app",
            "location": 211,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "deployment_package_filename": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "project_dir": [
                    "str"
                ]
            }
        },
        "BaseLambdaDeploymentPackager._needs_latest_version": {
            "name": "_needs_latest_version",
            "location": 248,
            "return": [
                "Dict[str, Any]",
                "bool",
                "dict",
                "app.app.App",
                "str"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "int"
                ]
            }
        },
        "BaseLambdaDeploymentPackager._iter_chalice_lib_if_needed": {
            "name": "_iter_chalice_lib_if_needed",
            "location": 253,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "project_dir": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "BaseLambdaDeploymentPackager._create_output_dir_if_needed": {
            "name": "_create_output_dir_if_needed",
            "location": 265,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "package_filename": [
                    "str"
                ]
            }
        },
        "BaseLambdaDeploymentPackager._build_python_dependencies": {
            "name": "_build_python_dependencies",
            "location": 272,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "python_version": [
                    "List[List[str]]",
                    "int",
                    "str",
                    "float",
                    "Optional[List[str]]"
                ],
                "requirements_filepath": [
                    "str",
                    "dict",
                    "Dict[str, Dict]",
                    "bool",
                    "list",
                    "List[str]"
                ],
                "site_packages_dir": [
                    "str",
                    "dict",
                    "Dict[str, Dict]",
                    "bool",
                    "list",
                    "List[str]"
                ]
            }
        },
        "LambdaDeploymentPackager.create_deployment_package": {
            "name": "create_deployment_package",
            "location": 285,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "project_dir": [
                    "str",
                    "bool"
                ],
                "python_version": [
                    "str"
                ]
            }
        },
        "AppOnlyDeploymentPackager.create_deployment_package": {
            "name": "create_deployment_package",
            "location": 312,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "project_dir": [
                    "str"
                ],
                "python_version": [
                    "str"
                ]
            }
        },
        "AppOnlyDeploymentPackager.deployment_package_filename": {
            "name": "deployment_package_filename",
            "location": 328,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "project_dir": [
                    "str"
                ],
                "python_version": [
                    "str"
                ]
            }
        },
        "AppOnlyDeploymentPackager._deployment_package_filename": {
            "name": "_deployment_package_filename",
            "location": 333,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "project_dir": [
                    "str"
                ],
                "python_version": [
                    "str",
                    "Optional[str]"
                ],
                "prefix": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "LayerDeploymentPackager.create_deployment_package": {
            "name": "create_deployment_package",
            "location": 356,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "project_dir": [
                    "str",
                    "bool"
                ],
                "python_version": [
                    "str"
                ]
            }
        },
        "LayerDeploymentPackager._check_valid_package": {
            "name": "_check_valid_package",
            "location": 383,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "package_filename": [
                    "str"
                ]
            }
        },
        "LayerDeploymentPackager.deployment_package_filename": {
            "name": "deployment_package_filename",
            "location": 403,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "project_dir": [
                    "str"
                ],
                "python_version": [
                    "str"
                ]
            }
        },
        "LayerDeploymentPackager._deployment_package_filename": {
            "name": "_deployment_package_filename",
            "location": 408,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "project_dir": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "python_version": [
                    "str",
                    "Set[str]",
                    "List[tuple]",
                    "Tuple[str]",
                    "set",
                    "Set[cmk.utils.type_defs.HostName]",
                    "Dict[str, Any]",
                    "AbstractSet[str]"
                ],
                "prefix": [
                    "str",
                    "Set[str]",
                    "List[tuple]",
                    "Tuple[str]",
                    "set",
                    "Set[cmk.utils.type_defs.HostName]",
                    "Dict[str, Any]",
                    "AbstractSet[str]"
                ]
            }
        },
        "DependencyBuilder.__init__": {
            "name": "__init__",
            "location": 465,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "osutils": [
                    "int",
                    "bool",
                    "float"
                ],
                "pip_runner": [
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[Callable]",
                    "Optional[Hashable]"
                ]
            }
        },
        "DependencyBuilder._is_compatible_wheel_filename": {
            "name": "_is_compatible_wheel_filename",
            "location": 472,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "expected_abi": [
                    "str",
                    "List[str]",
                    "Optional[Match]"
                ],
                "filename": [
                    "str",
                    "dict",
                    "bool"
                ]
            }
        },
        "DependencyBuilder._is_compatible_platform_tag": {
            "name": "_is_compatible_platform_tag",
            "location": 496,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "expected_abi": [
                    "str",
                    "dict",
                    "Optional[Dict]",
                    "List[str]"
                ],
                "platform": [
                    "str",
                    "Union[int, float, str]",
                    "bool",
                    "int"
                ]
            }
        },
        "DependencyBuilder._iter_all_compatibility_tags": {
            "name": "_iter_all_compatibility_tags",
            "location": 526,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "wheel": [
                    "cmk.utils.type_defs.HostName",
                    "Callable[[str], None]",
                    "message.header.Asset",
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "DependencyBuilder._has_at_least_one_package": {
            "name": "_has_at_least_one_package",
            "location": 544,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "DependencyBuilder._download_all_dependencies": {
            "name": "_download_all_dependencies",
            "location": 559,
            "return": [
                "int",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "requirements_filename": [
                    "str",
                    "TextIO",
                    "BinaryIO",
                    "tuple"
                ],
                "directory": [
                    "str",
                    "int"
                ]
            }
        },
        "DependencyBuilder._download_binary_wheels": {
            "name": "_download_binary_wheels",
            "location": 572,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "abi": [
                    "str",
                    "dict",
                    "Iterable[str]",
                    "List[str]"
                ],
                "packages": [
                    "Exception",
                    "str",
                    "Optional[logging.Logger]"
                ],
                "directory": [
                    "str",
                    "dict",
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "DependencyBuilder._download_sdists": {
            "name": "_download_sdists",
            "location": 579,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "packages": [
                    "logging.Logger",
                    "str",
                    "bool",
                    "List[Exception]"
                ],
                "directory": [
                    "str",
                    "int"
                ]
            }
        },
        "DependencyBuilder._find_sdists": {
            "name": "_find_sdists",
            "location": 585,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "str",
                    "bytes",
                    "metrics_backend.utils.Address"
                ]
            }
        },
        "DependencyBuilder._build_sdists": {
            "name": "_build_sdists",
            "location": 593,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sdists": [
                    "str",
                    "lightbus.message.ResultMessage",
                    "T",
                    "Optional[float]"
                ],
                "directory": [
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "List[str]"
                ],
                "compile_c": [
                    "bool",
                    "logging.Formatter",
                    "logging.Handler",
                    "List[Dict[str, float]]"
                ]
            }
        },
        "DependencyBuilder._categorize_wheel_files": {
            "name": "_categorize_wheel_files",
            "location": 601,
            "return": [
                "bool",
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "abi": [
                    "str",
                    "Iterable[str]"
                ],
                "directory": [
                    "dict",
                    "bool",
                    "str",
                    "Iterable[str]",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ConfigSerial"
                ]
            }
        },
        "DependencyBuilder._categorize_deps": {
            "name": "_categorize_deps",
            "location": 615,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "abi": [
                    "str",
                    "List[int]",
                    "bytes"
                ],
                "deps": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "DependencyBuilder._download_dependencies": {
            "name": "_download_dependencies",
            "location": 630,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "abi": [
                    "str",
                    "bool",
                    "int",
                    "tuple",
                    "Optional[str]"
                ],
                "directory": [
                    "str",
                    "Optional[Sequence[str]]"
                ],
                "requirements_filename": [
                    "str",
                    "TextIO",
                    "BinaryIO",
                    "Callable"
                ]
            }
        },
        "DependencyBuilder._apply_wheel_whitelist": {
            "name": "_apply_wheel_whitelist",
            "location": 730,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "compatible_wheels": [
                    "list",
                    "str",
                    "List[str]"
                ],
                "incompatible_wheels": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "DependencyBuilder._install_purelib_and_platlib": {
            "name": "_install_purelib_and_platlib",
            "location": 744,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "wheel": [],
                "root": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "DependencyBuilder._install_wheels": {
            "name": "_install_wheels",
            "location": 768,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "src_dir": [
                    "str"
                ],
                "dst_dir": [
                    "str"
                ],
                "wheels": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "DependencyBuilder.build_site_packages": {
            "name": "build_site_packages",
            "location": 778,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "abi": [
                    "Callable",
                    "bool",
                    "str",
                    "message.header.Asset"
                ],
                "requirements_filepath": [
                    "Dict[str, Any]",
                    "str"
                ],
                "target_directory": [
                    "int",
                    "faustypes.Message",
                    "faustypes.tuples.Message"
                ]
            }
        },
        "Package.__init__": {
            "name": "__init__",
            "location": 792,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "str",
                    "int",
                    "bool"
                ],
                "filename": [
                    "str",
                    "Mapping[str, int]",
                    "IO"
                ],
                "osutils": [
                    "Optional[str]",
                    "Optional[bool]",
                    "str",
                    "Optional[Type[Exception]]"
                ]
            }
        },
        "Package.name": {
            "name": "name",
            "location": 803,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Package.data_dir": {
            "name": "data_dir",
            "location": 808,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Package.matches_data_dir": {
            "name": "matches_data_dir",
            "location": 813,
            "return": [
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "dirname": [
                    "str",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "Package.identifier": {
            "name": "identifier",
            "location": 828,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Package.__str__": {
            "name": "__str__",
            "location": 832,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Package.__repr__": {
            "name": "__repr__",
            "location": 836,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Package.__eq__": {
            "name": "__eq__",
            "location": 840,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Package.__hash__": {
            "name": "__hash__",
            "location": 846,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Package._calculate_name_and_version": {
            "name": "_calculate_name_and_version",
            "location": 850,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Package._normalize_name": {
            "name": "_normalize_name",
            "location": 865,
            "return": [
                "str",
                "Iterable[cmk.utils.type_defs.SectionName]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "SDistMetadataFetcher.__init__": {
            "name": "__init__",
            "location": 882,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "osutils": [
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Callable]",
                    "Optional[Hashable]",
                    "int"
                ]
            }
        },
        "SDistMetadataFetcher._parse_pkg_info_file": {
            "name": "_parse_pkg_info_file",
            "location": 888,
            "return": [],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "List[str]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "SDistMetadataFetcher._get_pkg_info_filepath": {
            "name": "_get_pkg_info_filepath",
            "location": 898,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "package_dir": [
                    "str",
                    "bool"
                ]
            }
        },
        "SDistMetadataFetcher._unpack_sdist_into_dir": {
            "name": "_unpack_sdist_into_dir",
            "location": 928,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "sdist_path": [
                    "str"
                ],
                "unpack_dir": [
                    "str"
                ]
            }
        },
        "SDistMetadataFetcher.get_package_name_and_version": {
            "name": "get_package_name_and_version",
            "location": 940,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "sdist_path": [
                    "str"
                ]
            }
        },
        "SubprocessPip.__init__": {
            "name": "__init__",
            "location": 953,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "osutils": [
                    "Optional[str]",
                    "str",
                    "Optional[bool]"
                ],
                "import_string": [
                    "Optional[str]",
                    "Union[int, float]",
                    "str",
                    "Optional[int]",
                    "List[Dict[str, Any]]",
                    "Optional[Union[Any, Any]]"
                ]
            }
        },
        "SubprocessPip.main": {
            "name": "main",
            "location": 962,
            "return": [
                "str",
                "List[str]",
                "set"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "env_vars": [
                    "str",
                    "bool",
                    "Dict[str, str]"
                ],
                "shim": [
                    "str",
                    "Optional[int]",
                    "dict",
                    "Optional[Dict]",
                    "Optional[str]",
                    "bool",
                    "Dict[str, str]",
                    "Optional[Union[Any, Any]]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "PipRunner.__init__": {
            "name": "__init__",
            "location": 994,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pip": [
                    "int",
                    "bool",
                    "float"
                ],
                "osutils": [
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Callable]",
                    "Optional[Hashable]",
                    "int"
                ]
            }
        },
        "PipRunner._execute": {
            "name": "_execute",
            "location": 1001,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "recidiviz.common.constants.enum_overrides.EnumOverrides",
                    "List[str]",
                    "Optional[Dict]",
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "args": [],
                "env_vars": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "shim": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "PipRunner.build_wheel": {
            "name": "build_wheel",
            "location": 1015,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "wheel": [
                    "int",
                    "Optional[bool]"
                ],
                "directory": [
                    "int",
                    "Optional[bool]"
                ],
                "compile_c": [
                    "bool",
                    "float",
                    "str",
                    "Callable"
                ]
            }
        },
        "PipRunner.download_all_dependencies": {
            "name": "download_all_dependencies",
            "location": 1030,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "requirements_filename": [
                    "str",
                    "tuple",
                    "bool"
                ],
                "directory": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "PipRunner.download_manylinux_wheels": {
            "name": "download_manylinux_wheels",
            "location": 1065,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "abi": [
                    "str",
                    "Type[T]",
                    "Callable[[str], T]"
                ],
                "packages": [
                    "Iterable[str]",
                    "str",
                    "float"
                ],
                "directory": [
                    "str",
                    "Type[T]",
                    "Callable[[str], T]"
                ]
            }
        },
        "PipRunner.download_sdists": {
            "name": "download_sdists",
            "location": 1082,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "packages": [
                    "str",
                    "bool",
                    "List[Tuple[str, Any]]"
                ],
                "directory": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "chalice-master/chalice/deploy/planner.py": {
        "RemoteState.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "float",
                    "utils.clienClient"
                ],
                "deployed_resources": [
                    "str",
                    "float",
                    "utils.clienClient"
                ]
            }
        },
        "RemoteState._cache_key": {
            "name": "_cache_key",
            "location": 28,
            "return": [
                "tuple[]",
                "Type[Any]",
                "list"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "bool",
                    "str",
                    "salon.models.Stylist",
                    "django.db.models.QuerySet"
                ]
            }
        },
        "RemoteState.resource_deployed_values": {
            "name": "resource_deployed_values",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "bool"
                ]
            }
        },
        "RemoteState._dynamically_lookup_values": {
            "name": "_dynamically_lookup_values",
            "location": 46,
            "return": [
                "dict[typing.Text, typing.Union[str,list[str],dict[str, str],dict[str, list[]]]]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "int",
                    "abilian.core.models.subjects.Principal",
                    "None",
                    "dict[str, typing.Any]",
                    "Optional[int]",
                    "Dict[str, Any]",
                    "pringles.models.Model",
                    "salon.models.Stylist"
                ]
            }
        },
        "RemoteState.resource_exists": {
            "name": "resource_exists",
            "location": 59,
            "return": [
                "str",
                "int",
                "bytes",
                "list"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "dict[str, typing.Any]",
                    "bytes",
                    "Dict[str, Any]",
                    "typing.IO",
                    "IO[str]",
                    "Config"
                ]
            }
        },
        "RemoteState._resource_exists_snslambdasubscription": {
            "name": "_resource_exists_snslambdasubscription",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "Hashable",
                    "typing.Hashable"
                ]
            }
        },
        "RemoteState._resource_exists_sqseventsource": {
            "name": "_resource_exists_sqseventsource",
            "location": 87,
            "return": [
                "bool",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "bool",
                    "int",
                    "zerver.models.Realm",
                    "yacron.config.JobConfig"
                ]
            }
        },
        "RemoteState._resource_exists_kinesiseventsource": {
            "name": "_resource_exists_kinesiseventsource",
            "location": 105,
            "return": [
                "bool",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "int",
                    "bytes",
                    "zerver.models.Message",
                    "Union[str, bytes]",
                    "dict[, ]",
                    "dict"
                ]
            }
        },
        "RemoteState._resource_exists_dynamodbeventsource": {
            "name": "_resource_exists_dynamodbeventsource",
            "location": 119,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "bytes"
                ]
            }
        },
        "RemoteState._resource_exists_lambdalayer": {
            "name": "_resource_exists_lambdalayer",
            "location": 132,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "bytes"
                ]
            }
        },
        "RemoteState._resource_exists_lambdafunction": {
            "name": "_resource_exists_lambdafunction",
            "location": 142,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "type",
                    "typing.Type",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "RemoteState._resource_exists_managediamrole": {
            "name": "_resource_exists_managediamrole",
            "location": 146,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "zerver.models.Realm"
                ]
            }
        },
        "RemoteState._resource_exists_apimapping": {
            "name": "_resource_exists_apimapping",
            "location": 154,
            "return": [
                "List[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "bool",
                    "bytes",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "domain_name": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "RemoteState._resource_exists_domainname": {
            "name": "_resource_exists_domainname",
            "location": 164,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "bool",
                    "dict[str, str]",
                    "zerver.models.Realm",
                    "transfer.models.Scope",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "RemoteState._resource_exists_restapi": {
            "name": "_resource_exists_restapi",
            "location": 171,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "bytes"
                ]
            }
        },
        "RemoteState._resource_exists_websocketapi": {
            "name": "_resource_exists_websocketapi",
            "location": 181,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "bytes"
                ]
            }
        },
        "PlanStage.__init__": {
            "name": "__init__",
            "location": 193,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "remote_state": [
                    "T"
                ],
                "osutils": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "PlanStage.execute": {
            "name": "execute",
            "location": 198,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "resources": [
                    "str",
                    "int",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "PlanStage._add_result_to_plan": {
            "name": "_add_result_to_plan",
            "location": 211,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "str",
                    "bool",
                    "list[U]",
                    "List[zerver.models.UserProfile]",
                    "Iterable[int]"
                ],
                "plan": [
                    "models.Credentials",
                    "dict",
                    "str",
                    "zerver.models.UserProfile"
                ],
                "messages": [
                    "Type[models.User]",
                    "Optional[services.user.transfer.models.User]",
                    "Dict[str, Any]",
                    "django.contrib.auth.models.AbstractBaseUser",
                    "bool"
                ]
            }
        },
        "PlanStage._add_apimapping_plan": {
            "name": "_add_apimapping_plan",
            "location": 229,
            "return": [
                "list[tuple[typing.Text]]",
                "str",
                "int",
                "models.Variable"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "domain_name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Callable",
                    "typing.Callable[, ]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "PlanStage._add_domainname_plan": {
            "name": "_add_domainname_plan",
            "location": 303,
            "return": [
                "list[tuple[typing.Text]]",
                "str",
                "int",
                "models.Variable"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "Type[Any]",
                    "str",
                    "typing.Type",
                    "BaseException",
                    "Exception"
                ],
                "endpoint_type": [
                    "bool",
                    "str",
                    "Type[Any]",
                    "typing.Type"
                ]
            }
        },
        "PlanStage._plan_lambdalayer": {
            "name": "_plan_lambdalayer",
            "location": 392,
            "return": [
                "list[tuple[typing.Text]]",
                "str",
                "int",
                "models.Variable"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "bool"
                ]
            }
        },
        "PlanStage._plan_lambdafunction": {
            "name": "_plan_lambdafunction",
            "location": 434,
            "return": [
                "list[tuple[typing.Text]]",
                "str",
                "int",
                "models.Variable"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "int",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "PlanStage._plan_managediamrole": {
            "name": "_plan_managediamrole",
            "location": 545,
            "return": [
                "list[tuple[typing.Text]]",
                "str",
                "esm.models.service_type.ServiceType",
                "dict",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "int"
                ]
            }
        },
        "PlanStage._plan_snslambdasubscription": {
            "name": "_plan_snslambdasubscription",
            "location": 623,
            "return": [
                "bool",
                "str",
                "Optional[int]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "bool",
                    "dict[str, typing.Any]",
                    "int",
                    "config.Config",
                    "Dict[str, Any]"
                ]
            }
        },
        "PlanStage._plan_sqseventsource": {
            "name": "_plan_sqseventsource",
            "location": 694,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "int",
                    "Exception",
                    "Dict[str, object]",
                    "dict[str, object]"
                ]
            }
        },
        "PlanStage._plan_kinesiseventsource": {
            "name": "_plan_kinesiseventsource",
            "location": 764,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "Exception",
                    "bool",
                    "jobs.models.Job",
                    "int"
                ]
            }
        },
        "PlanStage._plan_dynamodbeventsource": {
            "name": "_plan_dynamodbeventsource",
            "location": 823,
            "return": [
                "str",
                "bool",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "int",
                    "dict[str, object]",
                    "config.Config",
                    "Dict[str, object]",
                    "bool",
                    "Union[tonga.models.records.base.BaseRecord, tonga.models.store.store_record.StoreRecord]"
                ]
            }
        },
        "PlanStage._arn_parse_instructions": {
            "name": "_arn_parse_instructions",
            "location": 869,
            "return": [
                "list[]",
                "bool",
                "str",
                "Optional[int]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "function_arn": [
                    "str",
                    "models.User"
                ]
            }
        },
        "PlanStage._plan_s3bucketnotification": {
            "name": "_plan_s3bucketnotification",
            "location": 883,
            "return": [
                "int",
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "Generator"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "config.Config"
                ]
            }
        },
        "PlanStage._create_cloudwatchevent": {
            "name": "_create_cloudwatchevent",
            "location": 919,
            "return": [
                "list[]",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "cmk.utils.type_defs.EventRule",
                    "int",
                    "dict[, ]",
                    "dict"
                ]
            }
        },
        "PlanStage._plan_cloudwatchevent": {
            "name": "_plan_cloudwatchevent",
            "location": 963,
            "return": [
                "Tuple[int, int]",
                "str",
                "int",
                "T"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "int",
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "models.Question"
                ]
            }
        },
        "PlanStage._plan_scheduledevent": {
            "name": "_plan_scheduledevent",
            "location": 967,
            "return": [
                "Tuple[int, int]",
                "str",
                "int",
                "T"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "int",
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "models.Question"
                ]
            }
        },
        "PlanStage._create_websocket_function_configs": {
            "name": "_create_websocket_function_configs",
            "location": 971,
            "return": [
                "OrderedDict",
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "float",
                    "int",
                    "Optional[AbstractSet[str]]",
                    "typing.AbstractSet",
                    "Optional[str]",
                    "None",
                    "str"
                ]
            }
        },
        "PlanStage._create_websocket_function_config": {
            "name": "_create_websocket_function_config",
            "location": 985,
            "return": [
                "type",
                "dict[typing.Text, typing.Union[dict[, ],list[],str,Variable]]"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "dict",
                    "dict[, ]",
                    "Union[Dict, List, str]",
                    "list[]",
                    "str"
                ]
            }
        },
        "PlanStage._inject_websocket_integrations": {
            "name": "_inject_websocket_integrations",
            "location": 995,
            "return": [
                "list[]",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "configs": [
                    "dict[str, object]",
                    "Dict[str, object]",
                    "dict[str, dict[str, int]]",
                    "dict[str, str]",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, int]]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, str]"
                ]
            }
        },
        "PlanStage._create_route_for_key": {
            "name": "_create_route_for_key",
            "location": 1025,
            "return": [
                "Dict[str, Any]",
                "models.Name",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "route_key": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "PlanStage._plan_websocketapi": {
            "name": "_plan_websocketapi",
            "location": 1040,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "Dict[str, List[str]]",
                    "dict[str, list[str]]",
                    "Callable",
                    "bool",
                    "typing.Callable[, ]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "PlanStage._plan_restapi": {
            "name": "_plan_restapi",
            "location": 1179,
            "return": [
                "list[int]",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "resource": []
            }
        },
        "PlanStage._add_custom_domain_plan": {
            "name": "_add_custom_domain_plan",
            "location": 1313,
            "return": [
                "str",
                "set",
                "List[str]",
                "Type",
                "List[Dict[str, str]]",
                "list",
                "dict",
                "models.Match"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ],
                "endpoint_type": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "Tuple[Type]",
                    "tuple[typing.Type]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "PlanStage._get_role_arn": {
            "name": "_get_role_arn",
            "location": 1326,
            "return": [
                "viewer.models.Archive",
                "Variable"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "float",
                    "str",
                    "salon.models.Stylist",
                    "abilian.core.models.subjects.Principal",
                    "salon.models.StylisAvailableWeekDay"
                ]
            }
        },
        "PlanStage._batch_record_resource": {
            "name": "_batch_record_resource",
            "location": 1335,
            "return": [
                "list[]",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "resource_type": [
                    "dict[str, typing.Any]",
                    "purplship.core.utils.soap.Envelope",
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "None",
                    "Optional[str]",
                    "tuple[typing.Type]",
                    "typing.Type",
                    "Tuple[type]",
                    "Type"
                ],
                "resource_name": [
                    "dict[str, typing.Any]",
                    "purplship.core.utils.soap.Envelope",
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "None",
                    "Optional[str]",
                    "tuple[typing.Type]",
                    "typing.Type",
                    "Tuple[type]",
                    "Type"
                ],
                "mapping": [
                    "dict[, ]",
                    "dict[str, str]",
                    "dict",
                    "Mapping[int, str]",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "cmk.utils.type_defs.CheckVariables"
                ]
            }
        },
        "NoopPlanner.__init__": {
            "name": "__init__",
            "location": 1365,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoopPlanner.execute": {
            "name": "execute",
            "location": 1369,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "resources": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Variable.__init__": {
            "name": "__init__",
            "location": 1375,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "Variable.__repr__": {
            "name": "__repr__",
            "location": 1379,
            "return": [
                "typing.Text",
                "str",
                "int",
                "Callable[[str], None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variable.__eq__": {
            "name": "__eq__",
            "location": 1383,
            "return": [
                "bool",
                "str",
                "Type",
                "dict",
                "models.Name",
                "list"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int"
                ]
            }
        },
        "StringFormat.__init__": {
            "name": "__init__",
            "location": 1389,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "bool",
                    "list[str]",
                    "int",
                    "List[str]"
                ],
                "variables": [
                    "str",
                    "bool",
                    "list[str]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "StringFormat.__repr__": {
            "name": "__repr__",
            "location": 1394,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringFormat.__eq__": {
            "name": "__eq__",
            "location": 1398,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "raiden.utils.Any",
                    "int",
                    "dict[str, typing.Callable[[], None]]",
                    "Dict[str, Callable[[], None]]",
                    "list[]",
                    "list"
                ]
            }
        },
        "PlanEncoder.default": {
            "name": "default",
            "location": 1410,
            "return": [
                "str",
                "dict[, ]",
                "typing.Callable[, ]",
                "StringFormat"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "dict",
                    "dict[, ]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "KeyDataVariable.__init__": {
            "name": "__init__",
            "location": 1418,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "key": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, 'LabwareDefinition']",
                    "dict[str, D]",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "KeyDataVariable.__repr__": {
            "name": "__repr__",
            "location": 1423,
            "return": [
                "typing.Text",
                "int",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyDataVariable.__eq__": {
            "name": "__eq__",
            "location": 1427,
            "return": [
                "bool",
                "Dict[str, str]",
                "bytes",
                "django.db.models.Model",
                "Optional[zerver.models.Realm]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "dict[, ]",
                    "dict",
                    "T"
                ]
            }
        }
    },
    "chalice-master/chalice/deploy/swagger.py": {
        "SwaggerGenerator.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "region": [
                    "int",
                    "float",
                    "bool"
                ],
                "deployed_resources": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "SwaggerGenerator.generate_swagger": {
            "name": "generate_swagger",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "app": [],
                "rest_api": [
                    "None",
                    "str",
                    "app.GrpyApp",
                    "docker.models.networks.Network"
                ]
            }
        },
        "SwaggerGenerator._add_resource_policy": {
            "name": "_add_resource_policy",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "api": [
                    "str",
                    "float"
                ],
                "rest_api": [
                    "bool",
                    "str",
                    "bytes",
                    "terrawrap.models.graph_entry.GraphEntry"
                ]
            }
        },
        "SwaggerGenerator._add_vpc_endpoint": {
            "name": "_add_vpc_endpoint",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "api": [
                    "str",
                    "zerver.models.Realm",
                    "Mapping[str, Any]"
                ],
                "rest_api": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "SwaggerGenerator._add_binary_types": {
            "name": "_add_binary_types",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "api": [
                    "str",
                    "list[str]",
                    "raiden.utils.Address",
                    "List[str]"
                ],
                "app": [
                    "str",
                    "list[str]",
                    "raiden.utils.Address",
                    "List[str]"
                ]
            }
        },
        "SwaggerGenerator._add_route_paths": {
            "name": "_add_route_paths",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "api": [
                    "Callable",
                    "bool"
                ],
                "app": [
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "SwaggerGenerator._generate_security_from_auth_obj": {
            "name": "_generate_security_from_auth_obj",
            "location": 87,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "api_config": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "authorizer": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "SwaggerGenerator._auth_uri": {
            "name": "_auth_uri",
            "location": 113,
            "return": [
                "bool",
                "List[app.models.Question]",
                "app.models.Question",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "authorizer": [
                    "list[str]",
                    "str",
                    "List[str]",
                    "bool",
                    "dict[, ]",
                    "dict",
                    "int"
                ]
            }
        },
        "SwaggerGenerator._add_to_security_definition": {
            "name": "_add_to_security_definition",
            "location": 122,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "security": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "int",
                    "bool"
                ],
                "api_config": [
                    "dict[, ]",
                    "dict",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "cmk.utils.type_defs.HostAddress",
                    "cmk.utils.type_defs.HostName"
                ],
                "view": [
                    "dict",
                    "int",
                    "dict[, ]",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "SwaggerGenerator._generate_route_method": {
            "name": "_generate_route_method",
            "location": 139,
            "return": [
                "dict[typing.Text, list[typing.Text]]",
                "int",
                "List[str]",
                "models.seat_group.SeatGroup",
                "ticketing.models.ticket_bundle.TicketBundle",
                "List[int]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "zerver.models.Message"
                ]
            }
        },
        "SwaggerGenerator._generate_precanned_responses": {
            "name": "_generate_precanned_responses",
            "location": 167,
            "return": [
                "dict[typing.Text, dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Text]]]]",
                "dict",
                "Optional[str]",
                "List[dict]",
                "Dict[str, Any]",
                "bool",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SwaggerGenerator._uri": {
            "name": "_uri",
            "location": 179,
            "return": [
                "str",
                "bytes",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "lambda_arn": [
                    "float",
                    "None",
                    "str",
                    "Optional[complex]",
                    "complex"
                ]
            }
        },
        "SwaggerGenerator._generate_apig_integ": {
            "name": "_generate_apig_integ",
            "location": 189,
            "return": [
                "dict[typing.Text, typing.Union[dict[typing.Text, dict[typing.Text, typing.Text]],typing.Text]]",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "SwaggerGenerator._add_view_args": {
            "name": "_add_view_args",
            "location": 205,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "single_method": [
                    "str",
                    "bool",
                    "bytes",
                    "Type[Any]",
                    "Type[T]"
                ],
                "view_args": [
                    "str",
                    "bytes",
                    "bool",
                    "Type[Any]",
                    "Type[T]"
                ]
            }
        },
        "SwaggerGenerator._add_preflight_request": {
            "name": "_add_preflight_request",
            "location": 212,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "cors": [
                    "dict",
                    "bool",
                    "Dict[str, Tuple[Any, Any, Any]]"
                ],
                "methods": [
                    "list[str]",
                    "str",
                    "int",
                    "bool",
                    "List[str]"
                ],
                "swagger_for_path": [
                    "str",
                    "bool"
                ]
            }
        },
        "CFNSwaggerGenerator.__init__": {
            "name": "__init__",
            "location": 255,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CFNSwaggerGenerator._uri": {
            "name": "_uri",
            "location": 259,
            "return": [
                "dict[typing.Text, typing.Text]",
                "str",
                "IO"
            ],
            "arguments": {
                "self": [],
                "lambda_arn": [
                    "int",
                    "None",
                    "str",
                    "Iterable['Context']",
                    "typing.Iterable[C]",
                    "dict",
                    "bool"
                ]
            }
        },
        "CFNSwaggerGenerator._auth_uri": {
            "name": "_auth_uri",
            "location": 269,
            "return": [
                "dict[typing.Text, typing.Text]",
                "str",
                "IO",
                "dict",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "authorizer": [
                    "dict[str, typing.Any]",
                    "models.Credentials",
                    "dict[, ]",
                    "cmk.utils.type_defs.EventRule",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "TemplatedSwaggerGenerator.__init__": {
            "name": "__init__",
            "location": 282,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemplatedSwaggerGenerator._uri": {
            "name": "_uri",
            "location": 286,
            "return": [
                "StringFormat",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "lambda_arn": [
                    "int",
                    "None",
                    "str",
                    "Iterable['Context']",
                    "typing.Iterable[C]",
                    "dict",
                    "bool"
                ]
            }
        },
        "TemplatedSwaggerGenerator._auth_uri": {
            "name": "_auth_uri",
            "location": 294,
            "return": [
                "str",
                "StringFormat"
            ],
            "arguments": {
                "self": [],
                "authorizer": [
                    "dict[, ]",
                    "dict",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "typing.Mapping",
                    "Mapping[str, Any]",
                    "core.models.Grouping"
                ]
            }
        },
        "TerraformSwaggerGenerator.__init__": {
            "name": "__init__",
            "location": 306,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TerraformSwaggerGenerator._uri": {
            "name": "_uri",
            "location": 310,
            "return": [
                "typing.Text",
                "str",
                "cmk.utils.type_defs.HostName",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": [],
                "lambda_arn": [
                    "int",
                    "None",
                    "str",
                    "Iterable['Context']",
                    "typing.Iterable[C]",
                    "dict",
                    "bool"
                ]
            }
        },
        "TerraformSwaggerGenerator._auth_uri": {
            "name": "_auth_uri",
            "location": 314,
            "return": [
                "typing.Text",
                "str",
                "Union[str, bytes]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "authorizer": [
                    "str",
                    "zerver.models.Stream",
                    "None",
                    "bool",
                    "Optional[zerver.models.Stream]",
                    "models.Pkg"
                ]
            }
        }
    },
    "chalice-master/chalice/deploy/sweeper.py": {
        "ResourceSweeper.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceSweeper.execute": {
            "name": "execute",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "plan": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "config.ConfigFile"
                ],
                "config": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict",
                    "model.Config",
                    "types.Config",
                    "config.Config",
                    "Dict[str, Any]"
                ]
            }
        },
        "ResourceSweeper._determine_sns_event": {
            "name": "_determine_sns_event",
            "location": 48,
            "return": [
                "str",
                "db.models.Taxon",
                "Dict[str, Any]",
                "list[str]",
                "list",
                "typing.Sequence[typing.Any]",
                "None",
                "list[int]",
                "list[typing.Optional[str]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Union[str, List[str]]",
                    "list[str]",
                    "Optional[Sequence[Any]]",
                    "bool",
                    "typing.Sequence[typing.Any]",
                    "List[int]",
                    "None",
                    "List[Optional[str]]",
                    "list[int]",
                    "list[typing.Optional[str]]"
                ],
                "resource_values": [
                    "str",
                    "int",
                    "list[str]",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "ResourceSweeper._determine_s3_event": {
            "name": "_determine_s3_event",
            "location": 59,
            "return": [
                "str",
                "Optional[str]",
                "list[str]",
                "db.models.Taxon",
                "bool",
                "Dict[str, Any]",
                "float",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "list[str]",
                    "float",
                    "Union[str, List[str]]",
                    "List[str]"
                ],
                "resource_values": [
                    "str",
                    "bytes",
                    "int",
                    "list[str]",
                    "tuple[str]",
                    "Optional[int]",
                    "Union[List[str], Tuple[str], None]"
                ]
            }
        },
        "ResourceSweeper._determine_sqs_event": {
            "name": "_determine_sqs_event",
            "location": 77,
            "return": [
                "str",
                "int",
                "db.models.Taxon",
                "None",
                "Dict[str, Any]",
                "list"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "resource_values": [
                    "str",
                    "list[str]",
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "List[str]"
                ]
            }
        },
        "ResourceSweeper._determine_kinesis_event": {
            "name": "_determine_kinesis_event",
            "location": 88,
            "return": [
                "str",
                "db.models.Taxon",
                "Dict[str, Any]",
                "list[str]",
                "list",
                "typing.Sequence[typing.Any]",
                "None",
                "list[int]",
                "list[typing.Optional[str]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Union[str, List[str]]",
                    "list[str]",
                    "Optional[Sequence[Any]]",
                    "bool",
                    "typing.Sequence[typing.Any]",
                    "List[int]",
                    "None",
                    "List[Optional[str]]",
                    "list[int]",
                    "list[typing.Optional[str]]"
                ],
                "resource_values": [
                    "str",
                    "int",
                    "list[str]",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "ResourceSweeper._determine_dynamodb_event": {
            "name": "_determine_dynamodb_event",
            "location": 99,
            "return": [
                "str",
                "db.models.Taxon",
                "Dict[str, Any]",
                "list[str]",
                "list",
                "typing.Sequence[typing.Any]",
                "None",
                "list[int]",
                "list[typing.Optional[str]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Union[str, List[str]]",
                    "list[str]",
                    "Optional[Sequence[Any]]",
                    "bool",
                    "typing.Sequence[typing.Any]",
                    "List[int]",
                    "None",
                    "List[Optional[str]]",
                    "list[int]",
                    "list[typing.Optional[str]]"
                ],
                "resource_values": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "ResourceSweeper._determine_domain_name": {
            "name": "_determine_domain_name",
            "location": 110,
            "return": [
                "None",
                "Optional[str]",
                "list[typing.Text]",
                "str",
                "Optional[List[str]]",
                "Optional[Mapping[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "int",
                    "typing.Sequence[float]",
                    "Sequence[float]",
                    "str",
                    "list[str]",
                    "Optional[List[str]]",
                    "None",
                    "homeassistancomponents.media_source.models.MediaSourceItem",
                    "Optional[bool]"
                ],
                "resource_values": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "bool"
                ]
            }
        },
        "ResourceSweeper._determine_remaining": {
            "name": "_determine_remaining",
            "location": 145,
            "return": [
                "list[typing.Union[str,list[str]]]",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "deployed": [
                    "bool",
                    "jobs.models.Job",
                    "str"
                ]
            }
        },
        "ResourceSweeper._mark_resources": {
            "name": "_mark_resources",
            "location": 165,
            "return": [
                "dict[, ]",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceSweeper._delete_domain_name": {
            "name": "_delete_domain_name",
            "location": 174,
            "return": [
                "dict[typing.Text, typing.Union[tuple[],typing.Text]]",
                "str",
                "type",
                "Callable",
                "taxonomy.db.models.Taxon"
            ],
            "arguments": {
                "self": [],
                "resource_values": [
                    "str"
                ]
            }
        },
        "ResourceSweeper._delete_api_mapping": {
            "name": "_delete_api_mapping",
            "location": 192,
            "return": [
                "dict[typing.Text, typing.Union[tuple[],typing.Text]]",
                "str",
                "int",
                "viewer.models.Archive",
                "models.Credentials"
            ],
            "arguments": {
                "self": [],
                "domain_name": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "api_mapping": [
                    "str",
                    "bytes",
                    "Optional[Dict[str, str]]",
                    "Set[str]"
                ]
            }
        },
        "ResourceSweeper._delete_lambda_function": {
            "name": "_delete_lambda_function",
            "location": 219,
            "return": [
                "dict[typing.Text, typing.Union[tuple[],typing.Text]]",
                "Optional[db.models.Taxon]",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "resource_values": [
                    "str",
                    "transfer.models.PaymentMethod",
                    "Iterable[Any]",
                    "Optional[int]"
                ]
            }
        },
        "ResourceSweeper._delete_lambda_layer": {
            "name": "_delete_lambda_layer",
            "location": 234,
            "return": [
                "dict[typing.Text, typing.Union[tuple[],typing.Text]]",
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "resource_values": [
                    "str",
                    "Optional[str]",
                    "tuple[typing.Type]",
                    "zam_repondeur.models.Lecture",
                    "Tuple[type]"
                ]
            }
        },
        "ResourceSweeper._delete_iam_role": {
            "name": "_delete_iam_role",
            "location": 248,
            "return": [
                "dict[typing.Text, typing.Union[tuple[],typing.Text]]",
                "str",
                "int",
                "viewer.models.Archive"
            ],
            "arguments": {
                "self": [],
                "resource_values": [
                    "str",
                    "dict"
                ]
            }
        },
        "ResourceSweeper._delete_cloudwatch_event": {
            "name": "_delete_cloudwatch_event",
            "location": 260,
            "return": [
                "Optional[str]",
                "dict[typing.Text, tuple[]]"
            ],
            "arguments": {
                "self": [],
                "resource_values": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "ResourceSweeper._delete_rest_api": {
            "name": "_delete_rest_api",
            "location": 271,
            "return": [
                "dict[typing.Text, typing.Union[tuple[],typing.Text]]",
                "str",
                "int",
                "viewer.models.Archive"
            ],
            "arguments": {
                "self": [],
                "resource_values": [
                    "str",
                    "list[str]",
                    "Optional[str]",
                    "Optional[bool]",
                    "List[str]",
                    "Optional[List[Any]]"
                ]
            }
        },
        "ResourceSweeper._delete_s3_event": {
            "name": "_delete_s3_event",
            "location": 284,
            "return": [
                "dict[typing.Text, tuple[]]",
                "bool",
                "str",
                "dict",
                "models.Membership"
            ],
            "arguments": {
                "self": [],
                "resource_values": [
                    "str",
                    "bool"
                ]
            }
        },
        "ResourceSweeper._delete_sns_event": {
            "name": "_delete_sns_event",
            "location": 306,
            "return": [
                "dict[typing.Text, tuple[]]",
                "Optional[str]",
                "str",
                "deeplearning.ml4pl.models.epoch.Type",
                "deeplearning.ml4pl.models.logger.Logger",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": [],
                "resource_values": [
                    "str",
                    "bool"
                ]
            }
        },
        "ResourceSweeper._delete_sqs_event": {
            "name": "_delete_sqs_event",
            "location": 325,
            "return": [
                "dict[typing.Text, tuple[]]",
                "Optional[str]",
                "str",
                "deeplearning.ml4pl.models.epoch.Type",
                "deeplearning.ml4pl.models.logger.Logger",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": [],
                "resource_values": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "ResourceSweeper._delete_kinesis_event": {
            "name": "_delete_kinesis_event",
            "location": 336,
            "return": [
                "dict[typing.Text, tuple[]]",
                "Optional[str]",
                "str",
                "deeplearning.ml4pl.models.epoch.Type",
                "deeplearning.ml4pl.models.logger.Logger",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": [],
                "resource_values": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "ResourceSweeper._delete_dynamodb_event": {
            "name": "_delete_dynamodb_event",
            "location": 347,
            "return": [
                "dict[typing.Text, tuple[]]",
                "Optional[str]",
                "str",
                "deeplearning.ml4pl.models.epoch.Type",
                "deeplearning.ml4pl.models.logger.Logger",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": [],
                "resource_values": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "ResourceSweeper._delete_websocket_api": {
            "name": "_delete_websocket_api",
            "location": 358,
            "return": [
                "dict[typing.Text, typing.Union[tuple[],typing.Text]]",
                "str",
                "int",
                "viewer.models.Archive"
            ],
            "arguments": {
                "self": [],
                "resource_values": [
                    "str",
                    "list[str]",
                    "Optional[str]",
                    "Optional[bool]",
                    "List[str]",
                    "Optional[List[Any]]"
                ]
            }
        },
        "ResourceSweeper._default_delete": {
            "name": "_default_delete",
            "location": 373,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_values": [
                    "str",
                    "bool",
                    "bytes",
                    "float",
                    "Tuple[float]",
                    "tuple[float]",
                    "Optional[bool]",
                    "None",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "ResourceSweeper._update_plan": {
            "name": "_update_plan",
            "location": 379,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "instructions": [
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, Any]",
                    "db.models.Cowboy",
                    "salon.models.Stylist",
                    "db.models.Region",
                    "zerver.models.Realm"
                ],
                "message": [
                    "None"
                ],
                "insert": [
                    "bool",
                    "float",
                    "zam_repondeur.models.Amendement",
                    "str",
                    "int"
                ]
            }
        },
        "ResourceSweeper._delete_domain_api_mappings": {
            "name": "_delete_domain_api_mappings",
            "location": 396,
            "return": [
                "list[]",
                "dict[str, dict[typing.Any, typing.Any]]",
                "int",
                "Union[str, IO]",
                "bool",
                "Dict[str, Any]",
                "IO"
            ],
            "arguments": {
                "self": [],
                "resource_values": [
                    "str",
                    "type",
                    "Set[str]",
                    "dict",
                    "Iterable[str]",
                    "Dict[str, Any]"
                ],
                "name": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "ResourceSweeper._plan_deletion": {
            "name": "_plan_deletion",
            "location": 413,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "remaining": [
                    "str",
                    "int",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "deployed": [
                    "str",
                    "bool",
                    "int",
                    "models.User"
                ]
            }
        }
    },
    "chalice-master/chalice/deploy/validate.py": {
        "validate_configuration": {
            "name": "validate_configuration",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "validate_resource_policy": {
            "name": "validate_resource_policy",
            "location": 55,
            "return": [
                "None",
                "app.models.Article",
                "Iterator"
            ],
            "arguments": {
                "config": [
                    "dict[, ]",
                    "Config",
                    "dict"
                ]
            }
        },
        "validate_endpoint_type": {
            "name": "validate_endpoint_type",
            "location": 76,
            "return": [
                "None",
                "Iterator[Tuple[str, str]]",
                "int",
                "Optional[str]",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "config": [
                    "str",
                    "bool",
                    "typing.Type",
                    "type",
                    "Type['Model']"
                ]
            }
        },
        "validate_feature_flags": {
            "name": "validate_feature_flags",
            "location": 87,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "chalice_app": [
                    "str",
                    "bool"
                ]
            }
        },
        "validate_routes": {
            "name": "validate_routes",
            "location": 98,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "routes": [
                    "dict[str, object]",
                    "Dict[str, object]",
                    "dict[str, dict[str, int]]",
                    "dict[str, str]",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, int]]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, str]"
                ]
            }
        },
        "validate_python_version": {
            "name": "validate_python_version",
            "location": 114,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "config": [
                    "bool",
                    "str",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "typing.Sequence[]",
                    "Config",
                    "None",
                    "Sequence",
                    "pyramid.config.Configurator",
                    "Optional[str]"
                ],
                "actual_py_version": [
                    "Dict[str, Any]",
                    "None",
                    "Callable",
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "validate_route_content_types": {
            "name": "validate_route_content_types",
            "location": 140,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "routes": [
                    "str"
                ],
                "binary_types": [
                    "Union[str, List[str]]",
                    "str",
                    "Dict[str, str]",
                    "list[str]",
                    "dict[str, str]"
                ]
            }
        },
        "_validate_entry_content_type": {
            "name": "_validate_entry_content_type",
            "location": 147,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "route_entry": [
                    "str",
                    "int",
                    "None",
                    "Union[str, None]",
                    "bool"
                ],
                "binary_types": [
                    "typing.Type",
                    "str",
                    "recidiviz.common.constants.state.state_supervision_violation.StateSupervisionViolationType",
                    "dict[str, str]",
                    "Type",
                    "Union[str, 'Type']",
                    "Dict[str, str]"
                ]
            }
        },
        "_validate_cors_for_route": {
            "name": "_validate_cors_for_route",
            "location": 163,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "route_url": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "None"
                ],
                "route_methods": [
                    "dict[, ]",
                    "str",
                    "Sized",
                    "dict",
                    "Optional[bool]"
                ]
            }
        },
        "validate_minimum_compression_size": {
            "name": "validate_minimum_compression_size",
            "location": 189,
            "return": [
                "None",
                "app.models.Article",
                "list"
            ],
            "arguments": {
                "config": [
                    "bool",
                    "core.Config"
                ]
            }
        },
        "_validate_manage_iam_role": {
            "name": "_validate_manage_iam_role",
            "location": 202,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "config": [
                    "str",
                    "bool",
                    "opentrons.config.robot_configs.robot_config",
                    "typing.Sequence[]",
                    "_pytesconfig.Config",
                    "Sequence",
                    "pyramid.config.Configurator",
                    "sphinx.config.Config"
                ]
            }
        },
        "validate_unique_function_names": {
            "name": "validate_unique_function_names",
            "location": 218,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "config": [
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "Dict[str, Any]",
                    "Config",
                    "box.conf.Config",
                    "Dict[str, str]",
                    "tbump.config.Config"
                ]
            }
        },
        "_get_all_function_names": {
            "name": "_get_all_function_names",
            "location": 229,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "chalice_app": [
                    "bool"
                ]
            }
        },
        "validate_sqs_configuration": {
            "name": "validate_sqs_configuration",
            "location": 239,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "chalice_app": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "_is_valid_queue_name": {
            "name": "_is_valid_queue_name",
            "location": 251,
            "return": [
                "bool"
            ],
            "arguments": {
                "queue_name": [
                    "str",
                    "Optional[str]"
                ],
                "queue_arn": [
                    "str",
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[List[str]]",
                    "Optional[IO[bytes]]",
                    "bool"
                ]
            }
        },
        "validate_environment_variables_type": {
            "name": "validate_environment_variables_type",
            "location": 265,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "config": [
                    "dict[, ]",
                    "Config",
                    "dict[str, typing.Any]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "_validate_environment_variables": {
            "name": "_validate_environment_variables",
            "location": 273,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "environment_variables": [
                    "dict[str, str]",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "int",
                    "bool"
                ]
            }
        },
        "ExperimentalFeatureError.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "features_missing_opt_in": [
                    "bool",
                    "float",
                    "str",
                    "int",
                    "typing.Mapping",
                    "Mapping[str, Tuple[float, float, float]]"
                ]
            }
        },
        "ExperimentalFeatureError._generate_msg": {
            "name": "_generate_msg",
            "location": 21,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "missing_features": [
                    "str",
                    "list[str]",
                    "int",
                    "list[list[str]]",
                    "List[str]",
                    "list[]",
                    "List[List[str]]",
                    "list"
                ]
            }
        }
    },
    "chalice-master/chalice/deploy/__init__.py": {},
    "chalice-master/chalice/templates/0000-rest-api/app.py": {
        "index": {
            "name": "index",
            "location": 7,
            "return": [
                "dict[typing.Text, typing.Text]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "chalice-master/chalice/templates/0000-rest-api/chalicelib/__init__.py": {},
    "chalice-master/chalice/templates/0000-rest-api/tests/test_app.py": {
        "test_index": {
            "name": "test_index",
            "location": 5,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "chalice-master/chalice/templates/0000-rest-api/tests/__init__.py": {},
    "chalice-master/chalice/templates/0002-s3-event-handler/app.py": {
        "s3_handler": {
            "name": "s3_handler",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "chalice-master/chalice/templates/0002-s3-event-handler/chalicelib/__init__.py": {},
    "chalice-master/chalice/templates/0002-s3-event-handler/tests/test_app.py": {
        "test_s3_handler": {
            "name": "test_s3_handler",
            "location": 5,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "chalice-master/chalice/templates/0002-s3-event-handler/tests/__init__.py": {},
    "chalice-master/chalice/templates/0007-lambda-only/app.py": {
        "first_function": {
            "name": "first_function",
            "location": 7,
            "return": [
                "dict[typing.Text, typing.Text]",
                "int",
                "bool",
                "Iterator"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "dict[, ]"
                ],
                "context": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "second_function": {
            "name": "second_function",
            "location": 12,
            "return": [
                "dict[typing.Text, typing.Text]",
                "int",
                "bool",
                "Iterator"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "dict[, ]"
                ],
                "context": [
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "chalice-master/chalice/templates/0007-lambda-only/chalicelib/__init__.py": {},
    "chalice-master/chalice/templates/0007-lambda-only/tests/test_app.py": {
        "test_index": {
            "name": "test_index",
            "location": 5,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "chalice-master/chalice/templates/0007-lambda-only/tests/__init__.py": {},
    "chalice-master/chalice/templates/0009-legacy/app.py": {
        "index": {
            "name": "index",
            "location": 7,
            "return": [
                "dict[typing.Text, typing.Text]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "chalice-master/chalice/templates/6001-cdk-ddb/infrastructure/app.py": {},
    "chalice-master/chalice/templates/6001-cdk-ddb/infrastructure/stacks/chaliceapp.py": {
        "ChaliceApp.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "id": [
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ChaliceApp._create_ddb_table": {
            "name": "_create_ddb_table",
            "location": 34,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "chalice-master/chalice/templates/6001-cdk-ddb/infrastructure/stacks/__init__.py": {},
    "chalice-master/chalice/templates/6001-cdk-ddb/runtime/app.py": {
        "create_user": {
            "name": "create_user",
            "location": 12,
            "return": [
                "dict[, ]",
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "get_user": {
            "name": "get_user",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "username": [
                    "int",
                    "str",
                    "Iterable[Sequence[str]]",
                    "typing.Iterable[typing.Sequence[str]]"
                ]
            }
        }
    },
    "chalice-master/chalice/vendored/__init__.py": {},
    "chalice-master/chalice/vendored/botocore/regions.py": {
        "BaseEndpointResolver.construct_endpoint": {
            "name": "construct_endpoint",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "service_name": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "region_name": [
                    "str",
                    "None",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "BaseEndpointResolver.get_available_partitions": {
            "name": "get_available_partitions",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseEndpointResolver.get_available_endpoints": {
            "name": "get_available_endpoints",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "service_name": [
                    "str",
                    "bool",
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "Optional[int]",
                    "None",
                    "Optional[Union[str, Any]]",
                    "typing.Any"
                ],
                "partition_name": [
                    "typing.Text",
                    "str",
                    "Mapping[str, Any]",
                    "bool",
                    "Optional[int]",
                    "Optional[Union[str, Any]]"
                ],
                "allow_non_regional": [
                    "bool",
                    "str",
                    "Mapping[str, Any]",
                    "Optional[int]",
                    "Optional[Union[str, Any]]"
                ]
            }
        },
        "EndpointResolver.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "endpoint_data": [
                    "bytes",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Dict[str, dict]",
                    "dict[str, dict[, ]]",
                    "Tuple[int, str, bytearray]",
                    "tuple[typing.Union[int,str,bytearray]]"
                ]
            }
        },
        "EndpointResolver.get_available_partitions": {
            "name": "get_available_partitions",
            "location": 98,
            "return": [
                "list[]",
                "str",
                "bool",
                "dict",
                "set",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EndpointResolver.get_available_endpoints": {
            "name": "get_available_endpoints",
            "location": 104,
            "return": [
                "list[]",
                "str",
                "bool",
                "dict",
                "set",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "service_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "partition_name": [
                    "typing.Text",
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "Collection[str]"
                ],
                "allow_non_regional": [
                    "str",
                    "bool"
                ]
            }
        },
        "EndpointResolver.construct_endpoint": {
            "name": "construct_endpoint",
            "location": 118,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "dict[str, str]",
                "dict[str, int]",
                "list[tuple[typing.Union[str,int]]]",
                "list[tuple[typing.Union[str,str,str,str]]]",
                "None"
            ],
            "arguments": {
                "self": [],
                "service_name": [
                    "str",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ],
                "region_name": [
                    "str",
                    "None",
                    "Optional[List[str]]",
                    "list[str]"
                ],
                "partition_name": [
                    "Optional[str]",
                    "str",
                    "None",
                    "bool",
                    "Optional[List[str]]",
                    "list[str]"
                ]
            }
        },
        "EndpointResolver._endpoint_for_partition": {
            "name": "_endpoint_for_partition",
            "location": 138,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "partition": [
                    "str",
                    "Optional[Mapping[str, Any]]"
                ],
                "service_name": [
                    "str"
                ],
                "region_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "force_partition": [
                    "bool",
                    "str",
                    "type",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "EndpointResolver._region_match": {
            "name": "_region_match",
            "location": 168,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "partition": [
                    "str",
                    "Optional[str]"
                ],
                "region_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "EndpointResolver._resolve": {
            "name": "_resolve",
            "location": 175,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "partition": [
                    "str"
                ],
                "service_name": [
                    "str"
                ],
                "service_data": [
                    "str"
                ],
                "endpoint_name": [
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "typing.Mapping",
                    "Dict[str, str]",
                    "None",
                    "dict[str, str]"
                ]
            }
        },
        "EndpointResolver._merge_keys": {
            "name": "_merge_keys",
            "location": 192,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "from_data": [
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "dict",
                    "bool",
                    "str"
                ],
                "result": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, Set[str]]",
                    "Dict[str, str]"
                ]
            }
        },
        "EndpointResolver._expand_template": {
            "name": "_expand_template",
            "location": 197,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "partition": [
                    "str",
                    "list",
                    "list[]"
                ],
                "template": [
                    "str",
                    "list"
                ],
                "service_name": [
                    "str",
                    "list",
                    "list[]"
                ],
                "endpoint_name": [
                    "str",
                    "list",
                    "list[]"
                ]
            }
        }
    },
    "chalice-master/chalice/vendored/botocore/__init__.py": {},
    "chalice-master/docs/source/chalicedocs.py": {
        "get_size": {
            "name": "get_size",
            "location": 13,
            "return": [
                "Optional[str]",
                "Union[None, List[str]]",
                "str",
                "Optional[Sequence[str]]",
                "bool"
            ],
            "arguments": {
                "d": [
                    "str",
                    "dict"
                ],
                "key": [
                    "str",
                    "dict"
                ]
            }
        },
        "css": {
            "name": "css",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "d": [
                    "dict",
                    "Union[Dict, List]",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "visit_youtube_node": {
            "name": "visit_youtube_node",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.Expression",
                    "mypy.nodes.ClassDef"
                ]
            }
        },
        "depart_youtube_node": {
            "name": "depart_youtube_node",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "unsupported_visit_youtube": {
            "name": "unsupported_visit_youtube",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.Node",
                    "List[mypy.nodes.Statement]",
                    "Dict[str, bool]",
                    "bool"
                ]
            }
        },
        "setup": {
            "name": "setup",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "app": []
            }
        },
        "YouTube.run": {
            "name": "run",
            "location": 101,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "chalice-master/docs/source/conf.py": {},
    "chalice-master/docs/source/samples/media-query/code/app.py": {
        "get_media_db": {
            "name": "get_media_db",
            "location": 25,
            "return": [
                "str",
                "int",
                "bool",
                "None",
                "Hashable",
                "Tuple[int, int]",
                "float",
                "list[typing.Union[typing.Any,typing.Any]]",
                "frozenset",
                "ImportError",
                "DynamoMediaDB"
            ],
            "arguments": {}
        },
        "get_rekognition_client": {
            "name": "get_rekognition_client",
            "location": 34,
            "return": [
                "float",
                "RekognitonClient"
            ],
            "arguments": {}
        },
        "handle_object_created": {
            "name": "handle_object_created",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "handle_object_removed": {
            "name": "handle_object_removed",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "dict[, ]",
                    "List[Dict]",
                    "list[dict[, ]]"
                ]
            }
        },
        "add_video_file": {
            "name": "add_video_file",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "dict[, ]",
                    "dict",
                    "dict[str, str]",
                    "None",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "Optional[dict]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "list_media_files": {
            "name": "list_media_files",
            "location": 70,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "get_media_file": {
            "name": "get_media_file",
            "location": 78,
            "return": [
                "str",
                "None",
                "List[str]",
                "Optional[Callable]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "_extract_db_list_params": {
            "name": "_extract_db_list_params",
            "location": 86,
            "return": [
                "dict[, tuple[typing.Union[str,typing.Any]]]",
                "Dict[str, Any]",
                "dict",
                "Dict[int, Dict[int, Any]]",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "query_params": [
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "_is_image": {
            "name": "_is_image",
            "location": 98,
            "return": [
                "bool",
                "str",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {
                "key": [
                    "str"
                ]
            }
        },
        "_handle_created_image": {
            "name": "_handle_created_image",
            "location": 102,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "bucket": [
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "key": [
                    "str",
                    "Optional[str]",
                    "None",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "_is_video": {
            "name": "_is_video",
            "location": 107,
            "return": [
                "bool",
                "str",
                "Set[str]",
                "Optional[str]"
            ],
            "arguments": {
                "key": [
                    "str"
                ]
            }
        },
        "_handle_created_video": {
            "name": "_handle_created_video",
            "location": 111,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "bucket": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            }
        }
    },
    "chalice-master/docs/source/samples/media-query/code/recordresources.py": {
        "record_as_env_var": {
            "name": "record_as_env_var",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stack_name": [
                    "str"
                ],
                "stage": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "_to_env_var_name": {
            "name": "_to_env_var_name",
            "location": 28,
            "return": [
                "str",
                "Dict[str, str]",
                "int",
                "Optional[str]",
                "Dict[str, Any]",
                "Set[str]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Tuple[str]",
                    "tuple[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "chalice-master/docs/source/samples/media-query/code/chalicelib/db.py": {
        "MediaDB.list_media_files": {
            "name": "list_media_files",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "None",
                    "List[str]",
                    "str",
                    "list[str]",
                    "int",
                    "Iterable[Tuple[str, str]]",
                    "bool"
                ]
            }
        },
        "MediaDB.add_media_file": {
            "name": "add_media_file",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "bool",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "media_type": [
                    "bool",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "labels": [
                    "bool",
                    "str",
                    "None",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "MediaDB.get_media_file": {
            "name": "get_media_file",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "MediaDB.delete_media_file": {
            "name": "delete_media_file",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "DynamoMediaDB.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "table_resource": [
                    "str",
                    "int"
                ]
            }
        },
        "DynamoMediaDB.list_media_files": {
            "name": "list_media_files",
            "location": 26,
            "return": [
                "int",
                "bytes",
                "bool",
                "dict",
                "Dict[str, str]",
                "Dict[str, Any]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "startswith": [
                    "str",
                    "None",
                    "Type",
                    "Optional[BaseException]",
                    "typing.Type",
                    "BaseException"
                ],
                "media_type": [
                    "str",
                    "None",
                    "int",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "label": [
                    "str",
                    "None",
                    "Type",
                    "Optional[BaseException]",
                    "typing.Type",
                    "BaseException"
                ]
            }
        },
        "DynamoMediaDB.add_media_file": {
            "name": "add_media_file",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "media_type": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "labels": [
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[Any]",
                    "str",
                    "typing.Any",
                    "Optional[Dict[str, Any]]",
                    "typing.Pattern",
                    "Optional[Pattern]",
                    "typing.Mapping",
                    "Optional[Mapping[str, Any]]",
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "DynamoMediaDB.get_media_file": {
            "name": "get_media_file",
            "location": 57,
            "return": [
                "bool",
                "str",
                "Optional[Dict[str, Any]]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "DynamoMediaDB.delete_media_file": {
            "name": "delete_media_file",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ]
            }
        },
        "DynamoMediaDB._add_to_filter_expression": {
            "name": "_add_to_filter_expression",
            "location": 72,
            "return": [
                "Dict[str, Any]",
                "bytes",
                "List[str]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "expression": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "condition": [
                    "str"
                ]
            }
        }
    },
    "chalice-master/docs/source/samples/media-query/code/chalicelib/rekognition.py": {
        "RekognitonClient.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "boto3_client": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "RekognitonClient.get_image_labels": {
            "name": "get_image_labels",
            "location": 8,
            "return": [
                "list[]",
                "List[str]",
                "bool",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "RekognitonClient.start_video_label_job": {
            "name": "start_video_label_job",
            "location": 20,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ],
                "key": [
                    "str"
                ],
                "topic_arn": [
                    "str"
                ],
                "role_arn": [
                    "str"
                ]
            }
        },
        "RekognitonClient.get_video_job_labels": {
            "name": "get_video_job_labels",
            "location": 37,
            "return": [
                "list[]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "int"
                ]
            }
        },
        "RekognitonClient._collect_video_labels": {
            "name": "_collect_video_labels",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "set[str]",
                    "dict",
                    "Iterable[str]",
                    "Type[object]",
                    "NamedTuple",
                    "Set[str]"
                ],
                "response": [
                    "str",
                    "dict",
                    "Callable",
                    "Optional[Any]"
                ]
            }
        }
    },
    "chalice-master/docs/source/samples/media-query/code/chalicelib/__init__.py": {},
    "chalice-master/docs/source/samples/todo-app/code/app.py": {
        "login": {
            "name": "login",
            "location": 18,
            "return": [
                "dict[typing.Text, typing.Union[str,typing.Iterator,None]]",
                "str",
                "bool",
                "dict"
            ],
            "arguments": {}
        },
        "jwt_auth": {
            "name": "jwt_auth",
            "location": 28,
            "return": [
                "AuthResponse",
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "auth_request": [
                    "dict",
                    "dict[, ]",
                    "str",
                    "Union[dict, list]",
                    "list[]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "get_auth_key": {
            "name": "get_auth_key",
            "location": 34,
            "return": [
                "str",
                "dict",
                "None",
                "dict[, ]",
                "int"
            ],
            "arguments": {}
        },
        "get_users_db": {
            "name": "get_users_db",
            "location": 45,
            "return": [
                "Dict[str, str]",
                "set[]",
                "Callable",
                "django.contrib.auth.models.AbstractUser",
                "list[]",
                "django.contrib.auth.models.User",
                "list[str]",
                "bool",
                "list[None]",
                "str"
            ],
            "arguments": {}
        },
        "get_app_db": {
            "name": "get_app_db",
            "location": 53,
            "return": [
                "Optional[str]",
                "str",
                "list"
            ],
            "arguments": {}
        },
        "get_authorized_username": {
            "name": "get_authorized_username",
            "location": 63,
            "return": [
                "int",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "current_request": []
            }
        },
        "list_todos": {
            "name": "list_todos",
            "location": 68,
            "return": [
                "str",
                "Optional[str]",
                "Optional[List[Any]]"
            ],
            "arguments": {}
        },
        "create_todo": {
            "name": "create_todo",
            "location": 74,
            "return": [
                "str",
                "Optional[Dict]",
                "list",
                "django.contrib.auth.models.AbstractBaseUser"
            ],
            "arguments": {}
        },
        "get_todo": {
            "name": "get_todo",
            "location": 85,
            "return": [
                "bool",
                "Callable[[], T]",
                "Optional[str]"
            ],
            "arguments": {
                "uid": [
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "update_todo": {
            "name": "update_todo",
            "location": 91,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "uid": [
                    "bool",
                    "str",
                    "bytes",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "delete_todo": {
            "name": "delete_todo",
            "location": 103,
            "return": [
                "str",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "uid": [
                    "str"
                ]
            }
        }
    },
    "chalice-master/docs/source/samples/todo-app/code/create-resources.py": {
        "create_table": {
            "name": "create_table",
            "location": 26,
            "return": [
                "typing.Text",
                "str",
                "Container[\"Taxon\"]",
                "int"
            ],
            "arguments": {
                "table_name_prefix": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "hash_key": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "None"
                ],
                "range_key": [
                    "Optional[str]",
                    "None",
                    "Callable",
                    "str",
                    "list",
                    "typing.Callable[, ]",
                    "Optional[bool]",
                    "list[]",
                    "Optional[int]",
                    "bool",
                    "Optional[Tuple[Any, Any]]",
                    "tuple[typing.Union[typing.Any,typing.Any]]"
                ]
            }
        },
        "record_as_env_var": {
            "name": "record_as_env_var",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ],
                "stage": [
                    "str"
                ]
            }
        },
        "_already_in_config": {
            "name": "_already_in_config",
            "location": 70,
            "return": [
                "bool",
                "str",
                "Tuple[int, int]",
                "Union[str, List]",
                "List[Dict[str, Any]]",
                "Callable"
            ],
            "arguments": {
                "env_var": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]",
                    "Optional[dict]",
                    "None"
                ],
                "stage": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]",
                    "Optional[dict]",
                    "None"
                ]
            }
        },
        "create_auth_key_if_needed": {
            "name": "create_auth_key_if_needed",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stage": [
                    "bool",
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional",
                    "typing.Optional[]",
                    "Sequence[int]",
                    "typing.Sequence[int]"
                ]
            }
        },
        "create_resources": {
            "name": "create_resources",
            "location": 89,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "cleanup_resources": {
            "name": "cleanup_resources",
            "location": 104,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 132,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "chalice-master/docs/source/samples/todo-app/code/users.py": {
        "get_table_name": {
            "name": "get_table_name",
            "location": 13,
            "return": [
                "Dict[str, Any]",
                "Mapping[str, T]",
                "types.ModuleType",
                "telethon.tl.types.Channel",
                "str",
                "dict",
                "Optional[Match]",
                "Tuple[int, List[str]]"
            ],
            "arguments": {
                "stage": [
                    "str",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "Union[str, bytes]",
                    "bytes"
                ]
            }
        },
        "create_user": {
            "name": "create_user",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stage": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "encode_password": {
            "name": "encode_password",
            "location": 37,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,None,typing.Pattern,dict[str, typing.Any],int]]",
                "int",
                "str"
            ],
            "arguments": {
                "password": [
                    "str"
                ],
                "salt": [
                    "str",
                    "None",
                    "Optional[\"LocalizedString\"]",
                    "Optional[str]"
                ]
            }
        },
        "list_users": {
            "name": "list_users",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stage": [
                    "str"
                ]
            }
        },
        "get_user": {
            "name": "get_user",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "username": [
                    "str",
                    "bytes",
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ],
                "stage": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_password": {
            "name": "test_password",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stage": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 83,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "chalice-master/docs/source/samples/todo-app/code/chalicelib/auth.py": {
        "get_jwt_token": {
            "name": "get_jwt_token",
            "location": 10,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "username": [
                    "bool",
                    "str",
                    "int",
                    "dict[, ]",
                    "dict"
                ],
                "password": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "Optional[str]",
                    "float"
                ],
                "record": [
                    "str",
                    "bytes",
                    "Optional[bytes]",
                    "int",
                    "Optional[\"AbstractPurpose\"]"
                ],
                "secret": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "decode_jwt_token": {
            "name": "decode_jwt_token",
            "location": 32,
            "return": [
                "Mapping[str, Any]",
                "bool",
                "bytes"
            ],
            "arguments": {
                "token": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "secret": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "chalice-master/docs/source/samples/todo-app/code/chalicelib/db.py": {
        "TodoDB.list_items": {
            "name": "list_items",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TodoDB.add_item": {
            "name": "add_item",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "description": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "metadata": [
                    "str",
                    "None",
                    "bool",
                    "dict",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TodoDB.get_item": {
            "name": "get_item",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "str",
                    "bool"
                ]
            }
        },
        "TodoDB.delete_item": {
            "name": "delete_item",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "bool",
                    "typing.Sequence[str]",
                    "int",
                    "Sequence[str]",
                    "Union['IndexBase', 'Series']"
                ]
            }
        },
        "TodoDB.update_item": {
            "name": "update_item",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "typing.AbstractSet",
                    "AbstractSet[int]",
                    "bool",
                    "typing.Sequence[str]",
                    "Sequence[str]",
                    "None",
                    "AbstractSet[str]",
                    "Optional[int]"
                ],
                "description": [
                    "None",
                    "AbstractSet[int]",
                    "bool",
                    "typing.AbstractSet",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "AbstractSet[str]",
                    "Optional[int]"
                ],
                "state": [
                    "None",
                    "AbstractSet[int]",
                    "bool",
                    "typing.AbstractSet",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "AbstractSet[str]",
                    "Optional[int]"
                ],
                "metadata": [
                    "None",
                    "AbstractSet[int]",
                    "bool",
                    "typing.AbstractSet",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "AbstractSet[str]",
                    "Optional[int]"
                ]
            }
        },
        "InMemoryTodoDB.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "None",
                    "Optional[str]",
                    "str",
                    "List[Set[int]]",
                    "list[set[int]]",
                    "Optional[int]",
                    "int",
                    "Optional[Type[Any]]",
                    "typing.Type",
                    "Union[str, bool]",
                    "Optional[bool]"
                ]
            }
        },
        "InMemoryTodoDB.list_all_items": {
            "name": "list_all_items",
            "location": 33,
            "return": [
                "list[]",
                "bool",
                "str",
                "Callable[..., None]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemoryTodoDB.list_items": {
            "name": "list_items",
            "location": 39,
            "return": [
                "list[]",
                "Optional[str]",
                "list",
                "Iterable[T]",
                "str"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "typing.Text",
                    "dict",
                    "int",
                    "Dict[str, bool]",
                    "str"
                ]
            }
        },
        "InMemoryTodoDB.add_item": {
            "name": "add_item",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "description": [
                    "dict",
                    "dict[, ]"
                ],
                "metadata": [
                    "dict",
                    "None",
                    "dict[, ]"
                ],
                "username": [
                    "typing.Text",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "InMemoryTodoDB.get_item": {
            "name": "get_item",
            "location": 55,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "bool",
                    "str",
                    "int"
                ],
                "username": [
                    "typing.Text",
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "InMemoryTodoDB.delete_item": {
            "name": "delete_item",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "int",
                    "float",
                    "bool",
                    "dict[, ]",
                    "dict"
                ],
                "username": [
                    "typing.Text",
                    "int",
                    "bool",
                    "float",
                    "dict"
                ]
            }
        },
        "InMemoryTodoDB.update_item": {
            "name": "update_item",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "str",
                    "Dict[Hashable, Any]",
                    "dict[typing.Hashable, typing.Any]",
                    "Optional[str]",
                    "None",
                    "Optional[bool]",
                    "bool"
                ],
                "description": [
                    "str",
                    "None",
                    "Optional[Any]",
                    "Optional[object]",
                    "typing.Any"
                ],
                "state": [
                    "str",
                    "None",
                    "Optional[Any]",
                    "Optional[object]",
                    "typing.Any"
                ],
                "metadata": [
                    "str",
                    "None",
                    "Optional[Any]",
                    "Optional[object]",
                    "typing.Any"
                ],
                "username": [
                    "typing.Text",
                    "str",
                    "Dict[Hashable, Any]",
                    "Optional[str]",
                    "Optional[bool]"
                ]
            }
        },
        "DynamoDBTodo.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "table_resource": [
                    "str",
                    "int"
                ]
            }
        },
        "DynamoDBTodo.list_all_items": {
            "name": "list_all_items",
            "location": 76,
            "return": [
                "int",
                "bytes",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Optional[Mapping[str, Any]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DynamoDBTodo.list_items": {
            "name": "list_items",
            "location": 80,
            "return": [
                "Dict[str, str]",
                "Dict[str, Any]",
                "bool",
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "typing.Text",
                    "str",
                    "Optional[str]",
                    "Callable",
                    "dict"
                ]
            }
        },
        "DynamoDBTodo.add_item": {
            "name": "add_item",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "description": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "metadata": [
                    "str",
                    "None",
                    "dict",
                    "dict[, ]"
                ],
                "username": [
                    "typing.Text",
                    "str",
                    "dict"
                ]
            }
        },
        "DynamoDBTodo.get_item": {
            "name": "get_item",
            "location": 99,
            "return": [
                "bytes",
                "int",
                "Dict[str, str]",
                "Dict[str, Any]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "str",
                    "int",
                    "Union[Type, Tuple[Type, ...]]",
                    "typing.Type",
                    "tuple[typing.Union[typing.Type,...]]"
                ],
                "username": [
                    "typing.Text",
                    "str",
                    "int",
                    "Union[Type, Tuple[Type, ...]]"
                ]
            }
        },
        "DynamoDBTodo.delete_item": {
            "name": "delete_item",
            "location": 108,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "Optional[str]",
                    "str",
                    "int",
                    "None",
                    "Optional[Sequence[str]]",
                    "Optional[int]",
                    "typing.Sequence[str]"
                ],
                "username": [
                    "typing.Text",
                    "Optional[str]",
                    "int",
                    "Optional[Sequence[str]]",
                    "Optional[int]"
                ]
            }
        },
        "DynamoDBTodo.update_item": {
            "name": "update_item",
            "location": 116,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "Sequence[str]",
                    "str",
                    "typing.Sequence[str]",
                    "int",
                    "Optional[Mapping[str, Any]]",
                    "typing.Mapping",
                    "Optional[str]",
                    "None"
                ],
                "description": [
                    "str",
                    "None",
                    "Optional[Any]",
                    "Optional[object]",
                    "typing.Any"
                ],
                "state": [
                    "str",
                    "None",
                    "Optional[Any]",
                    "Optional[object]",
                    "typing.Any"
                ],
                "metadata": [
                    "str",
                    "None",
                    "Optional[Any]",
                    "Optional[object]",
                    "typing.Any"
                ],
                "username": [
                    "typing.Text",
                    "Sequence[str]",
                    "str",
                    "int",
                    "Optional[Mapping[str, Any]]",
                    "Optional[str]"
                ]
            }
        }
    },
    "chalice-master/docs/source/samples/todo-app/code/chalicelib/__init__.py": {},
    "chalice-master/docs/source/samples/todo-app/code/tests/test_db.py": {
        "TestTodoDB.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTodoDB.tearDown": {
            "name": "tearDown",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTodoDB.test_can_add_and_retrieve_data": {
            "name": "test_can_add_and_retrieve_data",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTodoDB.test_can_add_and_list_data": {
            "name": "test_can_add_and_list_data",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTodoDB.test_can_add_and_delete_data": {
            "name": "test_can_add_and_delete_data",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTodoDB.test_can_add_and_update_data": {
            "name": "test_can_add_and_update_data",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTodoDB.test_can_add_and_retrieve_data_with_specified_username": {
            "name": "test_can_add_and_retrieve_data_with_specified_username",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTodoDB.test_can_add_and_list_data_with_specified_username": {
            "name": "test_can_add_and_list_data_with_specified_username",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTodoDB.test_can_add_and_delete_data_with_specified_username": {
            "name": "test_can_add_and_delete_data_with_specified_username",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTodoDB.test_can_add_and_update_data_with_specified_username": {
            "name": "test_can_add_and_update_data_with_specified_username",
            "location": 72,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTodoDB.test_list_all_items": {
            "name": "test_list_all_items",
            "location": 79,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDynamoDB.setUpClass": {
            "name": "setUpClass",
            "location": 94,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cls": [
                    "Exception",
                    "bytes",
                    "str",
                    "Union[dict, list]",
                    "dict[, ]",
                    "type",
                    "list[]",
                    "typing.Type"
                ]
            }
        },
        "TestDynamoDB.tearDownClass": {
            "name": "tearDownClass",
            "location": 128,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "TestDynamoDB.setUp": {
            "name": "setUp",
            "location": 134,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "chalice-master/docs/source/samples/todo-app/code/tests/__init__.py": {},
    "chalice-master/tests/codelinter.py": {
        "register": {
            "name": "register",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "linter": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ConditionalImports.visit_import": {
            "name": "visit_import",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ConditionalImports.visit_importfrom": {
            "name": "visit_importfrom",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ConditionalImports._is_in_try_except_import_error": {
            "name": "_is_in_try_except_import_error",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "tuple[object]",
                    "Tuple[object]",
                    "astroid.node_classes.NodeNG",
                    "astroid.FunctionDef"
                ]
            }
        }
    },
    "chalice-master/tests/conftest.py": {
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "parser": []
            }
        },
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "Sequence",
                    "bool",
                    "str"
                ]
            }
        },
        "pytest_collection_modifyitems": {
            "name": "pytest_collection_modifyitems",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]"
                ],
                "items": [
                    "list",
                    "dict",
                    "str"
                ]
            }
        },
        "teardown_function": {
            "name": "teardown_function",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "stubbed_session": {
            "name": "stubbed_session",
            "location": 167,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "no_local_config": {
            "name": "no_local_config",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "monkeypatch": [
                    "bool",
                    "Optional[Iterable[T]]",
                    "str"
                ]
            }
        },
        "StubbedSession.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "StubbedSession.create_client": {
            "name": "create_client",
            "location": 44,
            "return": [
                "Tuple[Callable, Callable]"
            ],
            "arguments": {
                "self": [],
                "service_name": [
                    "str",
                    "dict",
                    "Optional[List[str]]"
                ]
            }
        },
        "StubbedSession._create_stubbed_client": {
            "name": "_create_stubbed_client",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "service_name": [
                    "str",
                    "dict"
                ]
            }
        },
        "StubbedSession.stub": {
            "name": "stub",
            "location": 57,
            "return": [
                "str",
                "Tuple[str]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "service_name": [
                    "str",
                    "int"
                ]
            }
        },
        "StubbedSession.activate_stubs": {
            "name": "activate_stubs",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "StubbedSession.verify_stubs": {
            "name": "verify_stubs",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "StubBuilder.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "stub": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "StubBuilder.__getattr__": {
            "name": "__getattr__",
            "location": 77,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "StubBuilder.assert_no_pending_responses": {
            "name": "assert_no_pending_responses",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "StubBuilder.activate": {
            "name": "activate",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "StubBuilder.returns": {
            "name": "returns",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "response": [
                    "Mapping[str, str]",
                    "str",
                    "dict"
                ]
            }
        },
        "StubBuilder.raises_error": {
            "name": "raises_error",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "error_code": [
                    "bool",
                    "Optional[str]",
                    "dict",
                    "int",
                    "Callable[[str], None]"
                ],
                "message": [
                    "bool",
                    "Optional[str]",
                    "dict",
                    "int",
                    "Callable[[str], None]"
                ],
                "error": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "Optional[Any]",
                    "Callable",
                    "Optional[float]"
                ]
            }
        },
        "StubBuilder.__call__": {
            "name": "__call__",
            "location": 125,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChaliceStubber.add_response_error": {
            "name": "add_response_error",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "method": [
                    "bool",
                    "dict",
                    "Dict[str, Any]"
                ],
                "error": [
                    "str",
                    "List[str]",
                    "dict"
                ],
                "expected_params": [
                    "str",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "ChaliceStubber._get_response_handler": {
            "name": "_get_response_handler",
            "location": 158,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Mapping[str, Any]",
                "Dict[int, Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Dict[str, Any]",
                    "str",
                    "Callable"
                ],
                "params": [
                    "Dict[str, Any]",
                    "str",
                    "Callable"
                ]
            }
        }
    },
    "chalice-master/tests/testlinter.py": {
        "register": {
            "name": "register",
            "location": 6,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "linter": [
                    "str",
                    "float",
                    "Optional[Iterable[T]]"
                ]
            }
        },
        "PatchChecker.visit_call": {
            "name": "visit_call",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Callable[[str], str]"
                ]
            }
        },
        "MocksUseSpecArg.visit_call": {
            "name": "visit_call",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Sequence[Any]"
                ]
            }
        },
        "MocksUseSpecArg._verify_spec_arg_provided": {
            "name": "_verify_spec_arg_provided",
            "location": 51,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "chalice-master/tests/__init__.py": {},
    "chalice-master/tests/aws/conftest.py": {
        "pytest_collection_modifyitems": {
            "name": "pytest_collection_modifyitems",
            "location": 4,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "session": [
                    "str",
                    "float",
                    "Sequence",
                    "typing.Sequence[]"
                ],
                "config": [
                    "str",
                    "float",
                    "Sequence",
                    "typing.Sequence[]"
                ],
                "items": [
                    "Dict[str, Any]",
                    "dict",
                    "Optional[Any]"
                ]
            }
        },
        "_get_start_end_index": {
            "name": "_get_start_end_index",
            "location": 18,
            "return": [
                "tuple[int]",
                "bool",
                "float",
                "int"
            ],
            "arguments": {
                "basename": [
                    "dict[, ]",
                    "T",
                    "list[]",
                    "float",
                    "dict",
                    "typing.Callable[, ]",
                    "Iterable[T]",
                    "list",
                    "Callable"
                ],
                "items": [
                    "str",
                    "T"
                ]
            }
        }
    },
    "chalice-master/tests/aws/test_features.py": {
        "retry": {
            "name": "retry",
            "location": 25,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "max_attempts": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "delay": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "apig_client": {
            "name": "apig_client",
            "location": 173,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "smoke_test_app": {
            "name": "smoke_test_app",
            "location": 179,
            "return": [
                "",
                "typing.Generator[dict[str, str]]"
            ],
            "arguments": {
                "tmpdir_factory": [
                    "str",
                    "bytes"
                ]
            }
        },
        "_inject_app_name": {
            "name": "_inject_app_name",
            "location": 192,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "dirname": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "_deploy_app": {
            "name": "_deploy_app",
            "location": 203,
            "return": [
                "SmokeTestApplication",
                "Callable",
                "str",
                "bool",
                "List[dict]",
                "int",
                "float"
            ],
            "arguments": {
                "temp_dirname": [
                    "dict[str, typing.Any]",
                    "requests.cookies.RequestsCookieJar",
                    "Dict[str, Any]"
                ]
            }
        },
        "_deploy_with_retries": {
            "name": "_deploy_with_retries",
            "location": 224,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "deployer": [
                    "dict",
                    "config.ConfigFile",
                    "str"
                ],
                "config": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "config.ConfigFile"
                ]
            }
        },
        "_get_error_code_from_exception": {
            "name": "_get_error_code_from_exception",
            "location": 237,
            "return": [
                "None",
                "bool",
                "Union[str, List[str]]"
            ],
            "arguments": {
                "exception": [
                    "str",
                    "Exception",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "_delete_app": {
            "name": "_delete_app",
            "location": 244,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "application": [
                    "bool"
                ],
                "temp_dirname": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "test_returns_simple_response": {
            "name": "test_returns_simple_response",
            "location": 255,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "smoke_test_app": []
            }
        },
        "test_can_have_nested_routes": {
            "name": "test_can_have_nested_routes",
            "location": 259,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "smoke_test_app": [
                    "str"
                ]
            }
        },
        "test_supports_path_params": {
            "name": "test_supports_path_params",
            "location": 263,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "smoke_test_app": []
            }
        },
        "test_path_params_mapped_in_api": {
            "name": "test_path_params_mapped_in_api",
            "location": 268,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "smoke_test_app": [
                    "str"
                ],
                "apig_client": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_single_doc_mapped_in_api": {
            "name": "test_single_doc_mapped_in_api",
            "location": 287,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "smoke_test_app": [
                    "str"
                ],
                "apig_client": []
            }
        },
        "test_multi_doc_mapped_in_api": {
            "name": "test_multi_doc_mapped_in_api",
            "location": 302,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "smoke_test_app": [
                    "str"
                ],
                "apig_client": []
            }
        },
        "_get_resource_id": {
            "name": "_get_resource_id",
            "location": 319,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "apig_client": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "rest_api_id": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "path": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_supports_post": {
            "name": "test_supports_post",
            "location": 332,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "smoke_test_app": []
            }
        },
        "test_supports_put": {
            "name": "test_supports_put",
            "location": 342,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "smoke_test_app": []
            }
        },
        "test_supports_shared_routes": {
            "name": "test_supports_shared_routes",
            "location": 352,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "smoke_test_app": [
                    "str"
                ]
            }
        },
        "test_can_read_json_body_on_post": {
            "name": "test_can_read_json_body_on_post",
            "location": 359,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "smoke_test_app": []
            }
        },
        "test_can_raise_bad_request": {
            "name": "test_can_raise_bad_request",
            "location": 367,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "smoke_test_app": []
            }
        },
        "test_can_raise_not_found": {
            "name": "test_can_raise_not_found",
            "location": 374,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "smoke_test_app": []
            }
        },
        "test_unexpected_error_raises_500_in_prod_mode": {
            "name": "test_unexpected_error_raises_500_in_prod_mode",
            "location": 380,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "smoke_test_app": [
                    "str"
                ]
            }
        },
        "test_can_route_multiple_methods_in_one_view": {
            "name": "test_can_route_multiple_methods_in_one_view",
            "location": 389,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "smoke_test_app": []
            }
        },
        "test_form_encoded_content_type": {
            "name": "test_form_encoded_content_type",
            "location": 399,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "smoke_test_app": [
                    "str"
                ]
            }
        },
        "test_can_round_trip_binary": {
            "name": "test_can_round_trip_binary",
            "location": 406,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "smoke_test_app": []
            }
        },
        "test_can_round_trip_binary_custom_content_type": {
            "name": "test_can_round_trip_binary_custom_content_type",
            "location": 419,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "smoke_test_app": []
            }
        },
        "test_can_return_default_binary_data_to_a_browser": {
            "name": "test_can_return_default_binary_data_to_a_browser",
            "location": 430,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "smoke_test_app": []
            }
        },
        "_assert_contains_access_control_allow_methods": {
            "name": "_assert_contains_access_control_allow_methods",
            "location": 439,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "headers": [
                    "str",
                    "int"
                ],
                "methods": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Dict[str, Dict[str, str]]",
                    "dict[str, dict[str, str]]"
                ]
            }
        },
        "test_can_support_cors": {
            "name": "test_can_support_cors",
            "location": 446,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "smoke_test_app": [
                    "str"
                ]
            }
        },
        "test_can_support_custom_cors": {
            "name": "test_can_support_custom_cors",
            "location": 463,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "smoke_test_app": [
                    "str"
                ]
            }
        },
        "test_to_dict_is_also_json_serializable": {
            "name": "test_to_dict_is_also_json_serializable",
            "location": 485,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "smoke_test_app": [
                    "int",
                    "raiden.utils.SecretRegistryAddress"
                ]
            }
        },
        "test_multifile_support": {
            "name": "test_multifile_support",
            "location": 489,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "smoke_test_app": []
            }
        },
        "test_custom_response": {
            "name": "test_custom_response",
            "location": 494,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "smoke_test_app": []
            }
        },
        "test_api_key_required_fails_with_no_key": {
            "name": "test_api_key_required_fails_with_no_key",
            "location": 505,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "smoke_test_app": []
            }
        },
        "test_can_handle_charset": {
            "name": "test_can_handle_charset",
            "location": 512,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "smoke_test_app": [
                    "str"
                ]
            }
        },
        "test_can_use_builtin_custom_auth": {
            "name": "test_can_use_builtin_custom_auth",
            "location": 521,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "smoke_test_app": [
                    "Dict[str, str]"
                ]
            }
        },
        "test_can_use_shared_auth": {
            "name": "test_can_use_shared_auth",
            "location": 538,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "smoke_test_app": [
                    "dict"
                ]
            }
        },
        "test_empty_raw_body": {
            "name": "test_empty_raw_body",
            "location": 554,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "smoke_test_app": [
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ]
            }
        },
        "test_websocket_lifecycle": {
            "name": "test_websocket_lifecycle",
            "location": 560,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "smoke_test_app": [
                    "str"
                ]
            }
        },
        "test_redeploy_no_change_view": {
            "name": "test_redeploy_no_change_view",
            "location": 579,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "smoke_test_app": []
            }
        },
        "test_redeploy_changed_function": {
            "name": "test_redeploy_changed_function",
            "location": 585,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "smoke_test_app": []
            }
        },
        "test_redeploy_new_function": {
            "name": "test_redeploy_new_function",
            "location": 592,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "smoke_test_app": [
                    "str"
                ]
            }
        },
        "test_redeploy_change_route_info": {
            "name": "test_redeploy_change_route_info",
            "location": 598,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "smoke_test_app": []
            }
        },
        "test_redeploy_view_deleted": {
            "name": "test_redeploy_view_deleted",
            "location": 607,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "smoke_test_app": []
            }
        },
        "retry._create_wrapped_retry_function": {
            "name": "_create_wrapped_retry_function",
            "location": 26,
            "return": [
                "str",
                "Sequence",
                "Tuple[int]"
            ],
            "arguments": {
                "function": [
                    "Callable",
                    "bool",
                    "Callable[..., T]",
                    "float",
                    "Exception"
                ]
            }
        },
        "SmokeTestApplication.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "deployed_values": [
                    "str",
                    "bool"
                ],
                "stage_name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "app_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "app_dir": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None",
                    "Dict[cmk.utils.type_defs.HostName, str]",
                    "dict[cmk.utils.type_defs.HostName, str]"
                ],
                "region": [
                    "str",
                    "bool"
                ]
            }
        },
        "SmokeTestApplication.url": {
            "name": "url",
            "location": 65,
            "return": [
                "str",
                "Iterable[int]",
                "Optional[str]",
                "Callable",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmokeTestApplication.rest_api_id": {
            "name": "rest_api_id",
            "location": 74,
            "return": [
                "int",
                "str",
                "Dict[str, Any]",
                "Dict[Tuple[str, str], Tuple[float, float]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmokeTestApplication.websocket_api_id": {
            "name": "websocket_api_id",
            "location": 79,
            "return": [
                "int",
                "str",
                "Dict[str, Any]",
                "Dict[Tuple[str, str], Tuple[float, float]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmokeTestApplication.websocket_connect_url": {
            "name": "websocket_connect_url",
            "location": 84,
            "return": [
                "str",
                "Iterable[int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmokeTestApplication.get_json": {
            "name": "get_json",
            "location": 95,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bool",
                    "float",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "SmokeTestApplication._get_json": {
            "name": "_get_json",
            "location": 101,
            "return": [
                "int",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "SmokeTestApplication.get_response": {
            "name": "get_response",
            "location": 109,
            "return": [
                "Dict[str, Any]",
                "str",
                "requests.Response"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Optional[dict]",
                    "None",
                    "Mapping[str, str]",
                    "typing.Mapping"
                ],
                "headers": [
                    "str",
                    "None",
                    "dict",
                    "Optional[dict]",
                    "dict[, ]",
                    "Mapping[str, str]",
                    "typing.Mapping"
                ]
            }
        },
        "SmokeTestApplication._send_request": {
            "name": "_send_request",
            "location": 115,
            "return": [
                "dict",
                "Dict[str, Union[int, str]]",
                "Optional[Dict[str, Any]]",
                "Optional[Dict[str, str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "http_method": [
                    "dict[, ]",
                    "Optional[dict]",
                    "str",
                    "None",
                    "bytes",
                    "dict",
                    "Optional[bytes]",
                    "Optional[str]"
                ],
                "url": [
                    "dict[, ]",
                    "Optional[dict]",
                    "str",
                    "None",
                    "bytes",
                    "dict",
                    "Optional[bytes]",
                    "Optional[str]"
                ],
                "headers": [
                    "Optional[str]",
                    "None",
                    "Dict[str, Any]",
                    "str",
                    "float",
                    "Optional[List[str]]",
                    "dict[str, typing.Any]",
                    "Optional[List[Any]]",
                    "list[str]"
                ],
                "data": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "list",
                    "list[]",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]"
                ]
            }
        },
        "SmokeTestApplication.post_response": {
            "name": "post_response",
            "location": 127,
            "return": [
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "dict[, ]",
                    "Optional[dict]",
                    "str",
                    "None",
                    "bytes",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "requests.Response",
                    "dict"
                ],
                "headers": [
                    "None",
                    "Optional[dict]",
                    "str",
                    "dict[, ]",
                    "bytes",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "requests.Response",
                    "dict"
                ],
                "data": [
                    "None",
                    "Optional[dict]",
                    "str",
                    "dict[, ]",
                    "bytes",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "requests.Response",
                    "dict"
                ]
            }
        },
        "SmokeTestApplication.put_response": {
            "name": "put_response",
            "location": 134,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]",
                "dict",
                "str",
                "Dict[str, Union[str, int]]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bool"
                ]
            }
        },
        "SmokeTestApplication.options_response": {
            "name": "options_response",
            "location": 141,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, Union[str, int]]",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bool"
                ]
            }
        },
        "SmokeTestApplication.redeploy_once": {
            "name": "redeploy_once",
            "location": 147,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmokeTestApplication._wait_for_stablize": {
            "name": "_wait_for_stablize",
            "location": 164,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "retry._create_wrapped_retry_function._wrapped_with_retry": {
            "name": "_wrapped_with_retry",
            "location": 27,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {}
        }
    },
    "chalice-master/tests/aws/test_websockets.py": {
        "retry": {
            "name": "retry",
            "location": 23,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "max_attempts": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "delay": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_create_ws_connection": {
            "name": "_create_ws_connection",
            "location": 37,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "url": [
                    "str",
                    "int"
                ],
                "attempts": [
                    "int",
                    "str",
                    "float",
                    "Set[str]"
                ],
                "delay": [
                    "int",
                    "str",
                    "float",
                    "Set[str]"
                ]
            }
        },
        "_inject_app_name": {
            "name": "_inject_app_name",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "dirname": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "_deploy_app": {
            "name": "_deploy_app",
            "location": 57,
            "return": [
                "SmokeTestApplication",
                "Callable",
                "str",
                "bool",
                "List[dict]",
                "int",
                "float"
            ],
            "arguments": {
                "temp_dirname": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_deploy_with_retries": {
            "name": "_deploy_with_retries",
            "location": 78,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "deployer": [
                    "dict",
                    "config.ConfigFile",
                    "str"
                ],
                "config": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "config.ConfigFile"
                ]
            }
        },
        "_get_error_code_from_exception": {
            "name": "_get_error_code_from_exception",
            "location": 91,
            "return": [
                "None",
                "bool",
                "Union[str, List[str]]"
            ],
            "arguments": {
                "exception": [
                    "str",
                    "Exception",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "_delete_app": {
            "name": "_delete_app",
            "location": 98,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "application": [
                    "bool"
                ],
                "temp_dirname": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "smoke_test_app_ws": {
            "name": "smoke_test_app_ws",
            "location": 168,
            "return": [
                "",
                "typing.Generator[dict[str, str]]"
            ],
            "arguments": {
                "tmpdir_factory": [
                    "str",
                    "bytes"
                ]
            }
        },
        "_create_dynamodb_table": {
            "name": "_create_dynamodb_table",
            "location": 183,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "table_name": [
                    "str"
                ],
                "temp_dirname": [
                    "dict[, ]",
                    "dict",
                    "int",
                    "Optional[int]",
                    "str",
                    "None",
                    "List[str]",
                    "list[str]",
                    "Optional[Dict]",
                    "list[]",
                    "Optional[Iterable[str]]",
                    "property",
                    "list"
                ]
            }
        },
        "_delete_dynamodb_table": {
            "name": "_delete_dynamodb_table",
            "location": 208,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "table_name": [
                    "str"
                ],
                "temp_dirname": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "List[str]",
                    "list[str]",
                    "Callable",
                    "typing.Callable[, ]",
                    "set",
                    "set[]"
                ]
            }
        },
        "counter": {
            "name": "counter",
            "location": 233,
            "return": [
                "",
                "typing.Generator[int]"
            ],
            "arguments": {}
        },
        "get_numbers_from_dynamodb": {
            "name": "get_numbers_from_dynamodb",
            "location": 258,
            "return": [
                "list[int]",
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "temp_dirname": [
                    "bool",
                    "str",
                    "list[]",
                    "list",
                    "int"
                ]
            }
        },
        "get_errors_from_dynamodb": {
            "name": "get_errors_from_dynamodb",
            "location": 276,
            "return": [
                "None",
                "type",
                "Tuple[List[str], Optional[str]]",
                "List[str]"
            ],
            "arguments": {
                "temp_dirname": [
                    "int"
                ]
            }
        },
        "find_skips_in_seq": {
            "name": "find_skips_in_seq",
            "location": 287,
            "return": [
                "list[tuple[typing.Union[int,typing.Text]]]",
                "str",
                "bool"
            ],
            "arguments": {
                "numbers": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_websocket_redployment_does_not_lose_messages": {
            "name": "test_websocket_redployment_does_not_lose_messages",
            "location": 306,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "smoke_test_app_ws": [
                    "str"
                ]
            }
        },
        "retry._create_wrapped_retry_function": {
            "name": "_create_wrapped_retry_function",
            "location": 24,
            "return": [
                "str",
                "Sequence",
                "Tuple[int]"
            ],
            "arguments": {
                "function": [
                    "Callable",
                    "bool",
                    "Callable[..., T]",
                    "float",
                    "Exception"
                ]
            }
        },
        "SmokeTestApplication.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "deployed_values": [
                    "str",
                    "bool"
                ],
                "stage_name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "app_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "app_dir": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None",
                    "Dict[cmk.utils.type_defs.HostName, str]",
                    "dict[cmk.utils.type_defs.HostName, str]"
                ],
                "region": [
                    "str",
                    "bool"
                ]
            }
        },
        "SmokeTestApplication.websocket_api_id": {
            "name": "websocket_api_id",
            "location": 128,
            "return": [
                "int",
                "str",
                "Dict[str, Any]",
                "Dict[Tuple[str, str], Tuple[float, float]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmokeTestApplication.websocket_connect_url": {
            "name": "websocket_connect_url",
            "location": 133,
            "return": [
                "str",
                "Iterable[int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmokeTestApplication.websocket_message_handler_arn": {
            "name": "websocket_message_handler_arn",
            "location": 144,
            "return": [
                "int",
                "str",
                "List[int]",
                "Dict[str, Any]",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmokeTestApplication.region": {
            "name": "region",
            "location": 149,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmokeTestApplication.redeploy_once": {
            "name": "redeploy_once",
            "location": 152,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.__init__": {
            "name": "__init__",
            "location": 218,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "int",
                    "float",
                    "bool"
                ],
                "delay": [
                    "float",
                    "int",
                    "bool"
                ]
            }
        },
        "Task.run": {
            "name": "run",
            "location": 224,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.stop": {
            "name": "stop",
            "location": 229,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CountingMessageSender.__init__": {
            "name": "__init__",
            "location": 243,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "ws": [
                    "int",
                    "float",
                    "bool"
                ],
                "counter": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "CountingMessageSender.send": {
            "name": "send",
            "location": 248,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CountingMessageSender.last_sent": {
            "name": "last_sent",
            "location": 254,
            "return": [
                "Optional[Union[str, Any]]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "retry._create_wrapped_retry_function._wrapped_with_retry": {
            "name": "_wrapped_with_retry",
            "location": 25,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {}
        }
    },
    "chalice-master/tests/aws/__init__.py": {},
    "chalice-master/tests/aws/testapp/app-redeploy.py": {
        "index": {
            "name": "index",
            "location": 18,
            "return": [
                "dict[typing.Text, typing.Text]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "nested_route": {
            "name": "nested_route",
            "location": 24,
            "return": [
                "bool",
                "dict[typing.Text, bool]"
            ],
            "arguments": {}
        },
        "multiple_methods": {
            "name": "multiple_methods",
            "location": 37,
            "return": [
                "str",
                "dict[typing.Text, ]"
            ],
            "arguments": {}
        },
        "redeploy": {
            "name": "redeploy",
            "location": 44,
            "return": [
                "bool",
                "dict[typing.Text, bool]"
            ],
            "arguments": {}
        }
    },
    "chalice-master/tests/aws/testapp/app.py": {
        "dummy_auth": {
            "name": "dummy_auth",
            "location": 27,
            "return": [
                "AuthResponse",
                "str",
                "Sequence[int]"
            ],
            "arguments": {
                "auth_request": [
                    "Union[dict, list]",
                    "dict[, ]",
                    "str",
                    "dict",
                    "list[]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "index": {
            "name": "index",
            "location": 40,
            "return": [
                "dict[typing.Text, typing.Text]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "nested_route": {
            "name": "nested_route",
            "location": 45,
            "return": [
                "bool",
                "dict[typing.Text, bool]"
            ],
            "arguments": {}
        },
        "supports_path_params": {
            "name": "supports_path_params",
            "location": 50,
            "return": [
                "str",
                "dict[typing.Text, typing.Union[str,typing.Iterable[str]]]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "single_doc": {
            "name": "single_doc",
            "location": 55,
            "return": [
                "dict[typing.Text, typing.Text]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "multi_doc": {
            "name": "multi_doc",
            "location": 61,
            "return": [
                "dict[typing.Text, typing.Text]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "supports_only_post": {
            "name": "supports_only_post",
            "location": 70,
            "return": [
                "bool",
                "dict[typing.Text, bool]"
            ],
            "arguments": {}
        },
        "supports_only_put": {
            "name": "supports_only_put",
            "location": 75,
            "return": [
                "bool",
                "dict[typing.Text, bool]"
            ],
            "arguments": {}
        },
        "supports_post_body_as_json": {
            "name": "supports_post_body_as_json",
            "location": 80,
            "return": [
                "dict[typing.Text, ]",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "multiple_methods": {
            "name": "multiple_methods",
            "location": 86,
            "return": [
                "str",
                "dict[typing.Text, ]"
            ],
            "arguments": {}
        },
        "bad_request_error": {
            "name": "bad_request_error",
            "location": 91,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "not_found_error": {
            "name": "not_found_error",
            "location": 96,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "raise_arbitrary_error": {
            "name": "raise_arbitrary_error",
            "location": 101,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "form_encoded": {
            "name": "form_encoded",
            "location": 107,
            "return": [
                "dict[typing.Text, ]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "json_only": {
            "name": "json_only",
            "location": 115,
            "return": [
                "bool",
                "dict[typing.Text, bool]"
            ],
            "arguments": {}
        },
        "supports_cors": {
            "name": "supports_cors",
            "location": 120,
            "return": [
                "bool",
                "dict[typing.Text, bool]"
            ],
            "arguments": {}
        },
        "supports_custom_cors": {
            "name": "supports_custom_cors",
            "location": 132,
            "return": [
                "bool",
                "dict[typing.Text, bool]"
            ],
            "arguments": {}
        },
        "todict": {
            "name": "todict",
            "location": 137,
            "return": [
                "str",
                "Mapping[str, Any]",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "multifile": {
            "name": "multifile",
            "location": 142,
            "return": [
                "dict[typing.Text, ]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "custom_response": {
            "name": "custom_response",
            "location": 148,
            "return": [
                "Response",
                "Dict[str, Any]",
                "bool",
                "dict"
            ],
            "arguments": {}
        },
        "api_key_required": {
            "name": "api_key_required",
            "location": 160,
            "return": [
                "dict[typing.Text, bool]",
                "bool",
                "Union[str, Pattern]"
            ],
            "arguments": {}
        },
        "binary_round_trip": {
            "name": "binary_round_trip",
            "location": 166,
            "return": [
                "Response",
                "Dict[str, Any]",
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "custom_binary_round_trip": {
            "name": "custom_binary_round_trip",
            "location": 177,
            "return": [
                "Response",
                "Dict[str, Any]",
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "binary_response": {
            "name": "binary_response",
            "location": 187,
            "return": [
                "Response",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "shared_get": {
            "name": "shared_get",
            "location": 197,
            "return": [
                "dict[typing.Text, typing.Text]",
                "str",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "shared_post": {
            "name": "shared_post",
            "location": 202,
            "return": [
                "dict[typing.Text, typing.Text]",
                "dict",
                "Mapping[str, Any]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "builtin_auth": {
            "name": "builtin_auth",
            "location": 207,
            "return": [
                "dict[typing.Text, bool]",
                "bool",
                "tuple"
            ],
            "arguments": {}
        },
        "fake_profile_read_only": {
            "name": "fake_profile_read_only",
            "location": 215,
            "return": [
                "bool",
                "dict[typing.Text, bool]"
            ],
            "arguments": {}
        },
        "fake_profile_post": {
            "name": "fake_profile_post",
            "location": 221,
            "return": [
                "bool",
                "dict[typing.Text, bool]"
            ],
            "arguments": {}
        },
        "repr_raw_body": {
            "name": "repr_raw_body",
            "location": 226,
            "return": [
                "dict[typing.Text, ]",
                "List[str]",
                "int",
                "dict",
                "Optional[str]",
                "bytes",
                "Dict[int, Dict]"
            ],
            "arguments": {}
        },
        "connect": {
            "name": "connect",
            "location": 234,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "str"
                ]
            }
        },
        "message": {
            "name": "message",
            "location": 239,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "disconnect": {
            "name": "disconnect",
            "location": 245,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "str"
                ]
            }
        }
    },
    "chalice-master/tests/aws/testapp/chalicelib/__init__.py": {},
    "chalice-master/tests/aws/testwebsocketapp/app-redeploy.py": {
        "message": {
            "name": "message",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "chalice-master/tests/aws/testwebsocketapp/app.py": {
        "message": {
            "name": "message",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "chalice-master/tests/functional/conftest.py": {
        "ensure_no_local_config": {
            "name": "ensure_no_local_config",
            "location": 5,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "no_local_config": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "chalice-master/tests/functional/test_awsclient.py": {
        "create_policy_statement": {
            "name": "create_policy_statement",
            "location": 22,
            "return": [
                "str",
                "list[typing.Pattern]",
                "typing.Pattern",
                "int"
            ],
            "arguments": {
                "source_arn": [
                    "str",
                    "bool",
                    "int",
                    "list[int]",
                    "Optional[List[int]]",
                    "None"
                ],
                "service_name": [
                    "str",
                    "bool",
                    "int",
                    "list[int]",
                    "Optional[List[int]]",
                    "None"
                ],
                "statement_id": [
                    "str",
                    "bool",
                    "int",
                    "list[int]",
                    "Optional[List[int]]",
                    "None"
                ],
                "account_id": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "list[str]",
                    "Union[None, float, str]",
                    "float"
                ]
            }
        },
        "test_region_name_is_exposed": {
            "name": "test_region_name_is_exposed",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str",
                    "raiden.utils.Address"
                ]
            }
        },
        "test_deploy_rest_api": {
            "name": "test_deploy_rest_api",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "test_defaults_to_false_if_none_deploy_rest_api": {
            "name": "test_defaults_to_false_if_none_deploy_rest_api",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "test_put_role_policy": {
            "name": "test_put_role_policy",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_rest_api_exists": {
            "name": "test_rest_api_exists",
            "location": 85,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "test_rest_api_not_exists": {
            "name": "test_rest_api_not_exists",
            "location": 96,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_can_get_function_configuration": {
            "name": "test_can_get_function_configuration",
            "location": 109,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str",
                    "dict"
                ]
            }
        },
        "test_can_iterate_logs": {
            "name": "test_can_iterate_logs",
            "location": 125,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "test_can_provide_optional_start_time_iter_logs": {
            "name": "test_can_provide_optional_start_time_iter_logs",
            "location": 154,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "test_missing_log_messages_doesnt_fail": {
            "name": "test_missing_log_messages_doesnt_fail",
            "location": 185,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str",
                    "list"
                ]
            }
        },
        "test_can_call_filter_log_events": {
            "name": "test_can_call_filter_log_events",
            "location": 197,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "test_optional_kwarg_on_filter_logs_omitted": {
            "name": "test_optional_kwarg_on_filter_logs_omitted",
            "location": 228,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "test_missing_log_events_returns_empty_response": {
            "name": "test_missing_log_events_returns_empty_response",
            "location": 256,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str",
                    "list"
                ]
            }
        },
        "test_rule_arn_requires_expression_or_pattern": {
            "name": "test_rule_arn_requires_expression_or_pattern",
            "location": 269,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_get_sdk": {
            "name": "test_get_sdk",
            "location": 3039,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "dict",
                    "str"
                ]
            }
        },
        "test_import_rest_api": {
            "name": "test_import_rest_api",
            "location": 3053,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "test_update_api_from_swagger": {
            "name": "test_update_api_from_swagger",
            "location": 3068,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str",
                    "int"
                ]
            }
        },
        "test_update_rest_api": {
            "name": "test_update_rest_api",
            "location": 3083,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str",
                    "int"
                ]
            }
        },
        "test_can_get_or_create_rule_arn_with_pattern": {
            "name": "test_can_get_or_create_rule_arn_with_pattern",
            "location": 3100,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "test_can_get_or_create_rule_arn": {
            "name": "test_can_get_or_create_rule_arn",
            "location": 3117,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "test_can_connect_rule_to_lambda": {
            "name": "test_can_connect_rule_to_lambda",
            "location": 3137,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "test_add_permission_for_scheduled_event": {
            "name": "test_add_permission_for_scheduled_event",
            "location": 3149,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "test_skip_if_permission_already_granted": {
            "name": "test_skip_if_permission_already_granted",
            "location": 3171,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "test_can_delete_rule": {
            "name": "test_can_delete_rule",
            "location": 3201,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "test_can_connect_bucket_to_lambda_new_config": {
            "name": "test_can_connect_bucket_to_lambda_new_config",
            "location": 3214,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "test_can_connect_bucket_with_prefix_and_suffix": {
            "name": "test_can_connect_bucket_with_prefix_and_suffix",
            "location": 3236,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str",
                    "bytes"
                ]
            }
        },
        "test_can_merge_s3_notification_config": {
            "name": "test_can_merge_s3_notification_config",
            "location": 3272,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "test_can_replace_existing_config": {
            "name": "test_can_replace_existing_config",
            "location": 3300,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "test_add_permission_for_s3_event": {
            "name": "test_add_permission_for_s3_event",
            "location": 3326,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "test_skip_if_permission_already_granted_to_s3": {
            "name": "test_skip_if_permission_already_granted_to_s3",
            "location": 3346,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "test_can_disconnect_bucket_to_lambda_merged": {
            "name": "test_can_disconnect_bucket_to_lambda_merged",
            "location": 3376,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "test_can_disconnect_bucket_to_lambda_not_exists": {
            "name": "test_can_disconnect_bucket_to_lambda_not_exists",
            "location": 3404,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "test_add_permission_for_sns_publish": {
            "name": "test_add_permission_for_sns_publish",
            "location": 3432,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "test_subscribe_function_to_arn": {
            "name": "test_subscribe_function_to_arn",
            "location": 3452,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "test_can_unsubscribe_from_topic": {
            "name": "test_can_unsubscribe_from_topic",
            "location": 3469,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str",
                    "int",
                    "list",
                    "dict"
                ]
            }
        },
        "test_subscription_exists": {
            "name": "test_subscription_exists",
            "location": 3489,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "topic_arn": [
                    "str",
                    "Optional[\"Frame\"]",
                    "None"
                ],
                "function_arn": [
                    "str",
                    "Optional[\"Frame\"]",
                    "None"
                ],
                "is_verified": [
                    "str",
                    "Optional[int]",
                    "int",
                    "Callable[[Dict], None]",
                    "None",
                    "Optional[str]",
                    "typing.Callable[dict[, ], None]"
                ]
            }
        },
        "test_subscription_not_exists": {
            "name": "test_subscription_not_exists",
            "location": 3519,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "test_can_remove_lambda_sns_permission": {
            "name": "test_can_remove_lambda_sns_permission",
            "location": 3534,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "test_can_remove_s3_permission": {
            "name": "test_can_remove_s3_permission",
            "location": 3559,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "Dict[str, Any]",
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "test_can_create_kinesis_event_source": {
            "name": "test_can_create_kinesis_event_source",
            "location": 3584,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str",
                    "dict",
                    "int",
                    "list"
                ]
            }
        },
        "test_can_create_kinesis_event_source_batching_window": {
            "name": "test_can_create_kinesis_event_source_batching_window",
            "location": 3607,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str",
                    "int",
                    "list",
                    "dict"
                ]
            }
        },
        "test_can_create_sqs_event_source": {
            "name": "test_can_create_sqs_event_source",
            "location": 3634,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str",
                    "dict",
                    "int",
                    "list"
                ]
            }
        },
        "test_can_retry_create_sqs_event_source": {
            "name": "test_can_retry_create_sqs_event_source",
            "location": 3658,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "test_can_delete_sqs_event_source": {
            "name": "test_can_delete_sqs_event_source",
            "location": 3691,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "test_can_retry_delete_event_source": {
            "name": "test_can_retry_delete_event_source",
            "location": 3705,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "test_only_retry_settling_errors": {
            "name": "test_only_retry_settling_errors",
            "location": 3726,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "test_can_retry_update_event_source": {
            "name": "test_can_retry_update_event_source",
            "location": 3741,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str",
                    "dict",
                    "int",
                    "list"
                ]
            }
        },
        "test_can_retry_update_event_source_batching_window": {
            "name": "test_can_retry_update_event_source_batching_window",
            "location": 3757,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str",
                    "int",
                    "list",
                    "dict"
                ]
            }
        },
        "test_verify_event_source_current": {
            "name": "test_verify_event_source_current",
            "location": 3780,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str",
                    "dict"
                ],
                "resource_name": [
                    "str",
                    "bool"
                ],
                "service_name": [
                    "str",
                    "bool"
                ],
                "is_verified": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_verify_event_source_arn_current": {
            "name": "test_verify_event_source_arn_current",
            "location": 3805,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str",
                    "int",
                    "list",
                    "dict"
                ]
            }
        },
        "test_event_source_uuid_does_not_exist": {
            "name": "test_event_source_uuid_does_not_exist",
            "location": 3830,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "dict",
                    "str"
                ]
            }
        },
        "test_event_source_does_not_exist": {
            "name": "test_event_source_does_not_exist",
            "location": 3848,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "dict",
                    "str"
                ]
            }
        },
        "test_can_update_lambda_event_source": {
            "name": "test_can_update_lambda_event_source",
            "location": 3864,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "TestLambdaLayer.test_layer_exists": {
            "name": "test_layer_exists",
            "location": 277,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "TestLambdaLayer.test_layer_exists_not_found_error": {
            "name": "test_layer_exists_not_found_error",
            "location": 286,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[List[str]]",
                    "dict"
                ]
            }
        },
        "TestLambdaLayer.test_layer_delete_not_found_error": {
            "name": "test_layer_delete_not_found_error",
            "location": 295,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "Dict[str, Any]",
                    "str",
                    "dict",
                    "List[List[int]]"
                ]
            }
        },
        "TestLambdaLayer.test_publish_layer_propagate_error": {
            "name": "test_publish_layer_propagate_error",
            "location": 305,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "Dict[str, Any]",
                    "List[List[int]]"
                ]
            }
        },
        "TestLambdaLayer.test_can_publish_layer": {
            "name": "test_can_publish_layer",
            "location": 322,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "TestLambdaFunctionExists.test_can_query_lambda_function_exists": {
            "name": "test_can_query_lambda_function_exists",
            "location": 337,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "float",
                    "dict"
                ]
            }
        },
        "TestLambdaFunctionExists.test_can_query_lambda_function_does_not_exist": {
            "name": "test_can_query_lambda_function_does_not_exist",
            "location": 348,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "float",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestLambdaFunctionExists.test_lambda_function_bad_error_propagates": {
            "name": "test_lambda_function_bad_error_propagates",
            "location": 360,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "float"
                ]
            }
        },
        "TestDeleteLambdaFunction.test_lambda_delete_function": {
            "name": "test_lambda_delete_function",
            "location": 375,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "dict",
                    "bytes"
                ]
            }
        },
        "TestDeleteLambdaFunction.test_lambda_delete_function_already_deleted": {
            "name": "test_lambda_delete_function_already_deleted",
            "location": 383,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "bytes",
                    "float"
                ]
            }
        },
        "TestDeleteRestAPI.test_rest_api_delete": {
            "name": "test_rest_api_delete",
            "location": 396,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "int"
                ]
            }
        },
        "TestDeleteRestAPI.test_rest_api_delete_already_deleted": {
            "name": "test_rest_api_delete_already_deleted",
            "location": 404,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "IO",
                    "Tuple[int, int]"
                ]
            }
        },
        "TestGetDomainName.test_get_domain_name": {
            "name": "test_get_domain_name",
            "location": 417,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "Optional[datetime.datetime]",
                    "datetime.datetime",
                    "Optional[str]"
                ]
            }
        },
        "TestGetDomainName.test_get_domain_name_failed": {
            "name": "test_get_domain_name_failed",
            "location": 444,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "Optional[\"LocalizedString\"]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TestGetDomainName.test_domain_name_exists": {
            "name": "test_domain_name_exists",
            "location": 456,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "Optional[datetime.datetime]",
                    "Optional[str]",
                    "datetime.datetime"
                ]
            }
        },
        "TestGetDomainName.test_domain_name_does_not_exist": {
            "name": "test_domain_name_does_not_exist",
            "location": 482,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "float",
                    "dict"
                ]
            }
        },
        "TestGetDomainName.test_domain_name_exists_v2": {
            "name": "test_domain_name_exists_v2",
            "location": 493,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "TestGetDomainName.test_domain_name_does_not_exist_v2": {
            "name": "test_domain_name_does_not_exist_v2",
            "location": 518,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "Optional[str]",
                    "float"
                ]
            }
        },
        "TestGetApiMapping.test_api_mapping_exists": {
            "name": "test_api_mapping_exists",
            "location": 533,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TestGetApiMapping.test_api_mapping_not_exists": {
            "name": "test_api_mapping_not_exists",
            "location": 551,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "dict"
                ]
            }
        },
        "TestGetApiMapping.test_api_mapping_does_not_exist": {
            "name": "test_api_mapping_does_not_exist",
            "location": 569,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "float"
                ]
            }
        },
        "TestCreateApiMapping.test_create_api_mapping": {
            "name": "test_create_api_mapping",
            "location": 585,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "Optional[int]",
                    "Type[Any]"
                ]
            }
        },
        "TestCreateApiMapping.test_create_api_mapping_with_path": {
            "name": "test_create_api_mapping_with_path",
            "location": 613,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "Type[Any]"
                ]
            }
        },
        "TestCreateBasePathMapping.test_create_base_path_mapping": {
            "name": "test_create_base_path_mapping",
            "location": 643,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TestCreateBasePathMapping.test_create_base_path_mapping_with_path": {
            "name": "test_create_base_path_mapping_with_path",
            "location": 670,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "TestCreateBasePathMapping.test_create_base_path_mapping_failed": {
            "name": "test_create_base_path_mapping_failed",
            "location": 697,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TestCreateDomainName.test_create_domain_name_with_unsupported_protocol": {
            "name": "test_create_domain_name_with_unsupported_protocol",
            "location": 728,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "bool",
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "None"
                ]
            }
        },
        "TestCreateDomainName.test_create_rest_api_domain_name": {
            "name": "test_create_rest_api_domain_name",
            "location": 743,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TestCreateDomainName.test_create_rest_api_domain_name_no_regional": {
            "name": "test_create_rest_api_domain_name_no_regional",
            "location": 794,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "float"
                ]
            }
        },
        "TestCreateDomainName.test_create_websocket_api_custom_domain": {
            "name": "test_create_websocket_api_custom_domain",
            "location": 846,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "float"
                ]
            }
        },
        "TestCreateDomainName.test_get_custom_domain_params_v2": {
            "name": "test_get_custom_domain_params_v2",
            "location": 901,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "TestCreateDomainName.test_create_domain_name_max_retries": {
            "name": "test_create_domain_name_max_retries",
            "location": 930,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "TestCreateDomainName.test_create_domain_name_v2_max_retries": {
            "name": "test_create_domain_name_v2_max_retries",
            "location": 963,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "TestUpdateDomainName.test_update_domain_name_websocket": {
            "name": "test_update_domain_name_websocket",
            "location": 1000,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestUpdateDomainName.test_update_domain_name_failed": {
            "name": "test_update_domain_name_failed",
            "location": 1050,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "TestUpdateDomainName.test_update_domain_v2_name_max_retries": {
            "name": "test_update_domain_v2_name_max_retries",
            "location": 1076,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "TestUpdateDomainName.test_unsupported_protocol": {
            "name": "test_unsupported_protocol",
            "location": 1111,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "TestUpdateDomainName.test_get_custom_domain_patch_operations": {
            "name": "test_get_custom_domain_patch_operations",
            "location": 1123,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "TestUpdateDomainName.test_get_custom_domain_patch_operations_regional": {
            "name": "test_get_custom_domain_patch_operations_regional",
            "location": 1143,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "TestUpdateDomainName.test_update_domain_name_http_protocol_regional": {
            "name": "test_update_domain_name_http_protocol_regional",
            "location": 1166,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "TestUpdateDomainName.test_update_domain_name_http_protocol": {
            "name": "test_update_domain_name_http_protocol",
            "location": 1239,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "TestUpdateDomainName.test_update_domain_name_govcloud": {
            "name": "test_update_domain_name_govcloud",
            "location": 1312,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "int",
                    "list",
                    "Dict[Any, Dict[str, Any]]",
                    "Optional[str]"
                ]
            }
        },
        "TestUpdateDomainName._setup_expected_update_calls": {
            "name": "_setup_expected_update_calls",
            "location": 1337,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "apig": [
                    "bool",
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "TestUpdateDomainName.test_update_domain_name_max_retries": {
            "name": "test_update_domain_name_max_retries",
            "location": 1383,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "TestUpdateDomainName.test_update_resource_tags": {
            "name": "test_update_resource_tags",
            "location": 1410,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestDeleteDomainName.test_delete_domain_name": {
            "name": "test_delete_domain_name",
            "location": 1444,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "TestDeleteDomainName.test_delete_domain_name_failed": {
            "name": "test_delete_domain_name_failed",
            "location": 1454,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "float"
                ]
            }
        },
        "TestDeleteDomainName.test_delete_domain_name_max_retries": {
            "name": "test_delete_domain_name_max_retries",
            "location": 1468,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TestDeleteApiMapping.test_delete_api_mapping": {
            "name": "test_delete_api_mapping",
            "location": 1484,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "TestDeleteApiMapping.test_delete_api_mapping_failed": {
            "name": "test_delete_api_mapping_failed",
            "location": 1500,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "list"
                ]
            }
        },
        "TestGetRestAPI.test_rest_api_exists": {
            "name": "test_rest_api_exists",
            "location": 1521,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "dict"
                ]
            }
        },
        "TestGetRestAPI.test_rest_api_does_not_exist": {
            "name": "test_rest_api_does_not_exist",
            "location": 1535,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "Optional[List[str]]",
                    "str"
                ]
            }
        },
        "TestGetRoleArn.test_get_role_arn_for_name_found": {
            "name": "test_get_role_arn_for_name_found",
            "location": 1550,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "float",
                    "Optional[int]"
                ]
            }
        },
        "TestGetRoleArn.test_got_role_arn_not_found_raises_value_error": {
            "name": "test_got_role_arn_not_found_raises_value_error",
            "location": 1569,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "float",
                    "list"
                ]
            }
        },
        "TestGetRoleArn.test_unexpected_error_is_propagated": {
            "name": "test_unexpected_error_is_propagated",
            "location": 1579,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "TestGetRole.test_get_role_success": {
            "name": "test_get_role_success",
            "location": 1591,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "dict"
                ]
            }
        },
        "TestGetRole.test_get_role_raises_exception_when_no_exists": {
            "name": "test_get_role_raises_exception_when_no_exists",
            "location": 1609,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "float"
                ]
            }
        },
        "TestCreateRole.test_create_role": {
            "name": "test_create_role",
            "location": 1621,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "dict"
                ]
            }
        },
        "TestCreateRole.test_create_role_raises_error_on_failure": {
            "name": "test_create_role_raises_error_on_failure",
            "location": 1644,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "dict"
                ]
            }
        },
        "TestInvokeLambdaFunction.test_invoke_no_payload_no_context": {
            "name": "test_invoke_no_payload_no_context",
            "location": 1672,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "dict"
                ]
            }
        },
        "TestInvokeLambdaFunction.test_invoke_payload_provided": {
            "name": "test_invoke_payload_provided",
            "location": 1682,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "TestInvokeLambdaFunction.test_invoke_read_timeout_raises_correct_error": {
            "name": "test_invoke_read_timeout_raises_correct_error",
            "location": 1693,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "list"
                ]
            }
        },
        "TestCreateLambdaFunction.test_create_function_succeeds_first_try": {
            "name": "test_create_function_succeeds_first_try",
            "location": 1712,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "List[List[int]]"
                ]
            }
        },
        "TestCreateLambdaFunction.test_create_function_with_non_python2_runtime": {
            "name": "test_create_function_with_non_python2_runtime",
            "location": 1727,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "TestCreateLambdaFunction.test_create_function_wait_for_active_state": {
            "name": "test_create_function_wait_for_active_state",
            "location": 1742,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "dict"
                ],
                "monkeypatch": []
            }
        },
        "TestCreateLambdaFunction.test_create_function_with_environment_variables": {
            "name": "test_create_function_with_environment_variables",
            "location": 1766,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "dict"
                ]
            }
        },
        "TestCreateLambdaFunction.test_create_function_with_tags": {
            "name": "test_create_function_with_tags",
            "location": 1783,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "dict"
                ]
            }
        },
        "TestCreateLambdaFunction.test_create_function_with_timeout": {
            "name": "test_create_function_with_timeout",
            "location": 1799,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "TestCreateLambdaFunction.test_create_function_with_memory_size": {
            "name": "test_create_function_with_memory_size",
            "location": 1815,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "List[List[int]]",
                    "str",
                    "dict"
                ]
            }
        },
        "TestCreateLambdaFunction.test_create_function_with_vpc_config": {
            "name": "test_create_function_with_vpc_config",
            "location": 1831,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "TestCreateLambdaFunction.test_create_function_with_layers": {
            "name": "test_create_function_with_layers",
            "location": 1852,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "List[List[int]]",
                    "Mapping[str, Any]",
                    "str"
                ]
            }
        },
        "TestCreateLambdaFunction.test_create_function_is_retried_and_succeeds": {
            "name": "test_create_function_is_retried_and_succeeds",
            "location": 1870,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestCreateLambdaFunction.test_create_function_retries_on_kms_errors": {
            "name": "test_create_function_retries_on_kms_errors",
            "location": 1897,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "TestCreateLambdaFunction.test_retry_happens_on_insufficient_permissions": {
            "name": "test_retry_happens_on_insufficient_permissions",
            "location": 1929,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "TestCreateLambdaFunction.test_create_function_fails_after_max_retries": {
            "name": "test_create_function_fails_after_max_retries",
            "location": 1958,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "TestCreateLambdaFunction.test_can_pass_python_runtime": {
            "name": "test_can_pass_python_runtime",
            "location": 1983,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TestCreateLambdaFunction.test_create_function_propagates_unknown_error": {
            "name": "test_create_function_propagates_unknown_error",
            "location": 1998,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "TestCreateLambdaFunction.test_can_provide_tags": {
            "name": "test_can_provide_tags",
            "location": 2018,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestCreateLambdaFunction.test_raises_large_deployment_error_for_connection_error": {
            "name": "test_raises_large_deployment_error_for_connection_error",
            "location": 2038,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "List[List[int]]"
                ]
            }
        },
        "TestCreateLambdaFunction.test_no_raise_large_deployment_error_when_small_deployment_size": {
            "name": "test_no_raise_large_deployment_error_when_small_deployment_size",
            "location": 2061,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "TestCreateLambdaFunction.test_raises_large_deployment_error_request_entity_to_large": {
            "name": "test_raises_large_deployment_error_request_entity_to_large",
            "location": 2083,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "dict"
                ]
            }
        },
        "TestCreateLambdaFunction.test_raises_large_deployment_error_for_too_large_unzip": {
            "name": "test_raises_large_deployment_error_for_too_large_unzip",
            "location": 2103,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "TestUpdateLambdaFunction.test_always_update_function_code": {
            "name": "test_always_update_function_code",
            "location": 2130,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "TestUpdateLambdaFunction.test_update_function_code_with_runtime": {
            "name": "test_update_function_code_with_runtime",
            "location": 2139,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "TestUpdateLambdaFunction.test_update_function_code_with_environment_vars": {
            "name": "test_update_function_code_with_environment_vars",
            "location": 2151,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "TestUpdateLambdaFunction.test_update_function_code_with_timeout": {
            "name": "test_update_function_code_with_timeout",
            "location": 2165,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "TestUpdateLambdaFunction.test_update_function_code_with_memory": {
            "name": "test_update_function_code_with_memory",
            "location": 2177,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "TestUpdateLambdaFunction.test_update_function_with_vpc_config": {
            "name": "test_update_function_with_vpc_config",
            "location": 2189,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "TestUpdateLambdaFunction.test_update_function_with_layers_config": {
            "name": "test_update_function_with_layers_config",
            "location": 2208,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "TestUpdateLambdaFunction.test_update_function_with_adding_tags": {
            "name": "test_update_function_with_adding_tags",
            "location": 2224,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "TestUpdateLambdaFunction.test_update_function_with_updating_tags": {
            "name": "test_update_function_with_updating_tags",
            "location": 2242,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "TestUpdateLambdaFunction.test_update_function_with_removing_tags": {
            "name": "test_update_function_with_removing_tags",
            "location": 2260,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "TestUpdateLambdaFunction.test_update_function_with_no_tag_updates_needed": {
            "name": "test_update_function_with_no_tag_updates_needed",
            "location": 2279,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "TestUpdateLambdaFunction.test_update_function_with_iam_role": {
            "name": "test_update_function_with_iam_role",
            "location": 2295,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "TestUpdateLambdaFunction.test_update_function_is_retried_and_succeeds": {
            "name": "test_update_function_is_retried_and_succeeds",
            "location": 2312,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "TestUpdateLambdaFunction.test_update_function_fails_after_max_retries": {
            "name": "test_update_function_fails_after_max_retries",
            "location": 2340,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "Match[str]",
                    "Dict[str, Tuple[str, str]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestUpdateLambdaFunction.test_raises_large_deployment_error_for_connection_error": {
            "name": "test_raises_large_deployment_error_for_connection_error",
            "location": 2361,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "List[List[int]]"
                ]
            }
        },
        "TestUpdateLambdaFunction.test_no_raise_large_deployment_error_when_small_deployment_size": {
            "name": "test_no_raise_large_deployment_error_when_small_deployment_size",
            "location": 2378,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "TestUpdateLambdaFunction.test_raises_large_deployment_error_request_entity_to_large": {
            "name": "test_raises_large_deployment_error_request_entity_to_large",
            "location": 2393,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestUpdateLambdaFunction.test_raises_large_deployment_error_for_too_large_unzip": {
            "name": "test_raises_large_deployment_error_for_too_large_unzip",
            "location": 2405,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "TestUpdateLambdaFunction.test_update_function_waits_for_active": {
            "name": "test_update_function_waits_for_active",
            "location": 2417,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ],
                "monkeypatch": []
            }
        },
        "TestUpdateLambdaFunction.test_update_function_config_waits_for_active": {
            "name": "test_update_function_config_waits_for_active",
            "location": 2436,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ],
                "monkeypatch": []
            }
        },
        "TestPutFunctionConcurrency.test_put_function_concurrency": {
            "name": "test_put_function_concurrency",
            "location": 2460,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "TestDeleteFunctionConcurrency.test_delete_function_concurrency": {
            "name": "test_delete_function_concurrency",
            "location": 2471,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "TestCanDeleteRolePolicy.test_can_delete_role_policy": {
            "name": "test_can_delete_role_policy",
            "location": 2482,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestCanDeleteRole.test_can_delete_role": {
            "name": "test_can_delete_role",
            "location": 2493,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TestAddPermissionsForAPIGateway.should_call_add_permission": {
            "name": "should_call_add_permission",
            "location": 2512,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "lambda_stub": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "datetime.datetime",
                    "raiden.utils.ChainID"
                ],
                "statement_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "datetime.datetime",
                    "raiden.utils.ChainID"
                ]
            }
        },
        "TestAddPermissionsForAPIGateway.test_can_add_permission_for_apigateway_needed": {
            "name": "test_can_add_permission_for_apigateway_needed",
            "location": 2522,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestAddPermissionsForAPIGateway.test_can_add_permission_random_id_optional": {
            "name": "test_can_add_permission_random_id_optional",
            "location": 2533,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "list",
                    "dict"
                ]
            }
        },
        "TestAddPermissionsForAPIGateway.test_can_add_permission_for_apigateway_not_needed": {
            "name": "test_can_add_permission_for_apigateway_not_needed",
            "location": 2543,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "TestAddPermissionsForAPIGateway.test_can_add_permission_when_policy_does_not_exist": {
            "name": "test_can_add_permission_when_policy_does_not_exist",
            "location": 2602,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "TestAddPermissionsForAPIGatewayV2.should_call_add_permission": {
            "name": "should_call_add_permission",
            "location": 2618,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "lambda_stub": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "datetime.datetime",
                    "raiden.utils.ChainID"
                ],
                "statement_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "datetime.datetime",
                    "raiden.utils.ChainID"
                ]
            }
        },
        "TestAddPermissionsForAPIGatewayV2.test_can_add_permission_for_apigateway_v2_needed": {
            "name": "test_can_add_permission_for_apigateway_v2_needed",
            "location": 2628,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "TestAddPermissionsForAPIGatewayV2.test_can_add_permission_random_id_optional": {
            "name": "test_can_add_permission_random_id_optional",
            "location": 2640,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "list",
                    "dict"
                ]
            }
        },
        "TestAddPermissionsForAPIGatewayV2.test_can_add_permission_for_apigateway_v2_not_needed": {
            "name": "test_can_add_permission_for_apigateway_v2_not_needed",
            "location": 2650,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestAddPermissionsForAPIGatewayV2.test_can_add_permission_when_policy_does_not_exist": {
            "name": "test_can_add_permission_when_policy_does_not_exist",
            "location": 2709,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "TestWebsocketAPI.test_can_create_websocket_api": {
            "name": "test_can_create_websocket_api",
            "location": 2725,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TestWebsocketAPI.test_can_get_websocket_api": {
            "name": "test_can_get_websocket_api",
            "location": 2737,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "TestWebsocketAPI.test_does_return_none_on_websocket_api_missing": {
            "name": "test_does_return_none_on_websocket_api_missing",
            "location": 2757,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "Optional[List[str]]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "TestWebsocketAPI.test_can_check_get_websocket_api_exists": {
            "name": "test_can_check_get_websocket_api_exists",
            "location": 2768,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "list"
                ]
            }
        },
        "TestWebsocketAPI.test_can_check_get_websocket_api_not_exists": {
            "name": "test_can_check_get_websocket_api_not_exists",
            "location": 2778,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "list"
                ]
            }
        },
        "TestWebsocketAPI.test_can_delete_websocket_api": {
            "name": "test_can_delete_websocket_api",
            "location": 2791,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": []
            }
        },
        "TestWebsocketAPI.test_rest_api_delete_already_deleted": {
            "name": "test_rest_api_delete_already_deleted",
            "location": 2800,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "TestWebsocketAPI.test_can_create_integration": {
            "name": "test_can_create_integration",
            "location": 2811,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "TestWebsocketAPI.test_can_create_route": {
            "name": "test_can_create_route",
            "location": 2830,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "TestWebsocketAPI.test_can_delete_all_websocket_routes": {
            "name": "test_can_delete_all_websocket_routes",
            "location": 2846,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "TestWebsocketAPI.test_can_delete_all_websocket_integrations": {
            "name": "test_can_delete_all_websocket_integrations",
            "location": 2863,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "TestWebsocketAPI.test_can_deploy_websocket_api": {
            "name": "test_can_deploy_websocket_api",
            "location": 2880,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "int"
                ]
            }
        },
        "TestWebsocketAPI.test_can_get_routes": {
            "name": "test_can_get_routes",
            "location": 2892,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "TestWebsocketAPI.test_can_get_integrations": {
            "name": "test_can_get_integrations",
            "location": 2913,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "TestWebsocketAPI.test_can_create_stage": {
            "name": "test_can_create_stage",
            "location": 2946,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "TestAddPermissionsForAuthorizer.test_can_add_permission_for_authorizer": {
            "name": "test_can_add_permission_for_authorizer",
            "location": 2972,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "dict",
                    "float",
                    "raiden.utils.BlockTimeout"
                ]
            }
        },
        "TestAddPermissionsForAuthorizer.test_random_id_can_be_omitted": {
            "name": "test_random_id_can_be_omitted",
            "location": 2999,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "list",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestAddPermissionsForAuthorizer.test_value_error_raised_for_unknown_function": {
            "name": "test_value_error_raised_for_unknown_function",
            "location": 3021,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ]
            }
        }
    },
    "chalice-master/tests/functional/test_deployer.py": {
        "chalice_deployer": {
            "name": "chalice_deployer",
            "location": 27,
            "return": [
                "bool",
                "dict[, ]",
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {}
        },
        "app_only_packager": {
            "name": "app_only_packager",
            "location": 39,
            "return": [
                "tuple[]",
                "bool",
                "Optional[str]",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "layer_packager": {
            "name": "layer_packager",
            "location": 51,
            "return": [
                "tuple[]",
                "int",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "_create_app_structure": {
            "name": "_create_app_structure",
            "location": 62,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_can_create_deployment_package": {
            "name": "test_can_create_deployment_package",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "chalice_deployer": []
            }
        },
        "test_can_inject_latest_app": {
            "name": "test_can_inject_latest_app",
            "location": 83,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "chalice_deployer": [
                    "str"
                ]
            }
        },
        "test_zipfile_hash_only_based_on_contents": {
            "name": "test_zipfile_hash_only_based_on_contents",
            "location": 104,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "chalice_deployer": []
            }
        },
        "test_app_injection_still_compresses_file": {
            "name": "test_app_injection_still_compresses_file",
            "location": 128,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ],
                "chalice_deployer": []
            }
        },
        "test_no_error_message_printed_on_empty_reqs_file": {
            "name": "test_no_error_message_printed_on_empty_reqs_file",
            "location": 144,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "chalice_deployer": [],
                "capfd": [
                    "int"
                ]
            }
        },
        "test_osutils_proxies_os_functions": {
            "name": "test_osutils_proxies_os_functions",
            "location": 156,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_includes_app_and_chalicelib_dir": {
            "name": "test_includes_app_and_chalicelib_dir",
            "location": 173,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "chalice_deployer": [
                    "str"
                ]
            }
        },
        "_assert_in_zip": {
            "name": "_assert_in_zip",
            "location": 196,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "contents": [
                    "str",
                    "Tuple[str]",
                    "tuple[str]"
                ],
                "zip": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "_assert_not_in_zip": {
            "name": "_assert_not_in_zip",
            "location": 202,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Tuple[str]",
                    "tuple[str]"
                ],
                "zip": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "test_subsequent_deploy_replaces_chalicelib": {
            "name": "test_subsequent_deploy_replaces_chalicelib",
            "location": 208,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "chalice_deployer": [
                    "str"
                ]
            }
        },
        "test_vendor_dir_included": {
            "name": "test_vendor_dir_included",
            "location": 229,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "chalice_deployer": [
                    "str"
                ]
            }
        },
        "test_no_vendor_in_app_only_packager": {
            "name": "test_no_vendor_in_app_only_packager",
            "location": 241,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "app_only_packager": []
            }
        },
        "test_py_deps_in_layer_package": {
            "name": "test_py_deps_in_layer_package",
            "location": 260,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "layer_packager": [
                    "bool"
                ]
            }
        },
        "test_empty_layer_package_raises_error": {
            "name": "test_empty_layer_package_raises_error",
            "location": 283,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "layer_packager": []
            }
        },
        "test_subsequent_deploy_replaces_vendor_dir": {
            "name": "test_subsequent_deploy_replaces_vendor_dir",
            "location": 300,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "chalice_deployer": []
            }
        },
        "test_vendor_symlink_included": {
            "name": "test_vendor_symlink_included",
            "location": 316,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ],
                "chalice_deployer": [
                    "str"
                ]
            }
        },
        "test_subsequent_deploy_replaces_vendor_symlink": {
            "name": "test_subsequent_deploy_replaces_vendor_symlink",
            "location": 329,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ],
                "chalice_deployer": []
            }
        },
        "test_zip_filename_changes_on_vendor_update": {
            "name": "test_zip_filename_changes_on_vendor_update",
            "location": 347,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "chalice_deployer": []
            }
        },
        "test_zip_filename_changes_on_vendor_symlink": {
            "name": "test_zip_filename_changes_on_vendor_symlink",
            "location": 360,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "chalice_deployer": []
            }
        },
        "test_chalice_runtime_injected_on_change": {
            "name": "test_chalice_runtime_injected_on_change",
            "location": 375,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "chalice_deployer": [
                    "str"
                ]
            }
        },
        "test_does_handle_missing_dependency_error": {
            "name": "test_does_handle_missing_dependency_error",
            "location": 394,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "_remove_runtime_from_deployment_package": {
            "name": "_remove_runtime_from_deployment_package",
            "location": 414,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "test_can_delete_app": {
            "name": "test_can_delete_app",
            "location": 428,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        }
    },
    "chalice-master/tests/functional/test_local.py": {
        "cd": {
            "name": "cd",
            "location": 41,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "basic_app": {
            "name": "basic_app",
            "location": 51,
            "return": [
                "str",
                "Callable",
                "bool",
                "List[dict]",
                "int",
                "float"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "Mapping[str, Any]",
                    "bool"
                ]
            }
        },
        "config": {
            "name": "config",
            "location": 91,
            "return": [
                "Config",
                "str",
                "Optional[dict]",
                "app.App",
                "app.config.MQConfig",
                "dict",
                "bool"
            ],
            "arguments": {}
        },
        "unused_tcp_port": {
            "name": "unused_tcp_port",
            "location": 96,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "http_session": {
            "name": "http_session",
            "location": 103,
            "return": [
                "HTTPFetcher",
                "Dict[str, bool]",
                "str",
                "Dict[str, Any]",
                "Mapping[str, Any]"
            ],
            "arguments": {}
        },
        "local_server_factory": {
            "name": "local_server_factory",
            "location": 127,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "unused_tcp_port": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "sample_app": {
            "name": "sample_app",
            "location": 142,
            "return": [
                "Callable",
                "str",
                "bool",
                "List[dict]",
                "int",
                "float"
            ],
            "arguments": {}
        },
        "test_has_thread_safe_current_request": {
            "name": "test_has_thread_safe_current_request",
            "location": 172,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "config": [
                    "Optional[str]",
                    "str",
                    "faustypes.app.AppT",
                    "None",
                    "dict",
                    "dict[, ]"
                ],
                "sample_app": [
                    "Optional[str]",
                    "str",
                    "faustypes.app.AppT",
                    "None",
                    "dict",
                    "dict[, ]"
                ],
                "local_server_factory": [
                    "Optional[str]",
                    "str",
                    "faustypes.app.AppT",
                    "None",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_can_accept_get_request": {
            "name": "test_can_accept_get_request",
            "location": 206,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "config": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Optional[int]",
                    "py.path.local"
                ],
                "sample_app": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Optional[int]",
                    "py.path.local"
                ],
                "local_server_factory": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Optional[int]",
                    "py.path.local"
                ]
            }
        },
        "test_can_get_unicode_string_content_length": {
            "name": "test_can_get_unicode_string_content_length",
            "location": 213,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "config": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "local_server_factory": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "test_can_accept_options_request": {
            "name": "test_can_accept_options_request",
            "location": 226,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "config": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Optional[int]",
                    "py.path.local"
                ],
                "sample_app": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Optional[int]",
                    "py.path.local"
                ],
                "local_server_factory": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Optional[int]",
                    "py.path.local"
                ]
            }
        },
        "test_can_accept_multiple_options_request": {
            "name": "test_can_accept_multiple_options_request",
            "location": 234,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "config": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Optional[int]",
                    "py.path.local"
                ],
                "sample_app": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Optional[int]",
                    "py.path.local"
                ],
                "local_server_factory": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Optional[int]",
                    "py.path.local"
                ]
            }
        },
        "test_can_accept_multiple_connections": {
            "name": "test_can_accept_multiple_connections",
            "location": 249,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "config": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Optional[int]",
                    "py.path.local"
                ],
                "sample_app": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Optional[int]",
                    "py.path.local"
                ],
                "local_server_factory": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Optional[int]",
                    "py.path.local"
                ]
            }
        },
        "test_can_import_env_vars": {
            "name": "test_can_import_env_vars",
            "location": 279,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "unused_tcp_port": [
                    "str",
                    "utils.CaseInfo"
                ],
                "http_session": [
                    "typing.Callable[Any,Any, typing.Any]",
                    "Callable[[Any, Any], Any]",
                    "dict[typing.Any, int]",
                    "list[str]",
                    "Dict[Any, int]",
                    "cmk.utils.type_defs.ServiceName",
                    "cmk.base.config.ConfigCache",
                    "cmk.utils.type_defs.HostName",
                    "List[str]"
                ]
            }
        },
        "_wait_for_server_ready": {
            "name": "_wait_for_server_ready",
            "location": 292,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "process": [
                    "Optional[float]",
                    "str",
                    "Optional[bool]",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "_assert_env_var_loaded": {
            "name": "_assert_env_var_loaded",
            "location": 299,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "port_number": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "http_session": [
                    "str",
                    "dict"
                ]
            }
        },
        "test_can_reload_server": {
            "name": "test_can_reload_server",
            "location": 304,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "unused_tcp_port": [
                    "str"
                ],
                "basic_app": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "None"
                ],
                "http_session": []
            }
        },
        "ThreadedLocalServer.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "int",
                    "float",
                    "bool"
                ],
                "host": [
                    "typing.Text",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ThreadedLocalServer.wait_for_server_ready": {
            "name": "wait_for_server_ready",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadedLocalServer.configure": {
            "name": "configure",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "app_object": [
                    "list[typing.Any]",
                    "raiden.utils.Port",
                    "None",
                    "Config",
                    "cmk.base.config.HostConfig",
                    "Optional[List[Any]]"
                ],
                "config": [
                    "dict[, ]",
                    "sphinx.config.Config",
                    "model.Config",
                    "virgene.config.Config",
                    "dict"
                ]
            }
        },
        "ThreadedLocalServer.run": {
            "name": "run",
            "location": 74,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadedLocalServer.make_call": {
            "name": "make_call",
            "location": 80,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "int",
                "dict",
                "Union[Sequence[str], Sequence[int]]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "TextIO",
                    "typing.TextIO",
                    "BinaryIO",
                    "typing.BinaryIO"
                ],
                "path": [
                    "str",
                    "TextIO",
                    "typing.TextIO",
                    "BinaryIO",
                    "typing.BinaryIO"
                ],
                "port": [
                    "str",
                    "TextIO",
                    "typing.TextIO",
                    "BinaryIO",
                    "typing.BinaryIO"
                ],
                "timeout": [
                    "float",
                    "str",
                    "TextIO",
                    "BinaryIO"
                ]
            }
        },
        "ThreadedLocalServer.shutdown": {
            "name": "shutdown",
            "location": 85,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPFetcher.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "List[str]",
                    "bool",
                    "list[str]",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "HTTPFetcher.json_get": {
            "name": "json_get",
            "location": 120,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "requests.Session"
                ]
            }
        },
        "local_server_factory.create_server": {
            "name": "create_server",
            "location": 130,
            "return": [
                "tuple[]",
                "bool",
                "float"
            ],
            "arguments": {
                "app_object": [
                    "str",
                    "Callable",
                    "float"
                ],
                "config": [
                    "str",
                    "Callable",
                    "float"
                ]
            }
        },
        "sample_app.index": {
            "name": "index",
            "location": 149,
            "return": [
                "dict[typing.Text, typing.Text]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "sample_app.test_cors": {
            "name": "test_cors",
            "location": 153,
            "return": [
                "dict[typing.Text, typing.Text]",
                "str",
                "float"
            ],
            "arguments": {}
        },
        "sample_app.record_counter": {
            "name": "record_counter",
            "location": 157,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "sample_app.get_record_counter": {
            "name": "get_record_counter",
            "location": 166,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {}
        },
        "test_has_thread_safe_current_request.make_requests": {
            "name": "make_requests",
            "location": 184,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "counter_start": [
                    "int",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "test_can_get_unicode_string_content_length.index_view": {
            "name": "index_view",
            "location": 218,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "chalice-master/tests/functional/test_package.py": {
        "_create_app_structure": {
            "name": "_create_app_structure",
            "location": 31,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "bool"
                ]
            }
        },
        "sample_app": {
            "name": "sample_app",
            "location": 38,
            "return": [
                "\"App\"",
                "Chalice"
            ],
            "arguments": {}
        },
        "sdist_reader": {
            "name": "sdist_reader",
            "location": 49,
            "return": [
                "SDistMetadataFetcher",
                "str",
                "float"
            ],
            "arguments": {}
        },
        "sdist_builder": {
            "name": "sdist_builder",
            "location": 54,
            "return": [
                "FakeSdistBuilder",
                "str",
                "float",
                "Tuple[str, str]"
            ],
            "arguments": {}
        },
        "osutils": {
            "name": "osutils",
            "location": 202,
            "return": [
                "OSUtils",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "empty_env_osutils": {
            "name": "empty_env_osutils",
            "location": 207,
            "return": [
                "EmptyEnv",
                "Mapping[str, str]",
                "\"jinja2.Environment\"",
                "List[int]"
            ],
            "arguments": {}
        },
        "pip_runner": {
            "name": "pip_runner",
            "location": 215,
            "return": [
                "tuple[typing.Union[FakePip,PipRunner]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "empty_env_osutils": [
                    "IO",
                    "typing.IO"
                ]
            }
        },
        "test_can_create_app_packager_with_no_autogen": {
            "name": "test_can_create_app_packager_with_no_autogen",
            "location": 974,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ],
                "stubbed_session": [
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "test_can_create_app_packager_with_yaml_extention": {
            "name": "test_can_create_app_packager_with_yaml_extention",
            "location": 993,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ],
                "stubbed_session": [
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "test_can_specify_yaml_output": {
            "name": "test_can_specify_yaml_output",
            "location": 1013,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ],
                "stubbed_session": [
                    "str",
                    "Optional[str]",
                    "Callable[[List, bool], None]",
                    "None",
                    "dict",
                    "typing.Callable[List,bool, None]",
                    "dict[, ]"
                ]
            }
        },
        "test_will_create_outdir_if_needed": {
            "name": "test_will_create_outdir_if_needed",
            "location": 1030,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ],
                "stubbed_session": [
                    "Optional[str]",
                    "str",
                    "Callable[[List, bool], None]",
                    "None",
                    "typing.Callable[List,bool, None]"
                ]
            }
        },
        "test_includes_layer_package_with_sam": {
            "name": "test_includes_layer_package_with_sam",
            "location": 1045,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "stubbed_session": [
                    "Optional[str]",
                    "str",
                    "Callable[[List, bool], None]",
                    "None",
                    "dict",
                    "typing.Callable[List,bool, None]",
                    "dict[, ]"
                ]
            }
        },
        "test_includes_layer_package_with_terraform": {
            "name": "test_includes_layer_package_with_terraform",
            "location": 1063,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "stubbed_session": [
                    "Optional[str]",
                    "str",
                    "Callable[[List, bool], None]",
                    "None",
                    "dict",
                    "typing.Callable[List,bool, None]",
                    "dict[, ]"
                ]
            }
        },
        "sample_app.index": {
            "name": "index",
            "location": 42,
            "return": [
                "dict[typing.Text, typing.Text]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "FakeSdistBuilder.write_fake_sdist": {
            "name": "write_fake_sdist",
            "location": 68,
            "return": [
                "str",
                "tuple[typing.Union[str,int]]"
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "str",
                    "int"
                ],
                "name": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "None"
                ],
                "version": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "PathArgumentEndingWith.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "PathArgumentEndingWith.__eq__": {
            "name": "__eq__",
            "location": 81,
            "return": [
                "bool",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "FakePip.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakePip.main": {
            "name": "main",
            "location": 95,
            "return": [
                "bytes",
                "raiden.utils.Signature",
                "utils.Encoded",
                "raiden.utils.Optional[raiden.utils.Signature]"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "env_vars": [
                    "List[str]",
                    "None",
                    "str",
                    "list[str]",
                    "dict",
                    "list",
                    "dict[, ]",
                    "list[]"
                ],
                "shim": [
                    "List[str]",
                    "None",
                    "str",
                    "list[str]",
                    "dict",
                    "list",
                    "dict[, ]",
                    "list[]"
                ]
            }
        },
        "FakePip.set_return_tuple": {
            "name": "set_return_tuple",
            "location": 111,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "rc": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]",
                    "TextIO",
                    "typing.TextIO"
                ],
                "out": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]",
                    "TextIO",
                    "typing.TextIO"
                ],
                "err": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]",
                    "TextIO",
                    "typing.TextIO"
                ]
            }
        },
        "FakePip.packages_to_download": {
            "name": "packages_to_download",
            "location": 114,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_args": [
                    "str",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ],
                "packages": [
                    "str",
                    "Optional[List[str]]",
                    "list[str]"
                ],
                "whl_contents": [
                    "str",
                    "None",
                    "Optional[List[str]]",
                    "list[str]"
                ]
            }
        },
        "FakePip.wheels_to_build": {
            "name": "wheels_to_build",
            "location": 122,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_args": [
                    "dict[, ]",
                    "dict",
                    "typing.Callable[, ]",
                    "str",
                    "Config",
                    "Callable",
                    "baseplate.lib.config.RawConfig"
                ],
                "wheels_to_build": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "Config",
                    "Callable",
                    "baseplate.lib.config.RawConfig"
                ],
                "expected_env_vars": [
                    "Optional[str]",
                    "None",
                    "str",
                    "Optional[MutableMapping[str, Any]]",
                    "typing.MutableMapping"
                ],
                "expected_shim": [
                    "str",
                    "None",
                    "List[str]",
                    "Union[None, int, str]",
                    "list[str]",
                    "dict",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "FakePip.calls": {
            "name": "calls",
            "location": 139,
            "return": [
                "Union"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakePip.validate": {
            "name": "validate",
            "location": 142,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PipSideEffect.__init__": {
            "name": "__init__",
            "location": 151,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[str]"
                ],
                "dirarg": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "typing.Iterable[str]",
                    "Optional[int]",
                    "Iterable[str]",
                    "Optional[dict]"
                ],
                "expected_args": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "typing.Mapping",
                    "config.Config",
                    "dict[, ]",
                    "Mapping[str, Any]",
                    "dict"
                ],
                "whl_contents": [
                    "int",
                    "None",
                    "str",
                    "Optional[int]",
                    "Optional[str]",
                    "bool"
                ],
                "expected_env_vars": [
                    "str",
                    "None",
                    "Optional[dict]",
                    "Optional[Dict[str, str]]",
                    "dict[, ]",
                    "Optional[Mapping]",
                    "dict[str, str]",
                    "typing.Mapping"
                ],
                "expected_shim": [
                    "None",
                    "dict",
                    "str",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "utils.types.JSON",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "PipSideEffect._build_fake_whl": {
            "name": "_build_fake_whl",
            "location": 163,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "str",
                    "int"
                ],
                "filename": [
                    "str",
                    "int"
                ]
            }
        },
        "PipSideEffect._build_fake_sdist": {
            "name": "_build_fake_sdist",
            "location": 174,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "bool"
                ]
            }
        },
        "PipSideEffect.execute": {
            "name": "execute",
            "location": 186,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "TestDependencyBuilder._write_requirements_txt": {
            "name": "_write_requirements_txt",
            "location": 222,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "packages": [
                    "str",
                    "Optional[Tuple[str, ...]]",
                    "tuple[typing.Union[str,...]]"
                ],
                "directory": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "TestDependencyBuilder._make_appdir_and_dependency_builder": {
            "name": "_make_appdir_and_dependency_builder",
            "location": 228,
            "return": [
                "tuple[typing.Union[str,DependencyBuilder]]",
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "reqs": [
                    "Mapping",
                    "str",
                    "typing.Mapping"
                ],
                "tmpdir": [
                    "str",
                    "Union[int, str]",
                    "int"
                ],
                "runner": [
                    "float"
                ]
            }
        },
        "TestDependencyBuilder.test_can_build_local_dir_as_whl": {
            "name": "test_can_build_local_dir_as_whl",
            "location": 234,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "None",
                    "cmk.base.config.HostConfig",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "Tuple[int, int]"
                ],
                "pip_runner": [
                    "str",
                    "int"
                ]
            }
        },
        "TestDependencyBuilder.test_can_get_sdist_if_missing_initially": {
            "name": "test_can_get_sdist_if_missing_initially",
            "location": 257,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "pip_runner": [
                    "str"
                ]
            }
        },
        "TestDependencyBuilder.test_can_get_whls_all_manylinux": {
            "name": "test_can_get_whls_all_manylinux",
            "location": 307,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "tuple[typing.Union[int,int]]",
                    "str",
                    "Tuple[int, int]",
                    "None",
                    "cmk.base.config.HostConfig",
                    "dict[, ]",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "dict"
                ],
                "pip_runner": [
                    "str"
                ]
            }
        },
        "TestDependencyBuilder.test_can_support_new_wheel_tags": {
            "name": "test_can_support_new_wheel_tags",
            "location": 329,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "dict",
                    "dict[, ]",
                    "str",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "pip_runner": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "TestDependencyBuilder.test_can_support_compressed_tags": {
            "name": "test_can_support_compressed_tags",
            "location": 350,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "pip_runner": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "TestDependencyBuilder.test_can_use_abi3_whl_for_any_python3": {
            "name": "test_can_use_abi3_whl_for_any_python3",
            "location": 372,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "dict",
                    "dict[, ]",
                    "str",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "pip_runner": []
            }
        },
        "TestDependencyBuilder.test_can_expand_purelib_whl": {
            "name": "test_can_expand_purelib_whl",
            "location": 396,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "None",
                    "cmk.base.config.HostConfig",
                    "typing.Callable[, ]",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "Callable"
                ],
                "pip_runner": [
                    "str",
                    "float"
                ]
            }
        },
        "TestDependencyBuilder.test_can_normalize_dirname_for_purelib_whl": {
            "name": "test_can_normalize_dirname_for_purelib_whl",
            "location": 418,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "Tuple[int, int]",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "dict",
                    "dict[, ]"
                ],
                "pip_runner": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "TestDependencyBuilder.test_can_expand_platlib_whl": {
            "name": "test_can_expand_platlib_whl",
            "location": 440,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "None",
                    "cmk.base.config.HostConfig",
                    "typing.Callable[, ]",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "Callable"
                ],
                "pip_runner": [
                    "str",
                    "float"
                ]
            }
        },
        "TestDependencyBuilder.test_can_expand_platlib_and_purelib": {
            "name": "test_can_expand_platlib_and_purelib",
            "location": 462,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "None",
                    "cmk.base.config.HostConfig",
                    "typing.Callable[, ]",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "Callable"
                ],
                "pip_runner": [
                    "str",
                    "float"
                ]
            }
        },
        "TestDependencyBuilder.test_does_ignore_data": {
            "name": "test_does_ignore_data",
            "location": 489,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "None",
                    "cmk.base.config.HostConfig",
                    "dict[, ]",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "cmk.utils.type_defs.EventRule",
                    "dict"
                ],
                "pip_runner": [
                    "str",
                    "int"
                ]
            }
        },
        "TestDependencyBuilder.test_does_ignore_include": {
            "name": "test_does_ignore_include",
            "location": 517,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "typing.Callable[, ]",
                    "Callable",
                    "cmk.base.config.HostConfig"
                ],
                "pip_runner": [
                    "Type",
                    "typing.Type",
                    "Iterable[Any]",
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "TestDependencyBuilder.test_does_ignore_scripts": {
            "name": "test_does_ignore_scripts",
            "location": 545,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "typing.Callable[, ]",
                    "Callable",
                    "cmk.base.config.HostConfig"
                ],
                "pip_runner": [
                    "Type",
                    "typing.Type",
                    "Iterable[Any]",
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "TestDependencyBuilder.test_can_expand_platlib_and_platlib_and_root": {
            "name": "test_can_expand_platlib_and_platlib_and_root",
            "location": 573,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "Tuple[int, int]",
                    "str",
                    "tuple[typing.Union[int,int]]"
                ],
                "pip_runner": []
            }
        },
        "TestDependencyBuilder.test_can_get_whls_mixed_compat": {
            "name": "test_can_get_whls_mixed_compat",
            "location": 602,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "osutils": [
                    "str"
                ],
                "pip_runner": [
                    "str"
                ]
            }
        },
        "TestDependencyBuilder.test_can_get_py27_whls": {
            "name": "test_can_get_py27_whls",
            "location": 625,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "osutils": [
                    "str"
                ],
                "pip_runner": [
                    "str"
                ]
            }
        },
        "TestDependencyBuilder.test_does_fail_on_invalid_local_package": {
            "name": "test_does_fail_on_invalid_local_package",
            "location": 648,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "typing.Callable[, ]",
                    "Callable",
                    "None",
                    "cmk.base.config.HostConfig",
                    "Optional[cmk.utils.type_defs.HostAddress]"
                ],
                "osutils": [
                    "str"
                ],
                "pip_runner": [
                    "str",
                    "int"
                ]
            }
        },
        "TestDependencyBuilder.test_does_fail_on_narrow_py27_unicode": {
            "name": "test_does_fail_on_narrow_py27_unicode",
            "location": 677,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "typing.Callable[, ]",
                    "Callable",
                    "cmk.base.config.HostConfig"
                ],
                "osutils": [
                    "List[str]",
                    "list[str]"
                ],
                "pip_runner": [
                    "Type",
                    "typing.Type",
                    "Iterable[Any]",
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "TestDependencyBuilder.test_does_fail_on_python_1_whl": {
            "name": "test_does_fail_on_python_1_whl",
            "location": 703,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "typing.Callable[, ]",
                    "Callable",
                    "cmk.base.config.HostConfig"
                ],
                "osutils": [
                    "List[str]",
                    "list[str]"
                ],
                "pip_runner": [
                    "Type",
                    "typing.Type",
                    "Iterable[Any]",
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "TestDependencyBuilder.test_can_replace_incompat_whl": {
            "name": "test_can_replace_incompat_whl",
            "location": 728,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "None",
                    "cmk.base.config.HostConfig",
                    "typing.Callable[, ]",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "Callable"
                ],
                "osutils": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ],
                "pip_runner": [
                    "str",
                    "float"
                ]
            }
        },
        "TestDependencyBuilder.test_whitelist_sqlalchemy": {
            "name": "test_whitelist_sqlalchemy",
            "location": 770,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "str",
                    "Hashable",
                    "bytes",
                    "typing.Hashable",
                    "Optional[str]",
                    "None",
                    "Optional[Callable]",
                    "typing.Callable[, ]"
                ],
                "osutils": [
                    "str"
                ],
                "pip_runner": [
                    "str",
                    "int",
                    "Union[str, float]",
                    "float",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "bool",
                    "None"
                ],
                "package": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "package_filename": [
                    "str",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "dict[, ]",
                    "dict",
                    "neuromation.api.config._AuthConfig"
                ]
            }
        },
        "TestDependencyBuilder.test_can_build_sdist": {
            "name": "test_can_build_sdist",
            "location": 804,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "None",
                    "cmk.base.config.HostConfig",
                    "typing.Callable[, ]",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "Callable"
                ],
                "osutils": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "bool"
                ],
                "pip_runner": [
                    "bool",
                    "str",
                    "Dict[str, float]",
                    "dict[str, float]"
                ]
            }
        },
        "TestDependencyBuilder.test_build_sdist_makes_incompatible_whl": {
            "name": "test_build_sdist_makes_incompatible_whl",
            "location": 834,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "bool",
                    "dict[str, str]",
                    "int",
                    "Dict[str, str]"
                ],
                "osutils": [
                    "bool",
                    "BaseException",
                    "Callable[[], bytes]",
                    "typing.Callable[[], bytes]"
                ],
                "pip_runner": [
                    "str",
                    "int",
                    "Dict[str, int]",
                    "dict[str, int]"
                ]
            }
        },
        "TestDependencyBuilder.test_can_build_package_with_optional_c_speedups_and_no_wheel": {
            "name": "test_can_build_package_with_optional_c_speedups_and_no_wheel",
            "location": 873,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "osutils": [
                    "str",
                    "Callable[..., None]",
                    "typing.Callable[..., None]"
                ],
                "pip_runner": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "TestDependencyBuilder.test_build_into_existing_dir_with_preinstalled_packages": {
            "name": "test_build_into_existing_dir_with_preinstalled_packages",
            "location": 922,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "None",
                    "cmk.base.config.HostConfig",
                    "Optional[cmk.utils.type_defs.HostAddress]"
                ],
                "osutils": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]",
                    "List[str]",
                    "list[str]"
                ],
                "pip_runner": [
                    "bool",
                    "str",
                    "Dict[str, float]",
                    "dict[str, float]"
                ]
            }
        },
        "TestSubprocessPip.test_can_invoke_pip": {
            "name": "test_can_invoke_pip",
            "location": 1083,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSubprocessPip.test_does_error_code_propagate": {
            "name": "test_does_error_code_propagate",
            "location": 1092,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSdistMetadataFetcher._write_fake_sdist": {
            "name": "_write_fake_sdist",
            "location": 1121,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "setup_py": [
                    "int",
                    "str",
                    "bool",
                    "cdp.io.StreamHandle",
                    "IO[bytes]"
                ],
                "directory": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "ext": [
                    "str"
                ],
                "pkg_info_contents": [
                    "None",
                    "Optional[Dict[str, Any]]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TestSdistMetadataFetcher.test_setup_tar_gz": {
            "name": "test_setup_tar_gz",
            "location": 1147,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "osutils": [
                    "str",
                    "float"
                ],
                "sdist_reader": [
                    "set",
                    "set[]"
                ]
            }
        },
        "TestSdistMetadataFetcher.test_setup_tar_bz2": {
            "name": "test_setup_tar_bz2",
            "location": 1158,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "osutils": [
                    "str",
                    "float"
                ],
                "sdist_reader": [
                    "set",
                    "set[]"
                ]
            }
        },
        "TestSdistMetadataFetcher.test_setup_tar_gz_hyphens_in_name": {
            "name": "test_setup_tar_gz_hyphens_in_name",
            "location": 1169,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "osutils": [
                    "str"
                ],
                "sdist_reader": []
            }
        },
        "TestSdistMetadataFetcher.test_setup_zip": {
            "name": "test_setup_zip",
            "location": 1185,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "osutils": [
                    "dict"
                ],
                "sdist_reader": []
            }
        },
        "TestSdistMetadataFetcher.test_distutil_tar_gz": {
            "name": "test_distutil_tar_gz",
            "location": 1196,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "osutils": [
                    "str",
                    "float"
                ],
                "sdist_reader": [
                    "set",
                    "set[]"
                ]
            }
        },
        "TestSdistMetadataFetcher.test_distutil_tar_bz2": {
            "name": "test_distutil_tar_bz2",
            "location": 1207,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "osutils": [
                    "str",
                    "float"
                ],
                "sdist_reader": [
                    "set",
                    "set[]"
                ]
            }
        },
        "TestSdistMetadataFetcher.test_distutil_zip": {
            "name": "test_distutil_zip",
            "location": 1218,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "osutils": [
                    "dict"
                ],
                "sdist_reader": []
            }
        },
        "TestSdistMetadataFetcher.test_both_tar_gz": {
            "name": "test_both_tar_gz",
            "location": 1229,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "osutils": [
                    "str",
                    "float"
                ],
                "sdist_reader": [
                    "set",
                    "set[]"
                ]
            }
        },
        "TestSdistMetadataFetcher.test_both_tar_bz2": {
            "name": "test_both_tar_bz2",
            "location": 1240,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "osutils": [
                    "str",
                    "float"
                ],
                "sdist_reader": [
                    "set",
                    "set[]"
                ]
            }
        },
        "TestSdistMetadataFetcher.test_both_zip": {
            "name": "test_both_zip",
            "location": 1251,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "osutils": [
                    "dict"
                ],
                "sdist_reader": []
            }
        },
        "TestSdistMetadataFetcher.test_bad_format": {
            "name": "test_bad_format",
            "location": 1262,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "osutils": [
                    "str",
                    "int",
                    "Dict[str, float]",
                    "list"
                ],
                "sdist_reader": [
                    "set",
                    "set[]"
                ]
            }
        },
        "TestSdistMetadataFetcher.test_cant_get_egg_info_filename": {
            "name": "test_cant_get_egg_info_filename",
            "location": 1272,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "osutils": [
                    "str"
                ],
                "sdist_reader": [
                    "set",
                    "set[]"
                ]
            }
        },
        "TestSdistMetadataFetcher.test_pkg_info_fallback_fails_raises_error": {
            "name": "test_pkg_info_fallback_fails_raises_error",
            "location": 1291,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "osutils": [
                    "dict"
                ],
                "sdist_reader": [
                    "str"
                ]
            }
        },
        "TestPackage.test_same_pkg_sdist_and_wheel_collide": {
            "name": "test_same_pkg_sdist_and_wheel_collide",
            "location": 1303,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "osutils": [
                    "Callable"
                ],
                "sdist_builder": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestPackage.test_ensure_sdist_name_normalized_for_comparison": {
            "name": "test_ensure_sdist_name_normalized_for_comparison",
            "location": 1311,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "osutils": [
                    "Callable"
                ],
                "sdist_builder": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestPackage.test_ensure_wheel_name_normalized_for_comparison": {
            "name": "test_ensure_wheel_name_normalized_for_comparison",
            "location": 1320,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "osutils": [
                    "Callable"
                ],
                "sdist_builder": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "empty_env_osutils.EmptyEnv.environ": {
            "name": "environ",
            "location": 209,
            "return": [
                "dict[, ]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "chalice-master/tests/functional/test_utils.py": {
        "osutils": {
            "name": "osutils",
            "location": 12,
            "return": [
                "OSUtils",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_can_zip_single_file": {
            "name": "test_can_zip_single_file",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "Tuple[paradigm.models.Base, tests.utils.Kwargs]",
                    "bytes"
                ]
            }
        },
        "test_can_zip_recursive_contents": {
            "name": "test_can_zip_recursive_contents",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ]
            }
        },
        "test_can_write_recorded_values": {
            "name": "test_can_write_recorded_values",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "bytes"
                ]
            }
        },
        "test_can_merge_recorded_values": {
            "name": "test_can_merge_recorded_values",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "bytes"
                ]
            }
        },
        "test_can_remove_stage_from_deployed_values": {
            "name": "test_can_remove_stage_from_deployed_values",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "bytes"
                ]
            }
        },
        "test_remove_stage_from_deployed_values_already_removed": {
            "name": "test_remove_stage_from_deployed_values_already_removed",
            "location": 88,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "bytes",
                    "str"
                ]
            }
        },
        "test_remove_stage_from_deployed_values_no_file": {
            "name": "test_remove_stage_from_deployed_values_no_file",
            "location": 103,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "bytes"
                ]
            }
        },
        "TestOSUtils.test_can_read_unicode": {
            "name": "test_can_read_unicode",
            "location": 112,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "bytes"
                ],
                "osutils": [
                    "dict"
                ]
            }
        }
    },
    "chalice-master/tests/functional/__init__.py": {},
    "chalice-master/tests/functional/api/test_package.py": {
        "runner": {
            "name": "runner",
            "location": 12,
            "return": [
                "CliRunner",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_can_package_different_formats": {
            "name": "test_can_package_different_formats",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "runner": [
                    "str",
                    "bytes",
                    "List[int]"
                ],
                "package_format": [
                    "str",
                    "bool",
                    "Tuple[str, str, str]",
                    "tuple[typing.Union[str,str,str]]"
                ],
                "template_format": [
                    "str",
                    "bool",
                    "Tuple[str, str, str]",
                    "tuple[typing.Union[str,str,str]]"
                ],
                "expected_filename": [
                    "str",
                    "bool",
                    "neuromation.api.login._AuthConfig"
                ]
            }
        },
        "test_can_override_chalice_config": {
            "name": "test_can_override_chalice_config",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "runner": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "chalice-master/tests/functional/api/__init__.py": {},
    "chalice-master/tests/functional/basicapp/app.py": {
        "index": {
            "name": "index",
            "location": 7,
            "return": [
                "str",
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        }
    },
    "chalice-master/tests/functional/cdk/test_construct.py": {
        "runner": {
            "name": "runner",
            "location": 24,
            "return": [
                "CliRunner",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "verify_code_asset_exists_v1": {
            "name": "verify_code_asset_exists_v1",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "uri_props": [
                    "str",
                    "Callable",
                    "Optional[str]"
                ]
            }
        },
        "verify_code_asset_exists_v2": {
            "name": "verify_code_asset_exists_v2",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "uri_props": [
                    "str",
                    "Callable",
                    "Optional[str]"
                ]
            }
        },
        "verify_code_asset_exists": {
            "name": "verify_code_asset_exists",
            "location": 41,
            "return": [
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {}
        },
        "load_chalice_construct": {
            "name": "load_chalice_construct",
            "location": 48,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "dirname": [
                    "str",
                    "core.board.Color"
                ],
                "stack_name": [
                    "str",
                    "typing.Text"
                ]
            }
        },
        "filter_resources": {
            "name": "filter_resources",
            "location": 64,
            "return": [
                "list[tuple[]]",
                "Set[str]",
                "Dict[str, Set[str]]",
                "Dict[str, List[Callable]]",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "template": [
                    "str",
                    "bool"
                ],
                "resource_type": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_cdk_construct_api": {
            "name": "test_cdk_construct_api",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "runner": [
                    "str",
                    "float"
                ]
            }
        },
        "test_can_package_as_cdk_app": {
            "name": "test_can_package_as_cdk_app",
            "location": 84,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "runner": [
                    "str"
                ],
                "verify_code_asset_exists": [
                    "str"
                ]
            }
        },
        "test_can_package_managed_layer": {
            "name": "test_can_package_managed_layer",
            "location": 114,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "runner": [
                    "str"
                ],
                "verify_code_asset_exists": [
                    "str"
                ]
            }
        }
    },
    "chalice-master/tests/functional/cdk/__init__.py": {},
    "chalice-master/tests/functional/cli/test_cli.py": {
        "runner": {
            "name": "runner",
            "location": 35,
            "return": [
                "CliRunner",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "mock_cli_factory": {
            "name": "mock_cli_factory",
            "location": 40,
            "return": [
                "float",
                "Callable[[bytes], None]",
                "bool",
                "pricemonitor.config.Coin",
                "str"
            ],
            "arguments": {}
        },
        "teardown_function": {
            "name": "teardown_function",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "function": [
                    "typing.Callable[, ]",
                    "Exception",
                    "Callable",
                    "Callable[..., T]"
                ]
            }
        },
        "assert_chalice_app_structure_created": {
            "name": "assert_chalice_app_structure_created",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "dirname": [
                    "str",
                    "IO",
                    "typing.IO",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "_run_cli_command": {
            "name": "_run_cli_command",
            "location": 60,
            "return": [
                "str",
                "int",
                "Set[str]",
                "Mapping[str, int]",
                "bool",
                "\"Parameter\""
            ],
            "arguments": {
                "runner": [],
                "function": [],
                "args": [],
                "cli_factory": [
                    "None",
                    "List[str]",
                    "list[str]",
                    "Optional[\"TreeNode\"]",
                    "Optional[\"Scope\"]"
                ]
            }
        },
        "test_create_new_project_creates_app": {
            "name": "test_create_new_project_creates_app",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "runner": []
            }
        },
        "test_create_project_with_prompted_app_name": {
            "name": "test_create_project_with_prompted_app_name",
            "location": 84,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "runner": [
                    "neuromation.cli.printer.StreamPrinter",
                    "neuromation.cli.printer.TTYPrinter"
                ]
            }
        },
        "test_error_raised_if_dir_already_exists": {
            "name": "test_error_raised_if_dir_already_exists",
            "location": 98,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "runner": []
            }
        },
        "test_can_load_project_config_after_project_creation": {
            "name": "test_can_load_project_config_after_project_creation",
            "location": 106,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "runner": [
                    "neuromation.cli.printer.StreamPrinter",
                    "neuromation.cli.printer.TTYPrinter"
                ]
            }
        },
        "test_default_new_project_adds_index_route": {
            "name": "test_default_new_project_adds_index_route",
            "location": 120,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "runner": []
            }
        },
        "test_gen_policy_command_creates_policy": {
            "name": "test_gen_policy_command_creates_policy",
            "location": 128,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "runner": [
                    "solo.config.app.Config",
                    "tsrc.teshelpers.cli.CLI"
                ]
            }
        },
        "test_does_fail_to_generate_swagger_if_no_rest_api": {
            "name": "test_does_fail_to_generate_swagger_if_no_rest_api",
            "location": 143,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "runner": [
                    "str",
                    "neuromation.cli.printer.StreamPrinter",
                    "neuromation.cli.printer.TTYPrinter",
                    "int"
                ]
            }
        },
        "test_can_write_swagger_model": {
            "name": "test_can_write_swagger_model",
            "location": 160,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "runner": [
                    "neuromation.cli.printer.StreamPrinter",
                    "str",
                    "neuromation.cli.printer.TTYPrinter",
                    "bool",
                    "int"
                ]
            }
        },
        "test_can_package_command": {
            "name": "test_can_package_command",
            "location": 239,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "runner": [
                    "neuromation.cli.printer.StreamPrinter",
                    "neuromation.cli.printer.TTYPrinter"
                ],
                "mock_cli_factory": [
                    "Generator[None, Any, None]",
                    "typing.Generator[typing.Union[None,typing.Any,None]]"
                ]
            }
        },
        "test_can_package_with_yaml_command": {
            "name": "test_can_package_with_yaml_command",
            "location": 251,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "runner": [
                    "str",
                    "neuromation.cli.printer.StreamPrinter",
                    "neuromation.cli.printer.TTYPrinter",
                    "int"
                ]
            }
        },
        "test_case_insensitive_template_format": {
            "name": "test_case_insensitive_template_format",
            "location": 264,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "runner": [
                    "str",
                    "neuromation.cli.printer.StreamPrinter",
                    "neuromation.cli.printer.TTYPrinter",
                    "int"
                ]
            }
        },
        "test_can_package_with_single_file": {
            "name": "test_can_package_with_single_file",
            "location": 275,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "runner": [
                    "tsrc.teshelpers.cli.CLI",
                    "bool",
                    "neuromation.cli.printer.StreamPrinter"
                ]
            }
        },
        "test_package_terraform_err_with_single_file_or_merge": {
            "name": "test_package_terraform_err_with_single_file_or_merge",
            "location": 288,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "runner": [
                    "neuromation.cli.printer.StreamPrinter",
                    "neuromation.cli.printer.TTYPrinter",
                    "tsrc.teshelpers.cli.CLI"
                ]
            }
        },
        "test_debug_flag_enables_logging": {
            "name": "test_debug_flag_enables_logging",
            "location": 305,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "runner": [
                    "solo.config.app.Config"
                ]
            }
        },
        "test_does_deploy_with_default_api_gateway_stage_name": {
            "name": "test_does_deploy_with_default_api_gateway_stage_name",
            "location": 316,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "runner": [],
                "mock_cli_factory": [
                    "Generator[None, Any, None]",
                    "typing.Generator[typing.Union[None,typing.Any,None]]"
                ]
            }
        },
        "test_can_specify_api_gateway_stage": {
            "name": "test_can_specify_api_gateway_stage",
            "location": 334,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "runner": [],
                "mock_cli_factory": []
            }
        },
        "test_can_deploy_specify_connection_timeout": {
            "name": "test_can_deploy_specify_connection_timeout",
            "location": 348,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "runner": [],
                "mock_cli_factory": []
            }
        },
        "test_can_retrieve_url": {
            "name": "test_can_retrieve_url",
            "location": 361,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "runner": [],
                "mock_cli_factory": [
                    "mock.MagicMock"
                ]
            }
        },
        "test_error_when_no_deployed_record": {
            "name": "test_error_when_no_deployed_record",
            "location": 402,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "runner": [],
                "mock_cli_factory": [
                    "mock.Mock"
                ]
            }
        },
        "test_can_generate_pipeline_for_all": {
            "name": "test_can_generate_pipeline_for_all",
            "location": 418,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "runner": [
                    "str",
                    "neuromation.cli.printer.StreamPrinter",
                    "neuromation.cli.printer.TTYPrinter",
                    "int"
                ]
            }
        },
        "test_no_errors_if_override_codebuild_image": {
            "name": "test_no_errors_if_override_codebuild_image",
            "location": 434,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "runner": [
                    "str",
                    "neuromation.cli.printer.StreamPrinter",
                    "neuromation.cli.printer.TTYPrinter",
                    "int"
                ]
            }
        },
        "test_can_configure_github": {
            "name": "test_can_configure_github",
            "location": 451,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "runner": [
                    "neuromation.cli.printer.StreamPrinter",
                    "str",
                    "neuromation.cli.printer.TTYPrinter",
                    "bool",
                    "int"
                ]
            }
        },
        "test_can_extract_buildspec_yaml": {
            "name": "test_can_extract_buildspec_yaml",
            "location": 472,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "runner": [
                    "neuromation.cli.printer.StreamPrinter",
                    "str",
                    "neuromation.cli.printer.TTYPrinter",
                    "bool",
                    "int"
                ]
            }
        },
        "test_can_specify_profile_for_logs": {
            "name": "test_can_specify_profile_for_logs",
            "location": 490,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "runner": [],
                "mock_cli_factory": [
                    "mock.MagicMock"
                ]
            }
        },
        "test_can_provide_lambda_name_for_logs": {
            "name": "test_can_provide_lambda_name_for_logs",
            "location": 502,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "runner": [],
                "mock_cli_factory": []
            }
        },
        "test_can_follow_logs_with_option": {
            "name": "test_can_follow_logs_with_option",
            "location": 531,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "runner": [],
                "mock_cli_factory": []
            }
        },
        "test_can_call_invoke": {
            "name": "test_can_call_invoke",
            "location": 560,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "runner": [],
                "mock_cli_factory": [],
                "monkeypatch": [
                    "Generator[None, Any, None]",
                    "typing.Generator[typing.Union[None,typing.Any,None]]",
                    "List[T]",
                    "list[T]"
                ]
            }
        },
        "test_invoke_does_raise_if_service_error": {
            "name": "test_invoke_does_raise_if_service_error",
            "location": 575,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "runner": [],
                "mock_cli_factory": []
            }
        },
        "test_invoke_does_raise_if_unhandled_error": {
            "name": "test_invoke_does_raise_if_unhandled_error",
            "location": 606,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "runner": [],
                "mock_cli_factory": []
            }
        },
        "test_invoke_does_raise_if_read_timeout": {
            "name": "test_invoke_does_raise_if_read_timeout",
            "location": 627,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "runner": [],
                "mock_cli_factory": []
            }
        },
        "test_invoke_does_raise_if_no_function_found": {
            "name": "test_invoke_does_raise_if_no_function_found",
            "location": 639,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "runner": [],
                "mock_cli_factory": []
            }
        },
        "test_error_message_displayed_when_missing_feature_opt_in": {
            "name": "test_error_message_displayed_when_missing_feature_opt_in",
            "location": 651,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "runner": [
                    "neuromation.cli.printer.StreamPrinter",
                    "neuromation.cli.printer.TTYPrinter",
                    "int"
                ]
            }
        },
        "test_cli_with_absolute_path": {
            "name": "test_cli_with_absolute_path",
            "location": 679,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "runner": [],
                "path": []
            }
        },
        "test_can_generate_dev_plan": {
            "name": "test_can_generate_dev_plan",
            "location": 692,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "runner": [
                    "mock.Mock"
                ],
                "mock_cli_factory": []
            }
        },
        "test_can_generate_appgraph": {
            "name": "test_can_generate_appgraph",
            "location": 712,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "runner": [],
                "mock_cli_factory": []
            }
        },
        "test_chalice_cli_mode_env_var_always_set": {
            "name": "test_chalice_cli_mode_env_var_always_set",
            "location": 723,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "runner": []
            }
        },
        "FakeConfig.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "deployed_resources": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "FakeConfig.deployed_resources": {
            "name": "deployed_resources",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "chalice_stage_name": [
                    "str",
                    "bool",
                    "List[Union[int, Any]]",
                    "list[typing.Union[int,typing.Any]]",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "chalice-master/tests/functional/cli/test_factory.py": {
        "no_deployed_values": {
            "name": "no_deployed_values",
            "location": 22,
            "return": [
                "DeployedResources",
                "trezor.utils.Writer",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "clifactory": {
            "name": "clifactory",
            "location": 27,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "tmpdir": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "assert_has_no_request_body_filter": {
            "name": "assert_has_no_request_body_filter",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "log_name": [
                    "str"
                ]
            }
        },
        "assert_request_body_filter_in_log": {
            "name": "assert_request_body_filter_in_log",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "log_name": [
                    "str"
                ]
            }
        },
        "test_can_create_botocore_session": {
            "name": "test_can_create_botocore_session",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_create_botocore_session_debug": {
            "name": "test_can_create_botocore_session_debug",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_create_botocore_session_connection_timeout": {
            "name": "test_can_create_botocore_session_connection_timeout",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_create_botocore_session_read_timeout": {
            "name": "test_can_create_botocore_session_read_timeout",
            "location": 72,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_create_botocore_session_max_retries": {
            "name": "test_can_create_botocore_session_max_retries",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_create_botocore_session_with_multiple_configs": {
            "name": "test_can_create_botocore_session_with_multiple_configs",
            "location": 83,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_create_botocore_session_cli_factory": {
            "name": "test_can_create_botocore_session_cli_factory",
            "location": 95,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "clifactory": []
            }
        },
        "test_can_create_deletion_deployer": {
            "name": "test_can_create_deletion_deployer",
            "location": 101,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "clifactory": []
            }
        },
        "test_can_create_plan_only_deployer": {
            "name": "test_can_create_plan_only_deployer",
            "location": 107,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "clifactory": [
                    "py.path.local"
                ]
            }
        },
        "test_can_create_config_obj": {
            "name": "test_can_create_config_obj",
            "location": 115,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "clifactory": [
                    "dict"
                ]
            }
        },
        "test_can_create_config_obj_default_autogen_policy_true": {
            "name": "test_can_create_config_obj_default_autogen_policy_true",
            "location": 120,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "clifactory": [
                    "str"
                ]
            }
        },
        "test_provided_autogen_policy_overrides_config_file": {
            "name": "test_provided_autogen_policy_overrides_config_file",
            "location": 125,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "clifactory": [
                    "str"
                ]
            }
        },
        "test_can_create_config_obj_with_override_autogen": {
            "name": "test_can_create_config_obj_with_override_autogen",
            "location": 134,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "clifactory": []
            }
        },
        "test_config_file_override_autogen_policy": {
            "name": "test_config_file_override_autogen_policy",
            "location": 139,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "clifactory": [
                    "str",
                    "bytes"
                ]
            }
        },
        "test_can_create_config_obj_with_api_gateway_stage": {
            "name": "test_can_create_config_obj_with_api_gateway_stage",
            "location": 148,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "clifactory": []
            }
        },
        "test_can_create_config_obj_with_default_api_gateway_stage": {
            "name": "test_can_create_config_obj_with_default_api_gateway_stage",
            "location": 153,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "clifactory": [
                    "str"
                ]
            }
        },
        "test_cant_load_config_obj_with_bad_project": {
            "name": "test_cant_load_config_obj_with_bad_project",
            "location": 158,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "clifactory": [
                    "Optional[str]"
                ]
            }
        },
        "test_error_raised_on_unknown_config_version": {
            "name": "test_error_raised_on_unknown_config_version",
            "location": 164,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "clifactory": [
                    "str",
                    "py._path.local.LocalPath"
                ]
            }
        },
        "test_filename_and_lineno_included_in_syntax_error": {
            "name": "test_filename_and_lineno_included_in_syntax_error",
            "location": 174,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "clifactory": [
                    "str",
                    "py._path.local.LocalPath",
                    "List[str]"
                ]
            }
        },
        "test_can_import_vendor_package": {
            "name": "test_can_import_vendor_package",
            "location": 188,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "clifactory": [
                    "str",
                    "py._path.local.LocalPath",
                    "List[str]"
                ]
            }
        },
        "test_error_raised_on_invalid_config_json": {
            "name": "test_error_raised_on_invalid_config_json",
            "location": 205,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "clifactory": [
                    "str",
                    "py._path.local.LocalPath"
                ]
            }
        },
        "test_can_create_local_server": {
            "name": "test_can_create_local_server",
            "location": 215,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "clifactory": []
            }
        },
        "test_can_create_deployment_reporter": {
            "name": "test_can_create_deployment_reporter",
            "location": 224,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "clifactory": []
            }
        },
        "test_can_access_lazy_loaded_app": {
            "name": "test_can_access_lazy_loaded_app",
            "location": 230,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "clifactory": []
            }
        },
        "test_can_create_log_retriever": {
            "name": "test_can_create_log_retriever",
            "location": 235,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "clifactory": []
            }
        },
        "test_can_create_follow_logs_retriever": {
            "name": "test_can_create_follow_logs_retriever",
            "location": 245,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "clifactory": []
            }
        },
        "test_can_create_lambda_invoke_handler": {
            "name": "test_can_create_lambda_invoke_handler",
            "location": 255,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "clifactory": [
                    "py._path.local.LocalPath",
                    "str",
                    "py.path.local"
                ]
            }
        },
        "test_does_raise_not_found_error_when_no_function_found": {
            "name": "test_does_raise_not_found_error_when_no_function_found",
            "location": 278,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "clifactory": [
                    "Iterable",
                    "Optional[str]",
                    "str",
                    "Mapping[str, Any]",
                    "bytes",
                    "bool",
                    "int"
                ],
                "no_deployed_values": [
                    "bool",
                    "str",
                    "Type[T]",
                    "typing.Type"
                ]
            }
        },
        "test_does_raise_not_found_error_when_resource_is_not_lambda": {
            "name": "test_does_raise_not_found_error_when_resource_is_not_lambda",
            "location": 285,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "clifactory": [
                    "str",
                    "bytes",
                    "py._path.local.LocalPath"
                ]
            }
        },
        "test_can_create_package_options": {
            "name": "test_can_create_package_options",
            "location": 305,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "clifactory": [
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ]
            }
        }
    },
    "chalice-master/tests/functional/cli/test_reloader.py": {
        "modify_file_after_n_seconds": {
            "name": "modify_file_after_n_seconds",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bool"
                ],
                "contents": [
                    "str",
                    "bool"
                ],
                "delay": [
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "delete_file_after_n_seconds": {
            "name": "delete_file_after_n_seconds",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "delay": [
                    "float",
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "modify_file": {
            "name": "modify_file",
            "location": 37,
            "return": [
                "None",
                "Set[str]",
                "str",
                "Tuple[int, str]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Optional[str]",
                    "list[str]",
                    "typing.TextIO",
                    "Union[str, List[str]]",
                    "typing.IO",
                    "Optional[TextIO]",
                    "IO[bytes]"
                ],
                "contents": [
                    "str",
                    "bytes"
                ]
            }
        },
        "assert_reload_happens": {
            "name": "assert_reload_happens",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "root_dir": [
                    "bool",
                    "str",
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "None",
                    "Optional[str]"
                ],
                "when_modified_file": [
                    "str",
                    "IO[Any]",
                    "typing.IO",
                    "Callable[[], str]",
                    "typing.Callable[[], str]"
                ],
                "using_worker_class": [
                    "int",
                    "typing.Iterable[typing.Callable[, ]]",
                    "str",
                    "bool",
                    "Iterable[Callable]",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "get_worker_cls": {
            "name": "get_worker_cls",
            "location": 57,
            "return": [
                "str",
                "Iterable[int]",
                "dict"
            ],
            "arguments": {
                "worker_class_name": [
                    "str",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "test_can_reload_when_file_created": {
            "name": "test_can_reload_when_file_created",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "worker_class_type": [
                    "str",
                    "Iterable[str]",
                    "typing.Iterable[str]",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_can_reload_when_subdir_file_created": {
            "name": "test_can_reload_when_subdir_file_created",
            "location": 78,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ],
                "worker_class_type": [
                    "str"
                ]
            }
        },
        "test_can_reload_when_file_modified": {
            "name": "test_can_reload_when_file_modified",
            "location": 85,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "TextIO"
                ],
                "worker_class_type": [
                    "str"
                ]
            }
        },
        "test_can_reload_when_file_removed": {
            "name": "test_can_reload_when_file_removed",
            "location": 98,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "TextIO"
                ],
                "worker_class_type": [
                    "str"
                ]
            }
        },
        "test_rc_0_when_no_file_modified": {
            "name": "test_rc_0_when_no_file_modified",
            "location": 108,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "Dict[str, List[str]]",
                    "str",
                    "dict[str, list[str]]"
                ],
                "worker_class_type": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "chalice-master/tests/functional/cli/__init__.py": {},
    "chalice-master/tests/functional/envapp/app.py": {
        "index": {
            "name": "index",
            "location": 14,
            "return": [
                "dict[typing.Text, ]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "chalice-master/tests/integration/conftest.py": {
        "ensure_no_local_config": {
            "name": "ensure_no_local_config",
            "location": 5,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "no_local_config": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "chalice-master/tests/integration/test_cli.py": {
        "local_app": {
            "name": "local_app",
            "location": 16,
            "return": [
                "",
                "typing.Generator[str]"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "cmk.utils.type_defs.HostName",
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "None"
                ]
            }
        },
        "test_stack_trace_printed_on_error": {
            "name": "test_stack_trace_printed_on_error",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "local_app": [
                    "str"
                ]
            }
        }
    },
    "chalice-master/tests/integration/test_package.py": {
        "cd": {
            "name": "cd",
            "location": 20,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "runner": {
            "name": "runner",
            "location": 30,
            "return": [
                "CliRunner",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "app_skeleton": {
            "name": "app_skeleton",
            "location": 35,
            "return": [
                "str",
                "Sequence[str]",
                "Optional[str]"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ],
                "runner": []
            }
        },
        "_get_random_package_name": {
            "name": "_get_random_package_name",
            "location": 42,
            "return": [
                "typing.Text",
                "str",
                "dict"
            ],
            "arguments": {}
        },
        "test_package_install_smoke_tests": {
            "name": "test_package_install_smoke_tests",
            "location": 81,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "package": [],
                "contents": [],
                "runner": [],
                "app_skeleton": []
            }
        },
        "assert_can_package_dependency": {
            "name": "assert_can_package_dependency",
            "location": 85,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "runner": [
                    "list[tuple[typing.Union[int,int,float]]]",
                    "bool",
                    "List[Tuple[int, int, float]]",
                    "tsrc.teshelpers.cli.CLI"
                ],
                "app_skeleton": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "package": [],
                "contents": [
                    "bool"
                ]
            }
        },
        "TestPackage.test_can_package_with_dashes_in_name": {
            "name": "test_can_package_with_dashes_in_name",
            "location": 109,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "runner": [],
                "app_skeleton": [],
                "no_local_config": [
                    "str"
                ]
            }
        },
        "TestPackage.test_can_package_simplejson": {
            "name": "test_can_package_simplejson",
            "location": 120,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "runner": [],
                "app_skeleton": [],
                "no_local_config": [
                    "str"
                ]
            }
        },
        "TestPackage.test_can_package_sqlalchemy": {
            "name": "test_can_package_sqlalchemy",
            "location": 131,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "runner": [],
                "app_skeleton": [],
                "no_local_config": [
                    "str"
                ]
            }
        },
        "TestPackage.test_can_package_pandas": {
            "name": "test_can_package_pandas",
            "location": 146,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "runner": [],
                "app_skeleton": [],
                "no_local_config": [
                    "str"
                ]
            }
        },
        "TestPackage.test_does_not_package_bad_requirements_file": {
            "name": "test_does_not_package_bad_requirements_file",
            "location": 156,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "runner": [],
                "app_skeleton": [
                    "str",
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "TestPackage.test_packaging_requirements_keeps_same_hash": {
            "name": "test_packaging_requirements_keeps_same_hash",
            "location": 176,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "runner": [],
                "app_skeleton": [
                    "str",
                    "Optional[Dict]",
                    "dict[, ]",
                    "Optional[str]",
                    "None"
                ],
                "no_local_config": [
                    "str"
                ]
            }
        },
        "TestPackage.test_preserves_executable_permissions": {
            "name": "test_preserves_executable_permissions",
            "location": 193,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "runner": [],
                "app_skeleton": [
                    "str",
                    "Optional[Dict]",
                    "dict[, ]",
                    "Optional[str]",
                    "None"
                ],
                "no_local_config": [
                    "str"
                ]
            }
        },
        "TestPackage._calculate_checksum": {
            "name": "_calculate_checksum",
            "location": 213,
            "return": [
                "Mapping[str, Any]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "package_output_location": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "TestPackage._run_package_cmd": {
            "name": "_run_package_cmd",
            "location": 218,
            "return": [
                "dict",
                "set",
                "str"
            ],
            "arguments": {
                "self": [],
                "package_output_location": [
                    "float",
                    "bool",
                    "Optional[int]",
                    "None",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ],
                "app_skeleton": [
                    "float",
                    "bool",
                    "Optional[int]",
                    "None",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ],
                "cli_factory": [
                    "float",
                    "bool",
                    "Optional[int]",
                    "None",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ],
                "runner": [
                    "float",
                    "bool",
                    "Optional[int]",
                    "None",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ],
                "expected_exit_code": [
                    "int",
                    "dict",
                    "str",
                    "Dict[str, int]",
                    "Optional[\"TrackingData\"]",
                    "Mapping"
                ]
            }
        },
        "TestPackage._verify_file_is_executable": {
            "name": "_verify_file_is_executable",
            "location": 228,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "package_output_location": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "filename": [
                    "str",
                    "List[Union[Any, Any]]",
                    "list[typing.Union[typing.Any,typing.Any]]",
                    "Callable[[str], str]",
                    "typing.Callable[str, str]",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "chalice-master/tests/integration/__init__.py": {},
    "chalice-master/tests/unit/conftest.py": {
        "ensure_no_local_config": {
            "name": "ensure_no_local_config",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "no_local_config": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "sample_app": {
            "name": "sample_app",
            "location": 33,
            "return": [
                "\"App\"",
                "Chalice"
            ],
            "arguments": {}
        },
        "sample_app_with_auth": {
            "name": "sample_app_with_auth",
            "location": 44,
            "return": [
                "Chalice"
            ],
            "arguments": {}
        },
        "sample_app_schedule_only": {
            "name": "sample_app_schedule_only",
            "location": 59,
            "return": [
                "\"App\"",
                "Chalice"
            ],
            "arguments": {}
        },
        "sample_sqs_event_app": {
            "name": "sample_sqs_event_app",
            "location": 70,
            "return": [
                "\"App\"",
                "Chalice"
            ],
            "arguments": {}
        },
        "sample_kinesis_event_app": {
            "name": "sample_kinesis_event_app",
            "location": 81,
            "return": [
                "\"App\"",
                "Chalice"
            ],
            "arguments": {}
        },
        "sample_ddb_event_app": {
            "name": "sample_ddb_event_app",
            "location": 92,
            "return": [
                "\"App\"",
                "Chalice"
            ],
            "arguments": {}
        },
        "sample_app_lambda_only": {
            "name": "sample_app_lambda_only",
            "location": 103,
            "return": [
                "\"App\"",
                "Chalice"
            ],
            "arguments": {}
        },
        "sample_websocket_app": {
            "name": "sample_websocket_app",
            "location": 114,
            "return": [
                "\"App\"",
                "Chalice"
            ],
            "arguments": {}
        },
        "sample_s3_event_app": {
            "name": "sample_s3_event_app",
            "location": 133,
            "return": [
                "\"App\"",
                "Chalice"
            ],
            "arguments": {}
        },
        "sample_sns_event_app": {
            "name": "sample_sns_event_app",
            "location": 144,
            "return": [
                "\"App\"",
                "Chalice"
            ],
            "arguments": {}
        },
        "sample_cloudwatch_event_app": {
            "name": "sample_cloudwatch_event_app",
            "location": 155,
            "return": [
                "\"App\"",
                "Chalice"
            ],
            "arguments": {}
        },
        "create_event": {
            "name": "create_event",
            "location": 166,
            "return": [
                "str",
                "zerver.models.Realm",
                "solo.config.app.Config",
                "app.models.Game",
                "Callable",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "create_websocket_event": {
            "name": "create_websocket_event",
            "location": 185,
            "return": [
                "str",
                "zerver.models.Realm"
            ],
            "arguments": {}
        },
        "create_empty_header_event": {
            "name": "create_empty_header_event",
            "location": 203,
            "return": [
                "str",
                "dict",
                "zerver.models.Realm"
            ],
            "arguments": {}
        },
        "create_event_with_body": {
            "name": "create_event_with_body",
            "location": 221,
            "return": [
                "str",
                "Dict[str, Any]",
                "solo.config.app.Config",
                "zerver.models.Realm",
                "app.contexts.AuthContext"
            ],
            "arguments": {
                "create_event": [
                    "bool",
                    "str",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "List[str]",
                    "list[str]",
                    "List[aw_core.models.Event]",
                    "list[aw_core.models.Event]",
                    "Callable",
                    "typing.Callable[, ]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "lambda_function": {
            "name": "lambda_function",
            "location": 233,
            "return": [
                "Optional[db.models.Taxon]",
                "Optional[str]",
                "str"
            ],
            "arguments": {}
        },
        "sample_app.foo": {
            "name": "foo",
            "location": 37,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "sample_app_with_auth.myauth": {
            "name": "myauth",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "auth_request": []
            }
        },
        "sample_app_with_auth.foo": {
            "name": "foo",
            "location": 52,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "sample_app_schedule_only.cron": {
            "name": "cron",
            "location": 63,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "str",
                    "tonga.models.records.command.command.BaseCommand"
                ]
            }
        },
        "sample_sqs_event_app.handler": {
            "name": "handler",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "sample_kinesis_event_app.handler": {
            "name": "handler",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "sample_ddb_event_app.handler": {
            "name": "handler",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "sample_app_lambda_only.myfunction": {
            "name": "myfunction",
            "location": 107,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "str",
                    "tonga.models.records.command.command.BaseCommand"
                ],
                "context": [
                    "str",
                    "tonga.models.records.command.command.BaseCommand"
                ]
            }
        },
        "sample_websocket_app.connect": {
            "name": "connect",
            "location": 118,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "sample_websocket_app.message": {
            "name": "message",
            "location": 122,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "sample_websocket_app.disconnect": {
            "name": "disconnect",
            "location": 126,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "sample_s3_event_app.handler": {
            "name": "handler",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "sample_sns_event_app.handler": {
            "name": "handler",
            "location": 148,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "str",
                    "tonga.models.records.command.command.BaseCommand"
                ]
            }
        },
        "sample_cloudwatch_event_app.foo": {
            "name": "foo",
            "location": 159,
            "return": [
                "dict[, ]",
                "str",
                "solo.config.app.Config",
                "app.models.dto.ClientInfo",
                "List[str]",
                "zerver.models.Realm"
            ],
            "arguments": {
                "event": [
                    "str",
                    "tonga.models.records.command.command.BaseCommand"
                ]
            }
        },
        "create_event.create_event_inner": {
            "name": "create_event_inner",
            "location": 167,
            "return": [
                "dict[typing.Text, typing.Union[dict[typing.Text, typing.Text],None,typing.Text]]"
            ],
            "arguments": {
                "uri": [],
                "method": [],
                "path": [],
                "content_type": [
                    "typing.Text"
                ]
            }
        },
        "create_websocket_event.create_event_inner": {
            "name": "create_event_inner",
            "location": 186,
            "return": [
                "dict[typing.Text, typing.Union[dict[typing.Text, typing.Text],None,typing.Text]]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "route_key": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "List[str]"
                ],
                "body": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "List[str]"
                ],
                "endpoint": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "create_empty_header_event.create_empty_header_event_inner": {
            "name": "create_empty_header_event_inner",
            "location": 204,
            "return": [
                "dict[typing.Text, typing.Union[dict[typing.Text, ],None,typing.Text]]"
            ],
            "arguments": {
                "uri": [
                    "Optional[str]",
                    "str"
                ],
                "method": [
                    "Optional[str]",
                    "str"
                ],
                "path": [
                    "Optional[str]",
                    "str"
                ],
                "content_type": [
                    "typing.Text",
                    "bool",
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "Optional[str]"
                ]
            }
        },
        "create_event_with_body.create_event_with_body_inner": {
            "name": "create_event_with_body_inner",
            "location": 222,
            "return": [
                "dict",
                "Dict[str, Any]",
                "app.models.dto.ClientInfo",
                "Tuple[int, int]",
                "int"
            ],
            "arguments": {
                "body": [
                    "str",
                    "Callable"
                ],
                "uri": [
                    "str",
                    "typing.Text"
                ],
                "method": [
                    "str",
                    "typing.Text"
                ],
                "content_type": [
                    "str",
                    "typing.Text"
                ]
            }
        }
    },
    "chalice-master/tests/unit/test_analyzer.py": {
        "aws_calls": {
            "name": "aws_calls",
            "location": 13,
            "return": [
                "str",
                "Iterable[str]",
                "Tuple[str]"
            ],
            "arguments": {
                "source_code": [
                    "int",
                    "str"
                ]
            }
        },
        "chalice_aws_calls": {
            "name": "chalice_aws_calls",
            "location": 19,
            "return": [
                "str",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "source_code": [
                    "int",
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "known_types_for_module": {
            "name": "known_types_for_module",
            "location": 25,
            "return": [
                "int",
                "typing.Pattern",
                "bool",
                "float",
                "str",
                "typing.Match",
                "None"
            ],
            "arguments": {
                "source_code": [
                    "int",
                    "str",
                    "bytes",
                    "List[int]",
                    "list[int]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "known_types_for_function": {
            "name": "known_types_for_function",
            "location": 34,
            "return": [
                "int",
                "str",
                "bool",
                "list[str]",
                "typing.Type",
                "tuple[typing.Union[str,str,str,str,str,str,str,str,str]]",
                "dict[typing.Any, list[str]]"
            ],
            "arguments": {
                "source_code": [
                    "int",
                    "str",
                    "bytes",
                    "List[int]",
                    "list[int]"
                ],
                "name": [
                    "str",
                    "Type",
                    "typing.Type",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_can_analyze_chalice_app": {
            "name": "test_can_analyze_chalice_app",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_inferred_module_type": {
            "name": "test_inferred_module_type",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_recursive_function_none": {
            "name": "test_recursive_function_none",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_recursive_comprehension_none": {
            "name": "test_recursive_comprehension_none",
            "location": 75,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_recursive_function_client_calls": {
            "name": "test_recursive_function_client_calls",
            "location": 84,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_mutual_recursion": {
            "name": "test_mutual_recursion",
            "location": 94,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_inferred_module_type_tracks_assignment": {
            "name": "test_inferred_module_type_tracks_assignment",
            "location": 111,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_inferred_module_type_tracks_multi_assignment": {
            "name": "test_inferred_module_type_tracks_multi_assignment",
            "location": 119,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_inferred_client_create_type": {
            "name": "test_inferred_client_create_type",
            "location": 129,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_inferred_client_type": {
            "name": "test_inferred_client_type",
            "location": 137,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_inferred_client_type_each_part": {
            "name": "test_inferred_client_type_each_part",
            "location": 145,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_infer_client_method": {
            "name": "test_infer_client_method",
            "location": 155,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_infer_client_method_called": {
            "name": "test_infer_client_method_called",
            "location": 163,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_infer_type_on_function_scope": {
            "name": "test_infer_type_on_function_scope",
            "location": 171,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_understand_return_types": {
            "name": "test_can_understand_return_types",
            "location": 184,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_type_equality": {
            "name": "test_type_equality",
            "location": 198,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_single_call": {
            "name": "test_single_call",
            "location": 215,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_multiple_calls": {
            "name": "test_multiple_calls",
            "location": 223,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_multiple_services": {
            "name": "test_multiple_services",
            "location": 232,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_basic_aliasing": {
            "name": "test_basic_aliasing",
            "location": 244,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_multiple_aliasing": {
            "name": "test_multiple_aliasing",
            "location": 253,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_multiple_aliasing_non_chained": {
            "name": "test_multiple_aliasing_non_chained",
            "location": 264,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_no_calls_found": {
            "name": "test_no_calls_found",
            "location": 275,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_original_name_replaced": {
            "name": "test_original_name_replaced",
            "location": 281,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_multiple_targets": {
            "name": "test_multiple_targets",
            "location": 292,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_in_function": {
            "name": "test_in_function",
            "location": 301,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_ignores_built_in_scope": {
            "name": "test_ignores_built_in_scope",
            "location": 311,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_understands_scopes": {
            "name": "test_understands_scopes",
            "location": 325,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_function_return_types": {
            "name": "test_function_return_types",
            "location": 335,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_propagates_return_types": {
            "name": "test_propagates_return_types",
            "location": 344,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_decorator_list_is_ignored": {
            "name": "test_decorator_list_is_ignored",
            "location": 357,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_map_function_params": {
            "name": "test_can_map_function_params",
            "location": 373,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_understand_shadowed_vars_from_func_arg": {
            "name": "test_can_understand_shadowed_vars_from_func_arg",
            "location": 384,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_understand_shadowed_vars_from_local_scope": {
            "name": "test_can_understand_shadowed_vars_from_local_scope",
            "location": 394,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_map_function_with_multiple_args": {
            "name": "test_can_map_function_with_multiple_args",
            "location": 405,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_multiple_function_calls": {
            "name": "test_multiple_function_calls",
            "location": 418,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_lookup_var_names_to_functions": {
            "name": "test_can_lookup_var_names_to_functions",
            "location": 433,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_map_string_literals_across_scopes": {
            "name": "test_map_string_literals_across_scopes",
            "location": 442,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_handle_lambda_keyword": {
            "name": "test_can_handle_lambda_keyword",
            "location": 456,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_dict_comp_with_no_client_calls": {
            "name": "test_dict_comp_with_no_client_calls",
            "location": 467,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_handle_gen_expr": {
            "name": "test_can_handle_gen_expr",
            "location": 474,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_detect_calls_in_gen_expr": {
            "name": "test_can_detect_calls_in_gen_expr",
            "location": 481,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_handle_gen_from_call": {
            "name": "test_can_handle_gen_from_call",
            "location": 490,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_detect_calls_in_multiple_gen_exprs": {
            "name": "test_can_detect_calls_in_multiple_gen_exprs",
            "location": 499,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_multiple_gen_exprs": {
            "name": "test_multiple_gen_exprs",
            "location": 508,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_handle_list_expr_with_api_calls": {
            "name": "test_can_handle_list_expr_with_api_calls",
            "location": 515,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_handle_multiple_listcomps": {
            "name": "test_can_handle_multiple_listcomps",
            "location": 523,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_analyze_lambda_function": {
            "name": "test_can_analyze_lambda_function",
            "location": 534,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_analyze_schedule": {
            "name": "test_can_analyze_schedule",
            "location": 547,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_analyze_combination": {
            "name": "test_can_analyze_combination",
            "location": 560,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_handle_dict_comp": {
            "name": "test_can_handle_dict_comp",
            "location": 589,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_handle_dict_comp_if": {
            "name": "test_can_handle_dict_comp_if",
            "location": 597,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_handle_comp_ifs": {
            "name": "test_can_handle_comp_ifs",
            "location": 605,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_handle_dict_comp_ifs": {
            "name": "test_can_handle_dict_comp_ifs",
            "location": 611,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_handle_async_await": {
            "name": "test_can_handle_async_await",
            "location": 627,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_analyze_custom_auth": {
            "name": "test_can_analyze_custom_auth",
            "location": 639,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_analyze_s3_events": {
            "name": "test_can_analyze_s3_events",
            "location": 654,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_analyze_sns_events": {
            "name": "test_can_analyze_sns_events",
            "location": 669,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_analyze_sqs_events": {
            "name": "test_can_analyze_sqs_events",
            "location": 684,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_analyze_transfer_manager_methods": {
            "name": "test_can_analyze_transfer_manager_methods",
            "location": 699,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_handle_replacing_function_name": {
            "name": "test_can_handle_replacing_function_name",
            "location": 714,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_handle_multiple_shadowing": {
            "name": "test_can_handle_multiple_shadowing",
            "location": 731,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_handle_forward_declaration": {
            "name": "test_can_handle_forward_declaration",
            "location": 752,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_handle_post_declaration": {
            "name": "test_can_handle_post_declaration",
            "location": 769,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_handle_shadowed_declaration": {
            "name": "test_can_handle_shadowed_declaration",
            "location": 786,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "chalice-master/tests/unit/test_app.py": {
        "view_function": {
            "name": "view_function",
            "location": 155,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "create_request_with_content_type": {
            "name": "create_request_with_content_type",
            "location": 160,
            "return": [
                "Request",
                "str",
                "int"
            ],
            "arguments": {
                "content_type": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Callable[[T], bool]",
                    "typing.Callable[T, bool]"
                ]
            }
        },
        "assert_response_body_is": {
            "name": "assert_response_body_is",
            "location": 177,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "response": [
                    "tuple[typing.Union[int,int]]",
                    "str",
                    "requests.Response",
                    "scrapy.http.Response",
                    "Tuple[int, int]"
                ],
                "body": [
                    "tuple[typing.Union[int,int]]",
                    "str",
                    "requests.Response",
                    "scrapy.http.Response",
                    "Tuple[int, int]"
                ]
            }
        },
        "json_response_body": {
            "name": "json_response_body",
            "location": 181,
            "return": [
                "Optional[str]",
                "dict",
                "bool",
                "str"
            ],
            "arguments": {
                "response": [
                    "bytes",
                    "str",
                    "dict",
                    "Type[Any]",
                    "werkzeug.wrappers.Response",
                    "Sequence"
                ]
            }
        },
        "assert_requires_opt_in": {
            "name": "assert_requires_opt_in",
            "location": 185,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [],
                "flag": [
                    "str",
                    "bytes",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "websocket_handler_for_route": {
            "name": "websocket_handler_for_route",
            "location": 200,
            "return": [
                "WebsocketEventSourceHandler",
                "float",
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "route": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "app": []
            }
        },
        "sample_app": {
            "name": "sample_app",
            "location": 208,
            "return": [
                "Callable",
                "str",
                "bool",
                "List[dict]",
                "int",
                "float",
                "datetime.date"
            ],
            "arguments": {}
        },
        "sample_app_with_cors": {
            "name": "sample_app_with_cors",
            "location": 223,
            "return": [
                "Callable",
                "str",
                "bool",
                "List[dict]",
                "int",
                "float",
                "datetime.date"
            ],
            "arguments": {}
        },
        "sample_app_with_default_cors": {
            "name": "sample_app_with_default_cors",
            "location": 235,
            "return": [
                "bool",
                "Optional[BaseException]"
            ],
            "arguments": {}
        },
        "sample_websocket_app": {
            "name": "sample_websocket_app",
            "location": 258,
            "return": [
                "tuple[list[]]",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "sample_middleware_app": {
            "name": "sample_middleware_app",
            "location": 283,
            "return": [
                "str",
                "Callable",
                "bool",
                "int",
                "Dict[str, int]"
            ],
            "arguments": {}
        },
        "auth_request": {
            "name": "auth_request",
            "location": 351,
            "return": [
                "int",
                "Optional[Dict[str, Any]]",
                "Optional[Tuple[int, int]]"
            ],
            "arguments": {}
        },
        "test_invalid_binary_response_body_throws_value_error": {
            "name": "test_invalid_binary_response_body_throws_value_error",
            "location": 361,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "bool",
                    "neuromation.api.Client"
                ]
            }
        },
        "test_invalid_JSON_response_body_throws_type_error": {
            "name": "test_invalid_JSON_response_body_throws_type_error",
            "location": 371,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "int",
                    "str",
                    "abilian.app.Application",
                    "app.GrpyApp"
                ]
            }
        },
        "test_can_encode_binary_body_as_base64": {
            "name": "test_can_encode_binary_body_as_base64",
            "location": 381,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "bool",
                    "app.App",
                    "neuromation.api.Client"
                ]
            }
        },
        "test_can_return_unicode_body": {
            "name": "test_can_return_unicode_body",
            "location": 391,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "str",
                    "int",
                    "abilian.app.Application"
                ]
            }
        },
        "test_can_encode_binary_body_with_header_charset": {
            "name": "test_can_encode_binary_body_with_header_charset",
            "location": 401,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "bool",
                    "app.App"
                ]
            }
        },
        "test_can_encode_binary_json": {
            "name": "test_can_encode_binary_json",
            "location": 411,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "dict",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "test_wildcard_accepts_with_native_python_types_serializes_json": {
            "name": "test_wildcard_accepts_with_native_python_types_serializes_json",
            "location": 422,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "str",
                    "routemaster.app.App"
                ],
                "create_event": [
                    "int"
                ]
            }
        },
        "test_wildcard_accepts_with_response_class": {
            "name": "test_wildcard_accepts_with_response_class",
            "location": 441,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "str"
                ],
                "create_event": [
                    "int"
                ]
            }
        },
        "test_can_parse_route_view_args": {
            "name": "test_can_parse_route_view_args",
            "location": 460,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_route_single_view": {
            "name": "test_can_route_single_view",
            "location": 466,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_handle_multiple_routes": {
            "name": "test_can_handle_multiple_routes",
            "location": 478,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_error_on_unknown_event": {
            "name": "test_error_on_unknown_event",
            "location": 496,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "app.GrpyApp"
                ]
            }
        },
        "test_can_route_api_call_to_view_function": {
            "name": "test_can_route_api_call_to_view_function",
            "location": 503,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "str",
                    "routemaster.app.App"
                ],
                "create_event": [
                    "int"
                ]
            }
        },
        "test_can_call_to_dict_on_current_request": {
            "name": "test_can_call_to_dict_on_current_request",
            "location": 509,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "dict[, ]",
                    "dict",
                    "clienmodels.Client"
                ],
                "create_event": [
                    "int"
                ]
            }
        },
        "test_can_call_to_dict_on_request_with_querystring": {
            "name": "test_can_call_to_dict_on_request_with_querystring",
            "location": 525,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "dict[, ]",
                    "dict",
                    "clienmodels.Client"
                ],
                "create_event": [
                    "int"
                ]
            }
        },
        "test_request_to_dict_does_not_contain_internal_attrs": {
            "name": "test_request_to_dict_does_not_contain_internal_attrs",
            "location": 550,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "dict[, ]",
                    "clienmodels.Client",
                    "dict"
                ],
                "create_event": [
                    "int",
                    "str"
                ]
            }
        },
        "test_will_pass_captured_params_to_view": {
            "name": "test_will_pass_captured_params_to_view",
            "location": 561,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "str",
                    "routemaster.app.App"
                ],
                "create_event": [
                    "int"
                ]
            }
        },
        "test_error_on_unsupported_method": {
            "name": "test_error_on_unsupported_method",
            "location": 568,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "create_event": [
                    "str"
                ]
            }
        },
        "test_error_on_unsupported_method_gives_feedback_on_method": {
            "name": "test_error_on_unsupported_method_gives_feedback_on_method",
            "location": 576,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "create_event": []
            }
        },
        "test_error_contains_cors_headers": {
            "name": "test_error_contains_cors_headers",
            "location": 584,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app_with_cors": [
                    "str"
                ],
                "create_event": [
                    "int"
                ]
            }
        },
        "test_can_access_context": {
            "name": "test_can_access_context",
            "location": 611,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "create_event": [
                    "str",
                    "int"
                ]
            }
        },
        "test_can_access_raw_body": {
            "name": "test_can_access_raw_body",
            "location": 627,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "create_event": [
                    "str",
                    "int"
                ]
            }
        },
        "test_raw_body_cache_returns_same_result": {
            "name": "test_raw_body_cache_returns_same_result",
            "location": 641,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "create_event": [
                    "int"
                ]
            }
        },
        "test_can_have_views_of_same_route_but_different_methods": {
            "name": "test_can_have_views_of_same_route_but_different_methods",
            "location": 661,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "create_event": []
            }
        },
        "test_error_on_duplicate_route_methods": {
            "name": "test_error_on_duplicate_route_methods",
            "location": 684,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_json_body_available_with_right_content_type": {
            "name": "test_json_body_available_with_right_content_type",
            "location": 697,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "create_event": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_json_body_none_with_malformed_json": {
            "name": "test_json_body_none_with_malformed_json",
            "location": 712,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "create_event": [
                    "str",
                    "int",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        },
        "test_cant_access_json_body_with_wrong_content_type": {
            "name": "test_cant_access_json_body_with_wrong_content_type",
            "location": 727,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "create_event": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "test_json_body_available_on_multiple_content_types": {
            "name": "test_json_body_available_on_multiple_content_types",
            "location": 744,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "create_event_with_body": [
                    "str",
                    "Optional[arxiv.submission.Client]",
                    "None"
                ]
            }
        },
        "test_json_body_available_with_lowercase_content_type_key": {
            "name": "test_json_body_available_with_lowercase_content_type_key",
            "location": 771,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "create_event_with_body": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "test_content_types_must_be_lists": {
            "name": "test_content_types_must_be_lists",
            "location": 789,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_content_type_validation_raises_error_on_unknown_types": {
            "name": "test_content_type_validation_raises_error_on_unknown_types",
            "location": 798,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "create_event": [
                    "str",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_content_type_with_charset": {
            "name": "test_content_type_with_charset",
            "location": 814,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "create_event": [
                    "str"
                ]
            }
        },
        "test_can_return_response_object": {
            "name": "test_can_return_response_object",
            "location": 826,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "create_event": [
                    "int",
                    "str"
                ]
            }
        },
        "test_headers_have_basic_validation": {
            "name": "test_headers_have_basic_validation",
            "location": 851,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "create_event": [
                    "int",
                    "str"
                ]
            }
        },
        "test_empty_headers_have_basic_validation": {
            "name": "test_empty_headers_have_basic_validation",
            "location": 867,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "create_empty_header_event": [
                    "str",
                    "app.models.user.User",
                    "app.models.User"
                ]
            }
        },
        "test_no_content_type_is_still_allowed": {
            "name": "test_no_content_type_is_still_allowed",
            "location": 880,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "create_event": [
                    "str",
                    "int",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        },
        "test_can_base64_encode_binary_multiple_media_types": {
            "name": "test_can_base64_encode_binary_multiple_media_types",
            "location": 913,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "create_event": [
                    "Callable[[Dict], None]",
                    "typing.Callable[dict[, ], None]"
                ],
                "content_type": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "IO",
                    "typing.IO"
                ],
                "accept": [
                    "int"
                ]
            }
        },
        "test_can_return_text_even_with_binary_content_type_configured": {
            "name": "test_can_return_text_even_with_binary_content_type_configured",
            "location": 933,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "create_event": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_route_equality": {
            "name": "test_route_equality",
            "location": 952,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "view_function": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_route_inequality": {
            "name": "test_route_inequality",
            "location": 970,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "view_function": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_exceptions_raised_as_chalice_errors": {
            "name": "test_exceptions_raised_as_chalice_errors",
            "location": 989,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "str"
                ],
                "create_event": []
            }
        },
        "test_original_exception_raised_in_debug_mode": {
            "name": "test_original_exception_raised_in_debug_mode",
            "location": 1005,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "str"
                ],
                "create_event": [
                    "int"
                ]
            }
        },
        "test_chalice_view_errors_propagate_in_non_debug_mode": {
            "name": "test_chalice_view_errors_propagate_in_non_debug_mode",
            "location": 1021,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "str"
                ],
                "create_event": [
                    "str"
                ]
            }
        },
        "test_chalice_view_errors_propagate_in_debug_mode": {
            "name": "test_chalice_view_errors_propagate_in_debug_mode",
            "location": 1033,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "bool",
                    "IO[str]",
                    "typing.IO"
                ],
                "create_event": []
            }
        },
        "test_case_insensitive_mapping": {
            "name": "test_case_insensitive_mapping",
            "location": 1045,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_unknown_kwargs_raise_error": {
            "name": "test_unknown_kwargs_raise_error",
            "location": 1054,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "bool"
                ],
                "create_event": [
                    "bool"
                ]
            }
        },
        "test_name_kwargs_does_not_raise_error": {
            "name": "test_name_kwargs_does_not_raise_error",
            "location": 1061,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "str",
                    "int",
                    "app.GrpyApp",
                    "abilian.app.Application"
                ]
            }
        },
        "test_default_logging_handlers_created": {
            "name": "test_default_logging_handlers_created",
            "location": 1070,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_default_logging_only_added_once": {
            "name": "test_default_logging_only_added_once",
            "location": 1081,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_logs_can_be_disabled": {
            "name": "test_logs_can_be_disabled",
            "location": 1095,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_json_body_available_when_content_type_matches": {
            "name": "test_json_body_available_when_content_type_matches",
            "location": 1108,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "content_type": [],
                "is_json": [
                    "clienmodels.Client"
                ]
            }
        },
        "test_can_receive_binary_data": {
            "name": "test_can_receive_binary_data",
            "location": 1116,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "create_event_with_body": [
                    "str",
                    "Union[int, str]",
                    "int"
                ]
            }
        },
        "test_cannot_receive_base64_string_with_binary_response": {
            "name": "test_cannot_receive_base64_string_with_binary_response",
            "location": 1138,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "create_event_with_body": [
                    "str"
                ]
            }
        },
        "test_can_serialize_cognito_auth": {
            "name": "test_can_serialize_cognito_auth",
            "location": 1156,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_serialize_iam_auth": {
            "name": "test_can_serialize_iam_auth",
            "location": 1171,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_typecheck_list_type": {
            "name": "test_typecheck_list_type",
            "location": 1181,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_serialize_custom_authorizer": {
            "name": "test_can_serialize_custom_authorizer",
            "location": 1187,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_handle_builtin_auth": {
            "name": "test_can_handle_builtin_auth",
            "location": 1241,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_builtin_auth_can_transform_event": {
            "name": "test_builtin_auth_can_transform_event",
            "location": 1259,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_return_auth_dict_directly": {
            "name": "test_can_return_auth_dict_directly",
            "location": 1282,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_specify_extra_auth_attributes": {
            "name": "test_can_specify_extra_auth_attributes",
            "location": 1309,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_validation_raised_on_unknown_kwargs": {
            "name": "test_validation_raised_on_unknown_kwargs",
            "location": 1321,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_return_auth_response": {
            "name": "test_can_return_auth_response",
            "location": 1330,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_auth_response_with_colon_chars": {
            "name": "test_auth_response_with_colon_chars",
            "location": 1361,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_auth_response_serialization": {
            "name": "test_auth_response_serialization",
            "location": 1392,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_auth_response_can_include_context": {
            "name": "test_auth_response_can_include_context",
            "location": 1415,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "auth_request": [
                    "str",
                    "bool",
                    "List[list]",
                    "list[list[]]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_can_use_auth_routes_instead_of_strings": {
            "name": "test_can_use_auth_routes_instead_of_strings",
            "location": 1421,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "auth_request": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_auth_response_wildcard": {
            "name": "test_auth_response_wildcard",
            "location": 1442,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "auth_request": [
                    "str",
                    "bool",
                    "List[list]",
                    "list[list[]]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_auth_response_wildcard_string": {
            "name": "test_auth_response_wildcard_string",
            "location": 1457,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "auth_request": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "test_can_mix_auth_routes_and_strings": {
            "name": "test_can_mix_auth_routes_and_strings",
            "location": 1471,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "auth_request": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "None",
                    "list[str]"
                ]
            }
        },
        "test_root_resource": {
            "name": "test_root_resource",
            "location": 1490,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "auth_request": [
                    "Mapping[str, str]",
                    "typing.Mapping",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_can_register_scheduled_event_with_str": {
            "name": "test_can_register_scheduled_event_with_str",
            "location": 1510,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": []
            }
        },
        "test_can_register_scheduled_event_with_rate": {
            "name": "test_can_register_scheduled_event_with_rate",
            "location": 1522,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": []
            }
        },
        "test_can_register_scheduled_event_with_event": {
            "name": "test_can_register_scheduled_event_with_event",
            "location": 1537,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": []
            }
        },
        "test_rule_object_converts_to_str": {
            "name": "test_rule_object_converts_to_str",
            "location": 1560,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "value": [
                    "Container[T]",
                    "typing.Container",
                    "List[Tuple[Any, Any]]",
                    "list[tuple[typing.Union[typing.Any,typing.Any]]]"
                ],
                "unit": [
                    "Container[T]",
                    "typing.Container",
                    "List[Tuple[Any, Any]]",
                    "list[tuple[typing.Union[typing.Any,typing.Any]]]"
                ],
                "expected": [
                    "Container[T]",
                    "typing.Container",
                    "List[Tuple[Any, Any]]",
                    "list[tuple[typing.Union[typing.Any,typing.Any]]]"
                ]
            }
        },
        "test_cron_expression_converts_to_str": {
            "name": "test_cron_expression_converts_to_str",
            "location": 1583,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "minutes": [],
                "hours": [],
                "day_of_month": [],
                "month": [],
                "day_of_week": [],
                "year": [],
                "expected": []
            }
        },
        "test_can_map_schedule_event_dict_to_object": {
            "name": "test_can_map_schedule_event_dict_to_object",
            "location": 1595,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "app.GrpyApp"
                ]
            }
        },
        "test_can_create_cwe_event_handler": {
            "name": "test_can_create_cwe_event_handler",
            "location": 1634,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "int",
                    "str"
                ]
            }
        },
        "test_can_map_cwe_event_dict_to_object": {
            "name": "test_can_map_cwe_event_dict_to_object",
            "location": 1647,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "app.GrpyApp"
                ]
            }
        },
        "test_pure_lambda_function_direct_mapping": {
            "name": "test_pure_lambda_function_direct_mapping",
            "location": 1680,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "int",
                    "str",
                    "abilian.app.Application"
                ]
            }
        },
        "test_pure_lambda_functions_are_registered_in_app": {
            "name": "test_pure_lambda_functions_are_registered_in_app",
            "location": 1690,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": []
            }
        },
        "test_aws_execution_env_set": {
            "name": "test_aws_execution_env_set",
            "location": 1701,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_use_out_of_order_args": {
            "name": "test_can_use_out_of_order_args",
            "location": 1709,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "create_event": [
                    "str",
                    "int",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        },
        "test_ensure_debug_mode_is_false_by_default": {
            "name": "test_ensure_debug_mode_is_false_by_default",
            "location": 1722,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_explicitly_set_debug_false_in_initializer": {
            "name": "test_can_explicitly_set_debug_false_in_initializer",
            "location": 1732,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_set_debug_mode_in_initialzier": {
            "name": "test_can_set_debug_mode_in_initialzier",
            "location": 1738,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_debug_mode_changes_log_level": {
            "name": "test_debug_mode_changes_log_level",
            "location": 1744,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_internal_exception_debug_false": {
            "name": "test_internal_exception_debug_false",
            "location": 1751,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "capsys": [
                    "str",
                    "bool",
                    "baseplate.lib.metrics.Client",
                    "raven.Client",
                    "int"
                ],
                "create_event": [
                    "int"
                ]
            }
        },
        "test_raw_body_is_none_if_body_is_none": {
            "name": "test_raw_body_is_none_if_body_is_none",
            "location": 1766,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_http_request_to_dict_is_json_serializable": {
            "name": "test_http_request_to_dict_is_json_serializable",
            "location": 1784,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "http_request_event": []
            }
        },
        "test_http_response_to_dict": {
            "name": "test_http_response_to_dict",
            "location": 1810,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "body": [
                    "int",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "headers": [
                    "int",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "status_code": [
                    "int",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "test_handles_binary_responses": {
            "name": "test_handles_binary_responses",
            "location": 1820,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "body": [
                    "str"
                ],
                "content_type": [
                    "str"
                ]
            }
        },
        "test_can_create_s3_event_handler": {
            "name": "test_can_create_s3_event_handler",
            "location": 1830,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "int",
                    "str"
                ]
            }
        },
        "test_can_map_to_s3_event_object": {
            "name": "test_can_map_to_s3_event_object",
            "location": 1843,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "app.GrpyApp"
                ]
            }
        },
        "test_s3_event_urldecodes_keys": {
            "name": "test_s3_event_urldecodes_keys",
            "location": 1886,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_s3_event_urldecodes_unicode_keys": {
            "name": "test_s3_event_urldecodes_unicode_keys",
            "location": 1909,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_create_sns_handler": {
            "name": "test_can_create_sns_handler",
            "location": 1934,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "int"
                ]
            }
        },
        "test_can_map_sns_event": {
            "name": "test_can_map_sns_event",
            "location": 1946,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "app.GrpyApp"
                ]
            }
        },
        "test_can_create_sqs_handler": {
            "name": "test_can_create_sqs_handler",
            "location": 1980,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "int"
                ]
            }
        },
        "test_can_set_sqs_handler_name": {
            "name": "test_can_set_sqs_handler_name",
            "location": 1993,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "int",
                    "str"
                ]
            }
        },
        "test_can_set_sqs_handler_maximum_batching_window_in_seconds": {
            "name": "test_can_set_sqs_handler_maximum_batching_window_in_seconds",
            "location": 2003,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "int"
                ]
            }
        },
        "test_can_map_sqs_event": {
            "name": "test_can_map_sqs_event",
            "location": 2014,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "app.GrpyApp"
                ]
            }
        },
        "test_can_create_kinesis_handler": {
            "name": "test_can_create_kinesis_handler",
            "location": 2047,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "int",
                    "str"
                ]
            }
        },
        "test_can_set_kinesis_handler_maximum_batching_window": {
            "name": "test_can_set_kinesis_handler_maximum_batching_window",
            "location": 2062,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "int"
                ]
            }
        },
        "test_can_map_kinesis_event": {
            "name": "test_can_map_kinesis_event",
            "location": 2075,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "app.GrpyApp"
                ]
            }
        },
        "test_can_create_ddb_handler": {
            "name": "test_can_create_ddb_handler",
            "location": 2132,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "int",
                    "str"
                ]
            }
        },
        "test_can_set_ddb_handler_maximum_batching_window_in_seconds": {
            "name": "test_can_set_ddb_handler_maximum_batching_window_in_seconds",
            "location": 2147,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "int",
                    "str"
                ]
            }
        },
        "test_can_map_ddb_event": {
            "name": "test_can_map_ddb_event",
            "location": 2160,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "app.GrpyApp"
                ]
            }
        },
        "test_bytes_when_binary_type_is_application_json": {
            "name": "test_bytes_when_binary_type_is_application_json",
            "location": 2206,
            "return": [],
            "arguments": {}
        },
        "test_can_register_blueprint_on_app": {
            "name": "test_can_register_blueprint_on_app",
            "location": 2223,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_combine_multiple_blueprints_in_single_app": {
            "name": "test_can_combine_multiple_blueprints_in_single_app",
            "location": 2235,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_preserve_signature_on_blueprint": {
            "name": "test_can_preserve_signature_on_blueprint",
            "location": 2254,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_doc_saved_on_route": {
            "name": "test_doc_saved_on_route",
            "location": 2271,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_blueprint_docstring_is_preserved": {
            "name": "test_blueprint_docstring_is_preserved",
            "location": 2282,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_mount_apis_at_url_prefix": {
            "name": "test_can_mount_apis_at_url_prefix",
            "location": 2292,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_mount_root_url_in_blueprint": {
            "name": "test_can_mount_root_url_in_blueprint",
            "location": 2308,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_combine_lambda_functions_and_routes_in_blueprints": {
            "name": "test_can_combine_lambda_functions_and_routes_in_blueprints",
            "location": 2330,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_mount_lambda_functions_with_name_prefix": {
            "name": "test_can_mount_lambda_functions_with_name_prefix",
            "location": 2353,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_mount_event_sources_with_blueprint": {
            "name": "test_can_mount_event_sources_with_blueprint",
            "location": 2375,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_mount_all_decorators_in_blueprint": {
            "name": "test_can_mount_all_decorators_in_blueprint",
            "location": 2392,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_call_current_request_on_blueprint_when_mounted": {
            "name": "test_can_call_current_request_on_blueprint_when_mounted",
            "location": 2430,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "create_event": [
                    "int",
                    "str"
                ]
            }
        },
        "test_can_call_current_app_on_blueprint_when_mounted": {
            "name": "test_can_call_current_app_on_blueprint_when_mounted",
            "location": 2445,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "create_event": [
                    "str"
                ]
            }
        },
        "test_can_call_lambda_context_on_blueprint_when_mounted": {
            "name": "test_can_call_lambda_context_on_blueprint_when_mounted",
            "location": 2459,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "create_event": [
                    "int",
                    "str"
                ]
            }
        },
        "test_can_access_log_when_mounted": {
            "name": "test_can_access_log_when_mounted",
            "location": 2473,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "create_event": [
                    "str",
                    "int",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        },
        "test_can_add_authorizer_with_url_prefix_and_routes": {
            "name": "test_can_add_authorizer_with_url_prefix_and_routes",
            "location": 2490,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_runtime_error_if_current_request_access_on_non_registered_blueprint": {
            "name": "test_runtime_error_if_current_request_access_on_non_registered_blueprint",
            "location": 2510,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_every_decorator_added_to_blueprint": {
            "name": "test_every_decorator_added_to_blueprint",
            "location": 2516,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_multidict_raises_keyerror": {
            "name": "test_multidict_raises_keyerror",
            "location": 2535,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "input_dict": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable",
                    "typing.Callable[, ]",
                    "list",
                    "list[]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "test_multidict_pop_raises_del_error": {
            "name": "test_multidict_pop_raises_del_error",
            "location": 2542,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_multidict_getlist_does_raise_keyerror": {
            "name": "test_multidict_getlist_does_raise_keyerror",
            "location": 2548,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_multidict_returns_lastvalue": {
            "name": "test_multidict_returns_lastvalue",
            "location": 2560,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "input_dict": [
                    "dict",
                    "dict[, ]",
                    "str",
                    "Dict[str, float]",
                    "dict[str, float]"
                ]
            }
        },
        "test_multidict_returns_all_values": {
            "name": "test_multidict_returns_all_values",
            "location": 2571,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "input_dict": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "Dict[str, float]",
                    "dict[str, float]"
                ]
            }
        },
        "test_multidict_list_wont_change_source": {
            "name": "test_multidict_list_wont_change_source",
            "location": 2582,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "input_dict": [
                    "List[str]",
                    "list[str]",
                    "Mapping[int, str]",
                    "typing.Mapping",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_multidict_list_can_pop_value": {
            "name": "test_multidict_list_can_pop_value",
            "location": 2610,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "input_dict": [
                    "str",
                    "int",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "key": [
                    "int",
                    "str"
                ],
                "popped": [
                    "str",
                    "app.wikipedia.Wikipedia"
                ],
                "leftover": [
                    "int",
                    "str"
                ]
            }
        },
        "test_multidict_assignment": {
            "name": "test_multidict_assignment",
            "location": 2617,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_multidict_get_reassigned_value": {
            "name": "test_multidict_get_reassigned_value",
            "location": 2623,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_multidict_get_list_wraps_key": {
            "name": "test_multidict_get_list_wraps_key",
            "location": 2631,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_multidict_repr": {
            "name": "test_multidict_repr",
            "location": 2637,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_multidict_str": {
            "name": "test_multidict_str",
            "location": 2648,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_configure_websockets": {
            "name": "test_can_configure_websockets",
            "location": 2659,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_websocket_app": [
                    "bool"
                ]
            }
        },
        "test_websocket_event_json_body_available": {
            "name": "test_websocket_event_json_body_available",
            "location": 2668,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_websocket_app": [
                    "str"
                ],
                "create_websocket_event": [
                    "int",
                    "app.GrpyApp"
                ]
            }
        },
        "test_websocket_event_json_body_can_raise_error": {
            "name": "test_websocket_event_json_body_can_raise_error",
            "location": 2687,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_websocket_app": [],
                "create_websocket_event": [
                    "int",
                    "app.GrpyApp"
                ]
            }
        },
        "test_can_route_websocket_connect_message": {
            "name": "test_can_route_websocket_connect_message",
            "location": 2705,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_websocket_app": [],
                "create_websocket_event": []
            }
        },
        "test_can_route_websocket_connect_response_dict": {
            "name": "test_can_route_websocket_connect_response_dict",
            "location": 2724,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "create_websocket_event": [
                    "aioguardian.Client"
                ]
            }
        },
        "test_can_route_websocket_connect_response_obj": {
            "name": "test_can_route_websocket_connect_response_obj",
            "location": 2747,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "create_websocket_event": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_can_route_websocket_disconnect_message": {
            "name": "test_can_route_websocket_disconnect_message",
            "location": 2773,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_websocket_app": [],
                "create_websocket_event": []
            }
        },
        "test_can_route_websocket_default_message": {
            "name": "test_can_route_websocket_default_message",
            "location": 2792,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_websocket_app": [],
                "create_websocket_event": [
                    "int",
                    "app.GrpyApp"
                ]
            }
        },
        "test_can_configure_client_on_connect": {
            "name": "test_can_configure_client_on_connect",
            "location": 2812,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_websocket_app": [
                    "int",
                    "str"
                ],
                "create_websocket_event": [
                    "int"
                ]
            }
        },
        "test_can_configure_non_aws_partition_clients": {
            "name": "test_can_configure_non_aws_partition_clients",
            "location": 2827,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_websocket_app": [
                    "bool",
                    "str",
                    "int"
                ],
                "create_websocket_event": [
                    "int",
                    "app.GrpyApp"
                ],
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "test_uses_api_id_not_domain_name": {
            "name": "test_uses_api_id_not_domain_name",
            "location": 2849,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_websocket_app": [],
                "create_websocket_event": [
                    "int"
                ]
            }
        },
        "test_fallsback_to_session_if_needed": {
            "name": "test_fallsback_to_session_if_needed",
            "location": 2867,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_websocket_app": [
                    "str",
                    "int"
                ],
                "create_websocket_event": [
                    "int"
                ]
            }
        },
        "test_can_configure_client_on_disconnect": {
            "name": "test_can_configure_client_on_disconnect",
            "location": 2886,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_websocket_app": [
                    "int",
                    "str"
                ],
                "create_websocket_event": [
                    "int"
                ]
            }
        },
        "test_can_configure_client_on_message": {
            "name": "test_can_configure_client_on_message",
            "location": 2901,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_websocket_app": [
                    "int",
                    "str"
                ],
                "create_websocket_event": [
                    "int",
                    "app.GrpyApp"
                ]
            }
        },
        "test_does_only_configure_client_once": {
            "name": "test_does_only_configure_client_once",
            "location": 2917,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_websocket_app": [
                    "str"
                ],
                "create_websocket_event": [
                    "int",
                    "app.GrpyApp"
                ]
            }
        },
        "test_cannot_configure_client_without_session": {
            "name": "test_cannot_configure_client_without_session",
            "location": 2934,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_websocket_app": [
                    "str",
                    "int"
                ],
                "create_websocket_event": [
                    "int",
                    "app.GrpyApp"
                ]
            }
        },
        "test_cannot_send_websocket_message_without_configure": {
            "name": "test_cannot_send_websocket_message_without_configure",
            "location": 2949,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_websocket_app": [
                    "str"
                ],
                "create_websocket_event": [
                    "str",
                    "app.GrpyApp",
                    "bool",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "test_can_close_websocket_connection": {
            "name": "test_can_close_websocket_connection",
            "location": 2969,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "create_websocket_event": [
                    "str",
                    "app.GrpyApp"
                ]
            }
        },
        "test_close_does_fail_if_already_disconnected": {
            "name": "test_close_does_fail_if_already_disconnected",
            "location": 2989,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "create_websocket_event": [
                    "str",
                    "app.GrpyApp",
                    "dict[, ]",
                    "dict"
                ]
            }
        },
        "test_info_does_fail_if_already_disconnected": {
            "name": "test_info_does_fail_if_already_disconnected",
            "location": 3011,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "create_websocket_event": [
                    "str"
                ]
            }
        },
        "test_can__about_websocket_connection": {
            "name": "test_can__about_websocket_connection",
            "location": 3033,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "create_websocket_event": [
                    "str",
                    "app.GrpyApp"
                ]
            }
        },
        "test_can_send_websocket_message": {
            "name": "test_can_send_websocket_message",
            "location": 3055,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "create_websocket_event": [
                    "str",
                    "app.GrpyApp"
                ]
            }
        },
        "test_does_raise_on_send_to_bad_websocket": {
            "name": "test_does_raise_on_send_to_bad_websocket",
            "location": 3076,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "create_websocket_event": [
                    "str",
                    "app.GrpyApp",
                    "bool",
                    "None",
                    "dict[, ]",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "test_does_reraise_on_websocket_send_error": {
            "name": "test_does_reraise_on_websocket_send_error",
            "location": 3092,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "create_websocket_event": [
                    "app.GrpyApp",
                    "abilian.app.Application"
                ]
            }
        },
        "test_does_reraise_on_other_send_exception": {
            "name": "test_does_reraise_on_other_send_exception",
            "location": 3112,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "create_websocket_event": [
                    "dict[, ]",
                    "str",
                    "app.GrpyApp",
                    "dict"
                ]
            }
        },
        "test_cannot_send_message_on_unconfigured_app": {
            "name": "test_cannot_send_message_on_unconfigured_app",
            "location": 3130,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_cannot_re_register_websocket_handlers": {
            "name": "test_cannot_re_register_websocket_handlers",
            "location": 3143,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "create_websocket_event": [
                    "str"
                ]
            }
        },
        "test_can_parse_json_websocket_body": {
            "name": "test_can_parse_json_websocket_body",
            "location": 3189,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "create_websocket_event": [
                    "str",
                    "app.GrpyApp",
                    "bool",
                    "None",
                    "tuple[typing.Union[float,float]]",
                    "Optional[str]",
                    "Optional[Tuple[float, float]]"
                ]
            }
        },
        "test_can_access_websocket_json_body_twice": {
            "name": "test_can_access_websocket_json_body_twice",
            "location": 3202,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "create_websocket_event": [
                    "bool",
                    "str",
                    "app.GrpyApp",
                    "None",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "test_does_raise_on_invalid_json_wbsocket_body": {
            "name": "test_does_raise_on_invalid_json_wbsocket_body",
            "location": 3216,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "create_websocket_event": [
                    "str",
                    "bool",
                    "app.GrpyApp",
                    "None",
                    "abilian.app.Application",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "FakeLambdaContextIdentity.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "cognito_identity_id": [
                    "int",
                    "str",
                    "Optional[List[str]]",
                    "list[str]",
                    "Dict[str, Dict[str, Any]]",
                    "None",
                    "dict[str, dict[str, typing.Any]]"
                ],
                "cognito_identity_pool_id": [
                    "typing.Iterable[int]",
                    "str",
                    "Iterable[int]",
                    "Dict[str, bool]",
                    "Dict[int, dict]",
                    "Set[str]"
                ]
            }
        },
        "FakeLambdaContext.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeLambdaContext.get_remaining_time_in_millis": {
            "name": "get_remaining_time_in_millis",
            "location": 94,
            "return": [
                "int",
                "str",
                "Dict[str, Any]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeLambdaContext.serialize": {
            "name": "serialize",
            "location": 97,
            "return": [
                "dict[typing.Text, ]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeExceptionFactory.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeClient.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "errors": [
                    "Optional[str]",
                    "None",
                    "str",
                    "Dict[str, str]",
                    "Type",
                    "dict[str, str]",
                    "typing.Type",
                    "Tuple[List[str], Optional[Any]]",
                    "tuple[typing.Union[list[str],typing.Any,None]]"
                ],
                "infos": [
                    "None",
                    "str",
                    "Union[str, None]",
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "Tuple[Optional[str], Optional[str]]",
                    "Dict[str, str]",
                    "Optional[Dict]"
                ]
            }
        },
        "FakeClient.post_to_connection": {
            "name": "post_to_connection",
            "location": 124,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "ConnectionId": [
                    "dict",
                    "dict[, ]",
                    "str",
                    "Dict[str, Any]",
                    "bytes",
                    "dict[str, typing.Any]",
                    "Optional[Dict]",
                    "None"
                ],
                "Data": [
                    "dict",
                    "dict[, ]",
                    "str",
                    "Dict[str, Any]",
                    "bytes",
                    "dict[str, typing.Any]",
                    "Optional[Dict]",
                    "None"
                ]
            }
        },
        "FakeClient.delete_connection": {
            "name": "delete_connection",
            "location": 127,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "ConnectionId": [
                    "str",
                    "int"
                ]
            }
        },
        "FakeClient.get_connection": {
            "name": "get_connection",
            "location": 130,
            "return": [
                "str",
                "Iterable[Tuple[str, str]]",
                "Dict[int, str]",
                "list[]",
                "typing.OrderedDict",
                "list[str]",
                "dict[str, str]",
                "tuple[typing.Union[str,str,str,str]]",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "ConnectionId": [
                    "str"
                ]
            }
        },
        "FakeClient._call": {
            "name": "_call",
            "location": 136,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "list",
                    "list[]",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "FakeSession.__init__": {
            "name": "__init__",
            "location": 144,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "None",
                    "int",
                    "dict[, ]",
                    "bool",
                    "Union[bool, int, str]",
                    "dict",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "region_name": [
                    "str",
                    "typing.Text"
                ]
            }
        },
        "FakeSession.client": {
            "name": "client",
            "location": 149,
            "return": [
                "app.GrpyApp"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "endpoint_url": [
                    "str",
                    "None",
                    "int",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "view_function._func": {
            "name": "_func",
            "location": 156,
            "return": [
                "dict[typing.Text, typing.Text]",
                "Tuple[str, int]",
                "Optional[str]",
                "str",
                "Tuple[int, int]",
                "int"
            ],
            "arguments": {}
        },
        "sample_app.index": {
            "name": "index",
            "location": 212,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        },
        "sample_app.name": {
            "name": "name",
            "location": 216,
            "return": [
                "dict[typing.Text, ]",
                "Type[BaseException]",
                "BaseException",
                "Exception",
                "type"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "sample_app_with_cors.image": {
            "name": "image",
            "location": 228,
            "return": [
                "dict[typing.Text, bool]",
                "int",
                "str",
                "tuple",
                "list",
                "bool"
            ],
            "arguments": {}
        },
        "sample_app_with_default_cors.on": {
            "name": "on",
            "location": 241,
            "return": [
                "dict[typing.Text, bool]",
                "int",
                "tuple",
                "str",
                "Iterable[int]",
                "dict"
            ],
            "arguments": {}
        },
        "sample_app_with_default_cors.off": {
            "name": "off",
            "location": 246,
            "return": [
                "dict[typing.Text, bool]",
                "int",
                "tuple",
                "str",
                "Iterable[int]",
                "dict"
            ],
            "arguments": {}
        },
        "sample_app_with_default_cors.default": {
            "name": "default",
            "location": 251,
            "return": [
                "dict[typing.Text, bool]",
                "int",
                "tuple",
                "str",
                "Iterable[int]"
            ],
            "arguments": {}
        },
        "sample_websocket_app.connect": {
            "name": "connect",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "sample_websocket_app.disconnect": {
            "name": "disconnect",
            "location": 270,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "sample_websocket_app.message": {
            "name": "message",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "sample_middleware_app.mymiddleware": {
            "name": "mymiddleware",
            "location": 288,
            "return": [
                "bytes",
                "int",
                "Exception",
                "dict"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "Optional[List[T]]",
                    "str"
                ],
                "get_response": [
                    "bytes",
                    "werkzeug.wrappers.Response",
                    "dict",
                    "Sequence",
                    "str"
                ]
            }
        },
        "sample_middleware_app.mymiddleware_s3": {
            "name": "mymiddleware_s3",
            "location": 294,
            "return": [
                "Dict[str, bool]",
                "int",
                "Exception",
                "dict",
                "bytes"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "str",
                    "int"
                ],
                "get_response": [
                    "bytes",
                    "werkzeug.wrappers.Response",
                    "dict"
                ]
            }
        },
        "sample_middleware_app.mymiddleware_sns": {
            "name": "mymiddleware_sns",
            "location": 300,
            "return": [
                "bytes",
                "int",
                "Exception",
                "dict"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "Optional[List[T]]",
                    "str"
                ],
                "get_response": [
                    "bytes",
                    "werkzeug.wrappers.Response",
                    "dict",
                    "Sequence",
                    "str"
                ]
            }
        },
        "sample_middleware_app.mymiddleware_http": {
            "name": "mymiddleware_http",
            "location": 306,
            "return": [
                "bytes",
                "int",
                "Exception",
                "dict"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "Optional[List[T]]",
                    "str"
                ],
                "get_response": [
                    "bytes",
                    "werkzeug.wrappers.Response",
                    "dict",
                    "Sequence",
                    "str"
                ]
            }
        },
        "sample_middleware_app.mymiddleware_websocket": {
            "name": "mymiddleware_websocket",
            "location": 312,
            "return": [
                "bytes",
                "int",
                "Exception",
                "dict"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "Optional[List[T]]",
                    "str"
                ],
                "get_response": [
                    "bytes",
                    "werkzeug.wrappers.Response",
                    "dict",
                    "Sequence",
                    "str"
                ]
            }
        },
        "sample_middleware_app.mymiddleware_pure_lambda": {
            "name": "mymiddleware_pure_lambda",
            "location": 318,
            "return": [
                "bytes",
                "int",
                "Exception",
                "dict"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "Optional[List[T]]",
                    "str"
                ],
                "get_response": [
                    "bytes",
                    "werkzeug.wrappers.Response",
                    "dict",
                    "Sequence",
                    "str"
                ]
            }
        },
        "sample_middleware_app.index": {
            "name": "index",
            "location": 324,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        },
        "sample_middleware_app.s3_handler": {
            "name": "s3_handler",
            "location": 328,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "str"
                ]
            }
        },
        "sample_middleware_app.sns_handler": {
            "name": "sns_handler",
            "location": 332,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "str"
                ]
            }
        },
        "sample_middleware_app.sqs_handler": {
            "name": "sqs_handler",
            "location": 336,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "str"
                ]
            }
        },
        "sample_middleware_app.lambda_handler": {
            "name": "lambda_handler",
            "location": 340,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        },
        "sample_middleware_app.ws_handler": {
            "name": "ws_handler",
            "location": 344,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "str"
                ]
            }
        },
        "test_wildcard_accepts_with_native_python_types_serializes_json.py_dict": {
            "name": "py_dict",
            "location": 427,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        },
        "test_wildcard_accepts_with_response_class.py_dict": {
            "name": "py_dict",
            "location": 446,
            "return": [
                "dict[typing.Text, typing.Text]",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Optional[Mapping[str, Any]]",
                "dict",
                "str",
                "int",
                "requests.Request"
            ],
            "arguments": {}
        },
        "test_can_route_single_view.index_view": {
            "name": "index_view",
            "location": 470,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "test_can_handle_multiple_routes.index_view": {
            "name": "index_view",
            "location": 482,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "test_can_handle_multiple_routes.other_view": {
            "name": "other_view",
            "location": 486,
            "return": [
                "dict[, ]",
                "str",
                "deque",
                "int"
            ],
            "arguments": {}
        },
        "test_can_call_to_dict_on_current_request.todict": {
            "name": "todict",
            "location": 511,
            "return": [],
            "arguments": {}
        },
        "test_can_call_to_dict_on_request_with_querystring.todict": {
            "name": "todict",
            "location": 528,
            "return": [],
            "arguments": {}
        },
        "test_request_to_dict_does_not_contain_internal_attrs.todict": {
            "name": "todict",
            "location": 553,
            "return": [],
            "arguments": {}
        },
        "TestDefaultCORS.test_cors_enabled": {
            "name": "test_cors_enabled",
            "location": 592,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app_with_default_cors": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "create_event": [
                    "aiohttp.web.Request"
                ]
            }
        },
        "TestDefaultCORS.test_cors_none": {
            "name": "test_cors_none",
            "location": 598,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app_with_default_cors": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "create_event": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestDefaultCORS.test_cors_disabled": {
            "name": "test_cors_disabled",
            "location": 604,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app_with_default_cors": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "create_event": [
                    "aiohttp.web.Request"
                ]
            }
        },
        "test_can_access_context.index_view": {
            "name": "index_view",
            "location": 615,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "test_can_access_raw_body.index_view": {
            "name": "index_view",
            "location": 631,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "test_raw_body_cache_returns_same_result.index_view": {
            "name": "index_view",
            "location": 645,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "test_can_have_views_of_same_route_but_different_methods.get_view": {
            "name": "get_view",
            "location": 665,
            "return": [
                "dict[typing.Text, typing.Text]",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "test_can_have_views_of_same_route_but_different_methods.put_view": {
            "name": "put_view",
            "location": 669,
            "return": [
                "str",
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        },
        "test_error_on_duplicate_route_methods.index_view": {
            "name": "index_view",
            "location": 688,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "test_json_body_available_with_right_content_type.index": {
            "name": "index",
            "location": 701,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        },
        "test_json_body_none_with_malformed_json.index": {
            "name": "index",
            "location": 716,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        },
        "test_cant_access_json_body_with_wrong_content_type.index": {
            "name": "index",
            "location": 731,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        },
        "test_json_body_available_on_multiple_content_types.index": {
            "name": "index",
            "location": 749,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        },
        "test_json_body_available_with_lowercase_content_type_key.index": {
            "name": "index",
            "location": 776,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        },
        "test_content_type_validation_raises_error_on_unknown_types.index": {
            "name": "index",
            "location": 802,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        },
        "test_content_type_with_charset.index": {
            "name": "index",
            "location": 818,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        },
        "test_can_return_response_object.index_view": {
            "name": "index_view",
            "location": 830,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "test_headers_have_basic_validation.index_view": {
            "name": "index_view",
            "location": 855,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "test_empty_headers_have_basic_validation.index_view": {
            "name": "index_view",
            "location": 871,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "test_no_content_type_is_still_allowed.index": {
            "name": "index",
            "location": 888,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        },
        "test_can_base64_encode_binary_multiple_media_types.index_view": {
            "name": "index_view",
            "location": 918,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "test_can_return_text_even_with_binary_content_type_configured.index_view": {
            "name": "index_view",
            "location": 938,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "test_exceptions_raised_as_chalice_errors.raise_error": {
            "name": "raise_error",
            "location": 992,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_original_exception_raised_in_debug_mode.raise_error": {
            "name": "raise_error",
            "location": 1009,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_chalice_view_errors_propagate_in_non_debug_mode.notfound": {
            "name": "notfound",
            "location": 1024,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_chalice_view_errors_propagate_in_debug_mode.notfound": {
            "name": "notfound",
            "location": 1035,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_receive_binary_data.bincat": {
            "name": "bincat",
            "location": 1121,
            "return": [
                "Response"
            ],
            "arguments": {}
        },
        "test_cannot_receive_base64_string_with_binary_response.bincat": {
            "name": "bincat",
            "location": 1144,
            "return": [
                "Response",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "TestCORSConfig.test_eq": {
            "name": "test_eq",
            "location": 1207,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCORSConfig.test_not_eq_different_type": {
            "name": "test_not_eq_different_type",
            "location": 1212,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCORSConfig.test_not_eq_differing_configurations": {
            "name": "test_not_eq_differing_configurations",
            "location": 1217,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCORSConfig.test_eq_non_default_configurations": {
            "name": "test_eq_non_default_configurations",
            "location": 1223,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_can_handle_builtin_auth.my_auth": {
            "name": "my_auth",
            "location": 1245,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "auth_request": [
                    "dict",
                    "flask.Request"
                ]
            }
        },
        "test_can_handle_builtin_auth.index_view": {
            "name": "index_view",
            "location": 1249,
            "return": [
                "dict[, ]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_builtin_auth_can_transform_event.builtin_auth": {
            "name": "builtin_auth",
            "location": 1270,
            "return": [
                "None"
            ],
            "arguments": {
                "auth_request": []
            }
        },
        "test_can_return_auth_dict_directly.builtin_auth": {
            "name": "builtin_auth",
            "location": 1302,
            "return": [
                "None"
            ],
            "arguments": {
                "auth_request": []
            }
        },
        "test_can_specify_extra_auth_attributes.builtin_auth": {
            "name": "builtin_auth",
            "location": 1313,
            "return": [
                "None"
            ],
            "arguments": {
                "auth_request": []
            }
        },
        "test_can_return_auth_response.builtin_auth": {
            "name": "builtin_auth",
            "location": 1354,
            "return": [
                "None"
            ],
            "arguments": {
                "auth_request": []
            }
        },
        "test_auth_response_with_colon_chars.builtin_auth": {
            "name": "builtin_auth",
            "location": 1385,
            "return": [
                "None",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "auth_request": [
                    "dict",
                    "flask.Request"
                ]
            }
        },
        "test_can_register_scheduled_event_with_str.foo": {
            "name": "foo",
            "location": 1512,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "test_can_register_scheduled_event_with_rate.foo": {
            "name": "foo",
            "location": 1524,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "test_can_register_scheduled_event_with_event.foo": {
            "name": "foo",
            "location": 1539,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "str"
                ]
            }
        },
        "test_can_map_schedule_event_dict_to_object.handler": {
            "name": "handler",
            "location": 1598,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "event": []
            }
        },
        "test_can_create_cwe_event_handler.handler": {
            "name": "handler",
            "location": 1637,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "event": []
            }
        },
        "test_can_map_cwe_event_dict_to_object.handler": {
            "name": "handler",
            "location": 1650,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "event": []
            }
        },
        "test_pure_lambda_function_direct_mapping.handler": {
            "name": "handler",
            "location": 1682,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "event": [],
                "context": []
            }
        },
        "test_pure_lambda_functions_are_registered_in_app.handler": {
            "name": "handler",
            "location": 1692,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "event": [],
                "context": []
            }
        },
        "test_can_use_out_of_order_args.index": {
            "name": "index",
            "location": 1714,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "b": [],
                "a": []
            }
        },
        "test_internal_exception_debug_false.error": {
            "name": "error",
            "location": 1755,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_create_s3_event_handler.handler": {
            "name": "handler",
            "location": 1832,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "event": []
            }
        },
        "test_can_map_to_s3_event_object.handler": {
            "name": "handler",
            "location": 1845,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "event": []
            }
        },
        "test_can_create_sns_handler.handler": {
            "name": "handler",
            "location": 1936,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "event": []
            }
        },
        "test_can_map_sns_event.handler": {
            "name": "handler",
            "location": 1948,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "event": []
            }
        },
        "test_can_create_sqs_handler.handler": {
            "name": "handler",
            "location": 1982,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "event": []
            }
        },
        "test_can_set_sqs_handler_name.handler": {
            "name": "handler",
            "location": 1995,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "event": []
            }
        },
        "test_can_set_sqs_handler_maximum_batching_window_in_seconds.handler": {
            "name": "handler",
            "location": 2006,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "event": []
            }
        },
        "test_can_map_sqs_event.handler": {
            "name": "handler",
            "location": 2016,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "event": []
            }
        },
        "test_can_create_kinesis_handler.handler": {
            "name": "handler",
            "location": 2051,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "event": []
            }
        },
        "test_can_set_kinesis_handler_maximum_batching_window.handler": {
            "name": "handler",
            "location": 2067,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "event": []
            }
        },
        "test_can_map_kinesis_event.handler": {
            "name": "handler",
            "location": 2077,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "event": []
            }
        },
        "test_can_create_ddb_handler.handler": {
            "name": "handler",
            "location": 2136,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "event": []
            }
        },
        "test_can_set_ddb_handler_maximum_batching_window_in_seconds.handler": {
            "name": "handler",
            "location": 2152,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "event": []
            }
        },
        "test_can_map_ddb_event.handler": {
            "name": "handler",
            "location": 2162,
            "return": [
                "dict[typing.Text, ]",
                "str",
                "solo.config.app.Config",
                "app.models.dto.ClientInfo",
                "List[str]"
            ],
            "arguments": {
                "event": [
                    "str"
                ]
            }
        },
        "test_bytes_when_binary_type_is_application_json.index": {
            "name": "index",
            "location": 2211,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        },
        "test_can_register_blueprint_on_app.first": {
            "name": "first",
            "location": 2228,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_combine_multiple_blueprints_in_single_app.myfoo": {
            "name": "myfoo",
            "location": 2241,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_combine_multiple_blueprints_in_single_app.mybar": {
            "name": "mybar",
            "location": 2245,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_preserve_signature_on_blueprint.first": {
            "name": "first",
            "location": 2259,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [],
                "context": []
            }
        },
        "test_doc_saved_on_route.index": {
            "name": "index",
            "location": 2275,
            "return": [
                "",
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        },
        "test_blueprint_docstring_is_preserved.first": {
            "name": "first",
            "location": 2286,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_mount_apis_at_url_prefix.myfoo": {
            "name": "myfoo",
            "location": 2297,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_mount_apis_at_url_prefix.mybar": {
            "name": "mybar",
            "location": 2301,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_mount_root_url_in_blueprint.myroot": {
            "name": "myroot",
            "location": 2314,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_mount_root_url_in_blueprint.myfoo": {
            "name": "myfoo",
            "location": 2318,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_mount_root_url_in_blueprint.mybar": {
            "name": "mybar",
            "location": 2322,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_combine_lambda_functions_and_routes_in_blueprints.myfoo": {
            "name": "myfoo",
            "location": 2336,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_combine_lambda_functions_and_routes_in_blueprints.myfunction": {
            "name": "myfunction",
            "location": 2340,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "event": [],
                "context": []
            }
        },
        "test_can_mount_lambda_functions_with_name_prefix.myfunction": {
            "name": "myfunction",
            "location": 2358,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "event": [],
                "context": []
            }
        },
        "test_can_mount_event_sources_with_blueprint.myfunction": {
            "name": "myfunction",
            "location": 2380,
            "return": [
                "dict[typing.Text, typing.Text]",
                "str",
                "solo.config.app.Config",
                "app.models.dto.ClientInfo",
                "List[str]"
            ],
            "arguments": {
                "event": [
                    "str"
                ]
            }
        },
        "test_can_mount_all_decorators_in_blueprint.routefoo": {
            "name": "routefoo",
            "location": 2397,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_mount_all_decorators_in_blueprint.mylambda": {
            "name": "mylambda",
            "location": 2401,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        },
        "test_can_mount_all_decorators_in_blueprint.bar": {
            "name": "bar",
            "location": 2405,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "str"
                ]
            }
        },
        "test_can_mount_all_decorators_in_blueprint.on_s3": {
            "name": "on_s3",
            "location": 2409,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_can_mount_all_decorators_in_blueprint.on_sns": {
            "name": "on_sns",
            "location": 2413,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "str"
                ]
            }
        },
        "test_can_mount_all_decorators_in_blueprint.on_sqs": {
            "name": "on_sqs",
            "location": 2417,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "str"
                ]
            }
        },
        "test_can_call_current_request_on_blueprint_when_mounted.todict": {
            "name": "todict",
            "location": 2435,
            "return": [
                "Dict[str, Any]",
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "test_can_call_current_app_on_blueprint_when_mounted.appname": {
            "name": "appname",
            "location": 2450,
            "return": [
                "dict[typing.Text, ]",
                "str",
                "Optional[str]",
                "Tuple[str]"
            ],
            "arguments": {}
        },
        "test_can_call_lambda_context_on_blueprint_when_mounted.context": {
            "name": "context",
            "location": 2464,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_can_access_log_when_mounted.log_message": {
            "name": "log_message",
            "location": 2478,
            "return": [
                "dict[, ]",
                "str",
                "List[bytes]",
                "Iterable[float]",
                "int",
                "float"
            ],
            "arguments": {}
        },
        "test_can_add_authorizer_with_url_prefix_and_routes.myauth": {
            "name": "myauth",
            "location": 2495,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "str"
                ]
            }
        },
        "test_can_add_authorizer_with_url_prefix_and_routes.routefoo": {
            "name": "routefoo",
            "location": 2499,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_every_decorator_added_to_blueprint.is_public_method": {
            "name": "is_public_method",
            "location": 2517,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "logging.LogRecord",
                    "dict"
                ]
            }
        },
        "test_websocket_event_json_body_available.message": {
            "name": "message",
            "location": 2674,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "test_websocket_event_json_body_can_raise_error.message": {
            "name": "message",
            "location": 2693,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "test_can_route_websocket_connect_response_dict.connect": {
            "name": "connect",
            "location": 2730,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "test_can_route_websocket_connect_response_obj.connect": {
            "name": "connect",
            "location": 2753,
            "return": [
                "None",
                "str",
                "Optional[bool]",
                "dict",
                "bool",
                "Callable[[], None]",
                "Sequence[int]",
                "Optional[str]"
            ],
            "arguments": {
                "event": [
                    "str"
                ]
            }
        },
        "test_cannot_send_websocket_message_without_configure.message_handler": {
            "name": "message_handler",
            "location": 2956,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "test_can_close_websocket_connection.message_handler": {
            "name": "message_handler",
            "location": 2975,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "test_close_does_fail_if_already_disconnected.message_handler": {
            "name": "message_handler",
            "location": 2995,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "test_info_does_fail_if_already_disconnected.message_handler": {
            "name": "message_handler",
            "location": 3017,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "test_can__about_websocket_connection.message_handler": {
            "name": "message_handler",
            "location": 3040,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "test_can_send_websocket_message.message_handler": {
            "name": "message_handler",
            "location": 3061,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "test_does_raise_on_send_to_bad_websocket.message_handler": {
            "name": "message_handler",
            "location": 3082,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "test_does_reraise_on_websocket_send_error.message_handler": {
            "name": "message_handler",
            "location": 3103,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "test_does_reraise_on_other_send_exception.message_handler": {
            "name": "message_handler",
            "location": 3121,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "test_cannot_re_register_websocket_handlers.message_handler": {
            "name": "message_handler",
            "location": 3147,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "str"
                ]
            }
        },
        "test_cannot_re_register_websocket_handlers.connect_handler": {
            "name": "connect_handler",
            "location": 3161,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "str"
                ]
            }
        },
        "test_cannot_re_register_websocket_handlers.disconnect_handler": {
            "name": "disconnect_handler",
            "location": 3175,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "str"
                ]
            }
        },
        "test_can_parse_json_websocket_body.message": {
            "name": "message",
            "location": 3195,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "test_can_access_websocket_json_body_twice.message": {
            "name": "message",
            "location": 3208,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "test_does_raise_on_invalid_json_wbsocket_body.message": {
            "name": "message",
            "location": 3222,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "TestMiddleware.test_middleware_basic_api": {
            "name": "test_middleware_basic_api",
            "location": 3232,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMiddleware.test_can_access_original_event_and_context_in_http": {
            "name": "test_can_access_original_event_and_context_in_http",
            "location": 3262,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMiddleware.test_can_short_circuit_response": {
            "name": "test_can_short_circuit_response",
            "location": 3284,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMiddleware.test_can_alter_response": {
            "name": "test_can_alter_response",
            "location": 3312,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMiddleware.test_can_change_order_of_definitions": {
            "name": "test_can_change_order_of_definitions",
            "location": 3350,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMiddleware.test_can_use_middleware_for_pure_lambda": {
            "name": "test_can_use_middleware_for_pure_lambda",
            "location": 3388,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMiddleware.test_can_use_for_websocket_handlers": {
            "name": "test_can_use_for_websocket_handlers",
            "location": 3413,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMiddleware.test_can_use_rest_api_for_middleware": {
            "name": "test_can_use_rest_api_for_middleware",
            "location": 3445,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMiddleware.test_error_handler_rest_api_untouched": {
            "name": "test_error_handler_rest_api_untouched",
            "location": 3480,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMiddleware.test_unhandled_error_not_caught": {
            "name": "test_unhandled_error_not_caught",
            "location": 3499,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMiddleware.test_middleware_errors_return_500_still_caught": {
            "name": "test_middleware_errors_return_500_still_caught",
            "location": 3518,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMiddleware.test_middleware_errors_result_in_500": {
            "name": "test_middleware_errors_result_in_500",
            "location": 3540,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMiddleware.test_can_filter_middleware_registration": {
            "name": "test_can_filter_middleware_registration",
            "location": 3556,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_middleware_app": [
                    "float"
                ]
            }
        },
        "TestMiddleware.test_can_register_middleware_on_blueprints": {
            "name": "test_can_register_middleware_on_blueprints",
            "location": 3605,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMiddleware.test_blueprint_gets_middlware_added": {
            "name": "test_blueprint_gets_middlware_added",
            "location": 3661,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMiddleware.test_can_register_middleware_without_decorator": {
            "name": "test_can_register_middleware_without_decorator",
            "location": 3689,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMiddleware.test_can_convert_existing_lambda_decorator_to_middleware": {
            "name": "test_can_convert_existing_lambda_decorator_to_middleware",
            "location": 3715,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_error_on_duplicate_route_methods.index_view_dup": {
            "name": "index_view_dup",
            "location": 693,
            "return": [
                "dict[typing.Text, typing.Text]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_content_types_must_be_lists.index_post": {
            "name": "index_post",
            "location": 794,
            "return": [
                "dict[typing.Text, typing.Text]",
                "Optional[Type]",
                "dict",
                "float",
                "str"
            ],
            "arguments": {}
        },
        "test_unknown_kwargs_raise_error.badkwargs": {
            "name": "badkwargs",
            "location": 1057,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_name_kwargs_does_not_raise_error.name_kwarg": {
            "name": "name_kwarg",
            "location": 1064,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_validation_raised_on_unknown_kwargs.builtin_auth": {
            "name": "builtin_auth",
            "location": 1326,
            "return": [
                "None"
            ],
            "arguments": {
                "auth_request": []
            }
        },
        "test_cannot_re_register_websocket_handlers.message_handler_2": {
            "name": "message_handler_2",
            "location": 3152,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "str"
                ]
            }
        },
        "test_cannot_re_register_websocket_handlers.conncet_handler_2": {
            "name": "conncet_handler_2",
            "location": 3166,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "str"
                ]
            }
        },
        "test_cannot_re_register_websocket_handlers.disconncet_handler_2": {
            "name": "disconncet_handler_2",
            "location": 3180,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "str"
                ]
            }
        },
        "TestMiddleware.test_middleware_basic_api.myhandler": {
            "name": "myhandler",
            "location": 3237,
            "return": [],
            "arguments": {
                "event": [],
                "get_response": []
            }
        },
        "TestMiddleware.test_middleware_basic_api.myhandler2": {
            "name": "myhandler2",
            "location": 3242,
            "return": [],
            "arguments": {
                "event": [],
                "get_response": []
            }
        },
        "TestMiddleware.test_middleware_basic_api.handler": {
            "name": "handler",
            "location": 3247,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "event": []
            }
        },
        "TestMiddleware.test_can_access_original_event_and_context_in_http.myhandler": {
            "name": "myhandler",
            "location": 3267,
            "return": [],
            "arguments": {
                "event": [],
                "get_response": []
            }
        },
        "TestMiddleware.test_can_access_original_event_and_context_in_http.index": {
            "name": "index",
            "location": 3272,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        },
        "TestMiddleware.test_can_short_circuit_response.myhandler": {
            "name": "myhandler",
            "location": 3289,
            "return": [],
            "arguments": {
                "event": [],
                "get_response": []
            }
        },
        "TestMiddleware.test_can_short_circuit_response.myhandler2": {
            "name": "myhandler2",
            "location": 3294,
            "return": [],
            "arguments": {
                "event": [],
                "get_response": []
            }
        },
        "TestMiddleware.test_can_short_circuit_response.handler": {
            "name": "handler",
            "location": 3299,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "event": []
            }
        },
        "TestMiddleware.test_can_alter_response.myhandler": {
            "name": "myhandler",
            "location": 3317,
            "return": [],
            "arguments": {
                "event": [],
                "get_response": []
            }
        },
        "TestMiddleware.test_can_alter_response.myhandler2": {
            "name": "myhandler2",
            "location": 3324,
            "return": [],
            "arguments": {
                "event": [],
                "get_response": []
            }
        },
        "TestMiddleware.test_can_alter_response.handler": {
            "name": "handler",
            "location": 3331,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "event": []
            }
        },
        "TestMiddleware.test_can_change_order_of_definitions.handler": {
            "name": "handler",
            "location": 3355,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "event": []
            }
        },
        "TestMiddleware.test_can_change_order_of_definitions.myhandler": {
            "name": "myhandler",
            "location": 3360,
            "return": [
                "bytes",
                "dict",
                "flask.Response"
            ],
            "arguments": {
                "event": [
                    "dict"
                ],
                "get_response": [
                    "dict",
                    "str",
                    "Dict[str, str]",
                    "Optional[Dict[str, Any]]",
                    "Literal",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestMiddleware.test_can_change_order_of_definitions.myhandler2": {
            "name": "myhandler2",
            "location": 3367,
            "return": [
                "bytes",
                "dict",
                "flask.Response"
            ],
            "arguments": {
                "event": [
                    "dict"
                ],
                "get_response": [
                    "dict",
                    "str",
                    "Dict[str, str]",
                    "Optional[Dict[str, Any]]",
                    "Literal",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestMiddleware.test_can_use_middleware_for_pure_lambda.mymiddleware": {
            "name": "mymiddleware",
            "location": 3393,
            "return": [],
            "arguments": {
                "event": [],
                "get_response": []
            }
        },
        "TestMiddleware.test_can_use_middleware_for_pure_lambda.myfunction": {
            "name": "myfunction",
            "location": 3398,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "event": [],
                "context": []
            }
        },
        "TestMiddleware.test_can_use_for_websocket_handlers.mymiddleware": {
            "name": "mymiddleware",
            "location": 3418,
            "return": [],
            "arguments": {
                "event": [],
                "get_response": []
            }
        },
        "TestMiddleware.test_can_use_for_websocket_handlers.myfunction": {
            "name": "myfunction",
            "location": 3423,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "event": []
            }
        },
        "TestMiddleware.test_can_use_rest_api_for_middleware.mymiddleware": {
            "name": "mymiddleware",
            "location": 3450,
            "return": [],
            "arguments": {
                "event": [],
                "get_response": []
            }
        },
        "TestMiddleware.test_can_use_rest_api_for_middleware.index": {
            "name": "index",
            "location": 3457,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        },
        "TestMiddleware.test_can_use_rest_api_for_middleware.hello": {
            "name": "hello",
            "location": 3462,
            "return": [
                "bool",
                "dict[typing.Text, bool]"
            ],
            "arguments": {}
        },
        "TestMiddleware.test_error_handler_rest_api_untouched.mymiddleware": {
            "name": "mymiddleware",
            "location": 3484,
            "return": [],
            "arguments": {
                "event": [],
                "get_response": []
            }
        },
        "TestMiddleware.test_error_handler_rest_api_untouched.index": {
            "name": "index",
            "location": 3488,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        },
        "TestMiddleware.test_unhandled_error_not_caught.mymiddleware": {
            "name": "mymiddleware",
            "location": 3503,
            "return": [],
            "arguments": {
                "event": [],
                "get_response": []
            }
        },
        "TestMiddleware.test_unhandled_error_not_caught.index": {
            "name": "index",
            "location": 3510,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        },
        "TestMiddleware.test_middleware_errors_return_500_still_caught.mymiddleware": {
            "name": "mymiddleware",
            "location": 3522,
            "return": [],
            "arguments": {
                "event": [],
                "get_response": []
            }
        },
        "TestMiddleware.test_middleware_errors_return_500_still_caught.index": {
            "name": "index",
            "location": 3526,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        },
        "TestMiddleware.test_middleware_errors_result_in_500.mymiddleware": {
            "name": "mymiddleware",
            "location": 3544,
            "return": [],
            "arguments": {
                "event": [],
                "get_response": []
            }
        },
        "TestMiddleware.test_middleware_errors_result_in_500.index": {
            "name": "index",
            "location": 3548,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        },
        "TestMiddleware.test_can_register_middleware_on_blueprints.mymiddleware": {
            "name": "mymiddleware",
            "location": 3611,
            "return": [],
            "arguments": {
                "event": [],
                "get_response": []
            }
        },
        "TestMiddleware.test_can_register_middleware_on_blueprints.bp_middleware": {
            "name": "bp_middleware",
            "location": 3616,
            "return": [],
            "arguments": {
                "event": [],
                "get_response": []
            }
        },
        "TestMiddleware.test_can_register_middleware_on_blueprints.bp_handler": {
            "name": "bp_handler",
            "location": 3621,
            "return": [
                "dict[typing.Text, ]",
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "event": [
                    "Dict[str, Any]",
                    "dict",
                    "list",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "TestMiddleware.test_can_register_middleware_on_blueprints.index": {
            "name": "index",
            "location": 3626,
            "return": [
                "",
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        },
        "TestMiddleware.test_can_register_middleware_on_blueprints.handler": {
            "name": "handler",
            "location": 3630,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "event": []
            }
        },
        "TestMiddleware.test_blueprint_gets_middlware_added.bp_middleware": {
            "name": "bp_middleware",
            "location": 3667,
            "return": [
                "bytes",
                "int",
                "Exception",
                "dict"
            ],
            "arguments": {
                "event": [
                    "bytes",
                    "werkzeug.wrappers.Response",
                    "dict",
                    "Sequence",
                    "str"
                ],
                "get_response": [
                    "bytes",
                    "werkzeug.wrappers.Response",
                    "dict",
                    "Sequence",
                    "str"
                ]
            }
        },
        "TestMiddleware.test_blueprint_gets_middlware_added.handler": {
            "name": "handler",
            "location": 3672,
            "return": [
                "dict[typing.Text, ]",
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "event": [
                    "Dict[str, Any]",
                    "dict",
                    "list",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "TestMiddleware.test_can_register_middleware_without_decorator.mymiddleware": {
            "name": "mymiddleware",
            "location": 3693,
            "return": [
                "bytes",
                "int",
                "Exception",
                "dict"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "List[int]",
                    "Tuple[str]"
                ],
                "get_response": [
                    "bytes",
                    "werkzeug.wrappers.Response",
                    "dict",
                    "Sequence",
                    "str"
                ]
            }
        },
        "TestMiddleware.test_can_register_middleware_without_decorator.myfunction": {
            "name": "myfunction",
            "location": 3698,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "event": [],
                "context": []
            }
        },
        "TestMiddleware.test_can_convert_existing_lambda_decorator_to_middleware.mydecorator": {
            "name": "mydecorator",
            "location": 3719,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "TestMiddleware.test_can_convert_existing_lambda_decorator_to_middleware.second_middleware": {
            "name": "second_middleware",
            "location": 3726,
            "return": [
                "bytes",
                "int",
                "Exception",
                "dict"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "List[int]",
                    "Tuple[str]"
                ],
                "get_response": [
                    "bytes",
                    "werkzeug.wrappers.Response",
                    "dict",
                    "Sequence",
                    "str"
                ]
            }
        },
        "TestMiddleware.test_can_convert_existing_lambda_decorator_to_middleware.myfunction": {
            "name": "myfunction",
            "location": 3731,
            "return": [
                "dict[typing.Text, typing.Text]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "event": [
                    "Dict[str, Any]",
                    "str",
                    "dict"
                ],
                "context": [
                    "str"
                ]
            }
        },
        "TestMiddleware.test_can_convert_existing_lambda_decorator_to_middleware.mydecorator._wrapped": {
            "name": "_wrapped",
            "location": 3720,
            "return": [],
            "arguments": {
                "event": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "context": [
                    "dict"
                ]
            }
        }
    },
    "chalice-master/tests/unit/test_awsclient.py": {
        "test_resolve_endpoint": {
            "name": "test_resolve_endpoint",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "service": [
                    "int",
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "None"
                ],
                "region": [
                    "int",
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "None"
                ],
                "endpoint": [
                    "str"
                ]
            }
        },
        "test_endpoint_from_arn": {
            "name": "test_endpoint_from_arn",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str",
                    "bool",
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "None"
                ],
                "arn": [
                    "list[int]",
                    "bool",
                    "List[int]",
                    "Iterable[Union[Any, int]]",
                    "int"
                ],
                "endpoint": [
                    "str",
                    "Dict[Hashable, Any]",
                    "dict[typing.Hashable, typing.Any]"
                ]
            }
        },
        "test_endpoint_dns_suffix": {
            "name": "test_endpoint_dns_suffix",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "service": [
                    "Callable",
                    "bytes",
                    "typing.Callable[, ]",
                    "int",
                    "dict",
                    "dict[, ]"
                ],
                "region": [
                    "Callable",
                    "bytes",
                    "typing.Callable[, ]",
                    "int",
                    "dict",
                    "dict[, ]"
                ],
                "dns_suffix": [
                    "Callable",
                    "bytes",
                    "typing.Callable[, ]",
                    "int",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_endpoint_dns_suffix_from_arn": {
            "name": "test_endpoint_dns_suffix_from_arn",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stubbed_session": [
                    "str",
                    "bool",
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "None"
                ],
                "arn": [
                    "str",
                    "bytes",
                    "int"
                ],
                "dns_suffix": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "TestServicePrincipal.region": {
            "name": "region",
            "location": 85,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServicePrincipal.url_suffix": {
            "name": "url_suffix",
            "location": 89,
            "return": [
                "typing.Text",
                "str",
                "Callable[[str], bool]",
                "List[object]",
                "Optional[str]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServicePrincipal.non_iso_suffixes": {
            "name": "non_iso_suffixes",
            "location": 93,
            "return": [
                "list[typing.Text]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServicePrincipal.awsclient": {
            "name": "awsclient",
            "location": 97,
            "return": [
                "TypedAWSClient",
                "str",
                "Union[str, Pattern]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "List[List[int]]",
                    "list[list[int]]"
                ]
            }
        },
        "TestServicePrincipal.test_unmatched_service": {
            "name": "test_unmatched_service",
            "location": 100,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "awsclient": [
                    "str",
                    "float"
                ]
            }
        },
        "TestServicePrincipal.test_defaults": {
            "name": "test_defaults",
            "location": 106,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "awsclient": [
                    "Iterable[Any]",
                    "bool",
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "TestServicePrincipal.test_states": {
            "name": "test_states",
            "location": 109,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "awsclient": [
                    "str"
                ],
                "region": [
                    "str"
                ],
                "url_suffix": [
                    "str"
                ],
                "non_iso_suffixes": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestServicePrincipal.test_codedeploy_and_logs": {
            "name": "test_codedeploy_and_logs",
            "location": 118,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "awsclient": [
                    "str"
                ],
                "region": [
                    "str"
                ],
                "url_suffix": [
                    "str"
                ],
                "non_iso_suffixes": [
                    "str"
                ]
            }
        },
        "TestServicePrincipal.test_ec2": {
            "name": "test_ec2",
            "location": 128,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "awsclient": [
                    "str"
                ],
                "region": [
                    "str"
                ],
                "url_suffix": [
                    "str"
                ],
                "non_iso_suffixes": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestServicePrincipal.test_others": {
            "name": "test_others",
            "location": 137,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "awsclient": [
                    "str",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "region": [
                    "str",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "url_suffix": [
                    "str",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "non_iso_suffixes": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestServicePrincipal.test_local_suffix": {
            "name": "test_local_suffix",
            "location": 147,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "awsclient": [
                    "str",
                    "int",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "region": [
                    "str",
                    "int",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "url_suffix": [
                    "str",
                    "int",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "TestServicePrincipal.test_states_iso": {
            "name": "test_states_iso",
            "location": 152,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "awsclient": [
                    "str",
                    "bool",
                    "typing.Iterable[typing.Any]",
                    "Iterable[Any]",
                    "Dict[str, float]"
                ]
            }
        },
        "TestServicePrincipal.test_states_isob": {
            "name": "test_states_isob",
            "location": 158,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "awsclient": [
                    "str",
                    "bool",
                    "typing.Iterable[typing.Any]",
                    "Iterable[Any]",
                    "Dict[str, float]"
                ]
            }
        },
        "TestServicePrincipal.test_iso_exceptions": {
            "name": "test_iso_exceptions",
            "location": 164,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "awsclient": [
                    "bool",
                    "Exception",
                    "str",
                    "int"
                ]
            }
        }
    },
    "chalice-master/tests/unit/test_config.py": {
        "test_config_create_method": {
            "name": "test_config_create_method",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_default_chalice_stage": {
            "name": "test_default_chalice_stage",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_version_defaults_to_1_when_missing": {
            "name": "test_version_defaults_to_1_when_missing",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_default_value_of_manage_iam_role": {
            "name": "test_default_value_of_manage_iam_role",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_lazy_load_chalice_app": {
            "name": "test_can_lazy_load_chalice_app",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_lazy_load_chalice_app_must_be_callable": {
            "name": "test_lazy_load_chalice_app_must_be_callable",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_manage_iam_role_explicitly_set": {
            "name": "test_manage_iam_role_explicitly_set",
            "location": 74,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_chain_lookup": {
            "name": "test_can_chain_lookup",
            "location": 81,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_user_params_is_optional": {
            "name": "test_user_params_is_optional",
            "location": 108,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_chain_chalice_stage_values": {
            "name": "test_can_chain_chalice_stage_values",
            "location": 114,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_chain_function_values": {
            "name": "test_can_chain_function_values",
            "location": 139,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_set_stage_independent_function_values": {
            "name": "test_can_set_stage_independent_function_values",
            "location": 163,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_stage_overrides_function_values": {
            "name": "test_stage_overrides_function_values",
            "location": 177,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_create_scope_obj_with_new_function": {
            "name": "test_can_create_scope_obj_with_new_function",
            "location": 196,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_create_scope_new_stage_and_function": {
            "name": "test_can_create_scope_new_stage_and_function",
            "location": 254,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stage_name": [
                    "str"
                ],
                "function_name": [
                    "str"
                ],
                "expected": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_new_scope_config_is_separate_copy": {
            "name": "test_new_scope_config_is_separate_copy",
            "location": 300,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_environment_from_top_level": {
            "name": "test_environment_from_top_level",
            "location": 312,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_environment_from_stage_level": {
            "name": "test_environment_from_stage_level",
            "location": 318,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_env_vars_chain_merge": {
            "name": "test_env_vars_chain_merge",
            "location": 331,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_load_python_version": {
            "name": "test_can_load_python_version",
            "location": 367,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_deployed_resource_does_not_exist": {
            "name": "test_deployed_resource_does_not_exist",
            "location": 569,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_deployed_api_mapping_resource": {
            "name": "test_deployed_api_mapping_resource",
            "location": 577,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_deployed_resource_exists": {
            "name": "test_deployed_resource_exists",
            "location": 606,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "FixedDataConfig.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "files_to_content": [
                    "str"
                ],
                "app_name": [
                    "typing.Text",
                    "str",
                    "List[str]"
                ]
            }
        },
        "FixedDataConfig.app_name": {
            "name": "app_name",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixedDataConfig.project_dir": {
            "name": "project_dir",
            "location": 21,
            "return": [
                "typing.Text",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixedDataConfig._load_json_file": {
            "name": "_load_json_file",
            "location": 24,
            "return": [
                "str",
                "Optional[str]",
                "baseplate.lib.config.RawConfig"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "test_can_lazy_load_chalice_app.call_recorder": {
            "name": "call_recorder",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "TestConfigureMinimumCompressionSize.test_not_set": {
            "name": "test_not_set",
            "location": 384,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigureMinimumCompressionSize.test_set_minimum_compression_size_global": {
            "name": "test_set_minimum_compression_size_global",
            "location": 388,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigureMinimumCompressionSize.test_set_minimum_compression_size_stage": {
            "name": "test_set_minimum_compression_size_stage",
            "location": 395,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigureMinimumCompressionSize.test_set_minimum_compression_size_override": {
            "name": "test_set_minimum_compression_size_override",
            "location": 406,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigureLambdaMemorySize.test_not_set": {
            "name": "test_not_set",
            "location": 420,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigureLambdaMemorySize.test_set_lambda_memory_size_global": {
            "name": "test_set_lambda_memory_size_global",
            "location": 424,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigureLambdaMemorySize.test_set_lambda_memory_size_stage": {
            "name": "test_set_lambda_memory_size_stage",
            "location": 431,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigureLambdaMemorySize.test_set_lambda_memory_size_override": {
            "name": "test_set_lambda_memory_size_override",
            "location": 442,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigureLambdaTimeout.test_not_set": {
            "name": "test_not_set",
            "location": 456,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigureLambdaTimeout.test_set_lambda_timeout_global": {
            "name": "test_set_lambda_timeout_global",
            "location": 460,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigureLambdaTimeout.test_set_lambda_memory_size_stage": {
            "name": "test_set_lambda_memory_size_stage",
            "location": 467,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigureLambdaTimeout.test_set_lambda_memory_size_override": {
            "name": "test_set_lambda_memory_size_override",
            "location": 478,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigureTags.test_default_tags": {
            "name": "test_default_tags",
            "location": 492,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigureTags.test_tags_global": {
            "name": "test_tags_global",
            "location": 498,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigureTags.test_tags_stage": {
            "name": "test_tags_stage",
            "location": 509,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigureTags.test_tags_merge": {
            "name": "test_tags_merge",
            "location": 524,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigureTags.test_tags_specified_does_not_override_chalice_tag": {
            "name": "test_tags_specified_does_not_override_chalice_tag",
            "location": 560,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpgradeNewDeployer.setup_method": {
            "name": "setup_method",
            "location": 615,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpgradeNewDeployer.test_can_upgrade_rest_api": {
            "name": "test_can_upgrade_rest_api",
            "location": 666,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpgradeNewDeployer.test_upgrade_for_new_stage_gives_empty_values": {
            "name": "test_upgrade_for_new_stage_gives_empty_values",
            "location": 680,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpgradeNewDeployer.test_can_upgrade_pre10_lambda_functions": {
            "name": "test_can_upgrade_pre10_lambda_functions",
            "location": 684,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "chalice-master/tests/unit/test_invoke.py": {
        "FakeUI.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeUI.write": {
            "name": "write",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]",
                    "int",
                    "List[float]",
                    "str",
                    "list[float]",
                    "List[List[Any]]",
                    "list[list[typing.Any]]"
                ]
            }
        },
        "FakeUI.error": {
            "name": "error",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[float]",
                    "list[float]",
                    "List[str]",
                    "list[str]",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "Dict[str, bool]",
                    "dict[str, bool]"
                ]
            }
        },
        "FakeStreamingBody.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "FakeStreamingBody.read": {
            "name": "read",
            "location": 28,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaInvokeHandler.test_invoke_can_format_and_write_success_case": {
            "name": "test_invoke_can_format_and_write_success_case",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "Optional[int]",
                    "int",
                    "float"
                ]
            }
        },
        "TestLambdaInvokeHandler.test_invoke_can_format_and_write_error_case": {
            "name": "test_invoke_can_format_and_write_error_case",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "TestLambdaInvokeHandler.test_invoke_can_format_and_write_small_error_case": {
            "name": "test_invoke_can_format_and_write_small_error_case",
            "location": 93,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str"
                ]
            }
        },
        "TestLambdaInvoker.test_invoke_can_call_api_handler": {
            "name": "test_invoke_can_call_api_handler",
            "location": 127,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestLambdaInvoker.test_invoke_does_forward_payload": {
            "name": "test_invoke_does_forward_payload",
            "location": 139,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "Dict[str, Any]",
                    "str",
                    "int"
                ]
            }
        },
        "TestLambdaResponseFormatter.test_formatter_can_format_success": {
            "name": "test_formatter_can_format_success",
            "location": 154,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaResponseFormatter.test_formatter_can_format_list_stack_trace": {
            "name": "test_formatter_can_format_list_stack_trace",
            "location": 163,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaResponseFormatter.test_formatter_can_format_string_stack_trace": {
            "name": "test_formatter_can_format_string_stack_trace",
            "location": 190,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaResponseFormatter.test_formatter_can_format_simple_error": {
            "name": "test_formatter_can_format_simple_error",
            "location": 217,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "chalice-master/tests/unit/test_local.py": {
        "arn_builder": {
            "name": "arn_builder",
            "location": 69,
            "return": [
                "Callable",
                "LocalARNBuilder"
            ],
            "arguments": {}
        },
        "lambda_context_args": {
            "name": "lambda_context_args",
            "location": 74,
            "return": [
                "str",
                "list[typing.Union[typing.Text,int]]"
            ],
            "arguments": {}
        },
        "custom_sample_app": {
            "name": "custom_sample_app",
            "location": 82,
            "return": [
                "CustomSampleChalice",
                "str",
                "Callable",
                "bool",
                "int",
                "Dict[str, int]"
            ],
            "arguments": {}
        },
        "sample_app": {
            "name": "sample_app",
            "location": 90,
            "return": [
                "Callable",
                "str",
                "bool",
                "List[dict]",
                "int",
                "float"
            ],
            "arguments": {}
        },
        "demo_app_auth": {
            "name": "demo_app_auth",
            "location": 183,
            "return": [
                "float",
                "List[dict]",
                "int",
                "Callable",
                "Callable[[None], bool]"
            ],
            "arguments": {}
        },
        "handler": {
            "name": "handler",
            "location": 310,
            "return": [
                "ChaliceStubbedHandler",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sample_app": [
                    "str",
                    "list[str]",
                    "dict[, ]",
                    "List[str]",
                    "rl_algorithms.utils.config.ConfigDict",
                    "cmk.base.config.ConfigCache",
                    "dict",
                    "app.App"
                ]
            }
        },
        "auth_handler": {
            "name": "auth_handler",
            "location": 319,
            "return": [
                "ChaliceStubbedHandler",
                "str",
                "int",
                "bool",
                "Dict[str, bool]",
                "Dict[str, str]"
            ],
            "arguments": {
                "demo_app_auth": [
                    "Optional[str]",
                    "str",
                    "Type[MutableMapping]",
                    "None",
                    "Dict[str, Any]",
                    "typing.Type",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_get_raw_body_from_response_stream": {
            "name": "_get_raw_body_from_response_stream",
            "location": 328,
            "return": [
                "str",
                "dict",
                "fastapi.Response"
            ],
            "arguments": {
                "handler": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "Callable",
                    "typing.Callable[, ]",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "_get_body_from_response_stream": {
            "name": "_get_body_from_response_stream",
            "location": 337,
            "return": [
                "dict",
                "int",
                "str",
                "List[int]",
                "List[str]"
            ],
            "arguments": {
                "handler": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "set_current_request": {
            "name": "set_current_request",
            "location": 342,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "handler": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "None"
                ],
                "method": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "path": [
                    "str",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "headers": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]",
                    "dict[str, dict[, ]]",
                    "Optional[Dict[str, dict]]",
                    "dict[, ]",
                    "Optional[Dict[str, Any]]",
                    "Optional[dict]",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_can_convert_request_handler_to_lambda_event": {
            "name": "test_can_convert_request_handler_to_lambda_event",
            "location": 350,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "handler": []
            }
        },
        "test_uses_http_11": {
            "name": "test_uses_http_11",
            "location": 356,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "handler": []
            }
        },
        "test_can_route_url_params": {
            "name": "test_can_route_url_params",
            "location": 363,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "handler": []
            }
        },
        "test_can_route_put_with_body": {
            "name": "test_can_route_put_with_body",
            "location": 370,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "handler": []
            }
        },
        "test_will_respond_with_cors_enabled": {
            "name": "test_will_respond_with_cors_enabled",
            "location": 384,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "handler": []
            }
        },
        "test_will_respond_with_custom_cors_enabled": {
            "name": "test_will_respond_with_custom_cors_enabled",
            "location": 392,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "handler": []
            }
        },
        "test_will_respond_with_custom_cors_enabled_options": {
            "name": "test_will_respond_with_custom_cors_enabled_options",
            "location": 408,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "handler": []
            }
        },
        "test_can_preflight_request": {
            "name": "test_can_preflight_request",
            "location": 435,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "handler": []
            }
        },
        "test_non_preflight_options_request": {
            "name": "test_non_preflight_options_request",
            "location": 444,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "handler": []
            }
        },
        "test_preflight_request_should_succeed_even_if_cors_disabled": {
            "name": "test_preflight_request_should_succeed_even_if_cors_disabled",
            "location": 452,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "handler": []
            }
        },
        "test_preflight_returns_correct_methods_in_access_allow_header": {
            "name": "test_preflight_returns_correct_methods_in_access_allow_header",
            "location": 461,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "handler": []
            }
        },
        "test_errors_converted_to_json_response": {
            "name": "test_errors_converted_to_json_response",
            "location": 472,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "handler": []
            }
        },
        "test_can_support_delete_method": {
            "name": "test_can_support_delete_method",
            "location": 481,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "handler": []
            }
        },
        "test_can_support_patch_method": {
            "name": "test_can_support_patch_method",
            "location": 487,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "handler": []
            }
        },
        "test_can_support_decimals": {
            "name": "test_can_support_decimals",
            "location": 493,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "handler": []
            }
        },
        "test_unsupported_methods_raise_error": {
            "name": "test_unsupported_methods_raise_error",
            "location": 499,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "handler": []
            }
        },
        "test_can_round_trip_binary": {
            "name": "test_can_round_trip_binary",
            "location": 508,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "handler": []
            }
        },
        "test_querystring_is_mapped": {
            "name": "test_querystring_is_mapped",
            "location": 526,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "handler": []
            }
        },
        "test_empty_querystring_is_none": {
            "name": "test_empty_querystring_is_none",
            "location": 532,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "handler": []
            }
        },
        "test_querystring_list_is_mapped": {
            "name": "test_querystring_list_is_mapped",
            "location": 538,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "handler": []
            }
        },
        "test_querystring_undefined_is_mapped_consistent_with_apigateway": {
            "name": "test_querystring_undefined_is_mapped_consistent_with_apigateway",
            "location": 548,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "handler": []
            }
        },
        "test_content_type_included_once": {
            "name": "test_content_type_included_once",
            "location": 556,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "handler": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_can_deny_unauthed_request": {
            "name": "test_can_deny_unauthed_request",
            "location": 566,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "auth_handler": []
            }
        },
        "test_multi_value_header": {
            "name": "test_multi_value_header",
            "location": 577,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "handler": []
            }
        },
        "test_can_match_exact_route": {
            "name": "test_can_match_exact_route",
            "location": 599,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "actual_url": [
                    "str"
                ],
                "matched_url": [
                    "str",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_lambda_event_contains_source_ip": {
            "name": "test_lambda_event_contains_source_ip",
            "location": 612,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_create_lambda_event": {
            "name": "test_can_create_lambda_event",
            "location": 624,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_parse_query_string": {
            "name": "test_parse_query_string",
            "location": 649,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_create_lambda_event_for_put_request": {
            "name": "test_can_create_lambda_event_for_put_request",
            "location": 674,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_create_lambda_event_for_post_with_formencoded_body": {
            "name": "test_can_create_lambda_event_for_post_with_formencoded_body",
            "location": 700,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_provide_port_to_local_server": {
            "name": "test_can_provide_port_to_local_server",
            "location": 727,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": []
            }
        },
        "test_can_provide_host_to_local_server": {
            "name": "test_can_provide_host_to_local_server",
            "location": 733,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "str"
                ]
            }
        },
        "test_wraps_custom_sample_app_with_local_chalice": {
            "name": "test_wraps_custom_sample_app_with_local_chalice",
            "location": 739,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "custom_sample_app": [
                    "str"
                ]
            }
        },
        "test_can_allow_route_arns": {
            "name": "test_can_allow_route_arns",
            "location": 1112,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "arn": [],
                "pattern": []
            }
        },
        "test_can_deny_route_arns": {
            "name": "test_can_deny_route_arns",
            "location": 1134,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "arn": [],
                "pattern": []
            }
        },
        "test_can_allow_multiple_resource_arns": {
            "name": "test_can_allow_multiple_resource_arns",
            "location": 1160,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "arn": [],
                "patterns": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_can_deny_multiple_resource_arns": {
            "name": "test_can_deny_multiple_resource_arns",
            "location": 1181,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "arn": [],
                "patterns": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "FakeTimeSource.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "times": [
                    "int",
                    "float"
                ]
            }
        },
        "FakeTimeSource.time": {
            "name": "time",
            "location": 41,
            "return": [
                "int",
                "str",
                "float",
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChaliceStubbedHandler.setup": {
            "name": "setup",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChaliceStubbedHandler.finish": {
            "name": "finish",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomSampleChalice.custom_method": {
            "name": "custom_method",
            "location": 64,
            "return": [
                "typing.Text",
                "int",
                "str",
                "float",
                "Union[int, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "sample_app.index": {
            "name": "index",
            "location": 95,
            "return": [
                "dict[typing.Text, typing.Text]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "sample_app.name": {
            "name": "name",
            "location": 99,
            "return": [
                "dict[typing.Text, ]",
                "Type[BaseException]",
                "BaseException",
                "Exception",
                "type"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "sample_app.put": {
            "name": "put",
            "location": 103,
            "return": [
                "dict[typing.Text, ]",
                "dict",
                "str",
                "Dict[str, Any]",
                "Callable"
            ],
            "arguments": {}
        },
        "sample_app.cors": {
            "name": "cors",
            "location": 107,
            "return": [
                "bool",
                "dict[typing.Text, bool]"
            ],
            "arguments": {}
        },
        "sample_app.custom_cors": {
            "name": "custom_cors",
            "location": 117,
            "return": [
                "bool",
                "dict[typing.Text, bool]"
            ],
            "arguments": {}
        },
        "sample_app.without_cors": {
            "name": "without_cors",
            "location": 121,
            "return": [
                "bool",
                "dict[typing.Text, bool]"
            ],
            "arguments": {}
        },
        "sample_app.with_cors": {
            "name": "with_cors",
            "location": 125,
            "return": [
                "bool",
                "dict[typing.Text, bool]"
            ],
            "arguments": {}
        },
        "sample_app.options": {
            "name": "options",
            "location": 129,
            "return": [
                "bool",
                "dict[typing.Text, bool]"
            ],
            "arguments": {}
        },
        "sample_app.delete": {
            "name": "delete",
            "location": 133,
            "return": [
                "dict[typing.Text, bool]",
                "bool",
                "Union[str, Pattern]"
            ],
            "arguments": {}
        },
        "sample_app.patch": {
            "name": "patch",
            "location": 137,
            "return": [
                "bool",
                "dict[typing.Text, bool]"
            ],
            "arguments": {}
        },
        "sample_app.badrequest": {
            "name": "badrequest",
            "location": 141,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "sample_app.decimals": {
            "name": "decimals",
            "location": 145,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "sample_app.query_string": {
            "name": "query_string",
            "location": 149,
            "return": [
                "bool",
                "int",
                "bytes",
                "Dict[str, Union[str, int]]",
                "Optional[Dict[str, Any]]",
                "Dict[str, Dict[str, str]]",
                "Dict[str, int]"
            ],
            "arguments": {}
        },
        "sample_app.query_string_multi": {
            "name": "query_string_multi",
            "location": 153,
            "return": [
                "dict[, ]",
                "str",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "sample_app.custom_response": {
            "name": "custom_response",
            "location": 159,
            "return": [
                "Response",
                "str",
                "dict",
                "List[Dict[str, Any]]",
                "Dict[str, Any]",
                "Tuple[str, str]",
                "Tuple[dict, int]"
            ],
            "arguments": {}
        },
        "sample_app.binary_round_trip": {
            "name": "binary_round_trip",
            "location": 166,
            "return": [
                "Response",
                "List[str]",
                "Dict[str, str]",
                "OrderedDict",
                "int"
            ],
            "arguments": {}
        },
        "sample_app.multi_value_header": {
            "name": "multi_value_header",
            "location": 172,
            "return": [
                "Response",
                "str",
                "bool",
                "List[Dict[str, Any]]",
                "dict"
            ],
            "arguments": {}
        },
        "demo_app_auth._policy": {
            "name": "_policy",
            "location": 186,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Union[typing.Text,list[dict[typing.Text, typing.Text]]]]]]",
                "str",
                "IO[str]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "effect": [
                    "int",
                    "Callable",
                    "str"
                ],
                "resource": [
                    "int",
                    "Callable",
                    "str"
                ],
                "action": [
                    "typing.Text",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "demo_app_auth.auth_with_explicit_policy": {
            "name": "auth_with_explicit_policy",
            "location": 203,
            "return": [
                "set",
                "str"
            ],
            "arguments": {
                "auth_request": [
                    "str",
                    "Mapping[str, str]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "demo_app_auth.demo_authorizer_returns_none": {
            "name": "demo_authorizer_returns_none",
            "location": 217,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "auth_request": [
                    "dict",
                    "aiohttp.web.Response",
                    "Dict[str, Union[str, int]]"
                ]
            }
        },
        "demo_app_auth.auth_with_multiple_actions": {
            "name": "auth_with_multiple_actions",
            "location": 221,
            "return": [
                "set",
                "str"
            ],
            "arguments": {
                "auth_request": [
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "demo_app_auth.demo_auth": {
            "name": "demo_auth",
            "location": 230,
            "return": [
                "Dict[str, Any]",
                "Dict[str, List[str]]",
                "int",
                "src.config.user_config.UserConfig",
                "bool"
            ],
            "arguments": {
                "auth_request": [
                    "dict",
                    "Union[dict, list]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "demo_app_auth.resource_auth": {
            "name": "resource_auth",
            "location": 238,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "auth_request": [
                    "dict",
                    "Union[dict, list]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "demo_app_auth.all_auth": {
            "name": "all_auth",
            "location": 247,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "bool"
            ],
            "arguments": {
                "auth_request": [
                    "Union[dict, list]",
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "demo_app_auth.landing_page_auth": {
            "name": "landing_page_auth",
            "location": 255,
            "return": [
                "str",
                "Dict[str, Any]",
                "src.config.user_config.UserConfig"
            ],
            "arguments": {
                "auth_request": [
                    "Union[dict, list]",
                    "str",
                    "dict"
                ]
            }
        },
        "demo_app_auth.landing_view": {
            "name": "landing_view",
            "location": 267,
            "return": [
                "dict[, ]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "demo_app_auth.index_view": {
            "name": "index_view",
            "location": 271,
            "return": [
                "dict[, ]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "demo_app_auth.secret_view": {
            "name": "secret_view",
            "location": 275,
            "return": [
                "dict[, ]",
                "int",
                "bytearray",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "demo_app_auth.single_value": {
            "name": "single_value",
            "location": 279,
            "return": [
                "dict[typing.Text, ]",
                "str",
                "bool"
            ],
            "arguments": {
                "name": [
                    "bool",
                    "str"
                ]
            }
        },
        "demo_app_auth.secret_view_value": {
            "name": "secret_view_value",
            "location": 283,
            "return": [
                "dict[typing.Text, ]",
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "value": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "demo_app_auth.explicit": {
            "name": "explicit",
            "location": 287,
            "return": [
                "dict[, ]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "demo_app_auth.multi": {
            "name": "multi",
            "location": 291,
            "return": [
                "dict[, ]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "demo_app_auth.iam_route": {
            "name": "iam_route",
            "location": 295,
            "return": [
                "dict[, ]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "demo_app_auth.cognito_route": {
            "name": "cognito_route",
            "location": 299,
            "return": [
                "dict[, ]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "demo_app_auth.none_auth": {
            "name": "none_auth",
            "location": 303,
            "return": [
                "dict[, ]",
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "TestLambdaContext.test_can_get_remaining_time_once": {
            "name": "test_can_get_remaining_time_once",
            "location": 748,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "lambda_context_args": [
                    "aioapp.app.Application"
                ]
            }
        },
        "TestLambdaContext.test_can_get_remaining_time_multiple": {
            "name": "test_can_get_remaining_time_multiple",
            "location": 755,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "lambda_context_args": [
                    "aioapp.app.Application"
                ]
            }
        },
        "TestLambdaContext.test_does_populate_aws_request_id_with_valid_uuid": {
            "name": "test_does_populate_aws_request_id_with_valid_uuid",
            "location": 767,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "lambda_context_args": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestLambdaContext.test_does_set_version_to_latest": {
            "name": "test_does_set_version_to_latest",
            "location": 772,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "lambda_context_args": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestLocalGateway.test_can_invoke_function": {
            "name": "test_can_invoke_function",
            "location": 778,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalGateway.test_does_populate_context": {
            "name": "test_does_populate_context",
            "location": 790,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalGateway.test_defaults_timeout_if_needed": {
            "name": "test_defaults_timeout_if_needed",
            "location": 819,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalGateway.test_can_validate_route_with_variables": {
            "name": "test_can_validate_route_with_variables",
            "location": 836,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "demo_app_auth": []
            }
        },
        "TestLocalGateway.test_can_allow_route_with_variables": {
            "name": "test_can_allow_route_with_variables",
            "location": 843,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "demo_app_auth": []
            }
        },
        "TestLocalGateway.test_does_send_500_when_authorizer_returns_none": {
            "name": "test_does_send_500_when_authorizer_returns_none",
            "location": 850,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "demo_app_auth": []
            }
        },
        "TestLocalGateway.test_can_deny_route_with_variables": {
            "name": "test_can_deny_route_with_variables",
            "location": 856,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "demo_app_auth": []
            }
        },
        "TestLocalGateway.test_does_deny_unauthed_request": {
            "name": "test_does_deny_unauthed_request",
            "location": 862,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "demo_app_auth": []
            }
        },
        "TestLocalGateway.test_does_throw_unauthorized_when_no_auth_token_present_on_valid_route": {
            "name": "test_does_throw_unauthorized_when_no_auth_token_present_on_valid_route",
            "location": 872,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "demo_app_auth": []
            }
        },
        "TestLocalGateway.test_does_deny_with_forbidden_when_route_not_found": {
            "name": "test_does_deny_with_forbidden_when_route_not_found",
            "location": 881,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "demo_app_auth": []
            }
        },
        "TestLocalGateway.test_does_deny_with_forbidden_when_auth_token_present": {
            "name": "test_does_deny_with_forbidden_when_auth_token_present",
            "location": 889,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "demo_app_auth": []
            }
        },
        "TestLocalBuiltinAuthorizers.test_can_authorize_empty_path": {
            "name": "test_can_authorize_empty_path",
            "location": 903,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "lambda_context_args": [],
                "demo_app_auth": [
                    "str"
                ],
                "create_event": []
            }
        },
        "TestLocalBuiltinAuthorizers.test_can_call_method_without_auth": {
            "name": "test_can_call_method_without_auth",
            "location": 916,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "lambda_context_args": [
                    "aioapp.app.Application"
                ],
                "create_event": [
                    "mock.MagicMock",
                    "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository"
                ]
            }
        },
        "TestLocalBuiltinAuthorizers.test_does_raise_not_authorized_error": {
            "name": "test_does_raise_not_authorized_error",
            "location": 935,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "demo_app_auth": [
                    "str",
                    "int",
                    "raiden.app.App"
                ],
                "lambda_context_args": [],
                "create_event": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "TestLocalBuiltinAuthorizers.test_does_authorize_valid_requests": {
            "name": "test_does_authorize_valid_requests",
            "location": 945,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "demo_app_auth": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "lambda_context_args": [],
                "create_event": [
                    "str",
                    "int"
                ]
            }
        },
        "TestLocalBuiltinAuthorizers.test_does_authorize_unsupported_authorizer": {
            "name": "test_does_authorize_unsupported_authorizer",
            "location": 955,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "demo_app_auth": [
                    "str",
                    "raiden.app.App"
                ],
                "lambda_context_args": [],
                "create_event": [
                    "dict",
                    "dict[, ]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestLocalBuiltinAuthorizers.test_cannot_access_view_without_permission": {
            "name": "test_cannot_access_view_without_permission",
            "location": 973,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "demo_app_auth": [
                    "str",
                    "int",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "lambda_context_args": [],
                "create_event": [
                    "str"
                ]
            }
        },
        "TestLocalBuiltinAuthorizers.test_can_understand_explicit_auth_policy": {
            "name": "test_can_understand_explicit_auth_policy",
            "location": 984,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "demo_app_auth": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "lambda_context_args": [],
                "create_event": [
                    "str"
                ]
            }
        },
        "TestLocalBuiltinAuthorizers.test_can_understand_explicit_deny_policy": {
            "name": "test_can_understand_explicit_deny_policy",
            "location": 995,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "demo_app_auth": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "lambda_context_args": [],
                "create_event": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "TestLocalBuiltinAuthorizers.test_can_understand_multi_actions": {
            "name": "test_can_understand_multi_actions",
            "location": 1011,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "demo_app_auth": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "lambda_context_args": [],
                "create_event": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "TestLocalBuiltinAuthorizers.test_can_understand_cognito_token": {
            "name": "test_can_understand_cognito_token",
            "location": 1022,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "lambda_context_args": [],
                "demo_app_auth": [
                    "int"
                ],
                "create_event": []
            }
        },
        "TestLocalBuiltinAuthorizers.test_does_authorize_unsupported_cognito_token": {
            "name": "test_does_authorize_unsupported_cognito_token",
            "location": 1036,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "lambda_context_args": [],
                "demo_app_auth": [],
                "create_event": []
            }
        },
        "TestArnBuilder.test_can_create_basic_arn": {
            "name": "test_can_create_basic_arn",
            "location": 1059,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "arn_builder": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestArnBuilder.test_can_create_root_arn": {
            "name": "test_can_create_root_arn",
            "location": 1065,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "arn_builder": [
                    "str"
                ]
            }
        },
        "TestArnBuilder.test_can_create_multi_part_arn": {
            "name": "test_can_create_multi_part_arn",
            "location": 1071,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "arn_builder": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestArnBuilder.test_can_create_glob_method_arn": {
            "name": "test_can_create_glob_method_arn",
            "location": 1077,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "arn_builder": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestArnBuilder.test_build_arn_with_query_params": {
            "name": "test_build_arn_with_query_params",
            "location": 1083,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "arn_builder": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestLocalDevServer.test_can_delegate_to_server": {
            "name": "test_can_delegate_to_server",
            "location": 1191,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app": [
                    "str"
                ]
            }
        },
        "TestLocalDevServer.test_host_and_port_forwarded_to_server_creation": {
            "name": "test_host_and_port_forwarded_to_server_creation",
            "location": 1204,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app": []
            }
        },
        "TestLocalDevServer.test_does_use_daemon_threads": {
            "name": "test_does_use_daemon_threads",
            "location": 1217,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app": [
                    "Dict[str, Sequence[str]]",
                    "str",
                    "dict[str, typing.Sequence[str]]"
                ]
            }
        },
        "TestLocalGateway.test_can_invoke_function.index_view": {
            "name": "index_view",
            "location": 782,
            "return": [
                "dict[typing.Text, typing.Text]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "TestLocalGateway.test_does_populate_context.context_view": {
            "name": "context_view",
            "location": 794,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {}
        },
        "TestLocalGateway.test_defaults_timeout_if_needed.context_view": {
            "name": "context_view",
            "location": 823,
            "return": [
                "Optional[str]",
                "dict[typing.Text, ]"
            ],
            "arguments": {}
        },
        "TestLocalBuiltinAuthorizers.test_can_call_method_without_auth.index_view": {
            "name": "index_view",
            "location": 921,
            "return": [
                "dict[, ]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "TestLocalDevServer.test_host_and_port_forwarded_to_server_creation.args_recorder": {
            "name": "args_recorder",
            "location": 1207,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "chalice-master/tests/unit/test_logs.py": {
        "message": {
            "name": "message",
            "location": 13,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,dict[, ],None]]",
                "str",
                "bool"
            ],
            "arguments": {
                "log_message": [
                    "str",
                    "Optional[Dict]",
                    "dict[, ]",
                    "None"
                ],
                "log_stream_name": [
                    "typing.Text",
                    "str",
                    "Optional[Dict]"
                ]
            }
        },
        "test_can_convert_since_to_start_time": {
            "name": "test_can_convert_since_to_start_time",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_retrieve_all_logs": {
            "name": "test_can_retrieve_all_logs",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_support_max_entries": {
            "name": "test_can_support_max_entries",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_exclude_lambda_messages": {
            "name": "test_can_exclude_lambda_messages",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_parse_short_id": {
            "name": "test_can_parse_short_id",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_create_from_arn": {
            "name": "test_can_create_from_arn",
            "location": 82,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_display_logs": {
            "name": "test_can_display_logs",
            "location": 90,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_iterate_through_all_log_events": {
            "name": "test_can_iterate_through_all_log_events",
            "location": 106,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_follow_log_events": {
            "name": "test_can_follow_log_events",
            "location": 122,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_follow_logs_initially_empty": {
            "name": "test_follow_logs_initially_empty",
            "location": 172,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_follow_logs_single_pages_only": {
            "name": "test_follow_logs_single_pages_only",
            "location": 192,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_follow_logs_last_page_empty": {
            "name": "test_follow_logs_last_page_empty",
            "location": 210,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_follow_logs_all_pages_empty_with_pagination": {
            "name": "test_follow_logs_all_pages_empty_with_pagination",
            "location": 253,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_follow_logs_defaults_to_ten_minutes": {
            "name": "test_follow_logs_defaults_to_ten_minutes",
            "location": 280,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_dont_default_if_explicit_since_is_provided": {
            "name": "test_dont_default_if_explicit_since_is_provided",
            "location": 290,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "chalice-master/tests/unit/test_package.py": {
        "mock_swagger_generator": {
            "name": "mock_swagger_generator",
            "location": 19,
            "return": [
                "List[str]",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {}
        },
        "test_can_create_app_packager": {
            "name": "test_can_create_app_packager",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_create_terraform_app_packager": {
            "name": "test_can_create_terraform_app_packager",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_template_post_processor_moves_files_once": {
            "name": "test_template_post_processor_moves_files_once",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_terraform_post_processor_moves_files_once": {
            "name": "test_terraform_post_processor_moves_files_once",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_template_generator_default": {
            "name": "test_template_generator_default",
            "location": 92,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_to_cfn_resource_name": {
            "name": "test_to_cfn_resource_name",
            "location": 2030,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "is_yaml": [
                    "str"
                ]
            }
        },
        "test_supports_custom_tags": {
            "name": "test_supports_custom_tags",
            "location": 2045,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "yaml_contents": [
                    "str",
                    "int"
                ],
                "expected": [
                    "str",
                    "int"
                ]
            }
        },
        "TestTemplateMergePostProcessor._test_can_call_merge": {
            "name": "_test_can_call_merge",
            "location": 103,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "file_template": [
                    "str",
                    "dict[str, typing.Union[int,str]]",
                    "configIni.Config",
                    "Dict[str, Union[int, str]]"
                ],
                "template_name": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "TestTemplateMergePostProcessor.test_can_call_merge": {
            "name": "test_can_call_merge",
            "location": 137,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTemplateMergePostProcessor.test_can_call_merge_with_yaml": {
            "name": "test_can_call_merge_with_yaml",
            "location": 152,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTemplateMergePostProcessor.test_raise_on_bad_json": {
            "name": "test_raise_on_bad_json",
            "location": 164,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTemplateMergePostProcessor.test_raise_on_bad_yaml": {
            "name": "test_raise_on_bad_yaml",
            "location": 193,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTemplateMergePostProcessor.test_raise_if_file_does_not_exist": {
            "name": "test_raise_if_file_does_not_exist",
            "location": 222,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompositePostProcessor.test_can_call_no_processors": {
            "name": "test_can_call_no_processors",
            "location": 244,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompositePostProcessor.test_does_call_processors_once": {
            "name": "test_does_call_processors_once",
            "location": 252,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemplateTestBase.setup_method": {
            "name": "setup_method",
            "location": 271,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stubbed_session": [
                    "str",
                    "Optional[int]",
                    "int",
                    "List[Tuple[str, str]]",
                    "None",
                    "bool",
                    "list[tuple[typing.Union[str,str]]]"
                ]
            }
        },
        "TemplateTestBase.generate_template": {
            "name": "generate_template",
            "location": 285,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "str",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[str, str]",
                    "Iterable[str]",
                    "Dict[str, str]"
                ],
                "chalice_stage_name": [
                    "typing.Text",
                    "str",
                    "List[str]",
                    "Type[config.Config]",
                    "raiden.utils.Address"
                ],
                "options": [
                    "Optional[str]",
                    "None",
                    "Sequence[str]",
                    "str",
                    "Optional[TextIO]",
                    "typing.Sequence[str]",
                    "typing.TextIO"
                ]
            }
        },
        "TemplateTestBase.lambda_function": {
            "name": "lambda_function",
            "location": 293,
            "return": [
                "Optional[db.models.Taxon]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemplateTestBase.managed_layer": {
            "name": "managed_layer",
            "location": 312,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPackageOptions.test_service_principal": {
            "name": "test_service_principal",
            "location": 323,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTerraformTemplate.generate_template": {
            "name": "generate_template",
            "location": 352,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "str",
                    "Callable",
                    "bool",
                    "typing.Callable[, ]",
                    "Type[config.Config]",
                    "typing.Type"
                ],
                "chalice_stage_name": [
                    "typing.Text",
                    "str",
                    "List[str]",
                    "Type[config.Config]",
                    "raiden.utils.Address"
                ],
                "options": [
                    "Optional[str]",
                    "None",
                    "Sequence[str]",
                    "str",
                    "Optional[TextIO]",
                    "typing.Sequence[str]",
                    "typing.TextIO"
                ]
            }
        },
        "TestTerraformTemplate.get_function": {
            "name": "get_function",
            "location": 381,
            "return": [
                "Callable",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "Dict[str, Any]",
                    "dict",
                    "Sequence[dict]"
                ]
            }
        },
        "TestTerraformTemplate.test_supports_precreated_role": {
            "name": "test_supports_precreated_role",
            "location": 387,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTerraformTemplate.test_adds_env_vars_when_provided": {
            "name": "test_adds_env_vars_when_provided",
            "location": 399,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app": [
                    "str",
                    "int"
                ]
            }
        },
        "TestTerraformTemplate.test_adds_vpc_config_when_provided": {
            "name": "test_adds_vpc_config_when_provided",
            "location": 410,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTerraformTemplate.test_adds_layers_when_provided": {
            "name": "test_adds_layers_when_provided",
            "location": 420,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTerraformTemplate.test_adds_managed_layer_when_provided": {
            "name": "test_adds_managed_layer_when_provided",
            "location": 427,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTerraformTemplate.test_adds_reserved_concurrency_when_provided": {
            "name": "test_adds_reserved_concurrency_when_provided",
            "location": 445,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app": []
            }
        },
        "TestTerraformTemplate.test_can_add_tracing_config": {
            "name": "test_can_add_tracing_config",
            "location": 452,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app": [
                    "str",
                    "int"
                ]
            }
        },
        "TestTerraformTemplate.test_can_generate_cloudwatch_event": {
            "name": "test_can_generate_cloudwatch_event",
            "location": 459,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTerraformTemplate.test_can_generate_scheduled_event": {
            "name": "test_can_generate_scheduled_event",
            "location": 483,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTerraformTemplate.test_can_generate_rest_api": {
            "name": "test_can_generate_rest_api",
            "location": 504,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app_with_auth": [
                    "int",
                    "backup.config.Config"
                ]
            }
        },
        "TestTerraformTemplate.test_can_package_s3_event_handler_with_tf_ref": {
            "name": "test_can_package_s3_event_handler_with_tf_ref",
            "location": 579,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app": [
                    "backup.config.Config"
                ]
            }
        },
        "TestTerraformTemplate.test_can_generate_chalice_terraform_static_data": {
            "name": "test_can_generate_chalice_terraform_static_data",
            "location": 599,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app": [
                    "backup.config.Config"
                ]
            }
        },
        "TestTerraformTemplate.test_can_package_s3_event_handler_sans_filters": {
            "name": "test_can_package_s3_event_handler_sans_filters",
            "location": 610,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app": [
                    "Optional[str]",
                    "str",
                    "backup.config.Config",
                    "None"
                ]
            }
        },
        "TestTerraformTemplate.test_can_package_s3_event_handler": {
            "name": "test_can_package_s3_event_handler",
            "location": 629,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app": [
                    "backup.config.Config"
                ]
            }
        },
        "TestTerraformTemplate.test_can_package_sns_handler": {
            "name": "test_can_package_sns_handler",
            "location": 664,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app": [
                    "backup.config.Config"
                ]
            }
        },
        "TestTerraformTemplate.test_can_package_sns_arn_handler": {
            "name": "test_can_package_sns_arn_handler",
            "location": 684,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app": [
                    "backup.config.Config"
                ]
            }
        },
        "TestTerraformTemplate.test_can_package_sqs_handler": {
            "name": "test_can_package_sqs_handler",
            "location": 712,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app": [
                    "backup.config.Config"
                ]
            }
        },
        "TestTerraformTemplate.test_sqs_arn_does_not_use_fn_sub": {
            "name": "test_sqs_arn_does_not_use_fn_sub",
            "location": 735,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app": [
                    "backup.config.Config"
                ]
            }
        },
        "TestTerraformTemplate.test_can_package_kinesis_handler": {
            "name": "test_can_package_kinesis_handler",
            "location": 755,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app": [
                    "backup.config.Config"
                ]
            }
        },
        "TestTerraformTemplate.test_can_package_dynamodb_handler": {
            "name": "test_can_package_dynamodb_handler",
            "location": 781,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app": [
                    "backup.config.Config"
                ]
            }
        },
        "TestTerraformTemplate.test_can_generate_websockets_api": {
            "name": "test_can_generate_websockets_api",
            "location": 804,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_websocket_app": [
                    "backup.config.Config"
                ]
            }
        },
        "TestTerraformTemplate.test_can_generate_custom_domain_name": {
            "name": "test_can_generate_custom_domain_name",
            "location": 976,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app": [
                    "backup.config.Config"
                ]
            }
        },
        "TestTerraformTemplate.test_can_generate_domain_for_regional_endpoint": {
            "name": "test_can_generate_domain_for_regional_endpoint",
            "location": 1014,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app": []
            }
        },
        "TestSAMTemplate.test_sam_generates_sam_template_basic": {
            "name": "test_sam_generates_sam_template_basic",
            "location": 1053,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app": [
                    "backup.config.Config"
                ]
            }
        },
        "TestSAMTemplate.test_can_generate_lambda_layer_if_configured": {
            "name": "test_can_generate_lambda_layer_if_configured",
            "location": 1075,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app": [
                    "backup.config.Config"
                ]
            }
        },
        "TestSAMTemplate.test_adds_single_layer_for_multiple_lambdas": {
            "name": "test_adds_single_layer_for_multiple_lambdas",
            "location": 1095,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app": [
                    "str",
                    "int"
                ]
            }
        },
        "TestSAMTemplate.test_supports_precreated_role": {
            "name": "test_supports_precreated_role",
            "location": 1126,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSAMTemplate.test_sam_injects_policy": {
            "name": "test_sam_injects_policy",
            "location": 1137,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app": []
            }
        },
        "TestSAMTemplate.test_adds_env_vars_when_provided": {
            "name": "test_adds_env_vars_when_provided",
            "location": 1176,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app": [
                    "str",
                    "int"
                ]
            }
        },
        "TestSAMTemplate.test_adds_vpc_config_when_provided": {
            "name": "test_adds_vpc_config_when_provided",
            "location": 1187,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSAMTemplate.test_adds_reserved_concurrency_when_provided": {
            "name": "test_adds_reserved_concurrency_when_provided",
            "location": 1198,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app": []
            }
        },
        "TestSAMTemplate.test_adds_layers_when_provided": {
            "name": "test_adds_layers_when_provided",
            "location": 1205,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app": []
            }
        },
        "TestSAMTemplate.test_duplicate_resource_name_raises_error": {
            "name": "test_duplicate_resource_name_raises_error",
            "location": 1215,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSAMTemplate.test_role_arn_inserted_when_necessary": {
            "name": "test_role_arn_inserted_when_necessary",
            "location": 1223,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSAMTemplate.test_can_generate_cloudwatch_event": {
            "name": "test_can_generate_cloudwatch_event",
            "location": 1257,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSAMTemplate.test_can_generate_scheduled_event": {
            "name": "test_can_generate_scheduled_event",
            "location": 1284,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSAMTemplate.test_can_generate_rest_api_without_compression": {
            "name": "test_can_generate_rest_api_without_compression",
            "location": 1308,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app_with_auth": [
                    "str",
                    "backup.config.Config",
                    "dict[, ]",
                    "dict"
                ]
            }
        },
        "TestSAMTemplate.test_can_generate_rest_api": {
            "name": "test_can_generate_rest_api",
            "location": 1319,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app_with_auth": [
                    "str",
                    "backup.config.Config",
                    "dict[, ]",
                    "dict"
                ]
            }
        },
        "TestSAMTemplate.test_generate_partial_websocket_api": {
            "name": "test_generate_partial_websocket_api",
            "location": 1385,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "route_key": [
                    "str",
                    "int"
                ],
                "route": [
                    "str",
                    "bool",
                    "int",
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "None",
                    "Union[str, float]",
                    "float"
                ],
                "sample_websocket_app": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "TestSAMTemplate.test_generate_websocket_api": {
            "name": "test_generate_websocket_api",
            "location": 1403,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_websocket_app": [
                    "backup.config.Config"
                ]
            }
        },
        "TestSAMTemplate.test_managed_iam_role": {
            "name": "test_managed_iam_role",
            "location": 1543,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSAMTemplate.test_single_role_generated_for_default_config": {
            "name": "test_single_role_generated_for_default_config",
            "location": 1571,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app_lambda_only": [
                    "backup.config.Config"
                ]
            }
        },
        "TestSAMTemplate.test_vpc_config_added_to_function": {
            "name": "test_vpc_config_added_to_function",
            "location": 1605,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app_lambda_only": []
            }
        },
        "TestSAMTemplate.test_helpful_error_message_on_s3_event": {
            "name": "test_helpful_error_message_on_s3_event",
            "location": 1622,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app": [
                    "backup.config.Config"
                ]
            }
        },
        "TestSAMTemplate.test_can_package_sns_handler": {
            "name": "test_can_package_sns_handler",
            "location": 1638,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app": [
                    "backup.config.Config"
                ]
            }
        },
        "TestSAMTemplate.test_can_package_sns_arn_handler": {
            "name": "test_can_package_sns_arn_handler",
            "location": 1662,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app": [
                    "backup.config.Config"
                ]
            }
        },
        "TestSAMTemplate.test_can_package_sqs_handler": {
            "name": "test_can_package_sqs_handler",
            "location": 1683,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app": [
                    "backup.config.Config"
                ]
            }
        },
        "TestSAMTemplate.test_sqs_arn_does_not_use_fn_sub": {
            "name": "test_sqs_arn_does_not_use_fn_sub",
            "location": 1709,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app": [
                    "backup.config.Config"
                ]
            }
        },
        "TestSAMTemplate.test_can_package_kinesis_handler": {
            "name": "test_can_package_kinesis_handler",
            "location": 1730,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app": [
                    "backup.config.Config"
                ]
            }
        },
        "TestSAMTemplate.test_can_package_dynamodb_handler": {
            "name": "test_can_package_dynamodb_handler",
            "location": 1757,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app": [
                    "backup.config.Config"
                ]
            }
        },
        "TestSAMTemplate.test_can_generate_custom_domain_name": {
            "name": "test_can_generate_custom_domain_name",
            "location": 1780,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app": [
                    "backup.config.Config"
                ]
            }
        },
        "TestSAMTemplate.test_can_generate_domain_for_regional_endpoint": {
            "name": "test_can_generate_domain_for_regional_endpoint",
            "location": 1823,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app": []
            }
        },
        "TestSAMTemplate.test_can_generate_domain_for_ws_endpoint": {
            "name": "test_can_generate_domain_for_ws_endpoint",
            "location": 1857,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_websocket_app": [
                    "backup.config.Config"
                ]
            }
        },
        "TestTemplateDeepMerger.test_can_merge_without_changing_identity": {
            "name": "test_can_merge_without_changing_identity",
            "location": 1897,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTemplateDeepMerger.test_does_not_mutate": {
            "name": "test_does_not_mutate",
            "location": 1907,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTemplateDeepMerger.test_can_add_element": {
            "name": "test_can_add_element",
            "location": 1916,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTemplateDeepMerger.test_can_replace_element": {
            "name": "test_can_replace_element",
            "location": 1927,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTemplateDeepMerger.test_can_merge_list": {
            "name": "test_can_merge_list",
            "location": 1937,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTemplateDeepMerger.test_can_merge_nested_elements": {
            "name": "test_can_merge_nested_elements",
            "location": 1947,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTemplateDeepMerger.test_can_merge_nested_list": {
            "name": "test_can_merge_nested_list",
            "location": 1968,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTemplateDeepMerger.test_list_elements_are_replaced": {
            "name": "test_list_elements_are_replaced",
            "location": 1989,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTemplateDeepMerger.test_merge_can_change_type": {
            "name": "test_merge_can_change_type",
            "location": 2003,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTerraformTemplate.test_can_package_s3_event_handler_with_tf_ref.handler": {
            "name": "handler",
            "location": 582,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "TestTerraformTemplate.test_can_package_s3_event_handler_sans_filters.handler": {
            "name": "handler",
            "location": 612,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "TestTerraformTemplate.test_can_package_s3_event_handler.handler": {
            "name": "handler",
            "location": 632,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "TestTerraformTemplate.test_can_package_sns_handler.handler": {
            "name": "handler",
            "location": 666,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "TestTerraformTemplate.test_can_package_sns_arn_handler.handler": {
            "name": "handler",
            "location": 688,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "TestTerraformTemplate.test_can_package_sqs_handler.handler": {
            "name": "handler",
            "location": 714,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "TestTerraformTemplate.test_sqs_arn_does_not_use_fn_sub.handler": {
            "name": "handler",
            "location": 737,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "TestTerraformTemplate.test_can_package_kinesis_handler.handler": {
            "name": "handler",
            "location": 758,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "TestTerraformTemplate.test_can_package_dynamodb_handler.handler": {
            "name": "handler",
            "location": 785,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "str",
                    "tonga.models.records.command.command.BaseCommand"
                ]
            }
        },
        "TestSAMTemplate.test_adds_single_layer_for_multiple_lambdas.first": {
            "name": "first",
            "location": 1104,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "str",
                    "tonga.models.records.command.command.BaseCommand"
                ],
                "context": [
                    "str",
                    "tonga.models.records.command.command.BaseCommand"
                ]
            }
        },
        "TestSAMTemplate.test_adds_single_layer_for_multiple_lambdas.second": {
            "name": "second",
            "location": 1108,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [],
                "context": []
            }
        },
        "TestSAMTemplate.test_single_role_generated_for_default_config.second": {
            "name": "second",
            "location": 1576,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "str",
                    "tonga.models.records.command.command.BaseCommand"
                ],
                "context": [
                    "str",
                    "tonga.models.records.command.command.BaseCommand"
                ]
            }
        },
        "TestSAMTemplate.test_single_role_generated_for_default_config.third": {
            "name": "third",
            "location": 1580,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "str",
                    "tonga.models.records.command.command.BaseCommand"
                ],
                "context": [
                    "str",
                    "tonga.models.records.command.command.BaseCommand"
                ]
            }
        },
        "TestSAMTemplate.test_helpful_error_message_on_s3_event.handler": {
            "name": "handler",
            "location": 1624,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "TestSAMTemplate.test_can_package_sns_handler.handler": {
            "name": "handler",
            "location": 1640,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "TestSAMTemplate.test_can_package_sns_arn_handler.handler": {
            "name": "handler",
            "location": 1666,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "TestSAMTemplate.test_can_package_sqs_handler.handler": {
            "name": "handler",
            "location": 1685,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "TestSAMTemplate.test_sqs_arn_does_not_use_fn_sub.handler": {
            "name": "handler",
            "location": 1711,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "TestSAMTemplate.test_can_package_kinesis_handler.handler": {
            "name": "handler",
            "location": 1732,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "TestSAMTemplate.test_can_package_dynamodb_handler.handler": {
            "name": "handler",
            "location": 1760,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "str",
                    "tonga.models.records.command.command.BaseCommand"
                ]
            }
        }
    },
    "chalice-master/tests/unit/test_pipeline.py": {
        "pipeline_gen": {
            "name": "pipeline_gen",
            "location": 9,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "pipeline_params": {
            "name": "pipeline_params",
            "location": 14,
            "return": [
                "PipelineParameters",
                "Callable[[KT, VT], bool]",
                "float",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "test_source_repo_resource": {
            "name": "test_source_repo_resource",
            "location": 151,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "pipeline_params": [
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "test_codebuild_resource": {
            "name": "test_codebuild_resource",
            "location": 179,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "pipeline_params": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_codepipeline_resource": {
            "name": "test_codepipeline_resource",
            "location": 193,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "pipeline_params": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_install_requirements_in_buildspec": {
            "name": "test_install_requirements_in_buildspec",
            "location": 220,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "pipeline_params": []
            }
        },
        "test_default_version_range_locks_minor_version": {
            "name": "test_default_version_range_locks_minor_version",
            "location": 230,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_validate_python_version": {
            "name": "test_can_validate_python_version",
            "location": 240,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_extract_python_version": {
            "name": "test_can_extract_python_version",
            "location": 247,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_generate_github_source": {
            "name": "test_can_generate_github_source",
            "location": 252,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "pipeline_params": [
                    "Exception"
                ]
            }
        },
        "test_can_create_buildspec_v2": {
            "name": "test_can_create_buildspec_v2",
            "location": 261,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_build_extractor": {
            "name": "test_build_extractor",
            "location": 269,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "TestPipelineGenLegacy.setup_method": {
            "name": "setup_method",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineGenLegacy.generate_template": {
            "name": "generate_template",
            "location": 23,
            "return": [
                "str",
                "dict[str, str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "app_name": [
                    "typing.Text",
                    "str",
                    "Optional[str]",
                    "int",
                    "Exception",
                    "float"
                ],
                "lambda_python_version": [
                    "typing.Text",
                    "str",
                    "Optional[str]",
                    "int",
                    "Exception",
                    "float"
                ],
                "codebuild_image": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]",
                    "Exception",
                    "float"
                ],
                "code_source": [
                    "typing.Text",
                    "str",
                    "Optional[str]",
                    "int",
                    "Exception",
                    "float"
                ]
            }
        },
        "TestPipelineGenLegacy.test_app_name_in_param_default": {
            "name": "test_app_name_in_param_default",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineGenLegacy.test_python_version_in_param_default": {
            "name": "test_python_version_in_param_default",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineGenLegacy.test_python_36_in_param_default": {
            "name": "test_python_36_in_param_default",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineGenLegacy.test_invalid_python_throws_error": {
            "name": "test_invalid_python_throws_error",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineGenLegacy.test_nonsense_py_version_throws_error": {
            "name": "test_nonsense_py_version_throws_error",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineGenLegacy.test_can_provide_codebuild_image": {
            "name": "test_can_provide_codebuild_image",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineGenLegacy.test_no_source_resource_when_using_github": {
            "name": "test_no_source_resource_when_using_github",
            "location": 63,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineGenLegacy.test_can_add_github_as_source_stage": {
            "name": "test_can_add_github_as_source_stage",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineGenV2.setup_method": {
            "name": "setup_method",
            "location": 95,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineGenV2.generate_template": {
            "name": "generate_template",
            "location": 98,
            "return": [
                "str",
                "dict[str, str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "app_name": [
                    "typing.Text",
                    "str",
                    "Optional[str]",
                    "int",
                    "Exception",
                    "float"
                ],
                "lambda_python_version": [
                    "typing.Text",
                    "str",
                    "Optional[str]",
                    "int",
                    "Exception",
                    "float"
                ],
                "codebuild_image": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]",
                    "Exception",
                    "float"
                ],
                "code_source": [
                    "typing.Text",
                    "str",
                    "Optional[str]",
                    "int",
                    "Exception",
                    "float"
                ],
                "pipeline_version": [
                    "typing.Text",
                    "str",
                    "Optional[str]",
                    "int",
                    "Exception",
                    "float"
                ]
            }
        },
        "TestPipelineGenV2.test_new_default_codebuild_image": {
            "name": "test_new_default_codebuild_image",
            "location": 112,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineGenV2.test_validate_python_versions": {
            "name": "test_validate_python_versions",
            "location": 118,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineGenV2.test_uses_v2_codebuild_spec": {
            "name": "test_uses_v2_codebuild_spec",
            "location": 122,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineGenV2.test_github_source_uses_secretsmanager_in_v2": {
            "name": "test_github_source_uses_secretsmanager_in_v2",
            "location": 130,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "chalice-master/tests/unit/test_policy.py": {
        "iam_policy": {
            "name": "iam_policy",
            "location": 15,
            "return": [
                "int",
                "set[str]",
                "Callable",
                "typing.Type",
                "str",
                "list[]"
            ],
            "arguments": {
                "client_calls": [
                    "bool",
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "int"
                ]
            }
        },
        "test_app_policy_generator_vpc_policy": {
            "name": "test_app_policy_generator_vpc_policy",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "assert_policy_is": {
            "name": "assert_policy_is",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "actual": [
                    "str",
                    "int"
                ],
                "expected": [
                    "int",
                    "str"
                ]
            }
        },
        "test_single_call": {
            "name": "test_single_call",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_multiple_calls_in_same_service": {
            "name": "test_multiple_calls_in_same_service",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_multiple_services_used": {
            "name": "test_multiple_services_used",
            "location": 82,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_not_one_to_one_mapping": {
            "name": "test_not_one_to_one_mapping",
            "location": 109,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_diff_policy_removed": {
            "name": "test_can_diff_policy_removed",
            "location": 129,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_diff_policy_added": {
            "name": "test_can_diff_policy_added",
            "location": 135,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_diff_multiple_services": {
            "name": "test_can_diff_multiple_services",
            "location": 141,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_no_changes": {
            "name": "test_no_changes",
            "location": 157,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_handle_high_level_abstractions": {
            "name": "test_can_handle_high_level_abstractions",
            "location": 163,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_noop_for_unknown_methods": {
            "name": "test_noop_for_unknown_methods",
            "location": 180,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "OsUtilsMock.file_exists": {
            "name": "file_exists",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OsUtilsMock.get_file_contents": {
            "name": "get_file_contents",
            "location": 11,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "selfs": [
                    "List[str]",
                    "list[str]",
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        }
    },
    "chalice-master/tests/unit/test_test.py": {
        "test_can_make_http_request": {
            "name": "test_can_make_http_request",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": []
            }
        },
        "test_can_pass_http_url": {
            "name": "test_can_pass_http_url",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": []
            }
        },
        "test_make_other_http_methods_request": {
            "name": "test_make_other_http_methods_request",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": []
            }
        },
        "test_can_provide_http_headers": {
            "name": "test_can_provide_http_headers",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": []
            }
        },
        "test_can_return_error_message": {
            "name": "test_can_return_error_message",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": []
            }
        },
        "test_can_return_binary_data": {
            "name": "test_can_return_binary_data",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": []
            }
        },
        "test_can_access_env_vars_in_rest_api": {
            "name": "test_can_access_env_vars_in_rest_api",
            "location": 85,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "tmpdir": []
            }
        },
        "test_authorizers_return_http_response_on_error": {
            "name": "test_authorizers_return_http_response_on_error",
            "location": 113,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": []
            }
        },
        "test_can_test_authorizers": {
            "name": "test_can_test_authorizers",
            "location": 131,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": []
            }
        },
        "test_can_invoke_pure_lambda_function": {
            "name": "test_can_invoke_pure_lambda_function",
            "location": 149,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_error_if_function_does_not_exist": {
            "name": "test_error_if_function_does_not_exist",
            "location": 161,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_payload_not_required_for_invoke": {
            "name": "test_payload_not_required_for_invoke",
            "location": 169,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_access_environment_variables_in_function": {
            "name": "test_can_access_environment_variables_in_function",
            "location": 181,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_can_invoke_event_handler": {
            "name": "test_can_invoke_event_handler",
            "location": 225,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_generate_s3_event": {
            "name": "test_can_generate_s3_event",
            "location": 254,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_generate_sqs_event": {
            "name": "test_can_generate_sqs_event",
            "location": 270,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_generate_cloudwatch_event": {
            "name": "test_can_generate_cloudwatch_event",
            "location": 284,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_generate_kinesis_event": {
            "name": "test_can_generate_kinesis_event",
            "location": 302,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_mix_pure_lambda_and_event_handlers": {
            "name": "test_can_mix_pure_lambda_and_event_handlers",
            "location": 316,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_invoke_handler_from_blueprint": {
            "name": "test_can_invoke_handler_from_blueprint",
            "location": 344,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_invoke_handler_with_blueprint_prefix": {
            "name": "test_can_invoke_handler_with_blueprint_prefix",
            "location": 359,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_lambda_function_with_custom_name": {
            "name": "test_lambda_function_with_custom_name",
            "location": 375,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_pass_http_url.hello": {
            "name": "hello",
            "location": 21,
            "return": [
                "dict[typing.Text, ]",
                "str",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "test_make_other_http_methods_request.method": {
            "name": "method",
            "location": 33,
            "return": [
                "dict[typing.Text, ]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "test_can_provide_http_headers.headers": {
            "name": "headers",
            "location": 48,
            "return": [
                "dict[typing.Text, ]",
                "dict",
                "Optional[Union[Any, Any]]",
                "bool",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "test_can_return_error_message.error": {
            "name": "error",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_return_binary_data.bin_echo": {
            "name": "bin_echo",
            "location": 70,
            "return": [
                "Response",
                "bool",
                "Optional[bool]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "test_can_access_env_vars_in_rest_api.env_vars": {
            "name": "env_vars",
            "location": 104,
            "return": [
                "dict[typing.Text, ]",
                "str",
                "Optional[List[str]]",
                "List[str]"
            ],
            "arguments": {}
        },
        "test_authorizers_return_http_response_on_error.myauth": {
            "name": "myauth",
            "location": 115,
            "return": [
                "AuthResponse"
            ],
            "arguments": {
                "event": []
            }
        },
        "test_authorizers_return_http_response_on_error.needs_auth": {
            "name": "needs_auth",
            "location": 121,
            "return": [
                "dict[typing.Text, bool]"
            ],
            "arguments": {}
        },
        "test_can_test_authorizers.myauth": {
            "name": "myauth",
            "location": 133,
            "return": [
                "AuthResponse",
                "dict",
                "IO[str]",
                "str"
            ],
            "arguments": {
                "event": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "test_can_test_authorizers.needs_auth": {
            "name": "needs_auth",
            "location": 138,
            "return": [
                "dict[typing.Text, bool]",
                "bool",
                "tuple"
            ],
            "arguments": {}
        },
        "test_can_invoke_pure_lambda_function.foo": {
            "name": "foo",
            "location": 153,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "event": [],
                "context": []
            }
        },
        "test_payload_not_required_for_invoke.foo": {
            "name": "foo",
            "location": 173,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "event": [],
                "context": []
            }
        },
        "test_can_access_environment_variables_in_function.foo": {
            "name": "foo",
            "location": 208,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "event": [],
                "context": []
            }
        },
        "test_can_access_environment_variables_in_function.bar": {
            "name": "bar",
            "location": 212,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "event": [],
                "context": []
            }
        },
        "test_can_invoke_event_handler.foo": {
            "name": "foo",
            "location": 229,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "event": []
            }
        },
        "test_can_generate_s3_event.foo": {
            "name": "foo",
            "location": 258,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "event": []
            }
        },
        "test_can_generate_sqs_event.foo": {
            "name": "foo",
            "location": 274,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "event": []
            }
        },
        "test_can_generate_cloudwatch_event.foo": {
            "name": "foo",
            "location": 288,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "event": []
            }
        },
        "test_can_generate_kinesis_event.foo": {
            "name": "foo",
            "location": 306,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "event": []
            }
        },
        "test_can_mix_pure_lambda_and_event_handlers.foo": {
            "name": "foo",
            "location": 320,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "event": []
            }
        },
        "test_can_mix_pure_lambda_and_event_handlers.bar": {
            "name": "bar",
            "location": 325,
            "return": [
                "dict[typing.Text, ]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        },
        "test_can_mix_pure_lambda_and_event_handlers.index": {
            "name": "index",
            "location": 329,
            "return": [
                "dict[typing.Text, typing.Text]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_can_invoke_handler_from_blueprint.my_foo": {
            "name": "my_foo",
            "location": 348,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "event": [],
                "context": []
            }
        },
        "test_can_invoke_handler_with_blueprint_prefix.my_foo": {
            "name": "my_foo",
            "location": 363,
            "return": [
                "dict[typing.Text, ]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        },
        "test_lambda_function_with_custom_name.foo": {
            "name": "foo",
            "location": 379,
            "return": [
                "dict[typing.Text, ]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "chalice-master/tests/unit/test_utils.py": {
        "test_serialize_json": {
            "name": "test_serialize_json",
            "location": 95,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_to_cfn_resource_name": {
            "name": "test_to_cfn_resource_name",
            "location": 121,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Tuple[str]",
                    "tuple[str]"
                ],
                "cfn_name": [
                    "str",
                    "Tuple[str]",
                    "tuple[str]"
                ]
            }
        },
        "test_to_cfn_resource_name_properties": {
            "name": "test_to_cfn_resource_name_properties",
            "location": 126,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "test_parse_iso8601_timestamp": {
            "name": "test_parse_iso8601_timestamp",
            "location": 210,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "timestamp": [
                    "str",
                    "Union[str, bytes]",
                    "bytes"
                ],
                "expected": [
                    "str",
                    "Union[str, bytes]",
                    "bytes"
                ]
            }
        },
        "TestUI.setup": {
            "name": "setup",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUI.test_write_goes_to_out_obj": {
            "name": "test_write_goes_to_out_obj",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUI.test_error_goes_to_err_obj": {
            "name": "test_error_goes_to_err_obj",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUI.test_confirm_raises_own_exception": {
            "name": "test_confirm_raises_own_exception",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUI.test_confirm_returns_value": {
            "name": "test_confirm_returns_value",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChaliceZip.test_chalice_zip_file": {
            "name": "test_chalice_zip_file",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "str"
                ]
            }
        },
        "TestPipeReader.test_pipe_reader_does_read_pipe": {
            "name": "test_pipe_reader_does_read_pipe",
            "location": 78,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipeReader.test_pipe_reader_does_not_read_tty": {
            "name": "test_pipe_reader_does_not_read_tty",
            "location": 86,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimestampUtils.setup": {
            "name": "setup",
            "location": 138,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimestampUtils.set_now": {
            "name": "set_now",
            "location": 143,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "year": [
                    "int",
                    "datetime.datetime",
                    "datetime.timezone",
                    "str",
                    "datetime.time"
                ],
                "month": [
                    "int",
                    "datetime.datetime",
                    "datetime.timezone",
                    "str",
                    "datetime.time"
                ],
                "day": [
                    "int",
                    "datetime.datetime",
                    "datetime.timezone",
                    "str",
                    "datetime.time"
                ],
                "hour": [
                    "int",
                    "datetime.datetime",
                    "datetime.timezone",
                    "str",
                    "datetime.time"
                ],
                "minute": [
                    "int",
                    "datetime.datetime",
                    "datetime.timezone",
                    "str",
                    "datetime.time"
                ],
                "sec": [
                    "int",
                    "datetime.datetime",
                    "datetime.timezone",
                    "str",
                    "datetime.time"
                ]
            }
        },
        "TestTimestampUtils.test_iso_no_timezone": {
            "name": "test_iso_no_timezone",
            "location": 148,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimestampUtils.test_iso_with_timezone": {
            "name": "test_iso_with_timezone",
            "location": 152,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimestampUtils.test_to_datetime_relative_second": {
            "name": "test_to_datetime_relative_second",
            "location": 159,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimestampUtils.test_to_datetime_relative_multiple_seconds": {
            "name": "test_to_datetime_relative_multiple_seconds",
            "location": 166,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimestampUtils.test_to_datetime_relative_minute": {
            "name": "test_to_datetime_relative_minute",
            "location": 173,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimestampUtils.test_to_datetime_relative_hour": {
            "name": "test_to_datetime_relative_hour",
            "location": 180,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimestampUtils.test_to_datetime_relative_day": {
            "name": "test_to_datetime_relative_day",
            "location": 187,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimestampUtils.test_to_datetime_relative_week": {
            "name": "test_to_datetime_relative_week",
            "location": 194,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "chalice-master/tests/unit/__init__.py": {},
    "chalice-master/tests/unit/cli/test_cli.py": {
        "test_cannot_run_local_mode_with_trailing_slash_route": {
            "name": "test_cannot_run_local_mode_with_trailing_slash_route",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_get_system_info": {
            "name": "test_get_system_info",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "chalice-master/tests/unit/cli/test_newproj.py": {
        "test_can_get_templated_content": {
            "name": "test_can_get_templated_content",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "contents": [
                    "tsrc.teshelpers.cli.CLI",
                    "dict"
                ],
                "template_kwargs": [
                    "tsrc.teshelpers.cli.CLI",
                    "dict"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "test_newproj_copies_and_templates_files": {
            "name": "test_newproj_copies_and_templates_files",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_can_list_available_projects": {
            "name": "test_can_list_available_projects",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "InMemoryOSUtils.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filemap": [
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Callable]",
                    "Optional[Hashable]",
                    "int"
                ]
            }
        },
        "InMemoryOSUtils.dirname": {
            "name": "dirname",
            "location": 15,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "InMemoryOSUtils.get_directory_contents": {
            "name": "get_directory_contents",
            "location": 18,
            "return": [
                "List[int]",
                "List[str]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "dirname": [
                    "str",
                    "Union[str, Iterable[str]]"
                ]
            }
        },
        "InMemoryOSUtils.file_exists": {
            "name": "file_exists",
            "location": 22,
            "return": [
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "InMemoryOSUtils.joinpath": {
            "name": "joinpath",
            "location": 25,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemoryOSUtils.walk": {
            "name": "walk",
            "location": 28,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "root_dir": [
                    "bool"
                ]
            }
        },
        "InMemoryOSUtils.directory_exists": {
            "name": "directory_exists",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "dirname": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "InMemoryOSUtils.get_file_contents": {
            "name": "get_file_contents",
            "location": 34,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "binary": [
                    "str",
                    "List[str]",
                    "List[Tuple[str, str, str]]",
                    "bool"
                ]
            }
        },
        "InMemoryOSUtils.set_file_contents": {
            "name": "set_file_contents",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "contents": [
                    "str"
                ],
                "binary": [
                    "str",
                    "BinaryIO",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "chalice-master/tests/unit/cli/__init__.py": {},
    "chalice-master/tests/unit/cli/filewatch/test_eventbased.py": {
        "test_restarter_triggers_event": {
            "name": "test_restarter_triggers_event",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_directory_events_ignored": {
            "name": "test_directory_events_ignored",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_http_server_thread_starts_server_and_shutsdown": {
            "name": "test_http_server_thread_starts_server_and_shutsdown",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_shutdown_noop_if_server_not_started": {
            "name": "test_shutdown_noop_if_server_not_started",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_parent_process_starts_child_with_worker_env_var": {
            "name": "test_parent_process_starts_child_with_worker_env_var",
            "location": 75,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_assert_child_restarted_until_not_restart_rc": {
            "name": "test_assert_child_restarted_until_not_restart_rc",
            "location": 90,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_ctrl_c_kill_child_process": {
            "name": "test_ctrl_c_kill_child_process",
            "location": 104,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "RecordingPopen.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "process": [
                    "str",
                    "Sequence[Dict[str, str]]",
                    "typing.Sequence[dict[str, str]]",
                    "List[List[str]]",
                    "list[list[str]]"
                ],
                "return_codes": [
                    "str",
                    "None",
                    "bool",
                    "List[str]",
                    "Optional[str]",
                    "list[str]"
                ]
            }
        },
        "RecordingPopen.__call__": {
            "name": "__call__",
            "location": 35,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "chalice-master/tests/unit/cli/filewatch/test_stat.py": {
        "test_can_ignore_stat_errors": {
            "name": "test_can_ignore_stat_errors",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "FakeOSUtils.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeOSUtils.walk": {
            "name": "walk",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rootdir": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "FakeOSUtils.joinpath": {
            "name": "joinpath",
            "location": 16,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeOSUtils.mtime": {
            "name": "mtime",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "test_can_ignore_stat_errors.callback": {
            "name": "callback",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "chalice-master/tests/unit/deploy/test_appgraph.py": {
        "websocket_app_without_connect": {
            "name": "websocket_app_without_connect",
            "location": 13,
            "return": [
                "\"App\"",
                "Chalice"
            ],
            "arguments": {}
        },
        "websocket_app_without_message": {
            "name": "websocket_app_without_message",
            "location": 28,
            "return": [
                "\"App\"",
                "Chalice"
            ],
            "arguments": {}
        },
        "websocket_app_without_disconnect": {
            "name": "websocket_app_without_disconnect",
            "location": 43,
            "return": [
                "\"App\"",
                "Chalice"
            ],
            "arguments": {}
        },
        "websocket_app_without_connect.message": {
            "name": "message",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "websocket_app_without_connect.disconnect": {
            "name": "disconnect",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "websocket_app_without_message.connect": {
            "name": "connect",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "websocket_app_without_message.disconnect": {
            "name": "disconnect",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "str",
                    "tonga.models.records.command.command.BaseCommand"
                ]
            }
        },
        "websocket_app_without_disconnect.connect": {
            "name": "connect",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "str",
                    "tonga.models.records.command.command.BaseCommand"
                ]
            }
        },
        "websocket_app_without_disconnect.message": {
            "name": "message",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "str",
                    "tonga.models.records.command.command.BaseCommand"
                ]
            }
        },
        "TestApplicationGraphBuilder.create_config": {
            "name": "create_config",
            "location": 59,
            "return": [
                "app.App",
                "Optional[dict]",
                "str",
                "dict",
                "neuromation.api.Config",
                "bool",
                "cmk.utils.type_defs.OptionalConfigSerial",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "dict[str, str]",
                    "str",
                    "Dict[str, str]",
                    "bool",
                    "list[str]",
                    "List[str]",
                    "int"
                ],
                "app_name": [
                    "typing.Text",
                    "Dict[str, str]",
                    "str",
                    "bool",
                    "List[str]",
                    "int"
                ],
                "iam_role_arn": [
                    "bool",
                    "None",
                    "str",
                    "Optional[list]",
                    "Optional[str]",
                    "list[]",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]"
                ],
                "policy_file": [
                    "Optional[str]",
                    "None",
                    "Optional[bool]",
                    "str",
                    "Optional[List[str]]",
                    "bool",
                    "list[str]"
                ],
                "api_gateway_stage": [
                    "typing.Text",
                    "Dict[str, str]",
                    "str",
                    "bool",
                    "List[str]",
                    "int"
                ],
                "autogen_policy": [
                    "bool",
                    "int"
                ],
                "security_group_ids": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[int]"
                ],
                "subnet_ids": [
                    "int",
                    "None",
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "reserved_concurrency": [
                    "None",
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[int]",
                    "set[int]",
                    "list[typing.Any]",
                    "Optional[Set[int]]",
                    "bool",
                    "Optional[List[Any]]"
                ],
                "layers": [
                    "bool",
                    "None",
                    "str",
                    "Iterable[str]",
                    "Optional[bool]",
                    "typing.Iterable[str]"
                ],
                "automatic_layer": [
                    "bool",
                    "Dict[str, str]",
                    "str",
                    "List[str]",
                    "int"
                ],
                "api_gateway_endpoint_type": [
                    "Dict[str, str]",
                    "None",
                    "str",
                    "bool",
                    "dict[str, str]",
                    "List[str]",
                    "int",
                    "list[str]"
                ],
                "api_gateway_endpoint_vpce": [
                    "Dict[str, str]",
                    "None",
                    "str",
                    "bool",
                    "dict[str, str]",
                    "List[str]",
                    "int",
                    "list[str]"
                ],
                "api_gateway_policy_file": [
                    "Dict[str, str]",
                    "None",
                    "str",
                    "bool",
                    "dict[str, str]",
                    "List[str]",
                    "int",
                    "list[str]"
                ],
                "api_gateway_custom_domain": [
                    "Dict[str, str]",
                    "None",
                    "str",
                    "bool",
                    "dict[str, str]",
                    "List[str]",
                    "int",
                    "list[str]"
                ],
                "websocket_api_custom_domain": [
                    "Dict[str, str]",
                    "None",
                    "str",
                    "bool",
                    "dict[str, str]",
                    "List[str]",
                    "int",
                    "list[str]"
                ],
                "project_dir": [
                    "typing.Text",
                    "Dict[str, str]",
                    "str",
                    "bool",
                    "List[str]",
                    "int"
                ]
            }
        },
        "TestApplicationGraphBuilder.test_can_build_single_lambda_function_app": {
            "name": "test_can_build_single_lambda_function_app",
            "location": 106,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app_lambda_only": [
                    "str",
                    "app.App",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ]
            }
        },
        "TestApplicationGraphBuilder.test_can_build_single_lambda_function_app_with_managed_layer": {
            "name": "test_can_build_single_lambda_function_app_with_managed_layer",
            "location": 137,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app_lambda_only": [
                    "app.App",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ]
            }
        },
        "TestApplicationGraphBuilder.test_all_lambda_functions_share_managed_layer": {
            "name": "test_all_lambda_functions_share_managed_layer",
            "location": 175,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app_lambda_only": [
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "app.App"
                ]
            }
        },
        "TestApplicationGraphBuilder.test_can_build_lambda_function_with_layers": {
            "name": "test_can_build_lambda_function_with_layers",
            "location": 192,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app_lambda_only": [
                    "app.App"
                ]
            }
        },
        "TestApplicationGraphBuilder.test_can_build_app_with_domain_name": {
            "name": "test_can_build_app_with_domain_name",
            "location": 223,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app": [
                    "str",
                    "tbump.config.Config"
                ]
            }
        },
        "TestApplicationGraphBuilder.test_can_build_lambda_function_app_with_vpc_config": {
            "name": "test_can_build_lambda_function_app_with_vpc_config",
            "location": 249,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app_lambda_only": [
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ]
            }
        },
        "TestApplicationGraphBuilder.test_vpc_trait_added_when_vpc_configured": {
            "name": "test_vpc_trait_added_when_vpc_configured",
            "location": 282,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app_lambda_only": [
                    "str"
                ]
            }
        },
        "TestApplicationGraphBuilder.test_exception_raised_when_missing_vpc_params": {
            "name": "test_exception_raised_when_missing_vpc_params",
            "location": 300,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app_lambda_only": [
                    "app.App",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ]
            }
        },
        "TestApplicationGraphBuilder.test_can_build_lambda_function_app_with_reserved_concurrency": {
            "name": "test_can_build_lambda_function_app_with_reserved_concurrency",
            "location": 314,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app_lambda_only": [
                    "aioapp.app.Application",
                    "app.App"
                ]
            }
        },
        "TestApplicationGraphBuilder.test_multiple_lambda_functions_share_role_and_package": {
            "name": "test_multiple_lambda_functions_share_role_and_package",
            "location": 344,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app_lambda_only": [
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "app.App"
                ]
            }
        },
        "TestApplicationGraphBuilder.test_autogen_policy_for_function": {
            "name": "test_autogen_policy_for_function",
            "location": 364,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app_lambda_only": [
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "app.App"
                ]
            }
        },
        "TestApplicationGraphBuilder.test_cloudwatch_event_models": {
            "name": "test_cloudwatch_event_models",
            "location": 383,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_cloudwatch_event_app": [
                    "str",
                    "backup.config.Config"
                ]
            }
        },
        "TestApplicationGraphBuilder.test_scheduled_event_models": {
            "name": "test_scheduled_event_models",
            "location": 397,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app_schedule_only": [
                    "app.App"
                ]
            }
        },
        "TestApplicationGraphBuilder.test_can_build_private_rest_api": {
            "name": "test_can_build_private_rest_api",
            "location": 411,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "TestApplicationGraphBuilder.test_can_build_private_rest_api_custom_policy": {
            "name": "test_can_build_private_rest_api_custom_policy",
            "location": 433,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "dict[, ]",
                    "dict",
                    "cmk.utils.type_defs.UserId"
                ],
                "sample_app": [
                    "dict[, ]",
                    "dict",
                    "cmk.utils.type_defs.UserId"
                ]
            }
        },
        "TestApplicationGraphBuilder.test_can_build_rest_api": {
            "name": "test_can_build_rest_api",
            "location": 455,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app": [
                    "str",
                    "app.App"
                ]
            }
        },
        "TestApplicationGraphBuilder.test_can_build_rest_api_with_authorizer": {
            "name": "test_can_build_rest_api_with_authorizer",
            "location": 472,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app_with_auth": [
                    "str",
                    "Optional[str]",
                    "None",
                    "core.models.Grouping"
                ]
            }
        },
        "TestApplicationGraphBuilder.test_can_create_s3_event_handler": {
            "name": "test_can_create_s3_event_handler",
            "location": 482,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_s3_event_app": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestApplicationGraphBuilder.test_can_create_sns_event_handler": {
            "name": "test_can_create_sns_event_handler",
            "location": 499,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_sns_event_app": [
                    "str",
                    "backup.config.Config"
                ]
            }
        },
        "TestApplicationGraphBuilder.test_can_create_sqs_event_handler": {
            "name": "test_can_create_sqs_event_handler",
            "location": 514,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_sqs_event_app": [
                    "str",
                    "backup.config.Config"
                ]
            }
        },
        "TestApplicationGraphBuilder.test_can_create_sqs_handler_with_queue_arn": {
            "name": "test_can_create_sqs_handler_with_queue_arn",
            "location": 529,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_sqs_event_app": [
                    "str",
                    "backup.config.Config"
                ]
            }
        },
        "TestApplicationGraphBuilder.test_can_create_kinesis_event_handler": {
            "name": "test_can_create_kinesis_event_handler",
            "location": 545,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_kinesis_event_app": [
                    "str",
                    "backup.config.Config"
                ]
            }
        },
        "TestApplicationGraphBuilder.test_can_create_ddb_event_handler": {
            "name": "test_can_create_ddb_event_handler",
            "location": 560,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_ddb_event_app": [
                    "str",
                    "backup.config.Config"
                ]
            }
        },
        "TestApplicationGraphBuilder.test_can_create_websocket_event_handler": {
            "name": "test_can_create_websocket_event_handler",
            "location": 575,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_websocket_app": [
                    "str"
                ]
            }
        },
        "TestApplicationGraphBuilder.test_can_create_websocket_api_with_domain_name": {
            "name": "test_can_create_websocket_api_with_domain_name",
            "location": 601,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_websocket_app": [
                    "app.App"
                ]
            }
        },
        "TestApplicationGraphBuilder.test_can_create_websocket_app_missing_connect": {
            "name": "test_can_create_websocket_app_missing_connect",
            "location": 626,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "websocket_app_without_connect": [
                    "Optional[str]",
                    "str",
                    "backup.config.Config",
                    "None"
                ]
            }
        },
        "TestApplicationGraphBuilder.test_can_create_websocket_app_missing_message": {
            "name": "test_can_create_websocket_app_missing_message",
            "location": 652,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "websocket_app_without_message": [
                    "Optional[str]",
                    "str",
                    "backup.config.Config",
                    "None"
                ]
            }
        },
        "TestApplicationGraphBuilder.test_can_create_websocket_app_missing_disconnect": {
            "name": "test_can_create_websocket_app_missing_disconnect",
            "location": 675,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "websocket_app_without_disconnect": [
                    "Optional[str]",
                    "str",
                    "backup.config.Config",
                    "None"
                ]
            }
        },
        "TestApplicationGraphBuilder.test_all_lambda_functions_share_managed_layer.second": {
            "name": "second",
            "location": 179,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "str",
                    "tonga.models.records.command.command.BaseCommand"
                ],
                "context": [
                    "str",
                    "tonga.models.records.command.command.BaseCommand"
                ]
            }
        },
        "TestApplicationGraphBuilder.test_can_build_lambda_function_app_with_vpc_config.foo": {
            "name": "foo",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [],
                "context": []
            }
        },
        "TestApplicationGraphBuilder.test_vpc_trait_added_when_vpc_configured.foo": {
            "name": "foo",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [],
                "context": []
            }
        },
        "TestApplicationGraphBuilder.test_exception_raised_when_missing_vpc_params.foo": {
            "name": "foo",
            "location": 303,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "str",
                    "tonga.models.records.command.command.BaseCommand"
                ],
                "context": [
                    "str",
                    "tonga.models.records.command.command.BaseCommand"
                ]
            }
        },
        "TestApplicationGraphBuilder.test_multiple_lambda_functions_share_role_and_package.bar": {
            "name": "bar",
            "location": 348,
            "return": [
                "dict[, ]",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "event": [
                    "str",
                    "tonga.models.records.command.command.BaseCommand"
                ],
                "context": [
                    "str",
                    "tonga.models.records.command.command.BaseCommand"
                ]
            }
        },
        "TestApplicationGraphBuilder.test_can_create_sqs_handler_with_queue_arn.new_handler": {
            "name": "new_handler",
            "location": 531,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "str"
                ]
            }
        }
    },
    "chalice-master/tests/unit/deploy/test_deployer.py": {
        "in_memory_osutils": {
            "name": "in_memory_osutils",
            "location": 71,
            "return": [
                "bool",
                "InMemoryOSUtils"
            ],
            "arguments": {}
        },
        "stubbed_client": {
            "name": "stubbed_client",
            "location": 75,
            "return": [
                "app.GrpyApp",
                "tuple[Stubber]"
            ],
            "arguments": {
                "service_name": [
                    "str"
                ]
            }
        },
        "config_obj": {
            "name": "config_obj",
            "location": 86,
            "return": [
                "str",
                "Optional[dict]",
                "app.App",
                "app.config.MQConfig",
                "dict",
                "Config",
                "bool"
            ],
            "arguments": {
                "sample_app": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]",
                    "neuromation.api.Config",
                    "Dict[str, Any]",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "ui": {
            "name": "ui",
            "location": 96,
            "return": [
                "List[str]",
                "str",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {}
        },
        "mock_client": {
            "name": "mock_client",
            "location": 261,
            "return": [
                "str",
                "entity_embeddings.Config",
                "bool"
            ],
            "arguments": {}
        },
        "mock_osutils": {
            "name": "mock_osutils",
            "location": 266,
            "return": [
                "List[str]",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {}
        },
        "create_function_resource": {
            "name": "create_function_resource",
            "location": 270,
            "return": [
                "str",
                "deeplearning.ml4pl.models.epoch.Type"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_role_creation": {
            "name": "test_role_creation",
            "location": 552,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "case": [
                    "deeplearning.ml4pl.models.logger.Logger",
                    "str"
                ]
            }
        },
        "test_build_stage": {
            "name": "test_build_stage",
            "location": 831,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_create_default_deployer": {
            "name": "test_can_create_default_deployer",
            "location": 924,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_create_deployer_with_layer_builds": {
            "name": "test_can_create_deployer_with_layer_builds",
            "location": 933,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_create_deletion_deployer": {
            "name": "test_can_create_deletion_deployer",
            "location": 943,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_templated_swagger_generator": {
            "name": "test_templated_swagger_generator",
            "location": 949,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": []
            }
        },
        "test_templated_swagger_with_auth_uri": {
            "name": "test_templated_swagger_with_auth_uri",
            "location": 961,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app_with_auth": []
            }
        },
        "InMemoryOSUtils.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filemap": [
                    "Optional[float]",
                    "None",
                    "Optional[str]",
                    "float",
                    "int",
                    "Optional[int]",
                    "str",
                    "Optional[Callable]",
                    "Optional[Hashable]",
                    "typing.Callable[, ]",
                    "typing.Hashable"
                ]
            }
        },
        "InMemoryOSUtils.file_exists": {
            "name": "file_exists",
            "location": 60,
            "return": [
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "InMemoryOSUtils.get_file_contents": {
            "name": "get_file_contents",
            "location": 63,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "binary": [
                    "bool",
                    "str",
                    "List[str]",
                    "List[Tuple[str, str, str]]"
                ]
            }
        },
        "InMemoryOSUtils.set_file_contents": {
            "name": "set_file_contents",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "contents": [
                    "str"
                ],
                "binary": [
                    "bool",
                    "str",
                    "BinaryIO",
                    "dict"
                ]
            }
        },
        "TestChaliceDeploymentError.test_general_exception": {
            "name": "test_general_exception",
            "location": 101,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChaliceDeploymentError.test_lambda_client_error": {
            "name": "test_lambda_client_error",
            "location": 111,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChaliceDeploymentError.test_lambda_client_error_wording_for_update": {
            "name": "test_lambda_client_error_wording_for_update",
            "location": 128,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChaliceDeploymentError.test_gives_where_and_suggestion_for_too_large_deployment_error": {
            "name": "test_gives_where_and_suggestion_for_too_large_deployment_error",
            "location": 144,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChaliceDeploymentError.test_include_size_context_for_too_large_deployment_error": {
            "name": "test_include_size_context_for_too_large_deployment_error",
            "location": 165,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChaliceDeploymentError.test_error_msg_for_general_connection": {
            "name": "test_error_msg_for_general_connection",
            "location": 182,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChaliceDeploymentError.test_simplifies_error_msg_for_broken_pipe": {
            "name": "test_simplifies_error_msg_for_broken_pipe",
            "location": 201,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChaliceDeploymentError.test_simplifies_error_msg_for_timeout": {
            "name": "test_simplifies_error_msg_for_timeout",
            "location": 222,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FooResource.dependencies": {
            "name": "dependencies",
            "location": 249,
            "return": [
                "list[]",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDependencyBuilder.test_can_build_resource_with_single_dep": {
            "name": "test_can_build_resource_with_single_dep",
            "location": 293,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDependencyBuilder.test_can_build_resource_with_dag_deps": {
            "name": "test_can_build_resource_with_dag_deps",
            "location": 301,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDependencyBuilder.test_is_first_element_in_list": {
            "name": "test_is_first_element_in_list",
            "location": 312,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDependencyBuilder.test_can_compares_with_identity_not_equality": {
            "name": "test_can_compares_with_identity_not_equality",
            "location": 322,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDependencyBuilder.test_no_duplicate_depedencies": {
            "name": "test_no_duplicate_depedencies",
            "location": 334,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoleTestCase.__init__": {
            "name": "__init__",
            "location": 347,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "given": [
                    "bool",
                    "str",
                    "int",
                    "list[dict[, ]]",
                    "dict[, ]",
                    "List[Dict]",
                    "dict"
                ],
                "roles": [
                    "bool",
                    "str",
                    "int",
                    "list[dict[, ]]",
                    "dict[, ]",
                    "List[Dict]",
                    "dict"
                ],
                "app_name": [
                    "typing.Text",
                    "str",
                    "Callable",
                    "Optional[str]"
                ]
            }
        },
        "RoleTestCase.build": {
            "name": "build",
            "location": 352,
            "return": [
                "tuple[typing.Union[Chalice,Config]]",
                "str",
                "opentrons.config.robot_configs.robot_config",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoleTestCase.assert_required_roles_created": {
            "name": "assert_required_roles_created",
            "location": 381,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "application": [
                    "typing.Callable[[], None]",
                    "str",
                    "Callable[[], None]",
                    "int",
                    "Callable[..., None]"
                ]
            }
        },
        "TestDefaultsInjector.test_inject_when_values_are_none": {
            "name": "test_inject_when_values_are_none",
            "location": 560,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefaultsInjector.test_no_injection_when_values_are_set": {
            "name": "test_no_injection_when_values_are_set",
            "location": 590,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefaultsInjector.test_default_tls_version_on_domain_name": {
            "name": "test_default_tls_version_on_domain_name",
            "location": 620,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPolicyGeneratorStage.setup_method": {
            "name": "setup_method",
            "location": 637,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPolicyGeneratorStage.create_policy_generator": {
            "name": "create_policy_generator",
            "location": 640,
            "return": [
                "PolicyGenerator",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "generator": [
                    "abilian.app.Application",
                    "None",
                    "List[src.main.core.models.area.Area]",
                    "list[A]"
                ]
            }
        },
        "TestPolicyGeneratorStage.test_invokes_policy_generator": {
            "name": "test_invokes_policy_generator",
            "location": 646,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPolicyGeneratorStage.test_no_policy_generated_if_exists": {
            "name": "test_no_policy_generated_if_exists",
            "location": 657,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPolicyGeneratorStage.test_policy_loaded_from_file_if_needed": {
            "name": "test_policy_loaded_from_file_if_needed",
            "location": 669,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPolicyGeneratorStage.test_error_raised_if_file_policy_not_exists": {
            "name": "test_error_raised_if_file_policy_not_exists",
            "location": 680,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPolicyGeneratorStage.test_vpc_policy_inject_if_needed": {
            "name": "test_vpc_policy_inject_if_needed",
            "location": 689,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwaggerBuilder.test_can_generate_swagger_builder": {
            "name": "test_can_generate_swagger_builder",
            "location": 705,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeploymentPackager.test_can_generate_layer_package": {
            "name": "test_can_generate_layer_package",
            "location": 727,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeploymentPackager.test_layer_package_not_generated_if_filename_populated": {
            "name": "test_layer_package_not_generated_if_filename_populated",
            "location": 759,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeploymentPackager.test_managed_layer_removed_if_no_deps": {
            "name": "test_managed_layer_removed_if_no_deps",
            "location": 779,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeploymentPackager.test_can_generate_package": {
            "name": "test_can_generate_package",
            "location": 805,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeploymentPackager.test_package_not_generated_if_filename_populated": {
            "name": "test_package_not_generated_if_filename_populated",
            "location": 817,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeployer.setUp": {
            "name": "setUp",
            "location": 852,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeployer.create_deployer": {
            "name": "create_deployer",
            "location": 862,
            "return": [
                "Deployer",
                "Callable",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeployer.test_deploy_delegates_properly": {
            "name": "test_deploy_delegates_properly",
            "location": 873,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeployer.test_deploy_errors_raises_chalice_error": {
            "name": "test_deploy_errors_raises_chalice_error",
            "location": 904,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeployer.test_validation_errors_raise_failure": {
            "name": "test_validation_errors_raise_failure",
            "location": 912,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRecordResults.setup_method": {
            "name": "setup_method",
            "location": 974,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRecordResults.test_can_record_results_initial_deploy": {
            "name": "test_can_record_results_initial_deploy",
            "location": 986,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeploymentReporter.setup_method": {
            "name": "setup_method",
            "location": 1004,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeploymentReporter.test_can_generate_report": {
            "name": "test_can_generate_report",
            "location": 1008,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeploymentReporter.test_can_display_report": {
            "name": "test_can_display_report",
            "location": 1061,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaEventSourcePolicyInjector.create_model_from_app": {
            "name": "create_model_from_app",
            "location": 1070,
            "return": [
                "List[str]",
                "List[Dict[str, Any]]",
                "bool",
                "str",
                "int",
                "bytes",
                "list",
                "dict"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "bool",
                    "typing.Type",
                    "str",
                    "Config",
                    "list[dict[, ]]",
                    "Type[T]",
                    "List[dict]"
                ],
                "config": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "tbump.config.Config",
                    "entity_embeddings.Config",
                    "isorsettings.Config",
                    "app.config.HealthCheckConfig"
                ]
            }
        },
        "TestLambdaEventSourcePolicyInjector.test_can_inject_policy": {
            "name": "test_can_inject_policy",
            "location": 1075,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_sqs_event_app": []
            }
        },
        "TestLambdaEventSourcePolicyInjector.test_no_inject_if_not_autogen_policy": {
            "name": "test_no_inject_if_not_autogen_policy",
            "location": 1088,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_sqs_event_app": []
            }
        },
        "TestLambdaEventSourcePolicyInjector.test_no_inject_is_already_injected": {
            "name": "test_no_inject_is_already_injected",
            "location": 1099,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_sqs_event_app": []
            }
        },
        "TestLambdaEventSourcePolicyInjector.test_can_inject_policy_for_kinesis": {
            "name": "test_can_inject_policy_for_kinesis",
            "location": 1121,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_kinesis_event_app": []
            }
        },
        "TestLambdaEventSourcePolicyInjector.test_can_inject_policy_for_ddb": {
            "name": "test_can_inject_policy_for_ddb",
            "location": 1135,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_ddb_event_app": []
            }
        },
        "TestWebsocketPolicyInjector.create_model_from_app": {
            "name": "create_model_from_app",
            "location": 1150,
            "return": [
                "List[str]",
                "List[Dict[str, Any]]",
                "bool",
                "str",
                "int",
                "bytes",
                "list",
                "dict"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "bool",
                    "typing.Type",
                    "str",
                    "Config",
                    "list[dict[, ]]",
                    "Type[T]",
                    "List[dict]"
                ],
                "config": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "tbump.config.Config",
                    "entity_embeddings.Config",
                    "isorsettings.Config",
                    "app.config.HealthCheckConfig"
                ]
            }
        },
        "TestWebsocketPolicyInjector.test_can_inject_policy": {
            "name": "test_can_inject_policy",
            "location": 1155,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_websocket_app": [
                    "abilian.app.Application"
                ]
            }
        },
        "TestWebsocketPolicyInjector.test_no_inject_if_not_autogen_policy": {
            "name": "test_no_inject_if_not_autogen_policy",
            "location": 1169,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_websocket_app": [
                    "bool"
                ]
            }
        },
        "TestDeployer.test_validation_errors_raise_failure.bad_route_empty_string": {
            "name": "bad_route_empty_string",
            "location": 915,
            "return": [
                "dict[, ]",
                "List[str]",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "TestLambdaEventSourcePolicyInjector.test_no_inject_is_already_injected.second_handler": {
            "name": "second_handler",
            "location": 1101,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "str",
                    "tonga.models.records.command.command.BaseCommand"
                ]
            }
        },
        "RoleTestCase.build.foo": {
            "name": "foo",
            "location": 356,
            "return": [
                "dict[, ]",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "event": [
                    "str",
                    "tonga.models.records.command.command.BaseCommand"
                ],
                "context": [
                    "str",
                    "tonga.models.records.command.command.BaseCommand"
                ]
            }
        }
    },
    "chalice-master/tests/unit/deploy/test_executor.py": {
        "TestExecutor.setup_method": {
            "name": "setup_method",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExecutor.execute": {
            "name": "execute",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "instructions": [
                    "int"
                ],
                "messages": [
                    "Type[T]",
                    "None",
                    "str",
                    "int",
                    "typing.Type",
                    "allennlp.models.Model"
                ]
            }
        },
        "TestExecutor.test_can_invoke_api_call_with_no_output": {
            "name": "test_can_invoke_api_call_with_no_output",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExecutor.test_can_store_api_result": {
            "name": "test_can_store_api_result",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExecutor.test_can_store_multiple_value": {
            "name": "test_can_store_multiple_value",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExecutor.test_can_reference_stored_results_in_api_calls": {
            "name": "test_can_reference_stored_results_in_api_calls",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExecutor.test_can_return_created_resources": {
            "name": "test_can_return_created_resources",
            "location": 84,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExecutor.test_can_reference_varname": {
            "name": "test_can_reference_varname",
            "location": 102,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExecutor.test_can_record_value_directly": {
            "name": "test_can_record_value_directly",
            "location": 119,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExecutor.test_can_aggregate_multiple_resource_values": {
            "name": "test_can_aggregate_multiple_resource_values",
            "location": 134,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExecutor.test_new_keys_override_old_keys": {
            "name": "test_new_keys_override_old_keys",
            "location": 156,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExecutor.test_validates_no_unresolved_deploy_vars": {
            "name": "test_validates_no_unresolved_deploy_vars",
            "location": 177,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExecutor.test_can_jp_search": {
            "name": "test_can_jp_search",
            "location": 187,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExecutor.test_can_copy_variable": {
            "name": "test_can_copy_variable",
            "location": 194,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExecutor.test_can_call_builtin_function": {
            "name": "test_can_call_builtin_function",
            "location": 201,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExecutor.test_built_in_function_interrogate_profile": {
            "name": "test_built_in_function_interrogate_profile",
            "location": 220,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExecutor.test_built_in_function_service_principal": {
            "name": "test_built_in_function_service_principal",
            "location": 236,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExecutor.test_errors_out_on_unknown_function": {
            "name": "test_errors_out_on_unknown_function",
            "location": 257,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExecutor.test_can_print_ui_messages": {
            "name": "test_can_print_ui_messages",
            "location": 267,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExecutor.test_error_out_on_unknown_instruction": {
            "name": "test_error_out_on_unknown_instruction",
            "location": 276,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDisplayOnlyExecutor.setup_method": {
            "name": "setup_method",
            "location": 291,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDisplayOnlyExecutor.execute": {
            "name": "execute",
            "location": 296,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "instructions": [
                    "int"
                ],
                "messages": [
                    "Type[T]",
                    "None",
                    "str",
                    "int",
                    "typing.Type",
                    "allennlp.models.Model"
                ]
            }
        },
        "TestDisplayOnlyExecutor.get_plan_output": {
            "name": "get_plan_output",
            "location": 301,
            "return": [
                "str",
                "bool",
                "Optional[dict]",
                "List[str]",
                "int",
                "Optional[T]",
                "Counter",
                "List[Dict[str, Any]]",
                "frozenset"
            ],
            "arguments": {
                "self": [],
                "instructions": [
                    "int",
                    "str"
                ]
            }
        },
        "TestDisplayOnlyExecutor.test_can_display_plan": {
            "name": "test_can_display_plan",
            "location": 305,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDisplayOnlyExecutor.test_variable_pool_printed_if_needed": {
            "name": "test_variable_pool_printed_if_needed",
            "location": 323,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDisplayOnlyExecutor.test_variable_pool_omitted_if_empty": {
            "name": "test_variable_pool_omitted_if_empty",
            "location": 334,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDisplayOnlyExecutor.test_byte_value_replaced_if_over_length": {
            "name": "test_byte_value_replaced_if_over_length",
            "location": 341,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDisplayOnlyExecutor.test_can_print_multiple_instructions": {
            "name": "test_can_print_multiple_instructions",
            "location": 348,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDisplayOnlyExecutor.test_empty_values_omitted": {
            "name": "test_empty_values_omitted",
            "location": 361,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResolveVariables.resolve_vars": {
            "name": "resolve_vars",
            "location": 374,
            "return": [
                "Optional[Dict[str, str]]",
                "int",
                "type",
                "bool",
                "List[zerver.models.DefaultStreamGroup]",
                "Type[Any]"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "bytes",
                    "bool",
                    "str",
                    "tuple",
                    "tuple[]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]"
                ],
                "variables": [
                    "bytes",
                    "bool",
                    "str",
                    "tuple",
                    "tuple[]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "TestResolveVariables.test_resolve_top_level_vars": {
            "name": "test_resolve_top_level_vars",
            "location": 379,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResolveVariables.test_can_resolve_multiple_vars": {
            "name": "test_can_resolve_multiple_vars",
            "location": 385,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResolveVariables.test_unsolved_error_raises_error": {
            "name": "test_unsolved_error_raises_error",
            "location": 392,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResolveVariables.test_can_resolve_nested_variable_refs": {
            "name": "test_can_resolve_nested_variable_refs",
            "location": 399,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResolveVariables.test_can_resolve_vars_in_list": {
            "name": "test_can_resolve_vars_in_list",
            "location": 405,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResolveVariables.test_deeply_nested": {
            "name": "test_deeply_nested",
            "location": 411,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResolveVariables.test_can_handle_format_string": {
            "name": "test_can_handle_format_string",
            "location": 432,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResolveVariables.test_can_handle_deeply_nested_format_string": {
            "name": "test_can_handle_deeply_nested_format_string",
            "location": 439,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResolveVariables.test_can_handle_dict_value_by_key": {
            "name": "test_can_handle_dict_value_by_key",
            "location": 461,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "chalice-master/tests/unit/deploy/test_models.py": {
        "test_can_instantiate_empty_application": {
            "name": "test_can_instantiate_empty_application",
            "location": 6,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_instantiate_app_with_deps": {
            "name": "test_can_instantiate_app_with_deps",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_default_to_no_auths_in_rest_api": {
            "name": "test_can_default_to_no_auths_in_rest_api",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "lambda_function": [
                    "str",
                    "Type",
                    "typing.Type",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_can_add_authorizers_to_dependencies": {
            "name": "test_can_add_authorizers_to_dependencies",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "lambda_function": []
            }
        },
        "test_can_add_connect_to_dependencies": {
            "name": "test_can_add_connect_to_dependencies",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "lambda_function": [
                    "models.user.User"
                ]
            }
        },
        "test_can_add_message_to_dependencies": {
            "name": "test_can_add_message_to_dependencies",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "lambda_function": [
                    "models.user.User"
                ]
            }
        },
        "test_can_add_disconnect_to_dependencies": {
            "name": "test_can_add_disconnect_to_dependencies",
            "location": 72,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "lambda_function": [
                    "models.user.User"
                ]
            }
        }
    },
    "chalice-master/tests/unit/deploy/test_packager.py": {
        "pip_factory": {
            "name": "pip_factory",
            "location": 39,
            "return": [
                "Tuple[int, int]",
                "str",
                "int",
                "T"
            ],
            "arguments": {}
        },
        "osutils": {
            "name": "osutils",
            "location": 56,
            "return": [
                "OSUtils",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "FakePip.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakePip.main": {
            "name": "main",
            "location": 23,
            "return": [
                "tuple[typing.Union[int,bytes]]",
                "Counter[str]",
                "Sequence[str]",
                "Deque[str]",
                "Callable[[], str]",
                "str",
                "Optional[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "env_vars": [
                    "List[str]",
                    "str",
                    "None",
                    "list[str]"
                ],
                "shim": [
                    "List[str]",
                    "str",
                    "None",
                    "list[str]"
                ]
            }
        },
        "FakePip.add_return": {
            "name": "add_return",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "return_pair": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "FakePip.calls": {
            "name": "calls",
            "location": 34,
            "return": [
                "Union"
            ],
            "arguments": {
                "self": []
            }
        },
        "pip_factory.create_pip_runner": {
            "name": "create_pip_runner",
            "location": 40,
            "return": [
                "tuple[typing.Union[FakePip,PipRunner]]",
                "bool",
                "float"
            ],
            "arguments": {
                "osutils": [
                    "None",
                    "bool",
                    "float"
                ]
            }
        },
        "CustomEnv.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str",
                    "Mapping[str, str]",
                    "typing.Mapping",
                    "dict",
                    "dict[, ]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "CustomEnv.environ": {
            "name": "environ",
            "location": 51,
            "return": [
                "int",
                "bool",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakePopen.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "rc": [
                    "str",
                    "bool"
                ],
                "out": [
                    "int",
                    "float",
                    "bool"
                ],
                "err": [
                    "int",
                    "str",
                    "Optional[Set[str]]",
                    "set[str]",
                    "bool",
                    "None"
                ]
            }
        },
        "FakePopen.communicate": {
            "name": "communicate",
            "location": 66,
            "return": [
                "tuple[]",
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakePopenOSUtils.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "processes": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "FakePopenOSUtils.popen": {
            "name": "popen",
            "location": 75,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPackage.test_can_create_package_with_custom_osutils": {
            "name": "test_can_create_package_with_custom_osutils",
            "location": 81,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "osutils": []
            }
        },
        "TestPackage.test_wheel_package": {
            "name": "test_wheel_package",
            "location": 85,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPackage.test_invalid_package": {
            "name": "test_invalid_package",
            "location": 93,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPackage.test_diff_pkg_sdist_and_whl_do_not_collide": {
            "name": "test_diff_pkg_sdist_and_whl_do_not_collide",
            "location": 97,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPackage.test_same_pkg_is_eq": {
            "name": "test_same_pkg_is_eq",
            "location": 103,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPackage.test_pkg_is_eq_to_similar_pkg": {
            "name": "test_pkg_is_eq_to_similar_pkg",
            "location": 107,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPackage.test_pkg_is_not_equal_to_different_type": {
            "name": "test_pkg_is_not_equal_to_different_type",
            "location": 112,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPackage.test_pkg_repr": {
            "name": "test_pkg_repr",
            "location": 117,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPackage.test_wheel_data_dir": {
            "name": "test_wheel_data_dir",
            "location": 121,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPackage.test_can_read_packages_with_underscore_in_name": {
            "name": "test_can_read_packages_with_underscore_in_name",
            "location": 125,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPackage.test_can_read_packages_with_period_in_name": {
            "name": "test_can_read_packages_with_period_in_name",
            "location": 129,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPackage.test_can_normalize_data_dir": {
            "name": "test_can_normalize_data_dir",
            "location": 133,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPackage.test_can_normalize_dirname_comparisons": {
            "name": "test_can_normalize_dirname_comparisons",
            "location": 137,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipRunner.test_does_propagate_env_vars": {
            "name": "test_does_propagate_env_vars",
            "location": 147,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "pip_factory": [
                    "str",
                    "int"
                ]
            }
        },
        "TestPipRunner.test_build_wheel": {
            "name": "test_build_wheel",
            "location": 158,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "pip_factory": [
                    "str",
                    "int",
                    "Dict[str, int]",
                    "dict[str, int]"
                ]
            }
        },
        "TestPipRunner.test_build_wheel_without_c_extensions": {
            "name": "test_build_wheel_without_c_extensions",
            "location": 173,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "pip_factory": [
                    "str",
                    "bool",
                    "dict[str, float]",
                    "Dict[str, float]",
                    "int"
                ]
            }
        },
        "TestPipRunner.test_download_all_deps": {
            "name": "test_download_all_deps",
            "location": 189,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "pip_factory": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "TestPipRunner.test_download_sdist": {
            "name": "test_download_sdist",
            "location": 202,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "pip_factory": [
                    "str",
                    "float"
                ]
            }
        },
        "TestPipRunner.test_download_wheels": {
            "name": "test_download_wheels",
            "location": 213,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "pip_factory": [
                    "str",
                    "float"
                ]
            }
        },
        "TestPipRunner.test_download_wheels_no_wheels": {
            "name": "test_download_wheels_no_wheels",
            "location": 229,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "pip_factory": []
            }
        },
        "TestPipRunner.test_does_find_local_directory": {
            "name": "test_does_find_local_directory",
            "location": 234,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "pip_factory": [
                    "dict",
                    "dict[, ]",
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "TestPipRunner.test_does_find_multiple_local_directories": {
            "name": "test_does_find_multiple_local_directories",
            "location": 246,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "pip_factory": [
                    "dict",
                    "dict[, ]",
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "TestPipRunner.test_raise_no_such_package_error": {
            "name": "test_raise_no_such_package_error",
            "location": 264,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "pip_factory": [
                    "str"
                ]
            }
        },
        "TestPipRunner.test_raise_other_unknown_error_during_downloads": {
            "name": "test_raise_other_unknown_error_during_downloads",
            "location": 274,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "pip_factory": []
            }
        },
        "TestPipRunner.test_inject_unknown_error_if_no_stderr": {
            "name": "test_inject_unknown_error_if_no_stderr",
            "location": 281,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "pip_factory": []
            }
        },
        "TestSubprocessPip.test_does_use_custom_pip_import_string": {
            "name": "test_does_use_custom_pip_import_string",
            "location": 290,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "chalice-master/tests/unit/deploy/test_planner.py": {
        "create_function_resource": {
            "name": "create_function_resource",
            "location": 18,
            "return": [
                "str",
                "deeplearning.ml4pl.models.epoch.Type"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "function_name": [
                    "Optional[str]",
                    "None",
                    "Optional[List[Any]]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "list[typing.Any]",
                    "dict[str, typing.Any]"
                ],
                "environment_variables": [
                    "None",
                    "str",
                    "Optional[str]",
                    "dict[str, typing.Any]",
                    "Optional[\"Period\"]",
                    "Optional[Dict[str, Any]]"
                ],
                "runtime": [
                    "typing.Text",
                    "str",
                    "Optional[str]",
                    "tracim.models.auth.User"
                ],
                "handler": [
                    "typing.Text",
                    "str",
                    "Optional[str]",
                    "tracim.models.auth.User"
                ],
                "tags": [
                    "str",
                    "None",
                    "Optional[str]",
                    "tracim.models.auth.User"
                ],
                "timeout": [
                    "int",
                    "str",
                    "Optional[str]",
                    "tracim.models.auth.User"
                ],
                "memory_size": [
                    "int",
                    "str",
                    "Optional[str]",
                    "tracim.models.auth.User"
                ],
                "deployment_package": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "role": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]",
                    "typing.Callable[, ]",
                    "zerver.models.Realm",
                    "Optional[bool]",
                    "Optional[Callable]"
                ],
                "layers": [
                    "str",
                    "None",
                    "Optional[str]",
                    "tracim.models.auth.User"
                ],
                "managed_layer": [
                    "str",
                    "None",
                    "Optional[str]",
                    "tracim.models.auth.User"
                ]
            }
        },
        "create_managed_layer": {
            "name": "create_managed_layer",
            "location": 54,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "create_api_mapping": {
            "name": "create_api_mapping",
            "location": 65,
            "return": [
                "bool",
                "Optional[str]",
                "int",
                "Optional[int]",
                "Optional[bool]"
            ],
            "arguments": {}
        },
        "create_http_domain_name": {
            "name": "create_http_domain_name",
            "location": 73,
            "return": [
                "bool",
                "Type[T]",
                "str"
            ],
            "arguments": {}
        },
        "create_websocket_domain_name": {
            "name": "create_websocket_domain_name",
            "location": 84,
            "return": [
                "bool",
                "Type[T]",
                "str"
            ],
            "arguments": {}
        },
        "no_deployed_values": {
            "name": "no_deployed_values",
            "location": 96,
            "return": [
                "DeployedResources",
                "trezor.utils.Writer",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "FakeConfig.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "deployed_values": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "FakeConfig.deployed_resources": {
            "name": "deployed_resources",
            "location": 106,
            "return": [
                "DeployedResources",
                "int",
                "str",
                "List[int]",
                "Dict[str, Any]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "chalice_stage_name": [
                    "str",
                    "bool",
                    "List[Union[int, Any]]",
                    "list[typing.Union[int,typing.Any]]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "InMemoryRemoteState.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "known_resources": [
                    "Optional[int]",
                    "None",
                    "Optional[float]",
                    "int",
                    "Optional[str]",
                    "float",
                    "Optional[Callable]",
                    "str",
                    "Optional[Hashable]",
                    "typing.Callable[, ]",
                    "typing.Hashable"
                ]
            }
        },
        "InMemoryRemoteState.resource_exists": {
            "name": "resource_exists",
            "location": 117,
            "return": [
                "bool",
                "db.models.Name",
                "str"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "int",
                    "type",
                    "typing.Type",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "InMemoryRemoteState.get_remote_model": {
            "name": "get_remote_model",
            "location": 128,
            "return": [
                "str",
                "Optional[Tuple[int, int]]",
                "cmk.utils.type_defs.Ruleset",
                "bool",
                "Optional[cmk.utils.diagnostics.DiagnosticsOptionalParameters]"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "dict",
                    "bool",
                    "dict[, ]",
                    "config.Settings",
                    "str",
                    "Optional[str]",
                    "None",
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "InMemoryRemoteState.declare_resource_exists": {
            "name": "declare_resource_exists",
            "location": 132,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "InMemoryRemoteState.declare_no_resources_exists": {
            "name": "declare_no_resources_exists",
            "location": 143,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemoryRemoteState.resource_deployed_values": {
            "name": "resource_deployed_values",
            "location": 146,
            "return": [
                "str",
                "bool",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "int",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "BasePlannerTests.setup_method": {
            "name": "setup_method",
            "location": 151,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasePlannerTests.assert_apicall_equals": {
            "name": "assert_apicall_equals",
            "location": 156,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "expected": [
                    "str",
                    "tuple[typing.Type]",
                    "Tuple[type]",
                    "models.User"
                ],
                "actual_api_call": [
                    "float",
                    "django.db.models.Model",
                    "bool",
                    "str",
                    "None",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "BasePlannerTests.determine_plan": {
            "name": "determine_plan",
            "location": 167,
            "return": [
                "bool",
                "Optional[Union[str, Any]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "int",
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "models.Question"
                ]
            }
        },
        "BasePlannerTests.filter_api_calls": {
            "name": "filter_api_calls",
            "location": 172,
            "return": [
                "bool",
                "list[models_@_APICall]"
            ],
            "arguments": {
                "self": [],
                "plan": [
                    "bool"
                ]
            }
        },
        "BasePlannerTests.assert_recorded_values": {
            "name": "assert_recorded_values",
            "location": 179,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "plan": [
                    "str",
                    "int"
                ],
                "resource_type": [
                    "int",
                    "str"
                ],
                "resource_name": [
                    "int",
                    "str"
                ],
                "expected_mapping": [
                    "float",
                    "list",
                    "list[]",
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "TestPlanManagedRole.test_can_plan_for_iam_role_creation": {
            "name": "test_can_plan_for_iam_role_creation",
            "location": 191,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlanManagedRole.test_can_create_plan_for_filebased_role": {
            "name": "test_can_create_plan_for_filebased_role",
            "location": 211,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlanManagedRole.test_can_update_managed_role": {
            "name": "test_can_update_managed_role",
            "location": 232,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlanManagedRole.test_can_update_file_based_policy": {
            "name": "test_can_update_file_based_policy",
            "location": 259,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlanManagedRole.test_no_update_for_non_managed_role": {
            "name": "test_no_update_for_non_managed_role",
            "location": 282,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlanCreateUpdateAPIMapping.test_can_create_api_mapping": {
            "name": "test_can_create_api_mapping",
            "location": 289,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "lambda_function": [
                    "typing.Type",
                    "list[str]",
                    "purplship.core.utils.Element",
                    "Type",
                    "purplship.core.utils.xml.Element",
                    "List[str]",
                    "azafea.config.Config"
                ]
            }
        },
        "TestPlanCreateUpdateAPIMapping.test_can_create_websocket_api_mapping_with_path": {
            "name": "test_can_create_websocket_api_mapping_with_path",
            "location": 320,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlanCreateUpdateAPIMapping.test_store_api_mapping_if_already_exists": {
            "name": "test_store_api_mapping_if_already_exists",
            "location": 362,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "lambda_function": [
                    "Type",
                    "str",
                    "typing.Type",
                    "List[str]",
                    "list[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "TestPlanCreateUpdateAPIMapping.test_store_api_mapping_none_if_already_exists": {
            "name": "test_store_api_mapping_none_if_already_exists",
            "location": 408,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "lambda_function": [
                    "str",
                    "typing.Type",
                    "Type",
                    "list[str]",
                    "List[str]",
                    "purplship.core.utils.Element"
                ]
            }
        },
        "TestPlanCreateUpdateDomainName.test_can_create_domain_name": {
            "name": "test_can_create_domain_name",
            "location": 453,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "lambda_function": [
                    "typing.Type",
                    "purplship.core.utils.Element",
                    "Type",
                    "purplship.core.utils.xml.Element"
                ]
            }
        },
        "TestPlanCreateUpdateDomainName.test_can_update_domain_name": {
            "name": "test_can_update_domain_name",
            "location": 487,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlanLambdaFunction.test_can_create_layer": {
            "name": "test_can_create_layer",
            "location": 529,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlanLambdaFunction.test_can_update_layer": {
            "name": "test_can_update_layer",
            "location": 550,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlanLambdaFunction.test_can_create_function": {
            "name": "test_can_create_function",
            "location": 589,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlanLambdaFunction.test_create_function_with_layers": {
            "name": "test_create_function_with_layers",
            "location": 628,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlanLambdaFunction.test_can_update_lambda_function_code": {
            "name": "test_can_update_lambda_function_code",
            "location": 676,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlanLambdaFunction.test_can_update_lambda_function_with_managed_layer": {
            "name": "test_can_update_lambda_function_with_managed_layer",
            "location": 719,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlanLambdaFunction.test_can_create_function_with_reserved_concurrency": {
            "name": "test_can_create_function_with_reserved_concurrency",
            "location": 740,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlanLambdaFunction.test_can_set_variables_when_needed": {
            "name": "test_can_set_variables_when_needed",
            "location": 783,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlanS3Events.test_can_plan_s3_event": {
            "name": "test_can_plan_s3_event",
            "location": 804,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlanCloudWatchEvent.test_can_plan_cloudwatch_event": {
            "name": "test_can_plan_cloudwatch_event",
            "location": 871,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlanScheduledEvent.test_can_plan_scheduled_event": {
            "name": "test_can_plan_scheduled_event",
            "location": 919,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlanScheduledEvent.test_can_plan_scheduled_event_can_omit_description": {
            "name": "test_can_plan_scheduled_event_can_omit_description",
            "location": 967,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlanWebsocketAPI.assert_loads_needed_variables": {
            "name": "assert_loads_needed_variables",
            "location": 990,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "plan": [
                    "int",
                    "models.Model",
                    "None",
                    "typing.Callable[str, str]",
                    "Optional[abilian.core.models.Model]",
                    "Callable[[str], str]"
                ]
            }
        },
        "TestPlanWebsocketAPI.test_can_plan_websocket_api": {
            "name": "test_can_plan_websocket_api",
            "location": 1012,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlanWebsocketAPI.test_can_update_websocket_api": {
            "name": "test_can_update_websocket_api",
            "location": 1183,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlanRestAPI.assert_loads_needed_variables": {
            "name": "assert_loads_needed_variables",
            "location": 1361,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "plan": [
                    "int",
                    "models.Model",
                    "None",
                    "typing.Callable[str, str]",
                    "Optional[abilian.core.models.Model]",
                    "Callable[[str], str]"
                ]
            }
        },
        "TestPlanRestAPI.test_can_plan_rest_api": {
            "name": "test_can_plan_rest_api",
            "location": 1387,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlanRestAPI.test_can_update_rest_api_with_policy": {
            "name": "test_can_update_rest_api_with_policy",
            "location": 1457,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlanRestAPI.test_can_update_rest_api": {
            "name": "test_can_update_rest_api",
            "location": 1489,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlanSNSSubscription.test_can_plan_sns_subscription": {
            "name": "test_can_plan_sns_subscription",
            "location": 1575,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlanSNSSubscription.test_can_plan_sns_arn_subscription": {
            "name": "test_can_plan_sns_arn_subscription",
            "location": 1639,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlanSNSSubscription.test_sns_subscription_exists_is_noop_for_planner": {
            "name": "test_sns_subscription_exists_is_noop_for_planner",
            "location": 1683,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlanSQSSubscription.test_can_plan_sqs_event_source": {
            "name": "test_can_plan_sqs_event_source",
            "location": 1736,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlanSQSSubscription.test_sqs_event_supports_queue_arn": {
            "name": "test_sqs_event_supports_queue_arn",
            "location": 1800,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlanSQSSubscription.test_can_update_sqs_event_with_queue_arn": {
            "name": "test_can_update_sqs_event_with_queue_arn",
            "location": 1838,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlanSQSSubscription.test_sqs_event_source_exists_updates_batch_size": {
            "name": "test_sqs_event_source_exists_updates_batch_size",
            "location": 1877,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlanSQSSubscription.test_websocket_api_plan_omits_unused_lambdas": {
            "name": "test_websocket_api_plan_omits_unused_lambdas",
            "location": 1953,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "functions": [
                    "str",
                    "core.models.Grouping",
                    "zerver.models.UserProfile"
                ],
                "integration_injected": [
                    "str",
                    "bool",
                    "List[List[str]]",
                    "list[list[str]]",
                    "Dict[str, Set[str]]",
                    "dict[str, set[str]]"
                ]
            }
        },
        "TestPlanKinesisSubscription.test_can_plan_kinesis_event_source": {
            "name": "test_can_plan_kinesis_event_source",
            "location": 1976,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlanKinesisSubscription.test_can_update_kinesis_event_source": {
            "name": "test_can_update_kinesis_event_source",
            "location": 2043,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlanDynamoDBSubscription.test_can_plan_dynamodb_event_source": {
            "name": "test_can_plan_dynamodb_event_source",
            "location": 2073,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlanDynamoDBSubscription.test_can_plan_dynamodb_event_source_update": {
            "name": "test_can_plan_dynamodb_event_source_update",
            "location": 2093,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteState.setup_method": {
            "name": "setup_method",
            "location": 2119,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteState.create_rest_api_model": {
            "name": "create_rest_api_model",
            "location": 2126,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteState.create_api_mapping": {
            "name": "create_api_mapping",
            "location": 2138,
            "return": [
                "Dict[str, Any]",
                "int",
                "str",
                "dict",
                "djmoney.contrib.exchange.models.Rate"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteState.create_domain_name": {
            "name": "create_domain_name",
            "location": 2146,
            "return": [
                "str",
                "Optional[str]",
                "list[]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteState.create_websocket_api_model": {
            "name": "create_websocket_api_model",
            "location": 2157,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteState.test_role_exists": {
            "name": "test_role_exists",
            "location": 2169,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteState.test_role_does_not_exist": {
            "name": "test_role_does_not_exist",
            "location": 2177,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteState.test_lambda_layer_not_exists": {
            "name": "test_lambda_layer_not_exists",
            "location": 2186,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteState.test_lambda_layer_exists": {
            "name": "test_lambda_layer_exists",
            "location": 2196,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteState.test_lambda_function_exists": {
            "name": "test_lambda_function_exists",
            "location": 2217,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteState.test_lambda_function_does_not_exist": {
            "name": "test_lambda_function_does_not_exist",
            "location": 2224,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteState.test_api_gateway_domain_name_exists": {
            "name": "test_api_gateway_domain_name_exists",
            "location": 2231,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteState.test_websocket_domain_name_exists": {
            "name": "test_websocket_domain_name_exists",
            "location": 2236,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteState.test_none_api_mapping_exists": {
            "name": "test_none_api_mapping_exists",
            "location": 2243,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteState.test_path_api_mapping_exists_with_slash": {
            "name": "test_path_api_mapping_exists_with_slash",
            "location": 2248,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteState.test_path_api_mapping_exists": {
            "name": "test_path_api_mapping_exists",
            "location": 2254,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteState.test_domain_name_does_not_exist": {
            "name": "test_domain_name_does_not_exist",
            "location": 2260,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteState.test_exists_check_is_cached": {
            "name": "test_exists_check_is_cached",
            "location": 2270,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteState.test_exists_check_is_cached_api_mapping": {
            "name": "test_exists_check_is_cached_api_mapping",
            "location": 2281,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteState.test_rest_api_exists_no_deploy": {
            "name": "test_rest_api_exists_no_deploy",
            "location": 2292,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "no_deployed_values": [
                    "core.models.Recipe",
                    "raiden.utils.TokenNetworkAddress"
                ]
            }
        },
        "TestRemoteState.test_rest_api_exists_with_existing_deploy": {
            "name": "test_rest_api_exists_with_existing_deploy",
            "location": 2299,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteState.test_rest_api_not_exists_with_preexisting_deploy": {
            "name": "test_rest_api_not_exists_with_preexisting_deploy",
            "location": 2314,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteState.test_websocket_api_exists_no_deploy": {
            "name": "test_websocket_api_exists_no_deploy",
            "location": 2329,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "no_deployed_values": [
                    "core.models.Recipe",
                    "raiden.utils.TokenNetworkAddress"
                ]
            }
        },
        "TestRemoteState.test_websocket_api_exists_with_existing_deploy": {
            "name": "test_websocket_api_exists_with_existing_deploy",
            "location": 2336,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteState.test_websocket_api_not_exists_with_preexisting_deploy": {
            "name": "test_websocket_api_not_exists_with_preexisting_deploy",
            "location": 2352,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteState.test_can_get_deployed_values": {
            "name": "test_can_get_deployed_values",
            "location": 2368,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteState.test_value_error_raised_on_no_deployed_values": {
            "name": "test_value_error_raised_on_no_deployed_values",
            "location": 2377,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "no_deployed_values": [
                    "zerver.models.UserProfile",
                    "core.models.Recipe",
                    "app.models.Game"
                ]
            }
        },
        "TestRemoteState.test_value_error_raised_for_unknown_resource_name": {
            "name": "test_value_error_raised_for_unknown_resource_name",
            "location": 2385,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteState.test_dynamically_lookup_iam_role": {
            "name": "test_dynamically_lookup_iam_role",
            "location": 2394,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteState.test_unknown_model_type_raises_error": {
            "name": "test_unknown_model_type_raises_error",
            "location": 2414,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteState.test_sns_subscription_exists": {
            "name": "test_sns_subscription_exists",
            "location": 2430,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_topic": [
                    "str",
                    "models.User",
                    "salon.models.StylisAvailableWeekDay",
                    "salon.models.Stylist"
                ],
                "deployed_topic": [
                    "bool",
                    "str",
                    "list[int]",
                    "boggle.models.board.Board",
                    "List[int]"
                ],
                "is_current": [
                    "zerver.models.UserProfile",
                    "raiden.utils.BlockIdentifier"
                ],
                "expected_result": [
                    "Iterable[Any]",
                    "bool",
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "TestRemoteState.test_sns_subscription_not_in_deployed_values": {
            "name": "test_sns_subscription_not_in_deployed_values",
            "location": 2458,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteState.test_sqs_event_source_exists": {
            "name": "test_sqs_event_source_exists",
            "location": 2476,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "new_queue": [
                    "dict[str, typing.Any]",
                    "core.models.Grouping",
                    "Dict[str, Any]",
                    "lms.lmsdb.models.User"
                ],
                "deployed_queue": [],
                "expected_result": [
                    "bytes",
                    "tracim.models.data.ContentRevisionRO"
                ]
            }
        },
        "TestRemoteState.test_kinesis_event_source_not_exists": {
            "name": "test_kinesis_event_source_not_exists",
            "location": 2510,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteState.test_kinesis_event_source_exists": {
            "name": "test_kinesis_event_source_exists",
            "location": 2522,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteState.test_ddb_event_source_not_exists": {
            "name": "test_ddb_event_source_not_exists",
            "location": 2544,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteState.test_ddb_event_source_exists": {
            "name": "test_ddb_event_source_exists",
            "location": 2556,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnreferencedResourcePlanner.setup_method": {
            "name": "setup_method",
            "location": 2580,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnreferencedResourcePlanner.execute": {
            "name": "execute",
            "location": 2584,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "plan": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "config": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "TestUnreferencedResourcePlanner.function_resource": {
            "name": "function_resource",
            "location": 2588,
            "return": [
                "List[int]",
                "int",
                "set",
                "Set[Variable]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnreferencedResourcePlanner.one_deployed_lambda_function": {
            "name": "one_deployed_lambda_function",
            "location": 2591,
            "return": [
                "dict[typing.Text, list[dict[typing.Text, typing.Text]]]",
                "Optional[List[\"custom_index\"]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "typing.Text",
                    "str",
                    "dict"
                ],
                "arn": [
                    "typing.Text",
                    "str",
                    "dict"
                ]
            }
        },
        "TestUnreferencedResourcePlanner.test_noop_when_all_resources_accounted_for": {
            "name": "test_noop_when_all_resources_accounted_for",
            "location": 2600,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "function_resource": [
                    "List[str]",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "TestUnreferencedResourcePlanner.test_will_delete_unreferenced_resource": {
            "name": "test_will_delete_unreferenced_resource",
            "location": 2615,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnreferencedResourcePlanner.test_supports_multiple_unreferenced_and_unchanged": {
            "name": "test_supports_multiple_unreferenced_and_unchanged",
            "location": 2624,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnreferencedResourcePlanner.test_can_delete_iam_role": {
            "name": "test_can_delete_iam_role",
            "location": 2657,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnreferencedResourcePlanner.test_correct_deletion_order_for_dependencies": {
            "name": "test_correct_deletion_order_for_dependencies",
            "location": 2673,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnreferencedResourcePlanner.test_can_delete_lambda_layer": {
            "name": "test_can_delete_lambda_layer",
            "location": 2715,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnreferencedResourcePlanner.test_can_delete_scheduled_event": {
            "name": "test_can_delete_scheduled_event",
            "location": 2729,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnreferencedResourcePlanner.test_can_delete_s3_event": {
            "name": "test_can_delete_s3_event",
            "location": 2747,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnreferencedResourcePlanner.test_can_delete_rest_api": {
            "name": "test_can_delete_rest_api",
            "location": 2777,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnreferencedResourcePlanner.test_can_delete_websocket_api": {
            "name": "test_can_delete_websocket_api",
            "location": 2795,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnreferencedResourcePlanner.test_can_handle_when_resource_changes_values": {
            "name": "test_can_handle_when_resource_changes_values",
            "location": 2813,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnreferencedResourcePlanner.test_no_sweeping_when_resource_value_unchanged": {
            "name": "test_no_sweeping_when_resource_value_unchanged",
            "location": 2846,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnreferencedResourcePlanner.test_can_delete_sns_subscription": {
            "name": "test_can_delete_sns_subscription",
            "location": 2870,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnreferencedResourcePlanner.test_no_deletion_when_no_changes": {
            "name": "test_no_deletion_when_no_changes",
            "location": 2898,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnreferencedResourcePlanner.test_handles_when_topic_name_change": {
            "name": "test_handles_when_topic_name_change",
            "location": 2921,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnreferencedResourcePlanner.test_no_sqs_deletion_when_no_changes": {
            "name": "test_no_sqs_deletion_when_no_changes",
            "location": 2961,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnreferencedResourcePlanner.test_can_delete_sqs_subscription": {
            "name": "test_can_delete_sqs_subscription",
            "location": 2985,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnreferencedResourcePlanner.test_handles_when_queue_name_change": {
            "name": "test_handles_when_queue_name_change",
            "location": 3005,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnreferencedResourcePlanner.test_can_delete_domain_name": {
            "name": "test_can_delete_domain_name",
            "location": 3033,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnreferencedResourcePlanner.test_can_handle_domain_name_without_api_mapping": {
            "name": "test_can_handle_domain_name_without_api_mapping",
            "location": 3051,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnreferencedResourcePlanner.test_can_delete_api_mapping": {
            "name": "test_can_delete_api_mapping",
            "location": 3083,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnreferencedResourcePlanner.test_can_delete_api_mapping_none": {
            "name": "test_can_delete_api_mapping_none",
            "location": 3113,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnreferencedResourcePlanner.test_raise_error_not_existed_resource_delete": {
            "name": "test_raise_error_not_existed_resource_delete",
            "location": 3142,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnreferencedResourcePlanner.test_update_plan_with_insert_without_message": {
            "name": "test_update_plan_with_insert_without_message",
            "location": 3153,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyVariable.test_key_variable_str": {
            "name": "test_key_variable_str",
            "location": 3172,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyVariable.test_key_variables_equal": {
            "name": "test_key_variables_equal",
            "location": 3176,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "chalice-master/tests/unit/deploy/test_swagger.py": {
        "swagger_gen": {
            "name": "swagger_gen",
            "location": 12,
            "return": [
                "SwaggerGenerator",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "test_can_add_binary_media_types": {
            "name": "test_can_add_binary_media_types",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "swagger_gen": []
            }
        },
        "test_can_produce_swagger_top_level_keys": {
            "name": "test_can_produce_swagger_top_level_keys",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [],
                "swagger_gen": []
            }
        },
        "test_can_produce_doc_for_method": {
            "name": "test_can_produce_doc_for_method",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [],
                "swagger_gen": []
            }
        },
        "test_can_produce_doc_for_no_docstring": {
            "name": "test_can_produce_doc_for_no_docstring",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [],
                "swagger_gen": []
            }
        },
        "test_can_produce_doc_for_single_docstring": {
            "name": "test_can_produce_doc_for_single_docstring",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [],
                "swagger_gen": []
            }
        },
        "test_can_produce_doc_for_multi_docstring": {
            "name": "test_can_produce_doc_for_multi_docstring",
            "location": 85,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [],
                "swagger_gen": []
            }
        },
        "test_apigateway_integration_generation": {
            "name": "test_apigateway_integration_generation",
            "location": 138,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [],
                "swagger_gen": []
            }
        },
        "test_can_add_url_captures_to_params": {
            "name": "test_can_add_url_captures_to_params",
            "location": 155,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [],
                "swagger_gen": []
            }
        },
        "test_can_add_multiple_http_methods": {
            "name": "test_can_add_multiple_http_methods",
            "location": 168,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [],
                "swagger_gen": []
            }
        },
        "test_can_use_same_route_with_diff_http_methods": {
            "name": "test_can_use_same_route_with_diff_http_methods",
            "location": 180,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [],
                "swagger_gen": []
            }
        },
        "test_can_add_api_key": {
            "name": "test_can_add_api_key",
            "location": 365,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [],
                "swagger_gen": []
            }
        },
        "test_can_use_authorizer_object": {
            "name": "test_can_use_authorizer_object",
            "location": 386,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [],
                "swagger_gen": []
            }
        },
        "test_can_use_authorizer_object_with_role_arn": {
            "name": "test_can_use_authorizer_object_with_role_arn",
            "location": 409,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [],
                "swagger_gen": []
            }
        },
        "test_can_use_authorizer_object_scopes": {
            "name": "test_can_use_authorizer_object_scopes",
            "location": 437,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [],
                "swagger_gen": []
            }
        },
        "test_can_use_authorizer_object_with_scopes": {
            "name": "test_can_use_authorizer_object_with_scopes",
            "location": 467,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [],
                "swagger_gen": []
            }
        },
        "test_can_use_api_key_and_authorizers": {
            "name": "test_can_use_api_key_and_authorizers",
            "location": 500,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [],
                "swagger_gen": []
            }
        },
        "test_can_use_api_key_and_authorizers_with_scopes": {
            "name": "test_can_use_api_key_and_authorizers_with_scopes",
            "location": 516,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [],
                "swagger_gen": []
            }
        },
        "test_can_use_iam_authorizer_object": {
            "name": "test_can_use_iam_authorizer_object",
            "location": 536,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [],
                "swagger_gen": []
            }
        },
        "test_can_use_cognito_auth_object": {
            "name": "test_can_use_cognito_auth_object",
            "location": 556,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [],
                "swagger_gen": []
            }
        },
        "test_can_use_cognito_auth_object_with_scopes": {
            "name": "test_can_use_cognito_auth_object_with_scopes",
            "location": 581,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [],
                "swagger_gen": []
            }
        },
        "test_auth_defined_for_multiple_methods": {
            "name": "test_auth_defined_for_multiple_methods",
            "location": 611,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [],
                "swagger_gen": []
            }
        },
        "test_builtin_auth": {
            "name": "test_builtin_auth",
            "location": 629,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": []
            }
        },
        "test_builtin_auth_with_custom_header": {
            "name": "test_builtin_auth_with_custom_header",
            "location": 677,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": []
            }
        },
        "test_builtin_auth_with_scopes": {
            "name": "test_builtin_auth_with_scopes",
            "location": 726,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": []
            }
        },
        "test_will_default_to_function_name_for_auth": {
            "name": "test_will_default_to_function_name_for_auth",
            "location": 779,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": []
            }
        },
        "test_can_custom_resource_policy": {
            "name": "test_can_custom_resource_policy",
            "location": 827,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [],
                "swagger_gen": []
            }
        },
        "test_can_vpce": {
            "name": "test_can_vpce",
            "location": 868,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [],
                "swagger_gen": []
            }
        },
        "test_can_auto_resource_policy_with_cfn": {
            "name": "test_can_auto_resource_policy_with_cfn",
            "location": 885,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": []
            }
        },
        "test_will_custom_auth_with_cfn": {
            "name": "test_will_custom_auth_with_cfn",
            "location": 922,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": []
            }
        },
        "test_custom_auth_with_tf": {
            "name": "test_custom_auth_with_tf",
            "location": 957,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": []
            }
        },
        "test_can_produce_doc_for_no_docstring.method": {
            "name": "method",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_produce_doc_for_single_docstring.method1": {
            "name": "method1",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_produce_doc_for_single_docstring.method2": {
            "name": "method2",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_produce_doc_for_single_docstring.method3": {
            "name": "method3",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_produce_doc_for_multi_docstring.method1": {
            "name": "method1",
            "location": 87,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_produce_doc_for_multi_docstring.method2": {
            "name": "method2",
            "location": 99,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_produce_doc_for_multi_docstring.method3": {
            "name": "method3",
            "location": 111,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_add_url_captures_to_params.foo": {
            "name": "foo",
            "location": 157,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "name": []
            }
        },
        "test_can_add_multiple_http_methods.multiple_methods": {
            "name": "multiple_methods",
            "location": 170,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_use_same_route_with_diff_http_methods.multiple_methods_get": {
            "name": "multiple_methods_get",
            "location": 182,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_use_same_route_with_diff_http_methods.multiple_methods_post": {
            "name": "multiple_methods_post",
            "location": 186,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "TestPreflightCORS.get_access_control_methods": {
            "name": "get_access_control_methods",
            "location": 197,
            "return": [
                "Dict[str, Any]",
                "str",
                "Optional[str]",
                "Dict[str, str]",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "view_config": [
                    "dict",
                    "bool"
                ]
            }
        },
        "TestPreflightCORS.test_can_add_preflight_cors": {
            "name": "test_can_add_preflight_cors",
            "location": 203,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app": [],
                "swagger_gen": []
            }
        },
        "TestPreflightCORS.test_can_add_preflight_custom_cors": {
            "name": "test_can_add_preflight_custom_cors",
            "location": 281,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app": [],
                "swagger_gen": []
            }
        },
        "TestPreflightCORS.test_can_add_preflight_cors_for_shared_routes": {
            "name": "test_can_add_preflight_cors_for_shared_routes",
            "location": 343,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app": [],
                "swagger_gen": []
            }
        },
        "test_can_add_api_key.foo": {
            "name": "foo",
            "location": 367,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "name": []
            }
        },
        "test_can_use_authorizer_object.auth": {
            "name": "auth",
            "location": 392,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        },
        "test_can_use_authorizer_object_with_role_arn.auth": {
            "name": "auth",
            "location": 415,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        },
        "test_can_use_authorizer_object_scopes.auth": {
            "name": "auth",
            "location": 443,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        },
        "test_can_use_authorizer_object_with_scopes.auth": {
            "name": "auth",
            "location": 476,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        },
        "test_can_use_api_key_and_authorizers.auth": {
            "name": "auth",
            "location": 505,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        },
        "test_can_use_api_key_and_authorizers_with_scopes.auth": {
            "name": "auth",
            "location": 525,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        },
        "test_can_use_iam_authorizer_object.auth": {
            "name": "auth",
            "location": 540,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        },
        "test_can_use_cognito_auth_object.foo": {
            "name": "foo",
            "location": 562,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "test_can_use_cognito_auth_object_with_scopes.foo": {
            "name": "foo",
            "location": 590,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "test_auth_defined_for_multiple_methods.foo": {
            "name": "foo",
            "location": 617,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "test_auth_defined_for_multiple_methods.bar": {
            "name": "bar",
            "location": 621,
            "return": [
                "dict[, ]",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "test_builtin_auth.auth": {
            "name": "auth",
            "location": 649,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "auth_request": []
            }
        },
        "test_builtin_auth.foo": {
            "name": "foo",
            "location": 653,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "test_builtin_auth_with_custom_header.auth": {
            "name": "auth",
            "location": 698,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "auth_request": []
            }
        },
        "test_builtin_auth_with_custom_header.foo": {
            "name": "foo",
            "location": 702,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "test_builtin_auth_with_scopes.auth": {
            "name": "auth",
            "location": 746,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "auth_request": []
            }
        },
        "test_builtin_auth_with_scopes.foo": {
            "name": "foo",
            "location": 753,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "test_will_default_to_function_name_for_auth.auth": {
            "name": "auth",
            "location": 799,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "auth_request": []
            }
        },
        "test_will_default_to_function_name_for_auth.foo": {
            "name": "foo",
            "location": 803,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "test_will_custom_auth_with_cfn.auth": {
            "name": "auth",
            "location": 928,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "auth_request": []
            }
        },
        "test_will_custom_auth_with_cfn.foo": {
            "name": "foo",
            "location": 932,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "test_custom_auth_with_tf.auth": {
            "name": "auth",
            "location": 963,
            "return": [
                "",
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "auth_request": [
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "test_custom_auth_with_tf.foo": {
            "name": "foo",
            "location": 967,
            "return": [
                "",
                "dict[, ]"
            ],
            "arguments": {}
        },
        "TestPreflightCORS.test_can_add_preflight_cors.cors_request": {
            "name": "cors_request",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestPreflightCORS.test_can_add_preflight_custom_cors.cors_request": {
            "name": "cors_request",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestPreflightCORS.test_can_add_preflight_cors_for_shared_routes.cors_request": {
            "name": "cors_request",
            "location": 347,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "TestPreflightCORS.test_can_add_preflight_cors_for_shared_routes.non_cors_request": {
            "name": "non_cors_request",
            "location": 351,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "chalice-master/tests/unit/deploy/test_validate.py": {
        "test_trailing_slash_routes_result_in_error": {
            "name": "test_trailing_slash_routes_result_in_error",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_empty_route_results_in_error": {
            "name": "test_empty_route_results_in_error",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_validate_python_version_invalid": {
            "name": "test_validate_python_version_invalid",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_python_version_invalid_from_real_config": {
            "name": "test_python_version_invalid_from_real_config",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_python_version_is_valid": {
            "name": "test_python_version_is_valid",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_manage_iam_role_false_requires_role_arn": {
            "name": "test_manage_iam_role_false_requires_role_arn",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": []
            }
        },
        "test_validation_error_if_no_role_provided_when_manage_false": {
            "name": "test_validation_error_if_no_role_provided_when_manage_false",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": []
            }
        },
        "test_validate_unique_lambda_function_names": {
            "name": "test_validate_unique_lambda_function_names",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": []
            }
        },
        "test_validate_names_across_function_types": {
            "name": "test_validate_names_across_function_types",
            "location": 87,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "backup.config.Config",
                    "routemaster.app.App"
                ]
            }
        },
        "test_validate_names_using_name_kwarg": {
            "name": "test_validate_names_using_name_kwarg",
            "location": 101,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "neuromation.api.Config"
                ]
            }
        },
        "test_cant_have_mixed_content_types": {
            "name": "test_cant_have_mixed_content_types",
            "location": 215,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "str",
                    "neuromation.api.Config",
                    "app.App"
                ]
            }
        },
        "test_can_validate_updated_custom_binary_types": {
            "name": "test_can_validate_updated_custom_binary_types",
            "location": 226,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": []
            }
        },
        "test_can_validate_resource_policy": {
            "name": "test_can_validate_resource_policy",
            "location": 238,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": []
            }
        },
        "test_can_validate_endpoint_type": {
            "name": "test_can_validate_endpoint_type",
            "location": 272,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": []
            }
        },
        "test_can_validate_feature_flags": {
            "name": "test_can_validate_feature_flags",
            "location": 283,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": []
            }
        },
        "test_validation_error_if_minimum_compression_size_not_int": {
            "name": "test_validation_error_if_minimum_compression_size_not_int",
            "location": 299,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "backup.config.Config"
                ]
            }
        },
        "test_validation_error_if_minimum_compression_size_invalid_int": {
            "name": "test_validation_error_if_minimum_compression_size_invalid_int",
            "location": 306,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_valid_minimum_compression_size": {
            "name": "test_valid_minimum_compression_size",
            "location": 318,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "backup.config.Config"
                ]
            }
        },
        "test_validate_sqs_queue_name": {
            "name": "test_validate_sqs_queue_name",
            "location": 324,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "backup.config.Config",
                    "neuromation.api.Config",
                    "abilian.app.Application"
                ]
            }
        },
        "test_can_use_queue_arn": {
            "name": "test_can_use_queue_arn",
            "location": 336,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "backup.config.Config"
                ]
            }
        },
        "test_queue_arn_must_be_arn": {
            "name": "test_queue_arn_must_be_arn",
            "location": 346,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "backup.config.Config"
                ]
            }
        },
        "test_validate_environment_variables_value_type_not_str": {
            "name": "test_validate_environment_variables_value_type_not_str",
            "location": 357,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "neuromation.api.Config",
                    "backup.config.Config"
                ]
            }
        },
        "test_validate_unicode_is_valid_env_var": {
            "name": "test_validate_unicode_is_valid_env_var",
            "location": 364,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": []
            }
        },
        "test_validate_env_var_is_string_for_lambda_functions": {
            "name": "test_validate_env_var_is_string_for_lambda_functions",
            "location": 370,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sample_app": [
                    "abilian.app.Application",
                    "neuromation.api.Config"
                ]
            }
        },
        "test_validate_unique_lambda_function_names.foo": {
            "name": "foo",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [],
                "context": []
            }
        },
        "test_validate_unique_lambda_function_names.bar": {
            "name": "bar",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [],
                "context": []
            }
        },
        "test_validate_names_across_function_types.foo": {
            "name": "foo",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [],
                "context": []
            }
        },
        "test_validate_names_across_function_types.bar": {
            "name": "bar",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "test_validate_names_using_name_kwarg.foo": {
            "name": "foo",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "auth_request": []
            }
        },
        "test_validate_names_using_name_kwarg.bar": {
            "name": "bar",
            "location": 107,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "str"
                ]
            }
        },
        "TestValidateCORS.test_cant_have_options_with_cors": {
            "name": "test_cant_have_options_with_cors",
            "location": 116,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app": []
            }
        },
        "TestValidateCORS.test_cant_have_differing_cors_configurations": {
            "name": "test_cant_have_differing_cors_configurations",
            "location": 124,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app": []
            }
        },
        "TestValidateCORS.test_can_have_same_cors_configurations": {
            "name": "test_can_have_same_cors_configurations",
            "location": 144,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app": []
            }
        },
        "TestValidateCORS.test_can_have_same_custom_cors_configurations": {
            "name": "test_can_have_same_custom_cors_configurations",
            "location": 162,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app": []
            }
        },
        "TestValidateCORS.test_can_have_one_cors_configured_and_others_not": {
            "name": "test_can_have_one_cors_configured_and_others_not",
            "location": 196,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_app": []
            }
        },
        "test_cant_have_mixed_content_types.index": {
            "name": "index",
            "location": 218,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        },
        "test_can_validate_updated_custom_binary_types.index": {
            "name": "index",
            "location": 231,
            "return": [
                "dict[typing.Text, typing.Text]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_validate_sqs_queue_name.handler": {
            "name": "handler",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "test_can_use_queue_arn.handler": {
            "name": "handler",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "test_queue_arn_must_be_arn.handler": {
            "name": "handler",
            "location": 349,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "str"
                ]
            }
        },
        "test_validate_env_var_is_string_for_lambda_functions.foo": {
            "name": "foo",
            "location": 372,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        },
        "TestValidateCORS.test_cant_have_options_with_cors.badview": {
            "name": "badview",
            "location": 118,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "TestValidateCORS.test_cant_have_differing_cors_configurations.cors": {
            "name": "cors",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestValidateCORS.test_cant_have_differing_cors_configurations.different_cors": {
            "name": "different_cors",
            "location": 138,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "TestValidateCORS.test_can_have_same_cors_configurations.cors": {
            "name": "cors",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestValidateCORS.test_can_have_same_cors_configurations.same_cors": {
            "name": "same_cors",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestValidateCORS.test_can_have_same_custom_cors_configurations.cors": {
            "name": "cors",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestValidateCORS.test_can_have_same_custom_cors_configurations.same_cors": {
            "name": "same_cors",
            "location": 184,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "TestValidateCORS.test_can_have_one_cors_configured_and_others_not.cors": {
            "name": "cors",
            "location": 198,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "TestValidateCORS.test_can_have_one_cors_configured_and_others_not.no_cors": {
            "name": "no_cors",
            "location": 202,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "chalice-master/tests/unit/deploy/__init__.py": {},
    "chalice-master/tests/unit/vendored/__init__.py": {},
    "chalice-master/tests/unit/vendored/botocore/test_regions.py": {
        "endpoints_template": {
            "name": "endpoints_template",
            "location": 33,
            "return": [
                "dict[typing.Text, list[typing.Union[dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Text],dict[typing.Text, typing.Union[dict[typing.Text, typing.Union[dict[typing.Text, typing.Text],dict[typing.Text, dict[typing.Text, typing.Text]]]],dict[typing.Text, typing.Union[bool,typing.Text,dict[typing.Text, dict[typing.Text, typing.Text]]]],dict[typing.Text, typing.Union[dict[typing.Text, list[typing.Text]],dict[typing.Text, dict[typing.Text, list[typing.Text]]]]]]]]],dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Union[typing.Text,list[typing.Text]]],dict[typing.Text, dict[typing.Text, typing.Text]],dict[typing.Text, dict[typing.Text, dict[typing.Text, dict[typing.Text, typing.Text]]]]]]]]]",
                "str",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "test_ensures_region_is_not_none": {
            "name": "test_ensures_region_is_not_none",
            "location": 128,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "endpoints_template": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_ensures_required_keys_present": {
            "name": "test_ensures_required_keys_present",
            "location": 134,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "endpoints_template": [
                    "str",
                    "int",
                    "bytes",
                    "list[str]",
                    "List[str]",
                    "Iterable[T]"
                ]
            }
        },
        "test_returns_empty_list_when_listing_for_different_partition": {
            "name": "test_returns_empty_list_when_listing_for_different_partition",
            "location": 139,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "endpoints_template": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "Union[str, int]"
                ]
            }
        },
        "test_returns_empty_list_when_no_service_found": {
            "name": "test_returns_empty_list_when_no_service_found",
            "location": 145,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "endpoints_template": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_gets_endpoint_names": {
            "name": "test_gets_endpoint_names",
            "location": 150,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "endpoints_template": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_gets_endpoint_names_for_partition": {
            "name": "test_gets_endpoint_names_for_partition",
            "location": 156,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "endpoints_template": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_list_regional_endpoints_only": {
            "name": "test_list_regional_endpoints_only",
            "location": 163,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "endpoints_template": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_returns_none_when_no_match": {
            "name": "test_returns_none_when_no_match",
            "location": 170,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "endpoints_template": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_constructs_regionalized_endpoints_for_exact_matches": {
            "name": "test_constructs_regionalized_endpoints_for_exact_matches",
            "location": 175,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "endpoints_template": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_constructs_partition_endpoints_for_real_partition_region": {
            "name": "test_constructs_partition_endpoints_for_real_partition_region",
            "location": 184,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "endpoints_template": [
                    "bool",
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_constructs_partition_endpoints_for_regex_match": {
            "name": "test_constructs_partition_endpoints_for_regex_match",
            "location": 193,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "endpoints_template": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_constructs_endpoints_for_regionalized_regex_match": {
            "name": "test_constructs_endpoints_for_regionalized_regex_match",
            "location": 199,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "endpoints_template": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "bytes",
                    "None"
                ]
            }
        },
        "test_constructs_endpoints_for_unknown_service_but_known_region": {
            "name": "test_constructs_endpoints_for_unknown_service_but_known_region",
            "location": 205,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "endpoints_template": [
                    "str",
                    "int",
                    "tuple[typing.Union[str,int]]",
                    "bool",
                    "Tuple[str, int]"
                ]
            }
        },
        "test_merges_service_keys": {
            "name": "test_merges_service_keys",
            "location": 212,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "endpoints_template": [
                    "bool",
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_merges_partition_default_keys_with_no_overwrite": {
            "name": "test_merges_partition_default_keys_with_no_overwrite",
            "location": 222,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "endpoints_template": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_merges_partition_default_keys_with_overwrite": {
            "name": "test_merges_partition_default_keys_with_overwrite",
            "location": 229,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "endpoints_template": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "Union[str, int]"
                ]
            }
        },
        "test_gives_hostname_and_common_name_unaltered": {
            "name": "test_gives_hostname_and_common_name_unaltered",
            "location": 236,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "endpoints_template": [
                    "bool",
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "tests_uses_partition_endpoint_when_no_region_provided": {
            "name": "tests_uses_partition_endpoint_when_no_region_provided",
            "location": 243,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "endpoints_template": [
                    "bool",
                    "str",
                    "None",
                    "int",
                    "Optional[str]",
                    "Union[str, int]"
                ]
            }
        },
        "test_returns_dns_suffix_if_available": {
            "name": "test_returns_dns_suffix_if_available",
            "location": 250,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "endpoints_template": [
                    "int",
                    "str",
                    "Tuple[str, int]",
                    "tuple[typing.Union[str,int]]"
                ]
            }
        }
    },
    "chalice-master/tests/unit/vendored/botocore/__init__.py": {}
}
{
    "checkio_python_solutions-master/conftest.py": {},
    "checkio_python_solutions-master/checkio/version.py": {},
    "checkio_python_solutions-master/checkio/__init__.py": {},
    "checkio_python_solutions-master/checkio/electronic_station/brackets.py": {
        "checkio": {
            "name": "checkio",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {
                "expression": [
                    "list[]",
                    "str",
                    "list",
                    "int",
                    "bool",
                    "Optional[bool]"
                ]
            }
        }
    },
    "checkio_python_solutions-master/checkio/electronic_station/numbers_factory.py": {
        "find_factors": {
            "name": "find_factors",
            "location": 4,
            "return": [
                "typing.Generator[builtins.int, None, None]",
                "typing.Generator[]",
                "typing.Generator[int]"
            ],
            "arguments": {
                "number": [
                    "int",
                    "str",
                    "float",
                    "Iterable[int]"
                ]
            }
        },
        "checkio": {
            "name": "checkio",
            "location": 21,
            "return": [
                "int",
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "number": [
                    "typing.Type",
                    "int",
                    "Type",
                    "dict[, ]",
                    "dict",
                    "Iterable[Tuple[str, str]]",
                    "Iterable"
                ]
            }
        }
    },
    "checkio_python_solutions-master/checkio/electronic_station/restricted_sum.py": {
        "checkio": {
            "name": "checkio",
            "location": 1,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "numbers": [
                    "Sequence[T]",
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "List[int]",
                    "list"
                ]
            }
        }
    },
    "checkio_python_solutions-master/checkio/electronic_station/roman_numerals.py": {
        "checkio": {
            "name": "checkio",
            "location": 28,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "int_number": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "checkio_python_solutions-master/checkio/electronic_station/the_longest_palindromic.py": {
        "_boundaries_overflow": {
            "name": "_boundaries_overflow",
            "location": 7,
            "return": [
                "bool",
                "float",
                "List[dict]",
                "str",
                "int"
            ],
            "arguments": {
                "index": [
                    "int",
                    "float"
                ],
                "radius": [
                    "int",
                    "float"
                ],
                "length": [
                    "int",
                    "float"
                ]
            }
        },
        "_create_lps_table": {
            "name": "_create_lps_table",
            "location": 17,
            "return": [
                "list[typing.Optional[int]]",
                "bool",
                "str",
                "Optional[str]",
                "Callable"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "_get_longest_palindrome_boundaries": {
            "name": "_get_longest_palindrome_boundaries",
            "location": 53,
            "return": [
                "tuple[typing.Union[float,int]]",
                "int",
                "float",
                "str",
                "FrozenSet[Any]",
                "bool"
            ],
            "arguments": {
                "lps_table": [
                    "List[int]",
                    "list[int]",
                    "List[str]",
                    "list[str]",
                    "Dict[str, List[str]]",
                    "dict[str, list[str]]",
                    "Optional[Dict]",
                    "dict[, ]"
                ]
            }
        },
        "longest_palindromic": {
            "name": "longest_palindromic",
            "location": 64,
            "return": [
                "str",
                "bool",
                "\"custom_index\"",
                "tuple",
                "Hashable"
            ],
            "arguments": {
                "text": [
                    "str",
                    "list[\"custom_index\"]",
                    "int",
                    "Optional[List[\"custom_index\"]]"
                ]
            }
        }
    },
    "checkio_python_solutions-master/checkio/electronic_station/three_points_circle.py": {
        "parse_points": {
            "name": "parse_points",
            "location": 11,
            "return": [
                "list[Point]",
                "str",
                "Tuple[str]",
                "Optional[int]"
            ],
            "arguments": {
                "points_str": [
                    "str",
                    "int"
                ]
            }
        },
        "get_slope": {
            "name": "get_slope",
            "location": 17,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "point_a": [
                    "int",
                    "Set[int]",
                    "set[int]"
                ],
                "point_b": [
                    "int",
                    "Set[int]",
                    "set[int]"
                ]
            }
        },
        "get_distance": {
            "name": "get_distance",
            "location": 23,
            "return": [
                "str",
                "bytes",
                "int",
                "bytearray"
            ],
            "arguments": {
                "point_a": [
                    "int",
                    "Tuple[\"ndarray\", \"ndarray\", \"ndarray\"]",
                    "tuple[typing.Union[\"ndarray\",\"ndarray\",\"ndarray\"]]"
                ],
                "point_b": [
                    "int",
                    "Tuple[\"ndarray\", \"ndarray\", \"ndarray\"]",
                    "tuple[typing.Union[\"ndarray\",\"ndarray\",\"ndarray\"]]"
                ]
            }
        },
        "find_the_order": {
            "name": "find_the_order",
            "location": 28,
            "return": [
                "tuple[]",
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "point_a": [
                    "str",
                    "int",
                    "decimal.Decimal"
                ],
                "point_b": [
                    "str",
                    "int",
                    "decimal.Decimal"
                ],
                "point_c": [
                    "str",
                    "int",
                    "decimal.Decimal"
                ]
            }
        },
        "format_coordinate": {
            "name": "format_coordinate",
            "location": 43,
            "return": [
                "str",
                "Type[Any]"
            ],
            "arguments": {
                "number": [
                    "int",
                    "decimal.Decimal",
                    "str",
                    "bytes"
                ]
            }
        },
        "checkio": {
            "name": "checkio",
            "location": 52,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "points_str": [
                    "str"
                ]
            }
        }
    },
    "checkio_python_solutions-master/checkio/electronic_station/__init__.py": {},
    "checkio_python_solutions-master/checkio/elementary/absolute_sorting.py": {
        "checkio": {
            "name": "checkio",
            "location": 4,
            "return": [
                "list[]",
                "List[str]",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "numbers": [
                    "typing.Iterable[int]",
                    "float",
                    "Iterable[int]",
                    "List[Tuple[Any, Any]]",
                    "List[tuple]",
                    "List[Tuple[int, Any]]",
                    "List[float]",
                    "Tuple[int, int, int]"
                ]
            }
        }
    },
    "checkio_python_solutions-master/checkio/elementary/digits_multiplication.py": {
        "checkio": {
            "name": "checkio",
            "location": 5,
            "return": [
                "int",
                "str",
                "list",
                "List[T]",
                "List[float]"
            ],
            "arguments": {
                "number": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "checkio_python_solutions-master/checkio/elementary/even_the_last.py": {
        "checkio": {
            "name": "checkio",
            "location": 4,
            "return": [
                "int",
                "str",
                "Callable"
            ],
            "arguments": {
                "numbers": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        }
    },
    "checkio_python_solutions-master/checkio/elementary/fizz_buzz.py": {
        "checkio": {
            "name": "checkio",
            "location": 1,
            "return": [
                "str",
                "List[int]",
                "Dict[str, int]",
                "List[dict]"
            ],
            "arguments": {
                "number": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "checkio_python_solutions-master/checkio/elementary/index_power.py": {
        "index_power": {
            "name": "index_power",
            "location": 4,
            "return": [
                "int",
                "typing.Text",
                "Callable",
                "str"
            ],
            "arguments": {
                "array": [
                    "str",
                    "int",
                    "Sequence[int]"
                ],
                "index": [
                    "int",
                    "Sequence[int]",
                    "str"
                ]
            }
        }
    },
    "checkio_python_solutions-master/checkio/elementary/number_base.py": {
        "checkio": {
            "name": "checkio",
            "location": 1,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "str_number": [
                    "int",
                    "str",
                    "float"
                ],
                "base": [
                    "int",
                    "str",
                    "float"
                ]
            }
        }
    },
    "checkio_python_solutions-master/checkio/elementary/right_to_left.py": {
        "left_join": {
            "name": "left_join",
            "location": 4,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "words": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "checkio_python_solutions-master/checkio/elementary/secret_message.py": {
        "find_message": {
            "name": "find_message",
            "location": 1,
            "return": [
                "str",
                "list",
                "List[int]",
                "List[Dict[str, Any]]",
                "frozenset",
                "List[str]"
            ],
            "arguments": {
                "message": [
                    "str"
                ]
            }
        }
    },
    "checkio_python_solutions-master/checkio/elementary/the_most_numbers.py": {
        "checkio": {
            "name": "checkio",
            "location": 1,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "checkio_python_solutions-master/checkio/elementary/three_words.py": {
        "checkio": {
            "name": "checkio",
            "location": 1,
            "return": [
                "bool"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "checkio_python_solutions-master/checkio/elementary/__init__.py": {},
    "checkio_python_solutions-master/checkio/home/house_password.py": {
        "checkio": {
            "name": "checkio",
            "location": 9,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "password": [
                    "list",
                    "List[str]",
                    "str"
                ]
            }
        }
    },
    "checkio_python_solutions-master/checkio/home/long_repeat.py": {
        "long_repeat": {
            "name": "long_repeat",
            "location": 1,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "checkio_python_solutions-master/checkio/home/min_and_max.py": {
        "find_extreme": {
            "name": "find_extreme",
            "location": 4,
            "return": [
                "int",
                "float",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "compare_operator": [
                    "dict",
                    "dict[, ]",
                    "float",
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "min": {
            "name": "min",
            "location": 19,
            "return": [
                "int",
                "Union[Iterable[str], str]",
                "str",
                "Optional[int]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "max": {
            "name": "max",
            "location": 23,
            "return": [
                "int",
                "Union[Iterable[str], str]",
                "str",
                "Optional[int]",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "checkio_python_solutions-master/checkio/home/monkey_typing.py": {
        "count_words": {
            "name": "count_words",
            "location": 4,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "words": [
                    "str",
                    "set[str]",
                    "Set[str]",
                    "list[str]",
                    "List[str]",
                    "bool"
                ]
            }
        }
    },
    "checkio_python_solutions-master/checkio/home/most_wanted_letter.py": {
        "checkio": {
            "name": "checkio",
            "location": 6,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "checkio_python_solutions-master/checkio/home/nonunique_elements.py": {
        "checkio": {
            "name": "checkio",
            "location": 5,
            "return": [
                "typing.Generator[typing.Text]",
                "int",
                "list",
                "List[Dict]",
                "List[Tuple[int, float]]",
                "List[dict]",
                "List[str]",
                "Iterator[str]",
                "List[int]"
            ],
            "arguments": {
                "numbers": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        }
    },
    "checkio_python_solutions-master/checkio/home/pawn_brotherhood.py": {
        "_to_positions": {
            "name": "_to_positions",
            "location": 12,
            "return": [
                "set[Position]",
                "str",
                "bool",
                "Optional[str]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "str_coordinates": [
                    "set[str]",
                    "str",
                    "Set[str]",
                    "list[int]",
                    "int",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "_reachable_coordinates": {
            "name": "_reachable_coordinates",
            "location": 21,
            "return": [
                "set[Position]",
                "int",
                "Optional[int]",
                "List[int]",
                "str",
                "float"
            ],
            "arguments": {
                "position": [
                    "Callable",
                    "typing.Callable[, ]",
                    "int",
                    "List[Tuple[str, str]]",
                    "list[tuple[typing.Union[str,str]]]",
                    "Set[Optional[str]]",
                    "set[typing.Optional[str]]"
                ]
            }
        },
        "safe_pawns": {
            "name": "safe_pawns",
            "location": 28,
            "return": [
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "str_coordinates": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "checkio_python_solutions-master/checkio/home/xs_and_os_referee.py": {
        "_get_winner": {
            "name": "_get_winner",
            "location": 5,
            "return": [
                "typing.Text",
                "int",
                "dict",
                "Union[str, int]",
                "bytes"
            ],
            "arguments": {
                "triple": [
                    "str",
                    "Sequence",
                    "list[str]",
                    "List[str]"
                ]
            }
        },
        "_get_diagonals": {
            "name": "_get_diagonals",
            "location": 15,
            "return": [
                "list[list[str]]",
                "str",
                "bytes",
                "bool",
                "dict"
            ],
            "arguments": {
                "game_result": [
                    "str",
                    "Sequence",
                    "list[]",
                    "list",
                    "dict"
                ]
            }
        },
        "checkio": {
            "name": "checkio",
            "location": 22,
            "return": [
                "typing.Text",
                "str",
                "List[int]",
                "List[str]",
                "List[Dict]",
                "tuple",
                "Optional[List[str]]"
            ],
            "arguments": {
                "game_result": [
                    "str",
                    "int",
                    "Iterable[T]"
                ]
            }
        }
    },
    "checkio_python_solutions-master/checkio/home/__init__.py": {},
    "checkio_python_solutions-master/tests/conftest.py": {},
    "checkio_python_solutions-master/tests/checkio/electronic_station/test_brackets.py": {
        "test_checkio": {
            "name": "test_checkio",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fail_1": {
            "name": "test_fail_1",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "checkio_python_solutions-master/tests/checkio/electronic_station/test_numbers_factory.py": {
        "test_checkio": {
            "name": "test_checkio",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fail_1": {
            "name": "test_fail_1",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fail_2": {
            "name": "test_fail_2",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fail_3": {
            "name": "test_fail_3",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fail_4": {
            "name": "test_fail_4",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "checkio_python_solutions-master/tests/checkio/electronic_station/test_restricted_sum.py": {
        "test_checkio": {
            "name": "test_checkio",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "numbers": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "checkio_python_solutions-master/tests/checkio/electronic_station/test_roman_numerals.py": {
        "test_checkio": {
            "name": "test_checkio",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_checkio_extra_all_small": {
            "name": "test_checkio_extra_all_small",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_checkio_extra": {
            "name": "test_checkio_extra",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "checkio_python_solutions-master/tests/checkio/electronic_station/test_the_longest_palindromic.py": {
        "test_longest_palindromic": {
            "name": "test_longest_palindromic",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "checkio_python_solutions-master/tests/checkio/electronic_station/test_three_points_circle.py": {
        "test_checkio": {
            "name": "test_checkio",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fails": {
            "name": "test_fails",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_throws_value_error_when_points_are_in_line": {
            "name": "test_throws_value_error_when_points_are_in_line",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "checkio_python_solutions-master/tests/checkio/elementary/test_absolute_sorting.py": {
        "test_checkio": {
            "name": "test_checkio",
            "location": 4,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_checkio.check_it": {
            "name": "check_it",
            "location": 5,
            "return": [
                "list[]",
                "List[Dict]",
                "List[str]",
                "List[int]",
                "str",
                "List[List[Any]]"
            ],
            "arguments": {
                "array": [
                    "int",
                    "List[List[int]]",
                    "tuple",
                    "str"
                ]
            }
        }
    },
    "checkio_python_solutions-master/tests/checkio/elementary/test_digits_multiplication.py": {
        "test_checkio": {
            "name": "test_checkio",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "checkio_python_solutions-master/tests/checkio/elementary/test_even_the_last.py": {
        "test_checkio": {
            "name": "test_checkio",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "checkio_python_solutions-master/tests/checkio/elementary/test_fizz_buzz.py": {
        "test_checkio": {
            "name": "test_checkio",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "checkio_python_solutions-master/tests/checkio/elementary/test_index_power.py": {
        "test_index_power": {
            "name": "test_index_power",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "checkio_python_solutions-master/tests/checkio/elementary/test_number_base.py": {
        "test_index_power": {
            "name": "test_index_power",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "checkio_python_solutions-master/tests/checkio/elementary/test_right_to_left.py": {
        "test_index_power": {
            "name": "test_index_power",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "checkio_python_solutions-master/tests/checkio/elementary/test_secret_message.py": {
        "test_checkio": {
            "name": "test_checkio",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "checkio_python_solutions-master/tests/checkio/elementary/test_the_most_numbers.py": {
        "test_checkio": {
            "name": "test_checkio",
            "location": 4,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_checkio.almost_equal": {
            "name": "almost_equal",
            "location": 5,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "checked": [
                    "int",
                    "Callable",
                    "str"
                ],
                "correct": [
                    "int",
                    "Callable",
                    "str"
                ],
                "significant_digits": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "checkio_python_solutions-master/tests/checkio/elementary/test_three_words.py": {
        "test_checkio": {
            "name": "test_checkio",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "checkio_python_solutions-master/tests/checkio/home/test_house_password.py": {
        "test_checkio": {
            "name": "test_checkio",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "checkio_python_solutions-master/tests/checkio/home/test_long_repeat.py": {
        "test_long_repeat": {
            "name": "test_long_repeat",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fails_1": {
            "name": "test_fails_1",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fails_2": {
            "name": "test_fails_2",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "checkio_python_solutions-master/tests/checkio/home/test_min_and_max.py": {
        "test_min_max": {
            "name": "test_min_max",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "checkio_python_solutions-master/tests/checkio/home/test_monkey_typing.py": {
        "test_checkio": {
            "name": "test_checkio",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "checkio_python_solutions-master/tests/checkio/home/test_most_wanted_letter.py": {
        "test_checkio": {
            "name": "test_checkio",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "checkio_python_solutions-master/tests/checkio/home/test_nonunique_elements.py": {
        "test_checkio": {
            "name": "test_checkio",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "checkio_python_solutions-master/tests/checkio/home/test_pawn_brotherhood.py": {
        "test_safe_pawns": {
            "name": "test_safe_pawns",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "checkio_python_solutions-master/tests/checkio/home/test_xs_and_os_referee.py": {
        "test_checkio": {
            "name": "test_checkio",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fail_1": {
            "name": "test_fail_1",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fail_2": {
            "name": "test_fail_2",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
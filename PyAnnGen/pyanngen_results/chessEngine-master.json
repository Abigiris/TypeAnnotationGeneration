{
    "chessEngine-master/chess_engine/engine.py": {
        "gen_all_moves": {
            "name": "gen_all_moves",
            "location": 26,
            "return": [
                "Generator[(chess_engine.core.move.Move, Any, None)]"
            ],
            "arguments": {
                "board": [
                    "core.board.Board",
                    "Color"
                ],
                "color": [
                    "str",
                    "bool",
                    "core.board.Color",
                    "board.Color"
                ]
            }
        },
        "find_mate_in_n": {
            "name": "find_mate_in_n",
            "location": 43,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "board": [
                    "int",
                    "Sequence[float]",
                    "Set",
                    "Dict",
                    "starfish.core.imagestack.imagestack.ImageStack"
                ],
                "color": [
                    "bool",
                    "Iterable[Any]",
                    "core.board.Color",
                    "Tuple",
                    "int"
                ],
                "n": [
                    "int",
                    "Sequence[float]",
                    "starfish.core.imagestack.imagestack.ImageStack",
                    "Set",
                    "Dict"
                ],
                "stats_dict": [
                    "bool",
                    "None",
                    "Optional[Union[AbstractSetIntStr,MappingIntStrAny]]",
                    "float",
                    "str",
                    "Dict[Any,list[Any]]",
                    "Union[int,float]",
                    "Dict[Any,List[Any]]",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "dls_minimax": {
            "name": "dls_minimax",
            "location": 54,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "board": [
                    "bool",
                    "core.board.Board",
                    "Dict",
                    "str",
                    "Dict[str,float]",
                    "None",
                    "Optional[Dict]",
                    "float",
                    "Optional[ShippingInfo]",
                    "Optional[float]"
                ],
                "depth_remaining": [
                    "int",
                    "Optional[logging.Logger]",
                    "raiden.utils.Address",
                    "bool"
                ],
                "turn": [
                    "bool",
                    "float",
                    "List",
                    "str",
                    "int"
                ],
                "last_move": [
                    "bool",
                    "None",
                    "List",
                    "Optional[int]",
                    "str",
                    "Optional[List]",
                    "Tuple[Union[float,float]]",
                    "Optional[str]",
                    "Optional[Tuple[float,float]]",
                    "Optional[bool]"
                ],
                "alpha": [
                    "int",
                    "Optional[float]",
                    "float"
                ],
                "beta": [
                    "int",
                    "float"
                ],
                "stats_dict": [
                    "bytes",
                    "List[cirq.Circuit]",
                    "Optional[dict]",
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "score_move": {
            "name": "score_move",
            "location": 165,
            "return": [
                "int"
            ],
            "arguments": {
                "board": [
                    "float",
                    "raiden.utils.Address",
                    "int",
                    "Union[int,slice]",
                    "core.job.BaseJob"
                ],
                "move": [
                    "float",
                    "raiden.utils.Address",
                    "int",
                    "Union[int,slice]",
                    "core.job.BaseJob"
                ]
            }
        },
        "score_piece": {
            "name": "score_piece",
            "location": 175,
            "return": [
                "int"
            ],
            "arguments": {
                "piece": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "location": [
                    "str",
                    "bool",
                    "List"
                ]
            }
        },
        "score_board": {
            "name": "score_board",
            "location": 179,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "board": [
                    "str"
                ]
            }
        },
        "dls_minimax._score_move": {
            "name": "_score_move",
            "location": 130,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "move": [
                    "cmk.gui.plugins.metrics.utils.P.erfometer",
                    "cmk.gui.plugins.metrics.utils.TranslatedMetrics"
                ]
            }
        }
    },
    "chessEngine-master/chess_engine/game.py": {
        "get_piece_location": {
            "name": "get_piece_location",
            "location": 27,
            "return": [
                "List[int]",
                "List",
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "board": [
                    "str",
                    "int",
                    "Union[int,str]"
                ],
                "piece_name": [
                    "str",
                    "List",
                    "Union[int,float]",
                    "int",
                    "bool",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "color": [
                    "str",
                    "List",
                    "Union[int,float]",
                    "int",
                    "bool",
                    "float",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "interpret_move": {
            "name": "interpret_move",
            "location": 44,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "notation": [
                    "str",
                    "int",
                    "bool",
                    "float"
                ],
                "board": [
                    "Callable[...,collections.abc.Awaitable]",
                    "int",
                    "Callable[...,Awaitable]",
                    "str",
                    "Set[str]",
                    "Callable"
                ]
            }
        },
        "show_moves": {
            "name": "show_moves",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "can_move_this_turn": {
            "name": "can_move_this_turn",
            "location": 99,
            "return": [
                "bool"
            ],
            "arguments": {
                "board": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "turn": [
                    "str",
                    "int"
                ]
            }
        },
        "process_command": {
            "name": "process_command",
            "location": 103,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "board": [
                    "str",
                    "int"
                ],
                "command": [
                    "str",
                    "raiden.utils.Address"
                ]
            }
        },
        "game_loop": {
            "name": "game_loop",
            "location": 154,
            "return": [
                "int",
                "List[Dict[str,Any]]",
                "List[str]"
            ],
            "arguments": {}
        },
        "Game.record_move": {
            "name": "record_move",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "move": [
                    "str",
                    "List",
                    "Tuple",
                    "Callable[,None]"
                ]
            }
        },
        "Game.flip_turn": {
            "name": "flip_turn",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "chessEngine-master/chess_engine/__init__.py": {
        "Game.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "str",
                    "None",
                    "int",
                    "Optional[list]",
                    "List"
                ]
            }
        },
        "Game.get_normal_person_move": {
            "name": "get_normal_person_move",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "from_square": [
                    "str",
                    "bool"
                ],
                "to_square": [
                    "str",
                    "bool"
                ],
                "promotion": [
                    "bool",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "Game.move_piece": {
            "name": "move_piece",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "from_square": [
                    "int",
                    "str"
                ],
                "to_square": [
                    "int",
                    "str"
                ],
                "promotion": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "Game.is_in_checkmate": {
            "name": "is_in_checkmate",
            "location": 95,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "Callable[T,bool]",
                    "cmk.utils.type_defs.EventRule",
                    "Callable[[T],bool]"
                ]
            }
        },
        "Game.is_in_check": {
            "name": "is_in_check",
            "location": 98,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "Callable[T,bool]",
                    "cmk.utils.type_defs.EventRule",
                    "Callable[[T],bool]"
                ]
            }
        },
        "Game.is_in_stalemate": {
            "name": "is_in_stalemate",
            "location": 101,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "Callable[T,bool]",
                    "cmk.utils.type_defs.EventRule",
                    "Callable[[T],bool]"
                ]
            }
        },
        "Game.print": {
            "name": "print",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "chessEngine-master/chess_engine/__main__.py": {},
    "chessEngine-master/chess_engine/core/board.py": {
        "get_piece_list": {
            "name": "get_piece_list",
            "location": 149,
            "return": [
                "Generator[(Tuple[(int, Any)], Any, None)]"
            ],
            "arguments": {
                "board": [
                    "str",
                    "Callable",
                    "List[str]",
                    "List"
                ],
                "color": [
                    "str",
                    "Callable",
                    "List[str]",
                    "List"
                ]
            }
        },
        "index_to_sq": {
            "name": "index_to_sq",
            "location": 160,
            "return": [
                "str"
            ],
            "arguments": {
                "index": [
                    "List[int]",
                    "Set[int]",
                    "[]",
                    "str",
                    "int",
                    "Optional[int]",
                    "None",
                    "Union[List[float],List[int]]",
                    "List[float]"
                ]
            }
        },
        "index_to_col": {
            "name": "index_to_col",
            "location": 166,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "index": [
                    "str",
                    "list",
                    "List[List[str]]",
                    "bool"
                ]
            }
        },
        "index_to_row": {
            "name": "index_to_row",
            "location": 173,
            "return": [
                "int",
                "str",
                "Generator"
            ],
            "arguments": {
                "index": [
                    "bool",
                    "bytes",
                    "Iterable[str]",
                    "Optional[Exception]",
                    "Callable[...,Awaitable]",
                    "str"
                ]
            }
        },
        "sq_to_row_col": {
            "name": "sq_to_row_col",
            "location": 180,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "sq": [
                    "str",
                    "Dict"
                ]
            }
        },
        "sq_to_index": {
            "name": "sq_to_index",
            "location": 188,
            "return": [
                "int"
            ],
            "arguments": {
                "sq": [
                    "str"
                ]
            }
        },
        "is_valid_square": {
            "name": "is_valid_square",
            "location": 199,
            "return": [
                "bool",
                "str",
                "float"
            ],
            "arguments": {
                "index": [
                    "int",
                    "str"
                ]
            }
        },
        "is_empty_square": {
            "name": "is_empty_square",
            "location": 203,
            "return": [
                "bool",
                "Callable",
                "str",
                "Type"
            ],
            "arguments": {
                "board": [
                    "int",
                    "str"
                ],
                "index": [
                    "int",
                    "str"
                ]
            }
        },
        "get_color": {
            "name": "get_color",
            "location": 207,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "board": [
                    "str",
                    "bool"
                ],
                "index": [
                    "str",
                    "bool"
                ]
            }
        },
        "slide_index": {
            "name": "slide_index",
            "location": 211,
            "return": [
                "int",
                "str",
                "Callable"
            ],
            "arguments": {
                "index": [
                    "int",
                    "str",
                    "Callable"
                ],
                "dx": [
                    "int",
                    "str",
                    "Callable"
                ],
                "dy": [
                    "int",
                    "str",
                    "Callable"
                ]
            }
        },
        "get_castle_rook_index": {
            "name": "get_castle_rook_index",
            "location": 220,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "board": [
                    "bool",
                    "List[str]",
                    "Sequence[str]",
                    "str",
                    "TextIO",
                    "None",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "from_index": [
                    "int",
                    "Sequence[str]",
                    "Union[int,str]",
                    "List[str]"
                ],
                "to_index": [
                    "float",
                    "bool",
                    "Dict[str,Any]",
                    "int"
                ]
            }
        },
        "find_king_index": {
            "name": "find_king_index",
            "location": 230,
            "return": [
                "int"
            ],
            "arguments": {
                "board": [
                    "str",
                    "int",
                    "float",
                    "slice"
                ],
                "color": [
                    "Dict",
                    "bool",
                    "str",
                    "int",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "move_piece_castle": {
            "name": "move_piece_castle",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "board": [
                    "int",
                    "List",
                    "Dict[str,int]",
                    "str"
                ],
                "from_index": [
                    "int",
                    "Hashable",
                    "bool"
                ],
                "to_index": [
                    "int",
                    "List[int]",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "move_piece_en_passant": {
            "name": "move_piece_en_passant",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "board": [
                    "int",
                    "Dict[str,int]",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]",
                    "Optional[int]",
                    "None"
                ],
                "from_index": [
                    "int",
                    "List[int]",
                    "Tuple",
                    "Optional[int]",
                    "None"
                ],
                "to_index": [
                    "int",
                    "Optional[Union[int,slice]]",
                    "str",
                    "None"
                ]
            }
        },
        "move_piece": {
            "name": "move_piece",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "board": [
                    "int",
                    "float"
                ],
                "from_index": [
                    "int",
                    "float"
                ],
                "to_index": [
                    "int",
                    "float",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ],
                "promotion_piece": [
                    "bool",
                    "List[str]",
                    "float",
                    "int",
                    "Optional[int]",
                    "Optional[bool]"
                ],
                "is_castle": [
                    "bool",
                    "Optional[int]",
                    "Optional[dict]",
                    "Optional[List]"
                ],
                "is_en_passant": [
                    "bool",
                    "Optional[int]",
                    "Optional[dict]",
                    "Optional[List]"
                ]
            }
        },
        "get_piece_of_color": {
            "name": "get_piece_of_color",
            "location": 295,
            "return": [
                "str"
            ],
            "arguments": {
                "piece_name": [
                    "str"
                ],
                "color": [
                    "str"
                ]
            }
        },
        "get_piece_color": {
            "name": "get_piece_color",
            "location": 299,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "piece": [
                    "str",
                    "bytes",
                    "bool",
                    "int"
                ]
            }
        },
        "get_raw_piece": {
            "name": "get_raw_piece",
            "location": 306,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "piece": [
                    "str",
                    "bool"
                ]
            }
        },
        "fen_to_board": {
            "name": "fen_to_board",
            "location": 310,
            "return": [
                "Board"
            ],
            "arguments": {
                "fen": [
                    "List[int]",
                    "List[list[str]]",
                    "int",
                    "float",
                    "str",
                    "List[List[str]]"
                ]
            }
        },
        "load_board": {
            "name": "load_board",
            "location": 331,
            "return": [
                "Board"
            ],
            "arguments": {
                "arr": [
                    "str",
                    "List",
                    "bool",
                    "IO[str]"
                ]
            }
        },
        "dump_board": {
            "name": "dump_board",
            "location": 345,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "board": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "print_board": {
            "name": "print_board",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "board": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "is_capture": {
            "name": "is_capture",
            "location": 381,
            "return": [
                "bool"
            ],
            "arguments": {
                "board": [
                    "Optional[str]",
                    "int",
                    "str",
                    "None"
                ],
                "dest_index": [
                    "Optional[str]",
                    "int",
                    "str",
                    "None"
                ],
                "piece": [
                    "Optional[str]",
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "Board.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Board.__getitem__": {
            "name": "__getitem__",
            "location": 75,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Board.__setitem__": {
            "name": "__setitem__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Sequence[int]",
                    "str"
                ],
                "piece": [
                    "int",
                    "Sequence[int]",
                    "str"
                ]
            }
        },
        "Board.__iter__": {
            "name": "__iter__",
            "location": 81,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.add_move": {
            "name": "add_move",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "move": [
                    "float",
                    "int"
                ]
            }
        },
        "Board.set_check": {
            "name": "set_check",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "str",
                    "int"
                ],
                "in_check": [
                    "int",
                    "float",
                    "Tuple[Union[int,int]]",
                    "str",
                    "Tuple[int,int]",
                    "bool"
                ]
            }
        },
        "Board.get_check": {
            "name": "get_check",
            "location": 91,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "Board.compute_ep_index": {
            "name": "compute_ep_index",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.is_en_passant_possible": {
            "name": "is_en_passant_possible",
            "location": 119,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.get_ep_capture_index": {
            "name": "get_ep_capture_index",
            "location": 124,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.get_ep_pawn_index": {
            "name": "get_ep_pawn_index",
            "location": 129,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.move_piece": {
            "name": "move_piece",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "move": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "chessEngine-master/chess_engine/core/move.py": {
        "gen_successor": {
            "name": "gen_successor",
            "location": 43,
            "return": [
                "chess_engine.core.board.Board"
            ],
            "arguments": {
                "board_init": [
                    "str",
                    "int",
                    "board.Board"
                ],
                "src": [
                    "int",
                    "str",
                    "board.Board"
                ],
                "dest": [
                    "int",
                    "str",
                    "board.Board"
                ]
            }
        },
        "gen_successor_from_move": {
            "name": "gen_successor_from_move",
            "location": 53,
            "return": [
                "chess_engine.core.board.Board"
            ],
            "arguments": {
                "board_init": [
                    "str",
                    "float",
                    "board.Board"
                ],
                "move": [
                    "bytes",
                    "bool",
                    "T"
                ]
            }
        },
        "Move.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "piece": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "Iterable[adi.Instance]",
                    "None"
                ],
                "src": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "Iterable[adi.Instance]",
                    "None"
                ],
                "dest": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "Iterable[adi.Instance]",
                    "None"
                ],
                "promotion": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]",
                    "Iterable[adi.Instance]"
                ],
                "is_capture": [
                    "bool",
                    "Optional[int]",
                    "str",
                    "Iterable[adi.Instance]"
                ],
                "is_castle": [
                    "bool",
                    "Optional[int]",
                    "str",
                    "Iterable[adi.Instance]"
                ],
                "is_en_passant": [
                    "bool",
                    "Optional[int]",
                    "str",
                    "Iterable[adi.Instance]"
                ]
            }
        },
        "Move.show": {
            "name": "show",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "chessEngine-master/chess_engine/core/piece_movement_rules.py": {
        "is_valid_and_empty": {
            "name": "is_valid_and_empty",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {
                "board": [
                    "int",
                    "str",
                    "board.Board"
                ],
                "index": [
                    "int",
                    "str",
                    "board.Board"
                ]
            }
        },
        "is_empty_or_capture": {
            "name": "is_empty_or_capture",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {
                "board": [
                    "int",
                    "str",
                    "Sequence[int]",
                    "board.Board",
                    "board.PieceName"
                ],
                "index": [
                    "int",
                    "str",
                    "Sequence[int]",
                    "board.Board",
                    "board.PieceName"
                ],
                "piece": [
                    "int",
                    "str",
                    "Sequence[int]",
                    "board.Board",
                    "board.PieceName"
                ]
            }
        },
        "is_valid_en_passant": {
            "name": "is_valid_en_passant",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "board": [
                    "int",
                    "board.Board",
                    "Optional[float]",
                    "str",
                    "Callable",
                    "Union[int, str]",
                    "Optional[bool]"
                ],
                "from_index": [
                    "int",
                    "Callable",
                    "bool"
                ],
                "to_index": [
                    "int",
                    "float",
                    "str",
                    "board.Board",
                    "Callable",
                    "None",
                    "Optional[float]",
                    "Union[int,str]",
                    "Optional[bool]"
                ]
            }
        },
        "is_valid_capture": {
            "name": "is_valid_capture",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "board": [
                    "int",
                    "Sequence[T]",
                    "board.PieceName",
                    "board.Board"
                ],
                "to_index": [
                    "int",
                    "Sequence[T]",
                    "board.PieceName",
                    "board.Board"
                ],
                "piece": [
                    "int",
                    "Sequence[T]",
                    "board.PieceName",
                    "board.Board"
                ]
            }
        },
        "slide_and_check": {
            "name": "slide_and_check",
            "location": 34,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "board": [
                    "str",
                    "board.Board"
                ],
                "index": [
                    "int",
                    "List",
                    "board.Board",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "piece_color": [
                    "str",
                    "bool",
                    "board.Color",
                    "int"
                ],
                "dy": [
                    "str",
                    "int"
                ],
                "dx": [
                    "str",
                    "int"
                ]
            }
        },
        "get_rook_valid_squares": {
            "name": "get_rook_valid_squares",
            "location": 55,
            "return": [
                "itertools.chain"
            ],
            "arguments": {
                "board": [
                    "int",
                    "List",
                    "Iterator",
                    "str",
                    "board.Board",
                    "Iterator[T]",
                    "trezor.utils.Writer"
                ],
                "index": [
                    "int",
                    "List",
                    "Iterator",
                    "str",
                    "board.Board",
                    "Iterator[T]",
                    "trezor.utils.Writer"
                ]
            }
        },
        "get_bishop_valid_squares": {
            "name": "get_bishop_valid_squares",
            "location": 66,
            "return": [
                "itertools.chain"
            ],
            "arguments": {
                "board": [
                    "int",
                    "List",
                    "Iterator",
                    "str",
                    "board.Board",
                    "Iterator[T]",
                    "trezor.utils.Writer"
                ],
                "index": [
                    "int",
                    "List",
                    "Iterator",
                    "str",
                    "board.Board",
                    "Iterator[T]",
                    "trezor.utils.Writer"
                ]
            }
        },
        "get_queen_valid_squares": {
            "name": "get_queen_valid_squares",
            "location": 77,
            "return": [
                "itertools.chain"
            ],
            "arguments": {
                "board": [
                    "int",
                    "float",
                    "Dict[int,dict]",
                    "board.Board"
                ],
                "index": [
                    "int",
                    "float",
                    "Dict[int,dict]",
                    "board.Board"
                ]
            }
        },
        "get_king_valid_squares": {
            "name": "get_king_valid_squares",
            "location": 84,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "board": [
                    "List",
                    "board.Board"
                ],
                "index": [
                    "List",
                    "int",
                    "str",
                    "List[int]",
                    "board.Board"
                ]
            }
        },
        "get_pawn_valid_squares": {
            "name": "get_pawn_valid_squares",
            "location": 105,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "board": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "bool"
                ],
                "from_index": [
                    "int",
                    "float",
                    "Optional[List[str]]",
                    "List[str]",
                    "None",
                    "Dict[int,Set[int]]",
                    "Dict[int,set[int]]"
                ]
            }
        },
        "get_knight_valid_squares": {
            "name": "get_knight_valid_squares",
            "location": 137,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "board": [
                    "List",
                    "board.Board"
                ],
                "index": [
                    "List",
                    "int",
                    "str",
                    "List[int]",
                    "board.Board"
                ]
            }
        },
        "get_piece_valid_squares": {
            "name": "get_piece_valid_squares",
            "location": 153,
            "return": [
                "Tuple[str]",
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "board": [
                    "int",
                    "str",
                    "Tuple[str]",
                    "Dict",
                    "raiden.utils.Address"
                ],
                "from_index": [
                    "int",
                    "str",
                    "Tuple[str]",
                    "Dict",
                    "raiden.utils.Address"
                ]
            }
        },
        "is_castle_move": {
            "name": "is_castle_move",
            "location": 171,
            "return": [
                "bool"
            ],
            "arguments": {
                "board": [
                    "int",
                    "str",
                    "board.Board"
                ],
                "from_index": [
                    "int",
                    "board.Board",
                    "Collection",
                    "Collection[int]"
                ],
                "to_index": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "can_castle": {
            "name": "can_castle",
            "location": 181,
            "return": [
                "bool"
            ],
            "arguments": {
                "board": [
                    "int",
                    "Dict[int,dict]",
                    "raiden.utils.Secret",
                    "board.Board"
                ],
                "from_index": [
                    "int",
                    "str",
                    "Tuple[float]",
                    "List[int]",
                    "Tuple[int,int]"
                ],
                "to_index": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "is_legal_move": {
            "name": "is_legal_move",
            "location": 253,
            "return": [
                "bool"
            ],
            "arguments": {
                "board": [
                    "bool",
                    "Callable",
                    "float"
                ],
                "from_index": [
                    "int",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ],
                "to_index": [
                    "int",
                    "List",
                    "bool"
                ]
            }
        },
        "is_in_check": {
            "name": "is_in_check",
            "location": 276,
            "return": [
                "bool",
                "Callable[...,None]",
                "Optional[bool]",
                "Optional[str]"
            ],
            "arguments": {
                "board": [
                    "Any",
                    "Union[int,slice]",
                    "str",
                    "int",
                    "Dict[str,AsyncGenerator]",
                    "Dict[str,collections.abc.AsyncGenerator]"
                ],
                "color": [
                    "Any",
                    "str",
                    "Union[int,slice]",
                    "int"
                ]
            }
        },
        "_has_no_legal_moves": {
            "name": "_has_no_legal_moves",
            "location": 297,
            "return": [
                "bool"
            ],
            "arguments": {
                "board": [
                    "board.Board",
                    "Color",
                    "core.board.Board"
                ],
                "color": [
                    "str",
                    "bool",
                    "board.Color",
                    "core.board.Color"
                ]
            }
        },
        "is_in_checkmate": {
            "name": "is_in_checkmate",
            "location": 309,
            "return": [
                "bool"
            ],
            "arguments": {
                "board": [
                    "int",
                    "board.Board",
                    "board.Color"
                ],
                "color": [
                    "int",
                    "board.Board",
                    "board.Color"
                ]
            }
        },
        "is_in_stalemate": {
            "name": "is_in_stalemate",
            "location": 317,
            "return": [
                "bool"
            ],
            "arguments": {
                "board": [
                    "int",
                    "board.Board",
                    "board.Color"
                ],
                "color": [
                    "int",
                    "board.Board",
                    "board.Color"
                ]
            }
        },
        "get_promotions": {
            "name": "get_promotions",
            "location": 321,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "board": [
                    "int",
                    "board.Board",
                    "utils.SinkType"
                ],
                "src": [
                    "int",
                    "board.Board",
                    "utils.SinkType"
                ],
                "dest": [
                    "int",
                    "board.Board",
                    "utils.SinkType"
                ]
            }
        },
        "_get_promotions": {
            "name": "_get_promotions",
            "location": 329,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "piece": [
                    "int",
                    "str",
                    "board.PieceName",
                    "raiden.utils.Secret"
                ],
                "src": [
                    "int",
                    "str",
                    "Optional[Tuple[str,...]]",
                    "Tuple[Union[str,...]]",
                    "None"
                ],
                "dest": [
                    "int",
                    "str",
                    "Sequence[Union[int,float]]",
                    "List[str]"
                ]
            }
        }
    },
    "chessEngine-master/chess_engine/core/utils.py": {
        "get_opposite_color": {
            "name": "get_opposite_color",
            "location": 5,
            "return": [
                "bool"
            ],
            "arguments": {
                "col": [
                    "str",
                    "int",
                    "Sequence[Dict[str,str]]",
                    "Sequence[dict[str,str]]",
                    "bool",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "None"
                ]
            }
        },
        "full_color_name": {
            "name": "full_color_name",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "col": [
                    "bool",
                    "Sequence",
                    "str",
                    "int",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "setup_logging": {
            "name": "setup_logging",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "verbose": [
                    "int",
                    "str",
                    "logging.Logger"
                ]
            }
        }
    },
    "chessEngine-master/chess_engine/core/__init__.py": {},
    "chessEngine-master/tests/test_engine.py": {
        "MoveOrderingTest.test_ordering_heuristic_simple": {
            "name": "test_ordering_heuristic_simple",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoveOrderingTest.test_ordering_heuristic_in_gen_all_moves": {
            "name": "test_ordering_heuristic_in_gen_all_moves",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PositionRankingTest.test_not_lose_immediately": {
            "name": "test_not_lose_immediately",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoveOrderingTest.test_ordering_heuristic_in_gen_all_moves._score_move": {
            "name": "_score_move",
            "location": 50,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "move": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "chessEngine-master/tests/test_mate_in_n.py": {
        "write_mate_result": {
            "name": "write_mate_result",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "board": [
                    "str",
                    "int",
                    "chess_engine.core.board.Board"
                ],
                "moves": [
                    "str",
                    "int",
                    "bool"
                ],
                "fp": [
                    "chess_engine.core.board.Board",
                    "str",
                    "int"
                ]
            }
        },
        "MateInOneTest.test_simple_rook_mate_in_1": {
            "name": "test_simple_rook_mate_in_1",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MateInOneTest.test_simple_board_no_mate_in_1": {
            "name": "test_simple_board_no_mate_in_1",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MateInOneTest.test_simple_forced_rook_mate_in_2": {
            "name": "test_simple_forced_rook_mate_in_2",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MateInOneTest.test_mate_in_1_p1": {
            "name": "test_mate_in_1_p1",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MateInTwoTest.test_mate_in_2_p1": {
            "name": "test_mate_in_2_p1",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MateInTwoTest.test_mate_in_2_p2": {
            "name": "test_mate_in_2_p2",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MateInTwoTest.test_mate_in_2_p3": {
            "name": "test_mate_in_2_p3",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MateInThreeTest.assert_find_mate": {
            "name": "assert_find_mate",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fen": [
                    "str",
                    "int",
                    "List[int]"
                ]
            }
        },
        "MateInThreeTest.test_mate_in_3_p1": {
            "name": "test_mate_in_3_p1",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MateInThreeTest.test_mate_in_3_p2": {
            "name": "test_mate_in_3_p2",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MateInThreeTest.test_mate_in_3_p3": {
            "name": "test_mate_in_3_p3",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MateInThreeTest.test_mate_in_2_p3": {
            "name": "test_mate_in_2_p3",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MateInThreeTest.test_mate_in_3_p4": {
            "name": "test_mate_in_3_p4",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MateInFourTest.assert_find_mate_in_4": {
            "name": "assert_find_mate_in_4",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fen": [
                    "str",
                    "int",
                    "Set",
                    "Dict",
                    "bool"
                ]
            }
        },
        "MateInFourTest.test_mate_in_4_p1": {
            "name": "test_mate_in_4_p1",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "chessEngine-master/tests/__init__.py": {},
    "chessEngine-master/tests/core/board_test.py": {
        "test_sq_to_index": {
            "name": "test_sq_to_index",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_index_to_sq": {
            "name": "test_index_to_sq",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_valid_sq": {
            "name": "test_valid_sq",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_board": {
            "name": "test_load_board",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dump_board": {
            "name": "test_dump_board",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_piece_list": {
            "name": "test_piece_list",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "chessEngine-master/tests/core/pgn_test.py": {
        "read_pgn_moves": {
            "name": "read_pgn_moves",
            "location": 11,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "run_pgn": {
            "name": "run_pgn",
            "location": 17,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "test_weird_promotions": {
            "name": "test_weird_promotions",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_weird_promotions_2": {
            "name": "test_weird_promotions_2",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_stalemate": {
            "name": "test_stalemate",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_kasparov_topalov": {
            "name": "test_kasparov_topalov",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_aronian_anand": {
            "name": "test_aronian_anand",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_anand_carlsen_2013_game_5": {
            "name": "test_anand_carlsen_2013_game_5",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_anand_carlsen_2013_game_6": {
            "name": "test_anand_carlsen_2013_game_6",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_anand_carlsen_2013_game_9": {
            "name": "test_anand_carlsen_2013_game_9",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_carlsen_bu_2017": {
            "name": "test_carlsen_bu_2017",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_carlsen_karjakin_2016_game_16": {
            "name": "test_carlsen_karjakin_2016_game_16",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_carlsen_caruana_2018_game_13": {
            "name": "test_carlsen_caruana_2018_game_13",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_aronian": {
            "name": "test_aronian",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mvl": {
            "name": "test_mvl",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_alekhine_many_promos": {
            "name": "test_alekhine_many_promos",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_alekhine_quad_pawns": {
            "name": "test_alekhine_quad_pawns",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fischer_mate": {
            "name": "test_fischer_mate",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_weird_mates": {
            "name": "test_weird_mates",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "chessEngine-master/tests/core/piece_movement_test.py": {
        "PieceMovementTest.test_rook_starter_board_valid_squares": {
            "name": "test_rook_starter_board_valid_squares",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PieceMovementTest.test_rook_empty_board_valid_squares": {
            "name": "test_rook_empty_board_valid_squares",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PieceMovementTest.test_rook_blocked_capture_valid_squares": {
            "name": "test_rook_blocked_capture_valid_squares",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PieceMovementTest.test_rook_blocked_own_piece_valid_squares": {
            "name": "test_rook_blocked_own_piece_valid_squares",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PieceMovementTest.test_rook_valid_squares_capture_blocks_own_piece": {
            "name": "test_rook_valid_squares_capture_blocks_own_piece",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PieceMovementTest.test_bishop_valid_squares": {
            "name": "test_bishop_valid_squares",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PieceMovementTest.test_queen_valid_squares": {
            "name": "test_queen_valid_squares",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PieceMovementTest.test_king_valid_squares": {
            "name": "test_king_valid_squares",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PieceMovementTest.test_pawn_valid_squares": {
            "name": "test_pawn_valid_squares",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PieceMovementTest.test_knight_valid_squares": {
            "name": "test_knight_valid_squares",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PieceMovementTest.test_piece_valid_squares": {
            "name": "test_piece_valid_squares",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PieceMovementTest.test_is_legal_pawn_move": {
            "name": "test_is_legal_pawn_move",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PieceMovementTest.test_promotions_not_pawn": {
            "name": "test_promotions_not_pawn",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PieceMovementTest.test_promotions_pawn_backwards": {
            "name": "test_promotions_pawn_backwards",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PieceMovementTest.test_promotions_pawn_forward_two_spaces": {
            "name": "test_promotions_pawn_forward_two_spaces",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PieceMovementTest.test_promotions_pawn_white_move": {
            "name": "test_promotions_pawn_white_move",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PieceMovementTest.test_promotions_pawn_black_move": {
            "name": "test_promotions_pawn_black_move",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PieceMovementTest.test_promotions_pawn_black_capture": {
            "name": "test_promotions_pawn_black_capture",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PieceMovementTest.test_promotions_blocked": {
            "name": "test_promotions_blocked",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckTest.test_bishop_check": {
            "name": "test_bishop_check",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckTest.test_pawn_can_defend": {
            "name": "test_pawn_can_defend",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckTest.test_pawn_not_give_check_above": {
            "name": "test_pawn_not_give_check_above",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckTest.test_pawn_give_check": {
            "name": "test_pawn_give_check",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckTest.test_is_in_check_starter_board": {
            "name": "test_is_in_check_starter_board",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckTest.test_is_in_check_basic_rook": {
            "name": "test_is_in_check_basic_rook",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckTest.test_is_in_check_basic_rook_2": {
            "name": "test_is_in_check_basic_rook_2",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckTest.test_is_in_check_basic_bishop": {
            "name": "test_is_in_check_basic_bishop",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckTest.test_is_in_checkmate_simple_rook_mate": {
            "name": "test_is_in_checkmate_simple_rook_mate",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckTest.test_is_in_checkmate_unprotected_attacker": {
            "name": "test_is_in_checkmate_unprotected_attacker",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckTest.test_is_in_checkmate_simple_rook_check": {
            "name": "test_is_in_checkmate_simple_rook_check",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckTest.test_is_in_stalemate_with_rook": {
            "name": "test_is_in_stalemate_with_rook",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckTest.test_not_in_mate_1": {
            "name": "test_not_in_mate_1",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "chessEngine-master/tests/core/utils_test.py": {
        "test_opposite_color_W": {
            "name": "test_opposite_color_W",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_opposite_color": {
            "name": "test_opposite_color",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "chessEngine-master/tests/core/__init__.py": {}
}
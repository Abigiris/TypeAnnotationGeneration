{
    "clean-architecture-python-master/docs/conf.py": {},
    "clean-architecture-python-master/taskit/__init__.py": {},
    "clean-architecture-python-master/taskit/__main__.py": {
        "prepare_json_database": {
            "name": "prepare_json_database",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "taskit_dir": [
                    "str"
                ]
            }
        },
        "build_state": {
            "name": "build_state",
            "location": 34,
            "return": [
                "taskit.infrastructure.cli.taskit.State"
            ],
            "arguments": {
                "json_file": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "clean-architecture-python-master/taskit/application/__init__.py": {},
    "clean-architecture-python-master/taskit/application/coordinators/admin_coordinator.py": {
        "AdminCoordinator.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project_repository": [
                    "taskit.application.repositories.project_repository.ProjectRepository"
                ],
                "task_repository": [
                    "taskit.application.repositories.task_repository.TaskRepository"
                ]
            }
        },
        "AdminCoordinator.create_project": {
            "name": "create_project",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project_dict": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "AdminCoordinator.update_project": {
            "name": "update_project",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project_dict": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "AdminCoordinator.delete_project": {
            "name": "delete_project",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "str"
                ]
            }
        },
        "AdminCoordinator.update_task": {
            "name": "update_task",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_dict": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "AdminCoordinator.delete_task": {
            "name": "delete_task",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "str"
                ]
            }
        }
    },
    "clean-architecture-python-master/taskit/application/coordinators/agenda_coordinator.py": {
        "AgendaCoordinator.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project_repository": [
                    "taskit.application.repositories.project_repository.ProjectRepository"
                ],
                "task_repository": [
                    "taskit.application.repositories.task_repository.TaskRepository"
                ]
            }
        },
        "AgendaCoordinator.create_task": {
            "name": "create_task",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_dict": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "AgendaCoordinator.start_task": {
            "name": "start_task",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "str"
                ]
            }
        },
        "AgendaCoordinator.complete_task": {
            "name": "complete_task",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "str"
                ]
            }
        }
    },
    "clean-architecture-python-master/taskit/application/coordinators/__init__.py": {},
    "clean-architecture-python-master/taskit/application/models/project.py": {
        "Project.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        }
    },
    "clean-architecture-python-master/taskit/application/models/task.py": {
        "Task.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        }
    },
    "clean-architecture-python-master/taskit/application/models/__init__.py": {},
    "clean-architecture-python-master/taskit/application/reporters/state_reporter.py": {
        "StateReporter.list_tasks": {
            "name": "list_tasks",
            "location": 8,
            "return": [
                "List[Dict[(str, str)]]"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "int",
                    "bytes",
                    "List[int]",
                    "Callable",
                    "Optional",
                    "Iterable[Tuple[str, str]]",
                    "bool",
                    "Dict[str, Any]"
                ],
                "limit": [
                    "int",
                    "bytes",
                    "List[int]",
                    "Callable",
                    "Optional",
                    "Iterable[Tuple[str, str]]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "StateReporter.list_tasks_in_project": {
            "name": "list_tasks_in_project",
            "location": 12,
            "return": [
                "List[Dict[(str, str)]]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ]
            }
        },
        "StateReporter.list_tasks_in_stage": {
            "name": "list_tasks_in_stage",
            "location": 16,
            "return": [
                "List[Dict[(str, str)]]"
            ],
            "arguments": {
                "self": [],
                "stage": [
                    "str"
                ]
            }
        },
        "StateReporter.list_projects": {
            "name": "list_projects",
            "location": 20,
            "return": [
                "List[Dict[(str, str)]]"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "int",
                    "List[str]",
                    "str"
                ],
                "limit": [
                    "int",
                    "List[str]",
                    "str"
                ]
            }
        },
        "MemoryStateReporter.list_tasks": {
            "name": "list_tasks",
            "location": 26,
            "return": [
                "List[Dict[(str, str)]]"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "int",
                    "bytes",
                    "List[int]",
                    "Callable",
                    "Optional",
                    "Iterable[Tuple[str, str]]",
                    "bool",
                    "Dict[str, Any]"
                ],
                "limit": [
                    "int",
                    "bytes",
                    "List[int]",
                    "Callable",
                    "Optional",
                    "Iterable[Tuple[str, str]]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "MemoryStateReporter.list_tasks_in_project": {
            "name": "list_tasks_in_project",
            "location": 29,
            "return": [
                "List[Dict[(str, str)]]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ]
            }
        },
        "MemoryStateReporter.list_tasks_in_stage": {
            "name": "list_tasks_in_stage",
            "location": 32,
            "return": [
                "List[Dict[(str, str)]]"
            ],
            "arguments": {
                "self": [],
                "stage": [
                    "str"
                ]
            }
        },
        "MemoryStateReporter.list_projects": {
            "name": "list_projects",
            "location": 35,
            "return": [
                "List[Dict[(str, str)]]"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "int",
                    "List[str]",
                    "str"
                ],
                "limit": [
                    "int",
                    "List[str]",
                    "str"
                ]
            }
        }
    },
    "clean-architecture-python-master/taskit/application/reporters/__init__.py": {},
    "clean-architecture-python-master/taskit/application/repositories/errors.py": {},
    "clean-architecture-python-master/taskit/application/repositories/project_repository.py": {
        "ProjectRepository.add": {
            "name": "add",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "taskit.application.models.project.Project"
                ]
            }
        },
        "ProjectRepository.get": {
            "name": "get",
            "location": 13,
            "return": [
                "taskit.application.models.project.Project"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "str"
                ]
            }
        },
        "ProjectRepository.update": {
            "name": "update",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "taskit.application.models.project.Project"
                ]
            }
        },
        "ProjectRepository.delete": {
            "name": "delete",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "taskit.application.models.project.Project"
                ]
            }
        },
        "MemoryProjectRepository.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryProjectRepository.add": {
            "name": "add",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "taskit.application.models.project.Project"
                ]
            }
        },
        "MemoryProjectRepository.get": {
            "name": "get",
            "location": 35,
            "return": [
                "taskit.application.models.project.Project"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "str"
                ]
            }
        },
        "MemoryProjectRepository.update": {
            "name": "update",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "taskit.application.models.project.Project"
                ]
            }
        },
        "MemoryProjectRepository.delete": {
            "name": "delete",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "taskit.application.models.project.Project"
                ]
            }
        },
        "MemoryProjectRepository.load": {
            "name": "load",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "projects_dict": [
                    "Dict[(str, taskit.application.models.project.Project)]"
                ]
            }
        }
    },
    "clean-architecture-python-master/taskit/application/repositories/task_repository.py": {
        "TaskRepository.add": {
            "name": "add",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "taskit.application.models.task.Task"
                ]
            }
        },
        "TaskRepository.get": {
            "name": "get",
            "location": 13,
            "return": [
                "taskit.application.models.task.Task"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "str"
                ]
            }
        },
        "TaskRepository.update": {
            "name": "update",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "taskit.application.models.task.Task"
                ]
            }
        },
        "TaskRepository.delete": {
            "name": "delete",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "taskit.application.models.task.Task"
                ]
            }
        },
        "MemoryTaskRepository.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryTaskRepository.add": {
            "name": "add",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "taskit.application.models.task.Task"
                ]
            }
        },
        "MemoryTaskRepository.get": {
            "name": "get",
            "location": 35,
            "return": [
                "taskit.application.models.task.Task"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "str"
                ]
            }
        },
        "MemoryTaskRepository.update": {
            "name": "update",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "taskit.application.models.task.Task"
                ]
            }
        },
        "MemoryTaskRepository.delete": {
            "name": "delete",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "taskit.application.models.task.Task"
                ]
            }
        },
        "MemoryTaskRepository.load": {
            "name": "load",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tasks_dict": [
                    "Dict[(str, taskit.application.models.task.Task)]"
                ]
            }
        }
    },
    "clean-architecture-python-master/taskit/application/repositories/__init__.py": {},
    "clean-architecture-python-master/taskit/infrastructure/__init__.py": {},
    "clean-architecture-python-master/taskit/infrastructure/cli/admin.py": {
        "admin": {
            "name": "admin",
            "location": 6,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "new": {
            "name": "new",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "str",
                    "typing.Callable[[], None]",
                    "bytes",
                    "Callable[[], None]",
                    "bool"
                ]
            }
        },
        "new_project": {
            "name": "new_project",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "obj": [
                    "int"
                ]
            }
        },
        "update": {
            "name": "update",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "update_project": {
            "name": "update_project",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "obj": [
                    "str"
                ]
            }
        },
        "update_task": {
            "name": "update_task",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "obj": [
                    "Dict[int, dict]",
                    "int",
                    "dict[int, dict[, ]]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "delete": {
            "name": "delete",
            "location": 79,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "bool",
                    "typing.Iterable[int]",
                    "Iterable[int]",
                    "T"
                ]
            }
        },
        "delete_project": {
            "name": "delete_project",
            "location": 85,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "obj": [
                    "dict",
                    "float",
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "delete_task": {
            "name": "delete_task",
            "location": 92,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "obj": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "None",
                    "int"
                ]
            }
        }
    },
    "clean-architecture-python-master/taskit/infrastructure/cli/agenda.py": {
        "agenda": {
            "name": "agenda",
            "location": 6,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "new": {
            "name": "new",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "str"
                ]
            }
        },
        "start": {
            "name": "start",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "obj": [
                    "str"
                ]
            }
        },
        "complete": {
            "name": "complete",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "obj": [
                    "float",
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        }
    },
    "clean-architecture-python-master/taskit/infrastructure/cli/report.py": {
        "report": {
            "name": "report",
            "location": 7,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "tasks": {
            "name": "tasks",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "int"
                ],
                "project_id": [
                    "str"
                ],
                "stage": [
                    "str",
                    "bool"
                ]
            }
        },
        "projects": {
            "name": "projects",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "obj": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "clean-architecture-python-master/taskit/infrastructure/cli/taskit.py": {
        "cli": {
            "name": "cli",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "State.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "admin_coordinator": [
                    "taskit.application.coordinators.admin_coordinator.AdminCoordinator"
                ],
                "agenda_coordinator": [
                    "taskit.application.coordinators.agenda_coordinator.AgendaCoordinator"
                ],
                "state_reporter": [
                    "taskit.application.reporters.state_reporter.StateReporter"
                ]
            }
        }
    },
    "clean-architecture-python-master/taskit/infrastructure/cli/__init__.py": {},
    "clean-architecture-python-master/taskit/infrastructure/data/__init__.py": {},
    "clean-architecture-python-master/taskit/infrastructure/data/json/__init__.py": {
        "json_serialize": {
            "name": "json_serialize",
            "location": 5,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "datetime.datetime",
                    "Optional[datetime.tzinfo]",
                    "str"
                ]
            }
        }
    },
    "clean-architecture-python-master/taskit/infrastructure/data/json/reporters/state_reporter.py": {
        "JsonStateReporter.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "JsonStateReporter.list_tasks": {
            "name": "list_tasks",
            "location": 10,
            "return": [
                "List[Dict[(str, str)]]"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "int",
                    "str",
                    "Callable[..., Awaitable]"
                ],
                "limit": [
                    "int",
                    "str",
                    "Callable[..., Awaitable]"
                ]
            }
        },
        "JsonStateReporter.list_tasks_in_project": {
            "name": "list_tasks_in_project",
            "location": 17,
            "return": [
                "List[Dict[(str, str)]]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ]
            }
        },
        "JsonStateReporter.list_tasks_in_stage": {
            "name": "list_tasks_in_stage",
            "location": 25,
            "return": [
                "List[Dict[(str, str)]]"
            ],
            "arguments": {
                "self": [],
                "stage": [
                    "str"
                ]
            }
        },
        "JsonStateReporter.list_projects": {
            "name": "list_projects",
            "location": 33,
            "return": [
                "List[Dict[(str, str)]]"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "int",
                    "str",
                    "Callable[..., Awaitable]"
                ],
                "limit": [
                    "int",
                    "str",
                    "Callable[..., Awaitable]"
                ]
            }
        }
    },
    "clean-architecture-python-master/taskit/infrastructure/data/json/reporters/__init__.py": {},
    "clean-architecture-python-master/taskit/infrastructure/data/json/repositories/project_repository.py": {
        "JsonProjectRepository.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "JsonProjectRepository.add": {
            "name": "add",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "taskit.application.models.project.Project"
                ]
            }
        },
        "JsonProjectRepository.get": {
            "name": "get",
            "location": 22,
            "return": [
                "taskit.application.models.project.Project"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "str"
                ]
            }
        },
        "JsonProjectRepository.update": {
            "name": "update",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "taskit.application.models.project.Project"
                ]
            }
        },
        "JsonProjectRepository.delete": {
            "name": "delete",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "taskit.application.models.project.Project"
                ]
            }
        }
    },
    "clean-architecture-python-master/taskit/infrastructure/data/json/repositories/task_repository.py": {
        "JsonTaskRepository.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "JsonTaskRepository.add": {
            "name": "add",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "taskit.application.models.task.Task"
                ]
            }
        },
        "JsonTaskRepository.get": {
            "name": "get",
            "location": 22,
            "return": [
                "taskit.application.models.task.Task"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "str"
                ]
            }
        },
        "JsonTaskRepository.update": {
            "name": "update",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "taskit.application.models.task.Task"
                ]
            }
        },
        "JsonTaskRepository.delete": {
            "name": "delete",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "taskit.application.models.task.Task"
                ]
            }
        }
    },
    "clean-architecture-python-master/taskit/infrastructure/data/json/repositories/__init__.py": {},
    "clean-architecture-python-master/tests/test_main.py": {
        "taskit_dir": {
            "name": "taskit_dir",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "tmpdir_factory": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_main": {
            "name": "test_main",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "taskit_dir": [
                    "str"
                ]
            }
        },
        "test_main_db_file_not_empty": {
            "name": "test_main_db_file_not_empty",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "taskit_dir": [
                    "str",
                    "deque[str]",
                    "typing.Deque"
                ]
            }
        },
        "test_main_exception_handling": {
            "name": "test_main_exception_handling",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "taskit_dir": [
                    "str"
                ],
                "monkeypatch": [
                    "str",
                    "Callable[[str], str]"
                ]
            }
        }
    },
    "clean-architecture-python-master/tests/__init__.py": {},
    "clean-architecture-python-master/tests/application/__init__.py": {},
    "clean-architecture-python-master/tests/application/coordinators/conftest.py": {
        "project_repository": {
            "name": "project_repository",
            "location": 11,
            "return": [
                "MemoryProjectRepository",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "task_repository": {
            "name": "task_repository",
            "location": 24,
            "return": [
                "MemoryTaskRepository",
                "bytes",
                "Dict[str, Any]",
                "daylighdb.models.Profile",
                "str",
                "viewer.models.Gallery"
            ],
            "arguments": {}
        }
    },
    "clean-architecture-python-master/tests/application/coordinators/test_admin_coordinator.py": {
        "admin_coordinator": {
            "name": "admin_coordinator",
            "location": 16,
            "return": [
                "int",
                "AdminCoordinator"
            ],
            "arguments": {
                "project_repository": [
                    "taskiapplication.repositories.project_repository.ProjectRepository",
                    "taskiapplication.repositories.task_repository.TaskRepository"
                ],
                "task_repository": [
                    "taskiapplication.repositories.project_repository.ProjectRepository",
                    "taskiapplication.repositories.task_repository.TaskRepository"
                ]
            }
        },
        "test_admin_coordinator_creation": {
            "name": "test_admin_coordinator_creation",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "admin_coordinator": [
                    "taskit.application.coordinators.admin_coordinator.AdminCoordinator"
                ]
            }
        },
        "test_admin_coordinator_create_project": {
            "name": "test_admin_coordinator_create_project",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "admin_coordinator": [
                    "taskit.application.coordinators.admin_coordinator.AdminCoordinator"
                ]
            }
        },
        "test_admin_coordinator_update_project": {
            "name": "test_admin_coordinator_update_project",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "admin_coordinator": [
                    "taskit.application.coordinators.admin_coordinator.AdminCoordinator"
                ]
            }
        },
        "test_admin_coordinator_delete_project": {
            "name": "test_admin_coordinator_delete_project",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "admin_coordinator": [
                    "taskit.application.coordinators.admin_coordinator.AdminCoordinator"
                ]
            }
        },
        "test_admin_coordinator_update_task": {
            "name": "test_admin_coordinator_update_task",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "admin_coordinator": [
                    "taskit.application.coordinators.admin_coordinator.AdminCoordinator"
                ]
            }
        },
        "test_admin_coordinator_delete_task": {
            "name": "test_admin_coordinator_delete_task",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "admin_coordinator": [
                    "taskit.application.coordinators.admin_coordinator.AdminCoordinator"
                ]
            }
        }
    },
    "clean-architecture-python-master/tests/application/coordinators/test_agenda_coordinator.py": {
        "agenda_coordinator": {
            "name": "agenda_coordinator",
            "location": 16,
            "return": [
                "int",
                "AgendaCoordinator"
            ],
            "arguments": {
                "project_repository": [
                    "taskiapplication.repositories.project_repository.ProjectRepository",
                    "taskiapplication.repositories.task_repository.TaskRepository"
                ],
                "task_repository": [
                    "taskiapplication.repositories.project_repository.ProjectRepository",
                    "taskiapplication.repositories.task_repository.TaskRepository"
                ]
            }
        },
        "test_agenda_coordinator_creation": {
            "name": "test_agenda_coordinator_creation",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "agenda_coordinator": [
                    "taskit.application.coordinators.agenda_coordinator.AgendaCoordinator"
                ]
            }
        },
        "test_aqenda_coordinator_create_task": {
            "name": "test_aqenda_coordinator_create_task",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "agenda_coordinator": [
                    "taskit.application.coordinators.agenda_coordinator.AgendaCoordinator"
                ]
            }
        },
        "test_agenda_coordinator_create_task_missing_project": {
            "name": "test_agenda_coordinator_create_task_missing_project",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "agenda_coordinator": [
                    "taskit.application.coordinators.agenda_coordinator.AgendaCoordinator"
                ]
            }
        },
        "test_agenda_coordinator_start_task": {
            "name": "test_agenda_coordinator_start_task",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "agenda_coordinator": [
                    "taskit.application.coordinators.agenda_coordinator.AgendaCoordinator"
                ]
            }
        },
        "test_agenda_coordinator_complete_task": {
            "name": "test_agenda_coordinator_complete_task",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "agenda_coordinator": [
                    "taskit.application.coordinators.agenda_coordinator.AgendaCoordinator"
                ]
            }
        }
    },
    "clean-architecture-python-master/tests/application/coordinators/test_utils.py": {
        "test_json_serialize": {
            "name": "test_json_serialize",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_json_serialize_unserializable": {
            "name": "test_json_serialize_unserializable",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "clean-architecture-python-master/tests/application/coordinators/__init__.py": {},
    "clean-architecture-python-master/tests/application/models/test_project.py": {
        "project": {
            "name": "project",
            "location": 6,
            "return": [
                "Project",
                "IO",
                "Type[Any]"
            ],
            "arguments": {}
        },
        "test_project_creation": {
            "name": "test_project_creation",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "project": [
                    "taskit.application.models.project.Project"
                ]
            }
        },
        "test_project_default_attributes": {
            "name": "test_project_default_attributes",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "project": [
                    "taskit.application.models.project.Project"
                ]
            }
        },
        "test_project_initilization_from_dict": {
            "name": "test_project_initilization_from_dict",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "clean-architecture-python-master/tests/application/models/test_task.py": {
        "task": {
            "name": "task",
            "location": 7,
            "return": [
                "Task",
                "bytes",
                "django.db.models.Model",
                "bool",
                "Dict[str, float]"
            ],
            "arguments": {}
        },
        "test_task_creation": {
            "name": "test_task_creation",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "taskit.application.models.task.Task"
                ]
            }
        },
        "test_task_default_attributes": {
            "name": "test_task_default_attributes",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "taskit.application.models.task.Task"
                ]
            }
        },
        "test_task_initilization_from_dict": {
            "name": "test_task_initilization_from_dict",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "clean-architecture-python-master/tests/application/models/__init__.py": {},
    "clean-architecture-python-master/tests/application/reporters/test_state_reporter.py": {
        "test_state_reporter_methods": {
            "name": "test_state_reporter_methods",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "clean-architecture-python-master/tests/application/reporters/__init__.py": {},
    "clean-architecture-python-master/tests/application/repositories/test_errors.py": {
        "test_entity_not_found_error": {
            "name": "test_entity_not_found_error",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "clean-architecture-python-master/tests/application/repositories/test_project_repository.py": {
        "test_project_repository_methods": {
            "name": "test_project_repository_methods",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_project_repository_memory_implementation": {
            "name": "test_project_repository_memory_implementation",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_memory_project_repository_load": {
            "name": "test_memory_project_repository_load",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "memory_project_repository": {
            "name": "memory_project_repository",
            "location": 31,
            "return": [
                "MemoryProjectRepository",
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "test_memory_project_repository_get": {
            "name": "test_memory_project_repository_get",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "memory_project_repository": [
                    "taskiinfrastructure.data.json.repositories.project_repository.JsonProjectRepository",
                    "taskiapplication.repositories.project_repository.MemoryProjectRepository",
                    "int"
                ]
            }
        },
        "test_memory_project_repository_get_not_found": {
            "name": "test_memory_project_repository_get_not_found",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "memory_project_repository": [
                    "taskiinfrastructure.data.json.repositories.project_repository.JsonProjectRepository",
                    "taskiapplication.repositories.project_repository.MemoryProjectRepository",
                    "bool"
                ]
            }
        },
        "test_memory_project_repository_add": {
            "name": "test_memory_project_repository_add",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "memory_project_repository": [
                    "taskiapplication.repositories.project_repository.MemoryProjectRepository",
                    "taskiinfrastructure.data.json.repositories.project_repository.JsonProjectRepository",
                    "models.Project",
                    "models.Category",
                    "str"
                ]
            }
        },
        "test_memory_project_repository_add_with_uid": {
            "name": "test_memory_project_repository_add_with_uid",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "memory_project_repository": [
                    "taskiapplication.repositories.project_repository.MemoryProjectRepository",
                    "taskiinfrastructure.data.json.repositories.project_repository.JsonProjectRepository",
                    "models.Project",
                    "models.Category",
                    "str"
                ]
            }
        },
        "test_memory_project_repository_update": {
            "name": "test_memory_project_repository_update",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "memory_project_repository": [
                    "taskiapplication.repositories.project_repository.MemoryProjectRepository",
                    "taskiinfrastructure.data.json.repositories.project_repository.JsonProjectRepository",
                    "models.Project",
                    "models.Category"
                ]
            }
        },
        "test_memory_project_repository_update_not_found": {
            "name": "test_memory_project_repository_update_not_found",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "memory_project_repository": [
                    "dict[str, typing.Any]",
                    "taskiapplication.repositories.project_repository.MemoryProjectRepository",
                    "Callable",
                    "taskiinfrastructure.data.json.repositories.project_repository.JsonProjectRepository",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_memory_project_repository_delete": {
            "name": "test_memory_project_repository_delete",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "memory_project_repository": [
                    "taskiapplication.repositories.project_repository.MemoryProjectRepository"
                ]
            }
        },
        "test_memory_project_repository_delete_not_found": {
            "name": "test_memory_project_repository_delete_not_found",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "memory_project_repository": [
                    "taskiapplication.repositories.project_repository.MemoryProjectRepository",
                    "app.models.Game",
                    "bool"
                ]
            }
        }
    },
    "clean-architecture-python-master/tests/application/repositories/test_task_repository.py": {
        "test_task_repository_methods": {
            "name": "test_task_repository_methods",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_task_repository_memory_implementation": {
            "name": "test_task_repository_memory_implementation",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_memory_task_repository_load": {
            "name": "test_memory_task_repository_load",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "memory_task_repository": {
            "name": "memory_task_repository",
            "location": 31,
            "return": [
                "MemoryTaskRepository",
                "str",
                "bytes",
                "List[str]",
                "excars.models.profiles.Profile",
                "viewer.models.Gallery"
            ],
            "arguments": {}
        },
        "test_memory_task_repository_get": {
            "name": "test_memory_task_repository_get",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "memory_task_repository": [
                    "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository",
                    "instark.application.managers.SubscriptionManager"
                ]
            }
        },
        "test_memory_task_repository_get_not_found": {
            "name": "test_memory_task_repository_get_not_found",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "memory_task_repository": [
                    "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository",
                    "taskiapplication.repositories.task_repository.MemoryTaskRepository"
                ]
            }
        },
        "test_memory_task_repository_add": {
            "name": "test_memory_task_repository_add",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "memory_task_repository": [
                    "taskiapplication.repositories.task_repository.MemoryTaskRepository"
                ]
            }
        },
        "test_memory_task_repository_add_with_uid": {
            "name": "test_memory_task_repository_add_with_uid",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "memory_task_repository": [
                    "taskiapplication.repositories.task_repository.MemoryTaskRepository"
                ]
            }
        },
        "test_memory_task_repository_update": {
            "name": "test_memory_task_repository_update",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "memory_task_repository": [
                    "taskiapplication.repositories.task_repository.MemoryTaskRepository",
                    "models.posting.PostingList",
                    "core_lib.core.models.Event"
                ]
            }
        },
        "test_memory_task_repository_update_not_found": {
            "name": "test_memory_task_repository_update_not_found",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "memory_task_repository": [
                    "dict[, ]",
                    "taskiapplication.repositories.task_repository.MemoryTaskRepository",
                    "dict"
                ]
            }
        },
        "test_memory_task_repository_delete": {
            "name": "test_memory_task_repository_delete",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "memory_task_repository": [
                    "taskiapplication.repositories.task_repository.MemoryTaskRepository",
                    "instark.application.managers.NotificationManager",
                    "correios.models.posting.PostingList"
                ]
            }
        },
        "test_memory_task_repository_delete_not_found": {
            "name": "test_memory_task_repository_delete_not_found",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "memory_task_repository": [
                    "taskiapplication.repositories.task_repository.MemoryTaskRepository",
                    "int"
                ]
            }
        }
    },
    "clean-architecture-python-master/tests/infrastructure/cli/conftest.py": {
        "mock_state": {
            "name": "mock_state",
            "location": 17,
            "return": [
                "Mock",
                "Iterable",
                "str"
            ],
            "arguments": {}
        },
        "state": {
            "name": "state",
            "location": 25,
            "return": [
                "State",
                "str",
                "bool"
            ],
            "arguments": {}
        }
    },
    "clean-architecture-python-master/tests/infrastructure/cli/test_admin.py": {
        "test_cli_admin_new_project": {
            "name": "test_cli_admin_new_project",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_state": [
                    "unittest.mock.Mock"
                ]
            }
        },
        "test_cli_admin_update_project": {
            "name": "test_cli_admin_update_project",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_state": [
                    "unittest.mock.Mock"
                ]
            }
        },
        "test_cli_admin_update_task": {
            "name": "test_cli_admin_update_task",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_state": [
                    "unittest.mock.Mock"
                ]
            }
        },
        "test_cli_admin_delete_project": {
            "name": "test_cli_admin_delete_project",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_state": [
                    "unittest.mock.Mock"
                ]
            }
        },
        "test_cli_admin_delete_task": {
            "name": "test_cli_admin_delete_task",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_state": [
                    "unittest.mock.Mock"
                ]
            }
        }
    },
    "clean-architecture-python-master/tests/infrastructure/cli/test_agenda.py": {
        "test_cli_agenda_new": {
            "name": "test_cli_agenda_new",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_state": [
                    "unittest.mock.Mock"
                ]
            }
        },
        "test_cli_agenda_start": {
            "name": "test_cli_agenda_start",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_state": [
                    "unittest.mock.Mock"
                ]
            }
        },
        "test_cli_agenda_complete": {
            "name": "test_cli_agenda_complete",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_state": [
                    "unittest.mock.Mock"
                ]
            }
        }
    },
    "clean-architecture-python-master/tests/infrastructure/cli/test_report.py": {
        "test_cli_report_tasks": {
            "name": "test_cli_report_tasks",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_state": [
                    "unittest.mock.Mock"
                ]
            }
        },
        "test_cli_report_tasks_in_project": {
            "name": "test_cli_report_tasks_in_project",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_state": [
                    "unittest.mock.Mock"
                ]
            }
        },
        "test_cli_report_tasks_in_stage": {
            "name": "test_cli_report_tasks_in_stage",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_state": [
                    "unittest.mock.Mock"
                ]
            }
        },
        "test_cli_report_projects": {
            "name": "test_cli_report_projects",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_state": [
                    "unittest.mock.Mock"
                ]
            }
        }
    },
    "clean-architecture-python-master/tests/infrastructure/cli/test_taskit.py": {
        "test_cli_state": {
            "name": "test_cli_state",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "state": [
                    "str"
                ]
            }
        },
        "test_cli": {
            "name": "test_cli",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "clean-architecture-python-master/tests/infrastructure/cli/__init__.py": {},
    "clean-architecture-python-master/tests/infrastructure/data/__init__.py": {},
    "clean-architecture-python-master/tests/infrastructure/data/json/conftest.py": {
        "json_file": {
            "name": "json_file",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "tmpdir_factory": [
                    "str",
                    "Set[str]",
                    "set[str]"
                ]
            }
        }
    },
    "clean-architecture-python-master/tests/infrastructure/data/json/__init__.py": {},
    "clean-architecture-python-master/tests/infrastructure/data/json/reporters/test_state_reporter.py": {
        "json_state_reporter": {
            "name": "json_state_reporter",
            "location": 9,
            "return": [
                "JsonStateReporter",
                "int",
                "Callable",
                "Sequence[str]"
            ],
            "arguments": {
                "json_file": [
                    "str"
                ]
            }
        },
        "test_json_state_reporter_creation": {
            "name": "test_json_state_reporter_creation",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "json_state_reporter": [
                    "int",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_json_state_reporter_list_tasks": {
            "name": "test_json_state_reporter_list_tasks",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "json_state_reporter": [
                    "bool"
                ]
            }
        },
        "test_json_state_reporter_list_tasks_in_project": {
            "name": "test_json_state_reporter_list_tasks_in_project",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "json_state_reporter": [
                    "Callable[[List, bool], None]",
                    "str"
                ]
            }
        },
        "test_json_state_reporter_list_tasks_in_stage": {
            "name": "test_json_state_reporter_list_tasks_in_stage",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "json_state_reporter": [
                    "Callable[[List, bool], None]",
                    "str",
                    "Dict[type, Any]"
                ]
            }
        },
        "test_json_state_reporter_list_projects": {
            "name": "test_json_state_reporter_list_projects",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "json_state_reporter": [
                    "bool"
                ]
            }
        }
    },
    "clean-architecture-python-master/tests/infrastructure/data/json/reporters/__init__.py": {},
    "clean-architecture-python-master/tests/infrastructure/data/json/repositories/test_project_repository.py": {
        "json_project_repository": {
            "name": "json_project_repository",
            "location": 11,
            "return": [
                "JsonProjectRepository",
                "str",
                "List[str]"
            ],
            "arguments": {
                "json_file": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]",
                    "Optional[int]",
                    "None",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "test_json_project_repository_creation": {
            "name": "test_json_project_repository_creation",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "json_project_repository": [
                    "taskiinfrastructure.data.json.repositories.project_repository.JsonProjectRepository",
                    "taskiapplication.repositories.project_repository.MemoryProjectRepository"
                ]
            }
        },
        "test_json_project_repository_get": {
            "name": "test_json_project_repository_get",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "json_project_repository": [
                    "taskiinfrastructure.data.json.repositories.project_repository.JsonProjectRepository",
                    "taskiapplication.repositories.project_repository.MemoryProjectRepository",
                    "int"
                ]
            }
        },
        "test_json_project_repository_get_not_found": {
            "name": "test_json_project_repository_get_not_found",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "json_project_repository": [
                    "taskiinfrastructure.data.json.repositories.project_repository.JsonProjectRepository",
                    "taskiapplication.repositories.project_repository.MemoryProjectRepository",
                    "bool"
                ]
            }
        },
        "test_json_project_repository_add": {
            "name": "test_json_project_repository_add",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "json_project_repository": [
                    "taskiinfrastructure.data.json.repositories.project_repository.JsonProjectRepository",
                    "taskiapplication.repositories.project_repository.MemoryProjectRepository",
                    "models.Project",
                    "models.Category",
                    "str"
                ]
            }
        },
        "test_json_project_repository_add_with_uid": {
            "name": "test_json_project_repository_add_with_uid",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "json_project_repository": [
                    "taskiinfrastructure.data.json.repositories.project_repository.JsonProjectRepository",
                    "taskiapplication.repositories.project_repository.MemoryProjectRepository",
                    "str",
                    "models.Project"
                ]
            }
        },
        "test_json_project_repository_update": {
            "name": "test_json_project_repository_update",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "json_project_repository": [
                    "taskiinfrastructure.data.json.repositories.project_repository.JsonProjectRepository",
                    "IO[str]"
                ]
            }
        },
        "test_json_project_repository_update_not_found": {
            "name": "test_json_project_repository_update_not_found",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "json_project_repository": [
                    "taskiinfrastructure.data.json.repositories.project_repository.JsonProjectRepository",
                    "taskiapplication.repositories.project_repository.MemoryProjectRepository",
                    "int",
                    "Callable"
                ]
            }
        },
        "test_json_project_repository_delete": {
            "name": "test_json_project_repository_delete",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "json_project_repository": [
                    "taskiinfrastructure.data.json.repositories.project_repository.JsonProjectRepository",
                    "IO[str]",
                    "str",
                    "Callable"
                ]
            }
        },
        "test_json_project_repository_delete_not_found": {
            "name": "test_json_project_repository_delete_not_found",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "json_project_repository": [
                    "taskiinfrastructure.data.json.repositories.project_repository.JsonProjectRepository",
                    "eventsourcing_helpers.models.AggregateRoot"
                ]
            }
        }
    },
    "clean-architecture-python-master/tests/infrastructure/data/json/repositories/test_task_repository.py": {
        "json_task_repository": {
            "name": "json_task_repository",
            "location": 11,
            "return": [
                "JsonTaskRepository",
                "str",
                "bytes",
                "List[str]",
                "excars.models.profiles.Profile",
                "viewer.models.Gallery"
            ],
            "arguments": {
                "json_file": [
                    "bool",
                    "str",
                    "Optional[docker.models.containers.Container]",
                    "None"
                ]
            }
        },
        "test_json_task_repository_creation": {
            "name": "test_json_task_repository_creation",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "json_task_repository": [
                    "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository",
                    "taskiapplication.repositories.task_repository.MemoryTaskRepository",
                    "core.models.MyUser"
                ]
            }
        },
        "test_json_task_repository_get": {
            "name": "test_json_task_repository_get",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "json_task_repository": [
                    "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository",
                    "instark.application.managers.SubscriptionManager"
                ]
            }
        },
        "test_json_task_repository_get_not_found": {
            "name": "test_json_task_repository_get_not_found",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "json_task_repository": [
                    "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository",
                    "taskiapplication.repositories.task_repository.MemoryTaskRepository"
                ]
            }
        },
        "test_json_task_repository_add": {
            "name": "test_json_task_repository_add",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "json_task_repository": [
                    "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository"
                ]
            }
        },
        "test_json_task_repository_add_with_uid": {
            "name": "test_json_task_repository_add_with_uid",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "json_task_repository": [
                    "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository"
                ]
            }
        },
        "test_json_task_repository_update": {
            "name": "test_json_task_repository_update",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "json_task_repository": [
                    "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository"
                ]
            }
        },
        "test_json_task_repository_update_not_found": {
            "name": "test_json_task_repository_update_not_found",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "json_task_repository": [
                    "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository"
                ]
            }
        },
        "test_json_task_repository_delete": {
            "name": "test_json_task_repository_delete",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "json_task_repository": [
                    "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository"
                ]
            }
        },
        "test_json_task_repository_delete_not_found": {
            "name": "test_json_task_repository_delete_not_found",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "json_task_repository": [
                    "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository"
                ]
            }
        }
    },
    "clean-architecture-python-master/tests/infrastructure/data/json/repositories/__init__.py": {}
}
{
    "clortho-master/src/clortho.py": {
        "get_client": {
            "name": "get_client",
            "location": 36,
            "return": [
                "Text",
                "Callable",
                "aiohttp.web.Application",
                "aiohttp.web_app.Application"
            ],
            "arguments": {
                "request": [
                    "Exception",
                    "aiohttp.web.Request"
                ]
            }
        },
        "setup_app": {
            "name": "setup_app",
            "location": 97,
            "return": [
                "aiohttp.web.Application",
                "\"App\""
            ],
            "arguments": {
                "loop": [
                    "Dict",
                    "aiohttp.web.Application"
                ]
            }
        },
        "setup_parser": {
            "name": "setup_parser",
            "location": 112,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "read_keystore": {
            "name": "read_keystore",
            "location": 120,
            "return": [
                "Dict[(str, Dict[(str, str)])]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "clean_exit": {
            "name": "clean_exit",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "signame": [
                    "str",
                    "Sequence[str]"
                ],
                "loop": [
                    "asyncio.AbstractEventLoop",
                    "int",
                    "bytes",
                    "bool",
                    "list"
                ],
                "filename": [
                    "str",
                    "Dict[str,Dict[str,str]]",
                    "Dict[str,dict[str,str]]"
                ],
                "keystore": [
                    "str",
                    "Dict[str,Dict[str,str]]",
                    "Dict[str,dict[str,str]]"
                ]
            }
        },
        "handle_usr1": {
            "name": "handle_usr1",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "List[str]",
                    "Dict[str,dict[str,str]]",
                    "Dict[str,Dict[str,str]]",
                    "List[tuple[Union[int,int]]]",
                    "List[Tuple[int,int]]",
                    "List[Tuple[int,int,int,int]]"
                ],
                "keystore": [
                    "str",
                    "List[str]",
                    "Dict[str,dict[str,str]]",
                    "Dict[str,Dict[str,str]]",
                    "List[tuple[Union[int,int]]]",
                    "List[Tuple[int,int]]",
                    "List[Tuple[int,int,int,int]]"
                ]
            }
        },
        "hourly_save_keystore": {
            "name": "hourly_save_keystore",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [
                    "str",
                    "asyncio.AbstractEventLoop",
                    "bytes",
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]"
                ],
                "filename": [
                    "str",
                    "Set[str]",
                    "Dict[str,Dict[str,str]]",
                    "bytes",
                    "Dict[str,dict[str,str]]"
                ],
                "keystore": [
                    "str",
                    "Set[str]",
                    "Dict[str,Dict[str,str]]",
                    "bytes",
                    "Dict[str,dict[str,str]]"
                ]
            }
        },
        "save_keystore": {
            "name": "save_keystore",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "os.PathLike"
                ],
                "keystore": [
                    "Dict[str,dict[str,str]]",
                    "Dict[str,Dict[str,str]]",
                    "str",
                    "Dict",
                    "Callable",
                    "Dict[str,Any]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "clortho-master/src/clortho_test.py": {
        "cli": {
            "name": "cli",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "loop": [],
                "test_client": [
                    "Callable",
                    "aiohttp.ClientSession",
                    "aiohttp.web.Application"
                ]
            }
        },
        "test_proxy_client": {
            "name": "test_proxy_client",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_client_peer": {
            "name": "test_client_peer",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_client_peer.MockTransport.get_extra_info": {
            "name": "get_extra_info",
            "location": 44,
            "return": [
                "Tuple[Union[Text,int]]",
                "List[str]",
                "str",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": [],
                "ignore": [
                    "Dict[str, Any]",
                    "bool",
                    "int"
                ]
            }
        }
    }
}
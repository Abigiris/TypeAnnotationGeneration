{
    "cloudcam-master/axis/cam_setup.py": {
        "debug": {
            "name": "debug",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "str"
                ]
            }
        },
        "CloudCam.setup": {
            "name": "setup",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CloudCam.request": {
            "name": "request",
            "location": 51,
            "return": [
                "bytes",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict",
                    "Mapping[str, Any]"
                ]
            }
        },
        "CloudCam.setNTP": {
            "name": "setNTP",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cloudcam-master/cloudcam/cognito_presignup.py": {
        "handler": {
            "name": "handler",
            "location": 15,
            "return": [
                "_T0"
            ],
            "arguments": {
                "event": [
                    "_T0"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "cloudcam-master/cloudcam/iot_attach_camera_policy.py": {
        "handler": {
            "name": "handler",
            "location": 13,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "event": [
                    "str",
                    "Optional[Callable]",
                    "Dict[str, Any]"
                ],
                "context": [
                    "dict",
                    "dict[, ]",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        }
    },
    "cloudcam-master/cloudcam/iot_attach_user_policy.py": {
        "handler": {
            "name": "handler",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "event": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "int",
                    "list[]",
                    "list",
                    "dict[, ]",
                    "logging.Logger",
                    "dict"
                ],
                "context": [
                    "T",
                    "logging.Logger"
                ]
            }
        }
    },
    "cloudcam-master/cloudcam/iot_list_things.py": {
        "thing_exists_p": {
            "name": "thing_exists_p",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "thing_name": [
                    "str"
                ]
            }
        },
        "handler": {
            "name": "handler",
            "location": 22,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "context": [
                    "dict",
                    "dict[, ]",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        }
    },
    "cloudcam-master/cloudcam/iot_provision_thing.py": {
        "handler": {
            "name": "handler",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ],
                "context": [
                    "str",
                    "Sequence",
                    "typing.Sequence[]",
                    "dict",
                    "dict[, ]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "ThingProvisioner.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "thing_name": [
                    "str"
                ],
                "cognito_identity_id": [
                    "str"
                ],
                "client_id": [
                    "str"
                ],
                "thing_type": [
                    "str"
                ]
            }
        },
        "ThingProvisioner.get_root_ca": {
            "name": "get_root_ca",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThingProvisioner.provision": {
            "name": "provision",
            "location": 85,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThingProvisioner.attach_thing_policy": {
            "name": "attach_thing_policy",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keys_and_cert": [
                    "bytes",
                    "str",
                    "Optional[bytes]",
                    "Sequence[Any]",
                    "Union[str, bytes]"
                ]
            }
        },
        "ThingProvisioner.attach_identity_policy": {
            "name": "attach_identity_policy",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThingProvisioner.generate_identity_policy": {
            "name": "generate_identity_policy",
            "location": 167,
            "return": [
                "Tuple[(Dict[(str, Any)], str)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cloudcam-master/cloudcam/iot_request_thumb.py": {
        "handler": {
            "name": "handler",
            "location": 17,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "event": [
                    "tuple[]",
                    "bytes",
                    "dict",
                    "tuple",
                    "Optional[int]",
                    "Dict[str, Any]"
                ],
                "context": [
                    "str"
                ]
            }
        },
        "gen_upload_url": {
            "name": "gen_upload_url",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "thing_name": [
                    "str"
                ]
            }
        },
        "gen_download_url": {
            "name": "gen_download_url",
            "location": 45,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "thing_name": [
                    "str"
                ]
            }
        }
    },
    "cloudcam-master/cloudcam/janus_scale_lightsail.py": {
        "get_lightsail_init_script": {
            "name": "get_lightsail_init_script",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_janus_instances": {
            "name": "get_janus_instances",
            "location": 110,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "open_instance_public_tcp_port": {
            "name": "open_instance_public_tcp_port",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "instance_name": [
                    "str",
                    "int"
                ],
                "port": [
                    "str",
                    "int"
                ]
            }
        },
        "open_instance_public_udp_port_range": {
            "name": "open_instance_public_udp_port_range",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "instance_name": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "int",
                    "Optional[List[str]]",
                    "list[str]"
                ],
                "from_port": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "int",
                    "Optional[List[str]]",
                    "list[str]"
                ],
                "to_port": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "int",
                    "Optional[List[str]]",
                    "list[str]"
                ]
            }
        },
        "get_instance_status": {
            "name": "get_instance_status",
            "location": 134,
            "return": [
                "str",
                "Optional[str]",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "instance_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "create_janus_instance": {
            "name": "create_janus_instance",
            "location": 139,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {}
        },
        "remove_health_checks": {
            "name": "remove_health_checks",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "domain_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "remove_janus_instance": {
            "name": "remove_janus_instance",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "instance_name": [
                    "str"
                ]
            }
        },
        "handler": {
            "name": "handler",
            "location": 277,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {
                "event": [
                    "dict[, ]",
                    "dict",
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "cloudcam-master/cloudcam/janus_start_stream.py": {
        "get_lightsail_public_dns_name": {
            "name": "get_lightsail_public_dns_name",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        },
        "translate_lightsail_instance": {
            "name": "translate_lightsail_instance",
            "location": 30,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "get_janus_instances": {
            "name": "get_janus_instances",
            "location": 35,
            "return": [
                "List[nothing]"
            ],
            "arguments": {}
        },
        "janus_create_session": {
            "name": "janus_create_session",
            "location": 42,
            "return": [
                "str",
                "bool",
                "Union[int, float]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "None"
                ],
                "url": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "janus_attach_plugin": {
            "name": "janus_attach_plugin",
            "location": 51,
            "return": [
                "str",
                "bool",
                "List[str]",
                "Dict[str, str]",
                "Tuple[str, str]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "Dict[str, Any]",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "session_url": [
                    "str",
                    "Dict[str, str]"
                ],
                "plugin": [
                    "str",
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "Dict[str, Any]",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "janus_send_plugin_message": {
            "name": "janus_send_plugin_message",
            "location": 62,
            "return": [
                "str",
                "dict",
                "\"DataFrame\"",
                "bytes",
                "float",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "plugin_url": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "body": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "janus_allocate_stream": {
            "name": "janus_allocate_stream",
            "location": 73,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "janus_gateway_dns_name": [
                    "str",
                    "set[str]",
                    "Set[str]",
                    "dict[, ]",
                    "dict",
                    "\"TypingContext\""
                ],
                "stream": [
                    "str",
                    "list[str]",
                    "Type['Declared']",
                    "List[str]"
                ]
            }
        },
        "handler": {
            "name": "handler",
            "location": 166,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "event": [
                    "str",
                    "Optional[Callable]",
                    "Dict[str, Any]"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "cloudcam-master/cloudcam/janus_stop_stream.py": {
        "handler": {
            "name": "handler",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "str",
                    "Optional[Callable]",
                    "Dict[str, Any]"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "cloudcam-master/cloudcam/test.py": {
        "Client.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iot_client": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "iot_data_client": [
                    "str",
                    "bool",
                    "None"
                ],
                "credentials": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "List[Dict]",
                    "list[dict[, ]]"
                ],
                "ca_path": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "privkey_path": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "cert_path": [
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "Client.init_mqtt_client": {
            "name": "init_mqtt_client",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.configure_credentials": {
            "name": "configure_credentials",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Source.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "thing_name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Source.req_thumb_update": {
            "name": "req_thumb_update",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cb": [
                    "List[List[str]]",
                    "list[list[str]]"
                ]
            }
        },
        "Source.snapshot_requested_handler": {
            "name": "snapshot_requested_handler",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [],
                "userdata": [],
                "message": [
                    "str"
                ]
            }
        },
        "TestCloudcamSource.setUp": {
            "name": "setUp",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloudcamSource.tearDown": {
            "name": "tearDown",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloudcamSource.create_test_certificate": {
            "name": "create_test_certificate",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloudcamSource.delete_test_policy": {
            "name": "delete_test_policy",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "policy_name": [
                    "typing.Text",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TestCloudcamSource.create_test_policy": {
            "name": "create_test_policy",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloudcamSource.write_temp": {
            "name": "write_temp",
            "location": 196,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TestCloudcamSource.delete_test_certificate": {
            "name": "delete_test_certificate",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloudcamSource.create_test_thing": {
            "name": "create_test_thing",
            "location": 211,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloudcamSource.assume_source_role": {
            "name": "assume_source_role",
            "location": 224,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloudcamSource.delete_test_thing": {
            "name": "delete_test_thing",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloudcamSource.test_iot_thumb": {
            "name": "test_iot_thumb",
            "location": 252,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloudcamSource.test_iot_thumb.thumb_updated": {
            "name": "thumb_updated",
            "location": 261,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "client": [
                    "int",
                    "str",
                    "bool"
                ],
                "userdata": [
                    "int",
                    "str",
                    "bool"
                ],
                "message": [
                    "str",
                    "logging.Logger",
                    "Callable",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "cloudcam-master/cloudcam/tools.py": {
        "ignore_resource_already_exists": {
            "name": "ignore_resource_already_exists",
            "location": 11,
            "return": [
                "str",
                "Optional[str]",
                "Callable[[str], T]",
                "Mapping[str, str]",
                "int"
            ],
            "arguments": {
                "method": [
                    "str",
                    "int",
                    "list",
                    "list[]"
                ]
            }
        },
        "ignore_resource_not_found": {
            "name": "ignore_resource_not_found",
            "location": 21,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]",
                "type",
                "int"
            ],
            "arguments": {
                "method": [
                    "str",
                    "int",
                    "Type[\"SerializationDialect\"]",
                    "typing.Type"
                ]
            }
        },
        "ignore_all": {
            "name": "ignore_all",
            "location": 31,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "method": [
                    "str",
                    "int",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "rand_string": {
            "name": "rand_string",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "size": [
                    "int",
                    "str",
                    "dict"
                ],
                "chars": [
                    "int",
                    "str",
                    "dict"
                ]
            }
        }
    },
    "cloudcam-master/cloudcam/__init__.py": {},
    "cloudcam-master/test/lambda.py": {
        "Client.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iot_client": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "iot_data_client": [
                    "str",
                    "bool",
                    "None"
                ],
                "credentials": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "List[Dict]",
                    "list[dict[, ]]"
                ],
                "ca_path": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "privkey_path": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "cert_path": [
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "Client.init_mqtt_client": {
            "name": "init_mqtt_client",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.configure_credentials": {
            "name": "configure_credentials",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Source.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "thing_name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Source.req_thumb_update": {
            "name": "req_thumb_update",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cb": [
                    "List[List[str]]",
                    "list[list[str]]"
                ]
            }
        },
        "Source.snapshot_requested_handler": {
            "name": "snapshot_requested_handler",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [],
                "userdata": [],
                "message": [
                    "str"
                ]
            }
        },
        "TestCloudcamSource.setUp": {
            "name": "setUp",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloudcamSource.tearDown": {
            "name": "tearDown",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloudcamSource.create_test_certificate": {
            "name": "create_test_certificate",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloudcamSource.delete_test_policy": {
            "name": "delete_test_policy",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "policy_name": [
                    "typing.Text",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TestCloudcamSource.create_test_policy": {
            "name": "create_test_policy",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloudcamSource.write_temp": {
            "name": "write_temp",
            "location": 196,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TestCloudcamSource.delete_test_certificate": {
            "name": "delete_test_certificate",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloudcamSource.create_test_thing": {
            "name": "create_test_thing",
            "location": 211,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloudcamSource.assume_source_role": {
            "name": "assume_source_role",
            "location": 224,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloudcamSource.delete_test_thing": {
            "name": "delete_test_thing",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloudcamSource.test_iot_thumb": {
            "name": "test_iot_thumb",
            "location": 252,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloudcamSource.test_iot_thumb.thumb_updated": {
            "name": "thumb_updated",
            "location": 261,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "client": [
                    "int",
                    "str",
                    "bool"
                ],
                "userdata": [
                    "int",
                    "str",
                    "bool"
                ],
                "message": [
                    "str",
                    "logging.Logger",
                    "Callable",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "cloudcam-master/test/test_client.py": {
        "rand_string": {
            "name": "rand_string",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "size": [
                    "int",
                    "str",
                    "dict"
                ],
                "chars": [
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "test_params": {
            "name": "test_params",
            "location": 64,
            "return": [
                "ClientTestParams"
            ],
            "arguments": {}
        },
        "shadow_state": {
            "name": "shadow_state",
            "location": 80,
            "return": [
                "ShadowState",
                "int",
                "Callable",
                "Sequence[str]"
            ],
            "arguments": {}
        },
        "mqtt_broker": {
            "name": "mqtt_broker",
            "location": 85,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "test_params": [
                    "bytes",
                    "int",
                    "Dict[str, Any]",
                    "float",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "on_connect": {
            "name": "on_connect",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "test_params": [
                    "str"
                ],
                "connection_event": [
                    "int",
                    "str",
                    "float",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "mqtt_client": [
                    "str"
                ],
                "userdata": [
                    "bool",
                    "Optional[int]",
                    "None"
                ],
                "flags": [
                    "bool",
                    "Optional[int]",
                    "None"
                ],
                "rc": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "on_message": {
            "name": "on_message",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "test_params": [
                    "str",
                    "bool",
                    "Optional[Set[int]]",
                    "set[int]",
                    "None"
                ],
                "shadow_state": [
                    "Dict[int, dict]",
                    "dict[int, dict[, ]]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "mqtt_client": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "int"
                ],
                "userdata": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "int"
                ],
                "msg": [
                    "str",
                    "bytes",
                    "bool",
                    "Callable[[], Any]",
                    "typing.Callable[[], typing.Any]"
                ]
            }
        },
        "mqtt_client": {
            "name": "mqtt_client",
            "location": 131,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "test_params": [
                    "bool",
                    "str"
                ],
                "mqtt_broker": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[list]",
                    "list[]",
                    "Optional[List[str]]",
                    "list[str]"
                ],
                "shadow_state": [
                    "str",
                    "Dict[str, list]",
                    "dict[str, list[]]",
                    "Any",
                    "typing.Any"
                ]
            }
        },
        "cloudcam_client": {
            "name": "cloudcam_client",
            "location": 149,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "test_params": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "mqtt_broker": [
                    "str",
                    "int",
                    "List[dict]",
                    "list[dict[, ]]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "Dict[str, List]",
                    "dict[str, list[]]"
                ],
                "gst_rtp_pipeline": [
                    "str",
                    "int",
                    "List[dict]",
                    "list[dict[, ]]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "Dict[str, List]",
                    "dict[str, list[]]"
                ]
            }
        },
        "thumbnail_upload_service": {
            "name": "thumbnail_upload_service",
            "location": 193,
            "return": [
                "",
                "typing.Generator[ThumbnailUploadService]"
            ],
            "arguments": {
                "test_params": [
                    "bool",
                    "str",
                    "dict[str, str]",
                    "int",
                    "None",
                    "Dict[str, str]",
                    "Optional[str]"
                ]
            }
        },
        "gst_rtp_pipeline": {
            "name": "gst_rtp_pipeline",
            "location": 242,
            "return": [
                "",
                "typing.Generator[GstMainLoopThread]"
            ],
            "arguments": {
                "test_params": [
                    "str",
                    "dict",
                    "int",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_cloudcam_client": {
            "name": "test_cloudcam_client",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "test_params": [
                    "List[Tuple[int, str]]",
                    "bool",
                    "list[tuple[typing.Union[int,str]]]",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "cloudcam_client": [
                    "List[Tuple[int, str]]",
                    "bool",
                    "list[tuple[typing.Union[int,str]]]",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_thumbnail_upload": {
            "name": "test_thumbnail_upload",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "test_params": [
                    "bool",
                    "int"
                ],
                "cloudcam_client": [],
                "mqtt_client": [
                    "str"
                ],
                "shadow_state": [],
                "thumbnail_upload_service": []
            }
        },
        "test_rtp_streaming": {
            "name": "test_rtp_streaming",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "test_params": [
                    "str"
                ],
                "cloudcam_client": [
                    "str"
                ],
                "mqtt_client": [
                    "str"
                ],
                "shadow_state": [
                    "str"
                ],
                "gst_rtp_pipeline": [
                    "random.Random"
                ]
            }
        },
        "ThumbnailUploadService.check_thumbnail": {
            "name": "check_thumbnail",
            "location": 177,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "ThumbnailUploadService.PUT": {
            "name": "PUT",
            "location": 187,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bool",
                    "bytes",
                    "memoryview",
                    "list",
                    "list[]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "GstMainLoopThread.run": {
            "name": "run",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GstMainLoopThread.gst_bus_call": {
            "name": "gst_bus_call",
            "location": 219,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "bus": [
                    "str",
                    "Iterable",
                    "typing.Iterable[]"
                ],
                "message": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "Callable"
                ],
                "loop": [
                    "int",
                    "str",
                    "Optional[List[str]]",
                    "list[str]",
                    "Callable",
                    "None",
                    "typing.Callable[, ]"
                ]
            }
        },
        "GstMainLoopThread.gst_new_buffer": {
            "name": "gst_new_buffer",
            "location": 230,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "sink": [
                    "str",
                    "int",
                    "bool"
                ],
                "data": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]",
                    "list",
                    "list[]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_thumbnail_upload.check_last_uploaded_thumb": {
            "name": "check_last_uploaded_thumb",
            "location": 318,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "completion_event": [
                    "dict",
                    "int"
                ],
                "value": [
                    "str",
                    "bool",
                    "dict",
                    "Dict[str, Any]",
                    "Callable",
                    "int"
                ]
            }
        }
    }
}
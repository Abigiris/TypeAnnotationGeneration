{
    "cloudie-master/setup.py": {
        "get_requirements": {
            "name": "get_requirements",
            "location": 12,
            "return": [
                "Generator[(str, Any, None)]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        }
    },
    "cloudie-master/cloudie/cli.py": {
        "cli": {
            "name": "cli",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "click.Context",
                    "Iterable[str]",
                    "None",
                    "Optional[str]"
                ],
                "config_file": [
                    "str",
                    "bool",
                    "click.Context",
                    "click.core.Context",
                    "int"
                ]
            }
        }
    },
    "cloudie-master/cloudie/compute.py": {
        "compute": {
            "name": "compute",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "list_images": {
            "name": "list_images",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "driver": [
                    "libcloud.common.base.BaseDriver",
                    "int"
                ]
            }
        },
        "list_key_pairs": {
            "name": "list_key_pairs",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "driver": [
                    "libcloud.common.base.BaseDriver",
                    "int",
                    "bytes"
                ]
            }
        },
        "list_locations": {
            "name": "list_locations",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "driver": [
                    "libcloud.common.base.BaseDriver",
                    "bool",
                    "int",
                    "bytes"
                ]
            }
        },
        "list_nodes": {
            "name": "list_nodes",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "driver": [
                    "libcloud.common.base.BaseDriver",
                    "int"
                ]
            }
        },
        "list_sizes": {
            "name": "list_sizes",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "driver": [
                    "libcloud.common.base.BaseDriver",
                    "int"
                ]
            }
        },
        "import_key_pair": {
            "name": "import_key_pair",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "driver": [
                    "libcloud.common.base.BaseDriver",
                    "int",
                    "Dict[str, str]"
                ]
            }
        },
        "delete_key_pair": {
            "name": "delete_key_pair",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "driver": [
                    "libcloud.common.base.BaseDriver",
                    "cmk.utils.type_defs.HostName",
                    "cmk.base.config.HostConfig",
                    "cmk.utils.type_defs.HostAddress",
                    "Dict[str, Any]"
                ]
            }
        },
        "destroy_node": {
            "name": "destroy_node",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "driver": [
                    "Dict[str,Any]",
                    "List",
                    "int",
                    "cmk.base.events.EventContext",
                    "utils.CWLObjectType"
                ]
            }
        },
        "create_node": {
            "name": "create_node",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "driver": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "Mapping"
                ]
            }
        },
        "_get": {
            "name": "_get",
            "location": 309,
            "return": [
                "str",
                "int",
                "bytearray",
                "bytes"
            ],
            "arguments": {
                "func": [
                    "str",
                    "List[str]",
                    "Callable[[dict],None]",
                    "Callable[dict,None]"
                ],
                "pred": [
                    "Type[object]",
                    "Tuple[int]",
                    "Type",
                    "bool"
                ],
                "no_error": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]",
                    "Optional[bool]",
                    "Callable"
                ]
            }
        },
        "_create_node_digitalocean": {
            "name": "_create_node_digitalocean",
            "location": 320,
            "return": [
                "Munch",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "driver": [
                    "Dict[str,Any]",
                    "libcloud.common.base.BaseDriver",
                    "cmk.utils.type_defs.HostAddress"
                ],
                "kwargs": []
            }
        },
        "_create_node_vultr": {
            "name": "_create_node_vultr",
            "location": 350,
            "return": [
                "Munch",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "driver": [
                    "Dict[str,dict[str,Any]]",
                    "bool",
                    "Dict[str,Dict[str,Any]]",
                    "Dict",
                    "cmk.utils.type_defs.HostAddress",
                    "cmk.utils.type_defs.HostName",
                    "libcloud.common.base.BaseDriver"
                ],
                "kwargs": []
            }
        },
        "delete_key_pair.predicate": {
            "name": "predicate",
            "location": 160,
            "return": [
                "bool",
                "str",
                "int",
                "bytes",
                "List[str]"
            ],
            "arguments": {
                "kp": [
                    "str",
                    "List[Dict[str, Any]]",
                    "Optional[str]",
                    "Optional[qutebrowser.utils.urlmatch.UrlPattern]"
                ]
            }
        }
    },
    "cloudie-master/cloudie/config.py": {
        "load": {
            "name": "load",
            "location": 91,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path"
                ],
                "dict_class": [
                    "Dict",
                    "List[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "ConfigPermission.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[,bool]",
                    "bool",
                    "List[str]",
                    "List[tuple[Union[str,str,str,str]]]",
                    "List[Tuple[str,str,str,str]]",
                    "List[Tuple[str,str,str]]"
                ]
            }
        },
        "ConfigPermission.ask": {
            "name": "ask",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigDecoder.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "permission": [
                    "Dict",
                    "Set[str]",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "dict_class": [
                    "Type[MutableMapping]",
                    "Type"
                ]
            }
        },
        "ConfigDecoder.load_value": {
            "name": "load_value",
            "location": 75,
            "return": [
                "Tuple[(Any, str)]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "Optional[Exception]",
                    "Exception",
                    "Optional[Iterable[str]]",
                    "List[str]",
                    "Iterable[str]",
                    "Optional[List[str]]"
                ],
                "strictly_valid": [
                    "bool",
                    "Optional[str]",
                    "Optional[Dict[str,Any]]",
                    "Optional[Exception]",
                    "Optional[Iterable[str]]",
                    "Iterable[str]",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "cloudie-master/cloudie/group.py": {
        "Group.invoke": {
            "name": "invoke",
            "location": 18,
            "return": [
                "str",
                "dict",
                "bool",
                "BaseException"
            ],
            "arguments": {
                "self": [],
                "ctx": []
            }
        }
    },
    "cloudie-master/cloudie/option.py": {
        "add": {
            "name": "add",
            "location": 30,
            "return": [
                "bool",
                "Dict[int, dict]",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "pass_driver": {
            "name": "pass_driver",
            "location": 37,
            "return": [
                "Optional[str]",
                "str",
                "bool",
                "Optional[bytes]"
            ],
            "arguments": {
                "driver_type": [
                    "Optional[Type[BaseException]]",
                    "Type",
                    "str",
                    "BaseException",
                    "None",
                    "Exception",
                    "Optional[BaseException]"
                ]
            }
        },
        "Option.get_default": {
            "name": "get_default",
            "location": 9,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "click.HelpFormatter",
                    "click.Context"
                ]
            }
        },
        "pass_driver.callback": {
            "name": "callback",
            "location": 42,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "click.Context",
                    "Optional[str]"
                ],
                "_param": [],
                "role": [
                    "str",
                    "click.Context",
                    "Optional[str]"
                ]
            }
        }
    },
    "cloudie-master/cloudie/security.py": {
        "NoSSH.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cloudie-master/cloudie/table.py": {
        "show": {
            "name": "show",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "columns": [
                    "int",
                    "List[List[str]]",
                    "List[str]",
                    "list"
                ],
                "rows": [
                    "List[object]",
                    "List[int]",
                    "List[list[int]]",
                    "List",
                    "List[List[int]]",
                    "bool",
                    "int"
                ]
            }
        },
        "_get_value": {
            "name": "_get_value",
            "location": 34,
            "return": [
                "bool",
                "str",
                "int",
                "Dict[str,str]",
                "List[str]",
                "List[dict[str,str]]",
                "None",
                "IO"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Dict[str,Any]"
                ],
                "name": [
                    "str"
                ],
                "default": [
                    "str",
                    "IO",
                    "None"
                ]
            }
        }
    },
    "cloudie-master/cloudie/utils.py": {
        "read_public_key": {
            "name": "read_public_key",
            "location": 8,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "f": [
                    "dict",
                    "Sequence[str]",
                    "Callable[..., T]",
                    "str"
                ]
            }
        },
        "sha256": {
            "name": "sha256",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "f": [
                    "Tuple[bytes, bytes]",
                    "memoryview"
                ]
            }
        }
    },
    "cloudie-master/cloudie/__init__.py": {},
    "cloudie-master/cloudie/__main__.py": {},
    "cloudie-master/tests/helpers.py": {
        "ClickTestCase.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClickTestCase.tearDown": {
            "name": "tearDown",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TexttableMock.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_width": [
                    "int",
                    "float"
                ]
            }
        },
        "TexttableMock.draw": {
            "name": "draw",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtendedDummyNodeDriver.list_key_pairs": {
            "name": "list_key_pairs",
            "location": 58,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtendedDummyNodeDriver.delete_key_pair": {
            "name": "delete_key_pair",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "_key_pair": [
                    "str",
                    "int",
                    "bytes",
                    "List",
                    "KT"
                ]
            }
        },
        "ExtendedDummyNodeDriver.create_node": {
            "name": "create_node",
            "location": 64,
            "return": [
                "str",
                "Mapping[str, Sequence[str]]",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DigitalOceanDummyNodeDriver.__init__": {
            "name": "__init__",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DigitalOceanDummyNodeDriver.create_key_pair": {
            "name": "create_key_pair",
            "location": 154,
            "return": [
                "Dict[(str, Union[(int, str, _T0, _T1)])]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "defaultdict",
                    "DefaultDict"
                ],
                "public_key": [
                    "Text",
                    "str",
                    "Dict[str,Any]",
                    "defaultdict"
                ]
            }
        },
        "DigitalOceanDummyNodeDriver.list_images": {
            "name": "list_images",
            "location": 166,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "DigitalOceanDummyNodeDriver.list_key_pairs": {
            "name": "list_key_pairs",
            "location": 169,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "DigitalOceanDummyNodeDriver.list_locations": {
            "name": "list_locations",
            "location": 172,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "DigitalOceanDummyNodeDriver.list_sizes": {
            "name": "list_sizes",
            "location": 175,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "DigitalOceanDummyNodeDriver.create_node": {
            "name": "create_node",
            "location": 178,
            "return": [
                "str",
                "Mapping[str, Sequence[str]]",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VultrDummyNodeDriver.__init__": {
            "name": "__init__",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VultrDummyNodeDriver.create_key_pair": {
            "name": "create_key_pair",
            "location": 273,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VultrDummyNodeDriver.create_node": {
            "name": "create_node",
            "location": 278,
            "return": [
                "str",
                "Mapping[str, Sequence[str]]",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VultrDummyNodeDriver.list_images": {
            "name": "list_images",
            "location": 282,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "VultrDummyNodeDriver.list_key_pairs": {
            "name": "list_key_pairs",
            "location": 285,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "VultrDummyNodeDriver.list_locations": {
            "name": "list_locations",
            "location": 288,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "VultrDummyNodeDriver.list_sizes": {
            "name": "list_sizes",
            "location": 291,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cloudie-master/tests/test_cli.py": {
        "TestCli.test_missing_command": {
            "name": "test_missing_command",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCli.test_invalid_config": {
            "name": "test_invalid_config",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCli.test_valid_config": {
            "name": "test_valid_config",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCli.test_invalid_config.command": {
            "name": "command",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestCli.test_valid_config.command": {
            "name": "command",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "click.Context",
                    "str"
                ]
            }
        }
    },
    "cloudie-master/tests/test_compute.py": {
        "TestCompute.setUp": {
            "name": "setUp",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompute.test_no_ssh_deploy": {
            "name": "test_no_ssh_deploy",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompute.test_list_images": {
            "name": "test_list_images",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompute.test_list_key_pairs": {
            "name": "test_list_key_pairs",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompute.test_list_locations": {
            "name": "test_list_locations",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompute.test_list_nodes": {
            "name": "test_list_nodes",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompute.test_list_sizes": {
            "name": "test_list_sizes",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDestroyNode.setUp": {
            "name": "setUp",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDestroyNode.test_success": {
            "name": "test_success",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDestroyNode.test_invalid_id": {
            "name": "test_invalid_id",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDestroyNode.test_invalid_retval": {
            "name": "test_invalid_retval",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateNode.setUp": {
            "name": "setUp",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateNode.tearDown": {
            "name": "tearDown",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateNode.test_conflicting_arguments": {
            "name": "test_conflicting_arguments",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateNode.test_missing_required_args": {
            "name": "test_missing_required_args",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateNode.test_invalid_required_args": {
            "name": "test_invalid_required_args",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateNode.test_maybe_use_config_required_args": {
            "name": "test_maybe_use_config_required_args",
            "location": 429,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateNode.test_feature_missing_ssh_key": {
            "name": "test_feature_missing_ssh_key",
            "location": 461,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateNode.test_feature_ssh_key_from_arg": {
            "name": "test_feature_ssh_key_from_arg",
            "location": 483,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateNode.test_feature_ssh_key_from_config": {
            "name": "test_feature_ssh_key_from_config",
            "location": 507,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateNode.test_feature_password_from_arg": {
            "name": "test_feature_password_from_arg",
            "location": 525,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateNode.test_feature_password_from_config": {
            "name": "test_feature_password_from_config",
            "location": 550,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateNode.test_feature_none_used": {
            "name": "test_feature_none_used",
            "location": 574,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateNode.test_unsupported_arg": {
            "name": "test_unsupported_arg",
            "location": 601,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGet.setUp": {
            "name": "setUp",
            "location": 626,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGet.test_exception": {
            "name": "test_exception",
            "location": 631,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGet.test_no_error": {
            "name": "test_no_error",
            "location": 635,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGet.test_image_by_id": {
            "name": "test_image_by_id",
            "location": 641,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGet.test_image_by_name": {
            "name": "test_image_by_name",
            "location": 645,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGet.test_location_by_id": {
            "name": "test_location_by_id",
            "location": 651,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGet.test_location_by_name": {
            "name": "test_location_by_name",
            "location": 657,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGet.test_size_by_id": {
            "name": "test_size_by_id",
            "location": 663,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGet.test_size_by_name": {
            "name": "test_size_by_name",
            "location": 667,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateNodeDigitalOcean.setUp": {
            "name": "setUp",
            "location": 677,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateNodeDigitalOcean.tearDown": {
            "name": "tearDown",
            "location": 708,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateNodeDigitalOcean.test_no_ssh_key": {
            "name": "test_no_ssh_key",
            "location": 713,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateNodeDigitalOcean.test_nonexistent_ssh_key": {
            "name": "test_nonexistent_ssh_key",
            "location": 739,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateNodeDigitalOcean.test_existing_ssh_key": {
            "name": "test_existing_ssh_key",
            "location": 766,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateNodeDigitalOcean.test_existing_ssh_key_mismatch_comment": {
            "name": "test_existing_ssh_key_mismatch_comment",
            "location": 793,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateNodeDigitalOcean.test_no_user_data": {
            "name": "test_no_user_data",
            "location": 824,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateNodeDigitalOcean.test_user_data": {
            "name": "test_user_data",
            "location": 846,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateNodeDigitalOcean.test_user_data_too_large": {
            "name": "test_user_data_too_large",
            "location": 875,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateNodeVultr.setUp": {
            "name": "setUp",
            "location": 905,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateNodeVultr.test_no_ssh_key": {
            "name": "test_no_ssh_key",
            "location": 920,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateNodeVultr.test_nonexistent_ssh_key": {
            "name": "test_nonexistent_ssh_key",
            "location": 945,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateNodeVultr.test_existing_ssh_key": {
            "name": "test_existing_ssh_key",
            "location": 977,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateNodeVultr.test_existing_ssh_key_mismatch_comment": {
            "name": "test_existing_ssh_key_mismatch_comment",
            "location": 1008,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateNodeVultr.test_no_user_data": {
            "name": "test_no_user_data",
            "location": 1039,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateNodeVultr.test_user_data": {
            "name": "test_user_data",
            "location": 1062,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateNodeVultr.test_no_script_id": {
            "name": "test_no_script_id",
            "location": 1094,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateNodeVultr.test_script_id": {
            "name": "test_script_id",
            "location": 1117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImportKeyPair.setUp": {
            "name": "setUp",
            "location": 1144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImportKeyPair.test_import_success": {
            "name": "test_import_success",
            "location": 1169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImportKeyPair.test_create_success": {
            "name": "test_create_success",
            "location": 1191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImportKeyPair.test_failure": {
            "name": "test_failure",
            "location": 1224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeleteKeyPair.setUp": {
            "name": "setUp",
            "location": 1254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeleteKeyPair.test_success": {
            "name": "test_success",
            "location": 1275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeleteKeyPair.test_fail": {
            "name": "test_fail",
            "location": 1290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeleteKeyPair.test_attribute_error": {
            "name": "test_attribute_error",
            "location": 1310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompute.test_no_ssh_deploy.command": {
            "name": "command",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "driver": [
                    "libcloud.common.base.BaseDriver",
                    "Dict[int, Dict[int, Any]]",
                    "Callable",
                    "Iterable[int]",
                    "str"
                ]
            }
        }
    },
    "cloudie-master/tests/test_config.py": {
        "TestConfigPermission.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigPermission.tearDown": {
            "name": "tearDown",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigPermission.test_missing_digest_cache": {
            "name": "test_missing_digest_cache",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigPermission.test_invalid_digest_cache": {
            "name": "test_invalid_digest_cache",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigPermission.test_valid_digest_cache": {
            "name": "test_valid_digest_cache",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigPermission.test_answer_no": {
            "name": "test_answer_no",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigPermission.test_answer_yes": {
            "name": "test_answer_yes",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigPermission.test_mkdir": {
            "name": "test_mkdir",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigDecoder.setUp": {
            "name": "setUp",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigDecoder.tearDown": {
            "name": "tearDown",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigDecoder.test_permission_denied": {
            "name": "test_permission_denied",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigDecoder.test_permission_granted": {
            "name": "test_permission_granted",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigDecoder.test_execution_failure": {
            "name": "test_execution_failure",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoad.setUp": {
            "name": "setUp",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoad.tearDown": {
            "name": "tearDown",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoad.test_file_not_found": {
            "name": "test_file_not_found",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoad.test_invalid_config": {
            "name": "test_invalid_config",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoad.test_success": {
            "name": "test_success",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cloudie-master/tests/test_group.py": {
        "TestGroup.test_not_implemented": {
            "name": "test_not_implemented",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroup.test_invalid_creds": {
            "name": "test_invalid_creds",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroup.test_http_error": {
            "name": "test_http_error",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroup.test_request_exception": {
            "name": "test_request_exception",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroup.test_implemented": {
            "name": "test_implemented",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroup.test_not_implemented.command": {
            "name": "command",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestGroup.test_invalid_creds.command": {
            "name": "command",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestGroup.test_http_error.command": {
            "name": "command",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestGroup.test_request_exception.command": {
            "name": "command",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestGroup.test_implemented.command": {
            "name": "command",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cloudie-master/tests/test_option.py": {
        "TestOption.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOption.test_file": {
            "name": "test_file",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOption.test_combination": {
            "name": "test_combination",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOption.test_missing_role": {
            "name": "test_missing_role",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAdd.test_add": {
            "name": "test_add",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestPassDriver.test_success": {
            "name": "test_success",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPassDriver.test_success_unsupported_options": {
            "name": "test_success_unsupported_options",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPassDriver.test_unspecified_role": {
            "name": "test_unspecified_role",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPassDriver.test_default_role": {
            "name": "test_default_role",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPassDriver.test_override_default_role": {
            "name": "test_override_default_role",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPassDriver.test_missing_role": {
            "name": "test_missing_role",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPassDriver.test_missing_provider": {
            "name": "test_missing_provider",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPassDriver.test_missing_key": {
            "name": "test_missing_key",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPassDriver.test_invalid_provider": {
            "name": "test_invalid_provider",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPassDriver.test_no_insecure_connection": {
            "name": "test_no_insecure_connection",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPassDriver.test_secure": {
            "name": "test_secure",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPassDriver.test_overridden_secure": {
            "name": "test_overridden_secure",
            "location": 431,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOption.test_combination.command": {
            "name": "command",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestOption.test_missing_role.command": {
            "name": "command",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestPassDriver.test_success.command": {
            "name": "command",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "driver": []
            }
        },
        "TestPassDriver.test_success_unsupported_options.command": {
            "name": "command",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "driver": []
            }
        },
        "TestPassDriver.test_unspecified_role.command": {
            "name": "command",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "_driver": []
            }
        },
        "TestPassDriver.test_default_role.command": {
            "name": "command",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "driver": []
            }
        },
        "TestPassDriver.test_override_default_role.command": {
            "name": "command",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "driver": []
            }
        },
        "TestPassDriver.test_missing_role.command": {
            "name": "command",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "_driver": []
            }
        },
        "TestPassDriver.test_missing_provider.command": {
            "name": "command",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "_driver": []
            }
        },
        "TestPassDriver.test_missing_key.command": {
            "name": "command",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "_driver": []
            }
        },
        "TestPassDriver.test_invalid_provider.command": {
            "name": "command",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "driver": []
            }
        },
        "TestPassDriver.test_no_insecure_connection.command": {
            "name": "command",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "driver": []
            }
        },
        "TestPassDriver.test_secure.command": {
            "name": "command",
            "location": 407,
            "return": [
                "None"
            ],
            "arguments": {
                "driver": []
            }
        },
        "TestPassDriver.test_overridden_secure.command": {
            "name": "command",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {
                "driver": [
                    "libcloud.common.base.BaseDriver",
                    "str"
                ]
            }
        },
        "TestOption.test_file.command": {
            "name": "command",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cloudie-master/tests/test_security.py": {
        "TestSecurity.test_connection_no_insecure": {
            "name": "test_connection_no_insecure",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSecurity.test_ssh_deploy_exception": {
            "name": "test_ssh_deploy_exception",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSecurity.test_ssh_exception": {
            "name": "test_ssh_exception",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSecurity.test_ssl_cert": {
            "name": "test_ssl_cert",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cloudie-master/tests/test_table.py": {
        "TestTable.test_values": {
            "name": "test_values",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetValue.test_values": {
            "name": "test_values",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cloudie-master/tests/test_utils.py": {
        "TestReadPublicKey.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReadPublicKey.tearDown": {
            "name": "tearDown",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReadPublicKey.test_empty_file": {
            "name": "test_empty_file",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReadPublicKey.test_missing_field": {
            "name": "test_missing_field",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReadPublicKey.test_empty_comment": {
            "name": "test_empty_comment",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReadPublicKey.test_invalid_kind": {
            "name": "test_invalid_kind",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReadPublicKey.test_invalid_data": {
            "name": "test_invalid_data",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReadPublicKey.test_success": {
            "name": "test_success",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSha256.test_success": {
            "name": "test_success",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cloudie-master/tests/__init__.py": {}
}
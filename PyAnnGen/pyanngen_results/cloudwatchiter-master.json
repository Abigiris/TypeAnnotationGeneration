{
    "cloudwatchiter-master/setup.py": {
        "long_description": {
            "name": "long_description",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "requirements": {
            "name": "requirements",
            "location": 10,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "fuse": {
            "name": "fuse",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "lst": [
                    "str",
                    "bytes",
                    "bool",
                    "Optional[str]"
                ]
            }
        }
    },
    "cloudwatchiter-master/cloudwatchiter/abc_expression.py": {
        "AbstractExpression.element_count": {
            "name": "element_count",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Optional[dict]",
                    "Dict",
                    "Optional[Callable[[dict],None]]",
                    "None",
                    "Callable[dict,None]"
                ]
            }
        },
        "AbstractExpression.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expression": [
                    "str",
                    "bool",
                    "Dict[str,List[bytes]]",
                    "Dict[str,list[bytes]]"
                ]
            }
        },
        "AbstractExpression.validate_type": {
            "name": "validate_type",
            "location": 31,
            "return": [
                "str",
                "Type",
                "Mapping",
                "bool",
                "Dict[str,Any]",
                "Iterator",
                "int"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[AbstractExpression]"
                ],
                "typestr": [
                    "str",
                    "Type",
                    "Mapping[Any,Any]",
                    "Mapping"
                ]
            }
        },
        "AbstractExpression.validate_elements": {
            "name": "validate_elements",
            "location": 38,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "list",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[AbstractExpression]"
                ],
                "elements": [
                    "List[str]",
                    "bytes",
                    "list",
                    "List[\"Issue\"]",
                    "List[T]",
                    "int",
                    "bool",
                    "List[OrderedDict]"
                ]
            }
        },
        "AbstractExpression.get_next": {
            "name": "get_next",
            "location": 48,
            "return": [
                "List[datetime.datetime]",
                "None"
            ],
            "arguments": {
                "self": [],
                "count": [
                    "int",
                    "float"
                ],
                "start": [
                    "int",
                    "float"
                ]
            }
        },
        "AbstractExpression.get_previous": {
            "name": "get_previous",
            "location": 53,
            "return": [
                "List[datetime.datetime]",
                "None"
            ],
            "arguments": {
                "self": [],
                "count": [
                    "int",
                    "float"
                ],
                "start": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "cloudwatchiter-master/cloudwatchiter/cloudwatchiter.py": {
        "cloudwatchiter": {
            "name": "cloudwatchiter",
            "location": 8,
            "return": [
                "Union[(cloudwatchiter.cron.Cron, cloudwatchiter.rate.Rate)]"
            ],
            "arguments": {
                "expression": [
                    "str"
                ]
            }
        }
    },
    "cloudwatchiter-master/cloudwatchiter/cron.py": {
        "Cron.get_next": {
            "name": "get_next",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "count": [
                    "int",
                    "float"
                ],
                "start": [
                    "int",
                    "float"
                ]
            }
        },
        "Cron.get_previous": {
            "name": "get_previous",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "count": [
                    "int",
                    "float"
                ],
                "start": [
                    "int",
                    "float"
                ]
            }
        },
        "Cron.minutes": {
            "name": "minutes",
            "location": 26,
            "return": [
                "str",
                "Iterable[str]",
                "Dict[str, Any]",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cron.hours": {
            "name": "hours",
            "location": 31,
            "return": [
                "str",
                "Iterable[str]",
                "Dict[str, Any]",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cron.day": {
            "name": "day",
            "location": 36,
            "return": [
                "bool",
                "Iterable[str]",
                "Dict[str, Any]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cron.month": {
            "name": "month",
            "location": 41,
            "return": [
                "str",
                "Iterable[str]",
                "Dict[str, Any]",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cron.day_of_week": {
            "name": "day_of_week",
            "location": 46,
            "return": [
                "Dict[str, Any]",
                "bool",
                "Iterable[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cron.year": {
            "name": "year",
            "location": 51,
            "return": [
                "str",
                "Iterable[str]",
                "Dict[str, Any]",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cloudwatchiter-master/cloudwatchiter/rate.py": {
        "Rate.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rate.get_next": {
            "name": "get_next",
            "location": 30,
            "return": [
                "Optional[str]",
                "str",
                "Dict[str, Dict[str, Any]]",
                "Set[str]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "count": [
                    "int",
                    "Optional[int]"
                ],
                "start": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "Rate.get_previous": {
            "name": "get_previous",
            "location": 34,
            "return": [
                "Optional[str]",
                "str",
                "Dict[str, Dict[str, Any]]",
                "Set[str]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "count": [
                    "int",
                    "Sequence[int]",
                    "datetime.datetime"
                ],
                "start": [
                    "int",
                    "Sequence[int]",
                    "datetime.datetime"
                ]
            }
        },
        "Rate._get_range": {
            "name": "_get_range",
            "location": 38,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "count": [
                    "int",
                    "Union[float,int]",
                    "str",
                    "float",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ],
                "start": [
                    "int",
                    "float",
                    "None",
                    "Optional[int]",
                    "bool"
                ],
                "forward": [
                    "bool",
                    "int",
                    "List",
                    "Set"
                ]
            }
        },
        "Rate._get_timedelta": {
            "name": "_get_timedelta",
            "location": 54,
            "return": [
                "_datetime.timedelta"
            ],
            "arguments": {
                "self": [],
                "quantity": [
                    "int",
                    "str",
                    "bool"
                ],
                "forward": [
                    "bool",
                    "str",
                    "T",
                    "Dict"
                ]
            }
        },
        "Rate._get_unit_floor": {
            "name": "_get_unit_floor",
            "location": 69,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rate._validate_unit": {
            "name": "_validate_unit",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rate._validate_value": {
            "name": "_validate_value",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rate.value": {
            "name": "value",
            "location": 111,
            "return": [
                "Iterable[str]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rate.unit": {
            "name": "unit",
            "location": 116,
            "return": [
                "str",
                "Iterable[str]",
                "Dict[str, Any]",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cloudwatchiter-master/cloudwatchiter/__init__.py": {},
    "cloudwatchiter-master/cloudwatchiter/tests/abc_expression_test.py": {
        "abc": {
            "name": "abc",
            "location": 6,
            "return": [
                "str",
                "Dict[str,Any]",
                "bool",
                "Callable[[str],T]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_invalid_init": {
            "name": "test_invalid_init",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cron_init": {
            "name": "test_cron_init",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rate_init": {
            "name": "test_rate_init",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalidate_elements": {
            "name": "test_invalidate_elements",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_elements": {
            "name": "test_validate_elements",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_elements": {
            "name": "test_elements",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cloudwatchiter-master/cloudwatchiter/tests/cron_test.py": {
        "test_invalid_elements": {
            "name": "test_invalid_elements",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_type": {
            "name": "test_invalid_type",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_valid_elements": {
            "name": "test_valid_elements",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_element_split": {
            "name": "test_element_split",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_minutes": {
            "name": "test_minutes",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_hours": {
            "name": "test_hours",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_day": {
            "name": "test_day",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_month": {
            "name": "test_month",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_day_of_week": {
            "name": "test_day_of_week",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_year": {
            "name": "test_year",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cloudwatchiter-master/cloudwatchiter/tests/rate_test.py": {
        "test_invalid_elements": {
            "name": "test_invalid_elements",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_type": {
            "name": "test_invalid_type",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_valid_elements": {
            "name": "test_valid_elements",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_element_split": {
            "name": "test_element_split",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_element_values": {
            "name": "test_element_values",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_units": {
            "name": "test_invalid_units",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_valid_units": {
            "name": "test_valid_units",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_value": {
            "name": "test_invalid_value",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_valid_value": {
            "name": "test_valid_value",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_minute_floor": {
            "name": "test_minute_floor",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_hour_floor": {
            "name": "test_hour_floor",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_day_floor": {
            "name": "test_day_floor",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_day": {
            "name": "test_day",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_day": {
            "name": "test_invalid_day",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_days_slice": {
            "name": "test_days_slice",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_hours_back_slice": {
            "name": "test_hours_back_slice",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_minute_back": {
            "name": "test_minute_back",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
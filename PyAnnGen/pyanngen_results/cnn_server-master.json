{
    "cnn_server-master/cnn_server/server.py": {},
    "cnn_server-master/cnn_server/__init__.py": {},
    "cnn_server-master/cnn_server/classification/classification_receive_handler.py": {
        "handle_post": {
            "name": "handle_post",
            "location": 18,
            "return": [
                "Tuple[(str, int)]"
            ],
            "arguments": {
                "bot_id": [
                    "str",
                    "float",
                    "Optional[Mapping[str,Any]]",
                    "Mapping",
                    "None"
                ],
                "image": [
                    "str",
                    "float",
                    "Optional[Mapping[str,Any]]",
                    "Mapping",
                    "None"
                ],
                "return_labels": [
                    "str",
                    "float",
                    "None",
                    "Optional[Mapping[str,Any]]",
                    "Mapping"
                ]
            }
        },
        "ClassificationResult.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "str",
                    "bool",
                    "List[List[Any]]",
                    "List[list[Any]]",
                    "Optional[str]",
                    "None"
                ],
                "probabilities": [
                    "str",
                    "bool",
                    "List[List[Any]]",
                    "List[list[Any]]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "ClassificationResult.to_json": {
            "name": "to_json",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cnn_server-master/cnn_server/classification/classification_service.py": {
        "classify_image": {
            "name": "classify_image",
            "location": 8,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "bot_id": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "image": [
                    "str"
                ],
                "return_labels": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]"
                ]
            }
        }
    },
    "cnn_server-master/cnn_server/classification/Classifier.py": {
        "Classifier.post": {
            "name": "post",
            "location": 8,
            "return": [
                "Tuple[(str, int)]"
            ],
            "arguments": {
                "self": [],
                "bot_id": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "cnn_server-master/cnn_server/classification/__init__.py": {},
    "cnn_server-master/cnn_server/server/file_service.py": {
        "folder_name": {
            "name": "folder_name",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "bot_id": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "_create_if_not_exists": {
            "name": "_create_if_not_exists",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "get_training_data_dir": {
            "name": "get_training_data_dir",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "bot_id": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "get_transfer_setting_dir": {
            "name": "get_transfer_setting_dir",
            "location": 38,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "transfer_setting": [
                    "str"
                ]
            }
        },
        "get_transfer_data_dir": {
            "name": "get_transfer_data_dir",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "bot_id": [
                    "str"
                ],
                "transfer_setting": [
                    "str"
                ]
            }
        },
        "get_transfer_proto_dir": {
            "name": "get_transfer_proto_dir",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "bot_id": [
                    "str"
                ],
                "transfer_setting": [
                    "str"
                ]
            }
        },
        "get_transfer_model_dir": {
            "name": "get_transfer_model_dir",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "bot_id": [
                    "str"
                ],
                "transfer_setting": [
                    "str"
                ],
                "suffix": [
                    "str",
                    "Text"
                ]
            }
        },
        "get_readme_file": {
            "name": "get_readme_file",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "transfer_setting": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "get_protobuf_dir": {
            "name": "get_protobuf_dir",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "bot_id": [
                    "str",
                    "int"
                ]
            }
        },
        "get_model_data_dir": {
            "name": "get_model_data_dir",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "bot_id": [
                    "str",
                    "int"
                ]
            }
        },
        "get_performance_data_dir": {
            "name": "get_performance_data_dir",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "bot_id": [
                    "str",
                    "int"
                ]
            }
        },
        "get_root_model_dir": {
            "name": "get_root_model_dir",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_imagenet_model_dir": {
            "name": "get_imagenet_model_dir",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_root_model_ckpt_path": {
            "name": "get_root_model_ckpt_path",
            "location": 84,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "model_name": [
                    "str"
                ]
            }
        },
        "get_test_root_model_dir": {
            "name": "get_test_root_model_dir",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_dataset_dir": {
            "name": "get_dataset_dir",
            "location": 98,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_dataset_train_dir": {
            "name": "get_dataset_train_dir",
            "location": 102,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_dataset_transfer_dir": {
            "name": "get_dataset_transfer_dir",
            "location": 106,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_root_model_training_file": {
            "name": "get_root_model_training_file",
            "location": 110,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_transfer_learning_file": {
            "name": "get_transfer_learning_file",
            "location": 114,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "dataset_name": [
                    "str"
                ]
            }
        },
        "get_transfer_learning_sample_file": {
            "name": "get_transfer_learning_sample_file",
            "location": 132,
            "return": [
                "str"
            ],
            "arguments": {
                "sample_name": [
                    "bool",
                    "str"
                ]
            }
        },
        "get_test_training_file": {
            "name": "get_test_training_file",
            "location": 143,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_bot_id_from_dir": {
            "name": "get_bot_id_from_dir",
            "location": 147,
            "return": [
                "str"
            ],
            "arguments": {
                "dir_name": [
                    "str"
                ]
            }
        },
        "get_setting_id_from_dir": {
            "name": "get_setting_id_from_dir",
            "location": 151,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "dir_name": [
                    "str"
                ]
            }
        },
        "get_inference_data_dir": {
            "name": "get_inference_data_dir",
            "location": 160,
            "return": [
                "str"
            ],
            "arguments": {
                "bot_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "persist_image": {
            "name": "persist_image",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ],
                "base64_image": [
                    "str"
                ]
            }
        }
    },
    "cnn_server-master/cnn_server/server/Server.py": {
        "Server.get": {
            "name": "get",
            "location": 5,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cnn_server-master/cnn_server/server/__init__.py": {},
    "cnn_server-master/cnn_server/test/test_classification_receive_handler.py": {
        "TestClassification_receive_handler.test_handle_post": {
            "name": "test_handle_post",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cnn_server-master/cnn_server/test/test_classification_service.py": {
        "TestClassificationService.test_classify_image": {
            "name": "test_classify_image",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cnn_server-master/cnn_server/test/test_server.py": {
        "TestServer.test_get_root_model_dir": {
            "name": "test_get_root_model_dir",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServer.test_get_root_model_ckpt_path": {
            "name": "test_get_root_model_ckpt_path",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServer.test_get_datasets": {
            "name": "test_get_datasets",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServer.test_get_bot_id_from_dir": {
            "name": "test_get_bot_id_from_dir",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cnn_server-master/cnn_server/test/test_slim_convert_to_protobuf.py": {
        "TestConvertToProtobuf.test_get_filenames_and_classes": {
            "name": "test_get_filenames_and_classes",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConvertToProtobuf.test_run": {
            "name": "test_run",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cnn_server-master/cnn_server/test/test_slim_datasets.py": {
        "TestSlimDatasets.test_get_split_size": {
            "name": "test_get_split_size",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSlimDatasets.test_get_number_of_classes": {
            "name": "test_get_number_of_classes",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSlimDatasets.test_bot_dataset": {
            "name": "test_bot_dataset",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSlimDatasets.test_dataset_factory": {
            "name": "test_dataset_factory",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSlimDatasets.test_download_training_data": {
            "name": "test_download_training_data",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cnn_server-master/cnn_server/test/test_slim_inference.py": {
        "TestInference.test_map_predictions_to_labels": {
            "name": "test_map_predictions_to_labels",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInference.test_inference_on_image": {
            "name": "test_inference_on_image",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cnn_server-master/cnn_server/test/test_slim_transfer_learning.py": {
        "TestTransferLearningImageClassifier.test_transfer_learning": {
            "name": "test_transfer_learning",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cnn_server-master/cnn_server/test/test_training_data_receive_handler.py": {
        "TestTrainingDataReceiveHandler.test_handle_put": {
            "name": "test_handle_put",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cnn_server-master/cnn_server/test/test_training_data_service.py": {
        "TestTrainingDatService.test_validate_training_data": {
            "name": "test_validate_training_data",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTrainingDatService.test_create_training_data_dir": {
            "name": "test_create_training_data_dir",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTrainingDatService.test_write_to_protobuffer": {
            "name": "test_write_to_protobuffer",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cnn_server-master/cnn_server/test/test_train_root_models.py": {},
    "cnn_server-master/cnn_server/test/test_transfer_learning_receive_handler.py": {
        "TestTransferLearningReceiveHandler.test_train": {
            "name": "test_train",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cnn_server-master/cnn_server/test/test_transfer_learning_service.py": {
        "TestTransferLearningService.test_train": {
            "name": "test_train",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cnn_server-master/cnn_server/test/__init__.py": {},
    "cnn_server-master/cnn_server/training_data/TrainingData.py": {
        "TrainingData.put": {
            "name": "put",
            "location": 12,
            "return": [
                "Tuple[(str, int)]"
            ],
            "arguments": {
                "self": [],
                "bot_id": [
                    "int",
                    "str"
                ]
            }
        },
        "TrainingData.delete": {
            "name": "delete",
            "location": 32,
            "return": [
                "Optional[Tuple[(str, int)]]"
            ],
            "arguments": {
                "self": [],
                "bot_id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "cnn_server-master/cnn_server/training_data/training_data_receive_handler.py": {
        "handle_put": {
            "name": "handle_put",
            "location": 10,
            "return": [
                "Tuple[(str, int)]"
            ],
            "arguments": {
                "bot_id": [
                    "int",
                    "str",
                    "List[str]",
                    "bool",
                    "None",
                    "Optional[str]"
                ],
                "training_data_file": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "handle_delete": {
            "name": "handle_delete",
            "location": 30,
            "return": [
                "Tuple[(str, int)]"
            ],
            "arguments": {
                "bot_id": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "cnn_server-master/cnn_server/training_data/training_data_service.py": {
        "validate_training_data": {
            "name": "validate_training_data",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "file": [
                    "BinaryIO"
                ]
            }
        },
        "create_training_data_dir": {
            "name": "create_training_data_dir",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "bot_id": [
                    "str",
                    "bool",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "training_data_file": [
                    "str",
                    "TextIO",
                    "Optional[str]",
                    "BinaryIO",
                    "None",
                    "bool"
                ]
            }
        },
        "write_to_protobuffer": {
            "name": "write_to_protobuffer",
            "location": 83,
            "return": [
                "bool"
            ],
            "arguments": {
                "bot_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "delete_bot_data": {
            "name": "delete_bot_data",
            "location": 104,
            "return": [
                "Tuple[(str, int)]"
            ],
            "arguments": {
                "bot_id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "cnn_server-master/cnn_server/training_data/__init__.py": {},
    "cnn_server-master/cnn_server/transfer_learning/TransferLearning.py": {
        "TransferLearning.put": {
            "name": "put",
            "location": 12,
            "return": [
                "Tuple[(str, int)]"
            ],
            "arguments": {
                "self": [],
                "bot_id": [
                    "int",
                    "str",
                    "None",
                    "Optional[int]",
                    "bool",
                    "Union[str,int]"
                ]
            }
        }
    },
    "cnn_server-master/cnn_server/transfer_learning/transfer_learning_receive_handler.py": {
        "handle_put": {
            "name": "handle_put",
            "location": 8,
            "return": [
                "Tuple[(str, int)]"
            ],
            "arguments": {
                "bot_id": [
                    "int",
                    "float",
                    "str"
                ],
                "test": [
                    "bool",
                    "int",
                    "float",
                    "str"
                ],
                "max_train_time": [
                    "int",
                    "float",
                    "None",
                    "str"
                ]
            }
        }
    },
    "cnn_server-master/cnn_server/transfer_learning/transfer_learning_service.py": {
        "train": {
            "name": "train",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "bot_id": [
                    "str",
                    "Union[None,int,float]",
                    "None",
                    "bool",
                    "int",
                    "Optional[str]",
                    "float"
                ],
                "test": [
                    "bool",
                    "int",
                    "List[str]"
                ],
                "max_train_time": [
                    "str",
                    "bool",
                    "None",
                    "Dict"
                ]
            }
        }
    },
    "cnn_server-master/cnn_server/transfer_learning/__init__.py": {},
    "cnn_server-master/slim/convert_all_trainingsets.py": {
        "_check_training_dir": {
            "name": "_check_training_dir",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "tr_dir": [
                    "str",
                    "bool"
                ]
            }
        },
        "_check_proto_dir": {
            "name": "_check_proto_dir",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "pr_dir": [
                    "str",
                    "bool"
                ]
            }
        },
        "_convert": {
            "name": "_convert",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "bot_id": [
                    "int",
                    "str"
                ]
            }
        },
        "convert_all_trainingsets": {
            "name": "convert_all_trainingsets",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cnn_server-master/slim/eval_image_classifier.py": {
        "_check_dir": {
            "name": "_check_dir",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "dir_path": [
                    "str"
                ]
            }
        },
        "eval": {
            "name": "eval",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "bot_id": [
                    "str",
                    "float",
                    "Optional[Set[int]]",
                    "Optional[str]",
                    "int",
                    "Optional[int]"
                ],
                "bot_suffix": [
                    "Text",
                    "int",
                    "List[int]",
                    "str"
                ],
                "setting_id": [
                    "bool",
                    "None",
                    "str",
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "List[Any]"
                ],
                "validation_setting": [
                    "int",
                    "str",
                    "bool",
                    "Type"
                ],
                "dataset_split": [
                    "Text",
                    "Optional[bool]",
                    "Optional[str]",
                    "int",
                    "str"
                ],
                "dataset_name": [
                    "Text",
                    "Optional[bool]",
                    "Optional[str]",
                    "int",
                    "str"
                ],
                "model_name": [
                    "Text",
                    "str",
                    "int",
                    "float"
                ],
                "preprocessing": [
                    "bool",
                    "None",
                    "Tuple[str,str]",
                    "str",
                    "List",
                    "int",
                    "Tuple[Union[str,str]]"
                ],
                "moving_average_decay": [
                    "int",
                    "None",
                    "str",
                    "float",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "tf_master": [
                    "Text",
                    "str",
                    "int",
                    "Dict",
                    "Optional[str]"
                ]
            }
        }
    },
    "cnn_server-master/slim/inference_image_classifier.py": {
        "map_predictions_to_labels": {
            "name": "map_predictions_to_labels",
            "location": 15,
            "return": [
                "Tuple[(list, Any)]"
            ],
            "arguments": {
                "protobuf_dir": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "predictions": [
                    "bool",
                    "dict",
                    "List[str]",
                    "str"
                ],
                "return_labels": [
                    "bool",
                    "Dict",
                    "str",
                    "List[str]"
                ]
            }
        },
        "inference_on_image": {
            "name": "inference_on_image",
            "location": 39,
            "return": [
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "bot_id": [
                    "str",
                    "bool",
                    "Dict"
                ],
                "image_file": [
                    "str",
                    "bool",
                    "Dict"
                ],
                "network_name": [
                    "Text",
                    "str",
                    "bool",
                    "Dict"
                ],
                "return_labels": [
                    "str",
                    "bool",
                    "None",
                    "Dict"
                ]
            }
        },
        "infere": {
            "name": "infere",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "bot_id": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "image_file": [
                    "str",
                    "List[str]"
                ],
                "network_name": [
                    "Text",
                    "str",
                    "Optional[int]",
                    "bool"
                ],
                "return_labels": [
                    "Optional[dict]",
                    "None",
                    "Callable",
                    "str",
                    "Dict",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]"
                ],
                "prediction_dict": [
                    "List",
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        }
    },
    "cnn_server-master/slim/train_root_model.py": {
        "train": {
            "name": "train",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cnn_server-master/slim/transfer_image_classifier.py": {
        "_configure_learning_rate": {
            "name": "_configure_learning_rate",
            "location": 107,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "num_samples_per_epoch": [
                    "int",
                    "Optional[int]"
                ],
                "global_step": []
            }
        },
        "_configure_optimizer": {
            "name": "_configure_optimizer",
            "location": 142,
            "return": [
                "int",
                "Callable",
                "str",
                "Dict",
                "List[int]",
                "List[list[int]]"
            ],
            "arguments": {
                "learning_rate": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_get_init_fn": {
            "name": "_get_init_fn",
            "location": 189,
            "return": [
                "None",
                "Optional[str]",
                "Optional[int]",
                "Optional[Literal[only_clustered,include_clustered]]",
                "bool",
                "Dict"
            ],
            "arguments": {
                "root_model_dir": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "bot_model_dir": [
                    "str",
                    "Sequence[str]"
                ],
                "checkpoint_exclude_scopes": [
                    "str"
                ]
            }
        },
        "_get_variables_to_train": {
            "name": "_get_variables_to_train",
            "location": 231,
            "return": [
                "List",
                "bool",
                "str",
                "Type",
                "Optional[List[str]]",
                "Optional[str]"
            ],
            "arguments": {
                "trainable_scopes": []
            }
        },
        "_train_step_kwargs": {
            "name": "_train_step_kwargs",
            "location": 249,
            "return": [
                "Dict[(str, Union[(float, _T0, _T1, _T2, _T3, _T4)])]"
            ],
            "arguments": {
                "logdir": [
                    "bool",
                    "str",
                    "int"
                ],
                "max_train_time_seconds": [
                    "int",
                    "bool",
                    "float"
                ],
                "should_log": [
                    "bool",
                    "int",
                    "str"
                ],
                "log_every_n_steps": [
                    "int",
                    "Dict",
                    "bytes",
                    "str"
                ],
                "should_trace": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "train_step": {
            "name": "train_step",
            "location": 273,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "sess": [
                    "Any",
                    "Optional[Any]",
                    "str",
                    "None",
                    "bool",
                    "pandas.core.frame.DataFrame",
                    "int"
                ],
                "train_op": [
                    "str",
                    "int",
                    "bytes",
                    "Union[int,float]",
                    "float"
                ],
                "global_step": [
                    "str",
                    "int",
                    "bytes",
                    "Union[int,float]",
                    "float"
                ],
                "train_step_kwargs": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "transfer_learning": {
            "name": "transfer_learning",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "root_model_dir": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "bot_model_dir": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "protobuf_dir": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "model_name": [
                    "Text",
                    "str",
                    "Optional[str]"
                ],
                "dataset_split_name": [
                    "Text",
                    "str",
                    "Optional[str]"
                ],
                "dataset_name": [
                    "Text",
                    "str",
                    "Optional[str]"
                ],
                "checkpoint_exclude_scopes": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "trainable_scopes": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "max_train_time_sec": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "max_number_of_steps": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "log_every_n_steps": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "save_summaries_secs": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "optimization_params": [
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "run_transfer_learning": {
            "name": "run_transfer_learning",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {
                "root_model_dir": [
                    "str",
                    "bytes",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "bot_model_dir": [
                    "str",
                    "bytes",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "protobuf_dir": [
                    "bool",
                    "str",
                    "List[str]",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "model_name": [
                    "Text",
                    "bool",
                    "str",
                    "List[str]",
                    "List[Dict[str,Any]]"
                ],
                "dataset_split_name": [
                    "Text",
                    "bool",
                    "str",
                    "List[str]",
                    "List[Dict[str,Any]]"
                ],
                "dataset_name": [
                    "Text",
                    "bool",
                    "str",
                    "List[str]",
                    "List[Dict[str,Any]]"
                ],
                "checkpoint_exclude_scopes": [
                    "str",
                    "None",
                    "bytes",
                    "bool",
                    "Optional[str]"
                ],
                "trainable_scopes": [
                    "str",
                    "None",
                    "Optional[int]",
                    "int",
                    "Callable[float,bool]",
                    "Optional[str]",
                    "Optional[bool]",
                    "bool",
                    "Callable[[float],bool]"
                ],
                "max_train_time_sec": [
                    "str",
                    "None",
                    "bytes",
                    "bool",
                    "Optional[str]"
                ],
                "max_number_of_steps": [
                    "bool",
                    "None",
                    "str",
                    "List[str]",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "log_every_n_steps": [
                    "str",
                    "None",
                    "bytes",
                    "bool",
                    "Optional[str]"
                ],
                "save_summaries_secs": [
                    "str",
                    "None",
                    "bytes",
                    "bool",
                    "Optional[str]"
                ],
                "optimization_params": [
                    "bool",
                    "None",
                    "str",
                    "List[str]",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "train": {
            "name": "train",
            "location": 601,
            "return": [
                "None"
            ],
            "arguments": {
                "bot_model_dir": [
                    "str"
                ],
                "protobuf_dir": [
                    "str"
                ],
                "root_model_dir": [
                    "str",
                    "None"
                ],
                "model_name": [
                    "str",
                    "Text"
                ],
                "dataset_split_name": [
                    "str",
                    "Text"
                ],
                "dataset_name": [
                    "str",
                    "Text"
                ],
                "max_train_time_sec": [
                    "str",
                    "None"
                ],
                "max_number_of_steps": [
                    "str",
                    "None"
                ],
                "log_every_n_steps": [
                    "str",
                    "None"
                ],
                "save_summaries_secs": [
                    "str",
                    "None"
                ],
                "optimization_params": [
                    "str",
                    "None"
                ]
            }
        },
        "run_transfer_learning.clone_fn": {
            "name": "clone_fn",
            "location": 474,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "batch_queue": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "cnn_server-master/slim/__init__.py": {},
    "cnn_server-master/slim/datasets/bot_dataset.py": {
        "get_split": {
            "name": "get_split",
            "location": 43,
            "return": [
                "str",
                "Callable[[str], None]"
            ],
            "arguments": {
                "split_name": [
                    "str",
                    "int"
                ],
                "dataset_dir": [
                    "str",
                    "Dict",
                    "Tuple"
                ],
                "file_pattern": [
                    "str"
                ],
                "reader": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Optional[Callable]",
                    "Callable"
                ]
            }
        }
    },
    "cnn_server-master/slim/datasets/cifar10.py": {
        "get_split": {
            "name": "get_split",
            "location": 44,
            "return": [
                "str",
                "Callable[[str], None]"
            ],
            "arguments": {
                "split_name": [
                    "str"
                ],
                "dataset_dir": [
                    "str"
                ],
                "file_pattern": [
                    "str"
                ],
                "reader": [
                    "str",
                    "None",
                    "bool",
                    "Dict[str,str]",
                    "os.PathLike",
                    "Optional[str]",
                    "int"
                ]
            }
        }
    },
    "cnn_server-master/slim/datasets/convert_resnet_dataset.py": {
        "_check_training_dir": {
            "name": "_check_training_dir",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {
                "tr_dir": [
                    "str",
                    "bool"
                ]
            }
        },
        "_check_proto_dir": {
            "name": "_check_proto_dir",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "pr_dir": [
                    "str",
                    "bool"
                ]
            }
        },
        "convert": {
            "name": "convert",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "bot_id": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "cnn_server-master/slim/datasets/convert_tf_settings.py": {
        "_check_training_dir": {
            "name": "_check_training_dir",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "tr_dir": [
                    "str",
                    "bool"
                ]
            }
        },
        "_check_proto_dir": {
            "name": "_check_proto_dir",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "pr_dir": [
                    "str"
                ]
            }
        },
        "_convert": {
            "name": "_convert",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "bot_id": [
                    "str",
                    "bool"
                ],
                "transfer_setting": [
                    "str",
                    "bool"
                ]
            }
        },
        "convert_all_trainingsets": {
            "name": "convert_all_trainingsets",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "transfer_setting": [
                    "Dict[str,Any]",
                    "str",
                    "Iterable[str]"
                ]
            }
        }
    },
    "cnn_server-master/slim/datasets/convert_to_protobuf.py": {
        "_get_dataset_filename": {
            "name": "_get_dataset_filename",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "protobuf_dir": [
                    "str",
                    "int"
                ],
                "split_name": [
                    "str",
                    "bool",
                    "int"
                ],
                "shard_id": [
                    "str",
                    "bool",
                    "int"
                ],
                "num_shards": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "_dataset_exists": {
            "name": "_dataset_exists",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "dataset_dir": [
                    "str",
                    "Type"
                ],
                "num_shards": [
                    "str",
                    "bool",
                    "Sequence[Iterable[Any]]",
                    "None",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "_get_filenames_and_classes": {
            "name": "_get_filenames_and_classes",
            "location": 51,
            "return": [
                "Tuple[(list, list, list)]"
            ],
            "arguments": {
                "training_data_dir": [
                    "str"
                ],
                "fract_validation": [
                    "str",
                    "int",
                    "List[str]",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "_convert_dataset": {
            "name": "_convert_dataset",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "split_name": [
                    "str",
                    "Dict[str,str]",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "filenames": [
                    "int",
                    "float"
                ],
                "class_names_to_ids": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "bool"
                ],
                "protobuf_dir": [
                    "str",
                    "Dict[str,str]",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "num_shards": [
                    "int",
                    "float"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "training_data_dir": [
                    "str",
                    "Dict",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "protobuf_dir": [
                    "str",
                    "bool",
                    "List",
                    "Optional[str]",
                    "None"
                ],
                "fract_validation": [
                    "float",
                    "str",
                    "Dict",
                    "bool",
                    "Optional[str]"
                ],
                "num_shards": [
                    "int",
                    "str",
                    "List[Optional[str]]",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "ImageReader.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageReader.read_image_dims": {
            "name": "read_image_dims",
            "location": 24,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "sess": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "image_data": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "ImageReader.decode_jpeg": {
            "name": "decode_jpeg",
            "location": 28,
            "return": [
                "str",
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "sess": [
                    "int",
                    "Dict[str,Any]"
                ],
                "image_data": [
                    "int",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "cnn_server-master/slim/datasets/dataset_factory.py": {
        "get_dataset": {
            "name": "get_dataset",
            "location": 36,
            "return": [
                "str",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Sequence[str]"
                ],
                "split_name": [
                    "str",
                    "bool"
                ],
                "dataset_dir": [
                    "str",
                    "bool"
                ],
                "file_pattern": [
                    "str",
                    "bool",
                    "None"
                ],
                "reader": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        }
    },
    "cnn_server-master/slim/datasets/dataset_utils.py": {
        "int64_feature": {
            "name": "int64_feature",
            "location": 30,
            "return": [
                "Callable",
                "str",
                "Tuple[Any, Any, Any]",
                "list"
            ],
            "arguments": {
                "values": [
                    "bool",
                    "float",
                    "Iterable",
                    "Hashable"
                ]
            }
        },
        "bytes_feature": {
            "name": "bytes_feature",
            "location": 44,
            "return": [
                "Callable",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "values": [
                    "float",
                    "List",
                    "List[str]",
                    "T"
                ]
            }
        },
        "image_to_tfexample": {
            "name": "image_to_tfexample",
            "location": 56,
            "return": [
                "List[str]",
                "Callable",
                "str",
                "int"
            ],
            "arguments": {
                "image_data": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "image_format": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "height": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "width": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "class_id": [
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "download_and_uncompress_tarball": {
            "name": "download_and_uncompress_tarball",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "tarball_url": [
                    "str",
                    "bytes"
                ],
                "dataset_dir": [
                    "str",
                    "BinaryIO"
                ]
            }
        },
        "write_label_file": {
            "name": "write_label_file",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "labels_to_class_names": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "dataset_dir": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "filename": [
                    "Text",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "has_labels": {
            "name": "has_labels",
            "location": 104,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "dataset_dir": [
                    "str"
                ],
                "filename": [
                    "str",
                    "Text"
                ]
            }
        },
        "read_label_file": {
            "name": "read_label_file",
            "location": 117,
            "return": [
                "Dict[(int, Any)]"
            ],
            "arguments": {
                "dataset_dir": [
                    "str"
                ],
                "filename": [
                    "str",
                    "Text"
                ]
            }
        },
        "get_number_of_classes_by_subfolder": {
            "name": "get_number_of_classes_by_subfolder",
            "location": 141,
            "return": [
                "int"
            ],
            "arguments": {
                "training_data_dir": [
                    "str",
                    "bytes",
                    "Dict",
                    "Optional[dict]",
                    "None"
                ]
            }
        },
        "get_number_of_classes_by_labels": {
            "name": "get_number_of_classes_by_labels",
            "location": 154,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "protobuf_dir": [
                    "str"
                ]
            }
        },
        "get_split_size": {
            "name": "get_split_size",
            "location": 167,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "training_data_dir": [
                    "int",
                    "str"
                ],
                "split_name": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "dict"
                ],
                "frac_validation": [
                    "float",
                    "str",
                    "int",
                    "Optional[str]",
                    "List[Optional[str]]"
                ]
            }
        },
        "download_and_uncompress_tarball._progress": {
            "name": "_progress",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "count": [
                    "int"
                ],
                "block_size": [
                    "int"
                ],
                "total_size": [
                    "int"
                ]
            }
        }
    },
    "cnn_server-master/slim/datasets/download_all_trainingsets.py": {
        "_check_file": {
            "name": "_check_file",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {
                "file": [
                    "str"
                ]
            }
        },
        "download_all": {
            "name": "download_all",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cnn_server-master/slim/datasets/download_and_convert_cifar10.py": {
        "_add_to_tfrecord": {
            "name": "_add_to_tfrecord",
            "location": 64,
            "return": [
                "str",
                "int",
                "tuple"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Dict[str,Sequence[str]]",
                    "bool",
                    "Callable"
                ],
                "tfrecord_writer": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "offset": [
                    "int",
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "_get_output_filename": {
            "name": "_get_output_filename",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "dataset_dir": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "split_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "_download_and_uncompress_dataset": {
            "name": "_download_and_uncompress_dataset",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "dataset_dir": [
                    "str"
                ]
            }
        },
        "_clean_up_temporary_files": {
            "name": "_clean_up_temporary_files",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "dataset_dir": [
                    "str"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "dataset_dir": [
                    "str",
                    "bool",
                    "IO[str]",
                    "IO"
                ]
            }
        },
        "_download_and_uncompress_dataset._progress": {
            "name": "_progress",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "count": [
                    "int"
                ],
                "block_size": [
                    "int"
                ],
                "total_size": [
                    "int"
                ]
            }
        }
    },
    "cnn_server-master/slim/datasets/download_and_convert_flowers.py": {
        "_get_filenames_and_classes": {
            "name": "_get_filenames_and_classes",
            "location": 69,
            "return": [
                "Tuple[(list, list)]"
            ],
            "arguments": {
                "training_data_dir": [
                    "str"
                ]
            }
        },
        "_get_dataset_filename": {
            "name": "_get_dataset_filename",
            "location": 98,
            "return": [
                "str"
            ],
            "arguments": {
                "protobuf_dir": [
                    "str"
                ],
                "split_name": [
                    "int",
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ],
                "shard_id": [
                    "int",
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "_convert_dataset": {
            "name": "_convert_dataset",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "split_name": [
                    "str",
                    "Dict[str,str]",
                    "Optional[str]",
                    "None"
                ],
                "filenames": [
                    "int",
                    "float"
                ],
                "class_names_to_ids": [
                    "str",
                    "bytes",
                    "bool",
                    "Optional[str]"
                ],
                "protobuf_dir": [
                    "str",
                    "Dict[str,str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "_dataset_exists": {
            "name": "_dataset_exists",
            "location": 161,
            "return": [
                "bool"
            ],
            "arguments": {
                "dataset_dir": [
                    "str"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "training_data_dir": [
                    "str",
                    "bool"
                ],
                "protobuf_dir": [
                    "str"
                ]
            }
        },
        "ImageReader.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageReader.read_image_dims": {
            "name": "read_image_dims",
            "location": 57,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "sess": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "image_data": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "ImageReader.decode_jpeg": {
            "name": "decode_jpeg",
            "location": 61,
            "return": [
                "str",
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "sess": [
                    "int",
                    "Dict[str,Any]"
                ],
                "image_data": [
                    "int",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "cnn_server-master/slim/datasets/download_and_convert_mnist.py": {
        "_extract_images": {
            "name": "_extract_images",
            "location": 64,
            "return": [
                "Dict[str, List[int]]",
                "Callable",
                "Dict[str, str]",
                "Sequence"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "num_images": [
                    "int",
                    "List[int]",
                    "Sequence[Any]",
                    "Dict[str,int]"
                ]
            }
        },
        "_extract_labels": {
            "name": "_extract_labels",
            "location": 84,
            "return": [
                "int",
                "str",
                "bool",
                "Tuple",
                "Iterable[str]",
                "List",
                "List[List[str]]",
                "Dict",
                "numpy.ndarray",
                "Callable[list[Any],list[Any]]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bool",
                    "int"
                ],
                "num_labels": [
                    "int",
                    "float",
                    "List[Photo]",
                    "Dict",
                    "List[list[int]]",
                    "Union[int,float]",
                    "List[List[int]]"
                ]
            }
        },
        "_add_to_tfrecord": {
            "name": "_add_to_tfrecord",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "data_filename": [
                    "int",
                    "str",
                    "List[dict[str,Any]]",
                    "bytes",
                    "List[Dict[str,Any]]",
                    "numpy.ndarray"
                ],
                "labels_filename": [
                    "bytes",
                    "bool",
                    "Sequence[str]",
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None",
                    "Tuple[str,int]",
                    "Tuple[Union[str,int]]"
                ],
                "num_images": [
                    "float",
                    "Iterable",
                    "numpy.ndarray"
                ],
                "tfrecord_writer": [
                    "str",
                    "bool",
                    "bytes",
                    "int"
                ]
            }
        },
        "_get_output_filename": {
            "name": "_get_output_filename",
            "location": 132,
            "return": [
                "str"
            ],
            "arguments": {
                "dataset_dir": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "split_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "_download_dataset": {
            "name": "_download_dataset",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "dataset_dir": [
                    "bool",
                    "str"
                ]
            }
        },
        "_clean_up_temporary_files": {
            "name": "_clean_up_temporary_files",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "dataset_dir": [
                    "str"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "dataset_dir": [
                    "str",
                    "bool",
                    "IO[str]",
                    "IO"
                ]
            }
        },
        "_download_dataset._progress": {
            "name": "_progress",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "count": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "block_size": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "total_size": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        }
    },
    "cnn_server-master/slim/datasets/download_training_data.py": {
        "_create_label_folders": {
            "name": "_create_label_folders",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "bot_id": [
                    "str",
                    "Callable",
                    "Optional[str]",
                    "None",
                    "Optional[Mapping[str,Any]]",
                    "Mapping"
                ],
                "labels": [
                    "List[tuple[Union[str,int]]]",
                    "str",
                    "int",
                    "List[Tuple[str,int]]",
                    "Callable[,str]",
                    "bool",
                    "Optional[str]"
                ],
                "resume_from": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "_get_image_path": {
            "name": "_get_image_path",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "bot_id": [
                    "str",
                    "bool",
                    "int"
                ],
                "label": [
                    "str",
                    "bool",
                    "int"
                ],
                "image_name": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "url": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_download_and_safe_image": {
            "name": "_download_and_safe_image",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "url": [
                    "str"
                ],
                "image_path": [
                    "str"
                ]
            }
        },
        "download_training_data": {
            "name": "download_training_data",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "bot_id": [
                    "int",
                    "str",
                    "bool"
                ],
                "from_csv": [],
                "resume_from": [
                    "bytes",
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        }
    },
    "cnn_server-master/slim/datasets/flowers.py": {
        "get_split": {
            "name": "get_split",
            "location": 44,
            "return": [
                "str",
                "Callable[[str], None]"
            ],
            "arguments": {
                "split_name": [
                    "str"
                ],
                "dataset_dir": [
                    "str"
                ],
                "file_pattern": [
                    "str"
                ],
                "reader": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Optional[Callable]",
                    "Callable"
                ]
            }
        }
    },
    "cnn_server-master/slim/datasets/imagenet.py": {
        "create_readable_names_for_imagenet_labels": {
            "name": "create_readable_names_for_imagenet_labels",
            "location": 62,
            "return": [
                "Dict[(int, str)]"
            ],
            "arguments": {}
        },
        "get_split": {
            "name": "get_split",
            "location": 118,
            "return": [
                "str",
                "Callable[[str], None]"
            ],
            "arguments": {
                "split_name": [
                    "str"
                ],
                "dataset_dir": [
                    "str"
                ],
                "file_pattern": [
                    "str"
                ],
                "reader": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Optional[Callable]",
                    "Callable"
                ]
            }
        }
    },
    "cnn_server-master/slim/datasets/mnist.py": {
        "get_split": {
            "name": "get_split",
            "location": 44,
            "return": [
                "str",
                "Callable[[str], None]"
            ],
            "arguments": {
                "split_name": [
                    "str"
                ],
                "dataset_dir": [
                    "str"
                ],
                "file_pattern": [
                    "str"
                ],
                "reader": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Optional[Callable]",
                    "Callable"
                ]
            }
        }
    },
    "cnn_server-master/slim/datasets/__init__.py": {},
    "cnn_server-master/slim/deployment/model_deploy.py": {
        "create_clones": {
            "name": "create_clones",
            "location": 142,
            "return": [
                "List[Clone]"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "model_fn": [
                    "Dict",
                    "Tuple"
                ],
                "args": [
                    "None"
                ],
                "kwargs": [
                    "None"
                ]
            }
        },
        "_gather_clone_loss": {
            "name": "_gather_clone_loss",
            "location": 197,
            "return": [
                "None",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "clone": [
                    "int",
                    "bytearray",
                    "str"
                ],
                "num_clones": [
                    "int",
                    "float",
                    "Union[int,float]",
                    "str",
                    "Tuple[int,int]"
                ],
                "regularization_losses": [
                    "Dict[str,Any]",
                    "int",
                    "float",
                    "bytes"
                ]
            }
        },
        "_optimize_clone": {
            "name": "_optimize_clone",
            "location": 238,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "optimizer": [
                    "int",
                    "str",
                    "float",
                    "Optional[int]",
                    "None",
                    "Optional[Set[str]]",
                    "Set[str]"
                ],
                "clone": [
                    "int"
                ],
                "num_clones": [
                    "int"
                ],
                "regularization_losses": [
                    "int"
                ]
            }
        },
        "optimize_clones": {
            "name": "optimize_clones",
            "location": 264,
            "return": [
                "Tuple[(Any, List[Tuple[(Any, Any)]])]"
            ],
            "arguments": {
                "clones": [
                    "List[int]",
                    "list",
                    "bool",
                    "List[float]",
                    "str",
                    "int"
                ],
                "optimizer": [
                    "int",
                    "float",
                    "Optional[int]",
                    "None"
                ],
                "regularization_losses": [
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "str",
                    "int"
                ]
            }
        },
        "deploy": {
            "name": "deploy",
            "location": 309,
            "return": [
                "DeployedModel"
            ],
            "arguments": {
                "config": [
                    "dict"
                ],
                "model_fn": [
                    "Exception",
                    "Dict"
                ],
                "args": [
                    "None"
                ],
                "kwargs": [
                    "None"
                ],
                "optimizer": [
                    "Dict[str,Any]",
                    "None",
                    "Mapping[str,Any]",
                    "Mapping"
                ],
                "summarize_gradients": [
                    "bool",
                    "Dict[str,Any]"
                ]
            }
        },
        "_sum_clones_gradients": {
            "name": "_sum_clones_gradients",
            "location": 413,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "clone_grads": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_add_gradients_summaries": {
            "name": "_add_gradients_summaries",
            "location": 446,
            "return": [
                "list"
            ],
            "arguments": {
                "grads_and_vars": [
                    "Tuple[_]",
                    "int",
                    "Optional[Callable]",
                    "T",
                    "Callable",
                    "float",
                    "Tuple[cirq.Qid]"
                ]
            }
        },
        "DeploymentConfig.__init__": {
            "name": "__init__",
            "location": 481,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_clones": [
                    "int",
                    "Optional[int]"
                ],
                "clone_on_cpu": [
                    "bool",
                    "int",
                    "float",
                    "str"
                ],
                "replica_id": [
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "num_replicas": [
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "num_ps_tasks": [
                    "int",
                    "float",
                    "Optional[float]",
                    "Dict[str,Any]"
                ],
                "worker_job_name": [
                    "Text",
                    "str",
                    "int",
                    "Optional[str]",
                    "Dict[str,Any]"
                ],
                "ps_job_name": [
                    "Text",
                    "str",
                    "int",
                    "Optional[str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "DeploymentConfig.num_clones": {
            "name": "num_clones",
            "location": 534,
            "return": [
                "int",
                "Optional[Dict[str, int]]",
                "List[List[int]]",
                "bool",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeploymentConfig.clone_on_cpu": {
            "name": "clone_on_cpu",
            "location": 538,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeploymentConfig.replica_id": {
            "name": "replica_id",
            "location": 542,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeploymentConfig.num_replicas": {
            "name": "num_replicas",
            "location": 546,
            "return": [
                "int",
                "Optional[Dict[str, int]]",
                "List[List[int]]",
                "bool",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeploymentConfig.num_ps_tasks": {
            "name": "num_ps_tasks",
            "location": 550,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeploymentConfig.ps_device": {
            "name": "ps_device",
            "location": 554,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeploymentConfig.worker_device": {
            "name": "worker_device",
            "location": 558,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeploymentConfig.caching_device": {
            "name": "caching_device",
            "location": 561,
            "return": [
                "Optional[Callable[([Any], Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeploymentConfig.clone_device": {
            "name": "clone_device",
            "location": 574,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "clone_index": [
                    "int",
                    "str"
                ]
            }
        },
        "DeploymentConfig.clone_scope": {
            "name": "clone_scope",
            "location": 598,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "clone_index": [
                    "float",
                    "int",
                    "str",
                    "Optional[int]",
                    "Tuple[str]",
                    "None",
                    "bool"
                ]
            }
        },
        "DeploymentConfig.optimizer_device": {
            "name": "optimizer_device",
            "location": 617,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeploymentConfig.inputs_device": {
            "name": "inputs_device",
            "location": 628,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeploymentConfig.variables_device": {
            "name": "variables_device",
            "location": 640,
            "return": [
                "Union[(Callable[([Any], Any)], str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeploymentConfig.variables_device._PSDeviceChooser.__init__": {
            "name": "__init__",
            "location": 654,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "int",
                    "float",
                    "Optional[str]"
                ],
                "tasks": [
                    "str",
                    "Sequence[Dict[str, str]]",
                    "int",
                    "Optional[int]",
                    "Dict[str, Any]",
                    "Callable[[Dict], None]"
                ]
            }
        },
        "DeploymentConfig.variables_device._PSDeviceChooser.choose": {
            "name": "choose",
            "location": 659,
            "return": [
                "Text",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "op": [
                    "cirq.ops.Operation",
                    "Dict[str, tensorflow.Tensor]"
                ]
            }
        }
    },
    "cnn_server-master/slim/deployment/model_deploy_test.py": {
        "LogisticClassifier": {
            "name": "LogisticClassifier",
            "location": 149,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "inputs": [],
                "labels": [
                    "str"
                ],
                "scope": [
                    "None"
                ],
                "reuse": [
                    "None"
                ]
            }
        },
        "BatchNormClassifier": {
            "name": "BatchNormClassifier",
            "location": 158,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "inputs": [],
                "labels": [
                    "str"
                ],
                "scope": [
                    "None"
                ],
                "reuse": [
                    "None"
                ]
            }
        },
        "DeploymentConfigTest.testDefaults": {
            "name": "testDefaults",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeploymentConfigTest.testCPUonly": {
            "name": "testCPUonly",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeploymentConfigTest.testMultiGPU": {
            "name": "testMultiGPU",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeploymentConfigTest.testPS": {
            "name": "testPS",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeploymentConfigTest.testMultiGPUPS": {
            "name": "testMultiGPUPS",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeploymentConfigTest.testReplicasPS": {
            "name": "testReplicasPS",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeploymentConfigTest.testReplicasMultiGPUPS": {
            "name": "testReplicasMultiGPUPS",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeploymentConfigTest.testVariablesPS": {
            "name": "testVariablesPS",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreatecloneTest.setUp": {
            "name": "setUp",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreatecloneTest.testCreateLogisticClassifier": {
            "name": "testCreateLogisticClassifier",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreatecloneTest.testCreateSingleclone": {
            "name": "testCreateSingleclone",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreatecloneTest.testCreateMulticlone": {
            "name": "testCreateMulticlone",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreatecloneTest.testCreateOnecloneWithPS": {
            "name": "testCreateOnecloneWithPS",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreatecloneTest.testCreateMulticloneWithPS": {
            "name": "testCreateMulticloneWithPS",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OptimizeclonesTest.setUp": {
            "name": "setUp",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OptimizeclonesTest.testCreateLogisticClassifier": {
            "name": "testCreateLogisticClassifier",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OptimizeclonesTest.testCreateSingleclone": {
            "name": "testCreateSingleclone",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OptimizeclonesTest.testCreateMulticlone": {
            "name": "testCreateMulticlone",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OptimizeclonesTest.testCreateMulticloneCPU": {
            "name": "testCreateMulticloneCPU",
            "location": 409,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OptimizeclonesTest.testCreateOnecloneWithPS": {
            "name": "testCreateOnecloneWithPS",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeployTest.setUp": {
            "name": "setUp",
            "location": 467,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeployTest.testLocalTrainOp": {
            "name": "testLocalTrainOp",
            "location": 479,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeployTest.testNoSummariesOnGPU": {
            "name": "testNoSummariesOnGPU",
            "location": 526,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeployTest.testNoSummariesOnGPUForEvals": {
            "name": "testNoSummariesOnGPUForEvals",
            "location": 545,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeployTest.testNoSummariesOnGPU.ModelFn": {
            "name": "ModelFn",
            "location": 531,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DeployTest.testNoSummariesOnGPUForEvals.ModelFn": {
            "name": "ModelFn",
            "location": 550,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cnn_server-master/slim/deployment/__init__.py": {},
    "cnn_server-master/slim/nets/alexnet.py": {
        "alexnet_v2_arg_scope": {
            "name": "alexnet_v2_arg_scope",
            "location": 45,
            "return": [
                "float",
                "bool",
                "int"
            ],
            "arguments": {
                "weight_decay": [
                    "float",
                    "bool",
                    "int"
                ]
            }
        },
        "alexnet_v2": {
            "name": "alexnet_v2",
            "location": 55,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "Optional[Scope]",
                    "None"
                ],
                "num_classes": [
                    "int",
                    "Optional[str]",
                    "Sequence[str]"
                ],
                "is_training": [
                    "bool",
                    "str",
                    "Dict"
                ],
                "dropout_keep_prob": [
                    "float",
                    "bool",
                    "str",
                    "Dict"
                ],
                "spatial_squeeze": [
                    "bool",
                    "tensorflow.Tensor",
                    "List[Type]"
                ],
                "scope": [
                    "Optional[Scope]",
                    "Text"
                ]
            }
        }
    },
    "cnn_server-master/slim/nets/alexnet_test.py": {
        "AlexnetV2Test.testBuild": {
            "name": "testBuild",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlexnetV2Test.testFullyConvolutional": {
            "name": "testFullyConvolutional",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlexnetV2Test.testEndPoints": {
            "name": "testEndPoints",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlexnetV2Test.testModelVariables": {
            "name": "testModelVariables",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlexnetV2Test.testEvaluation": {
            "name": "testEvaluation",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlexnetV2Test.testTrainEvalWithReuse": {
            "name": "testTrainEvalWithReuse",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlexnetV2Test.testForward": {
            "name": "testForward",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cnn_server-master/slim/nets/cifarnet.py": {
        "cifarnet": {
            "name": "cifarnet",
            "location": 28,
            "return": [
                "Tuple[(Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "images": [
                    "int",
                    "Dict[str,Any]",
                    "Optional[Awaitable[None]]",
                    "collections.abc.Awaitable[None]",
                    "None"
                ],
                "num_classes": [
                    "int",
                    "Dict[str,Tuple[int,int]]"
                ],
                "is_training": [
                    "bool",
                    "Type"
                ],
                "dropout_keep_prob": [
                    "float",
                    "bool",
                    "Type"
                ],
                "prediction_fn": [
                    "bool",
                    "type"
                ],
                "scope": [
                    "int",
                    "Text"
                ]
            }
        },
        "cifarnet_arg_scope": {
            "name": "cifarnet_arg_scope",
            "location": 93,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "weight_decay": [
                    "float",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "cnn_server-master/slim/nets/inception.py": {},
    "cnn_server-master/slim/nets/inception_resnet_v2.py": {
        "block35": {
            "name": "block35",
            "location": 33,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "net": [],
                "scale": [
                    "bytes",
                    "float"
                ],
                "activation_fn": [
                    "bool",
                    "Optional[int]"
                ],
                "scope": [
                    "None"
                ],
                "reuse": [
                    "Callable",
                    "None"
                ]
            }
        },
        "block17": {
            "name": "block17",
            "location": 54,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "net": [
                    "Callable"
                ],
                "scale": [
                    "bytes",
                    "float"
                ],
                "activation_fn": [
                    "bool",
                    "Optional[int]"
                ],
                "scope": [
                    "None"
                ],
                "reuse": [
                    "Callable",
                    "None"
                ]
            }
        },
        "block8": {
            "name": "block8",
            "location": 74,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "net": [
                    "Callable"
                ],
                "scale": [
                    "bytes",
                    "float"
                ],
                "activation_fn": [
                    "bool",
                    "Optional[int]"
                ],
                "scope": [
                    "None"
                ],
                "reuse": [
                    "Callable",
                    "None"
                ]
            }
        },
        "inception_resnet_v2": {
            "name": "inception_resnet_v2",
            "location": 94,
            "return": [
                "Tuple[(Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "Optional[Scope]",
                    "None"
                ],
                "num_classes": [
                    "int",
                    "bool",
                    "Hashable",
                    "Dict"
                ],
                "is_training": [
                    "bool",
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "dropout_keep_prob": [
                    "float",
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "reuse": [
                    "str",
                    "None",
                    "Optional[Scope]"
                ],
                "scope": [
                    "Optional[Scope]",
                    "Text"
                ]
            }
        },
        "inception_resnet_v2_arg_scope": {
            "name": "inception_resnet_v2_arg_scope",
            "location": 254,
            "return": [
                "Iterable[Iterable[T]]",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "weight_decay": [
                    "float",
                    "Iterable[Iterable[T]]",
                    "int",
                    "Dict[str,str]"
                ],
                "batch_norm_decay": [
                    "float",
                    "Iterable[Iterable[T]]",
                    "int",
                    "Dict[str,str]"
                ],
                "batch_norm_epsilon": [
                    "float",
                    "Iterable[Iterable[T]]",
                    "int",
                    "Dict[str,str]"
                ]
            }
        }
    },
    "cnn_server-master/slim/nets/inception_resnet_v2_test.py": {
        "InceptionTest.testBuildLogits": {
            "name": "testBuildLogits",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionTest.testBuildEndPoints": {
            "name": "testBuildEndPoints",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionTest.testVariablesSetDevice": {
            "name": "testVariablesSetDevice",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionTest.testHalfSizeImages": {
            "name": "testHalfSizeImages",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionTest.testUnknownBatchSize": {
            "name": "testUnknownBatchSize",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionTest.testEvaluation": {
            "name": "testEvaluation",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionTest.testTrainEvalWithReuse": {
            "name": "testTrainEvalWithReuse",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cnn_server-master/slim/nets/inception_utils.py": {
        "inception_arg_scope": {
            "name": "inception_arg_scope",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "weight_decay": [
                    "float",
                    "int",
                    "bytes",
                    "bool"
                ],
                "use_batch_norm": [
                    "bool",
                    "Tuple",
                    "float"
                ],
                "batch_norm_decay": [
                    "float",
                    "str",
                    "bool"
                ],
                "batch_norm_epsilon": [
                    "float",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "cnn_server-master/slim/nets/inception_v1.py": {
        "inception_v1_base": {
            "name": "inception_v1_base",
            "location": 29,
            "return": [
                "Tuple[(Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "inputs": [],
                "final_endpoint": [
                    "int",
                    "Text"
                ],
                "scope": [
                    "bool",
                    "Text"
                ]
            }
        },
        "inception_v1": {
            "name": "inception_v1",
            "location": 248,
            "return": [
                "Tuple[(Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "None",
                    "Optional[Scope]",
                    "AbstractSet",
                    "AbstractSet[TemplateObjectVariable]",
                    "AbstractSet[TemplateActionTypeVariable]"
                ],
                "num_classes": [
                    "int",
                    "str",
                    "Optional[Scope]",
                    "Callable[[Type,str],bool]"
                ],
                "is_training": [
                    "bool",
                    "int",
                    "str",
                    "Optional[List[str]]"
                ],
                "dropout_keep_prob": [
                    "float",
                    "int",
                    "str",
                    "Optional[List[str]]"
                ],
                "prediction_fn": [
                    "int",
                    "str",
                    "Optional[List[str]]"
                ],
                "spatial_squeeze": [
                    "bool",
                    "tensorflow.Tensor",
                    "List[Type]"
                ],
                "reuse": [
                    "str",
                    "None",
                    "int",
                    "Optional[Scope]",
                    "Type",
                    "Callable[Type,str,bool]",
                    "Callable[[Type,str],bool]",
                    "Callable"
                ],
                "scope": [
                    "Text",
                    "str",
                    "Optional[Scope]",
                    "AbstractSet[TemplateObjectVariable]",
                    "AbstractSet[TemplateActionTypeVariable]",
                    "Sequence[int]"
                ]
            }
        }
    },
    "cnn_server-master/slim/nets/inception_v1_test.py": {
        "InceptionV1Test.testBuildClassificationNetwork": {
            "name": "testBuildClassificationNetwork",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionV1Test.testBuildBaseNetwork": {
            "name": "testBuildBaseNetwork",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionV1Test.testBuildOnlyUptoFinalEndpoint": {
            "name": "testBuildOnlyUptoFinalEndpoint",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionV1Test.testBuildAndCheckAllEndPointsUptoMixed5c": {
            "name": "testBuildAndCheckAllEndPointsUptoMixed5c",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionV1Test.testModelHasExpectedNumberOfParameters": {
            "name": "testModelHasExpectedNumberOfParameters",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionV1Test.testHalfSizeImages": {
            "name": "testHalfSizeImages",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionV1Test.testUnknownImageShape": {
            "name": "testUnknownImageShape",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionV1Test.testUnknowBatchSize": {
            "name": "testUnknowBatchSize",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionV1Test.testEvaluation": {
            "name": "testEvaluation",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionV1Test.testTrainEvalWithReuse": {
            "name": "testTrainEvalWithReuse",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionV1Test.testLogitsNotSqueezed": {
            "name": "testLogitsNotSqueezed",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cnn_server-master/slim/nets/inception_v2.py": {
        "inception_v2_base": {
            "name": "inception_v2_base",
            "location": 29,
            "return": [
                "Tuple[(Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "inputs": [
                    "bool"
                ],
                "final_endpoint": [
                    "int",
                    "Text"
                ],
                "min_depth": [
                    "int",
                    "List[int]",
                    "Optional[int]",
                    "float"
                ],
                "depth_multiplier": [
                    "float",
                    "int",
                    "List[int]",
                    "Optional[int]"
                ],
                "scope": [
                    "bool",
                    "None"
                ]
            }
        },
        "inception_v2": {
            "name": "inception_v2",
            "location": 416,
            "return": [
                "Tuple[(Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "None",
                    "Sequence[int]",
                    "Optional[Scope]",
                    "AbstractSet",
                    "AbstractSet[TemplateObjectVariable]",
                    "AbstractSet[TemplateActionTypeVariable]"
                ],
                "num_classes": [
                    "int",
                    "str",
                    "Optional[Scope]",
                    "Callable[[Type,str],bool]"
                ],
                "is_training": [
                    "bool",
                    "int",
                    "str",
                    "Optional[List[str]]"
                ],
                "dropout_keep_prob": [
                    "float",
                    "int",
                    "str",
                    "Optional[List[str]]"
                ],
                "min_depth": [
                    "int",
                    "str"
                ],
                "depth_multiplier": [
                    "float",
                    "str",
                    "int"
                ],
                "prediction_fn": [
                    "int",
                    "str",
                    "Optional[List[str]]"
                ],
                "spatial_squeeze": [
                    "bool",
                    "tensorflow.Tensor",
                    "List[Type]"
                ],
                "reuse": [
                    "str",
                    "None",
                    "int",
                    "Optional[Scope]",
                    "Type",
                    "Callable[Type,str,bool]",
                    "Callable[[Type,str],bool]",
                    "Callable"
                ],
                "scope": [
                    "Text",
                    "str",
                    "Optional[Scope]",
                    "AbstractSet[TemplateObjectVariable]",
                    "AbstractSet[TemplateActionTypeVariable]",
                    "Sequence[int]"
                ]
            }
        },
        "_reduced_kernel_size_for_small_input": {
            "name": "_reduced_kernel_size_for_small_input",
            "location": 489,
            "return": [
                "Union[(list, _T1)]"
            ],
            "arguments": {
                "input_tensor": [
                    "str",
                    "bool",
                    "List"
                ],
                "kernel_size": [
                    "int",
                    "Iterable[int]",
                    "bool"
                ]
            }
        }
    },
    "cnn_server-master/slim/nets/inception_v2_test.py": {
        "InceptionV2Test.testBuildClassificationNetwork": {
            "name": "testBuildClassificationNetwork",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionV2Test.testBuildBaseNetwork": {
            "name": "testBuildBaseNetwork",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionV2Test.testBuildOnlyUptoFinalEndpoint": {
            "name": "testBuildOnlyUptoFinalEndpoint",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionV2Test.testBuildAndCheckAllEndPointsUptoMixed5c": {
            "name": "testBuildAndCheckAllEndPointsUptoMixed5c",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionV2Test.testModelHasExpectedNumberOfParameters": {
            "name": "testModelHasExpectedNumberOfParameters",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionV2Test.testBuildEndPointsWithDepthMultiplierLessThanOne": {
            "name": "testBuildEndPointsWithDepthMultiplierLessThanOne",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionV2Test.testBuildEndPointsWithDepthMultiplierGreaterThanOne": {
            "name": "testBuildEndPointsWithDepthMultiplierGreaterThanOne",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionV2Test.testRaiseValueErrorWithInvalidDepthMultiplier": {
            "name": "testRaiseValueErrorWithInvalidDepthMultiplier",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionV2Test.testHalfSizeImages": {
            "name": "testHalfSizeImages",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionV2Test.testUnknownImageShape": {
            "name": "testUnknownImageShape",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionV2Test.testUnknowBatchSize": {
            "name": "testUnknowBatchSize",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionV2Test.testEvaluation": {
            "name": "testEvaluation",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionV2Test.testTrainEvalWithReuse": {
            "name": "testTrainEvalWithReuse",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionV2Test.testLogitsNotSqueezed": {
            "name": "testLogitsNotSqueezed",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cnn_server-master/slim/nets/inception_v3.py": {
        "inception_v3_base": {
            "name": "inception_v3_base",
            "location": 29,
            "return": [
                "Tuple[(Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "inputs": [],
                "final_endpoint": [
                    "int",
                    "Text"
                ],
                "min_depth": [
                    "int",
                    "List[int]",
                    "Optional[int]",
                    "float"
                ],
                "depth_multiplier": [
                    "float",
                    "int",
                    "List[int]",
                    "Optional[int]"
                ],
                "scope": [
                    "bool",
                    "None"
                ]
            }
        },
        "inception_v3": {
            "name": "inception_v3",
            "location": 419,
            "return": [
                "Tuple[(Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "None",
                    "Sequence[int]",
                    "Optional[Scope]",
                    "AbstractSet",
                    "AbstractSet[TemplateObjectVariable]",
                    "AbstractSet[TemplateActionTypeVariable]"
                ],
                "num_classes": [
                    "int",
                    "Optional[Dict]",
                    "Optional[Scope]"
                ],
                "is_training": [
                    "bool",
                    "int",
                    "str",
                    "Optional[List[str]]"
                ],
                "dropout_keep_prob": [
                    "float",
                    "int",
                    "str",
                    "Optional[List[str]]"
                ],
                "min_depth": [
                    "int",
                    "str",
                    "Optional[int]",
                    "bool"
                ],
                "depth_multiplier": [
                    "float",
                    "int",
                    "str",
                    "Optional[int]",
                    "bool"
                ],
                "prediction_fn": [
                    "int",
                    "str",
                    "Optional[List[str]]"
                ],
                "spatial_squeeze": [
                    "bool",
                    "tensorflow.Tensor",
                    "List[Type]"
                ],
                "reuse": [
                    "str",
                    "None",
                    "int",
                    "Optional[Scope]",
                    "Type",
                    "Callable[Type,str,bool]",
                    "Callable[[Type,str],bool]",
                    "Callable"
                ],
                "scope": [
                    "Text",
                    "str",
                    "Optional[Scope]",
                    "AbstractSet[TemplateObjectVariable]",
                    "AbstractSet[TemplateActionTypeVariable]",
                    "Sequence[int]"
                ]
            }
        },
        "_reduced_kernel_size_for_small_input": {
            "name": "_reduced_kernel_size_for_small_input",
            "location": 529,
            "return": [
                "Union[(list, _T1)]"
            ],
            "arguments": {
                "input_tensor": [
                    "str",
                    "bool",
                    "List"
                ],
                "kernel_size": [
                    "int",
                    "Iterable[int]",
                    "bool"
                ]
            }
        }
    },
    "cnn_server-master/slim/nets/inception_v3_test.py": {
        "InceptionV3Test.testBuildClassificationNetwork": {
            "name": "testBuildClassificationNetwork",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionV3Test.testBuildBaseNetwork": {
            "name": "testBuildBaseNetwork",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionV3Test.testBuildOnlyUptoFinalEndpoint": {
            "name": "testBuildOnlyUptoFinalEndpoint",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionV3Test.testBuildAndCheckAllEndPointsUptoMixed7c": {
            "name": "testBuildAndCheckAllEndPointsUptoMixed7c",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionV3Test.testModelHasExpectedNumberOfParameters": {
            "name": "testModelHasExpectedNumberOfParameters",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionV3Test.testBuildEndPoints": {
            "name": "testBuildEndPoints",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionV3Test.testBuildEndPointsWithDepthMultiplierLessThanOne": {
            "name": "testBuildEndPointsWithDepthMultiplierLessThanOne",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionV3Test.testBuildEndPointsWithDepthMultiplierGreaterThanOne": {
            "name": "testBuildEndPointsWithDepthMultiplierGreaterThanOne",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionV3Test.testRaiseValueErrorWithInvalidDepthMultiplier": {
            "name": "testRaiseValueErrorWithInvalidDepthMultiplier",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionV3Test.testHalfSizeImages": {
            "name": "testHalfSizeImages",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionV3Test.testUnknownImageShape": {
            "name": "testUnknownImageShape",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionV3Test.testUnknowBatchSize": {
            "name": "testUnknowBatchSize",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionV3Test.testEvaluation": {
            "name": "testEvaluation",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionV3Test.testTrainEvalWithReuse": {
            "name": "testTrainEvalWithReuse",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionV3Test.testLogitsNotSqueezed": {
            "name": "testLogitsNotSqueezed",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cnn_server-master/slim/nets/inception_v4.py": {
        "block_inception_a": {
            "name": "block_inception_a",
            "location": 34,
            "return": [
                "Any"
            ],
            "arguments": {
                "inputs": [],
                "scope": [
                    "None"
                ],
                "reuse": [
                    "None"
                ]
            }
        },
        "block_reduction_a": {
            "name": "block_reduction_a",
            "location": 55,
            "return": [
                "Any"
            ],
            "arguments": {
                "inputs": [],
                "scope": [
                    "None"
                ],
                "reuse": [
                    "None"
                ]
            }
        },
        "block_inception_b": {
            "name": "block_inception_b",
            "location": 75,
            "return": [
                "int",
                "List[int]",
                "tuple",
                "Tuple[float, float, float]",
                "float"
            ],
            "arguments": {
                "inputs": [],
                "scope": [
                    "None"
                ],
                "reuse": [
                    "None"
                ]
            }
        },
        "block_reduction_b": {
            "name": "block_reduction_b",
            "location": 99,
            "return": [
                "int",
                "List[int]",
                "tuple",
                "Tuple[float, float, float]",
                "float"
            ],
            "arguments": {
                "inputs": [],
                "scope": [
                    "None"
                ],
                "reuse": [
                    "None"
                ]
            }
        },
        "block_inception_c": {
            "name": "block_inception_c",
            "location": 121,
            "return": [
                "Any"
            ],
            "arguments": {
                "inputs": [],
                "scope": [
                    "None"
                ],
                "reuse": [
                    "None"
                ]
            }
        },
        "inception_v4_base": {
            "name": "inception_v4_base",
            "location": 147,
            "return": [
                "Tuple[(Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "inputs": [
                    "bool"
                ],
                "final_endpoint": [
                    "Text",
                    "str",
                    "int",
                    "float",
                    "Union[float,int]"
                ],
                "scope": [
                    "None"
                ]
            }
        },
        "inception_v4": {
            "name": "inception_v4",
            "location": 257,
            "return": [
                "Tuple[(Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "Optional[Scope]",
                    "None"
                ],
                "num_classes": [
                    "int",
                    "bool",
                    "str"
                ],
                "is_training": [
                    "bool",
                    "int",
                    "str",
                    "Optional[List[str]]"
                ],
                "dropout_keep_prob": [
                    "float",
                    "int",
                    "str",
                    "Optional[List[str]]"
                ],
                "reuse": [
                    "str",
                    "None",
                    "Optional[Scope]"
                ],
                "scope": [
                    "Text",
                    "str",
                    "Optional[Scope]"
                ],
                "create_aux_logits": [
                    "bool",
                    "tensorflow.Tensor",
                    "List[Type]"
                ]
            }
        },
        "inception_v4_base.add_and_check_final": {
            "name": "add_and_check_final",
            "location": 169,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Callable[[List], bool]",
                    "Callable[[str], bool]"
                ],
                "net": [
                    "str",
                    "dict"
                ]
            }
        }
    },
    "cnn_server-master/slim/nets/inception_v4_test.py": {
        "InceptionTest.testBuildLogits": {
            "name": "testBuildLogits",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionTest.testBuildWithoutAuxLogits": {
            "name": "testBuildWithoutAuxLogits",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionTest.testAllEndPointsShapes": {
            "name": "testAllEndPointsShapes",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionTest.testBuildBaseNetwork": {
            "name": "testBuildBaseNetwork",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionTest.testBuildOnlyUpToFinalEndpoint": {
            "name": "testBuildOnlyUpToFinalEndpoint",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionTest.testVariablesSetDevice": {
            "name": "testVariablesSetDevice",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionTest.testHalfSizeImages": {
            "name": "testHalfSizeImages",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionTest.testUnknownBatchSize": {
            "name": "testUnknownBatchSize",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionTest.testEvaluation": {
            "name": "testEvaluation",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InceptionTest.testTrainEvalWithReuse": {
            "name": "testTrainEvalWithReuse",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cnn_server-master/slim/nets/lenet.py": {
        "lenet": {
            "name": "lenet",
            "location": 26,
            "return": [
                "Tuple[(Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "images": [
                    "int",
                    "Dict[str,Any]",
                    "Optional[Awaitable[None]]",
                    "collections.abc.Awaitable[None]",
                    "None"
                ],
                "num_classes": [
                    "Optional[int]",
                    "int"
                ],
                "is_training": [
                    "bool",
                    "Type"
                ],
                "dropout_keep_prob": [
                    "float",
                    "bool",
                    "Type"
                ],
                "prediction_fn": [
                    "bool",
                    "type"
                ],
                "scope": [
                    "int",
                    "Text"
                ]
            }
        },
        "lenet_arg_scope": {
            "name": "lenet_arg_scope",
            "location": 79,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "weight_decay": [
                    "float",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "cnn_server-master/slim/nets/nets_factory.py": {
        "get_network_fn": {
            "name": "get_network_fn",
            "location": 81,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "name": [
                    "bool",
                    "str",
                    "List[str]"
                ],
                "num_classes": [
                    "bool",
                    "str",
                    "List[str]"
                ],
                "weight_decay": [
                    "float",
                    "bool",
                    "str",
                    "List[str]"
                ],
                "is_training": [
                    "bool",
                    "str",
                    "List[str]"
                ],
                "dropout_keep_prob": [
                    "bool",
                    "str",
                    "None",
                    "List[str]"
                ]
            }
        },
        "get_network_fn.network_fn": {
            "name": "network_fn",
            "location": 103,
            "return": [
                "str",
                "Callable",
                "bool",
                "Callable[..., Awaitable]"
            ],
            "arguments": {
                "images": [
                    "int"
                ]
            }
        }
    },
    "cnn_server-master/slim/nets/nets_factory_test.py": {
        "NetworksTest.testGetNetworkFn": {
            "name": "testGetNetworkFn",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetworksTest.testGetNetworkFnArgScope": {
            "name": "testGetNetworkFnArgScope",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cnn_server-master/slim/nets/overfeat.py": {
        "overfeat_arg_scope": {
            "name": "overfeat_arg_scope",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "weight_decay": [
                    "float",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "overfeat": {
            "name": "overfeat",
            "location": 50,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "Type",
                    "None",
                    "float",
                    "Optional[Scope]",
                    "Type[object]"
                ],
                "num_classes": [
                    "int",
                    "bool"
                ],
                "is_training": [
                    "bool",
                    "int"
                ],
                "dropout_keep_prob": [
                    "float",
                    "bool",
                    "int"
                ],
                "spatial_squeeze": [
                    "bool",
                    "Exception",
                    "str"
                ],
                "scope": [
                    "Optional[Scope]",
                    "Text"
                ]
            }
        }
    },
    "cnn_server-master/slim/nets/overfeat_test.py": {
        "OverFeatTest.testBuild": {
            "name": "testBuild",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OverFeatTest.testFullyConvolutional": {
            "name": "testFullyConvolutional",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OverFeatTest.testEndPoints": {
            "name": "testEndPoints",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OverFeatTest.testModelVariables": {
            "name": "testModelVariables",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OverFeatTest.testEvaluation": {
            "name": "testEvaluation",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OverFeatTest.testTrainEvalWithReuse": {
            "name": "testTrainEvalWithReuse",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OverFeatTest.testForward": {
            "name": "testForward",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cnn_server-master/slim/nets/resnet_utils.py": {
        "subsample": {
            "name": "subsample",
            "location": 59,
            "return": [
                "int",
                "float",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "inputs": [
                    "int",
                    "float"
                ],
                "factor": [
                    "int",
                    "float"
                ],
                "scope": [
                    "int",
                    "float",
                    "None"
                ]
            }
        },
        "conv2d_same": {
            "name": "conv2d_same",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "inputs": [
                    "Tuple[Union[int,int]]",
                    "bool",
                    "Tuple[int,int]",
                    "None",
                    "Tuple[int]",
                    "Optional[Tuple[int,int]]",
                    "int"
                ],
                "num_outputs": [
                    "int",
                    "Dict[str,int]",
                    "List[int]",
                    "Union[int,str]",
                    "str"
                ],
                "kernel_size": [
                    "bool",
                    "Tuple[int]",
                    "Tuple[int,int]",
                    "Optional[Tuple[int,int]]",
                    "int",
                    "Dict[str,int]",
                    "List[int]"
                ],
                "stride": [
                    "int",
                    "Dict[str,int]",
                    "List[int]",
                    "Union[int,str]",
                    "str"
                ],
                "rate": [
                    "int",
                    "bool",
                    "Tuple[int]",
                    "Tuple[int,int]",
                    "Optional[Tuple[int,int]]",
                    "Dict[str,int]",
                    "List[int]"
                ],
                "scope": [
                    "int",
                    "None",
                    "Dict[str,int]",
                    "List[int]",
                    "Union[int,str]",
                    "str"
                ]
            }
        },
        "stack_blocks_dense": {
            "name": "stack_blocks_dense",
            "location": 126,
            "return": [
                "Mapping",
                "str",
                "List"
            ],
            "arguments": {
                "net": [
                    "str"
                ],
                "blocks": [
                    "List[str]",
                    "str",
                    "Iterable[str]"
                ],
                "output_stride": [
                    "int",
                    "Iterable[str]",
                    "Optional[int]",
                    "Optional[str]",
                    "str",
                    "Optional[Iterable[str]]",
                    "TextIO"
                ],
                "outputs_collections": [
                    "str",
                    "None",
                    "Dict",
                    "bytes",
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "resnet_arg_scope": {
            "name": "resnet_arg_scope",
            "location": 209,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "weight_decay": [
                    "float",
                    "int",
                    "Callable",
                    "str"
                ],
                "batch_norm_decay": [
                    "str",
                    "float"
                ],
                "batch_norm_epsilon": [
                    "str",
                    "float"
                ],
                "batch_norm_scale": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "cnn_server-master/slim/nets/resnet_v1.py": {
        "bottleneck": {
            "name": "bottleneck",
            "location": 69,
            "return": [
                "float",
                "int",
                "str",
                "Union[str, float]"
            ],
            "arguments": {
                "inputs": [],
                "depth": [
                    "bool",
                    "float"
                ],
                "depth_bottleneck": [
                    "bool",
                    "str"
                ],
                "stride": [
                    "bool",
                    "float"
                ],
                "rate": [
                    "int",
                    "Iterable[float]",
                    "List[T]",
                    "str"
                ],
                "outputs_collections": [
                    "int",
                    "None",
                    "str",
                    "List[str]",
                    "float",
                    "bool"
                ],
                "scope": [
                    "Iterable[Mapping[str,Any]]",
                    "None",
                    "Iterable[Mapping]"
                ]
            }
        },
        "resnet_v1": {
            "name": "resnet_v1",
            "location": 115,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "inputs": [
                    "bool",
                    "List[int]"
                ],
                "blocks": [
                    "int",
                    "None",
                    "bool",
                    "Optional[int]"
                ],
                "num_classes": [
                    "Optional[str]",
                    "None",
                    "Optional[float]",
                    "str",
                    "Union[None,int]",
                    "float",
                    "bool",
                    "int"
                ],
                "is_training": [
                    "bool",
                    "int",
                    "Callable[[str],Any]"
                ],
                "global_pool": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Callable",
                    "BinaryIO",
                    "Optional[int]"
                ],
                "output_stride": [
                    "int",
                    "None",
                    "Dict[int,dict]"
                ],
                "include_root_block": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Callable",
                    "BinaryIO",
                    "Optional[int]"
                ],
                "spatial_squeeze": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Callable",
                    "BinaryIO",
                    "Optional[int]"
                ],
                "reuse": [
                    "bool",
                    "List[int]",
                    "None"
                ],
                "scope": [
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "resnet_v1_50": {
            "name": "resnet_v1_50",
            "location": 213,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "inputs": [
                    "str"
                ],
                "num_classes": [
                    "str",
                    "None"
                ],
                "is_training": [
                    "str",
                    "bool"
                ],
                "global_pool": [
                    "str",
                    "bool"
                ],
                "output_stride": [
                    "str",
                    "None"
                ],
                "reuse": [
                    "str",
                    "None"
                ],
                "scope": [
                    "str",
                    "Text"
                ]
            }
        },
        "resnet_v1_101": {
            "name": "resnet_v1_101",
            "location": 237,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "inputs": [
                    "str"
                ],
                "num_classes": [
                    "str",
                    "None"
                ],
                "is_training": [
                    "str",
                    "bool"
                ],
                "global_pool": [
                    "str",
                    "bool"
                ],
                "output_stride": [
                    "str",
                    "None"
                ],
                "reuse": [
                    "str",
                    "None"
                ],
                "scope": [
                    "str",
                    "Text"
                ]
            }
        },
        "resnet_v1_152": {
            "name": "resnet_v1_152",
            "location": 261,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "inputs": [
                    "str"
                ],
                "num_classes": [
                    "str",
                    "None"
                ],
                "is_training": [
                    "str",
                    "bool"
                ],
                "global_pool": [
                    "str",
                    "bool"
                ],
                "output_stride": [
                    "str",
                    "None"
                ],
                "reuse": [
                    "str",
                    "None"
                ],
                "scope": [
                    "str",
                    "Text"
                ]
            }
        },
        "resnet_v1_200": {
            "name": "resnet_v1_200",
            "location": 284,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "inputs": [
                    "str"
                ],
                "num_classes": [
                    "str",
                    "None"
                ],
                "is_training": [
                    "str",
                    "bool"
                ],
                "global_pool": [
                    "str",
                    "bool"
                ],
                "output_stride": [
                    "str",
                    "None"
                ],
                "reuse": [
                    "str",
                    "None"
                ],
                "scope": [
                    "str",
                    "Text"
                ]
            }
        }
    },
    "cnn_server-master/slim/nets/resnet_v1_test.py": {
        "create_test_input": {
            "name": "create_test_input",
            "location": 30,
            "return": [
                "Callable",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "batch_size": [
                    "int",
                    "float",
                    "bool"
                ],
                "height": [
                    "int",
                    "float",
                    "bool"
                ],
                "width": [
                    "int",
                    "float",
                    "bool"
                ],
                "channels": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "ResnetUtilsTest.testSubsampleThreeByThree": {
            "name": "testSubsampleThreeByThree",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResnetUtilsTest.testSubsampleFourByFour": {
            "name": "testSubsampleFourByFour",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResnetUtilsTest.testConv2DSameEven": {
            "name": "testConv2DSameEven",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResnetUtilsTest.testConv2DSameOdd": {
            "name": "testConv2DSameOdd",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResnetUtilsTest._resnet_plain": {
            "name": "_resnet_plain",
            "location": 154,
            "return": [
                "Tuple[(Any, dict)]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Type",
                    "int",
                    "str",
                    "List[str]",
                    "BaseException"
                ],
                "blocks": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "output_stride": [
                    "str",
                    "int",
                    "None",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "scope": [
                    "Type",
                    "None",
                    "Set[str]",
                    "Optional[str]",
                    "str",
                    "Type[T]"
                ]
            }
        },
        "ResnetUtilsTest.testEndPointsV1": {
            "name": "testEndPointsV1",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResnetUtilsTest._stack_blocks_nondense": {
            "name": "_stack_blocks_nondense",
            "location": 187,
            "return": [
                "Mapping",
                "str"
            ],
            "arguments": {
                "self": [],
                "net": [
                    "str"
                ],
                "blocks": [
                    "str",
                    "List",
                    "Callable[,None]",
                    "bool",
                    "numpy.ndarray"
                ]
            }
        },
        "ResnetUtilsTest._atrousValues": {
            "name": "_atrousValues",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bottleneck": [
                    "Dict[str,Any]"
                ]
            }
        },
        "ResnetUtilsTest.testAtrousValuesBottleneck": {
            "name": "testAtrousValuesBottleneck",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResnetCompleteNetworkTest._resnet_small": {
            "name": "_resnet_small",
            "location": 254,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "None",
                    "Optional[numpy.ndarray]",
                    "str",
                    "int",
                    "numpy.ndarray"
                ],
                "num_classes": [
                    "None",
                    "Optional[numpy.ndarray]",
                    "str",
                    "int",
                    "numpy.ndarray"
                ],
                "is_training": [
                    "bool",
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray",
                    "str",
                    "int"
                ],
                "global_pool": [
                    "bool",
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray",
                    "str",
                    "int"
                ],
                "output_stride": [
                    "None",
                    "Optional[numpy.ndarray]",
                    "str",
                    "int",
                    "numpy.ndarray"
                ],
                "include_root_block": [
                    "bool",
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray",
                    "str",
                    "int"
                ],
                "reuse": [
                    "None",
                    "Optional[numpy.ndarray]",
                    "str",
                    "int",
                    "numpy.ndarray"
                ],
                "scope": [
                    "Text",
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray",
                    "str",
                    "int"
                ]
            }
        },
        "ResnetCompleteNetworkTest.testClassificationEndPoints": {
            "name": "testClassificationEndPoints",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResnetCompleteNetworkTest.testClassificationShapes": {
            "name": "testClassificationShapes",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResnetCompleteNetworkTest.testFullyConvolutionalEndpointShapes": {
            "name": "testFullyConvolutionalEndpointShapes",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResnetCompleteNetworkTest.testRootlessFullyConvolutionalEndpointShapes": {
            "name": "testRootlessFullyConvolutionalEndpointShapes",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResnetCompleteNetworkTest.testAtrousFullyConvolutionalEndpointShapes": {
            "name": "testAtrousFullyConvolutionalEndpointShapes",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResnetCompleteNetworkTest.testAtrousFullyConvolutionalValues": {
            "name": "testAtrousFullyConvolutionalValues",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResnetCompleteNetworkTest.testUnknownBatchSize": {
            "name": "testUnknownBatchSize",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResnetCompleteNetworkTest.testFullyConvolutionalUnknownHeightWidth": {
            "name": "testFullyConvolutionalUnknownHeightWidth",
            "location": 414,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResnetCompleteNetworkTest.testAtrousFullyConvolutionalUnknownHeightWidth": {
            "name": "testAtrousFullyConvolutionalUnknownHeightWidth",
            "location": 429,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cnn_server-master/slim/nets/resnet_v2.py": {
        "bottleneck": {
            "name": "bottleneck",
            "location": 64,
            "return": [
                "float",
                "int",
                "str",
                "Union[str, float]"
            ],
            "arguments": {
                "inputs": [],
                "depth": [
                    "Sequence[str]",
                    "Callable",
                    "Union[Callable,str]",
                    "bool",
                    "str"
                ],
                "depth_bottleneck": [
                    "bool",
                    "str"
                ],
                "stride": [
                    "bool",
                    "float"
                ],
                "rate": [
                    "int",
                    "Iterable[float]",
                    "List[T]",
                    "str"
                ],
                "outputs_collections": [
                    "int",
                    "None",
                    "str",
                    "List[str]",
                    "float",
                    "bool"
                ],
                "scope": [
                    "Iterable[Mapping[str,Any]]",
                    "Iterable[cirq.Qid]",
                    "None",
                    "Iterable[int]",
                    "Iterable[Mapping]"
                ]
            }
        },
        "resnet_v2": {
            "name": "resnet_v2",
            "location": 113,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "inputs": [
                    "bool",
                    "List[int]"
                ],
                "blocks": [
                    "int",
                    "None",
                    "bool",
                    "Optional[int]"
                ],
                "num_classes": [
                    "Optional[str]",
                    "None",
                    "Optional[float]",
                    "str",
                    "Union[None,int]",
                    "float",
                    "bool",
                    "int"
                ],
                "is_training": [
                    "bool",
                    "int",
                    "Callable[[str],Any]"
                ],
                "global_pool": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Callable",
                    "BinaryIO",
                    "Optional[int]"
                ],
                "output_stride": [
                    "int",
                    "None",
                    "Dict[int,dict]"
                ],
                "include_root_block": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Callable",
                    "BinaryIO",
                    "Optional[int]"
                ],
                "spatial_squeeze": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Callable",
                    "BinaryIO",
                    "Optional[int]"
                ],
                "reuse": [
                    "bool",
                    "List[int]",
                    "None"
                ],
                "scope": [
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "resnet_v2_50": {
            "name": "resnet_v2_50",
            "location": 222,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "Optional[Iterable[str]]",
                    "Iterable[str]",
                    "None"
                ],
                "num_classes": [
                    "str",
                    "None",
                    "Optional[Iterable[str]]",
                    "Iterable[str]"
                ],
                "is_training": [
                    "bool",
                    "str",
                    "Optional[Iterable[str]]"
                ],
                "global_pool": [
                    "bool",
                    "str",
                    "Optional[Iterable[str]]"
                ],
                "output_stride": [
                    "str",
                    "None",
                    "Optional[Iterable[str]]",
                    "Iterable[str]"
                ],
                "reuse": [
                    "str",
                    "None",
                    "Optional[Iterable[str]]",
                    "Iterable[str]"
                ],
                "scope": [
                    "Text",
                    "str",
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "resnet_v2_101": {
            "name": "resnet_v2_101",
            "location": 245,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "Optional[Iterable[str]]",
                    "Iterable[str]",
                    "None"
                ],
                "num_classes": [
                    "str",
                    "None",
                    "Optional[Iterable[str]]",
                    "Iterable[str]"
                ],
                "is_training": [
                    "bool",
                    "str",
                    "Optional[Iterable[str]]"
                ],
                "global_pool": [
                    "bool",
                    "str",
                    "Optional[Iterable[str]]"
                ],
                "output_stride": [
                    "str",
                    "None",
                    "Optional[Iterable[str]]",
                    "Iterable[str]"
                ],
                "reuse": [
                    "str",
                    "None",
                    "Optional[Iterable[str]]",
                    "Iterable[str]"
                ],
                "scope": [
                    "Text",
                    "str",
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "resnet_v2_152": {
            "name": "resnet_v2_152",
            "location": 268,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "Optional[Iterable[str]]",
                    "Iterable[str]",
                    "None"
                ],
                "num_classes": [
                    "str",
                    "None",
                    "Optional[Iterable[str]]",
                    "Iterable[str]"
                ],
                "is_training": [
                    "bool",
                    "str",
                    "Optional[Iterable[str]]"
                ],
                "global_pool": [
                    "bool",
                    "str",
                    "Optional[Iterable[str]]"
                ],
                "output_stride": [
                    "str",
                    "None",
                    "Optional[Iterable[str]]",
                    "Iterable[str]"
                ],
                "reuse": [
                    "str",
                    "None",
                    "Optional[Iterable[str]]",
                    "Iterable[str]"
                ],
                "scope": [
                    "Text",
                    "str",
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "resnet_v2_200": {
            "name": "resnet_v2_200",
            "location": 291,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "Optional[Iterable[str]]",
                    "Iterable[str]",
                    "None"
                ],
                "num_classes": [
                    "str",
                    "None",
                    "Optional[Iterable[str]]",
                    "Iterable[str]"
                ],
                "is_training": [
                    "bool",
                    "str",
                    "Optional[Iterable[str]]"
                ],
                "global_pool": [
                    "bool",
                    "str",
                    "Optional[Iterable[str]]"
                ],
                "output_stride": [
                    "str",
                    "None",
                    "Optional[Iterable[str]]",
                    "Iterable[str]"
                ],
                "reuse": [
                    "str",
                    "None",
                    "Optional[Iterable[str]]",
                    "Iterable[str]"
                ],
                "scope": [
                    "Text",
                    "str",
                    "Optional[Iterable[str]]"
                ]
            }
        }
    },
    "cnn_server-master/slim/nets/resnet_v2_test.py": {
        "create_test_input": {
            "name": "create_test_input",
            "location": 30,
            "return": [
                "Callable",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "batch_size": [
                    "int",
                    "float",
                    "bool"
                ],
                "height": [
                    "int",
                    "float",
                    "bool"
                ],
                "width": [
                    "int",
                    "float",
                    "bool"
                ],
                "channels": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "ResnetUtilsTest.testSubsampleThreeByThree": {
            "name": "testSubsampleThreeByThree",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResnetUtilsTest.testSubsampleFourByFour": {
            "name": "testSubsampleFourByFour",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResnetUtilsTest.testConv2DSameEven": {
            "name": "testConv2DSameEven",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResnetUtilsTest.testConv2DSameOdd": {
            "name": "testConv2DSameOdd",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResnetUtilsTest._resnet_plain": {
            "name": "_resnet_plain",
            "location": 154,
            "return": [
                "Tuple[(Any, dict)]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Type",
                    "int",
                    "str",
                    "List[str]",
                    "BaseException"
                ],
                "blocks": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "output_stride": [
                    "str",
                    "int",
                    "None",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "scope": [
                    "Type",
                    "None",
                    "Set[str]",
                    "Optional[str]",
                    "str",
                    "Type[T]"
                ]
            }
        },
        "ResnetUtilsTest.testEndPointsV2": {
            "name": "testEndPointsV2",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResnetUtilsTest._stack_blocks_nondense": {
            "name": "_stack_blocks_nondense",
            "location": 187,
            "return": [
                "Mapping",
                "str"
            ],
            "arguments": {
                "self": [],
                "net": [
                    "str"
                ],
                "blocks": [
                    "str",
                    "List",
                    "Callable[,None]",
                    "bool",
                    "numpy.ndarray"
                ]
            }
        },
        "ResnetUtilsTest._atrousValues": {
            "name": "_atrousValues",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bottleneck": [
                    "Dict[str,Any]"
                ]
            }
        },
        "ResnetUtilsTest.testAtrousValuesBottleneck": {
            "name": "testAtrousValuesBottleneck",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResnetCompleteNetworkTest._resnet_small": {
            "name": "_resnet_small",
            "location": 254,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "None",
                    "Optional[numpy.ndarray]",
                    "str",
                    "int",
                    "numpy.ndarray"
                ],
                "num_classes": [
                    "None",
                    "Optional[numpy.ndarray]",
                    "str",
                    "int",
                    "numpy.ndarray"
                ],
                "is_training": [
                    "bool",
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray",
                    "str",
                    "int"
                ],
                "global_pool": [
                    "bool",
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray",
                    "str",
                    "int"
                ],
                "output_stride": [
                    "None",
                    "Optional[numpy.ndarray]",
                    "str",
                    "int",
                    "numpy.ndarray"
                ],
                "include_root_block": [
                    "bool",
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray",
                    "str",
                    "int"
                ],
                "reuse": [
                    "None",
                    "Optional[numpy.ndarray]",
                    "str",
                    "int",
                    "numpy.ndarray"
                ],
                "scope": [
                    "Text",
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray",
                    "str",
                    "int"
                ]
            }
        },
        "ResnetCompleteNetworkTest.testClassificationEndPoints": {
            "name": "testClassificationEndPoints",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResnetCompleteNetworkTest.testClassificationShapes": {
            "name": "testClassificationShapes",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResnetCompleteNetworkTest.testFullyConvolutionalEndpointShapes": {
            "name": "testFullyConvolutionalEndpointShapes",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResnetCompleteNetworkTest.testRootlessFullyConvolutionalEndpointShapes": {
            "name": "testRootlessFullyConvolutionalEndpointShapes",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResnetCompleteNetworkTest.testAtrousFullyConvolutionalEndpointShapes": {
            "name": "testAtrousFullyConvolutionalEndpointShapes",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResnetCompleteNetworkTest.testAtrousFullyConvolutionalValues": {
            "name": "testAtrousFullyConvolutionalValues",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResnetCompleteNetworkTest.testUnknownBatchSize": {
            "name": "testUnknownBatchSize",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResnetCompleteNetworkTest.testFullyConvolutionalUnknownHeightWidth": {
            "name": "testFullyConvolutionalUnknownHeightWidth",
            "location": 416,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResnetCompleteNetworkTest.testAtrousFullyConvolutionalUnknownHeightWidth": {
            "name": "testAtrousFullyConvolutionalUnknownHeightWidth",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cnn_server-master/slim/nets/vgg.py": {
        "vgg_arg_scope": {
            "name": "vgg_arg_scope",
            "location": 49,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "weight_decay": [
                    "float",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "vgg_a": {
            "name": "vgg_a",
            "location": 66,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "inputs": [
                    "Type",
                    "float",
                    "Optional[Scope]",
                    "None"
                ],
                "num_classes": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "is_training": [
                    "bool",
                    "Optional[str]",
                    "str"
                ],
                "dropout_keep_prob": [
                    "float",
                    "Optional[str]",
                    "str"
                ],
                "spatial_squeeze": [
                    "bool",
                    "tensorflow.Tensor",
                    "Optional[Callable]"
                ],
                "scope": [
                    "str",
                    "Text"
                ],
                "fc_conv_padding": [
                    "Text",
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "vgg_16": {
            "name": "vgg_16",
            "location": 131,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "Type",
                    "None",
                    "float",
                    "Optional[Scope]",
                    "Type[object]"
                ],
                "num_classes": [
                    "int",
                    "bool"
                ],
                "is_training": [
                    "bool",
                    "int"
                ],
                "dropout_keep_prob": [
                    "float",
                    "bool",
                    "int"
                ],
                "spatial_squeeze": [
                    "bool",
                    "Exception",
                    "str"
                ],
                "scope": [
                    "Optional[Scope]",
                    "Text"
                ],
                "fc_conv_padding": [
                    "Text",
                    "str",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        },
        "vgg_19": {
            "name": "vgg_19",
            "location": 196,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "Type",
                    "None",
                    "float",
                    "Optional[Scope]",
                    "Type[object]"
                ],
                "num_classes": [
                    "int",
                    "bool"
                ],
                "is_training": [
                    "bool",
                    "int"
                ],
                "dropout_keep_prob": [
                    "float",
                    "bool",
                    "int"
                ],
                "spatial_squeeze": [
                    "bool",
                    "Exception",
                    "str"
                ],
                "scope": [
                    "Optional[Scope]",
                    "Text"
                ],
                "fc_conv_padding": [
                    "Text",
                    "str",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        }
    },
    "cnn_server-master/slim/nets/vgg_test.py": {
        "VGGATest.testBuild": {
            "name": "testBuild",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VGGATest.testFullyConvolutional": {
            "name": "testFullyConvolutional",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VGGATest.testEndPoints": {
            "name": "testEndPoints",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VGGATest.testModelVariables": {
            "name": "testModelVariables",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VGGATest.testEvaluation": {
            "name": "testEvaluation",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VGGATest.testTrainEvalWithReuse": {
            "name": "testTrainEvalWithReuse",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VGGATest.testForward": {
            "name": "testForward",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VGG16Test.testBuild": {
            "name": "testBuild",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VGG16Test.testFullyConvolutional": {
            "name": "testFullyConvolutional",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VGG16Test.testEndPoints": {
            "name": "testEndPoints",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VGG16Test.testModelVariables": {
            "name": "testModelVariables",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VGG16Test.testEvaluation": {
            "name": "testEvaluation",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VGG16Test.testTrainEvalWithReuse": {
            "name": "testTrainEvalWithReuse",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VGG16Test.testForward": {
            "name": "testForward",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VGG19Test.testBuild": {
            "name": "testBuild",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VGG19Test.testFullyConvolutional": {
            "name": "testFullyConvolutional",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VGG19Test.testEndPoints": {
            "name": "testEndPoints",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VGG19Test.testModelVariables": {
            "name": "testModelVariables",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VGG19Test.testEvaluation": {
            "name": "testEvaluation",
            "location": 409,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VGG19Test.testTrainEvalWithReuse": {
            "name": "testTrainEvalWithReuse",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VGG19Test.testForward": {
            "name": "testForward",
            "location": 444,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cnn_server-master/slim/nets/__init__.py": {},
    "cnn_server-master/slim/preprocessing/cifarnet_preprocessing.py": {
        "preprocess_for_train": {
            "name": "preprocess_for_train",
            "location": 30,
            "return": [
                "int",
                "Tuple[Tuple[int, Any]]"
            ],
            "arguments": {
                "image": [
                    "List[int]",
                    "List[float]",
                    "int",
                    "bool"
                ],
                "output_height": [
                    "int",
                    "bytes",
                    "Tuple"
                ],
                "output_width": [
                    "int",
                    "bytes",
                    "Tuple"
                ],
                "padding": [
                    "int",
                    "Tuple[float,float]",
                    "float",
                    "List",
                    "Hashable"
                ]
            }
        },
        "preprocess_for_eval": {
            "name": "preprocess_for_eval",
            "location": 73,
            "return": [
                "int",
                "Tuple[Tuple[int, Any]]"
            ],
            "arguments": {
                "image": [
                    "int",
                    "float",
                    "List[int]",
                    "List[float]"
                ],
                "output_height": [
                    "bool",
                    "List[int]",
                    "Tuple[int]",
                    "int"
                ],
                "output_width": [
                    "bool",
                    "List[int]",
                    "Tuple[int]",
                    "int"
                ]
            }
        },
        "preprocess_image": {
            "name": "preprocess_image",
            "location": 98,
            "return": [
                "float",
                "List[dict]",
                "int",
                "bool",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "image": [
                    "int",
                    "str",
                    "float",
                    "bool",
                    "None",
                    "Optional[tensorflow.keras.regularizers.Regularizer]"
                ],
                "output_height": [
                    "int",
                    "str",
                    "float",
                    "bool",
                    "None",
                    "Optional[tensorflow.keras.regularizers.Regularizer]"
                ],
                "output_width": [
                    "int",
                    "str",
                    "float",
                    "bool",
                    "None",
                    "Optional[tensorflow.keras.regularizers.Regularizer]"
                ],
                "is_training": [
                    "bool",
                    "str",
                    "Set[str]"
                ]
            }
        }
    },
    "cnn_server-master/slim/preprocessing/inception_preprocessing.py": {
        "apply_with_random_selector": {
            "name": "apply_with_random_selector",
            "location": 26,
            "return": [
                "float",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "bool",
                    "int"
                ],
                "func": [
                    "float",
                    "bool",
                    "int"
                ],
                "num_cases": [
                    "int",
                    "float"
                ]
            }
        },
        "distort_color": {
            "name": "distort_color",
            "location": 45,
            "return": [
                "str",
                "bool",
                "tensorflow.Tensor"
            ],
            "arguments": {
                "image": [
                    "int",
                    "bool",
                    "str",
                    "Optional[Union[int,str]]",
                    "None"
                ],
                "color_ordering": [
                    "int",
                    "bool",
                    "Iterable[Any]"
                ],
                "fast_mode": [
                    "bool",
                    "int",
                    "Iterable[Any]"
                ],
                "scope": [
                    "Union[int,float]",
                    "str",
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "distorted_bounding_box_crop": {
            "name": "distorted_bounding_box_crop",
            "location": 99,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "image": [
                    "int",
                    "Callable",
                    "Optional[str]",
                    "str",
                    "None",
                    "bool"
                ],
                "bbox": [
                    "int",
                    "Callable",
                    "Optional[str]",
                    "str",
                    "None",
                    "bool"
                ],
                "min_object_covered": [
                    "bool",
                    "float"
                ],
                "aspect_ratio_range": [
                    "bool",
                    "Tuple[float]"
                ],
                "area_range": [
                    "bool",
                    "Tuple[float]"
                ],
                "max_attempts": [
                    "bool",
                    "int"
                ],
                "scope": [
                    "int",
                    "None",
                    "Pattern",
                    "bool",
                    "List[Union[PipeChain,str]]"
                ]
            }
        },
        "preprocess_for_train": {
            "name": "preprocess_for_train",
            "location": 156,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "image": [
                    "Callable",
                    "Tuple[int]",
                    "int",
                    "bool"
                ],
                "height": [
                    "Callable",
                    "Tuple[int]",
                    "int",
                    "Optional[Iterable[str]]",
                    "None",
                    "Union[int,str,None]",
                    "str"
                ],
                "width": [
                    "Callable",
                    "Tuple[int]",
                    "int",
                    "Optional[Iterable[str]]",
                    "None",
                    "Union[int,str,None]",
                    "str"
                ],
                "bbox": [
                    "Optional[Iterable[str]]",
                    "Iterable[str]",
                    "Union[int,str,None]",
                    "None",
                    "Optional[Tuple[str,int]]",
                    "int",
                    "str"
                ],
                "fast_mode": [
                    "bool",
                    "bytes",
                    "int",
                    "float",
                    "Tuple[int]"
                ],
                "scope": [
                    "str",
                    "None",
                    "int",
                    "Dict[str,Any]",
                    "Tuple",
                    "Callable",
                    "Optional[int]"
                ]
            }
        },
        "preprocess_for_eval": {
            "name": "preprocess_for_eval",
            "location": 237,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "image": [
                    "int",
                    "str",
                    "Tuple",
                    "bool"
                ],
                "height": [
                    "int",
                    "Dict[str,Any]",
                    "Tuple",
                    "Callable",
                    "str",
                    "List[int]"
                ],
                "width": [
                    "int",
                    "Dict[str,Any]",
                    "Tuple",
                    "Callable",
                    "str",
                    "List[int]"
                ],
                "central_fraction": [
                    "float",
                    "Optional[Tuple[int,int]]",
                    "int",
                    "bool",
                    "Tuple[int,int]"
                ],
                "scope": [
                    "int",
                    "None",
                    "str",
                    "Dict",
                    "bool",
                    "Optional[Dict]"
                ]
            }
        },
        "preprocess_image": {
            "name": "preprocess_image",
            "location": 278,
            "return": [
                "str",
                "int",
                "Callable",
                "List[Union[\"PipeChain\", str]]",
                "Union[str, Sequence[str]]"
            ],
            "arguments": {
                "image": [
                    "bool",
                    "List[int]",
                    "List[float]",
                    "int"
                ],
                "height": [
                    "bool",
                    "List[int]",
                    "List[float]",
                    "int"
                ],
                "width": [
                    "bool",
                    "List[int]",
                    "List[float]",
                    "int"
                ],
                "is_training": [
                    "bool",
                    "Iterator[Tuple[int,Any]]"
                ],
                "bbox": [
                    "float",
                    "None",
                    "int",
                    "bool"
                ],
                "fast_mode": [
                    "bool",
                    "float",
                    "int"
                ]
            }
        }
    },
    "cnn_server-master/slim/preprocessing/lenet_preprocessing.py": {
        "preprocess_image": {
            "name": "preprocess_image",
            "location": 26,
            "return": [
                "int",
                "tuple"
            ],
            "arguments": {
                "image": [
                    "bool",
                    "Optional[Union[int,str]]",
                    "str",
                    "None"
                ],
                "output_height": [
                    "int",
                    "List[int]",
                    "Tuple[int]",
                    "Callable",
                    "bool",
                    "Iterable[str]"
                ],
                "output_width": [
                    "int",
                    "List[int]",
                    "Tuple[int]",
                    "Callable",
                    "bool",
                    "Iterable[str]"
                ],
                "is_training": [
                    "bool",
                    "str",
                    "Set[str]"
                ]
            }
        }
    },
    "cnn_server-master/slim/preprocessing/preprocessing_factory.py": {
        "get_preprocessing": {
            "name": "get_preprocessing",
            "location": 31,
            "return": [
                "Callable"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "is_training": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "get_preprocessing.preprocessing_fn": {
            "name": "preprocessing_fn",
            "location": 71,
            "return": [
                "bool",
                "tensorflow.Tensor",
                "Dict[str, str]"
            ],
            "arguments": {
                "image": [
                    "int",
                    "str",
                    "bool"
                ],
                "output_height": [
                    "int",
                    "str",
                    "bool"
                ],
                "output_width": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "cnn_server-master/slim/preprocessing/vgg_preprocessing.py": {
        "_crop": {
            "name": "_crop",
            "location": 49,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "image": [
                    "bool",
                    "List",
                    "List[int]",
                    "float"
                ],
                "offset_height": [
                    "int",
                    "bool"
                ],
                "offset_width": [
                    "int",
                    "bool"
                ],
                "crop_height": [
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ],
                "crop_width": [
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ]
            }
        },
        "_random_crop": {
            "name": "_random_crop",
            "location": 94,
            "return": [
                "list"
            ],
            "arguments": {
                "image_list": [
                    "Dict[cirq.ops.QubitId, int]",
                    "str",
                    "List[Dict[str, Any]]",
                    "List[float]",
                    "List[int]",
                    "List[List[int]]",
                    "bool",
                    "int"
                ],
                "crop_height": [
                    "List[float]",
                    "str"
                ],
                "crop_width": [
                    "List[float]",
                    "str"
                ]
            }
        },
        "_central_crop": {
            "name": "_central_crop",
            "location": 178,
            "return": [
                "list"
            ],
            "arguments": {
                "image_list": [
                    "bool",
                    "Iterable[Any]"
                ],
                "crop_height": [
                    "int",
                    "List[int]",
                    "Dict",
                    "List",
                    "bool"
                ],
                "crop_width": [
                    "int",
                    "Dict[cirq.ops.QubitId,int]"
                ]
            }
        },
        "_mean_image_subtraction": {
            "name": "_mean_image_subtraction",
            "location": 203,
            "return": [
                "List[List[str]]",
                "dict",
                "Callable"
            ],
            "arguments": {
                "image": [
                    "int",
                    "List[int]",
                    "float",
                    "List[bool]"
                ],
                "means": [
                    "str",
                    "int",
                    "bool",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "_smallest_size_at_least": {
            "name": "_smallest_size_at_least",
            "location": 236,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "height": [
                    "int"
                ],
                "width": [
                    "int",
                    "List[str]"
                ],
                "smallest_side": [
                    "bytes",
                    "float",
                    "cirq.ops.Qid"
                ]
            }
        },
        "_aspect_preserving_resize": {
            "name": "_aspect_preserving_resize",
            "location": 266,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "image": [
                    "int"
                ],
                "smallest_side": [
                    "Sequence[cirq.ops.Qid]"
                ]
            }
        },
        "preprocess_for_train": {
            "name": "preprocess_for_train",
            "location": 291,
            "return": [
                "str",
                "int",
                "float",
                "List[tensorflow.Tensor]"
            ],
            "arguments": {
                "image": [
                    "float",
                    "List[int]",
                    "int",
                    "Callable",
                    "bool"
                ],
                "output_height": [
                    "int",
                    "Callable",
                    "bool"
                ],
                "output_width": [
                    "int",
                    "Callable",
                    "bool"
                ],
                "resize_side_min": [
                    "int",
                    "bool",
                    "str"
                ],
                "resize_side_max": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "preprocess_for_eval": {
            "name": "preprocess_for_eval",
            "location": 324,
            "return": [
                "str",
                "int",
                "float",
                "List[tensorflow.Tensor]"
            ],
            "arguments": {
                "image": [
                    "int",
                    "List[int]",
                    "bool"
                ],
                "output_height": [
                    "int",
                    "List[str]",
                    "bool"
                ],
                "output_width": [
                    "int",
                    "List[str]",
                    "bool"
                ],
                "resize_side": [
                    "int",
                    "float",
                    "Tuple",
                    "str",
                    "List[str]"
                ]
            }
        },
        "preprocess_image": {
            "name": "preprocess_image",
            "location": 343,
            "return": [
                "float",
                "List[dict]",
                "int",
                "bool",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "image": [
                    "int",
                    "Callable",
                    "bool"
                ],
                "output_height": [
                    "int",
                    "Callable",
                    "bool"
                ],
                "output_width": [
                    "int",
                    "Callable",
                    "bool"
                ],
                "is_training": [
                    "bool",
                    "str",
                    "Set[str]"
                ],
                "resize_side_min": [
                    "int",
                    "Callable",
                    "bool"
                ],
                "resize_side_max": [
                    "int",
                    "str",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "cnn_server-master/slim/preprocessing/__init__.py": {},
    "cnn_server-master/tf_experiments/eval_image_classifier_cmd.py": {
        "main": {
            "name": "main",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "str",
                    "float",
                    "Set"
                ]
            }
        }
    },
    "cnn_server-master/tf_experiments/eval_root.py": {},
    "cnn_server-master/tf_experiments/eval_settings.py": {},
    "cnn_server-master/tf_experiments/inference_image_classifier.py": {
        "map_predictions_to_labels": {
            "name": "map_predictions_to_labels",
            "location": 12,
            "return": [
                "Tuple[(list, Any)]"
            ],
            "arguments": {
                "protobuf_dir": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "predictions": [
                    "bool",
                    "dict",
                    "List[str]",
                    "str"
                ],
                "return_labels": [
                    "bool",
                    "Dict",
                    "str",
                    "List[str]"
                ]
            }
        },
        "inference_on_image": {
            "name": "inference_on_image",
            "location": 36,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "bot_id": [
                    "str",
                    "bool"
                ],
                "suffix": [
                    "str",
                    "Optional[str]"
                ],
                "setting_id": [
                    "str",
                    "bool"
                ],
                "image_file": [
                    "str"
                ],
                "network_name": [
                    "Text",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "return_labels": [
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "cnn_server-master/tf_experiments/playground.py": {},
    "cnn_server-master/tf_experiments/random_copy_images.py": {
        "sample": {
            "name": "sample",
            "location": 18,
            "return": [
                "list"
            ],
            "arguments": {
                "lst": [
                    "int",
                    "list",
                    "Sequence[int]"
                ],
                "n": [
                    "int",
                    "bool",
                    "Iterable[T]"
                ]
            }
        }
    },
    "cnn_server-master/tf_experiments/read_protobufs.py": {
        "_check_dir": {
            "name": "_check_dir",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "dir_path": [
                    "str"
                ]
            }
        },
        "eval": {
            "name": "eval",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "bot_id": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "Dict[str,Any]",
                    "Optional[List[str]]"
                ],
                "bot_suffix": [
                    "str",
                    "int",
                    "Tuple[str]",
                    "Optional[int]",
                    "Dict[int,int]"
                ],
                "setting_id": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]",
                    "Optional[Address]"
                ],
                "dataset_split": [
                    "Text",
                    "str",
                    "Optional[float]"
                ],
                "dataset_name": [
                    "Text",
                    "str",
                    "Optional[float]"
                ],
                "model_name": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "preprocessing": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]",
                    "List[str]"
                ],
                "moving_average_decay": [
                    "str",
                    "None",
                    "int",
                    "List[str]",
                    "bool"
                ],
                "tf_master": [
                    "Text",
                    "Union[Callable,Set[str],str]",
                    "str"
                ]
            }
        }
    },
    "cnn_server-master/tf_experiments/save_latest_checkpoints.py": {},
    "cnn_server-master/tf_experiments/train_settings_29-31.py": {},
    "cnn_server-master/tf_experiments/train_settings_from_cars.py": {},
    "cnn_server-master/tf_experiments/train_settings_from_imagenet.py": {},
    "cnn_server-master/tf_experiments/train_settings_from_scratch.py": {},
    "cnn_server-master/tf_experiments/train_setting_03.py": {},
    "cnn_server-master/tf_experiments/train_setting_04.py": {},
    "cnn_server-master/tf_experiments/train_setting_05-07.py": {},
    "cnn_server-master/tf_experiments/train_setting_09.py": {},
    "cnn_server-master/tf_experiments/train_setting_10-12.py": {},
    "cnn_server-master/tf_experiments/train_setting_13_14_22_23_24.py": {},
    "cnn_server-master/tf_experiments/train_setting_14_22_23.py": {},
    "cnn_server-master/tf_experiments/train_setting_15_19_20_21.py": {},
    "cnn_server-master/tf_experiments/train_setting_25_27.py": {},
    "cnn_server-master/tf_experiments/train_setting_26_28.py": {},
    "cnn_server-master/tf_experiments/train_setting_35-43.py": {},
    "cnn_server-master/tf_experiments/train_setting_from_cars.py": {
        "_check_root_model_dir": {
            "name": "_check_root_model_dir",
            "location": 7,
            "return": [
                "bool"
            ],
            "arguments": {
                "root_model_dir": [
                    "str",
                    "Callable",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "_check_protobuf_dir": {
            "name": "_check_protobuf_dir",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "protobuf_dir": [
                    "str"
                ]
            }
        },
        "_check_bot_model_dir": {
            "name": "_check_bot_model_dir",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "bot_model_dir": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "train": {
            "name": "train",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "setting_id": [
                    "str",
                    "Dict[str,Union[int,Any,bool]]",
                    "int",
                    "float"
                ],
                "bot_id": [
                    "str",
                    "Dict[str,Union[int,Any,bool]]",
                    "int",
                    "float"
                ],
                "hours": [
                    "int",
                    "str"
                ],
                "minutes": [
                    "int",
                    "str"
                ],
                "seconds": [
                    "int",
                    "str"
                ],
                "summary_secs": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "cnn_server-master/tf_experiments/train_setting_from_imagenet.py": {
        "_check_root_model_dir": {
            "name": "_check_root_model_dir",
            "location": 7,
            "return": [
                "bool"
            ],
            "arguments": {
                "root_model_dir": [
                    "str",
                    "Callable",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "_check_protobuf_dir": {
            "name": "_check_protobuf_dir",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "protobuf_dir": [
                    "str"
                ]
            }
        },
        "_check_bot_model_dir": {
            "name": "_check_bot_model_dir",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "bot_model_dir": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "train": {
            "name": "train",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "setting_id": [
                    "str",
                    "Dict[str,Union[int,Any,bool]]",
                    "int",
                    "float"
                ],
                "bot_id": [
                    "str",
                    "Dict[str,Union[int,Any,bool]]",
                    "int",
                    "float"
                ],
                "hours": [
                    "int",
                    "str"
                ],
                "minutes": [
                    "int",
                    "str"
                ],
                "seconds": [
                    "int",
                    "str"
                ],
                "summary_secs": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "cnn_server-master/tf_experiments/train_setting_from_scratch.py": {
        "_check_root_model_dir": {
            "name": "_check_root_model_dir",
            "location": 7,
            "return": [
                "bool"
            ],
            "arguments": {
                "root_model_dir": [
                    "str",
                    "Callable",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "_check_protobuf_dir": {
            "name": "_check_protobuf_dir",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "protobuf_dir": [
                    "str"
                ]
            }
        },
        "_check_bot_model_dir": {
            "name": "_check_bot_model_dir",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "bot_model_dir": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "train": {
            "name": "train",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "setting_id": [
                    "str",
                    "Dict[str,Union[int,Any,bool]]",
                    "int",
                    "float"
                ],
                "bot_id": [
                    "str",
                    "Dict[str,Union[int,Any,bool]]",
                    "int",
                    "float"
                ],
                "hours": [
                    "int",
                    "str",
                    "Dict[str,Union[int,Any,bool]]"
                ],
                "minutes": [
                    "int",
                    "str",
                    "Dict[str,Union[int,Any,bool]]"
                ],
                "seconds": [
                    "int",
                    "str",
                    "Dict[str,Union[int,Any,bool]]"
                ],
                "summary_secs": [
                    "int",
                    "str",
                    "Dict[str,Union[int,Any,bool]]"
                ]
            }
        }
    },
    "cnn_server-master/tf_experiments/__init__.py": {},
    "cnn_server-master/tf_experiments/datasets/bot_dataset.py": {
        "get_split": {
            "name": "get_split",
            "location": 41,
            "return": [
                "str",
                "Callable[[str], None]"
            ],
            "arguments": {
                "split_name": [
                    "str"
                ],
                "dataset_dir": [
                    "str",
                    "Dict",
                    "Tuple"
                ],
                "file_pattern": [
                    "str"
                ],
                "reader": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Optional[Callable]",
                    "Callable"
                ]
            }
        }
    },
    "cnn_server-master/tf_experiments/datasets/convert_all_trainingsets.py": {
        "_check_training_dir": {
            "name": "_check_training_dir",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "tr_dir": [
                    "str",
                    "bool"
                ]
            }
        },
        "_check_proto_dir": {
            "name": "_check_proto_dir",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "pr_dir": [
                    "str",
                    "bool"
                ]
            }
        },
        "_convert": {
            "name": "_convert",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "bot_id": [
                    "int",
                    "str"
                ]
            }
        },
        "convert_all_trainingsets": {
            "name": "convert_all_trainingsets",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cnn_server-master/tf_experiments/datasets/convert_tf_settings.py": {
        "_check_training_dir": {
            "name": "_check_training_dir",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "tr_dir": [
                    "str",
                    "bool"
                ]
            }
        },
        "_check_proto_dir": {
            "name": "_check_proto_dir",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "pr_dir": [
                    "str"
                ]
            }
        },
        "_convert": {
            "name": "_convert",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "bot_id": [
                    "str",
                    "bool"
                ],
                "transfer_setting": [
                    "str",
                    "bool"
                ]
            }
        },
        "convert_all_trainingsets": {
            "name": "convert_all_trainingsets",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "transfer_setting": [
                    "Dict[str,Any]",
                    "str",
                    "Iterable[str]"
                ]
            }
        }
    },
    "cnn_server-master/tf_experiments/datasets/convert_to_protobuf.py": {
        "_get_dataset_filename": {
            "name": "_get_dataset_filename",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "protobuf_dir": [
                    "str",
                    "int"
                ],
                "split_name": [
                    "str",
                    "bool",
                    "int"
                ],
                "shard_id": [
                    "str",
                    "bool",
                    "int"
                ],
                "num_shards": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "_dataset_exists": {
            "name": "_dataset_exists",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "dataset_dir": [
                    "str",
                    "Type"
                ],
                "num_shards": [
                    "str",
                    "bool",
                    "Sequence[Iterable[Any]]",
                    "None",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "_get_filenames_and_classes": {
            "name": "_get_filenames_and_classes",
            "location": 50,
            "return": [
                "Tuple[(list, list, list)]"
            ],
            "arguments": {
                "training_data_dir": [
                    "str"
                ],
                "fract_validation": [
                    "str",
                    "int",
                    "List[str]",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "_convert_dataset": {
            "name": "_convert_dataset",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "split_name": [
                    "str",
                    "Dict[str,str]",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "filenames": [
                    "int",
                    "float"
                ],
                "class_names_to_ids": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "bool"
                ],
                "protobuf_dir": [
                    "str",
                    "Dict[str,str]",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "num_shards": [
                    "int",
                    "float"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "training_data_dir": [
                    "str",
                    "Dict",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "protobuf_dir": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "List",
                    "None"
                ],
                "fract_validation": [
                    "float",
                    "str",
                    "Dict",
                    "bool",
                    "Optional[str]"
                ],
                "num_shards": [
                    "int",
                    "str",
                    "Optional[Union[int,Any]]",
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "Union[str,os.PathLike]"
                ]
            }
        },
        "ImageReader.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageReader.read_image_dims": {
            "name": "read_image_dims",
            "location": 23,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "sess": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "image_data": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "ImageReader.decode_jpeg": {
            "name": "decode_jpeg",
            "location": 27,
            "return": [
                "str",
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "sess": [
                    "int",
                    "Dict[str,Any]"
                ],
                "image_data": [
                    "int",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "cnn_server-master/tf_experiments/datasets/dataset_factory.py": {
        "get_dataset": {
            "name": "get_dataset",
            "location": 36,
            "return": [
                "str",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Sequence[str]"
                ],
                "split_name": [
                    "str",
                    "bool"
                ],
                "dataset_dir": [
                    "str",
                    "bool"
                ],
                "file_pattern": [
                    "str",
                    "bool",
                    "None"
                ],
                "reader": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        }
    },
    "cnn_server-master/tf_experiments/datasets/dataset_utils.py": {
        "int64_feature": {
            "name": "int64_feature",
            "location": 30,
            "return": [
                "Callable",
                "str",
                "Tuple[Any, Any, Any]",
                "list"
            ],
            "arguments": {
                "values": [
                    "bool",
                    "float",
                    "Iterable",
                    "Hashable"
                ]
            }
        },
        "bytes_feature": {
            "name": "bytes_feature",
            "location": 44,
            "return": [
                "Callable",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "values": [
                    "float",
                    "List",
                    "List[str]",
                    "T"
                ]
            }
        },
        "image_to_tfexample": {
            "name": "image_to_tfexample",
            "location": 56,
            "return": [
                "List[str]",
                "Callable",
                "str",
                "int"
            ],
            "arguments": {
                "image_data": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "image_format": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "height": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "width": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "class_id": [
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "download_and_uncompress_tarball": {
            "name": "download_and_uncompress_tarball",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "tarball_url": [
                    "str",
                    "bytes"
                ],
                "dataset_dir": [
                    "str",
                    "BinaryIO"
                ]
            }
        },
        "write_label_file": {
            "name": "write_label_file",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "labels_to_class_names": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "dataset_dir": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "filename": [
                    "Text",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "has_labels": {
            "name": "has_labels",
            "location": 104,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "dataset_dir": [
                    "str"
                ],
                "filename": [
                    "str",
                    "Text"
                ]
            }
        },
        "read_label_file": {
            "name": "read_label_file",
            "location": 117,
            "return": [
                "Dict[(int, Any)]"
            ],
            "arguments": {
                "dataset_dir": [
                    "str"
                ],
                "filename": [
                    "str",
                    "Text"
                ]
            }
        },
        "get_number_of_classes_by_subfolder": {
            "name": "get_number_of_classes_by_subfolder",
            "location": 141,
            "return": [
                "int"
            ],
            "arguments": {
                "training_data_dir": [
                    "str",
                    "bytes",
                    "Dict",
                    "Optional[dict]",
                    "None"
                ]
            }
        },
        "get_number_of_classes_by_labels": {
            "name": "get_number_of_classes_by_labels",
            "location": 154,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "protobuf_dir": [
                    "str"
                ]
            }
        },
        "get_split_size": {
            "name": "get_split_size",
            "location": 167,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "training_data_dir": [
                    "int",
                    "str"
                ],
                "split_name": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "dict"
                ],
                "frac_validation": [
                    "float",
                    "str",
                    "int",
                    "Optional[str]",
                    "List[Optional[str]]"
                ]
            }
        },
        "download_and_uncompress_tarball._progress": {
            "name": "_progress",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "count": [
                    "int"
                ],
                "block_size": [
                    "int"
                ],
                "total_size": [
                    "int"
                ]
            }
        }
    },
    "cnn_server-master/tf_experiments/datasets/__init__.py": {}
}
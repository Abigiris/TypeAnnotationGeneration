{
    "cnt.rulebase-master/setup.py": {
        "load_requirements": {
            "name": "load_requirements",
            "location": 9,
            "return": [
                "list"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "cnt.rulebase-master/cnt/__init__.py": {},
    "cnt.rulebase-master/cnt/rulebase/__init__.py": {},
    "cnt.rulebase-master/cnt/rulebase/const/chinese_chars.py": {},
    "cnt.rulebase-master/cnt/rulebase/const/cjk_compatibility_ideographs.py": {},
    "cnt.rulebase-master/cnt/rulebase/const/delimiters.py": {},
    "cnt.rulebase-master/cnt/rulebase/const/digits.py": {},
    "cnt.rulebase-master/cnt/rulebase/const/english_chars.py": {},
    "cnt.rulebase-master/cnt/rulebase/const/utils.py": {
        "sorted_chain": {
            "name": "sorted_chain",
            "location": 7,
            "return": [
                "List[Tuple[(int, int)]]"
            ],
            "arguments": {}
        },
        "normalize_cjk_fullwidth_ascii": {
            "name": "normalize_cjk_fullwidth_ascii",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "seq": [
                    "str"
                ]
            }
        },
        "normalize_cjk_compatibility_ideographs": {
            "name": "normalize_cjk_compatibility_ideographs",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "seq": [
                    "str"
                ]
            }
        },
        "normalize_cjk_fullwidth_ascii.convert": {
            "name": "convert",
            "location": 18,
            "return": [
                "str",
                "Optional[float]",
                "int"
            ],
            "arguments": {
                "char": [
                    "str",
                    "List[List[Any]]"
                ]
            }
        }
    },
    "cnt.rulebase-master/cnt/rulebase/const/whitespaces.py": {},
    "cnt.rulebase-master/cnt/rulebase/const/__init__.py": {},
    "cnt.rulebase-master/cnt/rulebase/rules/__init__.py": {},
    "cnt.rulebase-master/cnt/rulebase/rules/interval_based_operations/basic_operation.py": {
        "_generate_interval_labeler_class": {
            "name": "_generate_interval_labeler_class",
            "location": 61,
            "return": [
                "Type[workflow.interval_labeler.IntervalLabeler]"
            ],
            "arguments": {}
        },
        "IntervalBasedOperationLabelProcessor.result": {
            "name": "result",
            "location": 11,
            "return": [
                "Generator[(Tuple[(int, bool)], None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntervalBasedOperationOutputGenerator.continuous_intervals": {
            "name": "continuous_intervals",
            "location": 34,
            "return": [
                "Generator[(Tuple[(Tuple[(int, int)], bool)], None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicIntervalBasedOperation.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "intervals": [
                    "List[Tuple[(int, int)]]"
                ]
            }
        },
        "BasicIntervalBasedOperation.initialize_output_generator_class": {
            "name": "initialize_output_generator_class",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicIntervalBasedOperation._generate_workflow": {
            "name": "_generate_workflow",
            "location": 89,
            "return": [
                "workflow.basic_workflow.BasicWorkflow"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntervalsCollectionBasedOperation.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "intervals_collection": [
                    "List[List[Tuple[(int, int)]]]"
                ]
            }
        },
        "IntervalsCollectionBasedOperation.initialize_label_processor_class": {
            "name": "initialize_label_processor_class",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntervalsCollectionBasedOperation.initialize_output_generator_class": {
            "name": "initialize_output_generator_class",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntervalsCollectionBasedOperation._generate_workflow": {
            "name": "_generate_workflow",
            "location": 128,
            "return": [
                "workflow.basic_workflow.BasicWorkflow"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cnt.rulebase-master/cnt/rulebase/rules/interval_based_operations/builtin_application.py": {
        "BuiltInCollector.generate_collector_lazy": {
            "name": "generate_collector_lazy",
            "location": 16,
            "return": [
                "itb_coll.IntervalBasedCollectorLazy"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "intervals_collection": [
                    "List[List[Tuple[(int, int)]]]"
                ]
            }
        },
        "BuiltInCollector.generate_collector": {
            "name": "generate_collector",
            "location": 25,
            "return": [
                "itb_coll.IntervalBasedCollector"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "intervals_collection": [
                    "List[List[Tuple[(int, int)]]]"
                ]
            }
        },
        "BuiltInCollector.setup_collector": {
            "name": "setup_collector",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "name": [
                    "str"
                ],
                "intervals_collection": [
                    "List[List[Tuple[(int, int)]]]"
                ]
            }
        },
        "BuiltInReplacer.generate_param": {
            "name": "generate_param",
            "location": 67,
            "return": [
                "Dict[(Callable[([str], str)], List[Tuple[(int, int)]])]"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "str",
                    "type",
                    "Type[T]"
                ],
                "repl_with_intervals_collection": [
                    "Dict[(Union[(Callable[([str], str)], str)], List[List[Tuple[(int, int)]]])]"
                ]
            }
        },
        "BuiltInReplacer.generate_replacer_lazy": {
            "name": "generate_replacer_lazy",
            "location": 94,
            "return": [
                "itb_repl.IntervalsCollectionBasedReplacerLazy"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable[Any]",
                    "Callable",
                    "Dict[str, Any]"
                ],
                "repl_with_intervals_collection": [
                    "Dict[(Union[(Callable[([str], str)], str)], List[List[Tuple[(int, int)]]])]"
                ]
            }
        },
        "BuiltInReplacer.generate_replacer": {
            "name": "generate_replacer",
            "location": 104,
            "return": [
                "itb_repl.IntervalsCollectionBasedReplacer"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable[Any]",
                    "Callable",
                    "Dict[str, Any]"
                ],
                "repl_with_intervals_collection": [
                    "Dict[(Union[(Callable[([str], str)], str)], List[List[Tuple[(int, int)]]])]"
                ]
            }
        },
        "BuiltInReplacer.generate_replacer_to_string": {
            "name": "generate_replacer_to_string",
            "location": 114,
            "return": [
                "itb_repl.IntervalsCollectionBasedReplacerToString"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "str",
                    "Callable[..., T]",
                    "Type[object]",
                    "Callable",
                    "bool",
                    "List[Union[str, \"SqlFile\"]]",
                    "Callable[..., str]"
                ],
                "repl_with_intervals_collection": [
                    "Dict[(Union[(Callable[([str], str)], str)], List[List[Tuple[(int, int)]]])]"
                ]
            }
        },
        "BuiltInReplacer.setup_replacer": {
            "name": "setup_replacer",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable[[Any], bool]",
                    "bool"
                ],
                "name": [
                    "str"
                ],
                "repl": [
                    "Union[(Callable[([str], str)], str)]"
                ],
                "intervals_collection": [
                    "List[List[Tuple[(int, int)]]]"
                ]
            }
        }
    },
    "cnt.rulebase-master/cnt/rulebase/rules/interval_based_operations/interval_based_collector.py": {
        "_IntervalBasedCollectorOutputGenerator._result": {
            "name": "_result",
            "location": 16,
            "return": [
                "Generator[(Tuple[(str, Tuple[(int, int)])], None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntervalBasedCollectorOutputGeneratorLazy.result": {
            "name": "result",
            "location": 25,
            "return": [
                "Generator[(Tuple[(str, Tuple[(int, int)])], None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntervalBasedCollectorOutputGenerator.result": {
            "name": "result",
            "location": 31,
            "return": [
                "List[Tuple[(str, Tuple[(int, int)])]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntervalBasedCollectorLazy.initialize_output_generator_class": {
            "name": "initialize_output_generator_class",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntervalBasedCollectorLazy.result": {
            "name": "result",
            "location": 40,
            "return": [
                "Generator[(Tuple[(str, Tuple[(int, int)])], None, None)]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "IntervalBasedCollector.initialize_output_generator_class": {
            "name": "initialize_output_generator_class",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntervalBasedCollector.result": {
            "name": "result",
            "location": 49,
            "return": [
                "List[Tuple[(str, Tuple[(int, int)])]]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        }
    },
    "cnt.rulebase-master/cnt/rulebase/rules/interval_based_operations/interval_based_replacer.py": {
        "IntervalsCollectionBasedReplacerConfig.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "labeler2repl": [
                    "Dict[(Type[workflow.interval_labeler.IntervalLabeler], Callable[([str], str)])]"
                ]
            }
        },
        "IntervalsCollectionBasedReplacerLabelProcessor.result": {
            "name": "result",
            "location": 29,
            "return": [
                "Generator[(Tuple[(int, Optional[Type[workflow.interval_labeler.IntervalLabeler]])], None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_IntervalsCollectionBasedReplacerOutputGenerator._result": {
            "name": "_result",
            "location": 48,
            "return": [
                "Generator[(Tuple[(str, Tuple[(Tuple[(int, int)], Tuple[(int, int)], bool)])], None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntervalsCollectionBasedReplacerOutputGeneratorLazy.result": {
            "name": "result",
            "location": 81,
            "return": [
                "Generator[(Tuple[(str, Tuple[(Tuple[(int, int)], Tuple[(int, int)], bool)])], None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntervalsCollectionBasedReplacerOutputGenerator.result": {
            "name": "result",
            "location": 88,
            "return": [
                "List[Tuple[(str, Tuple[(Tuple[(int, int)], Tuple[(int, int)], bool)])]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntervalsCollectionBasedReplacerOperation.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "replacer_intervals": [
                    "Dict[(Callable[([str], str)], List[Tuple[(int, int)]])]"
                ]
            }
        },
        "IntervalsCollectionBasedReplacerOperation.initialize_label_processor_class": {
            "name": "initialize_label_processor_class",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntervalsCollectionBasedReplacerLazy.initialize_output_generator_class": {
            "name": "initialize_output_generator_class",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntervalsCollectionBasedReplacerLazy.result": {
            "name": "result",
            "location": 120,
            "return": [
                "Generator[(Tuple[(str, Tuple[(Tuple[(int, int)], Tuple[(int, int)], bool)])], None, None)]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "IntervalsCollectionBasedReplacer.initialize_output_generator_class": {
            "name": "initialize_output_generator_class",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntervalsCollectionBasedReplacer.result": {
            "name": "result",
            "location": 129,
            "return": [
                "List[Tuple[(str, Tuple[(Tuple[(int, int)], Tuple[(int, int)], bool)])]]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "IntervalsCollectionBasedReplacerToString.initialize_output_generator_class": {
            "name": "initialize_output_generator_class",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntervalsCollectionBasedReplacerToString.result": {
            "name": "result",
            "location": 138,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        }
    },
    "cnt.rulebase-master/cnt/rulebase/rules/interval_based_operations/__init__.py": {},
    "cnt.rulebase-master/cnt/rulebase/rules/sentence_segmentation/const.py": {
        "_flatten_nested": {
            "name": "_flatten_nested",
            "location": 9,
            "return": [
                "list"
            ],
            "arguments": {
                "seq": [
                    "Iterable"
                ],
                "ret": [
                    "Optional[list]"
                ]
            }
        },
        "_append_code_points_to_text": {
            "name": "_append_code_points_to_text",
            "location": 20,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "_append_code_points_to_seq": {
            "name": "_append_code_points_to_seq",
            "location": 24,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "seq": [
                    "Union[(str, List[str])]"
                ]
            }
        },
        "_append_single_quotation": {
            "name": "_append_single_quotation",
            "location": 30,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "seq": [
                    "Union[(str, List[str])]"
                ]
            }
        },
        "_append_double_quotation": {
            "name": "_append_double_quotation",
            "location": 34,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "seq": [
                    "Union[(str, List[str])]"
                ]
            }
        },
        "_generate_sentence_ends": {
            "name": "_generate_sentence_ends",
            "location": 38,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        }
    },
    "cnt.rulebase-master/cnt/rulebase/rules/sentence_segmentation/sentence_segmenter.py": {
        "_generate_sentseg_workflow": {
            "name": "_generate_sentseg_workflow",
            "location": 193,
            "return": [
                "workflow.basic_workflow.BasicWorkflow"
            ],
            "arguments": {
                "lazy": [
                    "bool"
                ]
            }
        },
        "_sentseg": {
            "name": "_sentseg",
            "location": 213,
            "return": [
                "Union[(Generator[(Tuple[(str, Tuple[(int, int)])], None, None)], List[Tuple[(str, Tuple[(int, int)])]])]"
            ],
            "arguments": {
                "sentseg_workflow": [
                    "workflow.basic_workflow.BasicWorkflow"
                ],
                "text": [
                    "str"
                ],
                "enable_strict_sentence_charset": [
                    "bool"
                ],
                "enable_comma_ending": [
                    "bool"
                ],
                "extend_ending_with_delimiters": [
                    "bool"
                ],
                "dynamic_endings": [
                    "List[str]"
                ]
            }
        },
        "sentseg": {
            "name": "sentseg",
            "location": 231,
            "return": [
                "List[Tuple[(str, Tuple[(int, int)])]]"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "enable_strict_sentence_charset": [
                    "bool"
                ],
                "enable_comma_ending": [
                    "bool"
                ],
                "extend_ending_with_delimiters": [
                    "bool"
                ],
                "dynamic_endings": [
                    "Optional[List[str]]"
                ]
            }
        },
        "sentseg_lazy": {
            "name": "sentseg_lazy",
            "location": 250,
            "return": [
                "Generator[(Tuple[(str, Tuple[(int, int)])], None, None)]"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "enable_strict_sentence_charset": [
                    "bool"
                ],
                "enable_comma_ending": [
                    "bool"
                ],
                "extend_ending_with_delimiters": [
                    "bool"
                ],
                "dynamic_endings": [
                    "Optional[List[str]]"
                ]
            }
        },
        "SentenceSegementationConfig.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "enable_strict_sentence_charset": [
                    "bool"
                ],
                "enable_comma_ending": [
                    "bool"
                ],
                "extend_ending_with_delimiters": [
                    "bool"
                ],
                "dynamic_endings": [
                    "List[str]"
                ]
            }
        },
        "DynamicSentenceEndingLabeler.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_sequence": [
                    "str"
                ],
                "config": [
                    "Optional[SentenceSegementationConfig]"
                ]
            }
        },
        "DynamicSentenceEndingLabeler.intervals_generator": {
            "name": "intervals_generator",
            "location": 48,
            "return": [
                "Generator[(Tuple[(int, int)], None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommaLabeler.label": {
            "name": "label",
            "location": 69,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ]
            }
        },
        "SentenceSegementationLabelProcessor._labels_indicate_sentence_ending": {
            "name": "_labels_indicate_sentence_ending",
            "location": 102,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "Dict[(Type[workflow.basic_workflow.BasicSequentialLabeler], bool)]"
                ]
            }
        },
        "SentenceSegementationLabelProcessor.result": {
            "name": "result",
            "location": 108,
            "return": [
                "Generator[(Tuple[(int, int)], None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SentenceSegementationOutputGeneratorLazy._result": {
            "name": "_result",
            "location": 176,
            "return": [
                "Generator[(Tuple[(str, Tuple[(int, int)])], None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SentenceSegementationOutputGeneratorLazy.result": {
            "name": "result",
            "location": 183,
            "return": [
                "Generator[(Tuple[(str, Tuple[(int, int)])], None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SentenceSegementationOutputGenerator.result": {
            "name": "result",
            "location": 189,
            "return": [
                "List[Tuple[(str, Tuple[(int, int)])]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DynamicSentenceEndingLabeler.intervals_generator.mocker_generator": {
            "name": "mocker_generator",
            "location": 50,
            "return": [
                "cnt.rulebase.workflow.IntervalGeneratorType",
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "cnt.rulebase-master/cnt/rulebase/rules/sentence_segmentation/__init__.py": {},
    "cnt.rulebase-master/cnt/rulebase/workflow/basic_workflow.py": {
        "BasicSequentialLabeler.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_sequence": [
                    "str"
                ],
                "config": [
                    "Optional[BasicConfig]"
                ]
            }
        },
        "BasicSequentialLabeler.label": {
            "name": "label",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ]
            }
        },
        "BasicLabelProcessor.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_sequence": [
                    "str"
                ],
                "index_labels_generator": [
                    "Generator[(Tuple[(int, Dict[(Type[BasicSequentialLabeler], bool)])], None, None)]"
                ],
                "config": [
                    "Optional[BasicConfig]"
                ]
            }
        },
        "BasicLabelProcessor.result": {
            "name": "result",
            "location": 54,
            "return": [
                "typing.Any",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicOutputGenerator.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_sequence": [
                    "str"
                ],
                "label_processor_result": [
                    "bool",
                    "int"
                ],
                "config": [
                    "Optional[BasicConfig]"
                ]
            }
        },
        "BasicOutputGenerator.result": {
            "name": "result",
            "location": 76,
            "return": [
                "typing.Any",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicWorkflow.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sequential_labeler_classes": [
                    "Iterable[Type[BasicSequentialLabeler]]"
                ],
                "label_processor_class": [
                    "Type[BasicLabelProcessor]"
                ],
                "output_generator_class": [
                    "Type[BasicOutputGenerator]"
                ]
            }
        },
        "BasicWorkflow.result": {
            "name": "result",
            "location": 103,
            "return": [
                "str",
                "Dict[str, Any]",
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "input_sequence": [
                    "str"
                ],
                "config": [
                    "Optional[BasicConfig]"
                ]
            }
        }
    },
    "cnt.rulebase-master/cnt/rulebase/workflow/exact_match_labeler.py": {
        "_ac_automation_match": {
            "name": "_ac_automation_match",
            "location": 9,
            "return": [
                "Generator[(Tuple[(int, int)], None, None)]"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "ac_automation": [
                    "str",
                    "Tuple[int, int]"
                ]
            }
        },
        "ExactMatchLabeler.build_ac_automation_from_strings": {
            "name": "build_ac_automation_from_strings",
            "location": 42,
            "return": [
                "str",
                "Optional[str]",
                "Optional[Dict]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bytes",
                    "int"
                ],
                "keys": [
                    "List[str]"
                ]
            }
        },
        "ExactMatchLabeler.build_and_bind_ac_automation_from_strings": {
            "name": "build_and_bind_ac_automation_from_strings",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "str",
                    "Set[str]"
                ],
                "keys": [
                    "List[str]"
                ]
            }
        },
        "ExactMatchLabeler.intervals_generator": {
            "name": "intervals_generator",
            "location": 53,
            "return": [
                "Generator[(Tuple[(int, int)], None, None)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cnt.rulebase-master/cnt/rulebase/workflow/interval_labeler.py": {
        "_next_interval": {
            "name": "_next_interval",
            "location": 10,
            "return": [
                "Optional[Tuple[(int, int)]]"
            ],
            "arguments": {
                "intervals": [
                    "Generator[(Tuple[(int, int)], None, None)]"
                ]
            }
        },
        "build_re_pattern_from_intervals": {
            "name": "build_re_pattern_from_intervals",
            "location": 17,
            "return": [
                "Dict[str, List[str]]",
                "dict",
                "bool",
                "str"
            ],
            "arguments": {
                "intervals": [
                    "List[Tuple[(int, int)]]"
                ]
            }
        },
        "IntervalLabeler.initialize_by_regular_expression": {
            "name": "initialize_by_regular_expression",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Exception"
                ],
                "pattern": [
                    "str"
                ]
            }
        },
        "IntervalLabeler.initialize_by_intervals": {
            "name": "initialize_by_intervals",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "list[str]",
                    "List[str]",
                    "T",
                    "\"CategoricalDtype\""
                ],
                "intervals": [
                    "List[Tuple[(int, int)]]"
                ]
            }
        },
        "IntervalLabeler.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_sequence": [
                    "str"
                ],
                "config": [
                    "Optional[cnt.rulebase.workflow.basic_workflow.BasicConfig]"
                ]
            }
        },
        "IntervalLabeler.intervals_generator": {
            "name": "intervals_generator",
            "location": 59,
            "return": [
                "Generator[(Tuple[(int, int)], None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntervalLabeler.label": {
            "name": "label",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ]
            }
        }
    },
    "cnt.rulebase-master/cnt/rulebase/workflow/type_annotations.py": {},
    "cnt.rulebase-master/cnt/rulebase/workflow/__init__.py": {},
    "cnt.rulebase-master/docs/conf.py": {},
    "cnt.rulebase-master/tasks/tasks.py": {
        "variant_mapping": {
            "name": "variant_mapping",
            "location": 4,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "c": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ],
                "unihan_variant_path": [
                    "str"
                ],
                "output": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        }
    },
    "cnt.rulebase-master/tests/test_const_utils.py": {
        "test_normalize_cjk_fullwidth_ascii": {
            "name": "test_normalize_cjk_fullwidth_ascii",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_normalize_cjk_compatibility_ideographs": {
            "name": "test_normalize_cjk_compatibility_ideographs",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cnt.rulebase-master/tests/test_interval_based_collector.py": {
        "test_interval_based_collector": {
            "name": "test_interval_based_collector",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_chinese_sentence_chars_collector": {
            "name": "test_chinese_sentence_chars_collector",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cnt.rulebase-master/tests/test_interval_based_replacer.py": {
        "test_replacer": {
            "name": "test_replacer",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_replacer_intervals": {
            "name": "test_replacer_intervals",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_built_in_replacer": {
            "name": "test_built_in_replacer",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cnt.rulebase-master/tests/test_sentseg.py": {
        "test_sentence_ending_labler": {
            "name": "test_sentence_ending_labler",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_whitespace_labeler": {
            "name": "test_whitespace_labeler",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sentence_valid_character_labeler": {
            "name": "test_sentence_valid_character_labeler",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sentseg": {
            "name": "test_sentseg",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sentseg_lazy": {
            "name": "test_sentseg_lazy",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
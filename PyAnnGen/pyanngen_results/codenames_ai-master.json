{
    "codenames_ai-master/codenames/cli.py": {
        "cli": {
            "name": "cli",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "codenames_ai-master/codenames/detect_words.py": {
        "detect_words": {
            "name": "detect_words",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "codenames_ai-master/codenames/preloader.py": {
        "preload_all_models": {
            "name": "preload_all_models",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "codenames_ai-master/codenames/preprocess.py": {
        "preprocess": {
            "name": "preprocess",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "codenames_ai-master/codenames/train_rotation.py": {
        "image_generator": {
            "name": "image_generator",
            "location": 18,
            "return": [
                "Generator[(np.ndarray, None, None)]"
            ],
            "arguments": {
                "images": [
                    "List[np.ndarray]"
                ]
            }
        },
        "train": {
            "name": "train",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "codenames_ai-master/codenames/__init__.py": {},
    "codenames_ai-master/codenames/api/routes.py": {
        "init_routes": {
            "name": "init_routes",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "int",
                    "flask.Flask",
                    "dict[, ]",
                    "bool",
                    "dict"
                ]
            }
        },
        "_serialize_association": {
            "name": "_serialize_association",
            "location": 60,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "association": [
                    "codenames.associations.association.Association"
                ]
            }
        },
        "preprocess_words": {
            "name": "preprocess_words",
            "location": 72,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "words": [
                    "List[str]"
                ]
            }
        },
        "preprocess_word": {
            "name": "preprocess_word",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "word": [
                    "str"
                ]
            }
        },
        "init_routes.generate_associations": {
            "name": "generate_associations",
            "location": 17,
            "return": [
                "List[str]",
                "int",
                "Dict[str, Any]",
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "init_routes.detect_words_on_image": {
            "name": "detect_words_on_image",
            "location": 49,
            "return": [
                "bytes",
                "dict",
                "str",
                "Sequence",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {}
        }
    },
    "codenames_ai-master/codenames/api/validations.py": {
        "validate_association_request": {
            "name": "validate_association_request",
            "location": 48,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "request": []
            }
        }
    },
    "codenames_ai-master/codenames/api/__init__.py": {
        "create_app": {
            "name": "create_app",
            "location": 6,
            "return": [
                "flask.Flask",
                "Flask"
            ],
            "arguments": {}
        }
    },
    "codenames_ai-master/codenames/associations/association.py": {
        "Association.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "association_word": [
                    "str"
                ],
                "associated_words_with_scores": [
                    "List[Tuple[(str, float)]]"
                ]
            }
        },
        "Association.add_associated_word": {
            "name": "add_associated_word",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word_with_score": [
                    "Tuple[(str, float)]"
                ]
            }
        },
        "Association.add_rival_word": {
            "name": "add_rival_word",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word_with_score": [
                    "Tuple[(str, float)]"
                ]
            }
        },
        "Association.has_associated_word": {
            "name": "has_associated_word",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str"
                ]
            }
        },
        "Association.size": {
            "name": "size",
            "location": 29,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Association.copy": {
            "name": "copy",
            "location": 32,
            "return": [
                "Association",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Association.__str__": {
            "name": "__str__",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "codenames_ai-master/codenames/associations/builder.py": {
        "build_associations": {
            "name": "build_associations",
            "location": 12,
            "return": [
                "List[codenames.associations.association.Association]"
            ],
            "arguments": {
                "words": [
                    "List[str]"
                ],
                "rival_words_with_coefficients": [
                    "List[Tuple[(str, float)]]"
                ],
                "model": [
                    "str",
                    "int",
                    "float",
                    "tartare.core.models.Job",
                    "bool"
                ]
            }
        },
        "_get_all_associations_between": {
            "name": "_get_all_associations_between",
            "location": 51,
            "return": [
                "list[Association]",
                "str",
                "set",
                "List[str]",
                "dict",
                "models.Match",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "word_a": [
                    "int",
                    "None",
                    "Optional[int]",
                    "esm.models.service_type.ServiceType"
                ],
                "word_b": [
                    "float",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "model": [
                    "int"
                ]
            }
        },
        "_extend_associations_with": {
            "name": "_extend_associations_with",
            "location": 70,
            "return": [
                "List[codenames.associations.association.Association]"
            ],
            "arguments": {
                "associations": [
                    "List[codenames.associations.association.Association]"
                ],
                "words": [
                    "List[str]"
                ],
                "model": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Union[List, str]",
                    "list[]"
                ]
            }
        },
        "_remove_invalid_associations": {
            "name": "_remove_invalid_associations",
            "location": 102,
            "return": [
                "List[codenames.associations.association.Association]"
            ],
            "arguments": {
                "associations": [
                    "List[codenames.associations.association.Association]"
                ]
            }
        },
        "is_valid_association": {
            "name": "is_valid_association",
            "location": 106,
            "return": [
                "bool"
            ],
            "arguments": {
                "association": [
                    "codenames.associations.association.Association"
                ]
            }
        },
        "_deduplicate_associations": {
            "name": "_deduplicate_associations",
            "location": 121,
            "return": [
                "List[codenames.associations.association.Association]"
            ],
            "arguments": {
                "associations": [
                    "List[codenames.associations.association.Association]"
                ]
            }
        },
        "_is_duplicate_or_subset": {
            "name": "_is_duplicate_or_subset",
            "location": 135,
            "return": [
                "bool"
            ],
            "arguments": {
                "smaller_association": [
                    "codenames.associations.association.Association"
                ],
                "bigger_association": [
                    "codenames.associations.association.Association"
                ]
            }
        },
        "_remove_similar_explanation_of_the_same_thing": {
            "name": "_remove_similar_explanation_of_the_same_thing",
            "location": 144,
            "return": [
                "List[codenames.associations.association.Association]"
            ],
            "arguments": {
                "associations": [
                    "List[codenames.associations.association.Association]"
                ]
            }
        },
        "_add_rival_words_and_filter_associations": {
            "name": "_add_rival_words_and_filter_associations",
            "location": 164,
            "return": [
                "List[codenames.associations.association.Association]"
            ],
            "arguments": {
                "associations": [
                    "List[codenames.associations.association.Association]"
                ],
                "rival_words_with_coefficients": [
                    "List[Tuple[(str, float)]]"
                ],
                "model": [
                    "allennlp.models.model.Model"
                ]
            }
        },
        "_get_similar_words_with_scores": {
            "name": "_get_similar_words_with_scores",
            "location": 200,
            "return": [
                "Dict[(str, float)]"
            ],
            "arguments": {
                "word": [
                    "str"
                ],
                "model": [
                    "str",
                    "dict[, ]",
                    "bool",
                    "models.Name",
                    "list[str]",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "_add_pos_tag": {
            "name": "_add_pos_tag",
            "location": 227,
            "return": [
                "str"
            ],
            "arguments": {
                "word": [
                    "str"
                ],
                "tag": [
                    "str"
                ]
            }
        },
        "_remove_pos_tag": {
            "name": "_remove_pos_tag",
            "location": 231,
            "return": [
                "str"
            ],
            "arguments": {
                "word": [
                    "str"
                ]
            }
        },
        "_get_pos_tag": {
            "name": "_get_pos_tag",
            "location": 235,
            "return": [
                "str"
            ],
            "arguments": {
                "word": [
                    "str"
                ]
            }
        },
        "_get_most_likely_pos_tag": {
            "name": "_get_most_likely_pos_tag",
            "location": 239,
            "return": [
                "str"
            ],
            "arguments": {
                "word": [
                    "str"
                ],
                "pos_tags": [
                    "List[str]"
                ],
                "model": [
                    "str",
                    "gensim.models.KeyedVectors",
                    "None",
                    "dict[str, str]",
                    "zerver.models.UserProfile",
                    "Optional[str]",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "codenames_ai-master/codenames/associations/metrics.py": {
        "get_guessable_score": {
            "name": "get_guessable_score",
            "location": 4,
            "return": [
                "float"
            ],
            "arguments": {
                "association": [
                    "codenames.associations.association.Association"
                ]
            }
        },
        "get_confusion_score": {
            "name": "get_confusion_score",
            "location": 10,
            "return": [
                "float"
            ],
            "arguments": {
                "association": [
                    "codenames.associations.association.Association"
                ]
            }
        },
        "get_score": {
            "name": "get_score",
            "location": 19,
            "return": [
                "float"
            ],
            "arguments": {
                "association": [
                    "codenames.associations.association.Association"
                ]
            }
        }
    },
    "codenames_ai-master/codenames/associations/misc.py": {
        "prepare_rival_words_with_coefficients": {
            "name": "prepare_rival_words_with_coefficients",
            "location": 6,
            "return": [
                "List[Tuple[(str, float)]]"
            ],
            "arguments": {
                "assassins": [
                    "List[str]"
                ],
                "opponent_agents": [
                    "List[str]"
                ],
                "bystanders": [
                    "List[str]"
                ]
            }
        }
    },
    "codenames_ai-master/codenames/associations/__init__.py": {},
    "codenames_ai-master/codenames/config/associations.py": {},
    "codenames_ai-master/codenames/config/rotation_model.py": {},
    "codenames_ai-master/codenames/config/w2v.py": {},
    "codenames_ai-master/codenames/config/yolo.py": {},
    "codenames_ai-master/codenames/config/__init__.py": {},
    "codenames_ai-master/codenames/models/codenames_model.py": {
        "_with_session_and_graph": {
            "name": "_with_session_and_graph",
            "location": 18,
            "return": [
                "Callable[(..., Callable[(..., T)])]"
            ],
            "arguments": {
                "session": [
                    "Optional[int]",
                    "Union[eth.rlp.transactions.BaseTransaction, eth.utils.spoof.SpoofTransaction]"
                ],
                "graph": [
                    "Optional[int]",
                    "Union[eth.rlp.transactions.BaseTransaction, eth.utils.spoof.SpoofTransaction]"
                ]
            }
        },
        "_with_session_and_graph.decorator": {
            "name": "decorator",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "CodenamesModel.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodenamesModel.extract_codenames_from_image": {
            "name": "extract_codenames_from_image",
            "location": 41,
            "return": [
                "list[]",
                "List[str]",
                "List[T]",
                "str"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "list[tuple[typing.Union[numpy.ndarray,str]]]",
                    "bool",
                    "numpy.ndarray",
                    "List[Tuple[numpy.ndarray, str]]"
                ]
            }
        },
        "CodenamesModel._is_valid_word": {
            "name": "_is_valid_word",
            "location": 62,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str"
                ],
                "lang": [
                    "str"
                ]
            }
        },
        "_with_session_and_graph.decorator.wrapper": {
            "name": "wrapper",
            "location": 23,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Mapping[str, Sequence[str]]"
            ],
            "arguments": {}
        }
    },
    "codenames_ai-master/codenames/models/ocr.py": {
        "extract_text_from_image": {
            "name": "extract_text_from_image",
            "location": 9,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "image": [
                    "np.ndarray"
                ]
            }
        }
    },
    "codenames_ai-master/codenames/models/utils.py": {
        "ensure_one_file_model_loaded": {
            "name": "ensure_one_file_model_loaded",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "model_name": [
                    "str"
                ],
                "model_path": [
                    "pathlib.Path"
                ],
                "model_url": [
                    "str"
                ]
            }
        },
        "split_image_into_3_parts": {
            "name": "split_image_into_3_parts",
            "location": 28,
            "return": [
                "List[np.ndarray]"
            ],
            "arguments": {
                "image": [
                    "np.ndarray"
                ]
            }
        },
        "extract_box": {
            "name": "extract_box",
            "location": 48,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "image": [
                    "np.ndarray"
                ],
                "box": [
                    "List[int]"
                ]
            }
        }
    },
    "codenames_ai-master/codenames/models/w2v.py": {
        "get_w2v_models": {
            "name": "get_w2v_models",
            "location": 12,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {}
        },
        "ensure_w2v_models_are_loaded": {
            "name": "ensure_w2v_models_are_loaded",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_load_russian_w2v": {
            "name": "_load_russian_w2v",
            "location": 40,
            "return": [
                "Dict[int, dict]",
                "List[app.models.Question]",
                "app.models.Question",
                "Callable[[Dict], None]"
            ],
            "arguments": {}
        }
    },
    "codenames_ai-master/codenames/models/__init__.py": {},
    "codenames_ai-master/codenames/models/rotation/model.py": {
        "build_model": {
            "name": "build_model",
            "location": 8,
            "return": [
                "Model",
                "models.EndorsementPolicy",
                "Exception"
            ],
            "arguments": {}
        },
        "load_model": {
            "name": "load_model",
            "location": 19,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {}
        }
    },
    "codenames_ai-master/codenames/models/rotation/utils.py": {
        "to_grayscale": {
            "name": "to_grayscale",
            "location": 5,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "image": [
                    "np.ndarray"
                ]
            }
        },
        "scale_image": {
            "name": "scale_image",
            "location": 9,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "image": [
                    "np.ndarray"
                ],
                "size": [
                    "int"
                ]
            }
        },
        "rotate_image": {
            "name": "rotate_image",
            "location": 13,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "image": [
                    "np.ndarray"
                ],
                "angle_degrees": [
                    "int"
                ]
            }
        }
    },
    "codenames_ai-master/codenames/models/rotation/__init__.py": {},
    "codenames_ai-master/codenames/models/yolov2/post_processing.py": {
        "generate_yolo_grid": {
            "name": "generate_yolo_grid",
            "location": 13,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "g": [
                    "np.ndarray"
                ],
                "num_bb": [
                    "int"
                ]
            }
        },
        "process_outs": {
            "name": "process_outs",
            "location": 19,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "b": [
                    "np.ndarray"
                ],
                "s": [
                    "np.ndarray"
                ],
                "c": [
                    "np.ndarray"
                ]
            }
        },
        "PostProcessing.__call__": {
            "name": "__call__",
            "location": 35,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "y_sing_pred": [
                    "np.ndarray"
                ]
            }
        }
    },
    "codenames_ai-master/codenames/models/yolov2/yolov2.py": {
        "_preprocess_image": {
            "name": "_preprocess_image",
            "location": 12,
            "return": [
                "int",
                "tuple"
            ],
            "arguments": {
                "image": [
                    "int",
                    "numpy.ndarray",
                    "numpy.array"
                ]
            }
        },
        "_is_nonzero_box": {
            "name": "_is_nonzero_box",
            "location": 22,
            "return": [
                "bool",
                "str",
                "numpy.ndarray",
                "int"
            ],
            "arguments": {
                "box": [
                    "str",
                    "numpy.ndarray",
                    "int"
                ]
            }
        },
        "_scale_box": {
            "name": "_scale_box",
            "location": 26,
            "return": [
                "list[typing.Union[int,int]]",
                "int",
                "float",
                "List[int]",
                "numpy.ndarray",
                "str"
            ],
            "arguments": {
                "image": [
                    "list[str]",
                    "numpy.ndarray",
                    "list[numpy.ndarray]",
                    "List[str]",
                    "List[numpy.ndarray]",
                    "numpy.array"
                ],
                "box": [
                    "numpy.ndarray",
                    "int",
                    "Iterable[T]"
                ]
            }
        },
        "YoloV2.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YoloV2.run": {
            "name": "run",
            "location": 42,
            "return": [
                "list[]",
                "List[int]",
                "str",
                "List[Dict]",
                "Optional[Type]",
                "List[float]"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "codenames_ai-master/codenames/models/yolov2/__init__.py": {},
    "codenames_ai-master/codenames/preprocessing/extract_cards.py": {
        "ExtractCards.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtractCards.process": {
            "name": "process",
            "location": 13,
            "return": [
                "List[Tuple[(numpy.ndarray, str)]]"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "numpy.ndarray"
                ]
            }
        }
    },
    "codenames_ai-master/codenames/preprocessing/preprocessor.py": {
        "flatten": {
            "name": "flatten",
            "location": 8,
            "return": [
                "List[T]"
            ],
            "arguments": {
                "nested_list": [
                    "List[List[T]]"
                ]
            }
        },
        "Preprocessor.process": {
            "name": "process",
            "location": 13,
            "return": [
                "List[Tuple[(numpy.ndarray, str)]]"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "numpy.ndarray"
                ]
            }
        },
        "Preprocessor.process_batch": {
            "name": "process_batch",
            "location": 16,
            "return": [
                "List[Tuple[(numpy.ndarray, str)]]"
            ],
            "arguments": {
                "self": [],
                "images": [
                    "List[numpy.ndarray]"
                ]
            }
        }
    },
    "codenames_ai-master/codenames/preprocessing/rotate.py": {
        "Rotate.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rotate.process": {
            "name": "process",
            "location": 14,
            "return": [
                "List[Tuple[(np.ndarray, str)]]"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "np.ndarray"
                ]
            }
        }
    },
    "codenames_ai-master/codenames/preprocessing/split.py": {
        "Split.process": {
            "name": "process",
            "location": 10,
            "return": [
                "List[Tuple[(numpy.ndarray, str)]]"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "numpy.ndarray"
                ]
            }
        }
    },
    "codenames_ai-master/codenames/preprocessing/utils.py": {
        "get_all_images_in": {
            "name": "get_all_images_in",
            "location": 7,
            "return": [
                "List[pathlib.Path]"
            ],
            "arguments": {
                "directory": [
                    "pathlib.Path"
                ]
            }
        }
    },
    "codenames_ai-master/codenames/preprocessing/__init__.py": {}
}
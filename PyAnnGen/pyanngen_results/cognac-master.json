{
    "cognac-master/setup.py": {},
    "cognac-master/cognac/command.py": {
        "BaseCommand.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseCommand.name": {
            "name": "name",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "str",
                    "Type[Any]",
                    "Callable",
                    "bool",
                    "int"
                ]
            }
        },
        "BaseCommand.description": {
            "name": "description",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Iterable",
                    "Union[str,bytes]",
                    "bytes"
                ]
            }
        },
        "BaseCommand.setup_arguments": {
            "name": "setup_arguments",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Dict[str,Any]",
                    "argparse.ArgumentParser",
                    "argparse._SubParsersAction"
                ],
                "parser": [
                    "Dict[str,Any]",
                    "argparse.ArgumentParser",
                    "argparse._SubParsersAction"
                ]
            }
        },
        "BaseCommand.run": {
            "name": "run",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "bool"
                ],
                "args": []
            }
        },
        "Command.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.name": {
            "name": "name",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "Command.description": {
            "name": "description",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bytes",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "Command.setup_arguments": {
            "name": "setup_arguments",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Dict[str,Any]",
                    "argparse.ArgumentParser",
                    "argparse._SubParsersAction"
                ],
                "parser": [
                    "Dict[str,Any]",
                    "argparse.ArgumentParser",
                    "argparse._SubParsersAction"
                ]
            }
        }
    },
    "cognac-master/cognac/context.py": {
        "Environ.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Environ.get_all_string": {
            "name": "get_all_string",
            "location": 14,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Environ.get_string": {
            "name": "get_string",
            "location": 17,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Environ.get_int": {
            "name": "get_int",
            "location": 20,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Context.from_environment": {
            "name": "from_environment",
            "location": 73,
            "return": [
                "Context"
            ],
            "arguments": {
                "cls": [
                    "Type[_TContext]"
                ]
            }
        },
        "Context.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "argv": [
                    "Iterable[float]",
                    "str",
                    "int",
                    "List[T]"
                ],
                "environ": [
                    "Iterable[float]",
                    "str",
                    "int",
                    "List[T]"
                ],
                "output_fd": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "Context.environ": {
            "name": "environ",
            "location": 85,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Context.commandline_name": {
            "name": "commandline_name",
            "location": 88,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Container[str]",
                "bool",
                "Union[List, Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Context.commandline_arguments": {
            "name": "commandline_arguments",
            "location": 91,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Context.write_output": {
            "name": "write_output",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cognac-master/cognac/error.py": {},
    "cognac-master/cognac/runner.py": {
        "build": {
            "name": "build",
            "location": 63,
            "return": [
                "Runner"
            ],
            "arguments": {
                "command_class": [
                    "str",
                    "float",
                    "Type[eth.abc.VirtualMachineAPI]",
                    "Type"
                ],
                "wrappers": [
                    "Optional[List[Type]]",
                    "List[str]",
                    "None",
                    "List[Type]"
                ]
            }
        },
        "BaseWrapper.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "next_func": [
                    "bool",
                    "Optional[Callable]",
                    "Callable",
                    "None"
                ]
            }
        },
        "BaseWrapper.run": {
            "name": "run",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "bool"
                ],
                "args": []
            }
        },
        "Wrapper.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "next_func": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "ErrorHandlerWrapper.run": {
            "name": "run",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "bool",
                    "List[str]",
                    "str"
                ],
                "args": []
            }
        },
        "Runner.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command_class": [
                    "Optional[str]",
                    "Type",
                    "str",
                    "List[str]",
                    "None"
                ],
                "wrapper_classes": [
                    "Optional[str]",
                    "Type",
                    "str",
                    "List[str]",
                    "None"
                ]
            }
        },
        "Runner.__call__": {
            "name": "__call__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cognac-master/cognac/__init__.py": {},
    "cognac-master/examples/hello.py": {
        "BugsnagWrapper.run": {
            "name": "run",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "List[str]",
                    "str",
                    "bool"
                ],
                "args": []
            }
        },
        "Foo.run": {
            "name": "run",
            "location": 24,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "int",
                    "bool",
                    "list"
                ],
                "args": []
            }
        }
    }
}
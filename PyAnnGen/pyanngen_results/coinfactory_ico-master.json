{
    "coinfactory_ico-master/manage.py": {},
    "coinfactory_ico-master/bluecots_ico/views.py": {
        "ReactAppView.get": {
            "name": "get",
            "location": 8,
            "return": [
                "HttpResponse",
                "int",
                "Dict[str,str]",
                "str",
                "Dict",
                "bool"
            ],
            "arguments": {
                "delf": [
                    "ReactAppView"
                ],
                "request": [
                    "int"
                ]
            }
        }
    },
    "coinfactory_ico-master/bluecots_ico/__init__.py": {},
    "coinfactory_ico-master/bluecots_ico/contrib/__init__.py": {},
    "coinfactory_ico-master/bluecots_ico/contrib/sites/__init__.py": {},
    "coinfactory_ico-master/bluecots_ico/contrib/sites/migrations/0001_initial.py": {},
    "coinfactory_ico-master/bluecots_ico/contrib/sites/migrations/__init__.py": {},
    "coinfactory_ico-master/bluecots_ico/icoInfos/admin.py": {},
    "coinfactory_ico-master/bluecots_ico/icoInfos/apps.py": {},
    "coinfactory_ico-master/bluecots_ico/icoInfos/models.py": {},
    "coinfactory_ico-master/bluecots_ico/icoInfos/serializers.py": {
        "TimestampField.to_representation": {
            "name": "to_representation",
            "location": 6,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        }
    },
    "coinfactory_ico-master/bluecots_ico/icoInfos/urls.py": {},
    "coinfactory_ico-master/bluecots_ico/icoInfos/views.py": {
        "Initialdata.get": {
            "name": "get",
            "location": 15,
            "return": [
                "Response",
                "Dict[str,Any]",
                "str",
                "bool",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "django.http.HttpRequest",
                    "None",
                    "str",
                    "float",
                    "rest_framework.requesRequest",
                    "List",
                    "Optional[int]"
                ],
                "format": [
                    "None",
                    "bool",
                    "django.http.HttpRequest",
                    "str",
                    "float",
                    "rest_framework.requesRequest",
                    "List",
                    "Optional[int]"
                ]
            }
        },
        "SubscribeList.get": {
            "name": "get",
            "location": 97,
            "return": [
                "Response",
                "Dict[str,Any]",
                "str",
                "bool",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "django.http.HttpRequest",
                    "None",
                    "str",
                    "float",
                    "rest_framework.requesRequest",
                    "List",
                    "Optional[int]"
                ],
                "format": [
                    "None",
                    "bool",
                    "django.http.HttpRequest",
                    "str",
                    "float",
                    "rest_framework.requesRequest",
                    "List",
                    "Optional[int]"
                ]
            }
        },
        "SubscribeList.put": {
            "name": "put",
            "location": 107,
            "return": [
                "Response",
                "int",
                "Dict[str,str]",
                "Optional[Dict]",
                "Dict",
                "Exception",
                "tartare.core.models.Job"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "None"
                ],
                "format": [
                    "str",
                    "None",
                    "Dict",
                    "List",
                    "django.http.HttpRequest",
                    "bool",
                    "rest_framework.requesRequest",
                    "Optional[str]"
                ]
            }
        },
        "RoundList.get": {
            "name": "get",
            "location": 140,
            "return": [
                "Response",
                "Dict[str,Any]",
                "str",
                "bool",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "django.http.HttpRequest",
                    "None",
                    "str",
                    "float",
                    "rest_framework.requesRequest",
                    "List",
                    "Optional[int]"
                ],
                "format": [
                    "None",
                    "bool",
                    "django.http.HttpRequest",
                    "str",
                    "float",
                    "rest_framework.requesRequest",
                    "List",
                    "Optional[int]"
                ]
            }
        },
        "CurrentRound.get": {
            "name": "get",
            "location": 152,
            "return": [
                "Response",
                "Dict[str,Any]",
                "str",
                "bool",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "django.http.HttpRequest",
                    "None",
                    "str",
                    "float",
                    "rest_framework.requesRequest",
                    "List",
                    "Optional[int]"
                ],
                "format": [
                    "None",
                    "bool",
                    "django.http.HttpRequest",
                    "str",
                    "float",
                    "rest_framework.requesRequest",
                    "List",
                    "Optional[int]"
                ]
            }
        },
        "RoundSupplyList.get": {
            "name": "get",
            "location": 191,
            "return": [
                "Response",
                "Dict[str,Any]",
                "str",
                "bool",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "django.http.HttpRequest",
                    "None",
                    "str",
                    "float",
                    "rest_framework.requesRequest",
                    "List",
                    "Optional[int]"
                ],
                "format": [
                    "None",
                    "bool",
                    "django.http.HttpRequest",
                    "str",
                    "float",
                    "rest_framework.requesRequest",
                    "List",
                    "Optional[int]"
                ]
            }
        },
        "RoundSupply.get": {
            "name": "get",
            "location": 204,
            "return": [
                "Response",
                "Dict[str,Any]",
                "str",
                "bool",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "str",
                    "Dict",
                    "int"
                ],
                "round_type": [
                    "bool",
                    "Mapping",
                    "str",
                    "int",
                    "zerver.models.UserProfile",
                    "grouper.models.base.session.Session"
                ],
                "format": [
                    "bool",
                    "None",
                    "str",
                    "Dict",
                    "int"
                ]
            }
        },
        "RoundBonusList.get": {
            "name": "get",
            "location": 226,
            "return": [
                "Response",
                "Dict[str,Any]",
                "str",
                "bool",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "django.http.HttpRequest",
                    "None",
                    "str",
                    "float",
                    "rest_framework.requesRequest",
                    "List",
                    "Optional[int]"
                ],
                "format": [
                    "None",
                    "bool",
                    "django.http.HttpRequest",
                    "str",
                    "float",
                    "rest_framework.requesRequest",
                    "List",
                    "Optional[int]"
                ]
            }
        },
        "RoundBonus.get": {
            "name": "get",
            "location": 239,
            "return": [
                "Response",
                "Dict[str,Any]",
                "str",
                "bool",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "str",
                    "Dict",
                    "int"
                ],
                "round_type": [
                    "bool",
                    "Mapping",
                    "str",
                    "int",
                    "zerver.models.UserProfile",
                    "grouper.models.base.session.Session"
                ],
                "format": [
                    "bool",
                    "None",
                    "str",
                    "Dict",
                    "int"
                ]
            }
        },
        "VolumeBonusList.get": {
            "name": "get",
            "location": 261,
            "return": [
                "Response",
                "Dict[str,Any]",
                "str",
                "bool",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "django.http.HttpRequest",
                    "None",
                    "str",
                    "float",
                    "rest_framework.requesRequest",
                    "List",
                    "Optional[int]"
                ],
                "format": [
                    "None",
                    "bool",
                    "django.http.HttpRequest",
                    "str",
                    "float",
                    "rest_framework.requesRequest",
                    "List",
                    "Optional[int]"
                ]
            }
        },
        "VolumeBonus.get": {
            "name": "get",
            "location": 274,
            "return": [
                "Response",
                "Dict[str,Any]",
                "str",
                "bool",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "str",
                    "Dict",
                    "int"
                ],
                "volume_type": [
                    "Dict[str,Any]",
                    "bool",
                    "superseconnectors.sqla.models.TableColumn",
                    "salon.models.Stylist"
                ],
                "format": [
                    "bool",
                    "None",
                    "str",
                    "Dict",
                    "int"
                ]
            }
        },
        "IcoWalletList.get": {
            "name": "get",
            "location": 296,
            "return": [
                "Response",
                "Dict[str,Any]",
                "str",
                "bool",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "django.http.HttpRequest",
                    "None",
                    "str",
                    "float",
                    "rest_framework.requesRequest",
                    "List",
                    "Optional[int]"
                ],
                "format": [
                    "None",
                    "bool",
                    "django.http.HttpRequest",
                    "str",
                    "float",
                    "rest_framework.requesRequest",
                    "List",
                    "Optional[int]"
                ]
            }
        },
        "InvestmentInfo.get": {
            "name": "get",
            "location": 309,
            "return": [
                "Response",
                "Dict[str,Any]",
                "str",
                "bool",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "django.http.HttpRequest",
                    "None",
                    "str",
                    "float",
                    "rest_framework.requesRequest",
                    "List",
                    "Optional[int]"
                ],
                "format": [
                    "None",
                    "bool",
                    "django.http.HttpRequest",
                    "str",
                    "float",
                    "rest_framework.requesRequest",
                    "List",
                    "Optional[int]"
                ]
            }
        },
        "WhitePaperList.get": {
            "name": "get",
            "location": 322,
            "return": [
                "Response",
                "Dict[str,Any]",
                "str",
                "bool",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "django.http.HttpRequest",
                    "None",
                    "str",
                    "float",
                    "rest_framework.requesRequest",
                    "List",
                    "Optional[int]"
                ],
                "format": [
                    "None",
                    "bool",
                    "django.http.HttpRequest",
                    "str",
                    "float",
                    "rest_framework.requesRequest",
                    "List",
                    "Optional[int]"
                ]
            }
        },
        "WhitePaper.get": {
            "name": "get",
            "location": 344,
            "return": [
                "Response",
                "Dict[str,Any]",
                "str",
                "bool",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "str",
                    "Dict",
                    "int"
                ],
                "language_type": [
                    "bool",
                    "zerver.models.UserProfile",
                    "core.models.User",
                    "deeplearning.ml4pl.models.epoch.Results",
                    "asgard.backends.users.UsersBackend",
                    "asgard.models.user.User"
                ],
                "format": [
                    "bool",
                    "None",
                    "str",
                    "Dict",
                    "int"
                ]
            }
        },
        "SendEmail.put": {
            "name": "put",
            "location": 366,
            "return": [
                "Response",
                "int",
                "Dict[str,str]",
                "Optional[Dict]",
                "Dict",
                "Exception",
                "tartare.core.models.Job"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "Optional[str]",
                    "Dict",
                    "None",
                    "bool",
                    "Mapping[str,str]",
                    "Mapping",
                    "Optional[Callable[[Dict],bool]]",
                    "Callable[dict,bool]"
                ],
                "format": [
                    "str",
                    "None",
                    "Dict",
                    "List",
                    "django.http.HttpRequest",
                    "bool",
                    "rest_framework.requesRequest",
                    "Optional[str]"
                ]
            }
        }
    },
    "coinfactory_ico-master/bluecots_ico/icoInfos/__init__.py": {},
    "coinfactory_ico-master/bluecots_ico/icoInfos/migrations/0001_initial.py": {},
    "coinfactory_ico-master/bluecots_ico/icoInfos/migrations/0002_subscribe.py": {},
    "coinfactory_ico-master/bluecots_ico/icoInfos/migrations/0003_auto_20181220_1515.py": {},
    "coinfactory_ico-master/bluecots_ico/icoInfos/migrations/0004_auto_20181220_1539.py": {},
    "coinfactory_ico-master/bluecots_ico/icoInfos/migrations/0005_investmentinfo_eth_price.py": {},
    "coinfactory_ico-master/bluecots_ico/icoInfos/migrations/0006_auto_20181220_1628.py": {},
    "coinfactory_ico-master/bluecots_ico/icoInfos/migrations/0007_auto_20181220_1724.py": {},
    "coinfactory_ico-master/bluecots_ico/icoInfos/migrations/0008_auto_20181220_1726.py": {},
    "coinfactory_ico-master/bluecots_ico/icoInfos/migrations/__init__.py": {},
    "coinfactory_ico-master/bluecots_ico/users/adapters.py": {
        "AccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 11,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict",
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "coinfactory_ico-master/bluecots_ico/users/admin.py": {},
    "coinfactory_ico-master/bluecots_ico/users/apps.py": {
        "UsersConfig.ready": {
            "name": "ready",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "coinfactory_ico-master/bluecots_ico/users/forms.py": {
        "UserCreationForm.clean_username": {
            "name": "clean_username",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "coinfactory_ico-master/bluecots_ico/users/models.py": {
        "User.create_notification": {
            "name": "create_notification",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "to": [
                    "str",
                    "Callable[[str],Any]",
                    "Callable[str,Any]"
                ],
                "notification_type": [
                    "str",
                    "Callable[[str],Any]",
                    "Callable[str,Any]"
                ],
                "message": [
                    "str",
                    "None",
                    "Callable[[str],Any]",
                    "Callable[str,Any]"
                ]
            }
        },
        "User.photo_file_name": {
            "name": "photo_file_name",
            "location": 27,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "bytes",
                    "django.contrib.sites.models.Site",
                    "Union[str,bytes]"
                ],
                "filename": [
                    "str",
                    "bool"
                ]
            }
        },
        "User.__str__": {
            "name": "__str__",
            "location": 86,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.invitees_count": {
            "name": "invitees_count",
            "location": 90,
            "return": [
                "int",
                "bool",
                "set",
                "str",
                "django.db.models.Model"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "coinfactory_ico-master/bluecots_ico/users/serializers.py": {
        "TimestampField.to_representation": {
            "name": "to_representation",
            "location": 6,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        }
    },
    "coinfactory_ico-master/bluecots_ico/users/signals.py": {
        "user_signed_up": {
            "name": "user_signed_up",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "str",
                    "bool",
                    "Tuple[int]"
                ],
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        }
    },
    "coinfactory_ico-master/bluecots_ico/users/urls.py": {},
    "coinfactory_ico-master/bluecots_ico/users/views.py": {
        "isStaff": {
            "name": "isStaff",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "username": [
                    "Dict[str,Any]",
                    "float",
                    "esm.models.service_instance.ServiceInstance",
                    "transfer.models.Scope",
                    "salon.models.Stylist"
                ]
            }
        },
        "isSuperUser": {
            "name": "isSuperUser",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "username": [
                    "Dict[str,Any]",
                    "esm.models.service_instance.ServiceInstance",
                    "transfer.models.Scope",
                    "salon.models.Stylist",
                    "zerver.models.Realm"
                ]
            }
        },
        "create_notification": {
            "name": "create_notification",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "to": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "notification_type": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "message": [
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "UserNotification.get": {
            "name": "get",
            "location": 44,
            "return": [
                "Response",
                "Dict[str,Any]",
                "str",
                "bool",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "rest_framework.requesRequest",
                    "zerver.models.UserProfile"
                ],
                "username": [
                    "bytes",
                    "zerver.models.UserProfile",
                    "Dict[str,Any]",
                    "str",
                    "int",
                    "zam_repondeur.models.Amendement",
                    "None",
                    "Optional[int]"
                ],
                "format": [
                    "List[str]",
                    "None",
                    "Dict[str,Any]",
                    "Dict",
                    "django.http.HttpRequest",
                    "Iterable"
                ]
            }
        },
        "Signup_terms_list.get": {
            "name": "get",
            "location": 74,
            "return": [
                "Response",
                "Dict[str,Any]",
                "str",
                "bool",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "Optional[str]",
                    "None",
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile"
                ],
                "format": [
                    "None",
                    "bool",
                    "django.http.HttpRequest",
                    "str",
                    "float",
                    "rest_framework.requesRequest",
                    "List",
                    "Optional[int]"
                ]
            }
        },
        "NotificationList.get": {
            "name": "get",
            "location": 93,
            "return": [
                "Response",
                "Dict[str,Any]",
                "str",
                "bool",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "Optional[str]",
                    "None",
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile"
                ],
                "format": [
                    "None",
                    "bool",
                    "django.http.HttpRequest",
                    "str",
                    "float",
                    "rest_framework.requesRequest",
                    "List",
                    "Optional[int]"
                ]
            }
        },
        "UserType.get": {
            "name": "get",
            "location": 113,
            "return": [
                "Response",
                "Dict[str,Any]",
                "str",
                "bool",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "rest_framework.requesRequest",
                    "zerver.models.UserProfile"
                ],
                "username": [
                    "bool",
                    "zerver.models.UserProfile",
                    "server.models.User",
                    "zam_repondeur.models.Amendement",
                    "slowbro.core.user_message.UserMessage",
                    "django.http.HttpRequest"
                ],
                "format": [
                    "List[str]",
                    "None",
                    "Dict[str,Any]",
                    "Dict",
                    "django.http.HttpRequest",
                    "Iterable"
                ]
            }
        },
        "TempString.get": {
            "name": "get",
            "location": 142,
            "return": [
                "Response",
                "Dict[str,Any]",
                "str",
                "bool",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "rest_framework.requesRequest",
                    "zerver.models.UserProfile"
                ],
                "username": [
                    "zerver.models.UserProfile",
                    "django.http.HttpRequest",
                    "zam_repondeur.models.Amendement",
                    "slowbro.core.user_message.UserMessage"
                ],
                "format": [
                    "List[str]",
                    "None",
                    "Dict[str,Any]",
                    "Dict",
                    "django.http.HttpRequest",
                    "Iterable"
                ]
            }
        },
        "TempString.put": {
            "name": "put",
            "location": 170,
            "return": [
                "Response",
                "int",
                "Dict[str,str]",
                "Optional[Dict]",
                "Dict",
                "cmk.utils.type_defs.UserId",
                "Exception",
                "tartare.core.models.Job"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile"
                ],
                "username": [
                    "zerver.models.UserProfile",
                    "slowbro.core.user_message.UserMessage",
                    "django.http.HttpRequest",
                    "server.models.User",
                    "django.contrib.auth.models.User"
                ],
                "format": [
                    "None",
                    "List[str]",
                    "django.http.HttpRequest",
                    "Dict[str,Any]",
                    "Dict",
                    "Iterable"
                ]
            }
        },
        "TempString.delete": {
            "name": "delete",
            "location": 206,
            "return": [
                "Response",
                "str",
                "int",
                "Dict[str,Any]",
                "Optional[Dict[str,bytes]]",
                "Optional[Dict[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest"
                ],
                "username": [
                    "zerver.models.UserProfile",
                    "django.contrib.auth.models.User",
                    "server.models.User"
                ],
                "format": [
                    "django.http.HttpRequest",
                    "bool",
                    "None",
                    "str",
                    "List[int]"
                ]
            }
        },
        "UserProfile.get_user": {
            "name": "get_user",
            "location": 246,
            "return": [
                "str",
                "Dict[str,str]",
                "Set[str]",
                "Dict",
                "int",
                "Optional[str]",
                "List",
                "Callable",
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "Dict[str,Any]",
                    "zerver.models.Realm"
                ]
            }
        },
        "UserProfile.get": {
            "name": "get",
            "location": 253,
            "return": [
                "Response",
                "Dict[str,Any]",
                "str",
                "bool",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "rest_framework.requesRequest",
                    "zerver.models.UserProfile"
                ],
                "username": [
                    "int",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "format": [
                    "List[str]",
                    "None",
                    "Dict[str,Any]",
                    "Dict",
                    "django.http.HttpRequest",
                    "Iterable"
                ]
            }
        },
        "UserProfile.put": {
            "name": "put",
            "location": 280,
            "return": [
                "Response",
                "int",
                "Dict[str,str]",
                "Optional[Dict]",
                "Dict",
                "cmk.utils.type_defs.UserId",
                "Exception",
                "tartare.core.models.Job"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int",
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile",
                    "django.core.handlers.wsgi.WSGIRequest"
                ],
                "username": [
                    "Optional[str]",
                    "int",
                    "str",
                    "None"
                ],
                "format": [
                    "None",
                    "List[str]",
                    "django.http.HttpRequest",
                    "Dict[str,Any]",
                    "Dict",
                    "Iterable"
                ]
            }
        },
        "UserList.get": {
            "name": "get",
            "location": 318,
            "return": [
                "Response",
                "Dict[str,Any]",
                "str",
                "bool",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "Optional[str]",
                    "None",
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile"
                ],
                "format": [
                    "None",
                    "bool",
                    "django.http.HttpRequest",
                    "str",
                    "float",
                    "rest_framework.requesRequest",
                    "List",
                    "Optional[int]"
                ]
            }
        },
        "UserInviteeList.get": {
            "name": "get",
            "location": 348,
            "return": [
                "Response",
                "Dict[str,Any]",
                "str",
                "bool",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "rest_framework.requesRequest",
                    "zerver.models.UserProfile"
                ],
                "username": [
                    "Dict[str,Any]",
                    "str",
                    "zerver.models.UserProfile",
                    "zam_repondeur.models.Amendement",
                    "zerver.models.Stream",
                    "zerver.models.Recipient",
                    "django.http.HttpRequest"
                ],
                "format": [
                    "List[str]",
                    "None",
                    "Dict[str,Any]",
                    "Dict",
                    "django.http.HttpRequest",
                    "Iterable"
                ]
            }
        },
        "UserInvitation.get": {
            "name": "get",
            "location": 391,
            "return": [
                "Response",
                "Dict[str,Any]",
                "str",
                "bool",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "rest_framework.requesRequest",
                    "zerver.models.UserProfile"
                ],
                "username": [
                    "str",
                    "zerver.models.UserProfile",
                    "zerver.models.Stream",
                    "server.models.User",
                    "zerver.models.Recipient",
                    "slowbro.core.user_message.UserMessage",
                    "zerver.models.UserGroup"
                ],
                "format": [
                    "List[str]",
                    "None",
                    "Dict[str,Any]",
                    "Dict",
                    "django.http.HttpRequest",
                    "Iterable"
                ]
            }
        },
        "UserInvitation.put": {
            "name": "put",
            "location": 419,
            "return": [
                "Response",
                "int",
                "Dict[str,str]",
                "Optional[Dict]",
                "Dict",
                "cmk.utils.type_defs.UserId",
                "Exception",
                "tartare.core.models.Job"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Callable",
                    "int",
                    "zerver.models.UserProfile",
                    "django.http.requesHttpRequest",
                    "rest_framework.requesRequest",
                    "django.http.HttpRequest"
                ],
                "username": [
                    "str",
                    "zerver.models.UserProfile",
                    "server.models.User",
                    "zerver.models.Stream",
                    "zerver.models.UserGroup"
                ],
                "format": [
                    "None",
                    "List[str]",
                    "django.http.HttpRequest",
                    "Dict[str,Any]",
                    "Dict",
                    "Iterable"
                ]
            }
        },
        "UserInvitation.delete": {
            "name": "delete",
            "location": 472,
            "return": [
                "Response",
                "str",
                "int",
                "Dict[str,Any]",
                "Optional[Dict[str,bytes]]",
                "Optional[Dict[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest"
                ],
                "username": [
                    "str",
                    "django.http.HttpRequest",
                    "models.User",
                    "zerver.models.UserProfile"
                ],
                "format": [
                    "django.http.HttpRequest",
                    "bool",
                    "None",
                    "str",
                    "List[int]"
                ]
            }
        },
        "ChangePassword.put": {
            "name": "put",
            "location": 527,
            "return": [
                "Response",
                "int",
                "Dict[str,str]",
                "Optional[Dict]",
                "Dict",
                "cmk.utils.type_defs.UserId",
                "Exception",
                "tartare.core.models.Job"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bytes",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest",
                    "rest_framework.requesRequest"
                ],
                "username": [
                    "Dict",
                    "zerver.models.UserProfile",
                    "server.models.User",
                    "slowbro.core.user_message.UserMessage"
                ],
                "format": [
                    "None",
                    "List[str]",
                    "django.http.HttpRequest",
                    "Dict[str,Any]",
                    "Dict",
                    "Iterable"
                ]
            }
        },
        "KycList.get": {
            "name": "get",
            "location": 585,
            "return": [
                "Response",
                "Dict[str,Any]",
                "str",
                "bool",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "Optional[str]",
                    "None",
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile"
                ],
                "format": [
                    "None",
                    "bool",
                    "django.http.HttpRequest",
                    "str",
                    "float",
                    "rest_framework.requesRequest",
                    "List",
                    "Optional[int]"
                ]
            }
        },
        "MobileVerification.put": {
            "name": "put",
            "location": 614,
            "return": [
                "Response",
                "int",
                "Dict[str,str]",
                "Optional[Dict]",
                "Dict",
                "cmk.utils.type_defs.UserId",
                "Exception",
                "tartare.core.models.Job"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "Union[bool,str]",
                    "str",
                    "fastapi.dependencies.models.Dependant",
                    "django.http.HttpRequest"
                ],
                "username": [
                    "Dict",
                    "zerver.models.UserProfile",
                    "slowbro.core.user_message.UserMessage",
                    "server.models.User"
                ],
                "format": [
                    "None",
                    "List[str]",
                    "django.http.HttpRequest",
                    "Dict[str,Any]",
                    "Dict",
                    "Iterable"
                ]
            }
        },
        "UserKycStatus.put": {
            "name": "put",
            "location": 683,
            "return": [
                "Response",
                "int",
                "Dict[str,str]",
                "Optional[Dict]",
                "Dict",
                "cmk.utils.type_defs.UserId",
                "Exception",
                "tartare.core.models.Job"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "Dict[str,str]",
                    "None",
                    "requests.models.Response",
                    "Optional[Dict[str,str]]",
                    "raiden.utils.TokenNetworkAddress",
                    "Union[str,Dict[str,Any]]"
                ],
                "format": [
                    "str",
                    "None",
                    "Dict",
                    "List",
                    "django.http.HttpRequest",
                    "bool",
                    "rest_framework.requesRequest",
                    "Optional[str]"
                ]
            }
        },
        "UserKyc.get": {
            "name": "get",
            "location": 731,
            "return": [
                "Response",
                "Dict[str,Any]",
                "str",
                "bool",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "rest_framework.requesRequest",
                    "zerver.models.UserProfile"
                ],
                "username": [
                    "bool",
                    "zerver.models.UserProfile",
                    "server.models.User",
                    "zam_repondeur.models.Amendement",
                    "slowbro.core.user_message.UserMessage",
                    "django.http.HttpRequest"
                ],
                "format": [
                    "List[str]",
                    "None",
                    "Dict[str,Any]",
                    "Dict",
                    "django.http.HttpRequest",
                    "Iterable"
                ]
            }
        },
        "UserKyc.put": {
            "name": "put",
            "location": 759,
            "return": [
                "Response",
                "int",
                "Dict[str,str]",
                "Optional[Dict]",
                "Dict",
                "cmk.utils.type_defs.UserId",
                "Exception",
                "tartare.core.models.Job"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "requests.models.PreparedRequest"
                ],
                "username": [
                    "Dict",
                    "zerver.models.UserProfile",
                    "slowbro.core.user_message.UserMessage",
                    "server.models.User"
                ],
                "format": [
                    "None",
                    "List[str]",
                    "django.http.HttpRequest",
                    "Dict[str,Any]",
                    "Dict",
                    "Iterable"
                ]
            }
        },
        "UserKyc.delete": {
            "name": "delete",
            "location": 833,
            "return": [
                "Response",
                "str",
                "int",
                "Dict[str,Any]",
                "Optional[Dict[str,bytes]]",
                "Optional[Dict[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest"
                ],
                "username": [
                    "str",
                    "models.User",
                    "django.http.HttpRequest",
                    "django.contrib.auth.models.User"
                ],
                "format": [
                    "django.http.HttpRequest",
                    "bool",
                    "None",
                    "str",
                    "List[int]"
                ]
            }
        },
        "KycCount.get": {
            "name": "get",
            "location": 873,
            "return": [
                "Response",
                "Dict[str,Any]",
                "str",
                "bool",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "Optional[str]",
                    "None",
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile"
                ],
                "format": [
                    "None",
                    "bool",
                    "django.http.HttpRequest",
                    "str",
                    "float",
                    "rest_framework.requesRequest",
                    "List",
                    "Optional[int]"
                ]
            }
        },
        "UserReferralBonus.get": {
            "name": "get",
            "location": 909,
            "return": [
                "Response",
                "Dict[str,Any]",
                "str",
                "bool",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "rest_framework.requesRequest",
                    "zerver.models.UserProfile"
                ],
                "username": [
                    "bool",
                    "zerver.models.UserProfile",
                    "server.models.User",
                    "zam_repondeur.models.Amendement",
                    "slowbro.core.user_message.UserMessage",
                    "django.http.HttpRequest"
                ],
                "format": [
                    "List[str]",
                    "None",
                    "Dict[str,Any]",
                    "Dict",
                    "django.http.HttpRequest",
                    "Iterable"
                ]
            }
        }
    },
    "coinfactory_ico-master/bluecots_ico/users/__init__.py": {},
    "coinfactory_ico-master/bluecots_ico/users/management/__init__.py": {},
    "coinfactory_ico-master/bluecots_ico/users/management/commands/ebuser.py": {
        "Command.handle": {
            "name": "handle",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "coinfactory_ico-master/bluecots_ico/users/management/commands/__init__.py": {},
    "coinfactory_ico-master/bluecots_ico/users/migrations/0001_initial.py": {},
    "coinfactory_ico-master/bluecots_ico/users/migrations/0002_auto_20181215_0406.py": {},
    "coinfactory_ico-master/bluecots_ico/users/migrations/0003_auto_20181215_0419.py": {},
    "coinfactory_ico-master/bluecots_ico/users/migrations/0004_auto_20181215_0726.py": {},
    "coinfactory_ico-master/bluecots_ico/users/migrations/0005_auto_20181215_0732.py": {},
    "coinfactory_ico-master/bluecots_ico/users/migrations/0006_auto_20181215_0743.py": {},
    "coinfactory_ico-master/bluecots_ico/users/migrations/0007_auto_20181215_2225.py": {},
    "coinfactory_ico-master/bluecots_ico/users/migrations/0008_auto_20181216_0226.py": {},
    "coinfactory_ico-master/bluecots_ico/users/migrations/0009_auto_20181216_0237.py": {},
    "coinfactory_ico-master/bluecots_ico/users/migrations/0010_auto_20181218_0044.py": {},
    "coinfactory_ico-master/bluecots_ico/users/migrations/0011_auto_20181220_0100.py": {},
    "coinfactory_ico-master/bluecots_ico/users/migrations/0012_auto_20181220_0101.py": {},
    "coinfactory_ico-master/bluecots_ico/users/migrations/0013_auto_20181220_0108.py": {},
    "coinfactory_ico-master/bluecots_ico/users/migrations/0014_auto_20181220_1515.py": {},
    "coinfactory_ico-master/bluecots_ico/users/migrations/0015_auto_20181220_1539.py": {},
    "coinfactory_ico-master/bluecots_ico/users/migrations/0016_auto_20181220_1620.py": {},
    "coinfactory_ico-master/bluecots_ico/users/migrations/0017_auto_20181220_1628.py": {},
    "coinfactory_ico-master/bluecots_ico/users/migrations/0018_auto_20181220_1724.py": {},
    "coinfactory_ico-master/bluecots_ico/users/migrations/0019_auto_20181220_1726.py": {},
    "coinfactory_ico-master/bluecots_ico/users/migrations/0020_auto_20190109_0200.py": {},
    "coinfactory_ico-master/bluecots_ico/users/migrations/0021_auto_20190109_0216.py": {},
    "coinfactory_ico-master/bluecots_ico/users/migrations/0022_user_temp_string_pw.py": {},
    "coinfactory_ico-master/bluecots_ico/users/migrations/0023_auto_20190112_0129.py": {},
    "coinfactory_ico-master/bluecots_ico/users/migrations/0024_auto_20190115_1947.py": {},
    "coinfactory_ico-master/bluecots_ico/users/migrations/0025_auto_20190117_0009.py": {},
    "coinfactory_ico-master/bluecots_ico/users/migrations/0026_auto_20190117_2253.py": {},
    "coinfactory_ico-master/bluecots_ico/users/migrations/0027_auto_20190117_2255.py": {},
    "coinfactory_ico-master/bluecots_ico/users/migrations/__init__.py": {},
    "coinfactory_ico-master/config/urls.py": {},
    "coinfactory_ico-master/config/wsgi.py": {},
    "coinfactory_ico-master/config/__init__.py": {},
    "coinfactory_ico-master/config/settings/base.py": {},
    "coinfactory_ico-master/config/settings/local.py": {},
    "coinfactory_ico-master/config/settings/production.py": {},
    "coinfactory_ico-master/config/settings/test.py": {},
    "coinfactory_ico-master/config/settings/__init__.py": {}
}
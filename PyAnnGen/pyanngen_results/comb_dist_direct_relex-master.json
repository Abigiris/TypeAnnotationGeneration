{
    "comb_dist_direct_relex-master/relex/comb_dist_direct_relex.py": {
        "CombDistDirectRelex.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [
                    "Callable[str,None]",
                    "allennlp.data.Vocabulary",
                    "str",
                    "int",
                    "Callable[[str],None]",
                    "None",
                    "Union[str,Callable[[src.autoks.backend.model.RawGPModelType],float]]",
                    "Optional[str]"
                ],
                "text_field_embedder": [
                    "bool",
                    "None",
                    "Optional[numpy.ndarray]",
                    "int"
                ],
                "cnn_size": [
                    "int",
                    "bool",
                    "float",
                    "Optional[int]"
                ],
                "dropout_weight": [
                    "float",
                    "bool",
                    "numpy.array",
                    "Optional[GraphLogger]",
                    "Dict[str,List[Any]]",
                    "int"
                ],
                "with_entity_embeddings": [
                    "bool",
                    "numpy.array",
                    "Optional[GraphLogger]",
                    "Dict[str,List[Any]]",
                    "int"
                ],
                "sent_loss_weight": [
                    "int",
                    "bool",
                    "numpy.array",
                    "Optional[GraphLogger]",
                    "Dict[str,List[Any]]"
                ],
                "attention_weight_fn": [
                    "Text",
                    "bool",
                    "numpy.array",
                    "Optional[GraphLogger]",
                    "Dict[str,List[Any]]",
                    "int"
                ],
                "attention_aggregation_fn": [
                    "Text",
                    "bool",
                    "numpy.array",
                    "Optional[GraphLogger]",
                    "Dict[str,List[Any]]",
                    "int"
                ]
            }
        },
        "CombDistDirectRelex.forward": {
            "name": "forward",
            "location": 96,
            "return": [
                "Dict[str, Any]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "mentions": [
                    "str",
                    "Optional[int]",
                    "int",
                    "Callable[[Any],str]",
                    "Optional[Sequence[str]]"
                ],
                "positions1": [
                    "int",
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "positions2": [
                    "int",
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "is_direct_supervision_bag": [
                    "List[bool]",
                    "str",
                    "bool",
                    "Union[bool,List[bool]]",
                    "Optional[Dict]",
                    "Optional[str]",
                    "Optional[numpy.ndarray]"
                ],
                "sent_labels": [
                    "int",
                    "numpy.array",
                    "numpy.ndarray",
                    "str",
                    "float"
                ],
                "labels": [
                    "float",
                    "List",
                    "None",
                    "Optional[float]",
                    "accounts.models.KippoOrganization"
                ]
            }
        },
        "CombDistDirectRelex.decode": {
            "name": "decode",
            "location": 227,
            "return": [
                "Dict[str, Any]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "output_dict": [
                    "Dict[str, torch.Tensor]",
                    "Dict[str, Any]"
                ]
            }
        },
        "CombDistDirectRelex.get_metrics": {
            "name": "get_metrics",
            "location": 242,
            "return": [
                "Dict",
                "bool",
                "Dict[str,Any]",
                "int",
                "multinedb.models.workspace.Workspace"
            ],
            "arguments": {
                "self": [],
                "reset": [
                    "bool",
                    "Optional[str]"
                ]
            }
        }
    },
    "comb_dist_direct_relex-master/relex/multilabel_average_precision_metric.py": {
        "MultilabelAveragePrecision.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bins": [
                    "int",
                    "allennlp.modules.text_field_embedders.TextFieldEmbedder",
                    "bytes",
                    "str"
                ],
                "recall_thr": [
                    "float",
                    "int",
                    "bool"
                ]
            }
        },
        "MultilabelAveragePrecision.__call__": {
            "name": "__call__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "predictions": [
                    "numpy.array"
                ],
                "gold_labels": [
                    "None",
                    "torch.Tensor",
                    "Optional[torch.Tensor]"
                ]
            }
        },
        "MultilabelAveragePrecision._thresholded_average_precision_score": {
            "name": "_thresholded_average_precision_score",
            "location": 86,
            "return": [
                "Tuple[int]",
                "int",
                "Tuple",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "precision": [
                    "int",
                    "Callable",
                    "str"
                ],
                "recall": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "MultilabelAveragePrecision.get_metric": {
            "name": "get_metric",
            "location": 95,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "reset": [
                    "bool",
                    "str"
                ]
            }
        },
        "MultilabelAveragePrecision.reset": {
            "name": "reset",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "comb_dist_direct_relex-master/relex/relation_extraction_predictor.py": {
        "RelationExtractionPredictor._json_to_instance": {
            "name": "_json_to_instance",
            "location": 15,
            "return": [
                "Tuple[Union[int,list[int],tuple[Union[int,int]],float,dict]]",
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "json_dict": []
            }
        }
    },
    "comb_dist_direct_relex-master/relex/relation_instances_reader.py": {
        "RelationInstancesReader.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "bool",
                    "int",
                    "float",
                    "allennlp.predictors.Predictor",
                    "str"
                ],
                "max_bag_size": [
                    "int",
                    "Tuple[int,int]",
                    "float",
                    "str"
                ],
                "negative_exampels_percentage": [
                    "int",
                    "float"
                ],
                "with_direct_supervision": [
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "RelationInstancesReader._read": {
            "name": "_read",
            "location": 77,
            "return": [
                "typing.Generator[]",
                "typing.Generator[typing.Union[dict[, ],str]]"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "RelationInstancesReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 142,
            "return": [
                "None",
                "Instance",
                "Union[bool,str]",
                "Union[None,int,str]",
                "Optional[str]",
                "Optional[List[str]]",
                "Optional[Set[str]]",
                "Optional[Union[str,Any]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "e1": [
                    "bool",
                    "None",
                    "object",
                    "Optional[Region]"
                ],
                "e2": [
                    "bool",
                    "None",
                    "object",
                    "Optional[Region]"
                ],
                "rels": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "mentions": [
                    "List[str]",
                    "List",
                    "List[tuple[Union[str,Any]]]",
                    "List[Tuple[str,Any]]",
                    "List[tuple[Union[Any,...]]]",
                    "bool",
                    "List[Tuple[Any,...]]",
                    "Iterable[str]"
                ],
                "is_predict": [
                    "List[str]",
                    "str",
                    "bool",
                    "Dict[str,Any]"
                ],
                "supervision_type": [
                    "List[str]",
                    "str",
                    "bool",
                    "Dict[str,Any]"
                ]
            }
        },
        "RelationInstancesReader._tokens_distances_fields": {
            "name": "_tokens_distances_fields",
            "location": 219,
            "return": [
                "Tuple[Union[TextField,SequenceLabelField]]",
                "Callable",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "str",
                    "int"
                ]
            }
        },
        "RelationInstancesReader._tokens_distances": {
            "name": "_tokens_distances",
            "location": 227,
            "return": [
                "Tuple[Union[int,str,dict[str,Union[Any,Any]]]]",
                "int",
                "bool",
                "str",
                "Iterable[str]",
                "List[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "List[str]",
                    "ebl.transliteration.domain.tokens.Token",
                    "List[Tuple[int, int]]",
                    "oj.tokens.Token",
                    "bytes",
                    "bool"
                ]
            }
        },
        "RelationInstancesReader._positions": {
            "name": "_positions",
            "location": 253,
            "return": [
                "List[int]",
                "List[Dict]",
                "List[str]",
                "str",
                "List[List[Any]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "tokens_count": [
                    "bool",
                    "str",
                    "Sequence"
                ],
                "e_loc": [
                    "bool",
                    "str",
                    "List[List[str]]"
                ]
            }
        }
    },
    "comb_dist_direct_relex-master/relex/__init__.py": {},
    "comb_dist_direct_relex-master/scripts/plot_pr_curves.py": {},
    "comb_dist_direct_relex-master/tests/test_multilabel_average_precision_metric.py": {
        "TestUtil.test_get_metrics": {
            "name": "test_get_metrics",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "List",
                    "bool",
                    "str"
                ]
            }
        }
    }
}
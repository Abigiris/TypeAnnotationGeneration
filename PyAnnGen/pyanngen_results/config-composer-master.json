{
    "config-composer-master/setup.py": {},
    "config-composer-master/config_composer/consts.py": {},
    "config-composer-master/config_composer/__init__.py": {},
    "config-composer-master/config_composer/core/config.py": {
        "get_source_kwargs": {
            "name": "get_source_kwargs",
            "location": 27,
            "return": [
                "dict"
            ],
            "arguments": {
                "source": [
                    "str",
                    "Dict",
                    "Dict[str,Any]",
                    "bool",
                    "Iterable[str]"
                ],
                "data": [
                    "Dict",
                    "Dict[str,str]",
                    "str",
                    "utils.MinMaxStats",
                    "Iterable[str]"
                ]
            }
        },
        "source_spec_parameters_from_ini": {
            "name": "source_spec_parameters_from_ini",
            "location": 41,
            "return": [
                "dict"
            ],
            "arguments": {
                "filepath": [
                    "Dict[str,list[int]]",
                    "raiden.utils.signer.Signer",
                    "Callable[Any,bool]",
                    "str",
                    "Dict[str,List[int]]",
                    "IO",
                    "Callable[[Any],bool]",
                    "IO[bytes]"
                ]
            }
        },
        "source_spec_paramaters_from_yaml": {
            "name": "source_spec_paramaters_from_yaml",
            "location": 52,
            "return": [
                "str",
                "Dict[str, Any]",
                "Iterable[str]"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "int",
                    "deque",
                    "Tuple[str,int]"
                ]
            }
        },
        "source_spec_from_file": {
            "name": "source_spec_from_file",
            "location": 66,
            "return": [
                "SourceSpec",
                "str",
                "int",
                "pathlib.PurePath"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "int",
                    "pathlib.Path"
                ]
            }
        },
        "get_name": {
            "name": "get_name",
            "location": 87,
            "return": [
                "Dict[str, Union[str, Any]]",
                "Optional[str]",
                "tuple",
                "Dict[str, Any]"
            ],
            "arguments": {
                "obj": [
                    "Dict",
                    "bool",
                    "str"
                ]
            }
        },
        "format_parameter_table": {
            "name": "format_parameter_table",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "parameters_info": [
                    "str",
                    "List",
                    "List[str]",
                    "Optional[str]",
                    "Optional[IO[str]]"
                ]
            }
        },
        "Config.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_spec": [
                    "Dict",
                    "TextIO",
                    "str",
                    "Callable",
                    "bool"
                ],
                "source_spec": [
                    "Dict[str,str]",
                    "None",
                    "Dict",
                    "Callable",
                    "Optional[Dict]",
                    "Optional[Exception]",
                    "Exception"
                ],
                "env_var": [
                    "bool",
                    "None",
                    "str",
                    "Dict",
                    "pathlib.Path",
                    "Optional[str]"
                ]
            }
        },
        "Config.source_spec_factory": {
            "name": "source_spec_factory",
            "location": 140,
            "return": [
                "typing.Type"
            ],
            "arguments": {
                "self": [],
                "source_spec": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]"
                ]
            }
        },
        "Config._parameter_spec": {
            "name": "_parameter_spec",
            "location": 152,
            "return": [
                "int",
                "float",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "Config._parameter_names": {
            "name": "_parameter_names",
            "location": 161,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config._source_specs": {
            "name": "_source_specs",
            "location": 164,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,str]",
                    "bytes",
                    "bool",
                    "Dict[str,Any]",
                    "List[Any]",
                    "Union[Dict[str,Any],List[Any]]"
                ]
            }
        },
        "Config.__get__item__attr__": {
            "name": "__get__item__attr__",
            "location": 171,
            "return": [
                "NOTHING",
                "str",
                "Type"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Config.__getattr__": {
            "name": "__getattr__",
            "location": 195,
            "return": [
                "bool",
                "Optional[str]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Config.__getitem__": {
            "name": "__getitem__",
            "location": 198,
            "return": [
                "bool",
                "Optional[str]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Config.get": {
            "name": "get",
            "location": 201,
            "return": [
                "int",
                "None",
                "str",
                "float",
                "List",
                "Optional[Dict]",
                "Tuple",
                "Dict",
                "Dict[str,Any]",
                "NOTHING"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ],
                "default": [
                    "None",
                    "str",
                    "pathlib.Path",
                    "int",
                    "Tuple",
                    "List",
                    "Union[int,bool]"
                ]
            }
        }
    },
    "config-composer-master/config_composer/core/parameter_types.py": {
        "Parameter.__call__": {
            "name": "__call__",
            "location": 2,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parameter.factory_type": {
            "name": "factory_type",
            "location": 5,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "config-composer-master/config_composer/core/spec.py": {
        "dunder_key": {
            "name": "dunder_key",
            "location": 5,
            "return": [
                "bool",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "get_factory_type": {
            "name": "get_factory_type",
            "location": 9,
            "return": [
                "Optional[_T0]"
            ],
            "arguments": {
                "annotated_type": [
                    "Type",
                    "Type[BaseException]"
                ]
            }
        },
        "MetaSpec.__new__": {
            "name": "__new__",
            "location": 18,
            "return": [
                "str",
                "int",
                "Dict",
                "List[tuple[Union[str,str,str]]]",
                "bool",
                "Dict[str,Any]",
                "Dict[str,tuple[Union[Any,Any]]]"
            ],
            "arguments": {
                "mcls": [
                    "Type[MetaSpec]"
                ],
                "name": [
                    "str",
                    "MutableMapping[str,Any]",
                    "MutableMapping"
                ],
                "bases": [
                    "str",
                    "MutableMapping[str,Any]",
                    "MutableMapping"
                ],
                "attrs": [
                    "Dict",
                    "str",
                    "MutableMapping[str,Any]"
                ]
            }
        },
        "MetaSpec.get_declared_parameters": {
            "name": "get_declared_parameters",
            "location": 29,
            "return": [
                "dict"
            ],
            "arguments": {
                "mcls": [
                    "Type[MetaSpec]"
                ],
                "annotations": [
                    "bool",
                    "Type[Any]",
                    "Literal"
                ],
                "values": [
                    "str"
                ]
            }
        }
    },
    "config-composer-master/config_composer/core/utils.py": {
        "parameter_info": {
            "name": "parameter_info",
            "location": 5,
            "return": [
                "config_composer.core_data_structures.ParameterInfo"
            ],
            "arguments": {
                "config": [
                    "str",
                    "int"
                ],
                "name": [
                    "str",
                    "float",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "all_parameter_info": {
            "name": "all_parameter_info",
            "location": 14,
            "return": [
                "list"
            ],
            "arguments": {
                "config": [
                    "Optional[Iterable[str]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "preload": {
            "name": "preload",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "config-composer-master/config_composer/core/__init__.py": {},
    "config-composer-master/config_composer/core_data_structures/__init__.py": {},
    "config-composer-master/config_composer/sources/abc.py": {
        "AbstractSourceDescriptor._name": {
            "name": "_name",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractSourceDescriptor._key": {
            "name": "_key",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractSourceDescriptor.__repr__": {
            "name": "__repr__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractSourceDescriptor.__get__": {
            "name": "__get__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "str",
                    "Dict",
                    "T"
                ],
                "objtype": [
                    "bool",
                    "str",
                    "Dict",
                    "T"
                ]
            }
        },
        "AbstractSourceDescriptor._get_cache": {
            "name": "_get_cache",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "str",
                    "Dict",
                    "T"
                ],
                "objtype": [
                    "bool",
                    "str",
                    "Dict",
                    "T"
                ]
            }
        },
        "ValueSource._value": {
            "name": "_value",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValueSource.__get__": {
            "name": "__get__",
            "location": 33,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "float"
                ],
                "objtype": [
                    "str",
                    "float"
                ]
            }
        },
        "ValueSource._get_cache": {
            "name": "_get_cache",
            "location": 39,
            "return": [
                "str",
                "Sequence[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "bool"
                ],
                "objtype": [
                    "str",
                    "bool"
                ]
            }
        },
        "DocumentSource._doc": {
            "name": "_doc",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocumentSource.__get__": {
            "name": "__get__",
            "location": 55,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "List[int]",
                    "bool"
                ],
                "objtype": [
                    "str",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "DocumentSource._get_cache": {
            "name": "_get_cache",
            "location": 72,
            "return": [
                "str",
                "Sequence[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "bool"
                ],
                "objtype": [
                    "str",
                    "bool"
                ]
            }
        },
        "DocumentSourceTTL._expired": {
            "name": "_expired",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocumentSourceTTL._get_ttl": {
            "name": "_get_ttl",
            "location": 88,
            "return": [
                "str",
                "Sequence[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "bool"
                ],
                "objtype": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "config-composer-master/config_composer/sources/aws.py": {
        "Parameter.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "Parameter._name": {
            "name": "_name",
            "location": 30,
            "return": [
                "str",
                "List[Tuple[int]]",
                "List[T]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parameter._key": {
            "name": "_key",
            "location": 34,
            "return": [
                "Tuple",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parameter.__repr__": {
            "name": "__repr__",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parameter._value": {
            "name": "_value",
            "location": 42,
            "return": [
                "str",
                "int",
                "Type[T]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "config-composer-master/config_composer/sources/default.py": {
        "Default.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "float",
                    "Dict",
                    "bool",
                    "bytes",
                    "Union[str,bytes]",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]"
                ]
            }
        },
        "Default._name": {
            "name": "_name",
            "location": 11,
            "return": [
                "str",
                "list",
                "T",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Default._key": {
            "name": "_key",
            "location": 15,
            "return": [
                "Tuple",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Default.__repr__": {
            "name": "__repr__",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Default._value": {
            "name": "_value",
            "location": 23,
            "return": [
                "bool",
                "str",
                "Iterable['cirq.Qid']",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultSecret.__repr__": {
            "name": "__repr__",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "config-composer-master/config_composer/sources/env.py": {
        "Env.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "prefix": [
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "Env._name": {
            "name": "_name",
            "location": 16,
            "return": [
                "str",
                "List[Tuple[int]]",
                "List[T]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Env._key": {
            "name": "_key",
            "location": 20,
            "return": [
                "Tuple",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Env.__repr__": {
            "name": "__repr__",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Env._value": {
            "name": "_value",
            "location": 28,
            "return": [
                "Optional[\"CustomerResourceIdentifier\"]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "config-composer-master/config_composer/sources/files.py": {
        "DotEnvFile.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "bool",
                    "str",
                    "Optional[Callable]",
                    "Callable",
                    "Tuple[str,str]",
                    "None",
                    "Tuple[Union[str,str]]"
                ],
                "dotenv_path": [
                    "Text",
                    "str",
                    "bool"
                ],
                "ttl": [
                    "int",
                    "bool",
                    "str",
                    "Optional[str]",
                    "float"
                ],
                "_get_time": [
                    "Optional[str]",
                    "str",
                    "Callable"
                ]
            }
        },
        "DotEnvFile._name": {
            "name": "_name",
            "location": 49,
            "return": [
                "str",
                "List[Tuple[int]]",
                "List[T]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DotEnvFile._key": {
            "name": "_key",
            "location": 53,
            "return": [
                "str",
                "Tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "DotEnvFile.__repr__": {
            "name": "__repr__",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DotEnvFile._expired": {
            "name": "_expired",
            "location": 60,
            "return": [
                "Tuple[(bool, Union[(Dict[(str, Any)], _T0)])]"
            ],
            "arguments": {
                "self": [],
                "ttl_stamp": [
                    "str"
                ]
            }
        },
        "DotEnvFile._doc": {
            "name": "_doc",
            "location": 80,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "config-composer-master/config_composer/sources/vault.py": {
        "Secret.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int",
                    "List[str]",
                    "bool"
                ],
                "field": [
                    "str",
                    "Set[str]",
                    "Dict",
                    "List[Optional[str]]",
                    "List[int]",
                    "Optional[str]",
                    "None"
                ],
                "mount_point": [
                    "Text",
                    "Type",
                    "str",
                    "bool",
                    "Optional[str]",
                    "TextIO"
                ],
                "server": [
                    "Text",
                    "Type",
                    "str",
                    "bool",
                    "Optional[str]",
                    "TextIO"
                ]
            }
        },
        "Secret._name": {
            "name": "_name",
            "location": 38,
            "return": [
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Secret._key": {
            "name": "_key",
            "location": 42,
            "return": [
                "str",
                "Tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Secret.__repr__": {
            "name": "__repr__",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Secret._value": {
            "name": "_value",
            "location": 50,
            "return": [
                "str",
                "int",
                "dict",
                "tuple",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "config-composer-master/config_composer/sources/__init__.py": {},
    "config-composer-master/docs/conf.py": {},
    "config-composer-master/docs/quickstart.py": {},
    "config-composer-master/examples/simple_http/server.py": {
        "mock_query_db": {
            "name": "mock_query_db",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "server_class": [
                    "Optional[int]",
                    "float",
                    "str",
                    "bool"
                ],
                "handler_class": [
                    "SimpleHTTPRequestHandler",
                    "Optional[int]",
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "SimpleHTTPRequestHandler.do_GET": {
            "name": "do_GET",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "config-composer-master/tests/__init__.py": {},
    "config-composer-master/tests/unit/conftest.py": {
        "random_string": {
            "name": "random_string",
            "location": 15,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "random_integer": {
            "name": "random_integer",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "aws_parameter_fixtures": {
            "name": "aws_parameter_fixtures",
            "location": 27,
            "return": [
                "typing.Generator[typing.Union[str,set[str],list[str]]]"
            ],
            "arguments": {
                "random_string": [
                    "str",
                    "Set[str]",
                    "List[str]"
                ]
            }
        },
        "vault_secret_fixtures": {
            "name": "vault_secret_fixtures",
            "location": 41,
            "return": [
                "typing.Generator[typing.Union[str,dict[str, typing.Any]]]"
            ],
            "arguments": {
                "requests_mock": [
                    "Dict",
                    "Dict[str,str]",
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "List[Dict[str,Any]]"
                ],
                "random_string": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "environ": {
            "name": "environ",
            "location": 78,
            "return": [
                "typing.Generator[Environ]"
            ],
            "arguments": {}
        },
        "environ.Environ.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "environ.Environ.__getitem__": {
            "name": "__getitem__",
            "location": 84,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "environ.Environ.__setitem__": {
            "name": "__setitem__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "environ.Environ.__delitem__": {
            "name": "__delitem__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "Union[str, Dict[str, Any]]",
                    "Union[int, float]"
                ]
            }
        },
        "environ.Environ.clean_up": {
            "name": "clean_up",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "config-composer-master/tests/unit/__init__.py": {},
    "config-composer-master/tests/unit/core/test_core.py": {
        "test_source_spec_from_yaml_file": {
            "name": "test_source_spec_from_yaml_file",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "environ": [
                    "str",
                    "List[int]",
                    "IO[str]",
                    "Optional[Callable[[Any], None]]"
                ],
                "random_string": [
                    "str"
                ]
            }
        },
        "test_source_spec_from_ini_file": {
            "name": "test_source_spec_from_ini_file",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "environ": [
                    "str",
                    "List[int]",
                    "IO[str]",
                    "Optional[Callable[[Any], None]]"
                ],
                "random_string": [
                    "str"
                ]
            }
        },
        "test_multiple_source_specs": {
            "name": "test_multiple_source_specs",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "environ": [
                    "str",
                    "Dict[str, str]",
                    "bool",
                    "Dict[Tuple[str, str], int]"
                ],
                "random_string": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "random_integer": [
                    "str",
                    "Optional[Dict]",
                    "Dict",
                    "None"
                ]
            }
        },
        "test_multiple_source_specs_most_significant_spec": {
            "name": "test_multiple_source_specs_most_significant_spec",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "environ": [
                    "str",
                    "Dict[str, str]",
                    "bool",
                    "Dict[Tuple[str, str], int]"
                ],
                "random_string": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "random_integer": [
                    "str",
                    "Callable[[str],None]",
                    "Callable[str,None]",
                    "Union[int,str]",
                    "int",
                    "Tuple[str,str,str]",
                    "Tuple[Union[str,str,str]]"
                ]
            }
        },
        "test_source_spec_from_multiple_ini_file": {
            "name": "test_source_spec_from_multiple_ini_file",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "environ": [
                    "str",
                    "waterbutler.core.path.WaterButlerPath"
                ],
                "random_string": [
                    "str"
                ],
                "random_integer": [
                    "str",
                    "Dict[str,str]"
                ]
            }
        },
        "test_accessing_non_existant_config_parameter": {
            "name": "test_accessing_non_existant_config_parameter",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "random_integer": []
            }
        },
        "test_casts_source_value_to_type": {
            "name": "test_casts_source_value_to_type",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "environ": [
                    "str"
                ],
                "random_integer": [
                    "Dict"
                ]
            }
        },
        "test_string_parameter_type": {
            "name": "test_string_parameter_type",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "environ": [
                    "str",
                    "bool",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ],
                "random_string": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_integer_parameter_type": {
            "name": "test_integer_parameter_type",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "environ": [
                    "blurr.core.schema_loader.SchemaLoader",
                    "cmk.utils.type_defs.HostName"
                ],
                "random_integer": []
            }
        },
        "test_default": {
            "name": "test_default",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "environ": [
                    "str"
                ],
                "random_string": [
                    "str",
                    "Union[bool,str]",
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "test_env": {
            "name": "test_env",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "environ": [
                    "str",
                    "Dict[str, str]",
                    "Dict[Tuple[str, str], int]",
                    "bool"
                ],
                "random_string": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_aws_paramater": {
            "name": "test_aws_paramater",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "aws_parameter_fixtures": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "random_string": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "test_vault_secret": {
            "name": "test_vault_secret",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "vault_secret_fixtures": [
                    "str",
                    "bool"
                ],
                "random_string": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[Callable]",
                    "Callable",
                    "None"
                ]
            }
        },
        "test_dotfile": {
            "name": "test_dotfile",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "random_string": [
                    "str"
                ],
                "random_integer": [
                    "str"
                ]
            }
        },
        "test_preloading_config": {
            "name": "test_preloading_config",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "environ": [
                    "str"
                ]
            }
        },
        "test_failed_preloading": {
            "name": "test_failed_preloading",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "environ": [
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "test_failed_runtime": {
            "name": "test_failed_runtime",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "environ": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "config-composer-master/tests/unit/core/test_utils.py": {
        "test_get_parameter_info": {
            "name": "test_get_parameter_info",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "random_string": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "random_integer": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_get_all_parameters_info": {
            "name": "test_get_all_parameters_info",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "random_string": [
                    "str"
                ],
                "random_integer": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "config-composer-master/tests/unit/core/__init__.py": {},
    "config-composer-master/tests/unit/sources/test_abc.py": {
        "TestValueSource.assert_descriptor_value": {
            "name": "assert_descriptor_value",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "descriptor": [
                    "str",
                    "Dict",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "expected_value": [
                    "str",
                    "bool",
                    "Dict",
                    "MutableRangeSet[T]",
                    "int"
                ]
            }
        },
        "TestValueSource.test_gets_value_using_value_property": {
            "name": "test_gets_value_using_value_property",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "random_string": [
                    "str",
                    "Dict",
                    "int",
                    "None",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "TestValueSource.test_adds_each_new_value_to_cache": {
            "name": "test_adds_each_new_value_to_cache",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "random_string": [
                    "str"
                ]
            }
        },
        "TestDocumentSource.assert_descriptor_value": {
            "name": "assert_descriptor_value",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "descriptor": [
                    "str",
                    "Dict",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "expected_value": [
                    "str",
                    "bool",
                    "Dict",
                    "MutableRangeSet[T]",
                    "int"
                ]
            }
        },
        "TestDocumentSource.test_gets_value_using_value_property": {
            "name": "test_gets_value_using_value_property",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "random_string": [
                    "str",
                    "Dict",
                    "int",
                    "None",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "TestDocumentSource.test_adds_entire_doc_to_cache": {
            "name": "test_adds_entire_doc_to_cache",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "random_string": [
                    "str"
                ]
            }
        },
        "TestDocumentSourceTTL.assert_descriptor_value": {
            "name": "assert_descriptor_value",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "descriptor": [
                    "Dict[str, Any]",
                    "boucanpy.core.http_server.HttpServerRepo",
                    "boucanpy.core.dns_server.DnsServerRepo",
                    "str"
                ],
                "expected_value": [
                    "Dict[str,Any]",
                    "Dict",
                    "Dict[str,list[Any]]",
                    "bool",
                    "Dict[str,List[Any]]",
                    "int"
                ],
                "MockClass": [
                    "Dict[str,Any]",
                    "str",
                    "boucanpy.core.http_server.HttpServerRepo",
                    "boucanpy.core.dns_server.DnsServerRepo"
                ]
            }
        },
        "TestDocumentSourceTTL.test_can_expire_document_cache": {
            "name": "test_can_expire_document_cache",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "random_string": [
                    "str"
                ],
                "random_integer": [
                    "str",
                    "int",
                    "Mapping[str,List[str]]",
                    "Mapping"
                ]
            }
        },
        "TestDocumentSourceTTL.test_adds_entire_doc_to_cache": {
            "name": "test_adds_entire_doc_to_cache",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "random_string": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestValueSource.test_gets_value_using_value_property.MySource._name": {
            "name": "_name",
            "location": 21,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValueSource.test_gets_value_using_value_property.MySource._key": {
            "name": "_key",
            "location": 25,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValueSource.test_gets_value_using_value_property.MySource.__repr__": {
            "name": "__repr__",
            "location": 29,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValueSource.test_gets_value_using_value_property.MySource._value": {
            "name": "_value",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestValueSource.test_adds_each_new_value_to_cache.MySource.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "TestValueSource.test_adds_each_new_value_to_cache.MySource._name": {
            "name": "_name",
            "location": 46,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValueSource.test_adds_each_new_value_to_cache.MySource._key": {
            "name": "_key",
            "location": 50,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValueSource.test_adds_each_new_value_to_cache.MySource.__repr__": {
            "name": "__repr__",
            "location": 54,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValueSource.test_adds_each_new_value_to_cache.MySource._value": {
            "name": "_value",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDocumentSource.test_gets_value_using_value_property.MySource._name": {
            "name": "_name",
            "location": 96,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDocumentSource.test_gets_value_using_value_property.MySource._key": {
            "name": "_key",
            "location": 100,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDocumentSource.test_gets_value_using_value_property.MySource.__repr__": {
            "name": "__repr__",
            "location": 104,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDocumentSource.test_gets_value_using_value_property.MySource._doc": {
            "name": "_doc",
            "location": 108,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDocumentSource.test_adds_entire_doc_to_cache.MySource.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "TestDocumentSource.test_adds_entire_doc_to_cache.MySource._name": {
            "name": "_name",
            "location": 121,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDocumentSource.test_adds_entire_doc_to_cache.MySource._key": {
            "name": "_key",
            "location": 125,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDocumentSource.test_adds_entire_doc_to_cache.MySource.__repr__": {
            "name": "__repr__",
            "location": 129,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDocumentSource.test_adds_entire_doc_to_cache.MySource._doc": {
            "name": "_doc",
            "location": 133,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDocumentSourceTTL.test_can_expire_document_cache.MySource.__init__": {
            "name": "__init__",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDocumentSourceTTL.test_can_expire_document_cache.MySource._name": {
            "name": "_name",
            "location": 183,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDocumentSourceTTL.test_can_expire_document_cache.MySource._key": {
            "name": "_key",
            "location": 187,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDocumentSourceTTL.test_can_expire_document_cache.MySource.__repr__": {
            "name": "__repr__",
            "location": 191,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDocumentSourceTTL.test_can_expire_document_cache.MySource._doc": {
            "name": "_doc",
            "location": 195,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDocumentSourceTTL.test_can_expire_document_cache.MySource._expired": {
            "name": "_expired",
            "location": 198,
            "return": [
                "tuple[typing.Union[bool,dict[typing.Text, bool]]]"
            ],
            "arguments": {
                "self": [],
                "ttl_data": []
            }
        },
        "TestDocumentSourceTTL.test_adds_entire_doc_to_cache.MySource.__init__": {
            "name": "__init__",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "TestDocumentSourceTTL.test_adds_entire_doc_to_cache.MySource._name": {
            "name": "_name",
            "location": 240,
            "return": [
                "Text",
                "str",
                "List[Tuple[int]]",
                "List[T]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDocumentSourceTTL.test_adds_entire_doc_to_cache.MySource._key": {
            "name": "_key",
            "location": 244,
            "return": [
                "Tuple",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDocumentSourceTTL.test_adds_entire_doc_to_cache.MySource.__repr__": {
            "name": "__repr__",
            "location": 248,
            "return": [
                "Text",
                "str",
                "Optional[List[str]]",
                "List[str]",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDocumentSourceTTL.test_adds_entire_doc_to_cache.MySource._doc": {
            "name": "_doc",
            "location": 252,
            "return": [
                "str",
                "Dict[Text,]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDocumentSourceTTL.test_adds_entire_doc_to_cache.MySource._expired": {
            "name": "_expired",
            "location": 260,
            "return": [
                "Tuple[Union[bool,dict[Text,bool]]]",
                "int",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "ttl_data": [
                    "dict",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]"
                ]
            }
        }
    },
    "config-composer-master/tests/unit/sources/test_aws.py": {
        "TestParameterSource.assert_descriptor_value": {
            "name": "assert_descriptor_value",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "descriptor": [
                    "str",
                    "Dict",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "expected_value": [
                    "str",
                    "bool",
                    "Dict",
                    "MutableRangeSet[T]",
                    "int"
                ]
            }
        },
        "TestParameterSource.test_default_behaviour": {
            "name": "test_default_behaviour",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "aws_parameter_fixtures": [
                    "int",
                    "str"
                ]
            }
        },
        "TestParameterSource.test_non_existant_path": {
            "name": "test_non_existant_path",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "aws_parameter_fixtures": [
                    "bool",
                    "str",
                    "List[str]",
                    "BinaryIO",
                    "Union[str,List[str]]"
                ]
            }
        }
    },
    "config-composer-master/tests/unit/sources/test_default.py": {
        "TestDefaultSource.assert_descriptor_value": {
            "name": "assert_descriptor_value",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "descriptor": [
                    "str",
                    "Dict",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "expected_value": [
                    "str",
                    "bool",
                    "Dict",
                    "MutableRangeSet[T]",
                    "int"
                ]
            }
        },
        "TestDefaultSource.test_default_behaviour": {
            "name": "test_default_behaviour",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "random_string": [
                    "str",
                    "Dict[str,str]"
                ],
                "random_integer": [
                    "str"
                ]
            }
        }
    },
    "config-composer-master/tests/unit/sources/test_dotenvfile.py": {
        "TestDotEnvFileSource.assert_descriptor_value": {
            "name": "assert_descriptor_value",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "descriptor": [
                    "Dict[str, Any]",
                    "str"
                ],
                "expected_value": [
                    "Dict[str,Any]",
                    "Dict",
                    "Dict[str,list[Any]]",
                    "bool",
                    "Dict[str,List[Any]]",
                    "int"
                ],
                "MockClass": [
                    "Dict[str,Any]",
                    "str"
                ]
            }
        },
        "TestDotEnvFileSource.test_default_behaviour": {
            "name": "test_default_behaviour",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "random_string": [
                    "str"
                ],
                "random_integer": [
                    "str",
                    "int"
                ]
            }
        },
        "TestDotEnvFileSource.test_reloads_changed_file": {
            "name": "test_reloads_changed_file",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "random_string": [
                    "str"
                ],
                "random_integer": [
                    "str"
                ]
            }
        },
        "TestDotEnvFileSource.test_reloads_changed_file.mock_time": {
            "name": "mock_time",
            "location": 42,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {}
        }
    },
    "config-composer-master/tests/unit/sources/test_env.py": {
        "TestEnvSource.assert_descriptor_value": {
            "name": "assert_descriptor_value",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "descriptor": [
                    "str",
                    "Dict",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "expected_value": [
                    "str",
                    "bool",
                    "Dict",
                    "MutableRangeSet[T]",
                    "int"
                ]
            }
        },
        "TestEnvSource.test_default_behaviour": {
            "name": "test_default_behaviour",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "random_string": [
                    "str"
                ]
            }
        },
        "TestEnvSource.test_adds_prefix": {
            "name": "test_adds_prefix",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "random_string": [
                    "str"
                ]
            }
        }
    },
    "config-composer-master/tests/unit/sources/test_vault.py": {
        "TestVaultSecret.assert_descriptor_value": {
            "name": "assert_descriptor_value",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "descriptor": [
                    "str",
                    "Dict",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "expected_value": [
                    "str",
                    "bool",
                    "Dict",
                    "MutableRangeSet[T]",
                    "int"
                ]
            }
        },
        "TestVaultSecret.test_default_behaviour": {
            "name": "test_default_behaviour",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vault_secret_fixtures": [
                    "bool",
                    "Dict[int,dict]",
                    "int"
                ]
            }
        },
        "TestVaultSecret.test_non_existant_secret": {
            "name": "test_non_existant_secret",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vault_secret_fixtures": [
                    "str",
                    "bool",
                    "Set[int]",
                    "Optional[Set[int]]",
                    "None"
                ]
            }
        },
        "TestVaultSecret.test_non_existant_path": {
            "name": "test_non_existant_path",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vault_secret_fixtures": [
                    "str",
                    "bool",
                    "Callable[[str],str]",
                    "Callable[str,str]"
                ]
            }
        }
    },
    "config-composer-master/tests/unit/sources/__init__.py": {}
}
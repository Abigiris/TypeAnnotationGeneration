{
    "conflow-master/conflow/layer.py": {
        "LayerProtocol.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "bytes",
                    "T",
                    "cincoconfig.abc.BaseConfig"
                ],
                "settings": [
                    "bytes",
                    "T",
                    "cincoconfig.abc.BaseConfig"
                ],
                "name": [
                    "None",
                    "bytes",
                    "T",
                    "cincoconfig.abc.BaseConfig"
                ]
            }
        },
        "LayerProtocol.tree": {
            "name": "tree",
            "location": 25,
            "return": [
                "conflow.node.TU",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LayerProtocol.merge": {
            "name": "merge",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "SupportsFloat",
                    "int",
                    "Union[int,float]",
                    "float",
                    "AbstractSet[T]",
                    "AbstractSet"
                ]
            }
        },
        "Layer.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "bool",
                    "Dict",
                    "sphinx.config.Config",
                    "model.Config",
                    "virgene.config.Config",
                    "Step"
                ],
                "settings": [
                    "str",
                    "int",
                    "Type[T]",
                    "Type"
                ],
                "name": [
                    "None",
                    "str",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "Exception",
                    "Iterable[str]"
                ]
            }
        },
        "Layer.tree": {
            "name": "tree",
            "location": 48,
            "return": [
                "node.Node"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layer.merge": {
            "name": "merge",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "conflow-master/conflow/manager.py": {
        "Config.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "merge_different": [
                    "bool",
                    "int"
                ],
                "merge_list": [
                    "float",
                    "list",
                    "tuple",
                    "Tuple[int, int]"
                ],
                "notification": [
                    "bool",
                    "int"
                ]
            }
        },
        "Config.merge": {
            "name": "merge",
            "location": 38,
            "return": [
                "Config"
            ],
            "arguments": {
                "self": [
                    "_TConfig@@Config@@"
                ],
                "settings": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Config.__getitem__": {
            "name": "__getitem__",
            "location": 47,
            "return": [
                "Iterator[Sequence[str]]",
                "Callable",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Hashable"
                ]
            }
        },
        "Config.__getattr__": {
            "name": "__getattr__",
            "location": 55,
            "return": [
                "str",
                "AbstractSet[str]",
                "NamedTuple",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        }
    },
    "conflow-master/conflow/merge.py": {
        "merge_factory": {
            "name": "merge_factory",
            "location": 104,
            "return": [
                "None",
                "bool",
                "str",
                "revlibs.connections.config.Config",
                "qutebrowser.config.config.Config",
                "Dict"
            ],
            "arguments": {
                "base": [],
                "other": [],
                "config": [
                    "Dict",
                    "conflow.manager.Config",
                    "None",
                    "Optional[Dict]",
                    "config.Config"
                ]
            }
        }
    },
    "conflow-master/conflow/node.py": {
        "node_factory": {
            "name": "node_factory",
            "location": 275,
            "return": [
                "None",
                "bool",
                "Dict[str,str]",
                "Optional[str]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "key": [
                    "bool",
                    "List[str]",
                    "str",
                    "Type",
                    "Type[MutableMapping]",
                    "VT"
                ],
                "value": [
                    "Optional[Mapping]",
                    "Mapping",
                    "Optional[Sequence[Any]]",
                    "None",
                    "Optional[List]",
                    "Sequence[Any]",
                    "Optional[Any]",
                    "List",
                    "Any"
                ],
                "parent": [
                    "List[T]",
                    "None"
                ]
            }
        },
        "AbstractNode.__call__": {
            "name": "__call__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractNode.__getitem__": {
            "name": "__getitem__",
            "location": 18,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[float,int]",
                    "float",
                    "int"
                ]
            }
        },
        "AbstractNode.__getattr__": {
            "name": "__getattr__",
            "location": 21,
            "return": [
                "Node"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Dict",
                    "bool",
                    "Dict[str,Any]"
                ],
                "value": [
                    "Dict[str,Any]",
                    "bool",
                    "str",
                    "bytes",
                    "KT",
                    "List[tuple]",
                    "Union[str,int]",
                    "List[Tuple]"
                ],
                "parent": [
                    "Optional[dict]",
                    "None",
                    "Optional[str]",
                    "Dict",
                    "Optional[T]",
                    "str"
                ]
            }
        },
        "Node.__call__": {
            "name": "__call__",
            "location": 54,
            "return": [
                "Dict[str, Any]",
                "float",
                "list",
                "dict",
                "Iterable[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__repr__": {
            "name": "__repr__",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__eq__": {
            "name": "__eq__",
            "location": 67,
            "return": [
                "bool",
                "int",
                "Iterable[T]",
                "str",
                "Hashable"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "Node.__ne__": {
            "name": "__ne__",
            "location": 71,
            "return": [
                "bool",
                "int",
                "Iterable[T]",
                "str",
                "Hashable"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "NodeList.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Dict",
                    "bool",
                    "Dict[str,Any]"
                ],
                "value": [
                    "bool",
                    "List[str]",
                    "Callable",
                    "int"
                ],
                "parent": [
                    "Optional[dict]",
                    "None",
                    "Optional[str]",
                    "Dict",
                    "Optional[T]",
                    "str"
                ]
            }
        },
        "NodeList.__call__": {
            "name": "__call__",
            "location": 97,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeList.__repr__": {
            "name": "__repr__",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeList.__create_nodes": {
            "name": "__create_nodes",
            "location": 110,
            "return": [
                "List",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "Iterable[T]",
                    "float",
                    "T",
                    "int"
                ]
            }
        },
        "NodeList.__iter__": {
            "name": "__iter__",
            "location": 123,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeList.__eq__": {
            "name": "__eq__",
            "location": 127,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Dict",
                    "AbstractSet",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "NodeList.__ne__": {
            "name": "__ne__",
            "location": 131,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Dict",
                    "AbstractSet",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "NodeList.__contains__": {
            "name": "__contains__",
            "location": 135,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "List[float]",
                    "bool"
                ]
            }
        },
        "NodeList.__len__": {
            "name": "__len__",
            "location": 143,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeList.__getitem__": {
            "name": "__getitem__",
            "location": 147,
            "return": [
                "str",
                "Dict[str, str]",
                "Sequence[str]",
                "MutableMapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "int",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ]
            }
        },
        "NodeMap.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Dict",
                    "bool",
                    "Dict[str,Any]"
                ],
                "value": [
                    "int",
                    "Sequence[T]",
                    "Collection[str]",
                    "Collection"
                ],
                "parent": [
                    "Optional[dict]",
                    "None",
                    "Optional[str]",
                    "Dict",
                    "Optional[T]",
                    "str"
                ]
            }
        },
        "NodeMap.__repr__": {
            "name": "__repr__",
            "location": 180,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeMap.__iter__": {
            "name": "__iter__",
            "location": 185,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeMap.__len__": {
            "name": "__len__",
            "location": 189,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeMap.__call__": {
            "name": "__call__",
            "location": 193,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeMap.__create_nodes": {
            "name": "__create_nodes",
            "location": 201,
            "return": [
                "Dict[tuple[Union[str,Any]],]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str,Any]",
                    "Dict",
                    "Callable"
                ]
            }
        },
        "NodeMap.__getattr__": {
            "name": "__getattr__",
            "location": 212,
            "return": [
                "dict",
                "Callable",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "NodeMap.__contains__": {
            "name": "__contains__",
            "location": 220,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "Dict",
                    "T",
                    "Shape",
                    "SpeciesNameComplex"
                ]
            }
        },
        "NodeMap.__getitem__": {
            "name": "__getitem__",
            "location": 228,
            "return": [
                "str",
                "Dict[str, str]",
                "Sequence[str]",
                "MutableMapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "Tuple",
                    "Dict[str,str]",
                    "None",
                    "int",
                    "Callable[[KT],VT]",
                    "Callable[T,T]",
                    "Type[RuntimeError]",
                    "Type"
                ]
            }
        },
        "NodeMap.__setitem__": {
            "name": "__setitem__",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "VT",
                    "KT"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT"
                ]
            }
        },
        "NodeMap.__delitem__": {
            "name": "__delitem__",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "Tuple",
                    "Dict[str,str]",
                    "None",
                    "int",
                    "Callable[[KT],VT]",
                    "Callable[T,T]",
                    "Type[RuntimeError]",
                    "Type"
                ]
            }
        }
    },
    "conflow-master/conflow/policy.py": {
        "MergeDifferentTypesPolicy.not_strict": {
            "name": "not_strict",
            "location": 23,
            "return": [
                "List[str]",
                "int",
                "bool",
                "float",
                "Iterable[T]",
                "AbstractSet",
                "str",
                "Hashable"
            ],
            "arguments": {
                "_": [
                    "List[str]",
                    "SupportsFloat",
                    "int",
                    "Union[int,float]",
                    "float",
                    "AbstractSet[T]",
                    "AbstractSet"
                ],
                "other": [
                    "List[str]",
                    "SupportsFloat",
                    "int",
                    "Union[int,float]",
                    "float",
                    "AbstractSet[T]",
                    "AbstractSet"
                ]
            }
        },
        "MergeDifferentTypesPolicy.strict": {
            "name": "strict",
            "location": 27,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "base": [
                    "str",
                    "Dict[str,str]",
                    "conflow.node.AbstractNode"
                ],
                "other": [
                    "str",
                    "Dict[str,str]",
                    "conflow.node.AbstractNode"
                ]
            }
        },
        "NotifyDifferentTypesPolicy.warning": {
            "name": "warning",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "base": [
                    "str",
                    "T",
                    "int",
                    "Exception"
                ],
                "other": [
                    "str",
                    "T",
                    "int",
                    "Exception"
                ]
            }
        },
        "NotifyDifferentTypesPolicy.quiet": {
            "name": "quiet",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "base": [
                    "str",
                    "bool",
                    "T",
                    "List[str]",
                    "int"
                ],
                "other": [
                    "str",
                    "bool",
                    "T",
                    "List[str]",
                    "int"
                ]
            }
        },
        "MergeListPolicy.override": {
            "name": "override",
            "location": 63,
            "return": [
                "List[str]",
                "int",
                "bool",
                "float",
                "Iterable[T]",
                "AbstractSet",
                "str",
                "Hashable"
            ],
            "arguments": {
                "_": [
                    "List[str]",
                    "SupportsFloat",
                    "int",
                    "Union[int,float]",
                    "float",
                    "AbstractSet[T]",
                    "AbstractSet"
                ],
                "other": [
                    "List[str]",
                    "SupportsFloat",
                    "int",
                    "Union[int,float]",
                    "float",
                    "AbstractSet[T]",
                    "AbstractSet"
                ]
            }
        },
        "MergeListPolicy.extend": {
            "name": "extend",
            "location": 67,
            "return": [
                "conflow.node.NodeList[nothing]"
            ],
            "arguments": {
                "base": [
                    "str",
                    "List[int]",
                    "float"
                ],
                "other": [
                    "str",
                    "List[int]",
                    "float"
                ]
            }
        }
    },
    "conflow-master/conflow/__init__.py": {},
    "conflow-master/conflow/froms/environment.py": {
        "try_str_int": {
            "name": "try_str_int",
            "location": 10,
            "return": [
                "Union[(int, _T0)]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int",
                    "List[str]",
                    "Optional[bytes]",
                    "Set[int]"
                ]
            }
        },
        "load_by_prefix": {
            "name": "load_by_prefix",
            "location": 20,
            "return": [
                "dict"
            ],
            "arguments": {
                "prefix": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "add_pair": {
            "name": "add_pair",
            "location": 34,
            "return": [
                "bool",
                "Dict[str, Any]",
                "str",
                "int"
            ],
            "arguments": {
                "env_map": [
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "str"
                ],
                "env_var_name": [
                    "str"
                ],
                "env_var_value": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "from_env": {
            "name": "from_env",
            "location": 58,
            "return": [
                "Dict[(Any, dict)]"
            ],
            "arguments": {
                "prefix": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "conflow-master/conflow/froms/yml.py": {
        "from_yaml": {
            "name": "from_yaml",
            "location": 8,
            "return": [
                "Dict",
                "str",
                "bool"
            ],
            "arguments": {
                "file_name": [
                    "str",
                    "bool"
                ],
                "required": [
                    "bool",
                    "str",
                    "Callable[[Optional],None]",
                    "Union[str,BinaryIO]",
                    "Iterable[str]"
                ]
            }
        }
    },
    "conflow-master/conflow/froms/__init__.py": {},
    "conflow-master/examples/base.py": {},
    "conflow-master/tests/conftest.py": {
        "config_node_data": {
            "name": "config_node_data",
            "location": 8,
            "return": [
                "Dict[Text,dict[Text,Union[int,Text,float,list[Union[int,Text]],list[list[int]],dict[Text,Union[list[int],dict[Text,Union[Text,int]]]],set[Union[int,Text]],dict[Text,Union[int,Text]],None]]]",
                "Dict[str,Any]",
                "Dict[str,str]",
                "Dict",
                "str"
            ],
            "arguments": {}
        },
        "default_config": {
            "name": "default_config",
            "location": 26,
            "return": [
                "Config",
                "str",
                "Optional[dict]",
                "Dict",
                "Dict[str,Any]"
            ],
            "arguments": {}
        },
        "strict_config": {
            "name": "strict_config",
            "location": 31,
            "return": [
                "Config",
                "Dict",
                "Dict[str,Any]",
                "str",
                "Dict[str,List[str]]",
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "extend_list_config": {
            "name": "extend_list_config",
            "location": 36,
            "return": [
                "Config",
                "Dict",
                "Optional[dict]",
                "str",
                "Dict[str,Any]",
                "Dict[str,str]",
                "Sequence"
            ],
            "arguments": {}
        }
    },
    "conflow-master/tests/unit/from_implementations/environment_test.py": {
        "env_fixture": {
            "name": "env_fixture",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_from_environment_exists": {
            "name": "test_from_environment_exists",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_from_environment_correct_loads": {
            "name": "test_from_environment_correct_loads",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "env_fixture": [
                    "int",
                    "bool"
                ]
            }
        },
        "test_from_environment_correct_adds_pairs": {
            "name": "test_from_environment_correct_adds_pairs",
            "location": 40,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_from_environment_correct_parses": {
            "name": "test_from_environment_correct_parses",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "env_fixture": [
                    "int"
                ]
            }
        },
        "test_from_environment_try_str_int": {
            "name": "test_from_environment_try_str_int",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_from_environment_get_item": {
            "name": "test_from_environment_get_item",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "env_fixture": [
                    "int",
                    "Callable"
                ]
            }
        }
    },
    "conflow-master/tests/unit/from_implementations/yaml_test.py": {
        "yaml_fixture": {
            "name": "yaml_fixture",
            "location": 9,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_from_yaml_exists": {
            "name": "test_from_yaml_exists",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_from_yaml_correct_parses": {
            "name": "test_from_yaml_correct_parses",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "yaml_fixture": [
                    "str"
                ]
            }
        },
        "test_from_yaml_correct_work_non_exists_file": {
            "name": "test_from_yaml_correct_work_non_exists_file",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "conflow-master/tests/unit/manager/config_test.py": {
        "config": {
            "name": "config",
            "location": 35,
            "return": [
                "Config",
                "str",
                "Optional[dict]",
                "Dict",
                "bool"
            ],
            "arguments": {}
        },
        "test_config_first_merge": {
            "name": "test_config_first_merge",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "bool",
                    "_pytesconfig.Config",
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "neuromation.api.Config",
                    "sphinx.config.Config"
                ]
            }
        },
        "test_config_merge": {
            "name": "test_config_merge",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "sphinx.config.Config",
                    "Dict[str, Any]",
                    "asyncpg_migrate.model.Config",
                    "dict"
                ]
            }
        },
        "test_config_get_attr": {
            "name": "test_config_get_attr",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, str]",
                    "str",
                    "sphinx.config.Config",
                    "Optional[dict]",
                    "Dict[str, Any]",
                    "Config",
                    "dict"
                ]
            }
        },
        "test_config_get_item": {
            "name": "test_config_get_item",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "str",
                    "sphinx.config.Config",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "test_config_with_froms": {
            "name": "test_config_with_froms",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict",
                    "sphinx.config.Config",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "str"
                ]
            }
        }
    },
    "conflow-master/tests/unit/merge/layer_test.py": {
        "test_layer_tree": {
            "name": "test_layer_tree",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "default_config": [
                    "Dict",
                    "List[PydanticModelField]",
                    "Dict[str,Any]"
                ]
            }
        },
        "test_layer_merge": {
            "name": "test_layer_merge",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "default_config": [
                    "Dict",
                    "Callable"
                ]
            }
        }
    },
    "conflow-master/tests/unit/merge/merge_test.py": {
        "test_merge_node_node": {
            "name": "test_merge_node_node",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "default_config": [
                    "Callable[[Any,Any],Any]",
                    "Callable[Any,Any,Any]"
                ]
            }
        },
        "test_merge_node_nodelist": {
            "name": "test_merge_node_nodelist",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "default_config": []
            }
        },
        "test_merge_node_nodemap": {
            "name": "test_merge_node_nodemap",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "default_config": []
            }
        },
        "test_merge_nodelist_node": {
            "name": "test_merge_nodelist_node",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "default_config": []
            }
        },
        "test_merge_nodelist_nodelist_override": {
            "name": "test_merge_nodelist_nodelist_override",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "default_config": []
            }
        },
        "test_merge_nodelist_nodelist_extend": {
            "name": "test_merge_nodelist_nodelist_extend",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "extend_list_config": []
            }
        },
        "test_merge_nodelist_nodemap": {
            "name": "test_merge_nodelist_nodemap",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "default_config": []
            }
        },
        "test_merge_nodemap_node": {
            "name": "test_merge_nodemap_node",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "default_config": []
            }
        },
        "test_merge_nodemap_nodelist": {
            "name": "test_merge_nodemap_nodelist",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "default_config": []
            }
        },
        "test_merge_nodemap_nodemap_override": {
            "name": "test_merge_nodemap_nodemap_override",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "default_config": []
            }
        },
        "test_merge_nodemap_nodemap_extend": {
            "name": "test_merge_nodemap_nodemap_extend",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "default_config": []
            }
        },
        "test_merge_nodemap_nodemap_empty": {
            "name": "test_merge_nodemap_nodemap_empty",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "default_config": []
            }
        },
        "test_merge_different_types_strict": {
            "name": "test_merge_different_types_strict",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "strict_config": [
                    "str"
                ]
            }
        }
    },
    "conflow-master/tests/unit/tree/factory_test.py": {
        "test_node_value": {
            "name": "test_node_value",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "Dict",
                    "Dict[str,Any]",
                    "str",
                    "Optional[Mapping[str,Any]]",
                    "Mapping",
                    "Optional[str]",
                    "None"
                ],
                "type": [
                    "int",
                    "Callable",
                    "bool",
                    "Node"
                ]
            }
        }
    },
    "conflow-master/tests/unit/tree/list_test.py": {
        "test_node_list": {
            "name": "test_node_list",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "List[str]",
                    "List[Union[int,float]]",
                    "node.Node"
                ],
                "representation": [
                    "int",
                    "Tuple[Union[int,int]]",
                    "str",
                    "Tuple[int,int]",
                    "bool",
                    "Node"
                ]
            }
        },
        "test_node_list_nested": {
            "name": "test_node_list_nested",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Sequence[Hashable]",
                    "Iterable[Any]"
                ]
            }
        },
        "test_list_iterator": {
            "name": "test_list_iterator",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_list_item": {
            "name": "test_list_item",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_list_value": {
            "name": "test_list_value",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_list_keys": {
            "name": "test_list_keys",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "conflow-master/tests/unit/tree/map_test.py": {
        "test_node_map": {
            "name": "test_node_map",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "List",
                    "Union[str,bytes]",
                    "bytes"
                ]
            }
        },
        "test_node_map_nested": {
            "name": "test_node_map_nested",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "Dict"
                ]
            }
        },
        "test_node_map_nested_missed_chain": {
            "name": "test_node_map_nested_missed_chain",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "Dict",
                    "Dict[str,str]",
                    "str",
                    "Dict[str,Type]",
                    "Dict[str,type]",
                    "Dict[str,Any]"
                ]
            }
        },
        "test_map_getitem": {
            "name": "test_map_getitem",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "Dict[str,Any]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "test_map_getattribute": {
            "name": "test_map_getattribute",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "Dict",
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "test_map_getattribute_error": {
            "name": "test_map_getattribute_error",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Callable",
                    "Mapping[str,T]",
                    "Callable[[KT,VT],bool]"
                ]
            }
        },
        "test_map_repr": {
            "name": "test_map_repr",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Dict",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "test_map_value": {
            "name": "test_map_value",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Dict"
                ]
            }
        },
        "test_map_delete": {
            "name": "test_map_delete",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "Dict",
                    "str",
                    "Dict[str,str]",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "conflow-master/tests/unit/tree/node_test.py": {
        "test_node_value": {
            "name": "test_node_value",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Dict[str,Any]"
                ],
                "other": [
                    "str",
                    "int",
                    "Sequence[Any]",
                    "Iterable[T]"
                ],
                "representation": [
                    "bool",
                    "Dict",
                    "str"
                ]
            }
        },
        "test_node_missing_getattr": {
            "name": "test_node_missing_getattr",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "test_node_repr": {
            "name": "test_node_repr",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Dict[str,Any]"
                ],
                "representation": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        }
    }
}
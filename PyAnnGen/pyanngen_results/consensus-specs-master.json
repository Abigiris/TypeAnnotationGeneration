{
    "consensus-specs-master/setup.py": {
        "installPackage": {
            "name": "installPackage",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "package": []
            }
        },
        "_get_name_from_heading": {
            "name": "_get_name_from_heading",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "heading": []
            }
        },
        "_get_source_from_code_block": {
            "name": "_get_source_from_code_block",
            "location": 101,
            "return": [],
            "arguments": {
                "block": []
            }
        },
        "_get_function_name_from_source": {
            "name": "_get_function_name_from_source",
            "location": 105,
            "return": [],
            "arguments": {
                "source": []
            }
        },
        "_get_self_type_from_source": {
            "name": "_get_self_type_from_source",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "source": []
            }
        },
        "_get_class_info_from_source": {
            "name": "_get_class_info_from_source",
            "location": 122,
            "return": [
                "tuple[None]"
            ],
            "arguments": {
                "source": []
            }
        },
        "_is_constant_id": {
            "name": "_is_constant_id",
            "location": 135,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": []
            }
        },
        "_get_eth2_spec_comment": {
            "name": "_get_eth2_spec_comment",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "child": []
            }
        },
        "_parse_value": {
            "name": "_parse_value",
            "location": 154,
            "return": [
                "VariableDefinition"
            ],
            "arguments": {
                "name": [],
                "typed_value": []
            }
        },
        "get_spec": {
            "name": "get_spec",
            "location": 168,
            "return": [],
            "arguments": {
                "file_name": [],
                "preset": [],
                "config": []
            }
        },
        "is_spec_defined_type": {
            "name": "is_spec_defined_type",
            "location": 576,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "objects_to_spec": {
            "name": "objects_to_spec",
            "location": 580,
            "return": [],
            "arguments": {
                "preset_name": [],
                "spec_object": [],
                "builder": [],
                "ordered_class_objects": []
            }
        },
        "combine_protocols": {
            "name": "combine_protocols",
            "location": 681,
            "return": [],
            "arguments": {
                "old_protocols": [],
                "new_protocols": []
            }
        },
        "combine_dicts": {
            "name": "combine_dicts",
            "location": 695,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "old_dict": [],
                "new_dict": []
            }
        },
        "dependency_order_class_objects": {
            "name": "dependency_order_class_objects",
            "location": 709,
            "return": [
                "None"
            ],
            "arguments": {
                "objects": [],
                "custom_types": []
            }
        },
        "combine_ssz_objects": {
            "name": "combine_ssz_objects",
            "location": 731,
            "return": [],
            "arguments": {
                "old_objects": [],
                "new_objects": [],
                "custom_types": []
            }
        },
        "combine_spec_objects": {
            "name": "combine_spec_objects",
            "location": 741,
            "return": [
                "SpecObject"
            ],
            "arguments": {
                "spec0": [],
                "spec1": []
            }
        },
        "parse_config_vars": {
            "name": "parse_config_vars",
            "location": 767,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "conf": []
            }
        },
        "load_preset": {
            "name": "load_preset",
            "location": 782,
            "return": [],
            "arguments": {
                "preset_files": []
            }
        },
        "load_config": {
            "name": "load_config",
            "location": 800,
            "return": [],
            "arguments": {
                "config_path": []
            }
        },
        "_build_spec": {
            "name": "_build_spec",
            "location": 809,
            "return": [],
            "arguments": {
                "preset_name": [],
                "fork": [],
                "source_files": [],
                "preset_files": [],
                "config_file": []
            }
        },
        "SpecBuilder.fork": {
            "name": "fork",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecBuilder.imports": {
            "name": "imports",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "preset_name": []
            }
        },
        "SpecBuilder.preparations": {
            "name": "preparations",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "SpecBuilder.sundry_functions": {
            "name": "sundry_functions",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "SpecBuilder.hardcoded_ssz_dep_constants": {
            "name": "hardcoded_ssz_dep_constants",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "SpecBuilder.hardcoded_custom_type_dep_constants": {
            "name": "hardcoded_custom_type_dep_constants",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "SpecBuilder.implement_optimizations": {
            "name": "implement_optimizations",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "functions": []
            }
        },
        "SpecBuilder.build_spec": {
            "name": "build_spec",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "preset_name": [],
                "source_files": [],
                "preset_files": [],
                "config_file": []
            }
        },
        "Phase0SpecBuilder.imports": {
            "name": "imports",
            "location": 332,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "cls": [],
                "preset_name": []
            }
        },
        "Phase0SpecBuilder.preparations": {
            "name": "preparations",
            "location": 352,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Phase0SpecBuilder.sundry_functions": {
            "name": "sundry_functions",
            "location": 358,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Phase0SpecBuilder.hardcoded_ssz_dep_constants": {
            "name": "hardcoded_ssz_dep_constants",
            "location": 431,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Phase0SpecBuilder.hardcoded_custom_type_dep_constants": {
            "name": "hardcoded_custom_type_dep_constants",
            "location": 435,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Phase0SpecBuilder.implement_optimizations": {
            "name": "implement_optimizations",
            "location": 439,
            "return": [],
            "arguments": {
                "cls": [],
                "functions": []
            }
        },
        "Phase0SpecBuilder.build_spec": {
            "name": "build_spec",
            "location": 443,
            "return": [],
            "arguments": {
                "cls": [],
                "preset_name": [],
                "source_files": [],
                "preset_files": [],
                "config_file": []
            }
        },
        "AltairSpecBuilder.imports": {
            "name": "imports",
            "location": 455,
            "return": [],
            "arguments": {
                "cls": [],
                "preset_name": []
            }
        },
        "AltairSpecBuilder.preparations": {
            "name": "preparations",
            "location": 464,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "AltairSpecBuilder.sundry_functions": {
            "name": "sundry_functions",
            "location": 471,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "AltairSpecBuilder.hardcoded_ssz_dep_constants": {
            "name": "hardcoded_ssz_dep_constants",
            "location": 481,
            "return": [
                "dict[, dict[typing.Text, typing.Text]]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "AltairSpecBuilder.implement_optimizations": {
            "name": "implement_optimizations",
            "location": 489,
            "return": [],
            "arguments": {
                "cls": [],
                "functions": []
            }
        },
        "BellatrixSpecBuilder.imports": {
            "name": "imports",
            "location": 501,
            "return": [],
            "arguments": {
                "cls": [],
                "preset_name": []
            }
        },
        "BellatrixSpecBuilder.preparations": {
            "name": "preparations",
            "location": 509,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "BellatrixSpecBuilder.sundry_functions": {
            "name": "sundry_functions",
            "location": 513,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "BellatrixSpecBuilder.hardcoded_custom_type_dep_constants": {
            "name": "hardcoded_custom_type_dep_constants",
            "location": 550,
            "return": [
                "dict[, dict[typing.Text, typing.Text]]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "CapellaSpecBuilder.imports": {
            "name": "imports",
            "location": 564,
            "return": [],
            "arguments": {
                "cls": [],
                "preset_name": []
            }
        },
        "objects_to_spec.format_protocol": {
            "name": "format_protocol",
            "location": 605,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "protocol_name": [],
                "protocol_def": []
            }
        },
        "objects_to_spec.format_config_var": {
            "name": "format_config_var",
            "location": 623,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "name": [],
                "vardef": []
            }
        },
        "objects_to_spec.format_constant": {
            "name": "format_constant",
            "location": 641,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "name": [],
                "vardef": []
            }
        },
        "PySpecCommand.initialize_options": {
            "name": "initialize_options",
            "location": 856,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PySpecCommand.finalize_options": {
            "name": "finalize_options",
            "location": 867,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PySpecCommand.run": {
            "name": "run",
            "location": 931,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildPyCommand.initialize_options": {
            "name": "initialize_options",
            "location": 955,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildPyCommand.run_pyspec_cmd": {
            "name": "run_pyspec_cmd",
            "location": 958,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spec_fork": []
            }
        },
        "BuildPyCommand.run": {
            "name": "run",
            "location": 966,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyspecDevCommand.initialize_options": {
            "name": "initialize_options",
            "location": 978,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyspecDevCommand.finalize_options": {
            "name": "finalize_options",
            "location": 981,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyspecDevCommand.run_pyspec_cmd": {
            "name": "run_pyspec_cmd",
            "location": 984,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spec_fork": []
            }
        },
        "PyspecDevCommand.run": {
            "name": "run",
            "location": 993,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "consensus-specs-master/solidity_deposit_contract/web3_tester/setup.py": {},
    "consensus-specs-master/solidity_deposit_contract/web3_tester/tests/conftest.py": {
        "get_deposit_contract_json": {
            "name": "get_deposit_contract_json",
            "location": 17,
            "return": [
                "str",
                "Dict[str, Any]",
                "Callable[[str], T]",
                "int",
                "dict",
                "Callable",
                "bytes"
            ],
            "arguments": {}
        },
        "tester": {
            "name": "tester",
            "location": 31,
            "return": [
                "EthereumTester",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "a0": {
            "name": "a0",
            "location": 36,
            "return": [
                "bool",
                "Iterable[Any]"
            ],
            "arguments": {
                "tester": [
                    "int",
                    "str",
                    "list"
                ]
            }
        },
        "w3": {
            "name": "w3",
            "location": 41,
            "return": [
                "Web3",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tester": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "registration_contract": {
            "name": "registration_contract",
            "location": 47,
            "return": [
                "int",
                "float",
                "Callable",
                "tuple[]",
                "str",
                "list[]",
                "tuple[typing.Literal]"
            ],
            "arguments": {
                "w3": [],
                "tester": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "assert_tx_failed": {
            "name": "assert_tx_failed",
            "location": 63,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tester": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "assert_tx_failed.assert_tx_failed": {
            "name": "assert_tx_failed",
            "location": 64,
            "return": [],
            "arguments": {
                "function_to_test": [],
                "exception": []
            }
        }
    },
    "consensus-specs-master/solidity_deposit_contract/web3_tester/tests/test_deposit.py": {
        "deposit_input": {
            "name": "deposit_input",
            "location": 21,
            "return": [
                "tuple[bytes]",
                "bytearray",
                "str"
            ],
            "arguments": {
                "amount": [
                    "int",
                    "str",
                    "None",
                    "float",
                    "Optional[int]",
                    "bool",
                    "list[str]",
                    "List[str]"
                ]
            }
        },
        "test_deposit_amount": {
            "name": "test_deposit_amount",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "registration_contract": [],
                "w3": [],
                "success": [],
                "amount": [
                    "int",
                    "float",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "assert_tx_failed": [
                    "raiden.utils.Callable",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "deposit_input": []
            }
        },
        "test_deposit_inputs": {
            "name": "test_deposit_inputs",
            "location": 82,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "registration_contract": [
                    "dict",
                    "dict[, ]",
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "w3": [
                    "str"
                ],
                "assert_tx_failed": [
                    "int",
                    "raiden.utils.BlockIdentifier",
                    "raiden.utils.PaymentID",
                    "raiden.utils.PaymentAmount",
                    "raiden.utils.FeeAmount"
                ],
                "amount": [
                    "dict",
                    "dict[, ]",
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "invalid_pubkey": [
                    "Union[Tuple[int], Tuple[int, int]]",
                    "str",
                    "tuple[int]",
                    "int"
                ],
                "invalid_withdrawal_credentials": [],
                "invalid_signature": [
                    "Optional[\"Game\"]",
                    "int",
                    "None"
                ],
                "success": [
                    "str"
                ]
            }
        },
        "test_deposit_event_log": {
            "name": "test_deposit_event_log",
            "location": 121,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "registration_contract": [
                    "raiden.utils.Address"
                ],
                "a0": [
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ],
                "w3": [
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_deposit_tree": {
            "name": "test_deposit_tree",
            "location": 156,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "registration_contract": [
                    "collections.abc.Awaitable[]",
                    "Awaitable",
                    "raiden.utils.Address"
                ],
                "w3": [
                    "int"
                ],
                "assert_tx_failed": [
                    "str",
                    "int",
                    "utils.Controller",
                    "bool"
                ]
            }
        }
    },
    "consensus-specs-master/solidity_deposit_contract/web3_tester/tests/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/config/config_util.py": {
        "parse_config_vars": {
            "name": "parse_config_vars",
            "location": 6,
            "return": [
                "dict[str, typing.Any]",
                "Dict[str, Any]",
                "str",
                "List[str]",
                "Union[str, pathlib.Path]",
                "bool"
            ],
            "arguments": {
                "conf": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict",
                    "dict[str, bool]",
                    "Dict[str, bool]",
                    "dict[str, dict[, ]]",
                    "Mapping[str, Any]",
                    "Dict[str, Dict]"
                ]
            }
        },
        "load_preset": {
            "name": "load_preset",
            "location": 24,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "preset_files": [
                    "bool"
                ]
            }
        },
        "load_config_file": {
            "name": "load_config_file",
            "location": 42,
            "return": [
                "Dict[str, Any]",
                "Optional[str]",
                "dict",
                "str"
            ],
            "arguments": {
                "config_path": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "load_defaults": {
            "name": "load_defaults",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "spec_configs_path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/config/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/debug/decode.py": {
        "decode": {
            "name": "decode",
            "location": 9,
            "return": [
                "float",
                "hackathon.utils.utils.DataMessage",
                "str",
                "dict[str, typing.Union[int,str]]",
                "list[str]",
                "bytes",
                "int"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "int"
                ],
                "typ": [
                    "bytes",
                    "list",
                    "Iterator[List[T]]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/debug/encode.py": {
        "encode": {
            "name": "encode",
            "location": 8,
            "return": [
                "str",
                "Container[\"Taxon\"]",
                "Union[int, float]",
                "bool"
            ],
            "arguments": {
                "value": [
                    "Tuple[str]",
                    "List[str]",
                    "int",
                    "Type",
                    "str",
                    "type"
                ],
                "include_hash_tree_roots": [
                    "Optional[str]",
                    "Type[T]",
                    "Dict[str, str]",
                    "Optional[Dict[str, str]]",
                    "Optional[int]",
                    "str",
                    "bool",
                    "Optional[Exception]",
                    "float"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/debug/random_value.py": {
        "get_random_ssz_object": {
            "name": "get_random_ssz_object",
            "location": 38,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "rng": [
                    "int",
                    "List[int]",
                    "List[bytes]",
                    "List[List[Callable]]",
                    "bool"
                ],
                "typ": [
                    "bool",
                    "Optional[int]",
                    "list",
                    "str"
                ],
                "max_bytes_length": [
                    "int",
                    "Optional[float]",
                    "float",
                    "Sequence[Any]",
                    "None",
                    "typing.Sequence[typing.Any]"
                ],
                "max_list_length": [
                    "int",
                    "bool"
                ],
                "mode": [
                    "int",
                    "dict",
                    "dict[, ]",
                    "str",
                    "Optional[int]",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "chaos": [
                    "int",
                    "bool"
                ]
            }
        },
        "get_random_bytes_list": {
            "name": "get_random_bytes_list",
            "location": 138,
            "return": [
                "bytes",
                "str",
                "Mapping",
                "Dict[str, str]",
                "bool",
                "int"
            ],
            "arguments": {
                "rng": [
                    "int",
                    "random.Random",
                    "List[int]"
                ],
                "length": [
                    "int",
                    "list[int]",
                    "random.Random",
                    "List[int]"
                ]
            }
        },
        "get_random_basic_value": {
            "name": "get_random_basic_value",
            "location": 142,
            "return": [
                "bool"
            ],
            "arguments": {
                "rng": [
                    "random.Random",
                    "bool",
                    "Optional[List[str]]"
                ],
                "typ": [
                    "str",
                    "Callable[[str], None]",
                    "bytes",
                    "Callable",
                    "Iterable"
                ]
            }
        },
        "get_min_basic_value": {
            "name": "get_min_basic_value",
            "location": 152,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": [
                    "int",
                    "str"
                ]
            }
        },
        "get_max_basic_value": {
            "name": "get_max_basic_value",
            "location": 162,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": [
                    "float",
                    "str",
                    "Tuple[float, float]",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "RandomizationMode.to_name": {
            "name": "to_name",
            "location": 31,
            "return": [
                "typing.Text",
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomizationMode.is_changing": {
            "name": "is_changing",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/debug/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/gen_helpers/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/gen_helpers/gen_base/gen_runner.py": {
        "validate_output_dir": {
            "name": "validate_output_dir",
            "location": 29,
            "return": [
                "Path",
                "str",
                "pathlib.Path",
                "List[int]"
            ],
            "arguments": {
                "path_str": [
                    "None",
                    "pathlib.Path",
                    "str",
                    "Optional[pathlib.Path]",
                    "list[int]",
                    "Union[str, pathlib.Path]",
                    "List[int]"
                ]
            }
        },
        "run_generator": {
            "name": "run_generator",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "generator_name": [
                    "str",
                    "list",
                    "Tuple[int, int]"
                ],
                "test_providers": [
                    "int",
                    "str",
                    "Callable",
                    "Callable[[], object]"
                ]
            }
        },
        "dump_yaml_fn": {
            "name": "dump_yaml_fn",
            "location": 221,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "data": [
                    "str",
                    "typing.AnyStr",
                    "AnyStr",
                    "None",
                    "ruamel.yaml.YAML",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "typing.AnyStr",
                    "AnyStr",
                    "None",
                    "ruamel.yaml.YAML",
                    "Optional[str]"
                ],
                "file_mode": [
                    "str",
                    "typing.AnyStr",
                    "AnyStr",
                    "None",
                    "ruamel.yaml.YAML",
                    "Optional[str]"
                ],
                "yaml_encoder": [
                    "str",
                    "typing.AnyStr",
                    "AnyStr",
                    "None",
                    "ruamel.yaml.YAML",
                    "Optional[str]"
                ]
            }
        },
        "dump_ssz_fn": {
            "name": "dump_ssz_fn",
            "location": 229,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "data": [
                    "str",
                    "typing.AnyStr",
                    "AnyStr",
                    "None",
                    "ruamel.yaml.YAML",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "typing.AnyStr",
                    "AnyStr",
                    "None",
                    "ruamel.yaml.YAML",
                    "Optional[str]"
                ],
                "file_mode": [
                    "str",
                    "typing.AnyStr",
                    "AnyStr",
                    "None",
                    "ruamel.yaml.YAML",
                    "Optional[str]"
                ]
            }
        },
        "dump_yaml_fn.dump": {
            "name": "dump",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "case_path": []
            }
        },
        "dump_ssz_fn.dump": {
            "name": "dump",
            "location": 230,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "case_path": [
                    "pathlib.Path",
                    "os.PathLike",
                    "Sequence[str]",
                    "Optional[str]",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "run_generator.output_part": {
            "name": "output_part",
            "location": 155,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "out_kind": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "fn": [
                    "str",
                    "set",
                    "pathlib.Path"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/gen_helpers/gen_base/gen_typing.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/gen_helpers/gen_base/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/gen_helpers/gen_from_tests/gen.py": {
        "generate_from_tests": {
            "name": "generate_from_tests",
            "location": 13,
            "return": [
                "typing.Iterable[eth2spec.gen_helpers.gen_base.gen_typing.TestCase]"
            ],
            "arguments": {
                "runner_name": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "handler_name": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "src": [
                    "str"
                ],
                "fork_name": [
                    "str"
                ],
                "preset_name": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "bls_active": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "phase": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "get_provider": {
            "name": "get_provider",
            "location": 59,
            "return": [
                "typing.Iterable[eth2spec.gen_helpers.gen_base.gen_typing.TestProvider]"
            ],
            "arguments": {
                "create_provider_fn": [
                    "str",
                    "Optional[str]"
                ],
                "fork_name": [
                    "str"
                ],
                "preset_name": [
                    "str",
                    "Optional[str]"
                ],
                "all_mods": [
                    "str"
                ]
            }
        },
        "get_create_provider_fn": {
            "name": "get_create_provider_fn",
            "location": 74,
            "return": [
                "str",
                "Tuple[type]",
                "List[str]",
                "Union[bool, str]"
            ],
            "arguments": {
                "runner_name": [
                    "str",
                    "Tuple[str, str]",
                    "int"
                ]
            }
        },
        "run_state_test_generators": {
            "name": "run_state_test_generators",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "runner_name": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "all_mods": [
                    "str"
                ],
                "presets": [
                    "str",
                    "bool",
                    "List[str]",
                    "Iterable[str]"
                ],
                "forks": [
                    "str",
                    "bool",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        },
        "combine_mods": {
            "name": "combine_mods",
            "location": 114,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, int]",
                "str",
                "Dict[str, float]"
            ],
            "arguments": {
                "dict_1": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ],
                "dict_2": [
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "dict",
                    "Union['HTMLSession', 'AsyncHTMLSession']"
                ]
            }
        },
        "get_create_provider_fn.prepare_fn": {
            "name": "prepare_fn",
            "location": 75,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "get_create_provider_fn.create_provider": {
            "name": "create_provider",
            "location": 79,
            "return": [
                "str",
                "cmk.utils.type_defs.HostName",
                "Sequence[str]",
                "bool"
            ],
            "arguments": {
                "fork_name": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "preset_name": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "handler_name": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "tests_src_mod_name": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "get_create_provider_fn.create_provider.cases_fn": {
            "name": "cases_fn",
            "location": 81,
            "return": [
                "typing.Iterable[eth2spec.gen_helpers.gen_base.gen_typing.TestCase]"
            ],
            "arguments": {}
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/gen_helpers/gen_from_tests/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/conftest.py": {
        "module_exists": {
            "name": "module_exists",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "module_name": [
                    "str",
                    "Collection[str]",
                    "typing.Collection",
                    "List[str]",
                    "list[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "fixture": {
            "name": "fixture",
            "location": 20,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {}
        },
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "parser": []
            }
        },
        "_validate_fork_name": {
            "name": "_validate_fork_name",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "forks": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "bool",
                    "Iterable[Tuple[int, Any]]"
                ]
            }
        },
        "preset": {
            "name": "preset",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "request": []
            }
        },
        "run_phases": {
            "name": "run_phases",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "request": []
            }
        },
        "bls_default": {
            "name": "bls_default",
            "location": 78,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "request": []
            }
        },
        "bls_type": {
            "name": "bls_type",
            "location": 85,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "request": []
            }
        },
        "fixture.ignore": {
            "name": "ignore",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/context.py": {
        "_prepare_state": {
            "name": "_prepare_state",
            "location": 96,
            "return": [
                "list[]",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "balances_fn": [
                    "int",
                    "List[int]",
                    "list[int]"
                ],
                "threshold_fn": [
                    "int",
                    "List[int]",
                    "list[int]"
                ],
                "spec": [
                    "List[int]",
                    "list[int]",
                    "bytes",
                    "List[bytes]",
                    "int",
                    "list[bytes]",
                    "List[str]",
                    "list[str]"
                ],
                "phases": [
                    "bool",
                    "Callable[[Any], int]",
                    "typing.Callable[typing.Any, int]",
                    "int",
                    "list[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        },
        "with_custom_state": {
            "name": "with_custom_state",
            "location": 108,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "balances_fn": [
                    "typing.Callable[typing.Any, int]",
                    "int",
                    "Callable[[Any], int]",
                    "None",
                    "tuple[typing.Union[int,int]]",
                    "bool",
                    "Optional[Callable]",
                    "Optional[int]",
                    "Union[int, Tuple[int, int]]"
                ],
                "threshold_fn": [
                    "typing.Callable[typing.Any, int]",
                    "int",
                    "Callable[[Any], int]",
                    "None",
                    "tuple[typing.Union[int,int]]",
                    "bool",
                    "Optional[Callable]",
                    "Optional[int]",
                    "Union[int, Tuple[int, int]]"
                ]
            }
        },
        "default_activation_threshold": {
            "name": "default_activation_threshold",
            "location": 128,
            "return": [
                "utils.Node",
                "List[int]",
                "int"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "float"
                ]
            }
        },
        "zero_activation_threshold": {
            "name": "zero_activation_threshold",
            "location": 136,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "default_balances": {
            "name": "default_balances",
            "location": 144,
            "return": [
                "int",
                "str",
                "List[int]",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "utils.Node"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "scaled_churn_balances": {
            "name": "scaled_churn_balances",
            "location": 153,
            "return": [
                "str",
                "bool",
                "int",
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "cmk.utils.type_defs.ServiceName"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "typing.Mapping",
                    "Mapping[str, str]",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ServiceName"
                ]
            }
        },
        "low_balances": {
            "name": "low_balances",
            "location": 167,
            "return": [
                "str",
                "List[int]",
                "float"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "misc_balances": {
            "name": "misc_balances",
            "location": 178,
            "return": [
                "list[]",
                "Sequence[int]",
                "int",
                "List[List[int]]",
                "str"
            ],
            "arguments": {
                "spec": [
                    "int"
                ]
            }
        },
        "misc_balances_in_default_range_with_many_validators": {
            "name": "misc_balances_in_default_range_with_many_validators",
            "location": 190,
            "return": [
                "int",
                "list[]"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.Ruleset",
                    "bool"
                ]
            }
        },
        "low_single_balance": {
            "name": "low_single_balance",
            "location": 206,
            "return": [
                "list[int]",
                "bool",
                "str"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "float"
                ]
            }
        },
        "large_validator_set": {
            "name": "large_validator_set",
            "location": 214,
            "return": [
                "bool",
                "str",
                "raiden.utils.Tuple[int, int]",
                "bytes",
                "List[int]"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "dict[str, dict[str, typing.Any]]"
                ]
            }
        },
        "single_phase": {
            "name": "single_phase",
            "location": 223,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "dump_skipping_message": {
            "name": "dump_skipping_message",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "reason": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "spec_test": {
            "name": "spec_test",
            "location": 258,
            "return": [
                "bool",
                "str",
                "List[cmk.gui.plugins.visuals.utils.Filter]",
                "Dict[str, Tuple[str, str]]"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "Dict[str, int]",
                    "dict[str, int]"
                ]
            }
        },
        "spec_state_test": {
            "name": "spec_state_test",
            "location": 268,
            "return": [
                "raiden.utils.BlockNumber",
                "bool",
                "cmk.utils.type_defs.UserId",
                "raiden.utils.TokenAmount",
                "str",
                "int"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "float"
                ]
            }
        },
        "spec_configured_state_test": {
            "name": "spec_configured_state_test",
            "location": 272,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "conf": [
                    "bool",
                    "str"
                ]
            }
        },
        "expect_assertion_error": {
            "name": "expect_assertion_error",
            "location": 280,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fn": [
                    "BaseException",
                    "bool",
                    "utils.Controller"
                ]
            }
        },
        "never_bls": {
            "name": "never_bls",
            "location": 294,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "always_bls": {
            "name": "always_bls",
            "location": 307,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "bls_switch": {
            "name": "bls_switch",
            "location": 320,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "disable_process_reveal_deadlines": {
            "name": "disable_process_reveal_deadlines",
            "location": 337,
            "return": [
                "str",
                "Dict[str, int]"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "with_all_phases": {
            "name": "with_all_phases",
            "location": 355,
            "return": [
                "str",
                "int",
                "List[Tuple[str, str]]",
                "float",
                "List[int]"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "with_all_phases_except": {
            "name": "with_all_phases_except",
            "location": 362,
            "return": [
                "int",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "exclusion_phases": [
                    "typing.Sequence[tuple[typing.Union[typing.Any,typing.Any]]]",
                    "Sequence[Tuple[Any, Any]]",
                    "list[typing.Callable[, ]]",
                    "List[Callable]",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        },
        "_get_preset_targets": {
            "name": "_get_preset_targets",
            "location": 371,
            "return": [
                "str",
                "bool",
                "Union[utils.CWLObjectType, List[utils.CWLObjectType]]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "kw": [
                    "str",
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "_get_run_phases": {
            "name": "_get_run_phases",
            "location": 378,
            "return": [
                "None",
                "Optional[str]",
                "set[]",
                "list[typing.Union[dict[str, typing.Any],list[list[int]]]]",
                "str",
                "List[Dict[str, Any]]",
                "Optional[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "phases": [
                    "list[str]",
                    "List[str]",
                    "list[]",
                    "dict[, ]",
                    "list",
                    "bool",
                    "Sequence[str]",
                    "dict"
                ],
                "kw": [
                    "dict[str, typing.Any]",
                    "list[list[int]]",
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "cmk.utils.type_defs.EventRule",
                    "bool",
                    "List[List[int]]"
                ]
            }
        },
        "_get_available_phases": {
            "name": "_get_available_phases",
            "location": 396,
            "return": [
                "str",
                "set[str]",
                "bool",
                "int"
            ],
            "arguments": {
                "run_phases": [
                    "list[]",
                    "list",
                    "set[str]",
                    "dict[str, typing.Any]",
                    "int",
                    "list[dict[str, typing.Any]]",
                    "Set[str]",
                    "dict[str, str]",
                    "Container[int]",
                    "Optional[Sequence[Any]]",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "Dict[str, str]"
                ],
                "other_phases": [
                    "None",
                    "int",
                    "list[str]",
                    "Optional[Sequence[str]]",
                    "Optional[List[str]]"
                ]
            }
        },
        "_run_test_case_with_phases": {
            "name": "_run_test_case_with_phases",
            "location": 406,
            "return": [
                "None",
                "Optional[str]",
                "Optional[int]",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "fn": [
                    "bool",
                    "float",
                    "str",
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ],
                "phases": [
                    "str",
                    "int",
                    "list[str]",
                    "bool",
                    "List[str]"
                ],
                "other_phases": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]",
                    "dict[str, typing.Union[int,typing.Any,bool]]",
                    "Dict[str, Union[int, Any, bool]]",
                    "Optional[annofabcli.common.dataclasses.WaitOptions]",
                    "int"
                ],
                "kw": [
                    "str"
                ],
                "args": [],
                "is_fork_transition": [
                    "bool",
                    "float",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "with_phases": {
            "name": "with_phases",
            "location": 431,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "phases": [
                    "float",
                    "bool",
                    "Tuple['cirq.Qid']",
                    "tuple['cirq.Qid']"
                ],
                "other_phases": [
                    "float",
                    "None",
                    "bool",
                    "Tuple['cirq.Qid']",
                    "tuple['cirq.Qid']"
                ]
            }
        },
        "with_presets": {
            "name": "with_presets",
            "location": 459,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "preset_bases": [
                    "str",
                    "bool",
                    "int",
                    "Iterable[int]"
                ],
                "reason": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "Iterable[int]",
                    "typing.Iterable[int]"
                ]
            }
        },
        "_get_basic_dict": {
            "name": "_get_basic_dict",
            "location": 476,
            "return": [
                "dict[typing.Union[tuple[typing.Union[str,float]],tuple[typing.Union[str,int]],tuple[typing.Union[str,dict[str, typing.Any]]]], typing.Union[str,tuple[typing.Type],list[list[int]],int]]",
                "dict",
                "set",
                "List[str]",
                "List[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "ssz_dict": [
                    "dict[str, float]",
                    "Dict[str, float]",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, int]",
                    "dict",
                    "dict[str, dict[str, typing.Any]]",
                    "Dict[str, int]",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "_get_copy_of_spec": {
            "name": "_get_copy_of_spec",
            "location": 492,
            "return": [
                "bool",
                "str",
                "list[str]",
                "Optional[str]",
                "set[str]",
                "list[]",
                "tuple[typing.Union[typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any]]"
            ],
            "arguments": {
                "spec": [
                    "dict[str, str]",
                    "Dict[str, str]",
                    "dict[, ]",
                    "int",
                    "dict",
                    "list[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "with_config_overrides": {
            "name": "with_config_overrides",
            "location": 502,
            "return": [
                "str",
                "bool",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "config_overrides": [
                    "bool",
                    "dict",
                    "dict[, ]",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ]
            }
        },
        "is_post_altair": {
            "name": "is_post_altair",
            "location": 537,
            "return": [
                "bool"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "is_post_bellatrix": {
            "name": "is_post_bellatrix",
            "location": 541,
            "return": [
                "bool"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "is_post_capella": {
            "name": "is_post_capella",
            "location": 545,
            "return": [
                "bool"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "only_generator": {
            "name": "only_generator",
            "location": 554,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "reason": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "set_fork_metas": {
            "name": "set_fork_metas",
            "location": 570,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "fork_metas": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "with_fork_metas": {
            "name": "with_fork_metas",
            "location": 578,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fork_metas": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "yield_fork_meta": {
            "name": "yield_fork_meta",
            "location": 610,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fork_metas": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "with_custom_state.deco": {
            "name": "deco",
            "location": 110,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "single_phase.entry": {
            "name": "entry",
            "location": 229,
            "return": [],
            "arguments": {}
        },
        "spec_configured_state_test.decorator": {
            "name": "decorator",
            "location": 275,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "never_bls.entry": {
            "name": "entry",
            "location": 300,
            "return": [],
            "arguments": {}
        },
        "always_bls.entry": {
            "name": "entry",
            "location": 313,
            "return": [],
            "arguments": {}
        },
        "bls_switch.entry": {
            "name": "entry",
            "location": 327,
            "return": [],
            "arguments": {}
        },
        "disable_process_reveal_deadlines.entry": {
            "name": "entry",
            "location": 342,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "with_all_phases_except.decorator": {
            "name": "decorator",
            "location": 366,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "with_phases.decorator": {
            "name": "decorator",
            "location": 436,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "with_presets.decorator": {
            "name": "decorator",
            "location": 462,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "with_config_overrides.decorator": {
            "name": "decorator",
            "location": 510,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "only_generator._decorator": {
            "name": "_decorator",
            "location": 555,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "inner": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "set_fork_metas.decorator": {
            "name": "decorator",
            "location": 571,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "with_fork_metas.decorator": {
            "name": "decorator",
            "location": 605,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "yield_fork_meta.decorator": {
            "name": "decorator",
            "location": 614,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "with_custom_state.deco.entry": {
            "name": "entry",
            "location": 111,
            "return": [],
            "arguments": {}
        },
        "with_phases.decorator.wrapper": {
            "name": "wrapper",
            "location": 437,
            "return": [],
            "arguments": {}
        },
        "with_presets.decorator.wrapper": {
            "name": "wrapper",
            "location": 463,
            "return": [],
            "arguments": {}
        },
        "with_config_overrides.decorator.wrapper": {
            "name": "wrapper",
            "location": 511,
            "return": [],
            "arguments": {}
        },
        "only_generator._decorator._wrapper": {
            "name": "_wrapper",
            "location": 556,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "list",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "set_fork_metas.decorator.wrapper": {
            "name": "wrapper",
            "location": 572,
            "return": [],
            "arguments": {}
        },
        "yield_fork_meta.decorator.wrapper": {
            "name": "wrapper",
            "location": 615,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "yield_fork_meta.decorator.wrapper.pre_tag": {
            "name": "pre_tag",
            "location": 628,
            "return": [
                "str",
                "int",
                "float",
                "List[int]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Collection[str]",
                    "int",
                    "bool"
                ]
            }
        },
        "yield_fork_meta.decorator.wrapper.post_tag": {
            "name": "post_tag",
            "location": 633,
            "return": [
                "Optional[Type]",
                "dict",
                "float",
                "str"
            ],
            "arguments": {
                "obj": [
                    "dict",
                    "str"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/exceptions.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/altair/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/altair/block_processing/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/altair/block_processing/sync_aggregate/test_process_sync_aggregate.py": {
        "test_invalid_signature_bad_domain": {
            "name": "test_invalid_signature_bad_domain",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_invalid_signature_missing_participant": {
            "name": "test_invalid_signature_missing_participant",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "float"
                ],
                "state": [
                    "float"
                ]
            }
        },
        "test_invalid_signature_no_participants": {
            "name": "test_invalid_signature_no_participants",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [],
                "state": [
                    "tests.basilisp.helpers.CompileFn",
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "test_invalid_signature_infinite_signature_with_all_participants": {
            "name": "test_invalid_signature_infinite_signature_with_all_participants",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "str"
                ],
                "state": [
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_invalid_signature_infinite_signature_with_single_participant": {
            "name": "test_invalid_signature_infinite_signature_with_single_participant",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "Callable"
                ],
                "state": [
                    "tests.basilisp.helpers.CompileFn",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_invalid_signature_extra_participant": {
            "name": "test_invalid_signature_extra_participant",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "float"
                ],
                "state": [
                    "float"
                ]
            }
        },
        "test_sync_committee_rewards_nonduplicate_committee": {
            "name": "test_sync_committee_rewards_nonduplicate_committee",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "Iterable[Any]",
                    "List[int]",
                    "int"
                ],
                "state": [
                    "Iterable[Any]",
                    "List[int]",
                    "int"
                ]
            }
        },
        "test_sync_committee_rewards_duplicate_committee_no_participation": {
            "name": "test_sync_committee_rewards_duplicate_committee_no_participation",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "List[int]",
                    "int"
                ],
                "state": [
                    "List[int]",
                    "int"
                ]
            }
        },
        "test_sync_committee_rewards_duplicate_committee_half_participation": {
            "name": "test_sync_committee_rewards_duplicate_committee_half_participation",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "Iterable[Any]",
                    "List[int]",
                    "int"
                ],
                "state": [
                    "Iterable[Any]",
                    "List[int]",
                    "int"
                ]
            }
        },
        "test_sync_committee_rewards_duplicate_committee_full_participation": {
            "name": "test_sync_committee_rewards_duplicate_committee_full_participation",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "Iterable[Any]",
                    "List[int]",
                    "int"
                ],
                "state": [
                    "Iterable[Any]",
                    "List[int]",
                    "int"
                ]
            }
        },
        "test_sync_committee_rewards_not_full_participants": {
            "name": "test_sync_committee_rewards_not_full_participants",
            "location": 207,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "float",
                    "Callable"
                ],
                "state": [
                    "float",
                    "Callable"
                ]
            }
        },
        "test_sync_committee_rewards_empty_participants": {
            "name": "test_sync_committee_rewards_empty_participants",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "float",
                    "Callable"
                ],
                "state": [
                    "float",
                    "Callable"
                ]
            }
        },
        "test_invalid_signature_past_block": {
            "name": "test_invalid_signature_past_block",
            "location": 228,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_invalid_signature_previous_committee": {
            "name": "test_invalid_signature_previous_committee",
            "location": 267,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "float",
                    "Callable"
                ],
                "state": [
                    "float",
                    "Callable"
                ]
            }
        },
        "test_valid_signature_future_committee": {
            "name": "test_valid_signature_future_committee",
            "location": 304,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "float",
                    "Callable"
                ],
                "state": [
                    "float",
                    "Callable"
                ]
            }
        },
        "test_proposer_in_committee_without_participation": {
            "name": "test_proposer_in_committee_without_participation",
            "location": 346,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "float"
                ],
                "state": [
                    "float"
                ]
            }
        },
        "test_proposer_in_committee_with_participation": {
            "name": "test_proposer_in_committee_with_participation",
            "location": 387,
            "return": [],
            "arguments": {
                "spec": [
                    "float"
                ],
                "state": [
                    "float"
                ]
            }
        },
        "_exit_validator_from_committee_and_transition_state": {
            "name": "_exit_validator_from_committee_and_transition_state",
            "location": 419,
            "return": [
                "int",
                "Sequence[float]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "spec": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "IO",
                    "raiden.transfer.state.ChainState"
                ],
                "state": [
                    "IO",
                    "Callable"
                ],
                "committee_indices": [
                    "int"
                ],
                "rng": [
                    "int"
                ],
                "target_epoch_provider": [
                    "Callable",
                    "List[int]"
                ],
                "withdrawable_offset": [
                    "int"
                ]
            }
        },
        "test_sync_committee_with_participating_exited_member": {
            "name": "test_sync_committee_with_participating_exited_member",
            "location": 446,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "Callable[[List, bool], None]",
                    "float"
                ],
                "state": [
                    "Callable[[List, bool], None]",
                    "float"
                ]
            }
        },
        "test_sync_committee_with_nonparticipating_exited_member": {
            "name": "test_sync_committee_with_nonparticipating_exited_member",
            "location": 485,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "Callable[[List, bool], None]",
                    "float"
                ],
                "state": [
                    "Callable[[List, bool], None]",
                    "float"
                ]
            }
        },
        "test_sync_committee_with_participating_withdrawable_member": {
            "name": "test_sync_committee_with_participating_withdrawable_member",
            "location": 528,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "Callable[[List, bool], None]",
                    "float"
                ],
                "state": [
                    "Callable[[List, bool], None]",
                    "float"
                ]
            }
        },
        "test_sync_committee_with_nonparticipating_withdrawable_member": {
            "name": "test_sync_committee_with_nonparticipating_withdrawable_member",
            "location": 567,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "Callable[[List, bool], None]",
                    "float"
                ],
                "state": [
                    "Callable[[List, bool], None]",
                    "float"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/altair/block_processing/sync_aggregate/test_process_sync_aggregate_random.py": {
        "_test_harness_for_randomized_test_case": {
            "name": "_test_harness_for_randomized_test_case",
            "location": 30,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Iterable[Tuple[str, dict]]",
                    "int",
                    "typing.Iterable[tuple[typing.Union[str,dict[, ]]]]",
                    "float"
                ],
                "state": [
                    "Iterable[Tuple[str, dict]]",
                    "int",
                    "typing.Iterable[tuple[typing.Union[str,dict[, ]]]]",
                    "float"
                ],
                "expect_duplicates": [
                    "bool",
                    "str",
                    "Sequence[Hashable]",
                    "List[Tuple[int, int]]"
                ],
                "participation_fn": [
                    "str",
                    "None",
                    "Optional[bool]",
                    "int",
                    "bool"
                ]
            }
        },
        "test_random_only_one_participant_with_duplicates": {
            "name": "test_random_only_one_participant_with_duplicates",
            "location": 51,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "float"
                ],
                "state": [
                    "bool",
                    "float"
                ]
            }
        },
        "test_random_low_participation_with_duplicates": {
            "name": "test_random_low_participation_with_duplicates",
            "location": 64,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_random_high_participation_with_duplicates": {
            "name": "test_random_high_participation_with_duplicates",
            "location": 77,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_random_all_but_one_participating_with_duplicates": {
            "name": "test_random_all_but_one_participating_with_duplicates",
            "location": 90,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_random_misc_balances_and_half_participation_with_duplicates": {
            "name": "test_random_misc_balances_and_half_participation_with_duplicates",
            "location": 105,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_random_with_exits_with_duplicates": {
            "name": "test_random_with_exits_with_duplicates",
            "location": 119,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_random_only_one_participant_without_duplicates": {
            "name": "test_random_only_one_participant_without_duplicates",
            "location": 136,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "str",
                    "raiden.transfer.state.ChainState"
                ],
                "state": [
                    "bool",
                    "str",
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "test_random_low_participation_without_duplicates": {
            "name": "test_random_low_participation_without_duplicates",
            "location": 148,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "int"
                ],
                "state": [
                    "int"
                ]
            }
        },
        "test_random_high_participation_without_duplicates": {
            "name": "test_random_high_participation_without_duplicates",
            "location": 160,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "int"
                ],
                "state": [
                    "int"
                ]
            }
        },
        "test_random_all_but_one_participating_without_duplicates": {
            "name": "test_random_all_but_one_participating_without_duplicates",
            "location": 172,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str"
                ],
                "state": [
                    "str"
                ]
            }
        },
        "test_random_misc_balances_and_half_participation_without_duplicates": {
            "name": "test_random_misc_balances_and_half_participation_without_duplicates",
            "location": 186,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str"
                ],
                "state": [
                    "str"
                ]
            }
        },
        "test_random_with_exits_without_duplicates": {
            "name": "test_random_with_exits_without_duplicates",
            "location": 199,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/altair/block_processing/sync_aggregate/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/altair/epoch_processing/test_process_inactivity_updates.py": {
        "run_process_inactivity_updates": {
            "name": "run_process_inactivity_updates",
            "location": 29,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "list[list[typing.Any]]",
                    "List[List[Any]]",
                    "list[list[str]]",
                    "List[List[str]]",
                    "list[dict[str, typing.Any]]",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "List[Dict[str, Any]]"
                ],
                "state": [
                    "list[list[typing.Any]]",
                    "List[List[Any]]",
                    "list[list[str]]",
                    "List[List[str]]",
                    "list[dict[str, typing.Any]]",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "test_genesis": {
            "name": "test_genesis",
            "location": 35,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "Tuple[str, dict]",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "bool",
                    "Tuple[str, dict]",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_genesis_random_scores": {
            "name": "test_genesis_random_scores",
            "location": 41,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "Tuple[str, dict]",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "Sequence[str]",
                    "int",
                    "typing.Sequence[str]",
                    "Iterable[Any]",
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "run_inactivity_scores_test": {
            "name": "run_inactivity_scores_test",
            "location": 56,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": [],
                "participation_fn": [
                    "None",
                    "Union[str, Callable[[], str]]",
                    "str",
                    "Optional[str]",
                    "typing.Callable[[], str]",
                    "fakesmtpd.state.State",
                    "Optional[\"Outcome\"]"
                ],
                "inactivity_scores_fn": [
                    "Union[str, Callable[[], str]]",
                    "Iterable[Callable]",
                    "None",
                    "str",
                    "typing.Callable[[], str]",
                    "typing.Iterable[typing.Callable[, ]]"
                ],
                "rng": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "test_all_zero_inactivity_scores_empty_participation": {
            "name": "test_all_zero_inactivity_scores_empty_participation",
            "location": 67,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "typing.Callable[, ]",
                    "float",
                    "Tuple[str, dict]",
                    "tuple[typing.Union[str,dict[, ]]]"
                ],
                "state": [
                    "float",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_all_zero_inactivity_scores_empty_participation_leaking": {
            "name": "test_all_zero_inactivity_scores_empty_participation_leaking",
            "location": 75,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "float",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "Callable",
                    "float",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_all_zero_inactivity_scores_random_participation": {
            "name": "test_all_zero_inactivity_scores_random_participation",
            "location": 87,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Tuple[str, dict]",
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]"
                ],
                "state": [
                    "float",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_all_zero_inactivity_scores_random_participation_leaking": {
            "name": "test_all_zero_inactivity_scores_random_participation_leaking",
            "location": 98,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "float",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "Callable",
                    "float",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_all_zero_inactivity_scores_full_participation": {
            "name": "test_all_zero_inactivity_scores_full_participation",
            "location": 114,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "typing.Callable[, ]",
                    "float",
                    "Tuple[str, dict]",
                    "tuple[typing.Union[str,dict[, ]]]"
                ],
                "state": [
                    "float",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_all_zero_inactivity_scores_full_participation_leaking": {
            "name": "test_all_zero_inactivity_scores_full_participation_leaking",
            "location": 126,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "float",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "float",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_random_inactivity_scores_empty_participation": {
            "name": "test_random_inactivity_scores_empty_participation",
            "location": 141,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "float",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_random_inactivity_scores_empty_participation_leaking": {
            "name": "test_random_inactivity_scores_empty_participation_leaking",
            "location": 151,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "float",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_random_inactivity_scores_random_participation": {
            "name": "test_random_inactivity_scores_random_participation",
            "location": 163,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "Tuple[str, dict]",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "bool",
                    "Tuple[str, dict]",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_random_inactivity_scores_random_participation_leaking": {
            "name": "test_random_inactivity_scores_random_participation_leaking",
            "location": 173,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "float",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "Callable",
                    "float",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_random_inactivity_scores_full_participation": {
            "name": "test_random_inactivity_scores_full_participation",
            "location": 186,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "float",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_random_inactivity_scores_full_participation_leaking": {
            "name": "test_random_inactivity_scores_full_participation_leaking",
            "location": 196,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "float",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "slash_some_validators_for_inactivity_scores_test": {
            "name": "slash_some_validators_for_inactivity_scores_test",
            "location": 207,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "raiden.transfer.state.ChainState"
                ],
                "state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState"
                ],
                "rng": [
                    "int",
                    "dict",
                    "List[int]"
                ]
            }
        },
        "test_some_slashed_zero_scores_full_participation": {
            "name": "test_some_slashed_zero_scores_full_participation",
            "location": 223,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_some_slashed_zero_scores_full_participation_leaking": {
            "name": "test_some_slashed_zero_scores_full_participation_leaking",
            "location": 236,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_some_slashed_full_random": {
            "name": "test_some_slashed_full_random",
            "location": 256,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_some_slashed_full_random_leaking": {
            "name": "test_some_slashed_full_random_leaking",
            "location": 268,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_some_exited_full_random_leaking": {
            "name": "test_some_exited_full_random_leaking",
            "location": 283,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool"
                ],
                "state": [
                    "bool"
                ]
            }
        },
        "_run_randomized_state_test_for_inactivity_updates": {
            "name": "_run_randomized_state_test_for_inactivity_updates",
            "location": 330,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "raiden.transfer.state.ChainState"
                ],
                "state": [
                    "raiden.transfer.state.ChainState"
                ],
                "rng": []
            }
        },
        "test_randomized_state": {
            "name": "test_randomized_state",
            "location": 360,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "float"
                ],
                "state": [
                    "float"
                ]
            }
        },
        "test_randomized_state_leaking": {
            "name": "test_randomized_state_leaking",
            "location": 372,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "float"
                ],
                "state": [
                    "float"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/altair/epoch_processing/test_process_participation_flag_updates.py": {
        "get_full_flags": {
            "name": "get_full_flags",
            "location": 15,
            "return": [
                "Dict[str, bool]",
                "dict",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "str"
                ]
            }
        },
        "run_process_participation_flag_updates": {
            "name": "run_process_participation_flag_updates",
            "location": 22,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "list[list[typing.Any]]",
                    "List[List[Any]]",
                    "list[list[str]]",
                    "List[List[str]]",
                    "state.State"
                ],
                "state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.mediated_transfer.state.InitiatorPaymentState"
                ]
            }
        },
        "test_all_zeroed": {
            "name": "test_all_zeroed",
            "location": 31,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Optional[str]",
                    "str",
                    "Callable[[dict], None]",
                    "None",
                    "typing.Callable[dict[, ], None]"
                ],
                "state": [
                    "int",
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_filled": {
            "name": "test_filled",
            "location": 40,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_previous_filled": {
            "name": "test_previous_filled",
            "location": 51,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_current_filled": {
            "name": "test_current_filled",
            "location": 62,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": [
                    "int"
                ]
            }
        },
        "random_flags": {
            "name": "random_flags",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "Dict[int, bool]",
                    "int",
                    "dict[int, bool]",
                    "List[int]",
                    "list[int]"
                ],
                "state": [
                    "int",
                    "List[float]",
                    "list[float]",
                    "DefaultDict[int, List[int]]",
                    "typing.DefaultDict",
                    "List[int]",
                    "list[int]"
                ],
                "seed": [
                    "List[int]",
                    "list[int]"
                ],
                "previous": [
                    "bool",
                    "str",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ],
                "current": [
                    "bool",
                    "str",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "test_random_0": {
            "name": "test_random_0",
            "location": 83,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_random_1": {
            "name": "test_random_1",
            "location": 91,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_random_2": {
            "name": "test_random_2",
            "location": 99,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_random_genesis": {
            "name": "test_random_genesis",
            "location": 107,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "List[List[int]]",
                    "list[list[int]]",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "state": [
                    "List[List[int]]",
                    "list[list[int]]",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_current_epoch_zeroed": {
            "name": "test_current_epoch_zeroed",
            "location": 114,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_previous_epoch_zeroed": {
            "name": "test_previous_epoch_zeroed",
            "location": 123,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "custom_validator_count": {
            "name": "custom_validator_count",
            "location": 130,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "factor": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_slightly_larger_random": {
            "name": "test_slightly_larger_random",
            "location": 142,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_large_random": {
            "name": "test_large_random",
            "location": 153,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "custom_validator_count.initializer": {
            "name": "initializer",
            "location": 131,
            "return": [
                "list[]",
                "List[int]",
                "int"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "Awaitable",
                    "str",
                    "Optional[List[int]]"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/altair/epoch_processing/test_process_sync_committee_updates.py": {
        "run_sync_committees_progress_test": {
            "name": "run_sync_committees_progress_test",
            "location": 23,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str"
                ],
                "state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "dict[, ]",
                    "dict",
                    "tuple[typing.Union[int,...]]",
                    "Optional[Tuple[int, ...]]",
                    "None"
                ]
            }
        },
        "test_sync_committees_progress_genesis": {
            "name": "test_sync_committees_progress_genesis",
            "location": 61,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_sync_committees_progress_not_genesis": {
            "name": "test_sync_committees_progress_not_genesis",
            "location": 72,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_sync_committees_progress_misc_balances_genesis": {
            "name": "test_sync_committees_progress_misc_balances_genesis",
            "location": 87,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_sync_committees_progress_misc_balances_not_genesis": {
            "name": "test_sync_committees_progress_misc_balances_not_genesis",
            "location": 100,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_sync_committees_no_progress_not_boundary": {
            "name": "test_sync_committees_no_progress_not_boundary",
            "location": 113,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/altair/epoch_processing/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/altair/fork/test_altair_fork_basic.py": {
        "test_fork_base_state": {
            "name": "test_fork_base_state",
            "location": 27,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "List[str]",
                    "list[str]"
                ],
                "phases": [
                    "List[int]",
                    "int",
                    "list[int]",
                    "Union[str, float]",
                    "str",
                    "bool",
                    "float"
                ],
                "state": [
                    "List[int]",
                    "int",
                    "list[int]",
                    "Union[str, float]",
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "test_fork_next_epoch": {
            "name": "test_fork_next_epoch",
            "location": 35,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "typing.Callable[, ]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.Callable",
                    "Callable",
                    "raiden.utils.TokenNetworkAddress"
                ],
                "phases": [
                    "List[int]",
                    "bool",
                    "list[int]",
                    "str"
                ],
                "state": [
                    "float",
                    "int",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenNetworkRegistryAddress"
                ]
            }
        },
        "test_fork_next_epoch_with_block": {
            "name": "test_fork_next_epoch_with_block",
            "location": 44,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "typing.Callable[, ]",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "phases": [
                    "List[int]",
                    "bool",
                    "list[int]",
                    "str"
                ],
                "state": [
                    "float",
                    "raiden.utils.Address",
                    "typing.Callable[, ]",
                    "Callable"
                ]
            }
        },
        "test_fork_many_next_epoch": {
            "name": "test_fork_many_next_epoch",
            "location": 53,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "typing.Callable[, ]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.Callable",
                    "Callable",
                    "raiden.utils.TokenNetworkAddress"
                ],
                "phases": [
                    "List[int]",
                    "bool",
                    "list[int]",
                    "str"
                ],
                "state": [
                    "float",
                    "int",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenNetworkRegistryAddress"
                ]
            }
        },
        "test_fork_random_low_balances": {
            "name": "test_fork_random_low_balances",
            "location": 63,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "list[str]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "str",
                    "bool",
                    "List[str]",
                    "list[list[int]]",
                    "List[List[int]]"
                ],
                "phases": [
                    "list[int]",
                    "bool",
                    "List[int]",
                    "str",
                    "int"
                ],
                "state": [
                    "list[int]",
                    "bool",
                    "List[int]",
                    "str",
                    "int"
                ]
            }
        },
        "test_fork_random_misc_balances": {
            "name": "test_fork_random_misc_balances",
            "location": 71,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "list[str]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "str",
                    "bool",
                    "List[str]",
                    "list[list[int]]",
                    "List[List[int]]"
                ],
                "phases": [
                    "list[int]",
                    "bool",
                    "List[int]",
                    "str",
                    "int"
                ],
                "state": [
                    "list[int]",
                    "bool",
                    "List[int]",
                    "str",
                    "int"
                ]
            }
        },
        "test_fork_random_large_validator_set": {
            "name": "test_fork_random_large_validator_set",
            "location": 81,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "list[str]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "str",
                    "list[list[int]]",
                    "bool",
                    "List[str]",
                    "List[List[int]]"
                ],
                "phases": [
                    "list[int]",
                    "bool",
                    "List[int]",
                    "str",
                    "int"
                ],
                "state": [
                    "list[int]",
                    "bool",
                    "List[int]",
                    "str",
                    "int"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/altair/fork/test_altair_fork_random.py": {
        "test_altair_fork_random_0": {
            "name": "test_altair_fork_random_0",
            "location": 29,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "Optional[bool]",
                    "None"
                ],
                "phases": [
                    "List[int]",
                    "bool",
                    "list[int]",
                    "str"
                ],
                "state": [
                    "int",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "test_altair_fork_random_1": {
            "name": "test_altair_fork_random_1",
            "location": 38,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "Optional[bool]",
                    "None"
                ],
                "phases": [
                    "List[int]",
                    "bool",
                    "list[int]",
                    "str"
                ],
                "state": [
                    "int",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "test_altair_fork_random_2": {
            "name": "test_altair_fork_random_2",
            "location": 47,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "Optional[bool]",
                    "None"
                ],
                "phases": [
                    "List[int]",
                    "bool",
                    "list[int]",
                    "str"
                ],
                "state": [
                    "int",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "test_altair_fork_random_3": {
            "name": "test_altair_fork_random_3",
            "location": 56,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "Optional[bool]",
                    "None"
                ],
                "phases": [
                    "List[int]",
                    "bool",
                    "list[int]",
                    "str"
                ],
                "state": [
                    "int",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "test_altair_fork_random_duplicate_attestations": {
            "name": "test_altair_fork_random_duplicate_attestations",
            "location": 65,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "Optional[bool]",
                    "None"
                ],
                "phases": [
                    "List[int]",
                    "bool",
                    "list[int]",
                    "str"
                ],
                "state": [
                    "int",
                    "typing.Iterable[typing.Any]",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "Iterable[Any]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ]
            }
        },
        "test_altair_fork_random_mismatched_attestations": {
            "name": "test_altair_fork_random_mismatched_attestations",
            "location": 76,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "list[raiden.utils.Address]",
                    "int",
                    "tests.pathfinding.utils.SimpleReachabilityContainer",
                    "List[raiden.utils.Address]"
                ],
                "phases": [
                    "List[int]",
                    "bool",
                    "list[int]",
                    "str"
                ],
                "state": [
                    "list[dict[str, typing.Any]]",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "test_altair_fork_random_low_balances": {
            "name": "test_altair_fork_random_low_balances",
            "location": 98,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "Optional[bool]",
                    "None"
                ],
                "phases": [
                    "list[int]",
                    "bool",
                    "List[int]",
                    "str",
                    "int"
                ],
                "state": [
                    "int",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "test_altair_fork_random_misc_balances": {
            "name": "test_altair_fork_random_misc_balances",
            "location": 107,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "Optional[bool]",
                    "None"
                ],
                "phases": [
                    "list[int]",
                    "bool",
                    "List[int]",
                    "str",
                    "int"
                ],
                "state": [
                    "int",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "test_altair_fork_random_large_validator_set": {
            "name": "test_altair_fork_random_large_validator_set",
            "location": 118,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "Optional[bool]",
                    "None",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "phases": [
                    "list[int]",
                    "bool",
                    "List[int]",
                    "str",
                    "int"
                ],
                "state": [
                    "int",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/altair/fork/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/altair/merkle/test_single_proof.py": {
        "test_next_sync_committee_merkle_proof": {
            "name": "test_next_sync_committee_merkle_proof",
            "location": 10,
            "return": [
                "",
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[tuple[typing.Union[typing.Text,dict[typing.Union[typing.Text,typing.Text,typing.Text], list[]]]]]"
            ],
            "arguments": {
                "spec": [
                    "Optional[Dict[str, Any]]",
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "state": [
                    "Optional[Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "test_finality_root_merkle_proof": {
            "name": "test_finality_root_merkle_proof",
            "location": 29,
            "return": [
                "",
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[tuple[typing.Union[typing.Text,dict[typing.Union[typing.Text,typing.Text,typing.Text], list[]]]]]"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "Callable"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/altair/merkle/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/altair/random/test_random.py": {
        "test_randomized_0": {
            "name": "test_randomized_0",
            "location": 34,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "test_randomized_1": {
            "name": "test_randomized_1",
            "location": 60,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "test_randomized_2": {
            "name": "test_randomized_2",
            "location": 86,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "test_randomized_3": {
            "name": "test_randomized_3",
            "location": 112,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "test_randomized_4": {
            "name": "test_randomized_4",
            "location": 138,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "test_randomized_5": {
            "name": "test_randomized_5",
            "location": 164,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "test_randomized_6": {
            "name": "test_randomized_6",
            "location": 190,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "test_randomized_7": {
            "name": "test_randomized_7",
            "location": 216,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "test_randomized_8": {
            "name": "test_randomized_8",
            "location": 242,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "test_randomized_9": {
            "name": "test_randomized_9",
            "location": 268,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "test_randomized_10": {
            "name": "test_randomized_10",
            "location": 294,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "test_randomized_11": {
            "name": "test_randomized_11",
            "location": 320,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "test_randomized_12": {
            "name": "test_randomized_12",
            "location": 346,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "test_randomized_13": {
            "name": "test_randomized_13",
            "location": 372,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "test_randomized_14": {
            "name": "test_randomized_14",
            "location": 398,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "test_randomized_15": {
            "name": "test_randomized_15",
            "location": 424,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/altair/random/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/altair/rewards/test_inactivity_scores.py": {
        "test_random_inactivity_scores_0": {
            "name": "test_random_inactivity_scores_0",
            "location": 18,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str"
                ],
                "state": [
                    "str"
                ]
            }
        },
        "test_random_inactivity_scores_1": {
            "name": "test_random_inactivity_scores_1",
            "location": 25,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str"
                ],
                "state": [
                    "str"
                ]
            }
        },
        "test_half_zero_half_random_inactivity_scores": {
            "name": "test_half_zero_half_random_inactivity_scores",
            "location": 32,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str"
                ],
                "state": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "test_random_high_inactivity_scores": {
            "name": "test_random_high_inactivity_scores",
            "location": 42,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "float"
                ],
                "state": [
                    "str",
                    "float"
                ]
            }
        },
        "test_random_inactivity_scores_low_balances_0": {
            "name": "test_random_inactivity_scores_low_balances_0",
            "location": 51,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "Tuple[str, dict]",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional[str]",
                    "None"
                ],
                "state": [
                    "str",
                    "Tuple[str, dict]",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_random_inactivity_scores_low_balances_1": {
            "name": "test_random_inactivity_scores_low_balances_1",
            "location": 60,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "Tuple[str, dict]",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional[str]",
                    "None"
                ],
                "state": [
                    "str",
                    "Tuple[str, dict]",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_full_random_misc_balances": {
            "name": "test_full_random_misc_balances",
            "location": 69,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Tuple[str, dict]",
                    "str",
                    "tuple[typing.Union[str,dict[, ]]]"
                ],
                "state": [
                    "Tuple[str, dict]",
                    "str",
                    "tuple[typing.Union[str,dict[, ]]]"
                ]
            }
        },
        "test_random_inactivity_scores_leaking_0": {
            "name": "test_random_inactivity_scores_leaking_0",
            "location": 81,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str"
                ],
                "state": [
                    "str"
                ]
            }
        },
        "test_random_inactivity_scores_leaking_1": {
            "name": "test_random_inactivity_scores_leaking_1",
            "location": 89,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str"
                ],
                "state": [
                    "str"
                ]
            }
        },
        "test_half_zero_half_random_inactivity_scores_leaking": {
            "name": "test_half_zero_half_random_inactivity_scores_leaking",
            "location": 97,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str"
                ],
                "state": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "test_random_high_inactivity_scores_leaking": {
            "name": "test_random_high_inactivity_scores_leaking",
            "location": 108,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "float"
                ],
                "state": [
                    "str",
                    "float"
                ]
            }
        },
        "test_random_high_inactivity_scores_leaking_8_epochs": {
            "name": "test_random_high_inactivity_scores_leaking_8_epochs",
            "location": 116,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "float"
                ],
                "state": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/altair/sanity/test_blocks.py": {
        "run_sync_committee_sanity_test": {
            "name": "run_sync_committee_sanity_test",
            "location": 23,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,int]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [
                    "Dict[\"core.Edge\", \"state.State\"]",
                    "int",
                    "dict[\"core.Edge\", \"state.State\"]"
                ],
                "state": [
                    "int",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ],
                "fraction_full": [
                    "float",
                    "bytes",
                    "state.State",
                    "List[int]",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ],
                "rng": [
                    "bytes",
                    "state.State",
                    "List[int]",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "test_full_sync_committee_committee": {
            "name": "test_full_sync_committee_committee",
            "location": 54,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_half_sync_committee_committee": {
            "name": "test_half_sync_committee_committee",
            "location": 61,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_empty_sync_committee_committee": {
            "name": "test_empty_sync_committee_committee",
            "location": 68,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_full_sync_committee_committee_genesis": {
            "name": "test_full_sync_committee_committee_genesis",
            "location": 75,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_half_sync_committee_committee_genesis": {
            "name": "test_half_sync_committee_committee_genesis",
            "location": 81,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_empty_sync_committee_committee_genesis": {
            "name": "test_empty_sync_committee_committee_genesis",
            "location": 87,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_inactivity_scores_leaking": {
            "name": "test_inactivity_scores_leaking",
            "location": 94,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,typing.Iterable[typing.Any],bool]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [
                    "float"
                ],
                "state": [
                    "typing.Iterable[typing.Any]",
                    "bool",
                    "Iterable[Any]",
                    "List[int]",
                    "fakesmtpd.state.State"
                ]
            }
        },
        "test_inactivity_scores_full_participation_leaking": {
            "name": "test_inactivity_scores_full_participation_leaking",
            "location": 119,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,int]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [],
                "state": [
                    "int"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/altair/sanity/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/altair/transition/test_activations_and_exits.py": {
        "test_transition_with_one_fourth_exiting_validators_exit_post_fork": {
            "name": "test_transition_with_one_fourth_exiting_validators_exit_post_fork",
            "location": 31,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,int,list[int],str,typing.Deque]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]",
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {
                "state": [
                    "int",
                    "str",
                    "list[int]",
                    "List[int]",
                    "Iterable[Any]",
                    "typing.Deque",
                    "deque"
                ],
                "fork_epoch": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "spec": [
                    "int",
                    "List[int]",
                    "Iterable[Any]",
                    "str",
                    "deque"
                ],
                "post_spec": [
                    "Callable[..., None]",
                    "typing.Callable[..., None]"
                ],
                "pre_tag": [
                    "typing.Sequence[str]",
                    "str",
                    "Sequence[str]",
                    "bool",
                    "T",
                    "list[str]",
                    "tuple[]",
                    "List[str]",
                    "dict[, ]",
                    "tuple",
                    "dict"
                ],
                "post_tag": [
                    "list",
                    "list[]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_transition_with_one_fourth_exiting_validators_exit_at_fork": {
            "name": "test_transition_with_one_fourth_exiting_validators_exit_at_fork",
            "location": 89,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,int,str,list[int],list[str],None]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]",
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {
                "state": [
                    "int",
                    "str",
                    "List[int]",
                    "list[int]",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ],
                "fork_epoch": [
                    "int",
                    "str",
                    "List[int]",
                    "list[int]",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ],
                "spec": [
                    "int",
                    "str",
                    "List[int]",
                    "Optional[List[str]]"
                ],
                "post_spec": [
                    "str"
                ],
                "pre_tag": [
                    "typing.Sequence[str]",
                    "T",
                    "str",
                    "bool",
                    "Sequence[str]",
                    "typing.Mapping",
                    "Mapping[str, T]"
                ],
                "post_tag": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "test_transition_with_non_empty_activation_queue": {
            "name": "test_transition_with_non_empty_activation_queue",
            "location": 155,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,typing.Callable[, ],str,int,None]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]",
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {
                "state": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "fork_epoch": [
                    "str",
                    "raiden.constants.EthClient"
                ],
                "spec": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "post_spec": [],
                "pre_tag": [
                    "typing.Sequence[str]",
                    "T",
                    "str",
                    "bool",
                    "Sequence[str]",
                    "typing.Mapping",
                    "Mapping[str, T]"
                ],
                "post_tag": [
                    "int",
                    "str",
                    "dict[str, typing.Any]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_transition_with_activation_at_fork_epoch": {
            "name": "test_transition_with_activation_at_fork_epoch",
            "location": 183,
            "return": [
                "",
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "state": [
                    "str"
                ],
                "fork_epoch": [
                    "str"
                ],
                "spec": [
                    "str"
                ],
                "post_spec": [
                    "Callable[..., None]",
                    "typing.Callable[..., None]"
                ],
                "pre_tag": [
                    "typing.Sequence[str]",
                    "T",
                    "str",
                    "bool",
                    "Sequence[str]",
                    "typing.Mapping",
                    "Mapping[str, T]"
                ],
                "post_tag": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/altair/transition/test_leaking.py": {
        "test_transition_with_leaking_pre_fork": {
            "name": "test_transition_with_leaking_pre_fork",
            "location": 16,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,str,typing.Callable[, ],list[dict[str, typing.Any]]]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,int,tuple[typing.Union[typing.Literal,typing.Literal]]]]]"
            ],
            "arguments": {
                "state": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "fork_epoch": [
                    "str",
                    "typing.Callable[, ]",
                    "raiden.constants.EthClient",
                    "Callable"
                ],
                "spec": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "post_spec": [
                    "Callable[..., None]",
                    "typing.Callable[..., None]"
                ],
                "pre_tag": [
                    "typing.Sequence[str]",
                    "T",
                    "str",
                    "bool",
                    "Sequence[str]",
                    "typing.Mapping",
                    "Mapping[str, T]"
                ],
                "post_tag": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "test_transition_with_leaking_at_fork": {
            "name": "test_transition_with_leaking_at_fork",
            "location": 44,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,str,typing.Callable[, ],list[dict[str, typing.Any]]]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,int,tuple[typing.Union[typing.Literal,typing.Literal]]]]]"
            ],
            "arguments": {
                "state": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "fork_epoch": [
                    "str",
                    "typing.Callable[, ]",
                    "raiden.constants.EthClient",
                    "Callable"
                ],
                "spec": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "post_spec": [
                    "Callable[..., None]",
                    "typing.Callable[..., None]"
                ],
                "pre_tag": [
                    "typing.Sequence[str]",
                    "T",
                    "str",
                    "bool",
                    "Sequence[str]",
                    "typing.Mapping",
                    "Mapping[str, T]"
                ],
                "post_tag": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/altair/transition/test_operations.py": {
        "test_transition_with_proposer_slashing_right_after_fork": {
            "name": "test_transition_with_proposer_slashing_right_after_fork",
            "location": 23,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "state": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "OrderedDict",
                    "typing.OrderedDict"
                ],
                "fork_epoch": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "OrderedDict",
                    "typing.OrderedDict"
                ],
                "spec": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "OrderedDict",
                    "typing.OrderedDict"
                ],
                "post_spec": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "OrderedDict",
                    "typing.OrderedDict"
                ],
                "pre_tag": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "OrderedDict",
                    "typing.OrderedDict"
                ],
                "post_tag": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "OrderedDict",
                    "typing.OrderedDict"
                ]
            }
        },
        "test_transition_with_proposer_slashing_right_before_fork": {
            "name": "test_transition_with_proposer_slashing_right_before_fork",
            "location": 41,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "state": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "OrderedDict",
                    "typing.OrderedDict"
                ],
                "fork_epoch": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "OrderedDict",
                    "typing.OrderedDict"
                ],
                "spec": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "OrderedDict",
                    "typing.OrderedDict"
                ],
                "post_spec": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "OrderedDict",
                    "typing.OrderedDict"
                ],
                "pre_tag": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "OrderedDict",
                    "typing.OrderedDict"
                ],
                "post_tag": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "OrderedDict",
                    "typing.OrderedDict"
                ]
            }
        },
        "test_transition_with_attester_slashing_right_after_fork": {
            "name": "test_transition_with_attester_slashing_right_after_fork",
            "location": 64,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "state": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "OrderedDict",
                    "typing.OrderedDict"
                ],
                "fork_epoch": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "OrderedDict",
                    "typing.OrderedDict"
                ],
                "spec": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "OrderedDict",
                    "typing.OrderedDict"
                ],
                "post_spec": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "OrderedDict",
                    "typing.OrderedDict"
                ],
                "pre_tag": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "OrderedDict",
                    "typing.OrderedDict"
                ],
                "post_tag": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "OrderedDict",
                    "typing.OrderedDict"
                ]
            }
        },
        "test_transition_with_attester_slashing_right_before_fork": {
            "name": "test_transition_with_attester_slashing_right_before_fork",
            "location": 82,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "state": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "OrderedDict",
                    "typing.OrderedDict"
                ],
                "fork_epoch": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "OrderedDict",
                    "typing.OrderedDict"
                ],
                "spec": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "OrderedDict",
                    "typing.OrderedDict"
                ],
                "post_spec": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "OrderedDict",
                    "typing.OrderedDict"
                ],
                "pre_tag": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "OrderedDict",
                    "typing.OrderedDict"
                ],
                "post_tag": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "OrderedDict",
                    "typing.OrderedDict"
                ]
            }
        },
        "test_transition_with_deposit_right_after_fork": {
            "name": "test_transition_with_deposit_right_after_fork",
            "location": 104,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "state": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "OrderedDict",
                    "typing.OrderedDict"
                ],
                "fork_epoch": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "OrderedDict",
                    "typing.OrderedDict"
                ],
                "spec": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "OrderedDict",
                    "typing.OrderedDict"
                ],
                "post_spec": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "OrderedDict",
                    "typing.OrderedDict"
                ],
                "pre_tag": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "OrderedDict",
                    "typing.OrderedDict"
                ],
                "post_tag": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "OrderedDict",
                    "typing.OrderedDict"
                ]
            }
        },
        "test_transition_with_deposit_right_before_fork": {
            "name": "test_transition_with_deposit_right_before_fork",
            "location": 121,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "state": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "OrderedDict",
                    "typing.OrderedDict"
                ],
                "fork_epoch": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "OrderedDict",
                    "typing.OrderedDict"
                ],
                "spec": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "OrderedDict",
                    "typing.OrderedDict"
                ],
                "post_spec": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "OrderedDict",
                    "typing.OrderedDict"
                ],
                "pre_tag": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "OrderedDict",
                    "typing.OrderedDict"
                ],
                "post_tag": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "OrderedDict",
                    "typing.OrderedDict"
                ]
            }
        },
        "test_transition_with_voluntary_exit_right_after_fork": {
            "name": "test_transition_with_voluntary_exit_right_after_fork",
            "location": 144,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "state": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "fork_epoch": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "OrderedDict",
                    "typing.OrderedDict"
                ],
                "spec": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "post_spec": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "OrderedDict",
                    "typing.OrderedDict"
                ],
                "pre_tag": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "OrderedDict",
                    "typing.OrderedDict"
                ],
                "post_tag": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "OrderedDict",
                    "typing.OrderedDict"
                ]
            }
        },
        "test_transition_with_voluntary_exit_right_before_fork": {
            "name": "test_transition_with_voluntary_exit_right_before_fork",
            "location": 166,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "state": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "fork_epoch": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "OrderedDict",
                    "typing.OrderedDict"
                ],
                "spec": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "post_spec": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "OrderedDict",
                    "typing.OrderedDict"
                ],
                "pre_tag": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "OrderedDict",
                    "typing.OrderedDict"
                ],
                "post_tag": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "OrderedDict",
                    "typing.OrderedDict"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/altair/transition/test_slashing.py": {
        "test_transition_with_one_fourth_slashed_active_validators_pre_fork": {
            "name": "test_transition_with_one_fourth_slashed_active_validators_pre_fork",
            "location": 24,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,int,str,list[int],list[str],None]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[tuple[typing.Union[typing.Any,float]]],list[str],str]]]"
            ],
            "arguments": {
                "state": [
                    "int",
                    "str",
                    "List[int]",
                    "list[int]",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ],
                "fork_epoch": [
                    "str",
                    "typing.Callable[, ]",
                    "raiden.constants.EthClient",
                    "Callable"
                ],
                "spec": [
                    "int",
                    "dict",
                    "dict[, ]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "post_spec": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "pre_tag": [
                    "typing.Sequence[str]",
                    "T",
                    "str",
                    "bool",
                    "Sequence[str]",
                    "typing.Mapping",
                    "Mapping[str, T]"
                ],
                "post_tag": []
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/altair/transition/test_transition.py": {
        "test_normal_transition": {
            "name": "test_normal_transition",
            "location": 24,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,str,int]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,str,list[],int,typing.Deque,set[]]]]"
            ],
            "arguments": {
                "state": [
                    "str",
                    "int"
                ],
                "fork_epoch": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "spec": [
                    "str",
                    "Callable",
                    "float",
                    "typing.Callable[, ]",
                    "list",
                    "list[]"
                ],
                "post_spec": [
                    "Callable[..., None]",
                    "typing.Callable[..., None]"
                ],
                "pre_tag": [
                    "T"
                ],
                "post_tag": [
                    "int",
                    "str",
                    "dict[str, typing.Any]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_transition_missing_first_post_block": {
            "name": "test_transition_missing_first_post_block",
            "location": 60,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,str,int]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,str,list[],int,typing.Deque,set[]]]]"
            ],
            "arguments": {
                "state": [
                    "str",
                    "int"
                ],
                "fork_epoch": [
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "Callable",
                    "list[]",
                    "list",
                    "raiden.transfer.state.ChainState"
                ],
                "spec": [
                    "str",
                    "int",
                    "float",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "post_spec": [
                    "str",
                    "tuple",
                    "tuple[]"
                ],
                "pre_tag": [
                    "list[]",
                    "bool",
                    "T",
                    "list"
                ],
                "post_tag": [
                    "Callable",
                    "typing.Callable[, ]",
                    "str",
                    "dict",
                    "dict[, ]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_transition_missing_last_pre_fork_block": {
            "name": "test_transition_missing_last_pre_fork_block",
            "location": 97,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,int,typing.IO]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,str,list[],int,typing.Deque,set[]]]]"
            ],
            "arguments": {
                "state": [
                    "int",
                    "IO[bytes]",
                    "typing.IO"
                ],
                "fork_epoch": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "spec": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]",
                    "dict",
                    "dict[, ]"
                ],
                "post_spec": [
                    "Callable[..., None]",
                    "typing.Callable[..., None]"
                ],
                "pre_tag": [
                    "T"
                ],
                "post_tag": [
                    "int",
                    "list[str]",
                    "List[str]",
                    "typing.Callable[, ]",
                    "bool",
                    "Callable"
                ]
            }
        },
        "test_transition_only_blocks_post_fork": {
            "name": "test_transition_only_blocks_post_fork",
            "location": 136,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,str,int]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]",
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {
                "state": [
                    "str",
                    "int"
                ],
                "fork_epoch": [
                    "Callable"
                ],
                "spec": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "post_spec": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ],
                "pre_tag": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "list",
                    "list[]"
                ],
                "post_tag": [
                    "bool",
                    "T",
                    "str",
                    "list[]",
                    "list"
                ]
            }
        },
        "_run_transition_test_with_attestations": {
            "name": "_run_transition_test_with_attestations",
            "location": 177,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,str,None,typing.Callable[, ],bool]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]",
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {
                "state": [
                    "str",
                    "Optional[str]",
                    "Callable",
                    "bool",
                    "None",
                    "typing.Callable[, ]"
                ],
                "fork_epoch": [
                    "Callable",
                    "List[List[int]]",
                    "Optional[List[Any]]"
                ],
                "spec": [
                    "List[Dict[str, int]]",
                    "int",
                    "Optional[List[Any]]"
                ],
                "post_spec": [
                    "List[Dict[str, int]]",
                    "list[dict[str, int]]",
                    "List[List[int]]",
                    "list[list[int]]"
                ],
                "pre_tag": [
                    "bool"
                ],
                "post_tag": [
                    "list[typing.Type]",
                    "int",
                    "List[Type]",
                    "list[dict[, ]]",
                    "List[Dict]",
                    "Iterable[str]"
                ],
                "participation_fn": [
                    "int",
                    "None",
                    "str",
                    "bool"
                ],
                "expect_finality": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_transition_with_finality": {
            "name": "test_transition_with_finality",
            "location": 262,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "state": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "fork_epoch": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "spec": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "post_spec": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "pre_tag": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "post_tag": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_transition_with_random_three_quarters_participation": {
            "name": "test_transition_with_random_three_quarters_participation",
            "location": 271,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "state": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Callable",
                    "typing.Callable[, ]",
                    "list",
                    "list[]"
                ],
                "fork_epoch": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Callable",
                    "typing.Callable[, ]",
                    "list",
                    "list[]"
                ],
                "spec": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Callable",
                    "typing.Callable[, ]",
                    "list",
                    "list[]"
                ],
                "post_spec": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Callable",
                    "typing.Callable[, ]",
                    "list",
                    "list[]"
                ],
                "pre_tag": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Callable",
                    "typing.Callable[, ]",
                    "list",
                    "list[]"
                ],
                "post_tag": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Callable",
                    "typing.Callable[, ]",
                    "list",
                    "list[]"
                ]
            }
        },
        "test_transition_with_random_half_participation": {
            "name": "test_transition_with_random_half_participation",
            "location": 298,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "state": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "Optional[str]",
                    "None"
                ],
                "fork_epoch": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "Optional[str]",
                    "None"
                ],
                "spec": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "Optional[str]",
                    "None"
                ],
                "post_spec": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "Optional[str]",
                    "None"
                ],
                "pre_tag": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "Optional[str]",
                    "None"
                ],
                "post_tag": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_transition_with_no_attestations_until_after_fork": {
            "name": "test_transition_with_no_attestations_until_after_fork",
            "location": 322,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,int]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,str,list[],int,typing.Deque,set[]]]]"
            ],
            "arguments": {
                "state": [
                    "int"
                ],
                "fork_epoch": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "spec": [
                    "str",
                    "int",
                    "float",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "post_spec": [
                    "Callable[..., None]",
                    "typing.Callable[..., None]",
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]"
                ],
                "pre_tag": [
                    "T"
                ],
                "post_tag": [
                    "dict",
                    "dict[, ]",
                    "List[Dict[str, str]]",
                    "list[dict[str, str]]",
                    "List[Tuple[bool, str]]",
                    "list[tuple[typing.Union[bool,str]]]",
                    "Optional[int]",
                    "int",
                    "Iterable[Tuple[str, int]]",
                    "None"
                ]
            }
        },
        "test_transition_with_random_three_quarters_participation._drop_random_quarter": {
            "name": "_drop_random_quarter",
            "location": 278,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "_slot": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "_index": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "indices": [
                    "int",
                    "List[int]",
                    "List[str]",
                    "list"
                ]
            }
        },
        "test_transition_with_random_half_participation._drop_random_half": {
            "name": "_drop_random_half",
            "location": 301,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "_slot": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "_index": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "indices": [
                    "int",
                    "List[int]",
                    "List[str]",
                    "list"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/altair/transition/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/altair/unittests/test_config_invariants.py": {
        "test_weight_denominator": {
            "name": "test_weight_denominator",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "float"
                ],
                "state": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_inactivity_score": {
            "name": "test_inactivity_score",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "int"
                ],
                "state": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/altair/unittests/test_config_override.py": {
        "test_config_override": {
            "name": "test_config_override",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "List[List[int]]",
                    "list[list[int]]"
                ],
                "state": [
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/altair/unittests/test_sync_protocol.py": {
        "test_process_light_client_update_not_timeout": {
            "name": "test_process_light_client_update_not_timeout",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_process_light_client_update_timeout": {
            "name": "test_process_light_client_update_timeout",
            "location": 75,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState"
                ],
                "state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState",
                    "str"
                ]
            }
        },
        "test_process_light_client_update_finality_updated": {
            "name": "test_process_light_client_update_finality_updated",
            "location": 127,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "Set[str]"
                ],
                "state": [
                    "bool",
                    "Set[str]"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/altair/unittests/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/altair/unittests/networking/test_networking.py": {
        "test_get_sync_subcommittee_pubkeys_current_sync_committee": {
            "name": "test_get_sync_subcommittee_pubkeys_current_sync_committee",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "state": [
                    "typing.Callable[, ]",
                    "raiden.transfer.state.ChainState",
                    "Callable"
                ],
                "spec": [
                    "typing.Callable[, ]",
                    "raiden.transfer.state.ChainState",
                    "Callable"
                ]
            }
        },
        "test_get_sync_subcommittee_pubkeys_next_sync_committee": {
            "name": "test_get_sync_subcommittee_pubkeys_next_sync_committee",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "state": [
                    "typing.Callable[, ]",
                    "raiden.transfer.state.ChainState",
                    "Callable"
                ],
                "spec": [
                    "typing.Callable[, ]",
                    "raiden.transfer.state.ChainState",
                    "Callable"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/altair/unittests/networking/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/altair/unittests/validator/test_validator.py": {
        "ensure_assignments_in_sync_committee": {
            "name": "ensure_assignments_in_sync_committee",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "int"
                ],
                "state": [
                    "int"
                ],
                "epoch": [
                    "int"
                ],
                "sync_committee": [
                    "int"
                ],
                "active_pubkeys": [
                    "state.State",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "test_is_assigned_to_sync_committee": {
            "name": "test_is_assigned_to_sync_committee",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "raiden.utils.Callable",
                    "Callable",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.PaymentNetworkID",
                    "Optional[Dict[str, Any]]"
                ],
                "state": [
                    "raiden.utils.Callable",
                    "Callable",
                    "str"
                ]
            }
        },
        "_get_sync_committee_signature": {
            "name": "_get_sync_committee_signature",
            "location": 75,
            "return": [
                "str",
                "float",
                "int",
                "Optional[Callable[[str], bool]]"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "List[Set[int]]"
                ],
                "state": [
                    "str",
                    "bool",
                    "raiden.utils.Callable",
                    "raiden.utils.List[raiden.utils.Address]",
                    "Optional[str]",
                    "Callable[[str, str], None]"
                ],
                "target_slot": [
                    "str",
                    "raiden.utils.TokenAmount",
                    "List[str]",
                    "Callable"
                ],
                "target_block_root": [
                    "str",
                    "raiden.utils.TokenAmount",
                    "List[str]",
                    "Callable"
                ],
                "subcommittee_index": [
                    "str",
                    "int",
                    "List[Set[int]]",
                    "raiden.utils.Address",
                    "raiden.utils.TokenAmount"
                ],
                "index_in_subcommittee": [
                    "str",
                    "int",
                    "List[Set[int]]",
                    "raiden.utils.Address",
                    "raiden.utils.TokenAmount"
                ]
            }
        },
        "test_process_sync_committee_contributions": {
            "name": "test_process_sync_committee_contributions",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "raiden.utils.NetworkTimeout"
                ],
                "state": [
                    "raiden.utils.TokenNetworkAddress"
                ]
            }
        },
        "test_get_sync_committee_message": {
            "name": "test_get_sync_committee_message",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "dict",
                    "str"
                ],
                "state": [
                    "str",
                    "raiden.utils.Callable",
                    "Tuple[str, dict]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "_validator_index_for_pubkey": {
            "name": "_validator_index_for_pubkey",
            "location": 164,
            "return": [
                "str",
                "List[str]",
                "List[Dict]",
                "list",
                "List[Dict[str, str]]"
            ],
            "arguments": {
                "state": [
                    "int"
                ],
                "pubkey": [
                    "int"
                ]
            }
        },
        "_subnet_for_sync_committee_index": {
            "name": "_subnet_for_sync_committee_index",
            "location": 168,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "Tuple[int, int]"
                ],
                "i": [
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "_get_expected_subnets_by_pubkey": {
            "name": "_get_expected_subnets_by_pubkey",
            "location": 172,
            "return": [
                "str",
                "raiden.utils.List[str]",
                "bytes",
                "List[str]"
            ],
            "arguments": {
                "sync_committee_members": [
                    "str",
                    "bool",
                    "Sequence[int]",
                    "Optional",
                    "Callable"
                ]
            }
        },
        "test_compute_subnets_for_sync_committee": {
            "name": "test_compute_subnets_for_sync_committee",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "state": [
                    "bool",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.Callable"
                ],
                "spec": [
                    "bool",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.Callable"
                ]
            }
        },
        "test_compute_subnets_for_sync_committee_slot_period_boundary": {
            "name": "test_compute_subnets_for_sync_committee_slot_period_boundary",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {
                "state": [
                    "bool",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.Callable"
                ],
                "spec": [
                    "bool",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.Callable"
                ]
            }
        },
        "test_get_sync_committee_selection_proof": {
            "name": "test_get_sync_committee_selection_proof",
            "location": 241,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "raiden.utils.Callable",
                    "Optional[Dict[str, Any]]",
                    "raiden.utils.NetworkTimeout",
                    "bool"
                ],
                "state": [
                    "raiden.utils.Callable",
                    "Optional[Dict[str, Any]]",
                    "raiden.utils.NetworkTimeout",
                    "bool"
                ]
            }
        },
        "test_is_sync_committee_aggregator": {
            "name": "test_is_sync_committee_aggregator",
            "location": 265,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "int",
                    "raiden.utils.BlockIdentifier"
                ],
                "state": [
                    "Iterable[str]",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_get_contribution_and_proof": {
            "name": "test_get_contribution_and_proof",
            "location": 283,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "raiden.utils.NetworkTimeout",
                    "raiden.utils.SecreRegistryAddress",
                    "List[raiden.utils.Address]",
                    "tests.pathfinding.utils.SimpleReachabilityContainer"
                ],
                "state": [
                    "float",
                    "raiden.utils.Callable",
                    "Callable"
                ]
            }
        },
        "test_get_contribution_and_proof_signature": {
            "name": "test_get_contribution_and_proof_signature",
            "location": 315,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "float",
                    "Callable",
                    "raiden.utils.Callable",
                    "raiden.utils.TokenAddress"
                ],
                "state": [
                    "raiden.utils.Callable",
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/altair/unittests/validator/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/bellatrix/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/bellatrix/block_processing/test_process_execution_payload.py": {
        "run_execution_payload_processing": {
            "name": "run_execution_payload_processing",
            "location": 11,
            "return": [
                "typing.Generator[tuple[typing.Union[typing.Text,str,bool,list[str]]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,dict[typing.Text, bool]]]]",
                "typing.Generator[tuple[typing.Optional[typing.Text]]]",
                "None"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "state": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ],
                "execution_payload": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ],
                "valid": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "Mapping[str, Any]"
                ],
                "execution_valid": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_success_first_payload": {
            "name": "test_success_first_payload",
            "location": 51,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "set[str]",
                    "int",
                    "raiden.transfer.state.ChainState",
                    "Set[str]"
                ],
                "state": [
                    "bool",
                    "set[str]",
                    "int",
                    "raiden.transfer.state.ChainState",
                    "Set[str]"
                ]
            }
        },
        "test_success_regular_payload": {
            "name": "test_success_regular_payload",
            "location": 64,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "set[str]",
                    "int",
                    "raiden.transfer.state.ChainState",
                    "Set[str]"
                ],
                "state": [
                    "bool",
                    "set[str]",
                    "int",
                    "raiden.transfer.state.ChainState",
                    "Set[str]"
                ]
            }
        },
        "test_success_first_payload_with_gap_slot": {
            "name": "test_success_first_payload_with_gap_slot",
            "location": 77,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "raiden.transfer.state.ChainState"
                ],
                "state": [
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "test_success_regular_payload_with_gap_slot": {
            "name": "test_success_regular_payload_with_gap_slot",
            "location": 91,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "raiden.transfer.state.ChainState"
                ],
                "state": [
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "test_bad_execution_first_payload": {
            "name": "test_bad_execution_first_payload",
            "location": 105,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Callable[[List, bool], None]",
                    "str",
                    "typing.Callable[List,bool, None]",
                    "Set[str]",
                    "set[str]"
                ],
                "state": [
                    "Callable[[List, bool], None]",
                    "str",
                    "typing.Callable[List,bool, None]",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "test_bad_execution_regular_payload": {
            "name": "test_bad_execution_regular_payload",
            "location": 120,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Callable[[List, bool], None]",
                    "str",
                    "typing.Callable[List,bool, None]",
                    "Set[str]",
                    "set[str]"
                ],
                "state": [
                    "Callable[[List, bool], None]",
                    "str",
                    "typing.Callable[List,bool, None]",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "test_bad_parent_hash_regular_payload": {
            "name": "test_bad_parent_hash_regular_payload",
            "location": 135,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "raiden.transfer.state.ChainState",
                    "str"
                ],
                "state": [
                    "str",
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "test_bad_random_first_payload": {
            "name": "test_bad_random_first_payload",
            "location": 149,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "set[str]",
                    "int",
                    "raiden.transfer.state.ChainState",
                    "Set[str]"
                ],
                "state": [
                    "bool",
                    "set[str]",
                    "int",
                    "raiden.transfer.state.ChainState",
                    "Set[str]"
                ]
            }
        },
        "test_bad_random_regular_payload": {
            "name": "test_bad_random_regular_payload",
            "location": 163,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "set[str]",
                    "int",
                    "raiden.transfer.state.ChainState",
                    "Set[str]"
                ],
                "state": [
                    "bool",
                    "set[str]",
                    "int",
                    "raiden.transfer.state.ChainState",
                    "Set[str]"
                ]
            }
        },
        "test_bad_everything_regular_payload": {
            "name": "test_bad_everything_regular_payload",
            "location": 177,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "raiden.transfer.state.ChainState",
                    "bool"
                ],
                "state": [
                    "bool",
                    "set[str]",
                    "int",
                    "raiden.transfer.state.ChainState",
                    "Set[str]"
                ]
            }
        },
        "test_bad_timestamp_first_payload": {
            "name": "test_bad_timestamp_first_payload",
            "location": 193,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "set[str]",
                    "int",
                    "raiden.transfer.state.ChainState",
                    "Set[str]"
                ],
                "state": [
                    "bool",
                    "set[str]",
                    "int",
                    "raiden.transfer.state.ChainState",
                    "Set[str]"
                ]
            }
        },
        "test_bad_timestamp_regular_payload": {
            "name": "test_bad_timestamp_regular_payload",
            "location": 207,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "set[str]",
                    "int",
                    "raiden.transfer.state.ChainState",
                    "Set[str]"
                ],
                "state": [
                    "bool",
                    "set[str]",
                    "int",
                    "raiden.transfer.state.ChainState",
                    "Set[str]"
                ]
            }
        },
        "test_non_empty_extra_data_first_payload": {
            "name": "test_non_empty_extra_data_first_payload",
            "location": 221,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str"
                ],
                "state": [
                    "str"
                ]
            }
        },
        "test_non_empty_extra_data_regular_payload": {
            "name": "test_non_empty_extra_data_regular_payload",
            "location": 237,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str"
                ],
                "state": [
                    "str"
                ]
            }
        },
        "run_execution_payload_processing.TestEngine.notify_new_payload": {
            "name": "notify_new_payload",
            "location": 28,
            "return": [
                "Dict[str, Any]",
                "int",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "str",
                    "Iterable[T]",
                    "Callable[[T], bool]"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/bellatrix/block_processing/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/bellatrix/fork/test_bellatrix_fork_basic.py": {
        "test_fork_base_state": {
            "name": "test_fork_base_state",
            "location": 27,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "List[str]",
                    "list[str]"
                ],
                "phases": [
                    "List[int]",
                    "int",
                    "list[int]",
                    "Union[str, float]",
                    "str",
                    "bool",
                    "float"
                ],
                "state": [
                    "List[int]",
                    "int",
                    "list[int]",
                    "Union[str, float]",
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "test_fork_next_epoch": {
            "name": "test_fork_next_epoch",
            "location": 35,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "typing.Callable[, ]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.Callable",
                    "Callable",
                    "raiden.utils.TokenNetworkAddress"
                ],
                "phases": [
                    "List[int]",
                    "bool",
                    "list[int]",
                    "str"
                ],
                "state": [
                    "float",
                    "int",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenNetworkRegistryAddress"
                ]
            }
        },
        "test_fork_next_epoch_with_block": {
            "name": "test_fork_next_epoch_with_block",
            "location": 44,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "typing.Callable[, ]",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "phases": [
                    "List[int]",
                    "bool",
                    "list[int]",
                    "str"
                ],
                "state": [
                    "float",
                    "raiden.utils.Address",
                    "typing.Callable[, ]",
                    "Callable"
                ]
            }
        },
        "test_fork_many_next_epoch": {
            "name": "test_fork_many_next_epoch",
            "location": 53,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "typing.Callable[, ]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.Callable",
                    "Callable",
                    "raiden.utils.TokenNetworkAddress"
                ],
                "phases": [
                    "List[int]",
                    "bool",
                    "list[int]",
                    "str"
                ],
                "state": [
                    "float",
                    "int",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenNetworkRegistryAddress"
                ]
            }
        },
        "test_fork_random_low_balances": {
            "name": "test_fork_random_low_balances",
            "location": 63,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "list[str]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "str",
                    "bool",
                    "List[str]",
                    "list[list[int]]",
                    "List[List[int]]"
                ],
                "phases": [
                    "list[int]",
                    "bool",
                    "List[int]",
                    "str",
                    "int"
                ],
                "state": [
                    "list[int]",
                    "bool",
                    "List[int]",
                    "str",
                    "int"
                ]
            }
        },
        "test_fork_random_misc_balances": {
            "name": "test_fork_random_misc_balances",
            "location": 71,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "list[str]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "str",
                    "bool",
                    "List[str]",
                    "list[list[int]]",
                    "List[List[int]]"
                ],
                "phases": [
                    "list[int]",
                    "bool",
                    "List[int]",
                    "str",
                    "int"
                ],
                "state": [
                    "list[int]",
                    "bool",
                    "List[int]",
                    "str",
                    "int"
                ]
            }
        },
        "test_fork_random_large_validator_set": {
            "name": "test_fork_random_large_validator_set",
            "location": 81,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "list[str]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "str",
                    "list[list[int]]",
                    "bool",
                    "List[str]",
                    "List[List[int]]"
                ],
                "phases": [
                    "list[int]",
                    "bool",
                    "List[int]",
                    "str",
                    "int"
                ],
                "state": [
                    "list[int]",
                    "bool",
                    "List[int]",
                    "str",
                    "int"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/bellatrix/fork/test_bellatrix_fork_random.py": {
        "test_bellatrix_fork_random_0": {
            "name": "test_bellatrix_fork_random_0",
            "location": 26,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "Optional[bool]",
                    "None"
                ],
                "phases": [
                    "List[int]",
                    "bool",
                    "list[int]",
                    "str"
                ],
                "state": [
                    "int",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "test_bellatrix_fork_random_1": {
            "name": "test_bellatrix_fork_random_1",
            "location": 35,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "Optional[bool]",
                    "None"
                ],
                "phases": [
                    "List[int]",
                    "bool",
                    "list[int]",
                    "str"
                ],
                "state": [
                    "int",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "test_bellatrix_fork_random_2": {
            "name": "test_bellatrix_fork_random_2",
            "location": 44,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "Optional[bool]",
                    "None"
                ],
                "phases": [
                    "List[int]",
                    "bool",
                    "list[int]",
                    "str"
                ],
                "state": [
                    "int",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "test_bellatrix_fork_random_3": {
            "name": "test_bellatrix_fork_random_3",
            "location": 53,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "Optional[bool]",
                    "None"
                ],
                "phases": [
                    "List[int]",
                    "bool",
                    "list[int]",
                    "str"
                ],
                "state": [
                    "int",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "test_bellatrix_fork_random_low_balances": {
            "name": "test_bellatrix_fork_random_low_balances",
            "location": 62,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "Optional[bool]",
                    "None"
                ],
                "phases": [
                    "list[int]",
                    "bool",
                    "List[int]",
                    "str",
                    "int"
                ],
                "state": [
                    "int",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "test_bellatrix_fork_random_misc_balances": {
            "name": "test_bellatrix_fork_random_misc_balances",
            "location": 71,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "Optional[bool]",
                    "None"
                ],
                "phases": [
                    "list[int]",
                    "bool",
                    "List[int]",
                    "str",
                    "int"
                ],
                "state": [
                    "int",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "test_bellatrix_fork_random_large_validator_set": {
            "name": "test_bellatrix_fork_random_large_validator_set",
            "location": 82,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "Optional[bool]",
                    "None",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "phases": [
                    "list[int]",
                    "bool",
                    "List[int]",
                    "str",
                    "int"
                ],
                "state": [
                    "int",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/bellatrix/fork/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/bellatrix/fork_choice/test_on_merge_block.py": {
        "with_pow_block_patch": {
            "name": "with_pow_block_patch",
            "location": 26,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "int",
                    "dict",
                    "dict[, ]"
                ],
                "blocks": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]"
                ],
                "func": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_all_valid": {
            "name": "test_all_valid",
            "location": 52,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,str,bool,None]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,str,int,list[list[bytes]],dict[str, str]]]]",
                "typing.Generator[]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "str",
                    "raiden.utils.TokenNetworkAddress"
                ],
                "state": [
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_block_lookup_failed": {
            "name": "test_block_lookup_failed",
            "location": 86,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,str,bool,None]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,str,int,list[list[bytes]],dict[str, str]]]]",
                "typing.Generator[]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "state": [
                    "list",
                    "str",
                    "list[]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_too_early_for_merge": {
            "name": "test_too_early_for_merge",
            "location": 116,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,str,bool,None]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,str,int,list[list[bytes]],dict[str, str]]]]",
                "typing.Generator[]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "state": [
                    "str",
                    "bool",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ]
            }
        },
        "test_too_late_for_merge": {
            "name": "test_too_late_for_merge",
            "location": 148,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,str,bool,None]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,str,int,list[list[bytes]],dict[str, str]]]]",
                "typing.Generator[]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "state": [
                    "str",
                    "bool",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ]
            }
        },
        "with_pow_block_patch.get_pow_block": {
            "name": "get_pow_block",
            "location": 27,
            "return": [
                "type",
                "str",
                "Iterable[int]",
                "BaseException"
            ],
            "arguments": {
                "hash": [
                    "str",
                    "int"
                ]
            }
        },
        "with_pow_block_patch.wrap": {
            "name": "wrap",
            "location": 39,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "flag": [
                    "T",
                    "fakesmtpd.state.State"
                ]
            }
        },
        "test_all_valid.run_func": {
            "name": "run_func",
            "location": 72,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "test_block_lookup_failed.run_func": {
            "name": "run_func",
            "location": 103,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "test_too_early_for_merge.run_func": {
            "name": "run_func",
            "location": 136,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "test_too_late_for_merge.run_func": {
            "name": "run_func",
            "location": 168,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/bellatrix/fork_choice/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/bellatrix/genesis/test_initialization.py": {
        "eth1_init_data": {
            "name": "eth1_init_data",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "eth1_block_hash": [
                    "int",
                    "Optional[float]",
                    "bool"
                ],
                "eth1_timestamp": [
                    "int",
                    "Optional[float]",
                    "bool"
                ]
            }
        },
        "test_initialize_pre_transition_no_param": {
            "name": "test_initialize_pre_transition_no_param",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_initialize_pre_transition_empty_payload": {
            "name": "test_initialize_pre_transition_empty_payload",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_initialize_post_transition": {
            "name": "test_initialize_post_transition",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/bellatrix/genesis/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/bellatrix/random/test_random.py": {
        "test_randomized_0": {
            "name": "test_randomized_0",
            "location": 34,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "test_randomized_1": {
            "name": "test_randomized_1",
            "location": 60,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "test_randomized_2": {
            "name": "test_randomized_2",
            "location": 86,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "test_randomized_3": {
            "name": "test_randomized_3",
            "location": 112,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "test_randomized_4": {
            "name": "test_randomized_4",
            "location": 138,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "test_randomized_5": {
            "name": "test_randomized_5",
            "location": 164,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "test_randomized_6": {
            "name": "test_randomized_6",
            "location": 190,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "test_randomized_7": {
            "name": "test_randomized_7",
            "location": 216,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "test_randomized_8": {
            "name": "test_randomized_8",
            "location": 242,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "test_randomized_9": {
            "name": "test_randomized_9",
            "location": 268,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "test_randomized_10": {
            "name": "test_randomized_10",
            "location": 294,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "test_randomized_11": {
            "name": "test_randomized_11",
            "location": 320,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "test_randomized_12": {
            "name": "test_randomized_12",
            "location": 346,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "test_randomized_13": {
            "name": "test_randomized_13",
            "location": 372,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "test_randomized_14": {
            "name": "test_randomized_14",
            "location": 398,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "test_randomized_15": {
            "name": "test_randomized_15",
            "location": 424,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/bellatrix/random/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/bellatrix/sanity/test_blocks.py": {
        "test_empty_block_transition_no_tx": {
            "name": "test_empty_block_transition_no_tx",
            "location": 14,
            "return": [
                "",
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_is_execution_enabled_false": {
            "name": "test_is_execution_enabled_false",
            "location": 30,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,dict[, ],dict[str, typing.Any]]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "state": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/bellatrix/sanity/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/bellatrix/transition/test_transition.py": {
        "test_sample_transition": {
            "name": "test_sample_transition",
            "location": 18,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,str,typing.Callable[, ]]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,int,str]]]"
            ],
            "arguments": {
                "state": [
                    "str",
                    "typing.Callable[, ]",
                    "raiden.constants.EthClient",
                    "Callable"
                ],
                "fork_epoch": [
                    "str",
                    "typing.Callable[, ]",
                    "raiden.constants.EthClient",
                    "Callable"
                ],
                "spec": [
                    "str",
                    "typing.Callable[, ]",
                    "raiden.constants.EthClient",
                    "Callable"
                ],
                "post_spec": [
                    "Callable[..., None]",
                    "typing.Callable[..., None]"
                ],
                "pre_tag": [
                    "typing.Sequence[str]",
                    "T",
                    "str",
                    "bool",
                    "Sequence[str]",
                    "typing.Mapping",
                    "Mapping[str, T]"
                ],
                "post_tag": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/bellatrix/transition/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/bellatrix/unittests/test_is_valid_terminal_pow_block.py": {
        "test_is_valid_terminal_pow_block_success_valid": {
            "name": "test_is_valid_terminal_pow_block_success_valid",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "state": [
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_is_valid_terminal_pow_block_fail_before_terminal": {
            "name": "test_is_valid_terminal_pow_block_fail_before_terminal",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "state": [
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_is_valid_terminal_pow_block_fail_just_after_terminal": {
            "name": "test_is_valid_terminal_pow_block_fail_just_after_terminal",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "state": [
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/bellatrix/unittests/test_transition.py": {
        "test_fail_merge_complete": {
            "name": "test_fail_merge_complete",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "bool"
                ],
                "state": [
                    "int",
                    "bool"
                ]
            }
        },
        "test_success_merge_complete": {
            "name": "test_success_merge_complete",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "bool"
                ],
                "state": [
                    "int",
                    "bool"
                ]
            }
        },
        "test_is_merge_block_and_is_execution_enabled": {
            "name": "test_is_merge_block_and_is_execution_enabled",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "bool"
                ],
                "state": [
                    "bool"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/bellatrix/unittests/test_validate_merge_block.py": {
        "run_validate_merge_block": {
            "name": "run_validate_merge_block",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "bool"
                ],
                "pow_chain": [
                    "bool",
                    "Optional[dict]",
                    "dict[, ]",
                    "Sequence[int]",
                    "None",
                    "typing.Sequence[int]"
                ],
                "beacon_block": [
                    "bool",
                    "helpers.TraceContext",
                    "str",
                    "float",
                    "Optional[float]",
                    "None"
                ],
                "valid": [
                    "bool",
                    "Optional[dict]",
                    "Sequence[int]"
                ]
            }
        },
        "test_validate_merge_block_success": {
            "name": "test_validate_merge_block_success",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ],
                "state": [
                    "typing.Type",
                    "type",
                    "raiden.utils.TokenAmount",
                    "Type[Any]"
                ]
            }
        },
        "test_validate_merge_block_fail_block_lookup": {
            "name": "test_validate_merge_block_fail_block_lookup",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ],
                "state": [
                    "typing.Type",
                    "raiden.utils.TokenAmount",
                    "type",
                    "Type[Any]"
                ]
            }
        },
        "test_validate_merge_block_fail_parent_block_lookup": {
            "name": "test_validate_merge_block_fail_parent_block_lookup",
            "location": 75,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ],
                "state": [
                    "typing.Type",
                    "raiden.utils.TokenAmount",
                    "type",
                    "Type[Any]"
                ]
            }
        },
        "test_validate_merge_block_fail_after_terminal": {
            "name": "test_validate_merge_block_fail_after_terminal",
            "location": 85,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ],
                "state": [
                    "typing.Type",
                    "type",
                    "raiden.utils.TokenAmount",
                    "Type[Any]"
                ]
            }
        },
        "test_validate_merge_block_tbh_override_success": {
            "name": "test_validate_merge_block_tbh_override_success",
            "location": 99,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ],
                "state": [
                    "typing.Type",
                    "type",
                    "raiden.utils.TokenAmount",
                    "Type[Any]"
                ]
            }
        },
        "test_validate_merge_block_fail_parent_hash_is_not_tbh": {
            "name": "test_validate_merge_block_fail_parent_hash_is_not_tbh",
            "location": 115,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ],
                "state": [
                    "typing.Type",
                    "type",
                    "raiden.utils.TokenAmount"
                ]
            }
        },
        "test_validate_merge_block_terminal_block_hash_fail_activation_not_reached": {
            "name": "test_validate_merge_block_terminal_block_hash_fail_activation_not_reached",
            "location": 130,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ],
                "state": [
                    "typing.Type",
                    "raiden.utils.TokenAmount",
                    "type",
                    "Type[Any]"
                ]
            }
        },
        "test_validate_merge_block_fail_activation_not_reached_parent_hash_is_not_tbh": {
            "name": "test_validate_merge_block_fail_activation_not_reached_parent_hash_is_not_tbh",
            "location": 146,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "raiden.utils.TokenNetworkAddress"
                ],
                "state": [
                    "int"
                ]
            }
        },
        "run_validate_merge_block.get_pow_block": {
            "name": "get_pow_block",
            "location": 26,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[Dict]",
                "Optional[float]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "hash": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/bellatrix/unittests/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/bellatrix/unittests/validator/test_validator.py": {
        "test_get_pow_block_at_terminal_total_difficulty": {
            "name": "test_get_pow_block_at_terminal_total_difficulty",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "float"
                ],
                "state": [
                    "List[str]",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "test_prepare_execution_payload": {
            "name": "test_prepare_execution_payload",
            "location": 95,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_prepare_execution_payload.TestEngine.notify_forkchoice_updated": {
            "name": "notify_forkchoice_updated",
            "location": 151,
            "return": [
                "bytes",
                "str",
                "list",
                "int"
            ],
            "arguments": {
                "self": [],
                "head_block_hash": [
                    "bool",
                    "str",
                    "TextIO",
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[Callable[[], None]]"
                ],
                "safe_block_hash": [
                    "bool",
                    "str",
                    "TextIO",
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[Callable[[], None]]"
                ],
                "finalized_block_hash": [
                    "bool",
                    "str",
                    "TextIO",
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[Callable[[], None]]"
                ],
                "payload_attributes": [
                    "bool",
                    "str",
                    "TextIO",
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[Callable[[], None]]"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/capella/block_processing/test_process_bls_to_execution_change.py": {
        "run_bls_to_execution_change_processing": {
            "name": "run_bls_to_execution_change_processing",
            "location": 7,
            "return": [
                "typing.Generator[tuple[typing.Text]]",
                "int",
                "typing.Generator[tuple[typing.Optional[typing.Text]]]",
                "Dict[str, Any]",
                "None",
                "List[Dict[str, str]]",
                "dict"
            ],
            "arguments": {
                "spec": [],
                "state": [],
                "signed_address_change": [],
                "valid": [
                    "bool",
                    "str",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.List[raiden.utils.TokenAddress]",
                    "List[str]"
                ]
            }
        },
        "get_signed_address_change": {
            "name": "get_signed_address_change",
            "location": 40,
            "return": [
                "Optional[str]",
                "int",
                "List[Callable]"
            ],
            "arguments": {
                "spec": [
                    "raiden.utils.TokenAddress",
                    "Callable",
                    "raiden.utils.TargetAddress",
                    "raiden.utils.TokenNetworkRegistryAddress"
                ],
                "state": [
                    "list[int]",
                    "raiden.utils.Address",
                    "List[int]"
                ],
                "validator_index": [
                    "bool",
                    "None",
                    "Union[str, Callable[[], str]]",
                    "Union[int, float, None]",
                    "str",
                    "raiden.utils.TokenAddress",
                    "typing.Callable[[], str]",
                    "Sequence[str]",
                    "float",
                    "typing.Sequence[str]"
                ],
                "withdrawal_pubkey": [
                    "Union[int, float, None]",
                    "None",
                    "Sequence[str]",
                    "int",
                    "raiden.utils.TokenAddress",
                    "float",
                    "Union[str, Callable[[], str]]",
                    "typing.Sequence[str]",
                    "bool",
                    "str",
                    "Iterable[Callable]",
                    "typing.Callable[[], str]",
                    "typing.Iterable[typing.Callable[, ]]"
                ]
            }
        },
        "test_success": {
            "name": "test_success",
            "location": 67,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "list[raiden.utils.Address]",
                    "raiden.utils.SecreRegistryAddress",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.PaymentNetworkID",
                    "raiden.utils.TokenNetworkAddress",
                    "List[raiden.utils.Address]"
                ],
                "state": [
                    "float",
                    "list[raiden.utils.Address]",
                    "raiden.utils.SecreRegistryAddress",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.PaymentNetworkID",
                    "raiden.utils.TokenNetworkAddress",
                    "List[raiden.utils.Address]"
                ]
            }
        },
        "test_success_not_activated": {
            "name": "test_success_not_activated",
            "location": 74,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float"
                ],
                "state": [
                    "float",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_success_in_activation_queue": {
            "name": "test_success_in_activation_queue",
            "location": 90,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "raiden.utils.Callable",
                    "raiden.utils.NetworkTimeout",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.PaymentNetworkID"
                ],
                "state": [
                    "float",
                    "str"
                ]
            }
        },
        "test_success_in_exit_queue": {
            "name": "test_success_in_exit_queue",
            "location": 106,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float"
                ],
                "state": [
                    "float"
                ]
            }
        },
        "test_success_exited": {
            "name": "test_success_exited",
            "location": 119,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "raiden.utils.NetworkTimeout",
                    "raiden.utils.Callable",
                    "Callable"
                ],
                "state": [
                    "float",
                    "str"
                ]
            }
        },
        "test_success_withdrawable": {
            "name": "test_success_withdrawable",
            "location": 134,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Optional[Dict[str, Any]]",
                    "raiden.utils.NetworkTimeout",
                    "raiden.utils.Callable",
                    "int"
                ],
                "state": [
                    "float",
                    "str"
                ]
            }
        },
        "test_fail_val_index_out_of_range": {
            "name": "test_fail_val_index_out_of_range",
            "location": 150,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "int"
                ],
                "state": [
                    "int"
                ]
            }
        },
        "test_fail_already_0x01": {
            "name": "test_fail_already_0x01",
            "location": 159,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "typing.Callable[, ]",
                    "raiden.utils.NetworkTimeout",
                    "Callable"
                ],
                "state": [
                    "List[int]",
                    "list[int]",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "test_fail_incorrect_from_bls_pubkey": {
            "name": "test_fail_incorrect_from_bls_pubkey",
            "location": 171,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "typing.Callable[, ]",
                    "Callable",
                    "raiden.utils.NetworkTimeout"
                ],
                "state": [
                    "float",
                    "typing.Callable[, ]",
                    "Callable",
                    "raiden.utils.NetworkTimeout"
                ]
            }
        },
        "test_fail_bad_signature": {
            "name": "test_fail_bad_signature",
            "location": 186,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "Callable",
                    "raiden.utils.NetworkTimeout",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.PaymentNetworkID"
                ],
                "state": [
                    "float",
                    "typing.Callable[, ]",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.PaymentNetworkID",
                    "Callable",
                    "raiden.utils.NetworkTimeout"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/capella/block_processing/test_process_withdrawals.py": {
        "prepare_withdrawals_queue": {
            "name": "prepare_withdrawals_queue",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "bytes",
                    "str",
                    "list",
                    "list[]"
                ],
                "state": [
                    "int",
                    "list",
                    "list[]",
                    "Sequence[T]",
                    "typing.Sequence[T]"
                ],
                "num_withdrawals": [
                    "int",
                    "list[]",
                    "list",
                    "list[int]",
                    "Sequence",
                    "typing.Sequence[T]",
                    "List[int]",
                    "Sequence[T]"
                ]
            }
        },
        "run_withdrawals_processing": {
            "name": "run_withdrawals_processing",
            "location": 24,
            "return": [
                "Awaitable",
                "typing.Generator[tuple[typing.Union[typing.Text,str,bool,None]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,str,None]]]",
                "typing.Generator[tuple[typing.Optional[typing.Text]]]",
                "None"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "state": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "execution_payload": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "valid": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "test_success_empty_queue": {
            "name": "test_success_empty_queue",
            "location": 58,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str"
                ],
                "state": [
                    "float"
                ]
            }
        },
        "test_success_one_in_queue": {
            "name": "test_success_one_in_queue",
            "location": 69,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_success_max_per_slot_in_queue": {
            "name": "test_success_max_per_slot_in_queue",
            "location": 80,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_success_a_lot_in_queue": {
            "name": "test_success_a_lot_in_queue",
            "location": 91,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_fail_empty_queue_non_empty_withdrawals": {
            "name": "test_fail_empty_queue_non_empty_withdrawals",
            "location": 106,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "Callable"
                ],
                "state": [
                    "float"
                ]
            }
        },
        "test_fail_one_in_queue_none_in_withdrawals": {
            "name": "test_fail_one_in_queue_none_in_withdrawals",
            "location": 123,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_fail_one_in_queue_two_in_withdrawals": {
            "name": "test_fail_one_in_queue_two_in_withdrawals",
            "location": 135,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_fail_max_per_slot_in_queue_one_less_in_withdrawals": {
            "name": "test_fail_max_per_slot_in_queue_one_less_in_withdrawals",
            "location": 147,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_fail_a_lot_in_queue_too_few_in_withdrawals": {
            "name": "test_fail_a_lot_in_queue_too_few_in_withdrawals",
            "location": 159,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_fail_incorrect_dequeue_index": {
            "name": "test_fail_incorrect_dequeue_index",
            "location": 175,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_fail_incorrect_dequeue_address": {
            "name": "test_fail_incorrect_dequeue_address",
            "location": 187,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_fail_incorrect_dequeue_amount": {
            "name": "test_fail_incorrect_dequeue_amount",
            "location": 199,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_fail_one_of_many_dequeued_incorrectly": {
            "name": "test_fail_one_of_many_dequeued_incorrectly",
            "location": 211,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_fail_many_dequeued_incorrectly": {
            "name": "test_fail_many_dequeued_incorrectly",
            "location": 229,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/capella/epoch_processing/test_process_full_withdrawals.py": {
        "set_validator_withdrawable": {
            "name": "set_validator_withdrawable",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "Callable"
                ],
                "state": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "index": [
                    "dict",
                    "dict[, ]"
                ],
                "withdrawable_epoch": [
                    "Sequence[str]",
                    "None",
                    "typing.Sequence[str]"
                ]
            }
        },
        "run_process_full_withdrawals": {
            "name": "run_process_full_withdrawals",
            "location": 19,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "dict",
                    "List[int]"
                ],
                "state": [
                    "int"
                ],
                "num_expected_withdrawals": [
                    "bool",
                    "None",
                    "int",
                    "List[int]",
                    "list[int]",
                    "Union[int, str]",
                    "str"
                ]
            }
        },
        "test_no_withdrawals": {
            "name": "test_no_withdrawals",
            "location": 43,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "Tuple[str, dict]",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "float"
                ]
            }
        },
        "test_no_withdrawals_but_some_next_epoch": {
            "name": "test_no_withdrawals_but_some_next_epoch",
            "location": 52,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "state": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "test_single_withdrawal": {
            "name": "test_single_withdrawal",
            "location": 64,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "float",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "str"
                ]
            }
        },
        "test_multi_withdrawal": {
            "name": "test_multi_withdrawal",
            "location": 76,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Tuple[str, dict]",
                    "tuple[typing.Union[str,dict[, ]]]"
                ],
                "state": [
                    "Tuple[str, dict]",
                    "tuple[typing.Union[str,dict[, ]]]"
                ]
            }
        },
        "test_all_withdrawal": {
            "name": "test_all_withdrawal",
            "location": 86,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "state": [
                    "List[int]",
                    "str",
                    "list[int]",
                    "List[Tuple[int, int]]",
                    "list[tuple[typing.Union[int,int]]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/capella/fork/test_capella_fork_basic.py": {
        "test_fork_base_state": {
            "name": "test_fork_base_state",
            "location": 27,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "List[str]",
                    "list[str]"
                ],
                "phases": [
                    "List[int]",
                    "int",
                    "list[int]",
                    "Union[str, float]",
                    "str",
                    "bool",
                    "float"
                ],
                "state": [
                    "List[int]",
                    "int",
                    "list[int]",
                    "Union[str, float]",
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "test_fork_next_epoch": {
            "name": "test_fork_next_epoch",
            "location": 35,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "typing.Callable[, ]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.Callable",
                    "Callable",
                    "raiden.utils.TokenNetworkAddress"
                ],
                "phases": [
                    "List[int]",
                    "bool",
                    "list[int]",
                    "str"
                ],
                "state": [
                    "float",
                    "int",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenNetworkRegistryAddress"
                ]
            }
        },
        "test_fork_next_epoch_with_block": {
            "name": "test_fork_next_epoch_with_block",
            "location": 44,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "typing.Callable[, ]",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "phases": [
                    "List[int]",
                    "bool",
                    "list[int]",
                    "str"
                ],
                "state": [
                    "float",
                    "raiden.utils.Address",
                    "typing.Callable[, ]",
                    "Callable"
                ]
            }
        },
        "test_fork_many_next_epoch": {
            "name": "test_fork_many_next_epoch",
            "location": 53,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "typing.Callable[, ]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.Callable",
                    "Callable",
                    "raiden.utils.TokenNetworkAddress"
                ],
                "phases": [
                    "List[int]",
                    "bool",
                    "list[int]",
                    "str"
                ],
                "state": [
                    "float",
                    "int",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenNetworkRegistryAddress"
                ]
            }
        },
        "test_fork_random_low_balances": {
            "name": "test_fork_random_low_balances",
            "location": 63,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "list[str]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "str",
                    "bool",
                    "List[str]",
                    "list[list[int]]",
                    "List[List[int]]"
                ],
                "phases": [
                    "list[int]",
                    "bool",
                    "List[int]",
                    "str",
                    "int"
                ],
                "state": [
                    "list[int]",
                    "bool",
                    "List[int]",
                    "str",
                    "int"
                ]
            }
        },
        "test_fork_random_misc_balances": {
            "name": "test_fork_random_misc_balances",
            "location": 71,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "list[str]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "str",
                    "bool",
                    "List[str]",
                    "list[list[int]]",
                    "List[List[int]]"
                ],
                "phases": [
                    "list[int]",
                    "bool",
                    "List[int]",
                    "str",
                    "int"
                ],
                "state": [
                    "list[int]",
                    "bool",
                    "List[int]",
                    "str",
                    "int"
                ]
            }
        },
        "test_fork_random_large_validator_set": {
            "name": "test_fork_random_large_validator_set",
            "location": 81,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "list[str]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "str",
                    "list[list[int]]",
                    "bool",
                    "List[str]",
                    "List[List[int]]"
                ],
                "phases": [
                    "list[int]",
                    "bool",
                    "List[int]",
                    "str",
                    "int"
                ],
                "state": [
                    "list[int]",
                    "bool",
                    "List[int]",
                    "str",
                    "int"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/capella/fork/test_capella_fork_random.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/custody_game/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/custody_game/block_processing/test_process_attestation.py": {
        "test_on_time_success": {
            "name": "test_on_time_success",
            "location": 17,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float"
                ],
                "state": [
                    "float"
                ]
            }
        },
        "test_late_success": {
            "name": "test_late_success",
            "location": 28,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float"
                ],
                "state": [
                    "float"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/custody_game/block_processing/test_process_chunk_challenge.py": {
        "run_chunk_challenge_processing": {
            "name": "run_chunk_challenge_processing",
            "location": 24,
            "return": [
                "Awaitable",
                "typing.Generator[tuple[typing.Union[typing.Text,bool,float,str,list[typing.Callable[, ]],None]]]",
                "typing.Generator[tuple[typing.Optional[typing.Text]]]",
                "None"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "float",
                    "str",
                    "List[Callable]",
                    "Optional[str]"
                ],
                "state": [
                    "bool",
                    "float",
                    "str",
                    "List[Callable]",
                    "list[typing.Callable[, ]]",
                    "Optional[str]",
                    "None"
                ],
                "custody_chunk_challenge": [
                    "bool",
                    "float",
                    "str",
                    "List[Callable]",
                    "list[typing.Callable[, ]]",
                    "Optional[str]",
                    "None"
                ],
                "valid": [
                    "bool",
                    "int",
                    "List[Callable]"
                ]
            }
        },
        "run_custody_chunk_response_processing": {
            "name": "run_custody_chunk_response_processing",
            "location": 50,
            "return": [
                "typing.Generator[tuple[typing.Union[typing.Text,str,dict[, ]]]]",
                "str",
                "typing.Generator[tuple[typing.Optional[typing.Text]]]",
                "Iterable[Mapping[str, Any]]",
                "None",
                "Optional[bool]",
                "Iterator[Any]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "dict"
                ],
                "state": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "custody_response": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "valid": [
                    "bool",
                    "Sequence[str]",
                    "prefecengine.state.State"
                ]
            }
        },
        "test_challenge_appended": {
            "name": "test_challenge_appended",
            "location": 77,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "aiozipkin.helpers.TraceContext"
                ],
                "state": [
                    "aiozipkin.helpers.TraceContext"
                ]
            }
        },
        "test_challenge_empty_element_replaced": {
            "name": "test_challenge_empty_element_replaced",
            "location": 101,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "aiozipkin.helpers.TraceContext"
                ],
                "state": [
                    "aiozipkin.helpers.TraceContext"
                ]
            }
        },
        "test_duplicate_challenge": {
            "name": "test_duplicate_challenge",
            "location": 127,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "aiozipkin.helpers.TraceContext"
                ],
                "state": [
                    "aiozipkin.helpers.TraceContext"
                ]
            }
        },
        "test_second_challenge": {
            "name": "test_second_challenge",
            "location": 153,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "aiozipkin.helpers.TraceContext"
                ],
                "state": [
                    "aiozipkin.helpers.TraceContext"
                ]
            }
        },
        "test_multiple_epochs_custody": {
            "name": "test_multiple_epochs_custody",
            "location": 181,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float"
                ],
                "state": [
                    "float"
                ]
            }
        },
        "test_many_epochs_custody": {
            "name": "test_many_epochs_custody",
            "location": 206,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float"
                ],
                "state": [
                    "float"
                ]
            }
        },
        "test_off_chain_attestation": {
            "name": "test_off_chain_attestation",
            "location": 231,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float"
                ],
                "state": [
                    "float"
                ]
            }
        },
        "test_custody_response": {
            "name": "test_custody_response",
            "location": 252,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "Callable",
                    "bool"
                ],
                "state": [
                    "float",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_custody_response_chunk_index_2": {
            "name": "test_custody_response_chunk_index_2",
            "location": 284,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "float"
                ],
                "state": [
                    "Callable",
                    "float",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_custody_response_multiple_epochs": {
            "name": "test_custody_response_multiple_epochs",
            "location": 315,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "Callable",
                    "bool"
                ],
                "state": [
                    "float",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_custody_response_many_epochs": {
            "name": "test_custody_response_many_epochs",
            "location": 347,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "Callable",
                    "bool"
                ],
                "state": [
                    "float",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/custody_game/block_processing/test_process_custody_key_reveal.py": {
        "run_custody_key_reveal_processing": {
            "name": "run_custody_key_reveal_processing",
            "location": 11,
            "return": [
                "Union[tuple, list]",
                "str",
                "typing.Generator[tuple[typing.Union[typing.Text,str,dict[, ]]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,str,bytes,None]]]",
                "typing.Generator[tuple[typing.Optional[typing.Text]]]",
                "None"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "Union[bytes, str]"
                ],
                "state": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "custody_key_reveal": [
                    "str",
                    "bytes",
                    "Optional[bytes]",
                    "None"
                ],
                "valid": [
                    "bool",
                    "int",
                    "str",
                    "List[bytes]",
                    "Optional[str]"
                ]
            }
        },
        "test_success": {
            "name": "test_success",
            "location": 45,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str"
                ],
                "state": [
                    "str"
                ]
            }
        },
        "test_reveal_too_early": {
            "name": "test_reveal_too_early",
            "location": 55,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bytes",
                    "Union[Dict, List]",
                    "dict[, ]",
                    "str",
                    "Dict[str, Any]",
                    "list[]",
                    "Optional[str]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "state": [
                    "bytes",
                    "Union[Dict, List]",
                    "dict[, ]",
                    "str",
                    "Dict[str, Any]",
                    "list[]",
                    "Optional[str]",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "test_wrong_period": {
            "name": "test_wrong_period",
            "location": 64,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bytes",
                    "int",
                    "dict",
                    "dict[, ]"
                ],
                "state": [
                    "bytes",
                    "int",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_late_reveal": {
            "name": "test_late_reveal",
            "location": 73,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str"
                ],
                "state": [
                    "str"
                ]
            }
        },
        "test_double_reveal": {
            "name": "test_double_reveal",
            "location": 83,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str"
                ],
                "state": [
                    "str"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/custody_game/block_processing/test_process_custody_slashing.py": {
        "run_custody_slashing_processing": {
            "name": "run_custody_slashing_processing",
            "location": 25,
            "return": [
                "Awaitable",
                "typing.Generator[tuple[typing.Union[typing.Text,bool,bytearray]]]",
                "typing.Generator[tuple[typing.Optional[typing.Text]]]",
                "None"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "List[recidiviz.persistence.database.schema.state.schema.StatePerson]",
                    "Optional[str]",
                    "bool",
                    "List[Callable]"
                ],
                "state": [
                    "bool",
                    "bytearray",
                    "int",
                    "raiden.utils.PrivateKey",
                    "raiden.utils.TokenNetworkAddress"
                ],
                "custody_slashing": [
                    "bool",
                    "bytearray",
                    "int",
                    "raiden.utils.PrivateKey",
                    "raiden.utils.TokenNetworkAddress"
                ],
                "valid": [
                    "bool",
                    "Optional[Mapping[str, Any]]",
                    "int",
                    "Sequence[str]",
                    "Sequence[Sequence[str]]",
                    "Sequence[Tuple[str, int]]"
                ],
                "correct": [
                    "bool",
                    "Optional[Mapping[str, Any]]",
                    "int",
                    "Sequence[str]",
                    "Sequence[Sequence[str]]",
                    "Sequence[Tuple[str, int]]"
                ]
            }
        },
        "run_standard_custody_slashing_test": {
            "name": "run_standard_custody_slashing_test",
            "location": 62,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.FeeAmount",
                    "raiden.utils.InitiatorAddress",
                    "raiden.utils.PaymentHashInvoice",
                    "raiden.utils.PaymentAmount",
                    "raiden.utils.PaymentID",
                    "raiden.utils.SecreHash",
                    "raiden.utils.TargetAddress",
                    "raiden.utils.TokenAddress"
                ],
                "state": [
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.FeeAmount",
                    "raiden.utils.InitiatorAddress",
                    "raiden.utils.PaymentHashInvoice",
                    "raiden.utils.PaymentAmount",
                    "raiden.utils.PaymentID",
                    "raiden.utils.SecreHash",
                    "raiden.utils.TargetAddress",
                    "raiden.utils.MonitoringServiceAddress"
                ],
                "shard_lateness": [
                    "None",
                    "Optional[str]",
                    "str",
                    "int",
                    "Optional[\"Outcome\"]",
                    "raiden.utils.SecreHash",
                    "raiden.utils.SecretHash",
                    "raiden.utils.Secret",
                    "Optional[int]"
                ],
                "shard": [
                    "None",
                    "Tuple[str, int]",
                    "tuple[typing.Union[str,int]]",
                    "Optional[List[int]]",
                    "list[int]",
                    "Optional[float]",
                    "float",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "raiden.utils.SecreHash",
                    "Optional[\"Outcome\"]"
                ],
                "validator_index": [
                    "Tuple[str, int]",
                    "None",
                    "Optional[float]",
                    "bool",
                    "tuple[typing.Union[str,int]]",
                    "Optional[List[int]]",
                    "float",
                    "list[int]",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]"
                ],
                "block_lengths": [
                    "raiden.utils.List[raiden.utils.Keccak256]",
                    "None",
                    "List[Set[int]]",
                    "list[set[int]]"
                ],
                "slashing_message_data": [
                    "bool",
                    "None",
                    "float",
                    "raiden.utils.Address",
                    "typing.Iterable[list[typing.Any]]",
                    "Iterable[List[Any]]",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "correct": [
                    "bool",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.FeeAmount",
                    "raiden.utils.InitiatorAddress",
                    "raiden.utils.PaymentHashInvoice",
                    "raiden.utils.PaymentAmount",
                    "raiden.utils.PaymentID",
                    "raiden.utils.SecreHash",
                    "raiden.utils.TargetAddress",
                    "raiden.utils.TokenAddress"
                ],
                "valid": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "Optional[int]",
                    "raiden.utils.PaymentAmount",
                    "raiden.utils.PaymentID",
                    "raiden.utils.PaymentHashInvoice",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.TargetAddress"
                ]
            }
        },
        "test_custody_slashing": {
            "name": "test_custody_slashing",
            "location": 121,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "raiden.utils.TokenNetworkAddress"
                ],
                "state": [
                    "raiden.utils.TokenNetworkAddress"
                ]
            }
        },
        "test_incorrect_custody_slashing": {
            "name": "test_incorrect_custody_slashing",
            "location": 129,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "list[raiden.utils.Address]",
                    "List[raiden.utils.Address]",
                    "tests.pathfinding.utils.SimpleReachabilityContainer"
                ],
                "state": [
                    "list[raiden.utils.Address]",
                    "List[raiden.utils.Address]",
                    "tests.pathfinding.utils.SimpleReachabilityContainer"
                ]
            }
        },
        "test_multiple_epochs_custody": {
            "name": "test_multiple_epochs_custody",
            "location": 137,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "list[raiden.utils.Address]",
                    "List[raiden.utils.Address]",
                    "tests.pathfinding.utils.SimpleReachabilityContainer"
                ],
                "state": [
                    "list[raiden.utils.Address]",
                    "List[raiden.utils.Address]",
                    "tests.pathfinding.utils.SimpleReachabilityContainer"
                ]
            }
        },
        "test_many_epochs_custody": {
            "name": "test_many_epochs_custody",
            "location": 145,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "list[raiden.utils.Address]",
                    "List[raiden.utils.Address]",
                    "tests.pathfinding.utils.SimpleReachabilityContainer"
                ],
                "state": [
                    "list[raiden.utils.Address]",
                    "List[raiden.utils.Address]",
                    "tests.pathfinding.utils.SimpleReachabilityContainer"
                ]
            }
        },
        "test_invalid_custody_slashing": {
            "name": "test_invalid_custody_slashing",
            "location": 153,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "list[raiden.utils.Address]",
                    "List[raiden.utils.Address]",
                    "tests.pathfinding.utils.SimpleReachabilityContainer"
                ],
                "state": [
                    "list[raiden.utils.Address]",
                    "List[raiden.utils.Address]",
                    "tests.pathfinding.utils.SimpleReachabilityContainer"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/custody_game/block_processing/test_process_early_derived_secret_reveal.py": {
        "run_early_derived_secret_reveal_processing": {
            "name": "run_early_derived_secret_reveal_processing",
            "location": 13,
            "return": [
                "typing.Generator[tuple[typing.Union[typing.Text,bytes,str,None,bool]]]",
                "Union[tuple, list]",
                "typing.Generator[tuple[typing.Optional[typing.Text]]]",
                "List[int]",
                "None",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "str",
                    "bytes"
                ],
                "state": [
                    "bytes",
                    "str",
                    "bool",
                    "Optional[bytes]",
                    "None"
                ],
                "randao_key_reveal": [
                    "bytes",
                    "str",
                    "bool",
                    "Optional[bytes]",
                    "None"
                ],
                "valid": [
                    "bool",
                    "str",
                    "List[bytes]"
                ]
            }
        },
        "test_success": {
            "name": "test_success",
            "location": 47,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_reveal_from_current_epoch": {
            "name": "test_reveal_from_current_epoch",
            "location": 56,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_reveal_from_past_epoch": {
            "name": "test_reveal_from_past_epoch",
            "location": 65,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "int"
                ],
                "state": [
                    "int"
                ]
            }
        },
        "test_reveal_with_custody_padding": {
            "name": "test_reveal_with_custody_padding",
            "location": 75,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_reveal_with_custody_padding_minus_one": {
            "name": "test_reveal_with_custody_padding_minus_one",
            "location": 87,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_double_reveal": {
            "name": "test_double_reveal",
            "location": 99,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_revealer_is_slashed": {
            "name": "test_revealer_is_slashed",
            "location": 120,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_far_future_epoch": {
            "name": "test_far_future_epoch",
            "location": 130,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/custody_game/block_processing/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/custody_game/epoch_processing/test_process_challenge_deadlines.py": {
        "run_process_challenge_deadlines": {
            "name": "run_process_challenge_deadlines",
            "location": 26,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "list[list[typing.Any]]",
                    "str",
                    "state.State",
                    "list[list[str]]",
                    "List[List[Any]]",
                    "List[List[str]]",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ],
                "state": [
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "list[list[typing.Any]]",
                    "str",
                    "state.State",
                    "list[list[str]]",
                    "List[List[Any]]",
                    "List[List[str]]",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "test_validator_slashed_after_chunk_challenge": {
            "name": "test_validator_slashed_after_chunk_challenge",
            "location": 33,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "aiozipkin.helpers.TraceContext"
                ],
                "state": [
                    "aiozipkin.helpers.TraceContext"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/custody_game/epoch_processing/test_process_custody_final_updates.py": {
        "run_process_custody_final_updates": {
            "name": "run_process_custody_final_updates",
            "location": 30,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[List[str]]",
                    "list[list[str]]"
                ],
                "state": [
                    "bool",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[List[str]]",
                    "list[list[str]]"
                ]
            }
        },
        "test_validator_withdrawal_delay": {
            "name": "test_validator_withdrawal_delay",
            "location": 36,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float"
                ],
                "state": [
                    "float"
                ]
            }
        },
        "test_validator_withdrawal_reenable_after_custody_reveal": {
            "name": "test_validator_withdrawal_reenable_after_custody_reveal",
            "location": 49,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float"
                ],
                "state": [
                    "float"
                ]
            }
        },
        "test_validator_withdrawal_suspend_after_chunk_challenge": {
            "name": "test_validator_withdrawal_suspend_after_chunk_challenge",
            "location": 74,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "aiozipkin.helpers.TraceContext"
                ],
                "state": [
                    "aiozipkin.helpers.TraceContext"
                ]
            }
        },
        "test_validator_withdrawal_resume_after_chunk_challenge_response": {
            "name": "test_validator_withdrawal_resume_after_chunk_challenge_response",
            "location": 123,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/custody_game/epoch_processing/test_process_reveal_deadlines.py": {
        "run_process_challenge_deadlines": {
            "name": "run_process_challenge_deadlines",
            "location": 20,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "list[list[typing.Any]]",
                    "str",
                    "state.State",
                    "list[list[str]]",
                    "List[List[Any]]",
                    "List[List[str]]",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ],
                "state": [
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "list[list[typing.Any]]",
                    "str",
                    "state.State",
                    "list[list[str]]",
                    "List[List[Any]]",
                    "List[List[str]]",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "test_validator_slashed_after_reveal_deadline": {
            "name": "test_validator_slashed_after_reveal_deadline",
            "location": 27,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Optional[Dict[str, Any]]",
                    "int"
                ],
                "state": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "test_validator_not_slashed_after_reveal": {
            "name": "test_validator_not_slashed_after_reveal",
            "location": 47,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/custody_game/epoch_processing/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/custody_game/sanity/test_blocks.py": {
        "run_beacon_block": {
            "name": "run_beacon_block",
            "location": 32,
            "return": [
                "Iterator[Tuple[str, str]]",
                "typing.Generator[tuple[typing.Union[typing.Text,dict[, ]]]]",
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[tuple[typing.Optional[typing.Text]]]",
                "None"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "state": [
                    "dict[, ]",
                    "dict",
                    "bool"
                ],
                "block": [
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "valid": [
                    "bool",
                    "int",
                    "list"
                ]
            }
        },
        "test_with_shard_transition_with_custody_challenge_and_response": {
            "name": "test_with_shard_transition_with_custody_challenge_and_response",
            "location": 53,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_custody_key_reveal": {
            "name": "test_custody_key_reveal",
            "location": 87,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float"
                ],
                "state": [
                    "float"
                ]
            }
        },
        "test_early_derived_secret_reveal": {
            "name": "test_early_derived_secret_reveal",
            "location": 100,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "state": [
                    "int",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_custody_slashing": {
            "name": "test_custody_slashing",
            "location": 111,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/custody_game/sanity/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/helpers/attestations.py": {
        "run_attestation_processing": {
            "name": "run_attestation_processing",
            "location": 13,
            "return": [
                "Awaitable",
                "typing.Generator[tuple[typing.Union[typing.Text,int,list[list[int]]]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,bool,typing.Callable[, ]]]]",
                "typing.Generator[tuple[typing.Optional[typing.Text]]]",
                "None"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "Callable"
                ],
                "state": [
                    "int",
                    "List[List[int]]",
                    "list[list[int]]"
                ],
                "attestation": [
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "valid": [
                    "bool",
                    "List[Dict[str, Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "build_attestation_data": {
            "name": "build_attestation_data",
            "location": 53,
            "return": [
                "str",
                "Dict[str, List[int]]",
                "dict"
            ],
            "arguments": {
                "spec": [
                    "List[str]",
                    "str",
                    "Sequence[str]"
                ],
                "state": [
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "None",
                    "List[str]",
                    "list[str]",
                    "pyshgp.push.state.PushState",
                    "raiden.tests.fuzz.utils.Scrambling"
                ],
                "slot": [
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState"
                ],
                "index": [
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "Sequence[int]",
                    "typing.Sequence[int]"
                ],
                "shard": [
                    "List[Callable]",
                    "None",
                    "Dict[str, Any]",
                    "list[typing.Callable[, ]]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "get_valid_attestation": {
            "name": "get_valid_attestation",
            "location": 88,
            "return": [
                "List[recidiviz.persistence.entity.state.entities.SentenceType]",
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "spec": [
                    "raiden.utils.TokenAmount",
                    "raiden.utils.Locksroot",
                    "raiden.utils.LockedAmount",
                    "raiden.utils.BlockNumber",
                    "Callable"
                ],
                "state": [
                    "str",
                    "int",
                    "List[recidiviz.persistence.database.schema.state.schema.StatePerson]",
                    "list[recidiviz.persistence.database.schema.state.schema.StatePerson]"
                ],
                "slot": [
                    "None",
                    "str",
                    "raiden.utils.BlockSpecification",
                    "list[str]",
                    "Optional[str]",
                    "List[str]",
                    "Optional[\"Frame\"]",
                    "raiden.utils.Optional[raiden.network.rpc.clienTransactionSent]",
                    "raiden.utils.Optional[raiden.network.proxies.service_registry.ServiceRegistry]",
                    "raiden.utils.SecreHash",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.ChannelID"
                ],
                "index": [
                    "None",
                    "List[str]",
                    "list[str]",
                    "raiden.utils.PaymentID",
                    "str",
                    "Optional[str]",
                    "int",
                    "raiden.utils.Optional[raiden.utils.OneToNAddress]",
                    "Optional[int]"
                ],
                "filter_participant_set": [
                    "None",
                    "float",
                    "raiden.utils.PaymentNetworkID",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.TokenAmount"
                ],
                "signed": [
                    "bool",
                    "raiden.utils.PaymentNetworkID",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.TokenAmount",
                    "float"
                ]
            }
        },
        "sign_aggregate_attestation": {
            "name": "sign_aggregate_attestation",
            "location": 123,
            "return": [
                "list",
                "str",
                "bytes"
            ],
            "arguments": {
                "spec": [
                    "list[list[str]]",
                    "int",
                    "List[List[str]]",
                    "str",
                    "dict[, ]",
                    "dict",
                    "Union[str, bool, None]",
                    "None",
                    "Optional[str]",
                    "list[int]",
                    "List[int]",
                    "typing.Callable[, ]",
                    "Callable"
                ],
                "state": [
                    "list[list[str]]",
                    "int",
                    "List[List[str]]",
                    "str",
                    "dict[, ]",
                    "dict",
                    "Union[str, bool, None]",
                    "None",
                    "Optional[str]",
                    "list[int]",
                    "List[int]",
                    "typing.Callable[, ]",
                    "Callable"
                ],
                "attestation_data": [
                    "list[list[str]]",
                    "int",
                    "List[List[str]]",
                    "str",
                    "dict[, ]",
                    "dict",
                    "Union[str, bool, None]",
                    "None",
                    "Optional[str]",
                    "list[int]",
                    "List[int]",
                    "typing.Callable[, ]",
                    "Callable"
                ],
                "participants": [
                    "list[int]",
                    "str",
                    "List[int]",
                    "dict[str, typing.Any]",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "sign_indexed_attestation": {
            "name": "sign_indexed_attestation",
            "location": 138,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "bytes",
                    "state.State",
                    "dict[, ]",
                    "dict",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ],
                "state": [
                    "bytes",
                    "state.State",
                    "dict[, ]",
                    "dict",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ],
                "indexed_attestation": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "sign_attestation": {
            "name": "sign_attestation",
            "location": 144,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState"
                ],
                "state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState"
                ],
                "attestation": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "get_attestation_signature": {
            "name": "get_attestation_signature",
            "location": 154,
            "return": [
                "Mapping[str, Any]",
                "int",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "Literal"
                ],
                "state": [
                    "int",
                    "raiden.utils.ChannelID",
                    "raiden.utils.Address",
                    "raiden.utils.PaymentNetworkID",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.ABI"
                ],
                "attestation_data": [
                    "int",
                    "Literal"
                ],
                "privkey": [
                    "str",
                    "list",
                    "list[]",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "fill_aggregate_attestation": {
            "name": "fill_aggregate_attestation",
            "location": 160,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "raiden.utils.Address"
                ],
                "state": [
                    "int",
                    "raiden.utils.Address"
                ],
                "attestation": [
                    "int",
                    "list[set[int]]",
                    "raiden.utils.Address",
                    "List[Set[int]]"
                ],
                "signed": [
                    "bool",
                    "List[str]",
                    "List[int]",
                    "Callable",
                    "str"
                ],
                "filter_participant_set": [
                    "None",
                    "raiden.utils.Secret",
                    "tuple[typing.Union[int,int]]",
                    "Tuple[int, int]",
                    "typing.Any",
                    "Optional[Any]",
                    "raiden.utils.SecretHash"
                ]
            }
        },
        "add_attestations_to_state": {
            "name": "add_attestations_to_state",
            "location": 182,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "state.State",
                    "Optional[int]"
                ],
                "state": [
                    "int",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.TargetAddress"
                ],
                "attestations": [
                    "str",
                    "bool",
                    "int"
                ],
                "slot": [
                    "bool",
                    "str",
                    "list[dict[str, typing.Any]]",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "_get_valid_attestation_at_slot": {
            "name": "_get_valid_attestation_at_slot",
            "location": 189,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "state": [
                    "bool",
                    "tuple[typing.Union[str,str,str]]",
                    "bytes",
                    "int",
                    "raiden.utils.BlockNumber",
                    "Tuple[str, str, str]"
                ],
                "spec": [
                    "bool",
                    "int",
                    "raiden.utils.BlockNumber",
                    "Tuple[str, str, str]",
                    "bytes"
                ],
                "slot_to_attest": [
                    "bool",
                    "tuple[typing.Union[str,str,str]]",
                    "bytes",
                    "int",
                    "raiden.utils.BlockNumber",
                    "Tuple[str, str, str]"
                ],
                "participation_fn": [
                    "bool",
                    "None",
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "next_slots_with_attestations": {
            "name": "next_slots_with_attestations",
            "location": 208,
            "return": [
                "tuple[typing.Union[dict[, ],list[]]]",
                "dict",
                "bytes",
                "int",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "spec": [
                    "raiden.transfer.state.ChainState",
                    "prefecengine.state.State",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ],
                "state": [
                    "dict[, ]",
                    "raiden.transfer.state.ChainState",
                    "Optional[dict]",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ],
                "slot_count": [
                    "int"
                ],
                "fill_cur_epoch": [
                    "raiden.transfer.state.ChainState",
                    "prefecengine.state.State",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ],
                "fill_prev_epoch": [
                    "raiden.transfer.state.ChainState",
                    "prefecengine.state.State",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ],
                "participation_fn": [
                    "None",
                    "raiden.transfer.state.ChainState",
                    "prefecengine.state.State",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "next_epoch_with_attestations": {
            "name": "next_epoch_with_attestations",
            "location": 232,
            "return": [
                "str",
                "dict",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "spec": [
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "raiden.utils.SecretHash"
                ],
                "state": [
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "raiden.utils.SecretHash"
                ],
                "fill_cur_epoch": [
                    "bool",
                    "raiden.utils.TokenAddress",
                    "list[list[typing.Any]]",
                    "list[list[str]]",
                    "raiden.utils.TargetAddress",
                    "List[List[Any]]",
                    "List[List[str]]"
                ],
                "fill_prev_epoch": [
                    "bool",
                    "raiden.utils.TokenAddress",
                    "list[list[typing.Any]]",
                    "list[list[str]]",
                    "raiden.utils.TargetAddress",
                    "List[List[Any]]",
                    "List[List[str]]"
                ],
                "participation_fn": [
                    "None",
                    "raiden.utils.TokenAddress",
                    "bool",
                    "raiden.utils.TargetAddress",
                    "list[list[typing.Any]]",
                    "list[list[str]]",
                    "List[List[Any]]",
                    "List[List[str]]"
                ]
            }
        },
        "state_transition_with_full_block": {
            "name": "state_transition_with_full_block",
            "location": 249,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "spec": [
                    "torch.nn.utils.rnn.PackedSequence",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "str",
                    "agent_based_api.v1.state"
                ],
                "state": [
                    "str",
                    "torch.nn.utils.rnn.PackedSequence",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "agent_based_api.v1.state"
                ],
                "fill_cur_epoch": [
                    "int",
                    "raiden.transfer.state.ChainState",
                    "state.State"
                ],
                "fill_prev_epoch": [],
                "participation_fn": [
                    "None",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "state_transition_with_full_attestations_block": {
            "name": "state_transition_with_full_attestations_block",
            "location": 280,
            "return": [
                "Sequence['cirq.Qid']",
                "str",
                "int"
            ],
            "arguments": {
                "spec": [
                    "torch.nn.utils.rnn.PackedSequence"
                ],
                "state": [
                    "torch.nn.utils.rnn.PackedSequence"
                ],
                "fill_cur_epoch": [
                    "dict",
                    "dict[, ]"
                ],
                "fill_prev_epoch": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "prepare_state_with_attestations": {
            "name": "prepare_state_with_attestations",
            "location": 315,
            "return": [
                "list[]",
                "int",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "spec": [
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "Optional[dict]",
                    "Callable",
                    "raiden.transfer.state.ChainState"
                ],
                "state": [
                    "dict[, ]",
                    "raiden.utils.TokenNetworkAddress",
                    "None",
                    "typing.Callable[, ]",
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "Optional[dict]",
                    "Callable",
                    "raiden.transfer.state.ChainState"
                ],
                "participation_fn": [
                    "Dict[str, Any]",
                    "None",
                    "dict",
                    "str",
                    "dict[str, typing.Any]",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "dict[, ]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "cached_prepare_state_with_attestations": {
            "name": "cached_prepare_state_with_attestations",
            "location": 359,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "int",
                    "dict[, ]",
                    "bool",
                    "dict"
                ],
                "state": [
                    "dict",
                    "float",
                    "List[src.main.core.models.state.State]"
                ]
            }
        },
        "_get_valid_attestation_at_slot.participants_filter": {
            "name": "participants_filter",
            "location": 192,
            "return": [
                "bool"
            ],
            "arguments": {
                "comm": [
                    "str",
                    "int",
                    "bool",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "prepare_state_with_attestations.temp_participants_filter": {
            "name": "temp_participants_filter",
            "location": 333,
            "return": [
                "bool"
            ],
            "arguments": {
                "comm": [
                    "int",
                    "dict",
                    "Tuple[int, int, int, int]",
                    "Optional[BaseException]",
                    "str"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/helpers/attester_slashings.py": {
        "get_valid_attester_slashing": {
            "name": "get_valid_attester_slashing",
            "location": 4,
            "return": [
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "int"
                ],
                "state": [
                    "float",
                    "int"
                ],
                "slot": [
                    "None"
                ],
                "signed_1": [
                    "bool"
                ],
                "signed_2": [
                    "bool",
                    "List[str]",
                    "str"
                ],
                "filter_participant_set": [
                    "None"
                ]
            }
        },
        "get_valid_attester_slashing_by_indices": {
            "name": "get_valid_attester_slashing_by_indices",
            "location": 22,
            "return": [
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "spec": [],
                "state": [],
                "indices_1": [
                    "list",
                    "str",
                    "list[]",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "indices_2": [
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "str",
                    "Union[List[str], List[Any]]",
                    "int",
                    "list[str]"
                ],
                "slot": [
                    "str",
                    "None"
                ],
                "signed_1": [
                    "bool",
                    "str",
                    "Optional[Any]"
                ],
                "signed_2": [
                    "bool",
                    "str",
                    "Optional[Any]"
                ]
            }
        },
        "get_indexed_attestation_participants": {
            "name": "get_indexed_attestation_participants",
            "location": 45,
            "return": [
                "list[]",
                "str",
                "List[Dict]",
                "list",
                "List[int]",
                "List[List[Any]]",
                "List[str]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "str",
                    "dict[, ]",
                    "T",
                    "dict"
                ],
                "indexed_att": [
                    "str",
                    "bool"
                ]
            }
        },
        "set_indexed_attestation_participants": {
            "name": "set_indexed_attestation_participants",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "str",
                    "bool"
                ],
                "indexed_att": [
                    "bool",
                    "float"
                ],
                "participants": [
                    "bool",
                    "float"
                ]
            }
        },
        "get_attestation_1_data": {
            "name": "get_attestation_1_data",
            "location": 59,
            "return": [
                "int",
                "str",
                "List[int]",
                "Callable"
            ],
            "arguments": {
                "spec": [
                    "typing.Mapping",
                    "str",
                    "Mapping[str, Any]",
                    "bool",
                    "int"
                ],
                "att_slashing": [
                    "bytes",
                    "str",
                    "IO",
                    "typing.IO"
                ]
            }
        },
        "get_attestation_2_data": {
            "name": "get_attestation_2_data",
            "location": 63,
            "return": [
                "int",
                "str",
                "List[int]",
                "Callable"
            ],
            "arguments": {
                "spec": [
                    "typing.Mapping",
                    "str",
                    "Mapping[str, Any]",
                    "bool",
                    "int"
                ],
                "att_slashing": [
                    "bytes",
                    "str",
                    "IO",
                    "typing.IO"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/helpers/block.py": {
        "get_proposer_index_maybe": {
            "name": "get_proposer_index_maybe",
            "location": 9,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "raiden.utils.SecretHash"
                ],
                "state": [
                    "dict[str, float]",
                    "Callable",
                    "Dict[str, float]"
                ],
                "slot": [
                    "Optional[Tuple[int, ...]]",
                    "tuple[typing.Union[int,...]]",
                    "Callable",
                    "None",
                    "raiden.utils.TokenAddress",
                    "typing.Callable[, ]"
                ],
                "proposer_index": [
                    "Sequence[str]",
                    "None",
                    "raiden.utils.TokenAddress",
                    "typing.Sequence[str]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "apply_randao_reveal": {
            "name": "apply_randao_reveal",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "Optional[int]",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "state": [
                    "dict",
                    "dict[, ]",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "block": [
                    "dict",
                    "dict[, ]",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "proposer_index": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "apply_sig": {
            "name": "apply_sig",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "Optional[int]",
                    "int",
                    "str",
                    "None",
                    "raiden.utils.Dict",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "Optional[int]",
                    "int",
                    "str",
                    "None",
                    "raiden.utils.Dict",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "signed_block": [
                    "str",
                    "bool"
                ],
                "proposer_index": [
                    "str",
                    "None",
                    "int",
                    "raiden.utils.BlockSpecification",
                    "raiden.utils.Address"
                ]
            }
        },
        "sign_block": {
            "name": "sign_block",
            "location": 51,
            "return": [
                "str",
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "spec": [
                    "Optional[int]",
                    "purplship.core.utils.xml.Element",
                    "Optional[str]",
                    "str",
                    "bool",
                    "Tuple[str, str]"
                ],
                "state": [
                    "str",
                    "int",
                    "raiden.utils.Any"
                ],
                "block": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "List[\"ItemShippingTarget\"]",
                    "list[\"ItemShippingTarget\"]"
                ],
                "proposer_index": [
                    "str",
                    "None",
                    "int",
                    "raiden.utils.Any"
                ]
            }
        },
        "transition_unsigned_block": {
            "name": "transition_unsigned_block",
            "location": 57,
            "return": [
                "T",
                "int",
                "dict[, ]",
                "str",
                "None"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "Iterable[Any]",
                    "int"
                ],
                "state": [
                    "int",
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "str",
                    "Iterable[Any]",
                    "None"
                ],
                "block": [
                    "int",
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "str",
                    "Iterable[Any]",
                    "None"
                ]
            }
        },
        "apply_empty_block": {
            "name": "apply_empty_block",
            "location": 67,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "spec": [
                    "str"
                ],
                "state": [
                    "str"
                ],
                "slot": [
                    "str",
                    "None",
                    "dict",
                    "Union[Dict, None]",
                    "dict[, ]"
                ]
            }
        },
        "build_empty_block": {
            "name": "build_empty_block",
            "location": 75,
            "return": [
                "str",
                "Iterable[int]",
                "List[List[str]]"
            ],
            "arguments": {
                "spec": [
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.TokenNetworkRegistryAddress"
                ],
                "state": [
                    "dict[str, int]",
                    "int",
                    "Dict[str, int]",
                    "torch.nn.utils.rnn.PackedSequence"
                ],
                "slot": [
                    "Sequence[str]",
                    "None",
                    "Callable",
                    "typing.Sequence[str]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "build_empty_block_for_next_slot": {
            "name": "build_empty_block_for_next_slot",
            "location": 107,
            "return": [
                "List[str]",
                "qutebrowser.utils.usertypes.Backend"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "get_state_and_beacon_parent_root_at_slot": {
            "name": "get_state_and_beacon_parent_root_at_slot",
            "location": 111,
            "return": [
                "tuple[]",
                "str",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "Optional[Any]",
                "bool"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "raiden.utils.NetworkTimeout",
                    "bool"
                ],
                "state": [
                    "Callable"
                ],
                "slot": [
                    "Callable",
                    "bool",
                    "typing.Callable[, ]",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/helpers/block_header.py": {
        "sign_block_header": {
            "name": "sign_block_header",
            "location": 4,
            "return": [
                "Iterable[str]",
                "int"
            ],
            "arguments": {
                "spec": [],
                "state": [
                    "str"
                ],
                "header": [
                    "List[str]",
                    "list[str]",
                    "Mapping",
                    "typing.Mapping"
                ],
                "privkey": [
                    "str",
                    "int",
                    "bytes",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/helpers/block_processing.py": {
        "for_ops": {
            "name": "for_ops",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {
                "state": [
                    "int"
                ],
                "operations": [
                    "str"
                ],
                "fn": [
                    "int"
                ]
            }
        },
        "get_process_calls": {
            "name": "get_process_calls",
            "location": 6,
            "return": [
                "dict[typing.Text, typing.Callable[, ]]",
                "str",
                "int"
            ],
            "arguments": {
                "spec": [
                    "bytes"
                ]
            }
        },
        "run_block_processing_to": {
            "name": "run_block_processing_to",
            "location": 40,
            "return": [
                "float",
                "List[str]",
                "bytes",
                "str"
            ],
            "arguments": {
                "spec": [
                    "Optional[str]",
                    "str",
                    "Callable",
                    "None",
                    "typing.Callable[, ]"
                ],
                "state": [],
                "block": [],
                "process_name": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Collection[str]",
                    "typing.Collection",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/helpers/constants.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/helpers/custody.py": {
        "get_valid_early_derived_secret_reveal": {
            "name": "get_valid_early_derived_secret_reveal",
            "location": 9,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "spec": [
                    "raiden.utils.PaymentNetworkID",
                    "raiden.utils.PaymentID",
                    "raiden.utils.PaymentAmount",
                    "raiden.utils.Secret",
                    "raiden.utils.SecretHash",
                    "raiden.utils.TargetAddress",
                    "raiden.utils.TokenAddress"
                ],
                "state": [
                    "raiden.utils.PaymentNetworkID",
                    "raiden.utils.PaymentID",
                    "raiden.utils.PaymentAmount",
                    "raiden.utils.Secret",
                    "raiden.utils.SecretHash",
                    "raiden.utils.TargetAddress",
                    "raiden.utils.TokenAddress"
                ],
                "epoch": [
                    "None",
                    "str",
                    "raiden.utils.TokenAddress",
                    "Optional[str]"
                ]
            }
        },
        "get_valid_custody_key_reveal": {
            "name": "get_valid_custody_key_reveal",
            "location": 37,
            "return": [
                "str",
                "int",
                "bool",
                "Sequence[Sequence[Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "spec": [
                    "Callable"
                ],
                "state": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "period": [
                    "None",
                    "int",
                    "raiden.utils.Address",
                    "raiden.utils.TokenAddress"
                ],
                "validator_index": [
                    "Callable",
                    "None",
                    "typing.Callable[, ]"
                ]
            }
        },
        "bitlist_from_int": {
            "name": "bitlist_from_int",
            "location": 58,
            "return": [
                "bool",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "max_len": [
                    "int",
                    "str",
                    "list[str]",
                    "bool",
                    "List[str]"
                ],
                "num_bits": [
                    "int",
                    "str",
                    "list[str]",
                    "bool",
                    "List[str]"
                ],
                "n": [
                    "int",
                    "str",
                    "list[str]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "get_valid_custody_slashing": {
            "name": "get_valid_custody_slashing",
            "location": 62,
            "return": [
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "spec": [
                    "list[int]",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.SecreHash",
                    "raiden.utils.PaymentNetworkID",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.Secret",
                    "raiden.utils.Address",
                    "raiden.utils.PaymentID",
                    "raiden.utils.PaymentHashInvoice",
                    "List[int]"
                ],
                "state": [
                    "list[raiden.utils.Address]",
                    "List[raiden.utils.Address]",
                    "raiden.utils.Address",
                    "tests.pathfinding.utils.SimpleReachabilityContainer",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.PaymentNetworkID"
                ],
                "attestation": [
                    "list[int]",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.SecreHash",
                    "raiden.utils.PaymentNetworkID",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.Secret",
                    "raiden.utils.Address",
                    "raiden.utils.PaymentID",
                    "raiden.utils.PaymentHashInvoice",
                    "List[int]"
                ],
                "shard_transition": [
                    "int",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "None",
                    "Optional[int]"
                ],
                "custody_secret": [
                    "int",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "None",
                    "Optional[int]"
                ],
                "data": [
                    "list[int]",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.SecreHash",
                    "raiden.utils.PaymentNetworkID",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.Secret",
                    "raiden.utils.Address",
                    "raiden.utils.PaymentID",
                    "raiden.utils.PaymentHashInvoice",
                    "List[int]"
                ],
                "data_index": [
                    "int",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Optional[int]"
                ]
            }
        },
        "get_valid_chunk_challenge": {
            "name": "get_valid_chunk_challenge",
            "location": 91,
            "return": [
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "spec": [
                    "bytes",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.PaymentNetworkID",
                    "raiden.utils.Address",
                    "raiden.utils.SecreHash",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.Secret"
                ],
                "state": [
                    "float",
                    "raiden.utils.Address",
                    "raiden.utils.SecreRegistryAddress",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.TokenNetworkRegistryAddress"
                ],
                "attestation": [
                    "raiden.utils.TokenAmount",
                    "raiden.utils.BlockIdentifier",
                    "raiden.utils.ChannelID",
                    "raiden.utils.NetworkTimeout",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.PaymentNetworkID",
                    "raiden.utils.TokenNetworkAddress"
                ],
                "shard_transition": [
                    "bytes"
                ],
                "data_index": [
                    "bytes",
                    "None"
                ],
                "chunk_index": [
                    "None",
                    "int",
                    "raiden.utils.Address",
                    "raiden.utils.PaymentAmount",
                    "raiden.utils.SignedTransaction"
                ]
            }
        },
        "custody_chunkify": {
            "name": "custody_chunkify",
            "location": 113,
            "return": [
                "list[]",
                "str",
                "bytearray",
                "bytes",
                "int",
                "bool"
            ],
            "arguments": {
                "spec": [
                    "int"
                ],
                "x": [
                    "int"
                ]
            }
        },
        "get_valid_custody_chunk_response": {
            "name": "get_valid_custody_chunk_response",
            "location": 119,
            "return": [
                "str",
                "Optional[bytes]"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "int",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "list[str]",
                    "bool",
                    "List[str]",
                    "str",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ],
                "chunk_challenge": [
                    "int"
                ],
                "challenge_index": [
                    "str",
                    "bool"
                ],
                "block_length_or_custody_data": [
                    "int",
                    "bytes",
                    "str",
                    "raiden.utils.ChannelID"
                ],
                "invalid_chunk_data": [
                    "bool",
                    "List[str]",
                    "str",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ]
            }
        },
        "get_custody_test_vector": {
            "name": "get_custody_test_vector",
            "location": 144,
            "return": [
                "bytes",
                "str",
                "raiden.utils.PrivateKey"
            ],
            "arguments": {
                "bytelength": [
                    "int",
                    "str",
                    "bytes",
                    "bool"
                ],
                "offset": [
                    "int",
                    "float",
                    "bytes"
                ]
            }
        },
        "get_sample_shard_transition": {
            "name": "get_sample_shard_transition",
            "location": 149,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "spec": [
                    "int"
                ],
                "start_slot": [
                    "int",
                    "str",
                    "bool"
                ],
                "block_lengths": [
                    "int"
                ]
            }
        },
        "get_custody_slashable_test_vector": {
            "name": "get_custody_slashable_test_vector",
            "location": 162,
            "return": [
                "str",
                "list[tuple[typing.Union[str,str,str,str,typing.Any]]]",
                "list[]",
                "Optional[str]",
                "Dict[str, Any]",
                "list[float]",
                "bool",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "int",
                    "bool",
                    "Iterable[Tuple[str, dict]]"
                ],
                "custody_secret": [
                    "str",
                    "int",
                    "typing.Iterable[tuple[typing.Union[str,dict[, ]]]]",
                    "bool",
                    "Iterable[Tuple[str, dict]]"
                ],
                "length": [
                    "int",
                    "raiden.utils.BalanceHash"
                ],
                "slashable": [
                    "bool",
                    "str",
                    "int",
                    "Iterable[Tuple[str, dict]]"
                ]
            }
        },
        "get_custody_slashable_shard_transition": {
            "name": "get_custody_slashable_shard_transition",
            "location": 171,
            "return": [
                "tuple[]",
                "str",
                "bool",
                "List[str]",
                "bytes",
                "set"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "start_slot": [
                    "int",
                    "dict[int, int]",
                    "Dict[int, int]",
                    "None",
                    "Optional[int]",
                    "raiden.utils.TokenAmount"
                ],
                "block_lengths": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "custody_secret": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ],
                "slashable": [
                    "bool",
                    "int",
                    "float",
                    "str"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/helpers/deposits.py": {
        "mock_deposit": {
            "name": "mock_deposit",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "Tuple[int, int]"
                ],
                "state": [
                    "Callable",
                    "Tuple[int, int]"
                ],
                "index": [
                    "Callable",
                    "Tuple[int, int]"
                ]
            }
        },
        "build_deposit_data": {
            "name": "build_deposit_data",
            "location": 24,
            "return": [
                "str",
                "IO[bytes]",
                "Optional[float]",
                "dict"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "List[str]",
                    "Set[Tuple[str, ...]]",
                    "float"
                ],
                "pubkey": [
                    "int",
                    "float",
                    "List[str]",
                    "Set[Tuple[str, ...]]"
                ],
                "privkey": [
                    "int",
                    "Set[Tuple[str, ...]]",
                    "List[str]",
                    "Optional[int]"
                ],
                "amount": [
                    "int",
                    "float",
                    "List[str]",
                    "Set[Tuple[str, ...]]"
                ],
                "withdrawal_credentials": [
                    "int",
                    "float",
                    "List[str]",
                    "Set[Tuple[str, ...]]"
                ],
                "signed": [
                    "Optional[List[str]]",
                    "bool",
                    "Optional[float]",
                    "Dict[str, str]",
                    "Optional[int]",
                    "int",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "sign_deposit_data": {
            "name": "sign_deposit_data",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "int",
                    "bytes",
                    "Dict[str, Any]"
                ],
                "deposit_data": [
                    "int",
                    "Dict[str, Any]",
                    "bytes"
                ],
                "privkey": [
                    "Optional[Exception]",
                    "Hashable",
                    "Optional[Dict]",
                    "bytes",
                    "BinaryIO",
                    "int"
                ]
            }
        },
        "build_deposit": {
            "name": "build_deposit",
            "location": 45,
            "return": [
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "spec": [
                    "str"
                ],
                "deposit_data_list": [
                    "str",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ServiceName",
                    "Tuple[str, int]"
                ],
                "pubkey": [
                    "int",
                    "Tuple[List[Any], List[Any]]"
                ],
                "privkey": [
                    "int",
                    "Tuple[List[Any], List[Any]]"
                ],
                "amount": [
                    "int",
                    "Tuple[List[Any], List[Any]]"
                ],
                "withdrawal_credentials": [
                    "int",
                    "Tuple[List[Any], List[Any]]"
                ],
                "signed": [
                    "int",
                    "Tuple[List[Any], List[Any]]"
                ]
            }
        },
        "deposit_from_context": {
            "name": "deposit_from_context",
            "location": 58,
            "return": [
                "dict",
                "str",
                "Optional[int]",
                "Union[None, dict]",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "spec": [
                    "List[str]",
                    "List[Tuple[str, str, bool]]",
                    "List[dict]",
                    "Sequence[Dict[str, str]]",
                    "dict",
                    "Callable"
                ],
                "deposit_data_list": [
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "str",
                    "List[Tuple[str, str]]",
                    "int",
                    "List[str]"
                ],
                "index": [
                    "str",
                    "bool"
                ]
            }
        },
        "prepare_full_genesis_deposits": {
            "name": "prepare_full_genesis_deposits",
            "location": 73,
            "return": [
                "bool",
                "T",
                "cmk.utils.type_defs.UserId",
                "str",
                "dict"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "int",
                    "str",
                    "Dict[str, int]"
                ],
                "amount": [
                    "List[Dict[Any, str]]",
                    "list"
                ],
                "deposit_count": [
                    "int",
                    "List[int]",
                    "torch.utils.data.DataLoader",
                    "bool",
                    "float"
                ],
                "min_pubkey_index": [
                    "int",
                    "List[int]",
                    "torch.utils.data.DataLoader",
                    "bool",
                    "float"
                ],
                "signed": [
                    "List[Dict[Any, str]]",
                    "list"
                ],
                "deposit_data_list": [
                    "Dict[int, Dict[str, str]]",
                    "Optional[Tuple[Any]]",
                    "Optional[Set[str]]",
                    "int"
                ]
            }
        },
        "prepare_random_genesis_deposits": {
            "name": "prepare_random_genesis_deposits",
            "location": 101,
            "return": [
                "bytes",
                "int",
                "str"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "str",
                    "Optional[List[int]]",
                    "float",
                    "random.Random",
                    "trezor.utils.Writer"
                ],
                "deposit_count": [
                    "int",
                    "Callable",
                    "str"
                ],
                "max_pubkey_index": [
                    "int",
                    "List[int]"
                ],
                "min_pubkey_index": [
                    "int",
                    "List[int]"
                ],
                "max_amount": [
                    "Optional[int]",
                    "int"
                ],
                "min_amount": [
                    "int",
                    "Optional[int]"
                ],
                "deposit_data_list": [
                    "Optional[bytes]",
                    "bool",
                    "Optional[Callable]",
                    "Optional[\"Outcome\"]"
                ],
                "rng": [
                    "int",
                    "float",
                    "List[str]"
                ]
            }
        },
        "prepare_state_and_deposit": {
            "name": "prepare_state_and_deposit",
            "location": 136,
            "return": [
                "int",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "spec": [
                    "raiden.utils.TokenAddress",
                    "raiden.utils.List[raiden.utils.TokenAddress]",
                    "float",
                    "raiden.utils.NetworkTimeout",
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "Callable",
                    "raiden.utils.SignedTransaction"
                ],
                "state": [
                    "raiden.utils.TokenAmount",
                    "bytes"
                ],
                "validator_index": [
                    "str",
                    "Sequence[str]",
                    "Optional[str]"
                ],
                "amount": [
                    "random.Random",
                    "raiden.utils.BlockHash",
                    "raiden.utils.SecreHash",
                    "raiden.utils.Secret",
                    "raiden.utils.ChannelMap",
                    "raiden.utils.BlockNumber"
                ],
                "withdrawal_credentials": [
                    "raiden.utils.Secret",
                    "raiden.utils.SecreHash",
                    "Optional[\"Outcome\"]"
                ],
                "signed": [
                    "random.Random",
                    "raiden.utils.BlockHash",
                    "raiden.utils.SecreHash",
                    "raiden.utils.Secret",
                    "raiden.utils.ChannelMap",
                    "raiden.utils.BlockNumber"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/helpers/epoch_processing.py": {
        "get_process_calls": {
            "name": "get_process_calls",
            "location": 5,
            "return": [
                "str",
                "list[typing.Text]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "int",
                    "Callable",
                    "typing.Callable[, ]",
                    "List[List[int]]",
                    "list[list[int]]"
                ]
            }
        },
        "run_epoch_processing_to": {
            "name": "run_epoch_processing_to",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "Optional[str]",
                    "Callable"
                ],
                "state": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "process_name": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "list",
                    "list[]"
                ]
            }
        },
        "run_epoch_processing_with": {
            "name": "run_epoch_processing_with",
            "location": 58,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,str,bool,typing.Type]]]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "bool",
                    "Type[T]",
                    "typing.Type"
                ],
                "state": [
                    "str",
                    "bool",
                    "Type[T]",
                    "typing.Type"
                ],
                "process_name": [
                    "str",
                    "bool",
                    "Type[T]",
                    "typing.Type"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/helpers/execution_payload.py": {
        "build_empty_execution_payload": {
            "name": "build_empty_execution_payload",
            "location": 4,
            "return": [
                "int",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "Union[int, None]"
                ],
                "state": [
                    "int",
                    "bytes"
                ],
                "randao_mix": [
                    "Sequence[str]",
                    "Dict[\"core.Edge\", \"state.State\"]",
                    "int"
                ]
            }
        },
        "get_execution_payload_header": {
            "name": "get_execution_payload_header",
            "location": 41,
            "return": [
                "str",
                "Dict[str, str]",
                "Exception"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "str"
                ],
                "execution_payload": [
                    "bool",
                    "str"
                ]
            }
        },
        "build_state_with_incomplete_transition": {
            "name": "build_state_with_incomplete_transition",
            "location": 63,
            "return": [
                "str",
                "dict",
                "Set[str]",
                "bytes"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "dict",
                    "float"
                ],
                "state": [
                    "str",
                    "dict",
                    "float"
                ]
            }
        },
        "build_state_with_complete_transition": {
            "name": "build_state_with_complete_transition",
            "location": 67,
            "return": [
                "str",
                "dict",
                "Set[str]",
                "bytes"
            ],
            "arguments": {
                "spec": [
                    "IO",
                    "float"
                ],
                "state": [
                    "float",
                    "Dict[str, Any]"
                ]
            }
        },
        "build_state_with_execution_payload_header": {
            "name": "build_state_with_execution_payload_header",
            "location": 74,
            "return": [
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "spec": [
                    "str"
                ],
                "state": [
                    "str"
                ],
                "execution_payload_header": [
                    "str"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/helpers/fork_choice.py": {
        "get_anchor_root": {
            "name": "get_anchor_root",
            "location": 9,
            "return": [
                "Sequence[str]",
                "bool",
                "str"
            ],
            "arguments": {
                "spec": [
                    "Sequence[Sequence[str]]",
                    "Sequence[str]"
                ],
                "state": [
                    "str",
                    "List[List[Any]]",
                    "list[list[typing.Any]]"
                ]
            }
        },
        "add_block_to_store": {
            "name": "add_block_to_store",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "str",
                    "typing.Sequence[str]",
                    "Union[Sequence[str], str]",
                    "tuple[typing.Sequence[]]",
                    "Tuple[Sequence]",
                    "dict[str, typing.Union[str,int]]",
                    "bool",
                    "Dict[str, Union[str, int]]"
                ],
                "store": [],
                "signed_block": [
                    "Optional[Dict]",
                    "dict[, ]",
                    "int",
                    "None",
                    "dict"
                ]
            }
        },
        "tick_and_add_block": {
            "name": "tick_and_add_block",
            "location": 26,
            "return": [
                "typing.Generator[]",
                "str",
                "Union[str, Dict]",
                "dict"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "float",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "store": [
                    "str",
                    "int",
                    "dict",
                    "dict[, ]"
                ],
                "signed_block": [
                    "int",
                    "str",
                    "bytes",
                    "bytearray",
                    "dict",
                    "dict[, ]"
                ],
                "test_steps": [],
                "valid": [
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Sequence[str]]",
                    "str",
                    "Optional[List[str]]"
                ],
                "merge_block": [
                    "bool",
                    "str",
                    "int"
                ],
                "block_not_found": [
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Sequence[str]]",
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "add_attestation": {
            "name": "add_attestation",
            "location": 45,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[str,dict[str, object],int]]]"
            ],
            "arguments": {
                "spec": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "Optional[bool]",
                    "Optional[float]",
                    "float"
                ],
                "store": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "float",
                    "Optional[bool]",
                    "Optional[float]"
                ],
                "attestation": [
                    "str",
                    "int",
                    "Dict[str, object]",
                    "dict[str, object]"
                ],
                "test_steps": [
                    "list[dict[str, typing.Any]]",
                    "str",
                    "bool",
                    "List[Dict[str, Any]]"
                ],
                "is_from_block": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "tick_and_run_on_attestation": {
            "name": "tick_and_run_on_attestation",
            "location": 51,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "int",
                    "bytes",
                    "list",
                    "list[]",
                    "Optional[str]",
                    "None"
                ],
                "store": [
                    "str",
                    "Optional[int]",
                    "int",
                    "Mapping[str, Any]",
                    "None",
                    "bool",
                    "typing.Mapping"
                ],
                "attestation": [
                    "str",
                    "int"
                ],
                "test_steps": [
                    "list[int]",
                    "int",
                    "Sequence[Sequence[str]]",
                    "str",
                    "List[int]",
                    "Set[Tuple[str, str]]"
                ],
                "is_from_block": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "Callable[[], int]"
                ]
            }
        },
        "run_on_attestation": {
            "name": "run_on_attestation",
            "location": 64,
            "return": [
                "Awaitable",
                "None"
            ],
            "arguments": {
                "spec": [
                    "Dict[str, str]",
                    "Optional[Dict[str, Any]]"
                ],
                "store": [
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Optional[Dict[str, Any]]",
                    "None"
                ],
                "attestation": [
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Optional[Dict[str, Any]]",
                    "None"
                ],
                "is_from_block": [
                    "bool",
                    "Dict[str, str]",
                    "Optional[Dict[str, Any]]"
                ],
                "valid": [
                    "bool",
                    "str",
                    "Optional[Callable[[], None]]",
                    "int"
                ]
            }
        },
        "get_genesis_forkchoice_store": {
            "name": "get_genesis_forkchoice_store",
            "location": 76,
            "return": [
                "str",
                "set[str]",
                "tuple",
                "dict",
                "list[str]",
                "Optional[str]",
                "dict[, ]"
            ],
            "arguments": {
                "spec": [
                    "str"
                ],
                "genesis_state": [
                    "str"
                ]
            }
        },
        "get_genesis_forkchoice_store_and_block": {
            "name": "get_genesis_forkchoice_store_and_block",
            "location": 81,
            "return": [
                "tuple[]",
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "genesis_state": [
                    "Callable"
                ]
            }
        },
        "get_block_file_name": {
            "name": "get_block_file_name",
            "location": 87,
            "return": [
                "typing.Text",
                "str",
                "bool",
                "FrozenSet[str]",
                "dict"
            ],
            "arguments": {
                "block": [
                    "Optional[int]"
                ]
            }
        },
        "get_attestation_file_name": {
            "name": "get_attestation_file_name",
            "location": 91,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "attestation": [
                    "str"
                ]
            }
        },
        "get_attester_slashing_file_name": {
            "name": "get_attester_slashing_file_name",
            "location": 95,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "attester_slashing": [
                    "str",
                    "bool"
                ]
            }
        },
        "on_tick_and_append_step": {
            "name": "on_tick_and_append_step",
            "location": 99,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "List[str]",
                    "int",
                    "bool"
                ],
                "store": [
                    "str",
                    "int",
                    "list[str]",
                    "List[str]",
                    "bool"
                ],
                "time": [
                    "int"
                ],
                "test_steps": [
                    "list[]",
                    "int",
                    "list[int]",
                    "list",
                    "List[int]",
                    "Sequence[int]"
                ]
            }
        },
        "run_on_block": {
            "name": "run_on_block",
            "location": 104,
            "return": [
                "Iterator[Tuple[str, str]]",
                "None"
            ],
            "arguments": {
                "spec": [
                    "Optional[Dict]",
                    "type",
                    "Callable"
                ],
                "store": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "signed_block": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "valid": [
                    "bool",
                    "List[str]",
                    "list",
                    "str"
                ]
            }
        },
        "add_block": {
            "name": "add_block",
            "location": 117,
            "return": [
                "typing.Generator[tuple[typing.Union[int,float,dict[, ],None,list[str],typing.AbstractSet,str]]]",
                "bool",
                "None",
                "str",
                "Callable"
            ],
            "arguments": {
                "spec": [
                    "Optional[float]",
                    "str",
                    "float",
                    "None"
                ],
                "store": [
                    "Optional[float]",
                    "str",
                    "float",
                    "None"
                ],
                "signed_block": [
                    "int",
                    "float",
                    "Optional[Dict]",
                    "dict[, ]",
                    "str",
                    "Optional[List[str]]",
                    "None",
                    "Optional[AbstractSet]",
                    "list[str]",
                    "typing.AbstractSet",
                    "bool"
                ],
                "test_steps": [
                    "list[]",
                    "list[str]",
                    "list",
                    "Optional[str]",
                    "str",
                    "int",
                    "List[str]"
                ],
                "valid": [
                    "bool",
                    "Optional[float]",
                    "str"
                ],
                "block_not_found": [
                    "bool",
                    "str"
                ]
            }
        },
        "run_on_attester_slashing": {
            "name": "run_on_attester_slashing",
            "location": 179,
            "return": [
                "Awaitable",
                "None"
            ],
            "arguments": {
                "spec": [
                    "bytes"
                ],
                "store": [
                    "bytes"
                ],
                "attester_slashing": [
                    "bytes"
                ],
                "valid": [
                    "bool",
                    "List[int]",
                    "int"
                ]
            }
        },
        "add_attester_slashing": {
            "name": "add_attester_slashing",
            "location": 191,
            "return": [
                "typing.Generator[tuple[typing.Union[bool,str,None]]]",
                "None"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "bytes"
                ],
                "store": [
                    "int",
                    "bytes"
                ],
                "attester_slashing": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "test_steps": [
                    "list[str]",
                    "str",
                    "int",
                    "List[str]",
                    "Callable[[str], str]"
                ],
                "valid": [
                    "bool",
                    "list",
                    "int"
                ]
            }
        },
        "get_formatted_head_output": {
            "name": "get_formatted_head_output",
            "location": 211,
            "return": [
                "dict[typing.Text, int]",
                "Mapping[str, Any]",
                "str",
                "Optional[Callable[[str], bool]]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "store": [
                    "str",
                    "int"
                ]
            }
        },
        "apply_next_epoch_with_attestations": {
            "name": "apply_next_epoch_with_attestations",
            "location": 220,
            "return": [
                "typing.Generator[]",
                "str",
                "tuple[typing.Union[dict[str, int],typing.Type,int,float,dict[, ],typing.TextIO,None]]",
                "Tuple[str, int]",
                "bool"
            ],
            "arguments": {
                "spec": [
                    "int"
                ],
                "state": [
                    "int"
                ],
                "store": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]",
                    "Optional[TextIO]",
                    "typing.TextIO",
                    "None"
                ],
                "fill_cur_epoch": [
                    "int"
                ],
                "fill_prev_epoch": [
                    "int"
                ],
                "participation_fn": [
                    "int",
                    "None"
                ],
                "test_steps": [
                    "Collection[int]",
                    "bool",
                    "None",
                    "typing.Collection"
                ]
            }
        },
        "apply_next_slots_with_attestations": {
            "name": "apply_next_slots_with_attestations",
            "location": 244,
            "return": [
                "typing.Generator[]",
                "str",
                "tuple[typing.Union[dict[str, int],typing.Type,int,float,dict[, ],typing.TextIO,None]]",
                "Tuple[str, int]",
                "bool"
            ],
            "arguments": {
                "spec": [
                    "int"
                ],
                "state": [
                    "int"
                ],
                "store": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]",
                    "Optional[TextIO]",
                    "typing.TextIO",
                    "None"
                ],
                "slots": [
                    "int"
                ],
                "fill_cur_epoch": [
                    "int"
                ],
                "fill_prev_epoch": [
                    "int"
                ],
                "test_steps": [
                    "str"
                ],
                "participation_fn": [
                    "int",
                    "None"
                ]
            }
        },
        "get_pow_block_file_name": {
            "name": "get_pow_block_file_name",
            "location": 266,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "pow_block": [
                    "float",
                    "str",
                    "Pattern",
                    "int",
                    "typing.Pattern"
                ]
            }
        },
        "add_pow_block": {
            "name": "add_pow_block",
            "location": 270,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[str,None,typing.Iterable[str],int]]]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "str"
                ],
                "store": [
                    "bool",
                    "str"
                ],
                "pow_block": [
                    "str",
                    "Optional[str]",
                    "None",
                    "int",
                    "Iterable[str]",
                    "typing.Iterable[str]",
                    "Optional[List[str]]",
                    "Optional[int]"
                ],
                "test_steps": [
                    "list[typing.Any]",
                    "str",
                    "int",
                    "Optional[List[Any]]"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/helpers/fork_transition.py": {
        "_set_operations_by_dict": {
            "name": "_set_operations_by_dict",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "block": [
                    "str",
                    "int",
                    "None",
                    "Optional[int]",
                    "bool"
                ],
                "operation_dict": [
                    "dict[str, tuple[typing.Union[typing.Any,str]]]",
                    "dict[str, str]",
                    "str",
                    "dict[typing.Any, float]",
                    "Dict[str, Tuple[Any, str]]",
                    "Dict[str, Any]",
                    "Dict[str, Union[Any, Any, Any, Any, Any, Any, Any]]",
                    "List[Dict[str, Any]]",
                    "Dict[str, str]",
                    "int",
                    "Dict[Any, float]"
                ]
            }
        },
        "_state_transition_and_sign_block_at_slot": {
            "name": "_state_transition_and_sign_block_at_slot",
            "location": 45,
            "return": [
                "Container[T]",
                "dict",
                "Callable[[str], str]"
            ],
            "arguments": {
                "spec": [
                    "Optional[str]",
                    "int",
                    "str",
                    "None",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "Optional[str]",
                    "int",
                    "Callable"
                ],
                "operation_dict": [
                    "Sequence[Hashable]",
                    "None",
                    "str",
                    "Callable",
                    "typing.Sequence[typing.Hashable]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "_all_blocks": {
            "name": "_all_blocks",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "_": [
                    "bool",
                    "str"
                ]
            }
        },
        "skip_slots": {
            "name": "skip_slots",
            "location": 76,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "no_blocks": {
            "name": "no_blocks",
            "location": 86,
            "return": [
                "bool"
            ],
            "arguments": {
                "_": [
                    "str",
                    "int",
                    "List[\"Block\"]",
                    "list[\"Block\"]"
                ]
            }
        },
        "only_at": {
            "name": "only_at",
            "location": 90,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "slot": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "state_transition_across_slots": {
            "name": "state_transition_across_slots",
            "location": 99,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "bool",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "Type",
                    "typing.Type",
                    "Dict[str, List[str]]",
                    "dict[str, list[str]]"
                ],
                "to_slot": [
                    "bool",
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "int"
                ],
                "block_filter": [
                    "str",
                    "Sequence[str]",
                    "Sequence[List[Any]]"
                ]
            }
        },
        "state_transition_across_slots_with_ignoring_proposers": {
            "name": "state_transition_across_slots_with_ignoring_proposers",
            "location": 111,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": [
                    "Optional[List[Any]]",
                    "list[typing.Any]"
                ],
                "to_slot": [
                    "Optional[List[Any]]",
                    "list[typing.Any]",
                    "None"
                ],
                "ignoring_proposers": [
                    "int",
                    "bool",
                    "raiden.utils.List[raiden.transfer.mediated_transfer.state.MediationPairState]"
                ],
                "only_last_block": [
                    "bool",
                    "Union[str, Pattern]",
                    "int",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[dict]"
                ]
            }
        },
        "do_fork": {
            "name": "do_fork",
            "location": 141,
            "return": [
                "tuple[typing.Callable[, ]]",
                "tuple[typing.Optional[typing.Callable[, ]]]",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]",
                "Generator",
                "recidiviz.persistence.entity.state.entities.StateIncarcerationPeriod",
                "Dict[str, Dict[str, int]]",
                "str"
            ],
            "arguments": {
                "state": [
                    "typing.Callable[, ]",
                    "Callable",
                    "raiden.transfer.mediated_transfer.state.InitiatorTransferState"
                ],
                "spec": [
                    "typing.Callable[, ]",
                    "Callable",
                    "raiden.transfer.mediated_transfer.state.InitiatorTransferState"
                ],
                "post_spec": [
                    "raiden.transfer.state.ChainState",
                    "raiden.transfer.state.NettingChannelState"
                ],
                "fork_epoch": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]",
                    "int"
                ],
                "with_block": [
                    "bool",
                    "List[str]",
                    "Dict[Tuple[int, int], str]",
                    "List[dict]"
                ],
                "operation_dict": [
                    "Sequence[int]",
                    "int",
                    "None",
                    "str",
                    "typing.Sequence[int]"
                ]
            }
        },
        "transition_until_fork": {
            "name": "transition_until_fork",
            "location": 172,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "list[list[typing.Any]]",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "state.State",
                    "List[List[Any]]"
                ],
                "state": [
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[List[str]]",
                    "list[list[str]]",
                    "Dict[str, float]",
                    "dict[str, float]",
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional[dict]",
                    "dict[, ]",
                    "None"
                ],
                "fork_epoch": [
                    "list[list[typing.Any]]",
                    "List[List[Any]]",
                    "list[list[str]]",
                    "List[List[str]]",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "_transition_until_fork_minus_one": {
            "name": "_transition_until_fork_minus_one",
            "location": 177,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "list[list[typing.Any]]",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "state.State",
                    "List[List[Any]]"
                ],
                "state": [
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[List[str]]",
                    "list[list[str]]",
                    "Dict[str, float]",
                    "dict[str, float]",
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional[dict]",
                    "dict[, ]",
                    "None"
                ],
                "fork_epoch": [
                    "list[list[typing.Any]]",
                    "List[List[Any]]",
                    "list[list[str]]",
                    "List[List[str]]",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "transition_to_next_epoch_and_append_blocks": {
            "name": "transition_to_next_epoch_and_append_blocks",
            "location": 182,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "Optional[Callable]",
                    "int",
                    "typing.Callable[, ]",
                    "None"
                ],
                "state": [
                    "Optional[Callable]",
                    "int",
                    "typing.Callable[, ]",
                    "None"
                ],
                "post_tag": [
                    "Sequence[object]",
                    "int",
                    "typing.Sequence[object]",
                    "str",
                    "Optional[List[int]]",
                    "list[int]",
                    "None",
                    "Dict[str, object]",
                    "dict[str, object]"
                ],
                "blocks": [
                    "list[int]",
                    "Sequence[object]",
                    "int",
                    "Optional[List[int]]",
                    "str",
                    "Dict[str, object]"
                ],
                "only_last_block": [
                    "bool",
                    "Optional[int]",
                    "str",
                    "mythril.laser.ethereum.state.accounAccount"
                ],
                "ignoring_proposers": [
                    "Optional[int]",
                    "int",
                    "None",
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "run_transition_with_operation": {
            "name": "run_transition_with_operation",
            "location": 212,
            "return": [
                "",
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "state": [
                    "bool",
                    "int"
                ],
                "fork_epoch": [
                    "List[Dict[str, int]]",
                    "list[dict[str, int]]",
                    "Optional[str]",
                    "str",
                    "Optional[List[Any]]",
                    "None"
                ],
                "spec": [
                    "bool",
                    "int"
                ],
                "post_spec": [
                    "List[Dict[str, int]]",
                    "list[dict[str, int]]",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "pre_tag": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Tuple[Tuple[str, ...]]",
                    "tuple[tuple[typing.Union[str,...]]]"
                ],
                "post_tag": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]",
                    "list",
                    "list[]",
                    "Optional[List[str]]",
                    "None"
                ],
                "operation_type": [
                    "List[str]",
                    "list[str]",
                    "bool",
                    "Sequence[str]",
                    "str",
                    "typing.Sequence[str]"
                ],
                "operation_at_slot": [
                    "str",
                    "bool"
                ]
            }
        },
        "_transition_until_active": {
            "name": "_transition_until_active",
            "location": 328,
            "return": [
                "Callable",
                "List[str]",
                "dict",
                "int"
            ],
            "arguments": {
                "post_spec": [
                    "int"
                ],
                "state": [
                    "int"
                ],
                "post_tag": [
                    "bool",
                    "int"
                ],
                "blocks": [
                    "bool",
                    "int"
                ],
                "validator_index": [
                    "str",
                    "bool",
                    "Dict[int, Dict[int, Any]]",
                    "dict[int, dict[int, typing.Any]]",
                    "list",
                    "list[]"
                ]
            }
        },
        "skip_slots.f": {
            "name": "f",
            "location": 81,
            "return": [
                "bool"
            ],
            "arguments": {
                "state_at_prior_slot": []
            }
        },
        "only_at.f": {
            "name": "f",
            "location": 94,
            "return": [
                "bool",
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "state_at_prior_slot": [
                    "int",
                    "pyshgp.push.state.PushState",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "Dict[str, Any]"
                ]
            }
        },
        "run_transition_with_operation._check_state": {
            "name": "_check_state",
            "location": 265,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/helpers/genesis.py": {
        "build_mock_validator": {
            "name": "build_mock_validator",
            "location": 8,
            "return": [
                "bool",
                "str",
                "Optional[int]",
                "complex"
            ],
            "arguments": {
                "spec": [
                    "Optional[int]",
                    "int",
                    "Optional[str]",
                    "Dict[str, int]",
                    "Dict[int, dict]",
                    "bool"
                ],
                "i": [
                    "float",
                    "bool",
                    "set",
                    "str",
                    "bytes"
                ],
                "balance": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "get_sample_genesis_execution_payload_header": {
            "name": "get_sample_genesis_execution_payload_header",
            "location": 29,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "spec": [
                    "str"
                ],
                "eth1_block_hash": [
                    "List[int]",
                    "Optional[int]",
                    "Optional[float]",
                    "float",
                    "int"
                ]
            }
        },
        "create_genesis_state": {
            "name": "create_genesis_state",
            "location": 48,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "spec": [
                    "dict",
                    "Dict[str, Any]",
                    "List[List[float]]"
                ],
                "validator_balances": [
                    "str",
                    "Callable[[str], bool]"
                ],
                "activation_threshold": [
                    "str",
                    "int",
                    "dict",
                    "Tuple[str, str, str]"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/helpers/inactivity_scores.py": {
        "randomize_inactivity_scores": {
            "name": "randomize_inactivity_scores",
            "location": 4,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "dict",
                    "dict[, ]"
                ],
                "state": [
                    "int",
                    "DefaultDict[int, List[int]]",
                    "typing.DefaultDict",
                    "List[float]",
                    "list[float]",
                    "List[int]",
                    "list[int]"
                ],
                "minimum": [
                    "int",
                    "DefaultDict[int, List[int]]",
                    "List[float]",
                    "List[int]"
                ],
                "maximum": [
                    "int",
                    "DefaultDict[int, List[int]]",
                    "List[float]",
                    "List[int]"
                ],
                "rng": [
                    "int",
                    "DefaultDict[int, List[int]]",
                    "List[float]",
                    "List[int]"
                ]
            }
        },
        "zero_inactivity_scores": {
            "name": "zero_inactivity_scores",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "dict",
                    "dict[, ]"
                ],
                "state": [
                    "List[int]",
                    "list[int]",
                    "bytes",
                    "List[float]",
                    "list[float]"
                ],
                "rng": [
                    "dict",
                    "None",
                    "dict[, ]"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/helpers/keys.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/helpers/light_client.py": {
        "initialize_light_client_store": {
            "name": "initialize_light_client_store",
            "location": 6,
            "return": [
                "Mapping[str, Any]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "spec": [
                    "str"
                ],
                "state": [
                    "str"
                ]
            }
        },
        "get_sync_aggregate": {
            "name": "get_sync_aggregate",
            "location": 18,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "state": [
                    "int",
                    "dict",
                    "dict[, ]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "block_header": [
                    "str"
                ],
                "block_root": [
                    "List[str]",
                    "None",
                    "str",
                    "List[float]",
                    "list[str]",
                    "list[float]"
                ],
                "signature_slot": [
                    "Optional[str]",
                    "None",
                    "Optional[float]",
                    "str",
                    "bool",
                    "Optional[List[str]]",
                    "float",
                    "list[str]",
                    "Optional[bool]"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/helpers/merkle.py": {
        "build_proof": {
            "name": "build_proof",
            "location": 4,
            "return": [
                "list[]",
                "List[str]",
                "List[Dict]",
                "bool",
                "str",
                "List[int]"
            ],
            "arguments": {
                "anchor": [
                    "bool"
                ],
                "leaf_index": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/helpers/multi_operations.py": {
        "run_slash_and_exit": {
            "name": "run_slash_and_exit",
            "location": 21,
            "return": [
                "Awaitable",
                "typing.Generator[tuple[typing.Union[typing.Text,dict[, ],typing.ItemsView]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]",
                "typing.Generator[tuple[typing.Optional[typing.Text]]]",
                "None"
            ],
            "arguments": {
                "spec": [
                    "dict",
                    "dict[, ]",
                    "ItemsView",
                    "typing.ItemsView"
                ],
                "state": [
                    "dict",
                    "dict[, ]",
                    "ItemsView",
                    "typing.ItemsView"
                ],
                "slash_index": [
                    "float"
                ],
                "exit_index": [
                    "int",
                    "str"
                ],
                "valid": [
                    "bool",
                    "List[int]",
                    "Optional[dict]"
                ]
            }
        },
        "get_random_proposer_slashings": {
            "name": "get_random_proposer_slashings",
            "location": 50,
            "return": [
                "list[]",
                "str",
                "bool"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "int",
                    "Tuple[str, dict]",
                    "tuple[typing.Union[str,dict[, ]]]"
                ],
                "rng": [
                    "Callable"
                ]
            }
        },
        "get_random_attester_slashings": {
            "name": "get_random_attester_slashings",
            "location": 67,
            "return": [
                "list[]",
                "str",
                "bool"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "int",
                    "Tuple[str, dict]",
                    "tuple[typing.Union[str,dict[, ]]]"
                ],
                "rng": [
                    "Callable"
                ],
                "slashed_indices": [
                    "list[]",
                    "int",
                    "List[int]",
                    "list"
                ]
            }
        },
        "get_random_attestations": {
            "name": "get_random_attestations",
            "location": 102,
            "return": [
                "list[]",
                "str",
                "bool"
            ],
            "arguments": {
                "spec": [],
                "state": [],
                "rng": []
            }
        },
        "get_random_deposits": {
            "name": "get_random_deposits",
            "location": 116,
            "return": [
                "tuple[typing.Union[list[],bytes]]",
                "tuple[list[]]",
                "bool",
                "int",
                "bytes",
                "str",
                "Union[bytes, bytearray]"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "List[int]",
                    "bool",
                    "str"
                ],
                "state": [
                    "List[int]",
                    "int",
                    "list[int]",
                    "list",
                    "list[]",
                    "Sequence[T]",
                    "typing.Sequence[T]",
                    "tuple",
                    "tuple[]"
                ],
                "rng": [
                    "int",
                    "Sequence[int]",
                    "typing.Sequence[int]"
                ],
                "num_deposits": [
                    "int",
                    "None",
                    "Sequence[int]",
                    "numpy.random.RandomState",
                    "typing.Sequence[int]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "prepare_state_and_get_random_deposits": {
            "name": "prepare_state_and_get_random_deposits",
            "location": 148,
            "return": [
                "int",
                "bool",
                "Tuple[int, int, int, int]"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "List[int]",
                    "list[int]",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]",
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]"
                ],
                "state": [
                    "int",
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]"
                ],
                "rng": [
                    "int",
                    "List[int]",
                    "list[int]",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]",
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]"
                ],
                "num_deposits": [
                    "int",
                    "None",
                    "List[int]",
                    "Tuple[int, int]",
                    "list[int]",
                    "Sequence[Any]",
                    "tuple[typing.Union[int,int]]",
                    "typing.Sequence[typing.Any]"
                ]
            }
        },
        "_eligible_for_exit": {
            "name": "_eligible_for_exit",
            "location": 155,
            "return": [
                "bool",
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "Optional[Dict[str, Any]]"
                ],
                "state": [
                    "dict[, ]",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "str",
                    "None",
                    "Optional[dict]",
                    "agent_based_api.v1.state",
                    "raiden.transfer.state.ChainState"
                ],
                "index": [
                    "int"
                ]
            }
        },
        "get_random_voluntary_exits": {
            "name": "get_random_voluntary_exits",
            "location": 169,
            "return": [
                "dict",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]",
                "Dict[str, Any]",
                "Iterable[str]",
                "Sequence[str]"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "dict[, ]",
                    "bool",
                    "dict",
                    "int"
                ],
                "to_be_slashed_indices": [
                    "int",
                    "Sequence[T]",
                    "Callable[[T], bool]",
                    "List[str]",
                    "str"
                ],
                "rng": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]",
                    "int",
                    "list",
                    "list[]"
                ]
            }
        },
        "get_random_sync_aggregate": {
            "name": "get_random_sync_aggregate",
            "location": 182,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "Callable"
                ],
                "state": [
                    "float",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "slot": [
                    "str",
                    "int"
                ],
                "block_root": [
                    "str",
                    "int",
                    "None"
                ],
                "fraction_participated": [
                    "float",
                    "int",
                    "Union[Dict, List]",
                    "List[recidiviz.persistence.database.schema.state.schema.StateIncarcerationPeriod]",
                    "List[str]",
                    "bool",
                    "T"
                ],
                "rng": [
                    "str",
                    "List[int]",
                    "Iterable[str]",
                    "float",
                    "bytes"
                ]
            }
        },
        "build_random_block_from_state_for_next_slot": {
            "name": "build_random_block_from_state_for_next_slot",
            "location": 203,
            "return": [
                "str",
                "MutableMapping[str, Any]",
                "Type[Any]"
            ],
            "arguments": {
                "spec": [
                    "raiden.transfer.state.ChainState"
                ],
                "state": [
                    "raiden.transfer.state.ChainState"
                ],
                "rng": [
                    "Optional[Dict[str, Any]]",
                    "float",
                    "dict[str, typing.Any]",
                    "None",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "deposits": [
                    "str",
                    "None",
                    "bytes",
                    "list",
                    "dict",
                    "list[]",
                    "dict[, ]"
                ]
            }
        },
        "run_test_full_random_operations": {
            "name": "run_test_full_random_operations",
            "location": 229,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,dict[, ]]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[typing.Union[int,str,bytes,dict[, ]]]]]]"
            ],
            "arguments": {
                "spec": [
                    "dict",
                    "dict[, ]"
                ],
                "state": [
                    "dict",
                    "dict[, ]"
                ],
                "rng": [
                    "float"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/helpers/pow_block.py": {
        "prepare_random_pow_block": {
            "name": "prepare_random_pow_block",
            "location": 25,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "List[int]",
                    "Dict[str, Any]"
                ],
                "rng": [
                    "str",
                    "List[int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "prepare_random_pow_chain": {
            "name": "prepare_random_pow_chain",
            "location": 33,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "str"
                ],
                "length": [
                    "int",
                    "Callable",
                    "str"
                ],
                "rng": [
                    "int",
                    "str"
                ]
            }
        },
        "PowChain.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "blocks": [
                    "bool",
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "PowChain.__iter__": {
            "name": "__iter__",
            "location": 11,
            "return": [
                "dict",
                "list",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PowChain.head": {
            "name": "head",
            "location": 14,
            "return": [
                "bool",
                "str",
                "Hashable"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "PowChain.to_dict": {
            "name": "to_dict",
            "location": 18,
            "return": [
                "Optional[Dict[str, str]]",
                "Optional['Block']",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/helpers/proposer_slashings.py": {
        "get_min_slashing_penalty_quotient": {
            "name": "get_min_slashing_penalty_quotient",
            "location": 11,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "spec": [
                    "str"
                ]
            }
        },
        "check_proposer_slashing_effect": {
            "name": "check_proposer_slashing_effect",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "Callable"
                ],
                "pre_state": [
                    "int",
                    "float",
                    "List[int]",
                    "str",
                    "list[int]"
                ],
                "state": [
                    "Callable",
                    "float",
                    "typing.Callable[, ]"
                ],
                "slashed_index": [
                    "Callable",
                    "typing.Callable[, ]",
                    "Union[\"SAONegotiator\", Collection[\"SAONegotiator\"]]",
                    "typing.Collection"
                ],
                "block": [
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "get_valid_proposer_slashing": {
            "name": "get_valid_proposer_slashing",
            "location": 77,
            "return": [
                "str",
                "Union[str, bytes]",
                "bool"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "Optional[str]",
                    "Callable[[dict], None]"
                ],
                "state": [
                    "Callable[[dict], None]",
                    "str",
                    "typing.Callable[dict[, ], None]",
                    "Optional[str]",
                    "None"
                ],
                "random_root": [
                    "bytes",
                    "str",
                    "IO"
                ],
                "slashed_index": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Optional[\"Frame\"]",
                    "int",
                    "Optional[int]",
                    "bool"
                ],
                "slot": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "signed_1": [
                    "bool",
                    "str",
                    "Optional[bool]"
                ],
                "signed_2": [
                    "bool",
                    "str",
                    "Optional[bool]"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/helpers/random.py": {
        "set_some_activations": {
            "name": "set_some_activations",
            "location": 9,
            "return": [
                "list[]",
                "bool",
                "float"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ],
                "state": [
                    "int",
                    "List[int]",
                    "list[int]"
                ],
                "rng": [
                    "int",
                    "state.State"
                ],
                "activation_epoch": [
                    "Sequence[str]",
                    "None",
                    "typing.Sequence[str]"
                ]
            }
        },
        "set_some_new_deposits": {
            "name": "set_some_new_deposits",
            "location": 29,
            "return": [
                "list[]",
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "float"
                ],
                "state": [
                    "int",
                    "str",
                    "bool",
                    "dict[, ]",
                    "dict"
                ],
                "rng": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "exit_random_validators": {
            "name": "exit_random_validators",
            "location": 48,
            "return": [
                "list[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "Optional[Union[int, float]]",
                    "bool"
                ],
                "state": [
                    "int",
                    "bytes",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "rng": [
                    "int",
                    "bool",
                    "float",
                    "random.Random",
                    "list"
                ],
                "fraction": [
                    "float",
                    "int",
                    "Tuple[int, int]",
                    "bool",
                    "Sequence[int]"
                ],
                "exit_epoch": [
                    "Optional[int]",
                    "None",
                    "Optional[Dict[str, Any]]",
                    "int",
                    "Optional[float]",
                    "dict[str, typing.Any]",
                    "Optional[\"Outcome\"]",
                    "float"
                ],
                "withdrawable_epoch": [
                    "Tuple[str, int]",
                    "None",
                    "Optional[\"Outcome\"]",
                    "tuple[typing.Union[str,int]]"
                ],
                "from_epoch": [
                    "None",
                    "int",
                    "Optional[int]",
                    "float",
                    "Union[int, None]",
                    "list[\"Issue\"]",
                    "Optional[float]",
                    "List[\"Issue\"]"
                ]
            }
        },
        "slash_random_validators": {
            "name": "slash_random_validators",
            "location": 88,
            "return": [
                "list[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "spec": [
                    "int"
                ],
                "state": [
                    "List[int]",
                    "list[int]",
                    "Dict[int, bool]",
                    "int",
                    "dict[int, bool]",
                    "List[float]",
                    "list[float]",
                    "Sequence[T]",
                    "typing.Sequence[T]"
                ],
                "rng": [
                    "List[int]",
                    "int",
                    "dict"
                ],
                "fraction": [
                    "float",
                    "List[int]",
                    "int",
                    "dict"
                ]
            }
        },
        "randomize_epoch_participation": {
            "name": "randomize_epoch_participation",
            "location": 99,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "float",
                    "raiden.transfer.state.ChainState",
                    "Optional[dict]"
                ],
                "state": [
                    "dict[, ]",
                    "dict",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ],
                "epoch": [
                    "dict[, ]",
                    "dict",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ],
                "rng": [
                    "bool",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "int",
                    "state.State",
                    "Callable"
                ]
            }
        },
        "randomize_previous_epoch_participation": {
            "name": "randomize_previous_epoch_participation",
            "location": 150,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ],
                "state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ],
                "rng": [
                    "str"
                ]
            }
        },
        "randomize_attestation_participation": {
            "name": "randomize_attestation_participation",
            "location": 159,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ],
                "state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ],
                "rng": []
            }
        },
        "randomize_state": {
            "name": "randomize_state",
            "location": 165,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "raiden.transfer.state.ChainState",
                    "dict[, ]",
                    "Optional[dict]",
                    "None",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "raiden.transfer.state.ChainState",
                    "dict[, ]",
                    "Optional[dict]",
                    "None",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "rng": [
                    "raiden.transfer.state.ChainState",
                    "dict[, ]",
                    "Optional[dict]",
                    "None",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "exit_fraction": [
                    "float",
                    "Callable",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "str"
                ],
                "slash_fraction": [
                    "float",
                    "Callable",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "str"
                ]
            }
        },
        "patch_state_to_non_leaking": {
            "name": "patch_state_to_non_leaking",
            "location": 172,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "Callable",
                    "float"
                ],
                "state": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "randomize_epoch_participation.set_flag": {
            "name": "set_flag",
            "location": 128,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "index": [
                    "list"
                ],
                "value": [
                    "List[List[str]]",
                    "float",
                    "int",
                    "dict",
                    "str",
                    "Optional"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/helpers/rewards.py": {
        "get_inactivity_penalty_quotient": {
            "name": "get_inactivity_penalty_quotient",
            "location": 24,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "spec": [
                    "raiden.utils.ProportionalFeeAmount",
                    "raiden.utils.BlockSpecification"
                ]
            }
        },
        "has_enough_for_reward": {
            "name": "has_enough_for_reward",
            "location": 33,
            "return": [
                "bool",
                "int",
                "str",
                "Iterable[int]",
                "Callable"
            ],
            "arguments": {
                "spec": [
                    "raiden.transfer.state.ChainState",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ],
                "state": [
                    "raiden.transfer.state.ChainState",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ],
                "index": [
                    "raiden.transfer.state.ChainState",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "has_enough_for_leak_penalty": {
            "name": "has_enough_for_leak_penalty",
            "location": 46,
            "return": [
                "bool",
                "int",
                "dict"
            ],
            "arguments": {
                "spec": [
                    "raiden.transfer.state.ChainState",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.utils.TokenNetworkAddress"
                ],
                "state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState",
                    "raiden.utils.Dict[str, raiden.utils.Any]"
                ],
                "index": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState",
                    "raiden.utils.Dict[str, raiden.utils.Any]"
                ]
            }
        },
        "run_deltas": {
            "name": "run_deltas",
            "location": 66,
            "return": [
                "",
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ],
                "state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "deltas_name_to_flag_index": {
            "name": "deltas_name_to_flag_index",
            "location": 115,
            "return": [
                "str",
                "bool",
                "List[str]",
                "int"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "deltas_name": [
                    "str",
                    "Union[str, Tuple[str, ...]]",
                    "tuple[typing.Union[str,...]]"
                ]
            }
        },
        "run_attestation_component_deltas": {
            "name": "run_attestation_component_deltas",
            "location": 125,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[list[typing.Any],str,Deltas]]]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "Optional[str]",
                    "Optional[float]"
                ],
                "state": [
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "bool",
                    "Callable"
                ],
                "component_delta_fn": [
                    "str",
                    "raiden.utils.TokenAmount",
                    "float",
                    "int"
                ],
                "matching_att_fn": [
                    "int",
                    "str",
                    "bool",
                    "list[str]",
                    "List[str]"
                ],
                "deltas_name": [
                    "list[typing.Any]",
                    "str",
                    "Optional[List[Any]]",
                    "int",
                    "Optional[bool]"
                ]
            }
        },
        "run_get_inclusion_delay_deltas": {
            "name": "run_get_inclusion_delay_deltas",
            "location": 174,
            "return": [
                "typing.Generator[tuple[typing.Union[typing.Text,Deltas]]]",
                "Iterator[object]",
                "None",
                "Union[tuple, list]",
                "bool",
                "Set[str]"
            ],
            "arguments": {
                "spec": [
                    "raiden.utils.Address",
                    "raiden.utils.NetworkTimeout",
                    "raiden.utils.Callable"
                ],
                "state": [
                    "List[int]",
                    "list[int]",
                    "List[List[int]]",
                    "list[list[int]]"
                ]
            }
        },
        "run_get_inactivity_penalty_deltas": {
            "name": "run_get_inactivity_penalty_deltas",
            "location": 223,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,Deltas]]]"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "raiden.utils.TokenNetworkRegistryAddress"
                ]
            }
        },
        "transition_state_to_leak": {
            "name": "transition_state_to_leak",
            "location": 282,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "dict[, ]",
                    "raiden.transfer.state.ChainState",
                    "None",
                    "Optional[dict]",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.utils.SecretHash"
                ],
                "state": [
                    "str",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.TargetAddress"
                ],
                "epochs": [
                    "Iterable[Callable]",
                    "None",
                    "prefecengine.state.Cached",
                    "typing.Iterable[typing.Callable[, ]]",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "leaking": {
            "name": "leaking",
            "location": 296,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "epochs": [
                    "int",
                    "None",
                    "str",
                    "Iterable['Context']",
                    "typing.Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "run_test_empty": {
            "name": "run_test_empty",
            "location": 316,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "list[list[typing.Any]]",
                    "state.State",
                    "str",
                    "list[list[str]]",
                    "List[List[Any]]",
                    "typing.Callable[, ]",
                    "List[List[str]]",
                    "Callable",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ],
                "state": [
                    "list[list[typing.Any]]",
                    "state.State",
                    "str",
                    "list[list[str]]",
                    "List[List[Any]]",
                    "typing.Callable[, ]",
                    "List[List[str]]",
                    "Callable",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "run_test_full_all_correct": {
            "name": "run_test_full_all_correct",
            "location": 322,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "raiden.utils.TokenNetworkID",
                    "str",
                    "int",
                    "Optional[str]",
                    "None",
                    "List[raiden.utils.Address]",
                    "list[raiden.utils.Address]"
                ],
                "state": [
                    "raiden.utils.TokenNetworkID",
                    "str",
                    "int",
                    "Optional[str]",
                    "None",
                    "List[raiden.utils.Address]",
                    "list[raiden.utils.Address]"
                ]
            }
        },
        "run_test_full_but_partial_participation": {
            "name": "run_test_full_but_partial_participation",
            "location": 328,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.utils.TokenNetworkAddress"
                ],
                "state": [
                    "bytes",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "state.State",
                    "raiden.transfer.state.ChainState"
                ],
                "rng": [
                    "Optional[List[Any]]",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "str",
                    "Dict[str, Union[str, int, bool]]",
                    "bool"
                ]
            }
        },
        "run_test_partial": {
            "name": "run_test_partial",
            "location": 342,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.utils.TokenNetworkAddress"
                ],
                "state": [
                    "list[int]",
                    "List[int]",
                    "raiden.transfer.state.ChainState",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ],
                "fraction_filled": [
                    "int",
                    "DefaultDict[int, List[int]]",
                    "typing.DefaultDict",
                    "Tuple[int]",
                    "tuple[int]",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "run_test_half_full": {
            "name": "run_test_half_full",
            "location": 356,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "bool",
                    "cmk.gui.utils.html.HTML"
                ],
                "state": [
                    "int",
                    "bool",
                    "cmk.gui.utils.html.HTML"
                ]
            }
        },
        "run_test_one_attestation_one_correct": {
            "name": "run_test_one_attestation_one_correct",
            "location": 360,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "raiden.utils.TokenNetworkID",
                    "str",
                    "None",
                    "list[raiden.utils.Address]",
                    "raiden.transfer.state.ChainState",
                    "raiden.utils.Address",
                    "Optional[str]",
                    "List[raiden.utils.Address]"
                ],
                "state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.utils.SecretHash",
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "raiden.utils.TokenNetworkAddress"
                ]
            }
        },
        "run_test_with_not_yet_activated_validators": {
            "name": "run_test_with_not_yet_activated_validators",
            "location": 369,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "typing.IO",
                    "IO",
                    "float",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "dict[, ]",
                    "None",
                    "Optional[dict]",
                    "raiden.utils.TokenNetworkRegistryAddress"
                ],
                "state": [
                    "typing.IO",
                    "IO",
                    "float",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "dict[, ]",
                    "None",
                    "Optional[dict]",
                    "raiden.utils.TokenNetworkRegistryAddress"
                ],
                "rng": [
                    "list[str]",
                    "List[str]",
                    "str",
                    "None",
                    "Optional[\"UtilityFunction\"]",
                    "Optional[str]",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict"
                ]
            }
        },
        "run_test_with_exited_validators": {
            "name": "run_test_with_exited_validators",
            "location": 376,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.SecretHash",
                    "raiden.transfer.state.ChainState"
                ],
                "state": [
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.SecretHash",
                    "raiden.transfer.state.ChainState"
                ],
                "rng": [
                    "list[list[typing.Any]]",
                    "List[List[Any]]",
                    "list[list[str]]",
                    "List[List[str]]",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "run_test_with_slashed_validators": {
            "name": "run_test_with_slashed_validators",
            "location": 383,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "raiden.utils.TokenNetworkAddress",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ],
                "state": [
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "raiden.utils.TokenNetworkAddress",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ],
                "rng": [
                    "list[dict[str, typing.Any]]",
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "raiden.transfer.state.ChainState",
                    "raiden.utils.TokenNetworkAddress",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "run_test_some_very_low_effective_balances_that_attested": {
            "name": "run_test_some_very_low_effective_balances_that_attested",
            "location": 392,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "raiden.utils.TokenNetworkID",
                    "list[raiden.utils.Address]",
                    "str",
                    "None",
                    "List[raiden.utils.Address]",
                    "tests.pathfinding.utils.SimpleReachabilityContainer",
                    "Optional[str]",
                    "raiden.transfer.state.ChainState"
                ],
                "state": [
                    "list[int]",
                    "List[int]",
                    "list[float]",
                    "List[float]",
                    "typing.DefaultDict",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "DefaultDict[int, List[int]]"
                ]
            }
        },
        "run_test_some_very_low_effective_balances_that_did_not_attest": {
            "name": "run_test_some_very_low_effective_balances_that_did_not_attest",
            "location": 403,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.utils.TokenNetworkAddress"
                ],
                "state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "run_test_full_fraction_incorrect": {
            "name": "run_test_full_fraction_incorrect",
            "location": 422,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "raiden.utils.TokenNetworkID",
                    "str",
                    "None",
                    "list[raiden.utils.Address]",
                    "raiden.transfer.state.ChainState",
                    "raiden.utils.Address",
                    "Optional[str]",
                    "List[raiden.utils.Address]"
                ],
                "state": [
                    "Tuple[int]",
                    "tuple[int]",
                    "int",
                    "List[int]",
                    "list[int]"
                ],
                "correct_target": [
                    "dict",
                    "str",
                    "dict[, ]"
                ],
                "correct_head": [
                    "dict",
                    "str",
                    "dict[, ]"
                ],
                "fraction_incorrect": [
                    "int",
                    "Tuple[int]"
                ]
            }
        },
        "run_test_full_delay_one_slot": {
            "name": "run_test_full_delay_one_slot",
            "location": 436,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "raiden.utils.TokenNetworkID",
                    "str",
                    "None",
                    "list[raiden.utils.Address]",
                    "raiden.transfer.state.ChainState",
                    "raiden.utils.Address",
                    "Optional[str]",
                    "List[raiden.utils.Address]"
                ],
                "state": [
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.SecretHash"
                ]
            }
        },
        "run_test_full_delay_max_slots": {
            "name": "run_test_full_delay_max_slots",
            "location": 444,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "raiden.transfer.state.ChainState",
                    "raiden.utils.TokenNetworkID",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ],
                "state": [
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.SecretHash"
                ]
            }
        },
        "run_test_full_mixed_delay": {
            "name": "run_test_full_mixed_delay",
            "location": 452,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState"
                ],
                "state": [
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.SecretHash"
                ],
                "rng": [
                    "int",
                    "Tuple[int]",
                    "tuple[int]"
                ]
            }
        },
        "run_test_proposer_not_in_attestations": {
            "name": "run_test_proposer_not_in_attestations",
            "location": 460,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "dict[str, typing.Any]",
                    "raiden.utils.TokenNetworkID",
                    "bool",
                    "None",
                    "Optional[Dict[str, Any]]",
                    "raiden.utils.List[raiden.utils.TokenAddress]",
                    "raiden.utils.PaymentNetworkID"
                ],
                "state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.utils.TokenNetworkRegistryAddress"
                ]
            }
        },
        "run_test_duplicate_attestations_at_later_slots": {
            "name": "run_test_duplicate_attestations_at_later_slots",
            "location": 475,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "raiden.utils.TokenNetworkID",
                    "str",
                    "None",
                    "list[raiden.utils.Address]",
                    "raiden.transfer.state.ChainState",
                    "raiden.utils.Address",
                    "Optional[str]",
                    "List[raiden.utils.Address]"
                ],
                "state": [
                    "list[int]",
                    "List[int]",
                    "raiden.transfer.state.ChainState",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "run_test_all_balances_too_low_for_reward": {
            "name": "run_test_all_balances_too_low_for_reward",
            "location": 509,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str"
                ],
                "state": [
                    "List[Tuple[int, int]]",
                    "list[tuple[typing.Union[int,int]]]",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]",
                    "dict",
                    "dict[, ]",
                    "int",
                    "set",
                    "set[]",
                    "list",
                    "list[]",
                    "Union[List[str], List[Any]]",
                    "list[str]"
                ]
            }
        },
        "run_test_full_random": {
            "name": "run_test_full_random",
            "location": 518,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "str",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ],
                "state": [
                    "float",
                    "str",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ],
                "rng": [
                    "tuple[int]",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "Tuple[int]"
                ]
            }
        },
        "leaking.deco": {
            "name": "deco",
            "location": 297,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "run_deltas.get_source_deltas": {
            "name": "get_source_deltas",
            "location": 80,
            "return": [
                "str",
                "Optional[cmk.utils.type_defs.HostAddress]",
                "Sequence[str]",
                "bool",
                "IO"
            ],
            "arguments": {
                "state": [
                    "raiden.transfer.state.ChainState",
                    "raiden.utils.SecretHash",
                    "raiden.utils.TokenNetworkID"
                ]
            }
        },
        "run_deltas.get_head_deltas": {
            "name": "get_head_deltas",
            "location": 83,
            "return": [
                "Optional[str]",
                "str",
                "Sequence[str]",
                "bytes",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "state": [
                    "List[int]",
                    "raiden.utils.Address",
                    "Optional[bool]",
                    "int",
                    "float"
                ]
            }
        },
        "run_deltas.get_target_deltas": {
            "name": "get_target_deltas",
            "location": 86,
            "return": [
                "Optional[str]",
                "str",
                "Sequence[str]",
                "bytes",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "state": [
                    "List[int]",
                    "raiden.utils.Address",
                    "Optional[bool]",
                    "int",
                    "float"
                ]
            }
        },
        "leaking.deco.entry": {
            "name": "entry",
            "location": 298,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/helpers/shard_block.py": {
        "sign_shard_block": {
            "name": "sign_shard_block",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "raiden.utils.BlockNumber",
                    "raiden.utils.AddressHex",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.SecretHash",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.PaymentNetworkID"
                ],
                "beacon_state": [
                    "str",
                    "raiden.utils.BlockNumber",
                    "raiden.utils.AddressHex",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.SecretHash",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.PaymentNetworkID"
                ],
                "shard": [
                    "bool",
                    "raiden.utils.FeeAmount",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.PaymentID",
                    "raiden.utils.PaymentHashInvoice",
                    "raiden.utils.TargetAddress",
                    "raiden.utils.SecreHash",
                    "raiden.utils.PaymentAmount"
                ],
                "block": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "proposer_index": [
                    "Optional[str]",
                    "None",
                    "Optional[float]",
                    "str",
                    "bool",
                    "raiden.utils.Secret",
                    "float",
                    "Optional[List[int]]",
                    "list[int]"
                ]
            }
        },
        "build_shard_block": {
            "name": "build_shard_block",
            "location": 19,
            "return": [
                "str",
                "Iterable[int]",
                "List[List[str]]"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.Locksroot"
                ],
                "beacon_state": [
                    "None",
                    "raiden.utils.InitiatorAddress",
                    "raiden.utils.Address",
                    "raiden.utils.ChannelID",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.Optional[raiden.utils.Address]",
                    "raiden.utils.TokenNetworkID"
                ],
                "shard": [
                    "None",
                    "raiden.utils.Address",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.PaymentNetworkID",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.BlockNumber",
                    "raiden.utils.InitiatorAddress",
                    "raiden.utils.Optional[raiden.utils.Address]"
                ],
                "slot": [
                    "None",
                    "raiden.utils.BlockHash",
                    "raiden.utils.Secret",
                    "Optional[\"DiscountCodeState\"]",
                    "raiden.utils.PaymentNetworkID",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.BlockSpecification"
                ],
                "body": [
                    "Dict[type, Any]",
                    "None",
                    "str",
                    "int",
                    "dict[typing.Type, typing.Any]",
                    "dict",
                    "bool",
                    "dict[, ]",
                    "List[str]",
                    "list[str]"
                ],
                "shard_parent_state": [
                    "None",
                    "list[raiden.utils.Address]",
                    "raiden.utils.PaymentNetworkID",
                    "list[set[int]]",
                    "raiden.utils.TokenAddress",
                    "List[raiden.utils.Address]",
                    "raiden.utils.SecreHash",
                    "raiden.utils.SecretHash",
                    "raiden.utils.BlockHash",
                    "raiden.utils.Address",
                    "List[Set[int]]"
                ],
                "signed": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "int"
                ]
            }
        },
        "get_shard_transitions": {
            "name": "get_shard_transitions",
            "location": 55,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "spec": [
                    "raiden.utils.AddressHex",
                    "raiden.utils.AdditionalHash",
                    "raiden.utils.BalanceHash",
                    "raiden.utils.Nonce",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.PaymentNetworkID",
                    "raiden.utils.BlockNumber"
                ],
                "parent_beacon_state": [
                    "bool",
                    "None",
                    "Optional[int]",
                    "raiden.utils.AddressHex"
                ],
                "shard_block_dict": [
                    "bool",
                    "type",
                    "str"
                ]
            }
        },
        "get_committee_index_of_shard": {
            "name": "get_committee_index_of_shard",
            "location": 76,
            "return": [
                "None",
                "Optional[str]",
                "Optional[bool]",
                "Optional[float]"
            ],
            "arguments": {
                "spec": [],
                "state": [],
                "slot": [
                    "Optional[dict]",
                    "dict[, ]",
                    "None"
                ],
                "shard": [
                    "List[int]",
                    "list[int]",
                    "int",
                    "Tuple[int]",
                    "tuple[int]"
                ]
            }
        },
        "get_sample_shard_block_body": {
            "name": "get_sample_shard_block_body",
            "location": 86,
            "return": [
                "bytes",
                "Callable",
                "int"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "is_max": [
                    "bool",
                    "int",
                    "Optional[float]"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/helpers/state.py": {
        "get_balance": {
            "name": "get_balance",
            "location": 6,
            "return": [
                "int",
                "float",
                "str",
                "bool"
            ],
            "arguments": {
                "state": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "Dict[\"core.Edge\", \"state.State\"]",
                    "dict[\"core.Edge\", \"state.State\"]"
                ],
                "index": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "Dict[\"core.Edge\", \"state.State\"]",
                    "dict[\"core.Edge\", \"state.State\"]"
                ]
            }
        },
        "next_slot": {
            "name": "next_slot",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "int"
                ],
                "state": [
                    "int"
                ]
            }
        },
        "next_slots": {
            "name": "next_slots",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "int"
                ],
                "state": [
                    "int"
                ],
                "slots": [
                    "int"
                ]
            }
        },
        "transition_to": {
            "name": "transition_to",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "bool"
                ],
                "slot": [
                    "bool",
                    "dict[, ]",
                    "int",
                    "dict"
                ]
            }
        },
        "transition_to_slot_via_block": {
            "name": "transition_to_slot_via_block",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "list[\"Block\"]",
                    "bool",
                    "List[\"Block\"]"
                ],
                "state": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "slot": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "transition_to_valid_shard_slot": {
            "name": "transition_to_valid_shard_slot",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "next_epoch": {
            "name": "next_epoch",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "next_epoch_via_block": {
            "name": "next_epoch_via_block",
            "location": 62,
            "return": [
                "T",
                "str"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "Sequence[str]"
                ],
                "insert_state_root": [
                    "bool",
                    "Optional[Mapping[str, Any]]",
                    "int",
                    "Sequence[str]",
                    "Sequence[Sequence[str]]",
                    "Sequence[Tuple[str, int]]",
                    "Mapping"
                ]
            }
        },
        "next_epoch_via_signed_block": {
            "name": "next_epoch_via_signed_block",
            "location": 72,
            "return": [
                "Callable[[str], str]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "spec": [
                    "int"
                ],
                "state": [
                    "int"
                ]
            }
        },
        "get_state_root": {
            "name": "get_state_root",
            "location": 77,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "spec": [
                    "int"
                ],
                "state": [
                    "int"
                ],
                "slot": [
                    "int"
                ]
            }
        },
        "state_transition_and_sign_block": {
            "name": "state_transition_and_sign_block",
            "location": 85,
            "return": [
                "Container[T]",
                "dict",
                "Callable[[str], str]"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "str",
                    "bytes"
                ],
                "state": [
                    "int",
                    "Iterable[str]"
                ],
                "block": [
                    "int",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ],
                "expect_fail": [
                    "bool",
                    "Iterable[Tuple[int, int]]",
                    "List[str]",
                    "str",
                    "List[Dict[str, Any]]",
                    "list"
                ]
            }
        },
        "_set_full_participation": {
            "name": "_set_full_participation",
            "location": 103,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [],
                "state": [
                    "List[int]",
                    "bytes",
                    "list[int]",
                    "List[List[int]]",
                    "list[list[int]]"
                ],
                "current": [
                    "bool",
                    "list",
                    "str",
                    "Callable[[List], List[str]]",
                    "Sequence[Tuple[str, int]]"
                ],
                "previous": [
                    "bool",
                    "list",
                    "str",
                    "Callable[[List], List[str]]",
                    "Sequence[Tuple[str, int]]"
                ]
            }
        },
        "set_full_participation": {
            "name": "set_full_participation",
            "location": 117,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "rng": [
                    "list",
                    "None",
                    "str",
                    "list[]",
                    "Callable[[List], List[str]]",
                    "Sequence[Tuple[str, int]]",
                    "typing.Callable[list[], list[str]]",
                    "typing.Sequence[tuple[typing.Union[str,int]]]"
                ]
            }
        },
        "set_full_participation_previous_epoch": {
            "name": "set_full_participation_previous_epoch",
            "location": 121,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "Sequence[Sequence[str]]",
                    "typing.Sequence[typing.Sequence[str]]",
                    "Sequence[Tuple[str, int]]",
                    "typing.Sequence[tuple[typing.Union[str,int]]]",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "state": [
                    "str",
                    "Sequence[Sequence[str]]",
                    "typing.Sequence[typing.Sequence[str]]",
                    "Sequence[Tuple[str, int]]",
                    "typing.Sequence[tuple[typing.Union[str,int]]]",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "rng": [
                    "list",
                    "None",
                    "str",
                    "list[]",
                    "Callable[[List], List[str]]",
                    "Sequence[Tuple[str, int]]",
                    "typing.Callable[list[], list[str]]",
                    "typing.Sequence[tuple[typing.Union[str,int]]]"
                ]
            }
        },
        "_set_empty_participation": {
            "name": "_set_empty_participation",
            "location": 125,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "Callable"
                ],
                "state": [
                    "List[int]",
                    "list[int]",
                    "int",
                    "List[float]",
                    "list[float]",
                    "List[str]",
                    "list[str]"
                ],
                "current": [
                    "bool",
                    "list",
                    "str",
                    "Callable[[List], List[str]]",
                    "Sequence[Tuple[str, int]]"
                ],
                "previous": [
                    "bool",
                    "list",
                    "str",
                    "Callable[[List], List[str]]",
                    "Sequence[Tuple[str, int]]"
                ]
            }
        },
        "set_empty_participation": {
            "name": "set_empty_participation",
            "location": 135,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "rng": [
                    "list",
                    "None",
                    "str",
                    "list[]",
                    "Callable[[List], List[str]]",
                    "Sequence[Tuple[str, int]]",
                    "typing.Callable[list[], list[str]]",
                    "typing.Sequence[tuple[typing.Union[str,int]]]"
                ]
            }
        },
        "ensure_state_has_validators_across_lifecycle": {
            "name": "ensure_state_has_validators_across_lifecycle",
            "location": 139,
            "return": [
                "bool",
                "int",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "spec": [
                    "Dict[\"core.Edge\", \"state.State\"]",
                    "Callable"
                ],
                "state": [
                    "Dict[\"core.Edge\", \"state.State\"]",
                    "dict[\"core.Edge\", \"state.State\"]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "has_active_balance_differential": {
            "name": "has_active_balance_differential",
            "location": 160,
            "return": [
                "bool",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "spec": [
                    "int"
                ],
                "state": [
                    "int"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/helpers/sync_committee.py": {
        "compute_sync_committee_signature": {
            "name": "compute_sync_committee_signature",
            "location": 14,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "dict",
                    "T",
                    "Type[T]"
                ],
                "state": [
                    "int",
                    "bool",
                    "eth2spec.debug.random_value.RandomizationMode"
                ],
                "slot": [
                    "int",
                    "typing.Type",
                    "type",
                    "raiden.utils.BlockIdentifier",
                    "bool"
                ],
                "privkey": [
                    "List[str]",
                    "int",
                    "list[str]",
                    "str",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "Optional[str]",
                    "None"
                ],
                "block_root": [
                    "str",
                    "None",
                    "Optional[str]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "TextIO",
                    "typing.TextIO"
                ],
                "domain_type": [
                    "bool",
                    "None",
                    "T"
                ]
            }
        },
        "compute_aggregate_sync_committee_signature": {
            "name": "compute_aggregate_sync_committee_signature",
            "location": 27,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "spec": [
                    "Tuple[str]",
                    "tuple[str]",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]",
                    "List[Tuple[int, int]]",
                    "int",
                    "list[tuple[typing.Union[int,int]]]",
                    "List[int]",
                    "list[int]",
                    "List[str]",
                    "list[str]"
                ],
                "state": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "Tuple[int, int]",
                    "list[tuple[typing.Union[int,int]]]",
                    "dict[str, list['WantedGallery']]",
                    "List[Tuple[int, int]]",
                    "raiden.utils.BalanceHash",
                    "raiden.utils.Address",
                    "Dict[str, List['WantedGallery']]"
                ],
                "slot": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "Tuple[int, int]",
                    "list[tuple[typing.Union[int,int]]]",
                    "dict[str, list['WantedGallery']]",
                    "List[Tuple[int, int]]",
                    "raiden.utils.BalanceHash",
                    "raiden.utils.Address",
                    "Dict[str, List['WantedGallery']]"
                ],
                "participants": [
                    "List[List[Any]]",
                    "AbstractSet[Any]",
                    "Optional[str]",
                    "List[str]",
                    "int",
                    "List[List[str]]",
                    "List[int]"
                ],
                "block_root": [
                    "int",
                    "None",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]",
                    "List[Tuple[int, int]]",
                    "list[tuple[typing.Union[int,int]]]",
                    "raiden.utils.BalanceHash",
                    "dict[str, list['WantedGallery']]",
                    "raiden.utils.Address",
                    "Dict[str, List['WantedGallery']]"
                ],
                "domain_type": [
                    "int",
                    "None",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]",
                    "List[Tuple[int, int]]",
                    "list[tuple[typing.Union[int,int]]]",
                    "raiden.utils.BalanceHash",
                    "dict[str, list['WantedGallery']]",
                    "raiden.utils.Address",
                    "Dict[str, List['WantedGallery']]"
                ]
            }
        },
        "compute_sync_committee_inclusion_reward": {
            "name": "compute_sync_committee_inclusion_reward",
            "location": 47,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "compute_sync_committee_participant_reward_and_penalty": {
            "name": "compute_sync_committee_participant_reward_and_penalty",
            "location": 55,
            "return": [
                "tuple[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "spec": [
                    "Optional[Tuple[int, ...]]",
                    "tuple[typing.Union[int,...]]",
                    "Callable",
                    "None",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "bool"
                ],
                "participant_index": [
                    "bool"
                ],
                "committee_indices": [
                    "int"
                ],
                "committee_bits": [
                    "int"
                ]
            }
        },
        "compute_sync_committee_proposer_reward": {
            "name": "compute_sync_committee_proposer_reward",
            "location": 69,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "spec": [
                    "raiden.utils.TokenNetworkRegistryAddress"
                ],
                "state": [
                    "bool"
                ],
                "committee_indices": [
                    "dict",
                    "dict[, ]"
                ],
                "committee_bits": [
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "compute_committee_indices": {
            "name": "compute_committee_indices",
            "location": 77,
            "return": [
                "bool",
                "list[int]"
            ],
            "arguments": {
                "spec": [
                    "dict",
                    "dict[, ]"
                ],
                "state": [
                    "Tuple[int]",
                    "int",
                    "tuple[int]"
                ],
                "committee": [
                    "Union[str, Callable[[], str]]",
                    "Union[int, float, None]",
                    "None",
                    "Iterable[Callable]",
                    "str",
                    "typing.Callable[[], str]",
                    "int",
                    "float",
                    "typing.Iterable[typing.Callable[, ]]"
                ]
            }
        },
        "validate_sync_committee_rewards": {
            "name": "validate_sync_committee_rewards",
            "location": 87,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "typing.Callable[, ]",
                    "raiden.utils.TokenAmount",
                    "Callable"
                ],
                "pre_state": [
                    "typing.Callable[, ]",
                    "raiden.utils.TokenAmount",
                    "Callable"
                ],
                "post_state": [
                    "List[int]",
                    "int",
                    "list[int]",
                    "str",
                    "bytes",
                    "Set[int]",
                    "set[int]"
                ],
                "committee_indices": [
                    "int",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.Secret"
                ],
                "committee_bits": [
                    "typing.Callable[, ]",
                    "raiden.utils.TokenAmount",
                    "Callable"
                ],
                "proposer_index": [
                    "List[str]",
                    "list[str]",
                    "str",
                    "List[List[Any]]",
                    "list[list[typing.Any]]"
                ]
            }
        },
        "run_sync_committee_processing": {
            "name": "run_sync_committee_processing",
            "location": 113,
            "return": [
                "",
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[tuple[typing.Optional[typing.Text]]]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "None",
                    "int",
                    "Optional[int]"
                ],
                "state": [
                    "Tuple[str, int]",
                    "int"
                ],
                "block": [
                    "bool",
                    "None",
                    "Optional[int]",
                    "Optional[\"PNSqlCursor\"]"
                ],
                "expect_exception": [
                    "bool",
                    "str"
                ]
            }
        },
        "_build_block_for_next_slot_with_sync_participation": {
            "name": "_build_block_for_next_slot_with_sync_participation",
            "location": 148,
            "return": [
                "str",
                "Type[T]",
                "int",
                "BaseException"
            ],
            "arguments": {
                "spec": [
                    "mode.utils.Counter[faustypes.TP]",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.TargetAddress"
                ],
                "state": [
                    "mode.utils.Counter[faustypes.TP]",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.TargetAddress"
                ],
                "committee_indices": [
                    "str",
                    "bool",
                    "dict[typing.Hashable, typing.Any]",
                    "Dict[Hashable, Any]",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "int"
                ],
                "committee_bits": [
                    "str",
                    "bool",
                    "dict[typing.Hashable, typing.Any]",
                    "Dict[Hashable, Any]",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "run_successful_sync_committee_test": {
            "name": "run_successful_sync_committee_test",
            "location": 163,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": [],
                "committee_indices": [
                    "str",
                    "Dict[\"core.Edge\", \"state.State\"]",
                    "dict[\"core.Edge\", \"state.State\"]"
                ],
                "committee_bits": [
                    "str",
                    "Dict[\"core.Edge\", \"state.State\"]",
                    "dict[\"core.Edge\", \"state.State\"]"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/helpers/typing.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/helpers/voluntary_exits.py": {
        "prepare_signed_exits": {
            "name": "prepare_signed_exits",
            "location": 6,
            "return": [
                "list[]",
                "int",
                "bool"
            ],
            "arguments": {
                "spec": [
                    "dict",
                    "dict[, ]"
                ],
                "state": [
                    "dict",
                    "dict[, ]"
                ],
                "indices": [
                    "int"
                ]
            }
        },
        "sign_voluntary_exit": {
            "name": "sign_voluntary_exit",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "dict",
                    "dict[, ]"
                ],
                "state": [
                    "float"
                ],
                "voluntary_exit": [
                    "int",
                    "dict",
                    "dict[, ]"
                ],
                "privkey": [
                    "dict",
                    "int",
                    "dict[, ]",
                    "bytes",
                    "List[bytes]",
                    "list[bytes]"
                ]
            }
        },
        "get_exited_validators": {
            "name": "get_exited_validators",
            "location": 32,
            "return": [
                "list[]",
                "List[str]",
                "bool",
                "List[Dict[str, str]]",
                "str",
                "Iterable[str]",
                "List[Tuple[str, bool]]",
                "int"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "str"
                ],
                "state": [
                    "raiden.utils.TokenAddress",
                    "raiden.utils.TargetAddress"
                ]
            }
        },
        "get_unslashed_exited_validators": {
            "name": "get_unslashed_exited_validators",
            "location": 37,
            "return": [
                "list[]",
                "List[Dict[str, str]]",
                "Optional[dict]",
                "list",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "DefaultDict[int, List[int]]",
                    "typing.DefaultDict",
                    "Dict[\"core.Edge\", \"state.State\"]",
                    "dict[\"core.Edge\", \"state.State\"]",
                    "Tuple[int]",
                    "tuple[int]",
                    "List[float]",
                    "list[float]"
                ],
                "state": [
                    "int",
                    "DefaultDict[int, List[int]]",
                    "typing.DefaultDict",
                    "Dict[\"core.Edge\", \"state.State\"]",
                    "dict[\"core.Edge\", \"state.State\"]",
                    "Tuple[int]",
                    "tuple[int]",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "exit_validators": {
            "name": "exit_validators",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "spec": [
                    "int"
                ],
                "state": [
                    "List[int]",
                    "bytes",
                    "list[int]",
                    "List[float]",
                    "list[float]"
                ],
                "validator_count": [
                    "List[int]",
                    "bytes",
                    "list[int]"
                ],
                "rng": [
                    "int",
                    "None",
                    "Sequence[Sequence[str]]",
                    "Sequence[Tuple[str, int]]",
                    "typing.Sequence[typing.Sequence[str]]",
                    "typing.Sequence[tuple[typing.Union[str,int]]]"
                ]
            }
        },
        "prepare_signed_exits.create_signed_exit": {
            "name": "create_signed_exit",
            "location": 9,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "index": [
                    "str",
                    "bool",
                    "Sequence[str]"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/helpers/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/helpers/altair/fork.py": {
        "run_fork_test": {
            "name": "run_fork_test",
            "location": 6,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,bool,typing.Type]]]",
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {
                "post_spec": [],
                "pre_state": [
                    "bool",
                    "typing.Type",
                    "int",
                    "Type[T]"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/helpers/altair/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/helpers/bellatrix/fork.py": {
        "run_fork_test": {
            "name": "run_fork_test",
            "location": 6,
            "return": [
                "",
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {
                "post_spec": [],
                "pre_state": []
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/helpers/bellatrix/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/helpers/capella/fork.py": {
        "run_fork_test": {
            "name": "run_fork_test",
            "location": 6,
            "return": [
                "",
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {
                "post_spec": [
                    "int",
                    "float"
                ],
                "pre_state": []
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/phase0/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/phase0/block_processing/test_process_attestation.py": {
        "test_success": {
            "name": "test_success",
            "location": 26,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.NetworkTimeout"
                ],
                "state": [
                    "float",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.NetworkTimeout"
                ]
            }
        },
        "test_success_multi_proposer_index_iterations": {
            "name": "test_success_multi_proposer_index_iterations",
            "location": 37,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "typing.Callable[, ]",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.PaymentNetworkID",
                    "Callable"
                ],
                "state": [
                    "float",
                    "typing.Callable[, ]",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.PaymentNetworkID",
                    "Callable"
                ]
            }
        },
        "test_success_previous_epoch": {
            "name": "test_success_previous_epoch",
            "location": 47,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ],
                "state": [
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ]
            }
        },
        "test_invalid_attestation_signature": {
            "name": "test_invalid_attestation_signature",
            "location": 57,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "typing.Callable[, ]",
                    "float",
                    "Callable",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.NetworkTimeout"
                ],
                "state": [
                    "typing.Callable[, ]",
                    "float",
                    "Callable",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.NetworkTimeout"
                ]
            }
        },
        "test_empty_participants_zeroes_sig": {
            "name": "test_empty_participants_zeroes_sig",
            "location": 67,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.transfer.state.ChainState"
                ],
                "state": [
                    "float",
                    "raiden.utils.NetworkTimeout",
                    "raiden.utils.TokenAddress"
                ]
            }
        },
        "test_empty_participants_seemingly_valid_sig": {
            "name": "test_empty_participants_seemingly_valid_sig",
            "location": 78,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "Callable"
                ],
                "state": [
                    "float",
                    "typing.Callable[, ]",
                    "raiden.utils.NetworkTimeout",
                    "Callable"
                ]
            }
        },
        "test_before_inclusion_delay": {
            "name": "test_before_inclusion_delay",
            "location": 89,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "float",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenAddress"
                ],
                "state": [
                    "bool",
                    "float",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenAddress"
                ]
            }
        },
        "test_after_epoch_slots": {
            "name": "test_after_epoch_slots",
            "location": 98,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.transfer.state.ChainState",
                    "raiden.utils.TokenNetworkID"
                ],
                "state": [
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.transfer.state.ChainState",
                    "raiden.utils.TokenNetworkID"
                ]
            }
        },
        "test_old_source_epoch": {
            "name": "test_old_source_epoch",
            "location": 109,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.Address",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.PaymentNetworkID"
                ],
                "state": [
                    "typing.Callable[, ]",
                    "raiden.utils.Callable",
                    "Callable",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.PaymentNetworkID",
                    "raiden.utils.SecreRegistryAddress"
                ]
            }
        },
        "test_wrong_index_for_committee_signature": {
            "name": "test_wrong_index_for_committee_signature",
            "location": 130,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "typing.Callable[, ]",
                    "float",
                    "Callable",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.NetworkTimeout"
                ],
                "state": [
                    "typing.Callable[, ]",
                    "float",
                    "Callable",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.NetworkTimeout"
                ]
            }
        },
        "reduce_state_committee_count_from_max": {
            "name": "reduce_state_committee_count_from_max",
            "location": 139,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "raiden.transfer.state.ChainState",
                    "raiden.utils.PaymentNetworkID",
                    "raiden.utils.TokenAddress"
                ],
                "state": [
                    "str",
                    "raiden.transfer.state.ChainState",
                    "raiden.utils.PaymentNetworkID",
                    "raiden.utils.TokenAddress"
                ]
            }
        },
        "test_wrong_index_for_slot_0": {
            "name": "test_wrong_index_for_slot_0",
            "location": 151,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "list[raiden.utils.Address]",
                    "float",
                    "raiden.utils.NetworkTimeout",
                    "List[raiden.utils.Address]"
                ],
                "state": [
                    "list[raiden.utils.Address]",
                    "float",
                    "raiden.utils.NetworkTimeout",
                    "List[raiden.utils.Address]"
                ]
            }
        },
        "test_wrong_index_for_slot_1": {
            "name": "test_wrong_index_for_slot_1",
            "location": 166,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.transfer.state.ChainState"
                ],
                "state": [
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "test_invalid_index": {
            "name": "test_invalid_index",
            "location": 184,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "list[raiden.utils.Address]",
                    "List[raiden.utils.Address]",
                    "typing.Callable[, ]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenNetworkID",
                    "Callable"
                ],
                "state": [
                    "typing.Callable[, ]",
                    "float",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.NetworkTimeout"
                ]
            }
        },
        "test_mismatched_target_and_slot": {
            "name": "test_mismatched_target_and_slot",
            "location": 196,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "raiden.utils.NetworkTimeout",
                    "dict[str, typing.Any]",
                    "None",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.PaymentNetworkID",
                    "Optional[Dict[str, Any]]"
                ],
                "state": []
            }
        },
        "test_old_target_epoch": {
            "name": "test_old_target_epoch",
            "location": 210,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "float",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "list[raiden.utils.Address]",
                    "typing.Callable[, ]",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.TokenNetworkID",
                    "List[raiden.utils.Address]",
                    "Callable"
                ]
            }
        },
        "test_future_target_epoch": {
            "name": "test_future_target_epoch",
            "location": 222,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": []
            }
        },
        "test_new_source_epoch": {
            "name": "test_new_source_epoch",
            "location": 244,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "typing.Callable[, ]",
                    "float",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable",
                    "raiden.utils.NetworkTimeout"
                ],
                "state": [
                    "typing.Callable[, ]",
                    "float",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable",
                    "raiden.utils.NetworkTimeout"
                ]
            }
        },
        "test_source_root_is_target_root": {
            "name": "test_source_root_is_target_root",
            "location": 257,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "raiden.transfer.state.ChainState",
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ],
                "state": [
                    "raiden.transfer.state.ChainState",
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ]
            }
        },
        "test_invalid_current_source_root": {
            "name": "test_invalid_current_source_root",
            "location": 270,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "raiden.utils.Address",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.PaymentNetworkID",
                    "Callable",
                    "float",
                    "raiden.utils.Callable"
                ],
                "state": [
                    "typing.Callable[, ]",
                    "float",
                    "raiden.utils.Callable",
                    "Callable",
                    "raiden.utils.SecreRegistryAddress",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.PaymentNetworkID"
                ]
            }
        },
        "test_invalid_previous_source_root": {
            "name": "test_invalid_previous_source_root",
            "location": 297,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "raiden.utils.Address",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.PaymentNetworkID",
                    "Callable",
                    "float",
                    "raiden.utils.Callable"
                ],
                "state": [
                    "typing.Callable[, ]",
                    "float",
                    "raiden.utils.Callable",
                    "Callable",
                    "raiden.utils.SecreRegistryAddress",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.PaymentNetworkID"
                ]
            }
        },
        "test_bad_source_root": {
            "name": "test_bad_source_root",
            "location": 323,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "typing.Callable[, ]",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.PaymentNetworkID",
                    "raiden.utils.NetworkTimeout",
                    "Callable"
                ],
                "state": [
                    "typing.Callable[, ]",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.PaymentNetworkID",
                    "raiden.utils.NetworkTimeout",
                    "Callable"
                ]
            }
        },
        "test_too_many_aggregation_bits": {
            "name": "test_too_many_aggregation_bits",
            "location": 336,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.NetworkTimeout"
                ],
                "state": [
                    "float",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.NetworkTimeout"
                ]
            }
        },
        "test_too_few_aggregation_bits": {
            "name": "test_too_few_aggregation_bits",
            "location": 348,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "typing.Callable[, ]",
                    "float",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.NetworkTimeout",
                    "raiden.utils.TokenNetworkID",
                    "Callable"
                ],
                "state": [
                    "float",
                    "typing.Callable[, ]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.NetworkTimeout",
                    "Callable"
                ]
            }
        },
        "test_correct_min_inclusion_delay": {
            "name": "test_correct_min_inclusion_delay",
            "location": 369,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.NetworkTimeout"
                ],
                "state": [
                    "float",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.NetworkTimeout"
                ]
            }
        },
        "test_correct_sqrt_epoch_delay": {
            "name": "test_correct_sqrt_epoch_delay",
            "location": 378,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "list[raiden.utils.Address]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.TokenAddress",
                    "List[raiden.utils.Address]",
                    "raiden.utils.NetworkTimeout"
                ],
                "state": [
                    "float",
                    "list[raiden.utils.Address]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.TokenAddress",
                    "List[raiden.utils.Address]",
                    "raiden.utils.NetworkTimeout"
                ]
            }
        },
        "test_correct_epoch_delay": {
            "name": "test_correct_epoch_delay",
            "location": 387,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "list[raiden.utils.Address]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.TokenAddress",
                    "List[raiden.utils.Address]",
                    "raiden.utils.NetworkTimeout"
                ],
                "state": [
                    "float",
                    "list[raiden.utils.Address]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.TokenAddress",
                    "List[raiden.utils.Address]",
                    "raiden.utils.NetworkTimeout"
                ]
            }
        },
        "test_correct_after_epoch_delay": {
            "name": "test_correct_after_epoch_delay",
            "location": 396,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "list[raiden.utils.Address]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.TokenAddress",
                    "List[raiden.utils.Address]",
                    "raiden.utils.NetworkTimeout"
                ],
                "state": [
                    "float",
                    "list[raiden.utils.Address]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.TokenAddress",
                    "List[raiden.utils.Address]",
                    "raiden.utils.NetworkTimeout"
                ]
            }
        },
        "test_incorrect_head_min_inclusion_delay": {
            "name": "test_incorrect_head_min_inclusion_delay",
            "location": 411,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.NetworkTimeout"
                ],
                "state": [
                    "float",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.NetworkTimeout"
                ]
            }
        },
        "test_incorrect_head_sqrt_epoch_delay": {
            "name": "test_incorrect_head_sqrt_epoch_delay",
            "location": 423,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "list[raiden.utils.Address]",
                    "float",
                    "List[raiden.utils.Address]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.TokenAddress"
                ],
                "state": [
                    "list[raiden.utils.Address]",
                    "float",
                    "List[raiden.utils.Address]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.TokenAddress"
                ]
            }
        },
        "test_incorrect_head_epoch_delay": {
            "name": "test_incorrect_head_epoch_delay",
            "location": 435,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "list[raiden.utils.Address]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.TokenAddress",
                    "List[raiden.utils.Address]"
                ],
                "state": [
                    "float",
                    "list[raiden.utils.Address]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.TokenAddress",
                    "List[raiden.utils.Address]"
                ]
            }
        },
        "test_incorrect_head_after_epoch_delay": {
            "name": "test_incorrect_head_after_epoch_delay",
            "location": 447,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "list[raiden.utils.Address]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.TokenAddress",
                    "List[raiden.utils.Address]"
                ],
                "state": [
                    "float",
                    "list[raiden.utils.Address]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.TokenAddress",
                    "List[raiden.utils.Address]"
                ]
            }
        },
        "test_incorrect_head_and_target_min_inclusion_delay": {
            "name": "test_incorrect_head_and_target_min_inclusion_delay",
            "location": 465,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.NetworkTimeout"
                ],
                "state": [
                    "float",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.NetworkTimeout"
                ]
            }
        },
        "test_incorrect_head_and_target_sqrt_epoch_delay": {
            "name": "test_incorrect_head_and_target_sqrt_epoch_delay",
            "location": 478,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "list[raiden.utils.Address]",
                    "float",
                    "List[raiden.utils.Address]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.TokenAddress"
                ],
                "state": [
                    "list[raiden.utils.Address]",
                    "float",
                    "List[raiden.utils.Address]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.TokenAddress"
                ]
            }
        },
        "test_incorrect_head_and_target_epoch_delay": {
            "name": "test_incorrect_head_and_target_epoch_delay",
            "location": 491,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "list[raiden.utils.Address]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.TokenAddress",
                    "List[raiden.utils.Address]"
                ],
                "state": [
                    "float",
                    "list[raiden.utils.Address]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.TokenAddress",
                    "List[raiden.utils.Address]"
                ]
            }
        },
        "test_incorrect_head_and_target_after_epoch_delay": {
            "name": "test_incorrect_head_and_target_after_epoch_delay",
            "location": 504,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "list[raiden.utils.Address]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.TokenAddress",
                    "List[raiden.utils.Address]"
                ],
                "state": [
                    "float",
                    "list[raiden.utils.Address]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.TokenAddress",
                    "List[raiden.utils.Address]"
                ]
            }
        },
        "test_incorrect_target_min_inclusion_delay": {
            "name": "test_incorrect_target_min_inclusion_delay",
            "location": 522,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.NetworkTimeout"
                ],
                "state": [
                    "float",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.NetworkTimeout"
                ]
            }
        },
        "test_incorrect_target_sqrt_epoch_delay": {
            "name": "test_incorrect_target_sqrt_epoch_delay",
            "location": 534,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "list[raiden.utils.Address]",
                    "float",
                    "List[raiden.utils.Address]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.TokenAddress"
                ],
                "state": [
                    "list[raiden.utils.Address]",
                    "float",
                    "List[raiden.utils.Address]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.TokenAddress"
                ]
            }
        },
        "test_incorrect_target_epoch_delay": {
            "name": "test_incorrect_target_epoch_delay",
            "location": 546,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "list[raiden.utils.Address]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.TokenAddress",
                    "List[raiden.utils.Address]"
                ],
                "state": [
                    "float",
                    "list[raiden.utils.Address]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.TokenAddress",
                    "List[raiden.utils.Address]"
                ]
            }
        },
        "test_incorrect_target_after_epoch_delay": {
            "name": "test_incorrect_target_after_epoch_delay",
            "location": 558,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "list[raiden.utils.Address]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.TokenAddress",
                    "List[raiden.utils.Address]"
                ],
                "state": [
                    "float",
                    "list[raiden.utils.Address]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.TokenAddress",
                    "List[raiden.utils.Address]"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/phase0/block_processing/test_process_attester_slashing.py": {
        "run_attester_slashing_processing": {
            "name": "run_attester_slashing_processing",
            "location": 20,
            "return": [
                "Awaitable",
                "typing.Generator[tuple[typing.Union[typing.Text,bool]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,bool,typing.Sequence[int],bytes]]]",
                "typing.Generator[tuple[typing.Optional[typing.Text]]]",
                "None"
            ],
            "arguments": {
                "spec": [],
                "state": [
                    "bool",
                    "int"
                ],
                "attester_slashing": [
                    "bool",
                    "bytes",
                    "Sequence[int]",
                    "typing.Sequence[int]"
                ],
                "valid": [
                    "bool",
                    "Optional[Mapping[str, Any]]",
                    "int",
                    "Sequence[str]",
                    "Sequence[Sequence[str]]",
                    "Sequence[Tuple[str, int]]"
                ]
            }
        },
        "test_success_double": {
            "name": "test_success_double",
            "location": 94,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "aiozipkin.helpers.TraceContext"
                ],
                "state": [
                    "aiozipkin.helpers.TraceContext"
                ]
            }
        },
        "test_success_surround": {
            "name": "test_success_surround",
            "location": 102,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_success_already_exited_recent": {
            "name": "test_success_already_exited_recent",
            "location": 122,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float"
                ],
                "state": [
                    "float"
                ]
            }
        },
        "test_success_proposer_index_slashed": {
            "name": "test_success_proposer_index_slashed",
            "location": 134,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_success_attestation_from_future": {
            "name": "test_success_attestation_from_future",
            "location": 150,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_success_low_balances": {
            "name": "test_success_low_balances",
            "location": 168,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "aiozipkin.helpers.TraceContext"
                ],
                "state": [
                    "aiozipkin.helpers.TraceContext"
                ]
            }
        },
        "test_success_misc_balances": {
            "name": "test_success_misc_balances",
            "location": 178,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "aiozipkin.helpers.TraceContext"
                ],
                "state": [
                    "aiozipkin.helpers.TraceContext"
                ]
            }
        },
        "test_success_with_effective_balance_disparity": {
            "name": "test_success_with_effective_balance_disparity",
            "location": 188,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "aiozipkin.helpers.TraceContext"
                ],
                "state": [
                    "str"
                ]
            }
        },
        "test_success_already_exited_long_ago": {
            "name": "test_success_already_exited_long_ago",
            "location": 203,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float"
                ],
                "state": [
                    "float",
                    "str"
                ]
            }
        },
        "test_invalid_sig_1": {
            "name": "test_invalid_sig_1",
            "location": 216,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_invalid_sig_2": {
            "name": "test_invalid_sig_2",
            "location": 224,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_invalid_sig_1_and_2": {
            "name": "test_invalid_sig_1_and_2",
            "location": 232,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_same_data": {
            "name": "test_same_data",
            "location": 239,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "float",
                    "str"
                ]
            }
        },
        "test_no_double_or_surround": {
            "name": "test_no_double_or_surround",
            "location": 252,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float"
                ],
                "state": [
                    "float"
                ]
            }
        },
        "test_participants_already_slashed": {
            "name": "test_participants_already_slashed",
            "location": 265,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float"
                ],
                "state": [
                    "float"
                ]
            }
        },
        "test_att1_high_index": {
            "name": "test_att1_high_index",
            "location": 279,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": [
                    "int",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_att2_high_index": {
            "name": "test_att2_high_index",
            "location": 292,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": [
                    "int",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_att1_empty_indices": {
            "name": "test_att1_empty_indices",
            "location": 305,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "str"
                ],
                "state": []
            }
        },
        "test_att2_empty_indices": {
            "name": "test_att2_empty_indices",
            "location": 317,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float"
                ],
                "state": []
            }
        },
        "test_all_empty_indices": {
            "name": "test_all_empty_indices",
            "location": 329,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "str"
                ]
            }
        },
        "test_att1_bad_extra_index": {
            "name": "test_att1_bad_extra_index",
            "location": 344,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": [
                    "set[int]",
                    "Set[int]",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_att1_bad_replaced_index": {
            "name": "test_att1_bad_replaced_index",
            "location": 360,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": [
                    "set[int]",
                    "Set[int]",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_att2_bad_extra_index": {
            "name": "test_att2_bad_extra_index",
            "location": 376,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": [
                    "set[int]",
                    "Set[int]",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_att2_bad_replaced_index": {
            "name": "test_att2_bad_replaced_index",
            "location": 392,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": [
                    "set[int]",
                    "Set[int]",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_att1_duplicate_index_normal_signed": {
            "name": "test_att1_duplicate_index_normal_signed",
            "location": 408,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "str"
                ],
                "state": [
                    "float",
                    "str"
                ]
            }
        },
        "test_att2_duplicate_index_normal_signed": {
            "name": "test_att2_duplicate_index_normal_signed",
            "location": 428,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float"
                ],
                "state": [
                    "float"
                ]
            }
        },
        "test_att1_duplicate_index_double_signed": {
            "name": "test_att1_duplicate_index_double_signed",
            "location": 448,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "str"
                ],
                "state": [
                    "float",
                    "str"
                ]
            }
        },
        "test_att2_duplicate_index_double_signed": {
            "name": "test_att2_duplicate_index_double_signed",
            "location": 463,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float"
                ],
                "state": [
                    "float"
                ]
            }
        },
        "test_unsorted_att_1": {
            "name": "test_unsorted_att_1",
            "location": 477,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "str"
                ],
                "state": [
                    "float",
                    "str"
                ]
            }
        },
        "test_unsorted_att_2": {
            "name": "test_unsorted_att_2",
            "location": 490,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float"
                ],
                "state": [
                    "float"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/phase0/block_processing/test_process_block_header.py": {
        "prepare_state_for_header_processing": {
            "name": "prepare_state_for_header_processing",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "int"
                ],
                "state": [
                    "int"
                ]
            }
        },
        "run_block_header_processing": {
            "name": "run_block_header_processing",
            "location": 12,
            "return": [
                "typing.Generator[tuple[typing.Union[typing.Text,list[dict[str, typing.Any]],float,bool]]]",
                "str",
                "typing.Generator[tuple[typing.Union[typing.Text,str,None,list[str]]]]",
                "Set[str]",
                "typing.Generator[tuple[typing.Optional[typing.Text]]]",
                "None",
                "Mapping",
                "Dict[str, Any]",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "spec": [
                    "List[Dict[str, Any]]",
                    "float",
                    "bool"
                ],
                "state": [
                    "List[Dict[str, Any]]",
                    "float",
                    "list[dict[str, typing.Any]]",
                    "bool"
                ],
                "block": [
                    "str",
                    "T",
                    "None",
                    "list[str]",
                    "Optional[str]",
                    "List[str]"
                ],
                "prepare_state": [
                    "bool",
                    "str",
                    "dict",
                    "list",
                    "List[str]",
                    "Dict[Tuple[int, int], str]"
                ],
                "valid": [
                    "bool",
                    "str",
                    "dict",
                    "list",
                    "List[str]",
                    "Dict[Tuple[int, int], str]"
                ]
            }
        },
        "test_success_block_header": {
            "name": "test_success_block_header",
            "location": 37,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_invalid_slot_block_header": {
            "name": "test_invalid_slot_block_header",
            "location": 44,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_invalid_proposer_index": {
            "name": "test_invalid_proposer_index",
            "location": 53,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Optional[Dict[str, Any]]"
                ],
                "state": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "test_invalid_parent_root": {
            "name": "test_invalid_parent_root",
            "location": 65,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_invalid_multiple_blocks_single_slot": {
            "name": "test_invalid_multiple_blocks_single_slot",
            "location": 74,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "raiden.transfer.state.ChainState"
                ],
                "state": []
            }
        },
        "test_proposer_slashed": {
            "name": "test_proposer_slashed",
            "location": 90,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Optional[Dict[str, Any]]",
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "state": [
                    "raiden.transfer.state.ChainState"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/phase0/block_processing/test_process_deposit.py": {
        "run_deposit_processing": {
            "name": "run_deposit_processing",
            "location": 12,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "spec": [
                    "raiden.utils.List[raiden.utils.TokenAddress]",
                    "bool",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.FeeAmount",
                    "raiden.utils.InitiatorAddress",
                    "raiden.utils.PaymentHashInvoice",
                    "raiden.utils.PaymentAmount",
                    "raiden.utils.PaymentID",
                    "raiden.utils.SecreHash"
                ],
                "state": [
                    "list",
                    "List[list]",
                    "List[int]",
                    "List[str]",
                    "Sequence",
                    "List[Tuple[int, int]]",
                    "Tuple[int, int]",
                    "Sequence[int]"
                ],
                "deposit": [
                    "raiden.utils.List[raiden.utils.TokenAddress]",
                    "bool",
                    "raiden.utils.Nonce",
                    "raiden.utils.AdditionalHash"
                ],
                "validator_index": [
                    "Callable",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.Secret",
                    "raiden.utils.TargetAddress",
                    "raiden.transfer.state.ChainState"
                ],
                "valid": [
                    "bool",
                    "int",
                    "List[Callable]"
                ],
                "effective": [
                    "int",
                    "List[Set[int]]",
                    "raiden.utils.Address"
                ]
            }
        },
        "test_new_deposit_under_max": {
            "name": "test_new_deposit_under_max",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "int",
                    "tests.pathfinding.utils.SimpleReachabilityContainer",
                    "List[raiden.utils.Address]"
                ],
                "state": [
                    "int",
                    "raiden.utils.TokenNetworkRegistryAddress"
                ]
            }
        },
        "test_new_deposit_max": {
            "name": "test_new_deposit_max",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "int",
                    "tests.pathfinding.utils.SimpleReachabilityContainer",
                    "List[raiden.utils.Address]"
                ],
                "state": [
                    "int",
                    "raiden.utils.TokenNetworkRegistryAddress"
                ]
            }
        },
        "test_new_deposit_over_max": {
            "name": "test_new_deposit_over_max",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "int",
                    "tests.pathfinding.utils.SimpleReachabilityContainer",
                    "List[raiden.utils.Address]"
                ],
                "state": [
                    "int",
                    "raiden.utils.TokenNetworkRegistryAddress"
                ]
            }
        },
        "test_new_deposit_eth1_withdrawal_credentials": {
            "name": "test_new_deposit_eth1_withdrawal_credentials",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.TokenAmount",
                    "raiden.transfer.state.ChainState",
                    "raiden.utils.PaymentNetworkID",
                    "raiden.utils.ChannelID"
                ],
                "state": [
                    "int",
                    "raiden.utils.TokenNetworkRegistryAddress"
                ]
            }
        },
        "test_new_deposit_non_versioned_withdrawal_credentials": {
            "name": "test_new_deposit_non_versioned_withdrawal_credentials",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "int",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "bool",
                    "raiden.utils.TokenAddress"
                ],
                "state": [
                    "int",
                    "raiden.utils.TokenNetworkRegistryAddress"
                ]
            }
        },
        "test_invalid_sig_other_version": {
            "name": "test_invalid_sig_other_version",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "int",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.NetworkTimeout"
                ],
                "state": [
                    "bytes"
                ]
            }
        },
        "test_valid_sig_but_forked_state": {
            "name": "test_valid_sig_but_forked_state",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "int",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "tests.pathfinding.utils.SimpleReachabilityContainer"
                ],
                "state": [
                    "int"
                ]
            }
        },
        "test_invalid_sig_new_deposit": {
            "name": "test_invalid_sig_new_deposit",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "tests.pathfinding.utils.SimpleReachabilityContainer",
                    "List[raiden.utils.Address]",
                    "int"
                ],
                "state": [
                    "int",
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "raiden.utils.TokenNetworkAddress",
                    "List[List[int]]"
                ]
            }
        },
        "test_success_top_up": {
            "name": "test_success_top_up",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "List[raiden.utils.Address]",
                    "int",
                    "tests.pathfinding.utils.SimpleReachabilityContainer",
                    "Iterable[Any]"
                ],
                "state": [
                    "float",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable",
                    "List[raiden.utils.Address]"
                ]
            }
        },
        "test_invalid_sig_top_up": {
            "name": "test_invalid_sig_top_up",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "tests.pathfinding.utils.SimpleReachabilityContainer",
                    "List[raiden.utils.Address]",
                    "int"
                ],
                "state": [
                    "float",
                    "raiden.utils.TokenNetworkRegistryAddress"
                ]
            }
        },
        "test_invalid_withdrawal_credentials_top_up": {
            "name": "test_invalid_withdrawal_credentials_top_up",
            "location": 214,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "int",
                    "tests.pathfinding.utils.SimpleReachabilityContainer",
                    "List[raiden.utils.Address]"
                ],
                "state": [
                    "List[raiden.utils.Address]",
                    "float",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "test_wrong_deposit_for_deposit_count": {
            "name": "test_wrong_deposit_for_deposit_count",
            "location": 232,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "Sequence[str]",
                    "int",
                    "str"
                ],
                "state": [
                    "List[str]"
                ]
            }
        },
        "test_bad_merkle_proof": {
            "name": "test_bad_merkle_proof",
            "location": 273,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "tests.pathfinding.utils.SimpleReachabilityContainer",
                    "List[raiden.utils.Address]",
                    "int"
                ],
                "state": [
                    "int",
                    "raiden.utils.TokenNetworkAddress"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/phase0/block_processing/test_process_proposer_slashing.py": {
        "run_proposer_slashing_processing": {
            "name": "run_proposer_slashing_processing",
            "location": 9,
            "return": [
                "Awaitable",
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[tuple[typing.Union[typing.Text,str,list[recidiviz.persistence.database.schema.state.schema.StatePerson],None,bool,list[typing.Callable[, ]]]]]",
                "typing.Generator[tuple[typing.Optional[typing.Text]]]",
                "None"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "List[recidiviz.persistence.database.schema.state.schema.StatePerson]",
                    "bool",
                    "list[recidiviz.persistence.database.schema.state.schema.StatePerson]",
                    "List[Callable]",
                    "list[typing.Callable[, ]]",
                    "Optional[str]",
                    "None"
                ],
                "state": [],
                "proposer_slashing": [
                    "str",
                    "List[recidiviz.persistence.database.schema.state.schema.StatePerson]",
                    "bool",
                    "list[recidiviz.persistence.database.schema.state.schema.StatePerson]",
                    "Optional[str]",
                    "None",
                    "List[Callable]",
                    "list[typing.Callable[, ]]"
                ],
                "valid": [
                    "bool",
                    "Optional[Mapping[str, Any]]",
                    "int",
                    "Sequence[str]",
                    "Sequence[Sequence[str]]",
                    "Sequence[Tuple[str, int]]"
                ]
            }
        },
        "test_success": {
            "name": "test_success",
            "location": 37,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "aiozipkin.helpers.TraceContext"
                ],
                "state": [
                    "aiozipkin.helpers.TraceContext"
                ]
            }
        },
        "test_success_slashed_and_proposer_index_the_same": {
            "name": "test_success_slashed_and_proposer_index_the_same",
            "location": 45,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_success_block_header_from_future": {
            "name": "test_success_block_header_from_future",
            "location": 60,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "float",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_invalid_sig_1": {
            "name": "test_invalid_sig_1",
            "location": 69,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_invalid_sig_2": {
            "name": "test_invalid_sig_2",
            "location": 77,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_invalid_sig_1_and_2": {
            "name": "test_invalid_sig_1_and_2",
            "location": 85,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_invalid_sig_1_and_2_swap": {
            "name": "test_invalid_sig_1_and_2_swap",
            "location": 93,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_invalid_proposer_index": {
            "name": "test_invalid_proposer_index",
            "location": 106,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_invalid_different_proposer_indices": {
            "name": "test_invalid_different_proposer_indices",
            "location": 117,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_epochs_are_different": {
            "name": "test_epochs_are_different",
            "location": 133,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool"
                ],
                "state": [
                    "float"
                ]
            }
        },
        "test_headers_are_same_sigs_are_same": {
            "name": "test_headers_are_same_sigs_are_same",
            "location": 147,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_headers_are_same_sigs_are_different": {
            "name": "test_headers_are_same_sigs_are_different",
            "location": 158,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_proposer_is_not_activated": {
            "name": "test_proposer_is_not_activated",
            "location": 173,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float"
                ],
                "state": [
                    "float"
                ]
            }
        },
        "test_proposer_is_slashed": {
            "name": "test_proposer_is_slashed",
            "location": 185,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": [
                    "float"
                ]
            }
        },
        "test_proposer_is_withdrawn": {
            "name": "test_proposer_is_withdrawn",
            "location": 197,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/phase0/block_processing/test_process_voluntary_exit.py": {
        "run_voluntary_exit_processing": {
            "name": "run_voluntary_exit_processing",
            "location": 12,
            "return": [
                "Awaitable",
                "typing.Generator[tuple[typing.Union[typing.Text,bool,dict[str, str],str,list[dict[str, str]],tuple[],list[bytes]]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,int,bytes]]]",
                "typing.Generator[tuple[typing.Optional[typing.Text]]]",
                "None"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "float",
                    "str",
                    "List[Callable]",
                    "Optional[str]"
                ],
                "state": [
                    "bool",
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "List[Dict[str, str]]",
                    "list[dict[str, str]]",
                    "tuple",
                    "tuple[]",
                    "List[bytes]",
                    "list[bytes]"
                ],
                "signed_voluntary_exit": [
                    "int",
                    "bytes"
                ],
                "valid": [
                    "bool",
                    "int",
                    "List[Callable]"
                ]
            }
        },
        "test_success": {
            "name": "test_success",
            "location": 42,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float"
                ],
                "state": [
                    "float"
                ]
            }
        },
        "test_invalid_signature": {
            "name": "test_invalid_signature",
            "location": 61,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Callable[[List, bool], None]"
                ],
                "state": [
                    "Callable[[List, bool], None]",
                    "typing.Callable[List,bool, None]"
                ]
            }
        },
        "run_test_success_exit_queue": {
            "name": "run_test_success_exit_queue",
            "location": 77,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float"
                ],
                "state": [
                    "float"
                ]
            }
        },
        "test_success_exit_queue__min_churn": {
            "name": "test_success_exit_queue__min_churn",
            "location": 122,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "state": [
                    "bool",
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_success_exit_queue__scaled_churn": {
            "name": "test_success_exit_queue__scaled_churn",
            "location": 132,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Callable[[List, bool], None]",
                    "float",
                    "typing.Callable[List,bool, None]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "state": []
            }
        },
        "test_default_exit_epoch_subsequent_exit": {
            "name": "test_default_exit_epoch_subsequent_exit",
            "location": 140,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Callable[[List, bool], None]"
                ],
                "state": [
                    "Callable[[List, bool], None]",
                    "typing.Callable[List,bool, None]"
                ]
            }
        },
        "test_validator_exit_in_future": {
            "name": "test_validator_exit_in_future",
            "location": 162,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Callable[[List, bool], None]"
                ],
                "state": [
                    "Callable[[List, bool], None]",
                    "typing.Callable[List,bool, None]"
                ]
            }
        },
        "test_validator_invalid_validator_index": {
            "name": "test_validator_invalid_validator_index",
            "location": 181,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float"
                ],
                "state": [
                    "float"
                ]
            }
        },
        "test_validator_not_active": {
            "name": "test_validator_not_active",
            "location": 200,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Optional[Dict[str, Any]]",
                    "str"
                ],
                "state": [
                    "Optional[Dict[str, Any]]",
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "test_validator_already_exited": {
            "name": "test_validator_already_exited",
            "location": 215,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float"
                ],
                "state": [
                    "float"
                ]
            }
        },
        "test_validator_not_active_long_enough": {
            "name": "test_validator_not_active_long_enough",
            "location": 234,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Optional[Dict[str, Any]]",
                    "str"
                ],
                "state": [
                    "Optional[Dict[str, Any]]",
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/phase0/block_processing/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/phase0/epoch_processing/test_process_effective_balance_updates.py": {
        "test_effective_balance_hysteresis": {
            "name": "test_effective_balance_hysteresis",
            "location": 7,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,dict[, ],float]]]"
            ],
            "arguments": {
                "spec": [],
                "state": [
                    "dict",
                    "float",
                    "dict[, ]"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/phase0/epoch_processing/test_process_eth1_data_reset.py": {
        "run_process_eth1_data_reset": {
            "name": "run_process_eth1_data_reset",
            "location": 8,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "list[dict[str, typing.Any]]",
                    "raiden.transfer.state.ChainState",
                    "list[list[typing.Any]]",
                    "str",
                    "List[Dict[str, Any]]",
                    "list[list[str]]",
                    "List[List[Any]]",
                    "List[List[str]]"
                ],
                "state": [
                    "list[dict[str, typing.Any]]",
                    "raiden.transfer.state.ChainState",
                    "list[list[typing.Any]]",
                    "str",
                    "List[Dict[str, Any]]",
                    "list[list[str]]",
                    "List[List[Any]]",
                    "List[List[str]]"
                ]
            }
        },
        "test_eth1_vote_no_reset": {
            "name": "test_eth1_vote_no_reset",
            "location": 14,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "str"
                ],
                "state": [
                    "float",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_eth1_vote_reset": {
            "name": "test_eth1_vote_reset",
            "location": 32,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "str"
                ],
                "state": [
                    "float"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/phase0/epoch_processing/test_process_historical_roots_update.py": {
        "run_process_historical_roots_update": {
            "name": "run_process_historical_roots_update",
            "location": 7,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "List[Dict[str, Any]]",
                    "int",
                    "list[dict[str, typing.Any]]"
                ],
                "state": [
                    "List[Dict[str, Any]]",
                    "int",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "test_historical_root_accumulator": {
            "name": "test_historical_root_accumulator",
            "location": 13,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": [
                    "str"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/phase0/epoch_processing/test_process_justification_and_finalization.py": {
        "run_process_just_and_fin": {
            "name": "run_process_just_and_fin",
            "location": 10,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "list[list[typing.Any]]",
                    "str",
                    "state.State",
                    "list[list[str]]",
                    "List[List[Any]]",
                    "List[List[str]]",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ],
                "state": [
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "list[list[typing.Any]]",
                    "str",
                    "state.State",
                    "list[list[str]]",
                    "List[List[Any]]",
                    "List[List[str]]",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "add_mock_attestations": {
            "name": "add_mock_attestations",
            "location": 14,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "spec": [
                    "str"
                ],
                "state": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "epoch": [
                    "bool",
                    "int"
                ],
                "source": [
                    "int"
                ],
                "target": [
                    "int"
                ],
                "sufficient_support": [
                    "bool",
                    "str",
                    "dict"
                ],
                "messed_up_target": [
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "get_checkpoints": {
            "name": "get_checkpoints",
            "location": 89,
            "return": [
                "tuple[None]",
                "int",
                "List[str]",
                "str",
                "bytes",
                "bool",
                "float"
            ],
            "arguments": {
                "spec": [
                    "Iterable[T]",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Dict[str, Any]]"
                ],
                "epoch": [
                    "int",
                    "Iterable[T]",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "put_checkpoints_in_block_roots": {
            "name": "put_checkpoints_in_block_roots",
            "location": 98,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "dict",
                    "bytes",
                    "dict[, ]",
                    "List[str]",
                    "list[str]"
                ],
                "state": [
                    "str",
                    "dict",
                    "bytes",
                    "dict[, ]",
                    "List[str]",
                    "list[str]"
                ],
                "checkpoints": [
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "finalize_on_234": {
            "name": "finalize_on_234",
            "location": 103,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "typing.Callable[, ]",
                    "raiden.transfer.state.ChainState",
                    "Callable"
                ],
                "state": [
                    "raiden.transfer.state.ChainState",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ],
                "epoch": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "Callable",
                    "raiden.transfer.state.ChainState"
                ],
                "sufficient_support": [
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "finalize_on_23": {
            "name": "finalize_on_23",
            "location": 138,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "raiden.transfer.state.ChainState"
                ],
                "state": [
                    "raiden.transfer.state.ChainState",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ],
                "epoch": [
                    "raiden.transfer.state.ChainState",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "Callable",
                    "Optional[dict]"
                ],
                "sufficient_support": [
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "finalize_on_123": {
            "name": "finalize_on_123",
            "location": 174,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "typing.Callable[, ]",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "state.State",
                    "Callable",
                    "Dict[str, Any]",
                    "dict"
                ],
                "state": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState"
                ],
                "epoch": [
                    "int",
                    "raiden.transfer.state.ChainState",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ],
                "sufficient_support": [
                    "int",
                    "str"
                ]
            }
        },
        "finalize_on_12": {
            "name": "finalize_on_12",
            "location": 216,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "raiden.transfer.state.ChainState",
                    "raiden.transfer.mediated_transfer.state.MediatorTransferState"
                ],
                "state": [
                    "dict[\"core.Edge\", \"state.State\"]",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "dict[, ]",
                    "raiden.transfer.state.ChainState",
                    "Dict[\"core.Edge\", \"state.State\"]",
                    "dict"
                ],
                "epoch": [
                    "raiden.transfer.state.ChainState",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ],
                "sufficient_support": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "messed_up_target": [
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "test_234_ok_support": {
            "name": "test_234_ok_support",
            "location": 255,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "bool",
                    "bytes",
                    "Optional[str]",
                    "None",
                    "List[List[int]]",
                    "list[list[int]]"
                ],
                "state": [
                    "str",
                    "bool",
                    "bytes",
                    "Optional[str]",
                    "None",
                    "List[List[int]]",
                    "list[list[int]]"
                ]
            }
        },
        "test_234_poor_support": {
            "name": "test_234_poor_support",
            "location": 261,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_23_ok_support": {
            "name": "test_23_ok_support",
            "location": 267,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "bool",
                    "bytes",
                    "Optional[str]",
                    "None",
                    "List[List[int]]",
                    "list[list[int]]"
                ],
                "state": [
                    "str",
                    "bool",
                    "bytes",
                    "Optional[str]",
                    "None",
                    "List[List[int]]",
                    "list[list[int]]"
                ]
            }
        },
        "test_23_poor_support": {
            "name": "test_23_poor_support",
            "location": 273,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_123_ok_support": {
            "name": "test_123_ok_support",
            "location": 279,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "bool",
                    "bytes",
                    "Optional[str]",
                    "None",
                    "List[List[int]]",
                    "list[list[int]]"
                ],
                "state": [
                    "str",
                    "bool",
                    "bytes",
                    "Optional[str]",
                    "None",
                    "List[List[int]]",
                    "list[list[int]]"
                ]
            }
        },
        "test_123_poor_support": {
            "name": "test_123_poor_support",
            "location": 285,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_12_ok_support": {
            "name": "test_12_ok_support",
            "location": 291,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_12_ok_support_messed_target": {
            "name": "test_12_ok_support_messed_target",
            "location": 297,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_12_poor_support": {
            "name": "test_12_poor_support",
            "location": 303,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "List[Callable]",
                    "int",
                    "list[typing.Callable[, ]]",
                    "str"
                ],
                "state": [
                    "List[Callable]",
                    "int",
                    "list[typing.Callable[, ]]",
                    "str"
                ]
            }
        },
        "test_balance_threshold_with_exited_validators": {
            "name": "test_balance_threshold_with_exited_validators",
            "location": 309,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "state": []
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/phase0/epoch_processing/test_process_participation_record_updates.py": {
        "run_process_participation_record_updates": {
            "name": "run_process_participation_record_updates",
            "location": 8,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[List[str]]",
                    "list[list[str]]"
                ],
                "state": [
                    "bool",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[List[str]]",
                    "list[list[str]]"
                ]
            }
        },
        "test_updated_participation_record": {
            "name": "test_updated_participation_record",
            "location": 14,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "Callable"
                ],
                "state": [
                    "float",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/phase0/epoch_processing/test_process_randao_mixes_reset.py": {
        "run_process_randao_mixes_reset": {
            "name": "run_process_randao_mixes_reset",
            "location": 7,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "List[List[Any]]",
                    "str",
                    "list[list[typing.Any]]",
                    "List[List[str]]",
                    "list[list[str]]"
                ],
                "state": [
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "List[List[Any]]",
                    "str",
                    "list[list[typing.Any]]",
                    "List[List[str]]",
                    "list[list[str]]"
                ]
            }
        },
        "test_updated_randao_mixes": {
            "name": "test_updated_randao_mixes",
            "location": 13,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "Callable"
                ],
                "state": [
                    "float",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/phase0/epoch_processing/test_process_registry_updates.py": {
        "run_process_registry_updates": {
            "name": "run_process_registry_updates",
            "location": 13,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "list[list[typing.Any]]",
                    "List[List[Any]]",
                    "list[list[str]]",
                    "List[List[str]]",
                    "list[dict[str, typing.Any]]",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "List[Dict[str, Any]]"
                ],
                "state": [
                    "list[list[typing.Any]]",
                    "List[List[Any]]",
                    "list[list[str]]",
                    "List[List[str]]",
                    "list[dict[str, typing.Any]]",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "test_add_to_activation_queue": {
            "name": "test_add_to_activation_queue",
            "location": 19,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_activation_queue_to_activated_if_finalized": {
            "name": "test_activation_queue_to_activated_if_finalized",
            "location": 37,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "Callable"
                ],
                "state": [
                    "float",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_activation_queue_no_activation_no_finality": {
            "name": "test_activation_queue_no_activation_no_finality",
            "location": 65,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "Callable"
                ],
                "state": [
                    "float",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_activation_queue_sorting": {
            "name": "test_activation_queue_sorting",
            "location": 88,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str"
                ],
                "state": [
                    "str"
                ]
            }
        },
        "run_test_activation_queue_efficiency": {
            "name": "run_test_activation_queue_efficiency",
            "location": 121,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "state.State"
                ],
                "state": [
                    "typing.Callable[, ]",
                    "Callable",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "state.State"
                ]
            }
        },
        "test_activation_queue_efficiency_min": {
            "name": "test_activation_queue_efficiency_min",
            "location": 158,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_activation_queue_efficiency_scaled": {
            "name": "test_activation_queue_efficiency_scaled",
            "location": 169,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_ejection": {
            "name": "test_ejection",
            "location": 176,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str"
                ],
                "state": [
                    "str"
                ]
            }
        },
        "run_test_ejection_past_churn_limit": {
            "name": "run_test_ejection_past_churn_limit",
            "location": 194,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "IO",
                    "Callable",
                    "float"
                ],
                "state": [
                    "typing.IO",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "float",
                    "typing.Callable[, ]",
                    "IO",
                    "Callable"
                ]
            }
        },
        "test_ejection_past_churn_limit_min": {
            "name": "test_ejection_past_churn_limit_min",
            "location": 221,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_ejection_past_churn_limit_scaled": {
            "name": "test_ejection_past_churn_limit_scaled",
            "location": 232,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "run_test_activation_queue_activation_and_ejection": {
            "name": "run_test_activation_queue_activation_and_ejection",
            "location": 237,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "Dict[str, Dict[str, Any]]",
                    "float"
                ],
                "state": [
                    "int",
                    "float",
                    "Dict[str, Dict[str, Any]]",
                    "dict[str, dict[str, typing.Any]]"
                ],
                "num_per_status": [
                    "int",
                    "Iterable[int]",
                    "Optional[int]"
                ]
            }
        },
        "test_activation_queue_activation_and_ejection__1": {
            "name": "test_activation_queue_activation_and_ejection__1",
            "location": 303,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "int"
                ],
                "state": [
                    "int"
                ]
            }
        },
        "test_activation_queue_activation_and_ejection__churn_limit": {
            "name": "test_activation_queue_activation_and_ejection__churn_limit",
            "location": 309,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Callable[[List, bool], None]",
                    "float",
                    "Optional[Dict[str, Any]]",
                    "str"
                ],
                "state": [
                    "float"
                ]
            }
        },
        "test_activation_queue_activation_and_ejection__exceed_churn_limit": {
            "name": "test_activation_queue_activation_and_ejection__exceed_churn_limit",
            "location": 317,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Callable[[List, bool], None]",
                    "float",
                    "Optional[Dict[str, Any]]",
                    "str"
                ],
                "state": [
                    "float"
                ]
            }
        },
        "test_activation_queue_activation_and_ejection__scaled_churn_limit": {
            "name": "test_activation_queue_activation_and_ejection__scaled_churn_limit",
            "location": 329,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Callable[[List, bool], None]",
                    "float",
                    "Optional[Dict[str, Any]]",
                    "str"
                ],
                "state": [
                    "float"
                ]
            }
        },
        "test_activation_queue_activation_and_ejection__exceed_scaled_churn_limit": {
            "name": "test_activation_queue_activation_and_ejection__exceed_scaled_churn_limit",
            "location": 341,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Callable[[List, bool], None]",
                    "float",
                    "Optional[Dict[str, Any]]",
                    "str"
                ],
                "state": [
                    "float"
                ]
            }
        },
        "test_invalid_large_withdrawable_epoch": {
            "name": "test_invalid_large_withdrawable_epoch",
            "location": 349,
            "return": [
                "str",
                "typing.Generator[]",
                "typing.Generator[tuple[typing.Optional[typing.Text]]]",
                "None"
            ],
            "arguments": {
                "spec": [
                    "float"
                ],
                "state": [
                    "float"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/phase0/epoch_processing/test_process_rewards_and_penalties.py": {
        "run_process_rewards_and_penalties": {
            "name": "run_process_rewards_and_penalties",
            "location": 26,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "list[list[typing.Any]]",
                    "str",
                    "state.State",
                    "list[list[str]]",
                    "List[List[Any]]",
                    "List[List[str]]",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ],
                "state": [
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "list[list[typing.Any]]",
                    "str",
                    "state.State",
                    "list[list[str]]",
                    "List[List[Any]]",
                    "List[List[str]]",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "validate_resulting_balances": {
            "name": "validate_resulting_balances",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "raiden.transfer.state.ChainState",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.NettingChannelState",
                    "beacon_chain.state.active_state.ActiveState"
                ],
                "pre_state": [
                    "int",
                    "float",
                    "raiden.transfer.mediated_transfer.state.InitiatorTransferState",
                    "raiden.transfer.state.ChainState"
                ],
                "post_state": [
                    "raiden.transfer.state.ChainState",
                    "mythril.laser.ethereum.state.world_state.WorldState",
                    "raiden.transfer.state.NettingChannelState",
                    "beacon_chain.state.active_state.ActiveState",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ],
                "attestations": [
                    "dict[str, typing.Any]",
                    "bytes",
                    "Dict[str, Any]",
                    "mythril.laser.ethereum.state.world_state.WorldState",
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "test_genesis_epoch_no_attestations_no_penalties": {
            "name": "test_genesis_epoch_no_attestations_no_penalties",
            "location": 69,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": []
            }
        },
        "test_genesis_epoch_full_attestations_no_rewards": {
            "name": "test_genesis_epoch_full_attestations_no_rewards",
            "location": 82,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float"
                ],
                "state": [
                    "float",
                    "Optional[str]"
                ]
            }
        },
        "test_full_attestations_random_incorrect_fields": {
            "name": "test_full_attestations_random_incorrect_fields",
            "location": 108,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": [
                    "float"
                ]
            }
        },
        "test_full_attestations_misc_balances": {
            "name": "test_full_attestations_misc_balances",
            "location": 133,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "aiozipkin.helpers.TraceContext"
                ],
                "state": [
                    "Callable"
                ]
            }
        },
        "test_full_attestations_one_validaor_one_gwei": {
            "name": "test_full_attestations_one_validaor_one_gwei",
            "location": 156,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_no_attestations_all_penalties": {
            "name": "test_no_attestations_all_penalties",
            "location": 168,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "float",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "float",
                    "Callable"
                ]
            }
        },
        "run_with_participation": {
            "name": "run_with_participation",
            "location": 180,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ],
                "state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState"
                ],
                "participation_fn": [
                    "bool",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "None",
                    "numpy.random.RandomState",
                    "Optional[bool]"
                ]
            }
        },
        "test_almost_empty_attestations": {
            "name": "test_almost_empty_attestations",
            "location": 201,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Tuple[str, dict]",
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "Tuple[str, dict]",
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_almost_empty_attestations_with_leak": {
            "name": "test_almost_empty_attestations_with_leak",
            "location": 212,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Tuple[str, dict]",
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "Tuple[str, dict]",
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_random_fill_attestations": {
            "name": "test_random_fill_attestations",
            "location": 222,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Tuple[str, dict]",
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "Tuple[str, dict]",
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_random_fill_attestations_with_leak": {
            "name": "test_random_fill_attestations_with_leak",
            "location": 233,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Tuple[str, dict]",
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "Tuple[str, dict]",
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_almost_full_attestations": {
            "name": "test_almost_full_attestations",
            "location": 243,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Tuple[str, dict]",
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "Tuple[str, dict]",
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_almost_full_attestations_with_leak": {
            "name": "test_almost_full_attestations_with_leak",
            "location": 254,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Tuple[str, dict]",
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "Tuple[str, dict]",
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_full_attestation_participation": {
            "name": "test_full_attestation_participation",
            "location": 264,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Tuple[str, dict]",
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "Tuple[str, dict]",
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_full_attestation_participation_with_leak": {
            "name": "test_full_attestation_participation_with_leak",
            "location": 271,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Tuple[str, dict]",
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "Tuple[str, dict]",
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_duplicate_attestation": {
            "name": "test_duplicate_attestation",
            "location": 277,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": [
                    "str"
                ]
            }
        },
        "test_duplicate_participants_different_attestation_1": {
            "name": "test_duplicate_participants_different_attestation_1",
            "location": 315,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "str"
                ],
                "state": [
                    "float",
                    "str"
                ]
            }
        },
        "test_duplicate_participants_different_attestation_2": {
            "name": "test_duplicate_participants_different_attestation_2",
            "location": 355,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "str"
                ],
                "state": [
                    "float",
                    "str"
                ]
            }
        },
        "test_duplicate_participants_different_attestation_3": {
            "name": "test_duplicate_participants_different_attestation_3",
            "location": 396,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "str"
                ],
                "state": [
                    "float",
                    "str"
                ]
            }
        },
        "test_attestations_some_slashed": {
            "name": "test_attestations_some_slashed",
            "location": 439,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "raiden.transfer.state.ChainState"
                ],
                "state": []
            }
        },
        "run_with_participation.participation_tracker": {
            "name": "participation_tracker",
            "location": 183,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "slot": [
                    "int",
                    "Callable",
                    "str"
                ],
                "comm_index": [
                    "int",
                    "Callable",
                    "str"
                ],
                "comm": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_almost_empty_attestations.participation_fn": {
            "name": "participation_fn",
            "location": 204,
            "return": [],
            "arguments": {
                "slot": [],
                "comm_index": [],
                "comm": []
            }
        },
        "test_almost_empty_attestations_with_leak.participation_fn": {
            "name": "participation_fn",
            "location": 215,
            "return": [],
            "arguments": {
                "slot": [],
                "comm_index": [],
                "comm": []
            }
        },
        "test_random_fill_attestations.participation_fn": {
            "name": "participation_fn",
            "location": 225,
            "return": [],
            "arguments": {
                "slot": [],
                "comm_index": [],
                "comm": []
            }
        },
        "test_random_fill_attestations_with_leak.participation_fn": {
            "name": "participation_fn",
            "location": 236,
            "return": [],
            "arguments": {
                "slot": [],
                "comm_index": [],
                "comm": []
            }
        },
        "test_almost_full_attestations.participation_fn": {
            "name": "participation_fn",
            "location": 246,
            "return": [],
            "arguments": {
                "slot": [],
                "comm_index": [],
                "comm": []
            }
        },
        "test_almost_full_attestations_with_leak.participation_fn": {
            "name": "participation_fn",
            "location": 257,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "slot": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "comm_index": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "comm": [
                    "List[List[str]]",
                    "str",
                    "list",
                    "List[str]"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/phase0/epoch_processing/test_process_slashings.py": {
        "run_process_slashings": {
            "name": "run_process_slashings",
            "location": 12,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "list[list[typing.Any]]",
                    "str",
                    "state.State",
                    "list[list[str]]",
                    "List[List[Any]]",
                    "List[List[str]]",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ],
                "state": [
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "list[list[typing.Any]]",
                    "str",
                    "state.State",
                    "list[list[str]]",
                    "List[List[Any]]",
                    "List[List[str]]",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "slash_validators": {
            "name": "slash_validators",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "state": [
                    "int",
                    "typing.Callable[, ]",
                    "Callable",
                    "bool"
                ],
                "indices": [
                    "int",
                    "list[int]",
                    "List[int]",
                    "T"
                ],
                "out_epochs": [
                    "int",
                    "list[int]",
                    "List[int]",
                    "T"
                ]
            }
        },
        "get_slashing_multiplier": {
            "name": "get_slashing_multiplier",
            "location": 33,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "spec": []
            }
        },
        "_setup_process_slashings_test": {
            "name": "_setup_process_slashings_test",
            "location": 42,
            "return": [
                "set[]",
                "int",
                "str",
                "float",
                "Dict[str, int]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "Iterable[str]",
                    "float",
                    "List[int]",
                    "Iterable[Any]"
                ],
                "state": [
                    "str",
                    "float",
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "List[int]",
                    "Iterable[Any]"
                ],
                "not_slashable_set": [
                    "set[]",
                    "List[str]",
                    "Optional[str]",
                    "str",
                    "bool",
                    "List[List[str]]",
                    "List[int]",
                    "Sequence[str]"
                ]
            }
        },
        "test_max_penalties": {
            "name": "test_max_penalties",
            "location": 65,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": [
                    "float"
                ]
            }
        },
        "test_low_penalty": {
            "name": "test_low_penalty",
            "location": 76,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": [
                    "List[List[str]]",
                    "list[list[str]]",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "test_minimal_penalty": {
            "name": "test_minimal_penalty",
            "location": 94,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,int]]]"
            ],
            "arguments": {
                "spec": [
                    "raiden.transfer.state.ChainState"
                ],
                "state": [
                    "int",
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "test_scaled_penalties": {
            "name": "test_scaled_penalties",
            "location": 134,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,float,typing.Callable[, ]]]]"
            ],
            "arguments": {
                "spec": [
                    "bool"
                ],
                "state": [
                    "float",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_slashings_with_random_state": {
            "name": "test_slashings_with_random_state",
            "location": 194,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/phase0/epoch_processing/test_process_slashings_reset.py": {
        "run_process_slashings_reset": {
            "name": "run_process_slashings_reset",
            "location": 7,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "List[List[Any]]",
                    "str",
                    "list[list[typing.Any]]",
                    "List[List[str]]",
                    "list[list[str]]"
                ],
                "state": [
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "List[List[Any]]",
                    "str",
                    "list[list[typing.Any]]",
                    "List[List[str]]",
                    "list[list[str]]"
                ]
            }
        },
        "test_flush_slashings": {
            "name": "test_flush_slashings",
            "location": 13,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/phase0/epoch_processing/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/phase0/finality/test_finality.py": {
        "check_finality": {
            "name": "check_finality",
            "location": 6,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "list",
                    "str",
                    "list[]",
                    "bool",
                    "List[int]",
                    "list[int]"
                ],
                "state": [
                    "str",
                    "raiden.transfer.state.ChainState",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.mediated_transfer.state.InitiatorPaymentState"
                ],
                "prev_state": [
                    "str",
                    "raiden.transfer.state.ChainState",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.mediated_transfer.state.InitiatorPaymentState"
                ],
                "current_justified_changed": [
                    "list",
                    "str",
                    "list[]",
                    "bool",
                    "List[int]",
                    "list[int]"
                ],
                "previous_justified_changed": [
                    "list",
                    "str",
                    "list[]",
                    "bool",
                    "List[int]",
                    "list[int]"
                ],
                "finalized_changed": [
                    "list",
                    "str",
                    "list[]",
                    "bool",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "test_finality_no_updates_at_genesis": {
            "name": "test_finality_no_updates_at_genesis",
            "location": 33,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,int]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,float,dict[str, str],int]]]"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "raiden.transfer.state.ChainState"
                ],
                "state": [
                    "int",
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "test_finality_rule_4": {
            "name": "test_finality_rule_4",
            "location": 56,
            "return": [
                "",
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_finality_rule_1": {
            "name": "test_finality_rule_1",
            "location": 81,
            "return": [
                "",
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_finality_rule_2": {
            "name": "test_finality_rule_2",
            "location": 108,
            "return": [
                "",
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_finality_rule_3": {
            "name": "test_finality_rule_3",
            "location": 137,
            "return": [
                "",
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/phase0/finality/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/phase0/fork_choice/test_ex_ante.py": {
        "_apply_base_block_a": {
            "name": "_apply_base_block_a",
            "location": 26,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": [],
                "store": [],
                "test_steps": []
            }
        },
        "test_ex_ante_vanilla": {
            "name": "test_ex_ante_vanilla",
            "location": 36,
            "return": [
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "_get_greater_than_proposer_boost_score": {
            "name": "_get_greater_than_proposer_boost_score",
            "location": 101,
            "return": [
                "int"
            ],
            "arguments": {
                "spec": [],
                "store": [],
                "state": [],
                "proposer_boost_root": [],
                "root": []
            }
        },
        "test_ex_ante_attestations_is_greater_than_proposer_boost_with_boost": {
            "name": "test_ex_ante_attestations_is_greater_than_proposer_boost_with_boost",
            "location": 124,
            "return": [
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_ex_ante_sandwich_without_attestations": {
            "name": "test_ex_ante_sandwich_without_attestations",
            "location": 196,
            "return": [
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_ex_ante_sandwich_with_honest_attestation": {
            "name": "test_ex_ante_sandwich_with_honest_attestation",
            "location": 259,
            "return": [
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_ex_ante_sandwich_with_boost_not_sufficient": {
            "name": "test_ex_ante_sandwich_with_boost_not_sufficient",
            "location": 341,
            "return": [
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_ex_ante_vanilla._filter_participant_set": {
            "name": "_filter_participant_set",
            "location": 74,
            "return": [
                "list[]"
            ],
            "arguments": {
                "participants": []
            }
        },
        "test_ex_ante_attestations_is_greater_than_proposer_boost_with_boost._filter_participant_set": {
            "name": "_filter_participant_set",
            "location": 176,
            "return": [
                "list[]"
            ],
            "arguments": {
                "participants": []
            }
        },
        "test_ex_ante_sandwich_with_honest_attestation._filter_participant_set": {
            "name": "_filter_participant_set",
            "location": 300,
            "return": [
                "list[]"
            ],
            "arguments": {
                "participants": []
            }
        },
        "test_ex_ante_sandwich_with_boost_not_sufficient._filter_participant_set": {
            "name": "_filter_participant_set",
            "location": 400,
            "return": [
                "list[]"
            ],
            "arguments": {
                "participants": []
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/phase0/fork_choice/test_get_head.py": {
        "test_genesis": {
            "name": "test_genesis",
            "location": 39,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,dict[, ]]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,int,str,list[]]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[dict[typing.Text, dict[typing.Text, int]]]]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,typing.Text,typing.Text]]]"
            ],
            "arguments": {
                "spec": [
                    "int"
                ],
                "state": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_chain_no_attestations": {
            "name": "test_chain_no_attestations",
            "location": 63,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,dict[, ],int]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,int,str,list[]]]]",
                "typing.Generator[]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[dict[typing.Text, dict[typing.Text, ]]]]]]"
            ],
            "arguments": {
                "spec": [
                    "int"
                ],
                "state": [
                    "dict",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "test_split_tie_breaker_no_attestations": {
            "name": "test_split_tie_breaker_no_attestations",
            "location": 100,
            "return": [
                "",
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[dict[typing.Text, dict[typing.Text, ]]]]]]"
            ],
            "arguments": {
                "spec": [],
                "state": [
                    "str",
                    "Callable"
                ]
            }
        },
        "test_shorter_chain_but_heavier_weight": {
            "name": "test_shorter_chain_but_heavier_weight",
            "location": 147,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,dict[str, typing.Any]]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,int,str,list[]]]]",
                "typing.Generator[]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[dict[typing.Text, dict[typing.Text, ]]]]]]"
            ],
            "arguments": {
                "spec": [
                    "int"
                ],
                "state": [
                    "dict[str, typing.Any]",
                    "str",
                    "Callable",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "test_filtered_block_tree": {
            "name": "test_filtered_block_tree",
            "location": 196,
            "return": [
                "",
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_proposer_boost_correct_head": {
            "name": "test_proposer_boost_correct_head",
            "location": 286,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,dict[str, typing.Any]]]]",
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[dict[typing.Text, dict[typing.Text, ]]]]]]"
            ],
            "arguments": {
                "spec": [
                    "int"
                ],
                "state": [
                    "dict[str, typing.Any]",
                    "str",
                    "Callable",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "test_discard_equivocations": {
            "name": "test_discard_equivocations",
            "location": 350,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,dict[str, typing.Any]]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,int,str,list[]]]]"
            ],
            "arguments": {
                "spec": [
                    "int"
                ],
                "state": [
                    "dict[str, typing.Any]",
                    "str",
                    "Callable",
                    "Optional[Dict[str, Any]]"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/phase0/fork_choice/test_on_block.py": {
        "_drop_random_one_third": {
            "name": "_drop_random_one_third",
            "location": 36,
            "return": [],
            "arguments": {
                "_slot": [],
                "_index": [],
                "indices": []
            }
        },
        "test_basic": {
            "name": "test_basic",
            "location": 46,
            "return": [
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_on_block_checkpoints": {
            "name": "test_on_block_checkpoints",
            "location": 77,
            "return": [
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_on_block_future_block": {
            "name": "test_on_block_future_block",
            "location": 113,
            "return": [
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_on_block_bad_parent_root": {
            "name": "test_on_block_bad_parent_root",
            "location": 134,
            "return": [
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_on_block_before_finalized": {
            "name": "test_on_block_before_finalized",
            "location": 161,
            "return": [
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_on_block_finalized_skip_slots": {
            "name": "test_on_block_finalized_skip_slots",
            "location": 193,
            "return": [
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_on_block_finalized_skip_slots_not_in_skip_chain": {
            "name": "test_on_block_finalized_skip_slots_not_in_skip_chain",
            "location": 240,
            "return": [
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_on_block_update_justified_checkpoint_within_safe_slots": {
            "name": "test_on_block_update_justified_checkpoint_within_safe_slots",
            "location": 286,
            "return": [
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_on_block_outside_safe_slots_but_finality": {
            "name": "test_on_block_outside_safe_slots_but_finality",
            "location": 343,
            "return": [
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_new_justified_is_later_than_store_justified": {
            "name": "test_new_justified_is_later_than_store_justified",
            "location": 422,
            "return": [
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_new_finalized_slot_is_not_justified_checkpoint_ancestor": {
            "name": "test_new_finalized_slot_is_not_justified_checkpoint_ancestor",
            "location": 565,
            "return": [
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_new_finalized_slot_is_justified_checkpoint_ancestor": {
            "name": "test_new_finalized_slot_is_justified_checkpoint_ancestor",
            "location": 642,
            "return": [
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_proposer_boost": {
            "name": "test_proposer_boost",
            "location": 711,
            "return": [
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[dict[typing.Text, dict[typing.Text, ]]]]]]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_proposer_boost_root_same_slot_untimely_block": {
            "name": "test_proposer_boost_root_same_slot_untimely_block",
            "location": 770,
            "return": [
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[dict[typing.Text, dict[typing.Text, ]]]]]]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/phase0/fork_choice/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/phase0/genesis/test_initialization.py": {
        "get_post_altair_description": {
            "name": "get_post_altair_description",
            "location": 15,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "List[str]",
                    "str",
                    "Tuple[int, int, int]",
                    "int"
                ]
            }
        },
        "eth1_init_data": {
            "name": "eth1_init_data",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "eth1_block_hash": [
                    "int",
                    "Optional[float]",
                    "bool"
                ],
                "eth1_timestamp": [
                    "int",
                    "Optional[float]",
                    "bool"
                ]
            }
        },
        "test_initialize_beacon_state_from_eth1": {
            "name": "test_initialize_beacon_state_from_eth1",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "int"
                ]
            }
        },
        "test_initialize_beacon_state_some_small_balances": {
            "name": "test_initialize_beacon_state_some_small_balances",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "spec": []
            }
        },
        "test_initialize_beacon_state_one_topup_activation": {
            "name": "test_initialize_beacon_state_one_topup_activation",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "int"
                ]
            }
        },
        "test_initialize_beacon_state_random_invalid_genesis": {
            "name": "test_initialize_beacon_state_random_invalid_genesis",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "int"
                ]
            }
        },
        "test_initialize_beacon_state_random_valid_genesis": {
            "name": "test_initialize_beacon_state_random_valid_genesis",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "int"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/phase0/genesis/test_validity.py": {
        "get_post_altair_description": {
            "name": "get_post_altair_description",
            "location": 14,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "str",
                    "list[str]",
                    "List[str]",
                    "tuple[typing.Union[int,int,int]]",
                    "Tuple[int, int, int]",
                    "int"
                ]
            }
        },
        "create_valid_beacon_state": {
            "name": "create_valid_beacon_state",
            "location": 18,
            "return": [
                "bool",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "spec": [
                    "dict",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "run_is_valid_genesis_state": {
            "name": "run_is_valid_genesis_state",
            "location": 32,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,str,int,float,set[],list[list[int]],dict[, ]]]]",
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "int",
                    "float",
                    "set",
                    "List[List[int]]",
                    "dict"
                ],
                "state": [
                    "str",
                    "int",
                    "float",
                    "set",
                    "set[]",
                    "List[List[int]]",
                    "list[list[int]]",
                    "dict",
                    "dict[, ]"
                ],
                "valid": [
                    "bool",
                    "str",
                    "Set[str]",
                    "Sequence",
                    "Dict[str, int]"
                ]
            }
        },
        "test_is_valid_genesis_state_true": {
            "name": "test_is_valid_genesis_state_true",
            "location": 48,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,typing.Text]]]",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "int"
                ]
            }
        },
        "test_is_valid_genesis_state_false_invalid_timestamp": {
            "name": "test_is_valid_genesis_state_false_invalid_timestamp",
            "location": 61,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,typing.Text]]]",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "int"
                ]
            }
        },
        "test_is_valid_genesis_state_true_more_balance": {
            "name": "test_is_valid_genesis_state_true_more_balance",
            "location": 75,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,typing.Text]]]",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "int"
                ]
            }
        },
        "test_is_valid_genesis_state_true_one_more_validator": {
            "name": "test_is_valid_genesis_state_true_one_more_validator",
            "location": 89,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,typing.Text]]]",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "int"
                ]
            }
        },
        "test_is_valid_genesis_state_false_not_enough_validator": {
            "name": "test_is_valid_genesis_state_false_not_enough_validator",
            "location": 112,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,typing.Text]]]",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "int"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/phase0/genesis/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/phase0/random/test_random.py": {
        "test_randomized_0": {
            "name": "test_randomized_0",
            "location": 34,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "test_randomized_1": {
            "name": "test_randomized_1",
            "location": 60,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "test_randomized_2": {
            "name": "test_randomized_2",
            "location": 86,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "test_randomized_3": {
            "name": "test_randomized_3",
            "location": 112,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "test_randomized_4": {
            "name": "test_randomized_4",
            "location": 138,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "test_randomized_5": {
            "name": "test_randomized_5",
            "location": 164,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "test_randomized_6": {
            "name": "test_randomized_6",
            "location": 190,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "test_randomized_7": {
            "name": "test_randomized_7",
            "location": 216,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "test_randomized_8": {
            "name": "test_randomized_8",
            "location": 242,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "test_randomized_9": {
            "name": "test_randomized_9",
            "location": 268,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "test_randomized_10": {
            "name": "test_randomized_10",
            "location": 294,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "test_randomized_11": {
            "name": "test_randomized_11",
            "location": 320,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "test_randomized_12": {
            "name": "test_randomized_12",
            "location": 346,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "test_randomized_13": {
            "name": "test_randomized_13",
            "location": 372,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "test_randomized_14": {
            "name": "test_randomized_14",
            "location": 398,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "test_randomized_15": {
            "name": "test_randomized_15",
            "location": 424,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "state": [
                    "bool",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Callable[, ]",
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/phase0/random/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/phase0/rewards/test_basic.py": {
        "test_empty": {
            "name": "test_empty",
            "location": 8,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str"
                ],
                "state": [
                    "str"
                ]
            }
        },
        "test_full_all_correct": {
            "name": "test_full_all_correct",
            "location": 14,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "state": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "test_half_full": {
            "name": "test_half_full",
            "location": 20,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "str",
                    "bool",
                    "None",
                    "Optional[str]"
                ],
                "state": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "str",
                    "bool",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "test_quarter_full": {
            "name": "test_quarter_full",
            "location": 26,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str"
                ],
                "state": [
                    "str"
                ]
            }
        },
        "test_full_but_partial_participation": {
            "name": "test_full_but_partial_participation",
            "location": 32,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "state": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "test_one_attestation_one_correct": {
            "name": "test_one_attestation_one_correct",
            "location": 38,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "bytes",
                    "List[List[int]]",
                    "list[list[int]]"
                ],
                "state": [
                    "str",
                    "bytes",
                    "List[List[int]]",
                    "list[list[int]]"
                ]
            }
        },
        "test_with_not_yet_activated_validators": {
            "name": "test_with_not_yet_activated_validators",
            "location": 44,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "state": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "test_with_exited_validators": {
            "name": "test_with_exited_validators",
            "location": 50,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "str",
                    "bool",
                    "None",
                    "Optional[str]"
                ],
                "state": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "str",
                    "bool",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "test_with_slashed_validators": {
            "name": "test_with_slashed_validators",
            "location": 56,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "str",
                    "bool",
                    "None",
                    "Optional[str]"
                ],
                "state": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "str",
                    "bool",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "test_some_very_low_effective_balances_that_attested": {
            "name": "test_some_very_low_effective_balances_that_attested",
            "location": 62,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str"
                ],
                "state": [
                    "str"
                ]
            }
        },
        "test_some_very_low_effective_balances_that_did_not_attest": {
            "name": "test_some_very_low_effective_balances_that_did_not_attest",
            "location": 68,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "state": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_full_half_correct_target_incorrect_head": {
            "name": "test_full_half_correct_target_incorrect_head",
            "location": 81,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str"
                ],
                "state": [
                    "str"
                ]
            }
        },
        "test_full_correct_target_incorrect_head": {
            "name": "test_full_correct_target_incorrect_head",
            "location": 92,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str"
                ],
                "state": [
                    "str"
                ]
            }
        },
        "test_full_half_incorrect_target_incorrect_head": {
            "name": "test_full_half_incorrect_target_incorrect_head",
            "location": 103,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_full_half_incorrect_target_correct_head": {
            "name": "test_full_half_incorrect_target_correct_head",
            "location": 114,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "bytes"
                ],
                "state": [
                    "str",
                    "bytes"
                ]
            }
        },
        "test_full_delay_one_slot": {
            "name": "test_full_delay_one_slot",
            "location": 125,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "bytes",
                    "List[List[int]]",
                    "list[list[int]]"
                ],
                "state": [
                    "str",
                    "bytes",
                    "List[List[int]]",
                    "list[list[int]]"
                ]
            }
        },
        "test_full_delay_max_slots": {
            "name": "test_full_delay_max_slots",
            "location": 131,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "bytes",
                    "List[List[int]]",
                    "list[list[int]]"
                ],
                "state": [
                    "str",
                    "bytes",
                    "List[List[int]]",
                    "list[list[int]]"
                ]
            }
        },
        "test_full_mixed_delay": {
            "name": "test_full_mixed_delay",
            "location": 137,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "state": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "test_proposer_not_in_attestations": {
            "name": "test_proposer_not_in_attestations",
            "location": 143,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "state": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "test_duplicate_attestations_at_later_slots": {
            "name": "test_duplicate_attestations_at_later_slots",
            "location": 149,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "bytes",
                    "List[List[int]]",
                    "list[list[int]]"
                ],
                "state": [
                    "str",
                    "bytes",
                    "List[List[int]]",
                    "list[list[int]]"
                ]
            }
        },
        "test_all_balances_too_low_for_reward": {
            "name": "test_all_balances_too_low_for_reward",
            "location": 155,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "state": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/phase0/rewards/test_leak.py": {
        "test_empty_leak": {
            "name": "test_empty_leak",
            "location": 10,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str"
                ],
                "state": [
                    "str"
                ]
            }
        },
        "test_full_leak": {
            "name": "test_full_leak",
            "location": 17,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "str",
                    "bool",
                    "None",
                    "Optional[str]"
                ],
                "state": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "str",
                    "bool",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "test_half_full_leak": {
            "name": "test_half_full_leak",
            "location": 24,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "str",
                    "bool",
                    "None",
                    "Optional[str]"
                ],
                "state": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "str",
                    "bool",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "test_quarter_full_leak": {
            "name": "test_quarter_full_leak",
            "location": 31,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str"
                ],
                "state": [
                    "str"
                ]
            }
        },
        "test_full_but_partial_participation_leak": {
            "name": "test_full_but_partial_participation_leak",
            "location": 38,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "state": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "test_one_attestation_one_correct_leak": {
            "name": "test_one_attestation_one_correct_leak",
            "location": 45,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "bytes",
                    "List[List[int]]",
                    "list[list[int]]"
                ],
                "state": [
                    "str",
                    "bytes",
                    "List[List[int]]",
                    "list[list[int]]"
                ]
            }
        },
        "test_with_not_yet_activated_validators_leak": {
            "name": "test_with_not_yet_activated_validators_leak",
            "location": 52,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "state": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "test_with_exited_validators_leak": {
            "name": "test_with_exited_validators_leak",
            "location": 59,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "str",
                    "bool",
                    "None",
                    "Optional[str]"
                ],
                "state": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "str",
                    "bool",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "test_with_slashed_validators_leak": {
            "name": "test_with_slashed_validators_leak",
            "location": 66,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "str",
                    "bool",
                    "None",
                    "Optional[str]"
                ],
                "state": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "str",
                    "bool",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "test_some_very_low_effective_balances_that_attested_leak": {
            "name": "test_some_very_low_effective_balances_that_attested_leak",
            "location": 73,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str"
                ],
                "state": [
                    "str"
                ]
            }
        },
        "test_some_very_low_effective_balances_that_did_not_attest_leak": {
            "name": "test_some_very_low_effective_balances_that_did_not_attest_leak",
            "location": 80,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "state": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_full_half_correct_target_incorrect_head_leak": {
            "name": "test_full_half_correct_target_incorrect_head_leak",
            "location": 94,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str"
                ],
                "state": [
                    "str"
                ]
            }
        },
        "test_full_correct_target_incorrect_head_leak": {
            "name": "test_full_correct_target_incorrect_head_leak",
            "location": 106,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str"
                ],
                "state": [
                    "str"
                ]
            }
        },
        "test_full_half_incorrect_target_incorrect_head_leak": {
            "name": "test_full_half_incorrect_target_incorrect_head_leak",
            "location": 118,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_full_half_incorrect_target_correct_head_leak": {
            "name": "test_full_half_incorrect_target_correct_head_leak",
            "location": 130,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "bytes"
                ],
                "state": [
                    "str",
                    "bytes"
                ]
            }
        },
        "test_full_random_leak": {
            "name": "test_full_random_leak",
            "location": 142,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "str",
                    "bool",
                    "None",
                    "Optional[str]"
                ],
                "state": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "str",
                    "bool",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "test_full_random_seven_epoch_leak": {
            "name": "test_full_random_seven_epoch_leak",
            "location": 149,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "str",
                    "bool",
                    "None",
                    "Optional[str]"
                ],
                "state": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "str",
                    "bool",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "test_full_random_ten_epoch_leak": {
            "name": "test_full_random_ten_epoch_leak",
            "location": 156,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "str",
                    "bool",
                    "None",
                    "Optional[str]"
                ],
                "state": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "str",
                    "bool",
                    "None",
                    "Optional[str]"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/phase0/rewards/test_random.py": {
        "test_full_random_0": {
            "name": "test_full_random_0",
            "location": 23,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "str",
                    "bool",
                    "None",
                    "Optional[str]"
                ],
                "state": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "str",
                    "bool",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "test_full_random_1": {
            "name": "test_full_random_1",
            "location": 29,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "str",
                    "bool",
                    "None",
                    "Optional[str]"
                ],
                "state": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "str",
                    "bool",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "test_full_random_2": {
            "name": "test_full_random_2",
            "location": 35,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "str",
                    "bool",
                    "None",
                    "Optional[str]"
                ],
                "state": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "str",
                    "bool",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "test_full_random_3": {
            "name": "test_full_random_3",
            "location": 41,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "str",
                    "bool",
                    "None",
                    "Optional[str]"
                ],
                "state": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "str",
                    "bool",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "test_full_random_4": {
            "name": "test_full_random_4",
            "location": 47,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "raiden.transfer.state.ChainState"
                ],
                "state": [
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "test_full_random_low_balances_0": {
            "name": "test_full_random_low_balances_0",
            "location": 64,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "state": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "test_full_random_low_balances_1": {
            "name": "test_full_random_low_balances_1",
            "location": 72,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "state": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "test_full_random_misc_balances": {
            "name": "test_full_random_misc_balances",
            "location": 80,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "state": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "test_full_random_without_leak_0": {
            "name": "test_full_random_without_leak_0",
            "location": 86,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_full_random_without_leak_and_current_exit_0": {
            "name": "test_full_random_without_leak_and_current_exit_0",
            "location": 100,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/phase0/rewards/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/phase0/sanity/test_blocks.py": {
        "test_prev_slot_block_transition": {
            "name": "test_prev_slot_block_transition",
            "location": 48,
            "return": [
                "",
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]",
                "typing.Generator[tuple[typing.Optional[typing.Text]]]"
            ],
            "arguments": {
                "spec": [
                    "raiden.transfer.state.ChainState",
                    "Tuple[int, int]",
                    "Callable"
                ],
                "state": [
                    "raiden.transfer.state.ChainState",
                    "Tuple[int, int]",
                    "Callable"
                ]
            }
        },
        "test_same_slot_block_transition": {
            "name": "test_same_slot_block_transition",
            "location": 69,
            "return": [
                "",
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]",
                "typing.Generator[tuple[typing.Optional[typing.Text]]]"
            ],
            "arguments": {
                "spec": [
                    "raiden.transfer.state.ChainState"
                ],
                "state": [
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "test_empty_block_transition": {
            "name": "test_empty_block_transition",
            "location": 87,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,float]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "raiden.utils.Callable",
                    "bytes",
                    "Optional[Dict[str, Any]]"
                ],
                "state": [
                    "float"
                ]
            }
        },
        "test_empty_block_transition_large_validator_set": {
            "name": "test_empty_block_transition_large_validator_set",
            "location": 112,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,float]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "raiden.utils.Callable",
                    "Tuple[str, dict]"
                ],
                "state": [
                    "float"
                ]
            }
        },
        "process_and_sign_block_without_header_validations": {
            "name": "process_and_sign_block_without_header_validations",
            "location": 131,
            "return": [
                "Container[T]",
                "Callable[[str], str]",
                "int"
            ],
            "arguments": {
                "spec": [
                    "Union[AsyncIterable[Any], Iterable[Any]]",
                    "str"
                ],
                "state": [
                    "Union[AsyncIterable[Any], Iterable[Any]]",
                    "str"
                ],
                "block": [
                    "Union[AsyncIterable[Any], Iterable[Any]]",
                    "str",
                    "collections.abc.AsyncIterable",
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "test_proposal_for_genesis_slot": {
            "name": "test_proposal_for_genesis_slot",
            "location": 166,
            "return": [
                "",
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]",
                "typing.Generator[tuple[typing.Optional[typing.Text]]]"
            ],
            "arguments": {
                "spec": [],
                "state": [
                    "Callable"
                ]
            }
        },
        "test_parent_from_same_slot": {
            "name": "test_parent_from_same_slot",
            "location": 189,
            "return": [
                "",
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]",
                "typing.Generator[tuple[typing.Optional[typing.Text]]]"
            ],
            "arguments": {
                "spec": [
                    "bool"
                ],
                "state": [
                    "bool"
                ]
            }
        },
        "test_invalid_state_root": {
            "name": "test_invalid_state_root",
            "location": 216,
            "return": [
                "",
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]",
                "typing.Generator[tuple[typing.Optional[typing.Text]]]"
            ],
            "arguments": {
                "spec": [
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ],
                "state": [
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ]
            }
        },
        "test_zero_block_sig": {
            "name": "test_zero_block_sig",
            "location": 232,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,dict[str, typing.Any],None,str]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]",
                "typing.Generator[tuple[typing.Optional[typing.Text]]]"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "Optional[Dict[str, Any]]"
                ],
                "state": [
                    "Optional[Dict[str, Any]]",
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "test_invalid_block_sig": {
            "name": "test_invalid_block_sig",
            "location": 246,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,dict[str, typing.Any],None]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]",
                "typing.Generator[tuple[typing.Optional[typing.Text]]]"
            ],
            "arguments": {
                "spec": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "state": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "test_invalid_proposer_index_sig_from_expected_proposer": {
            "name": "test_invalid_proposer_index_sig_from_expected_proposer",
            "location": 265,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,dict[typing.Hashable, typing.Iterable[typing.Hashable]],typing.Callable[, ]]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]",
                "typing.Generator[tuple[typing.Optional[typing.Text]]]"
            ],
            "arguments": {
                "spec": [
                    "Dict[Hashable, Iterable[Hashable]]",
                    "Callable"
                ],
                "state": [
                    "Dict[Hashable, Iterable[Hashable]]",
                    "dict[typing.Hashable, typing.Iterable[typing.Hashable]]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_invalid_proposer_index_sig_from_proposer_index": {
            "name": "test_invalid_proposer_index_sig_from_proposer_index",
            "location": 287,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,dict[typing.Hashable, typing.Iterable[typing.Hashable]],typing.Callable[, ]]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]",
                "typing.Generator[tuple[typing.Optional[typing.Text]]]"
            ],
            "arguments": {
                "spec": [
                    "Dict[Hashable, Iterable[Hashable]]",
                    "Callable"
                ],
                "state": [
                    "Dict[Hashable, Iterable[Hashable]]",
                    "dict[typing.Hashable, typing.Iterable[typing.Hashable]]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_skipped_slots": {
            "name": "test_skipped_slots",
            "location": 307,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,typing.Callable[, ]]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [
                    "int"
                ],
                "state": [
                    "typing.Callable[, ]",
                    "Callable",
                    "raiden.transfer.state.ChainState",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.TargetAddress"
                ]
            }
        },
        "test_empty_epoch_transition": {
            "name": "test_empty_epoch_transition",
            "location": 326,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,typing.Callable[, ],dict[\"core.Edge\", \"state.State\"]]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [
                    "int"
                ],
                "state": [
                    "typing.Callable[, ]",
                    "dict[\"core.Edge\", \"state.State\"]",
                    "Callable",
                    "Dict[\"core.Edge\", \"state.State\"]",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.TargetAddress",
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "test_empty_epoch_transition_large_validator_set": {
            "name": "test_empty_epoch_transition_large_validator_set",
            "location": 348,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,typing.Callable[, ],dict[\"core.Edge\", \"state.State\"]]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [
                    "int"
                ],
                "state": [
                    "typing.Callable[, ]",
                    "dict[\"core.Edge\", \"state.State\"]",
                    "Callable",
                    "Dict[\"core.Edge\", \"state.State\"]",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.TargetAddress",
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "test_empty_epoch_transition_not_finalizing": {
            "name": "test_empty_epoch_transition_not_finalizing",
            "location": 366,
            "return": [
                "typing.Generator[tuple[typing.Text]]",
                "str",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "typing.Callable[, ]",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.PaymentNetworkID",
                    "Callable"
                ],
                "state": [
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "test_proposer_self_slashing": {
            "name": "test_proposer_self_slashing",
            "location": 390,
            "return": [
                "",
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_proposer_slashing": {
            "name": "test_proposer_slashing",
            "location": 412,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,list[raiden.utils.Address]]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [
                    "float"
                ],
                "state": [
                    "list[raiden.utils.Address]",
                    "float",
                    "List[raiden.utils.Address]"
                ]
            }
        },
        "test_double_same_proposer_slashings_same_block": {
            "name": "test_double_same_proposer_slashings_same_block",
            "location": 438,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,float]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]",
                "typing.Generator[tuple[typing.Optional[typing.Text]]]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "str"
                ],
                "state": [
                    "float"
                ]
            }
        },
        "test_double_similar_proposer_slashings_same_block": {
            "name": "test_double_similar_proposer_slashings_same_block",
            "location": 455,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,str,dict[str, typing.Any],None]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]",
                "typing.Generator[tuple[typing.Optional[typing.Text]]]"
            ],
            "arguments": {
                "spec": [
                    "raiden.utils.Callable",
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "state": [
                    "str",
                    "raiden.utils.Callable",
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "None"
                ]
            }
        },
        "test_multiple_different_proposer_slashings_same_block": {
            "name": "test_multiple_different_proposer_slashings_same_block",
            "location": 479,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,list[raiden.utils.Address]]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [
                    "raiden.utils.Callable",
                    "Optional[Dict[str, Any]]",
                    "Tuple[str, dict]",
                    "str"
                ],
                "state": [
                    "list[raiden.utils.Address]",
                    "List[raiden.utils.Address]",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.NetworkTimeout",
                    "raiden.utils.TokenNetworkRegistryAddress"
                ]
            }
        },
        "check_attester_slashing_effect": {
            "name": "check_attester_slashing_effect",
            "location": 511,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.SecretHash"
                ],
                "pre_state": [
                    "raiden.transfer.state.ChainState",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ],
                "state": [
                    "Callable",
                    "typing.Callable[, ]",
                    "str",
                    "Dict[str, float]",
                    "dict[str, float]"
                ],
                "slashed_indices": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "list[str]",
                    "List[str]",
                    "Callable[[List], List[str]]"
                ]
            }
        },
        "test_attester_slashing": {
            "name": "test_attester_slashing",
            "location": 527,
            "return": [
                "",
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [
                    "float"
                ],
                "state": [
                    "float",
                    "str"
                ]
            }
        },
        "test_duplicate_attester_slashing": {
            "name": "test_duplicate_attester_slashing",
            "location": 554,
            "return": [
                "typing.Generator[tuple[typing.Union[typing.Text,float,str]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]",
                "typing.Generator[tuple[typing.Optional[typing.Text]]]"
            ],
            "arguments": {
                "spec": [
                    "raiden.utils.Address",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ],
                "state": [
                    "float",
                    "str"
                ]
            }
        },
        "test_multiple_attester_slashings_no_overlap": {
            "name": "test_multiple_attester_slashings_no_overlap",
            "location": 582,
            "return": [
                "typing.Generator[tuple[typing.Union[typing.Text,list[raiden.utils.Address]]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [
                    "Sequence[str]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "int"
                ],
                "state": [
                    "list[raiden.utils.Address]",
                    "raiden.utils.NetworkTimeout",
                    "List[raiden.utils.Address]",
                    "Callable"
                ]
            }
        },
        "test_multiple_attester_slashings_partial_overlap": {
            "name": "test_multiple_attester_slashings_partial_overlap",
            "location": 622,
            "return": [
                "typing.Generator[tuple[typing.Union[typing.Text,list[raiden.utils.Address]]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [
                    "Sequence[str]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ],
                "state": [
                    "list[raiden.utils.Address]",
                    "List[raiden.utils.Address]",
                    "raiden.utils.NetworkTimeout"
                ]
            }
        },
        "test_proposer_after_inactive_index": {
            "name": "test_proposer_after_inactive_index",
            "location": 662,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,float,str]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "str"
                ],
                "state": [
                    "float",
                    "str"
                ]
            }
        },
        "test_high_proposer_index": {
            "name": "test_high_proposer_index",
            "location": 685,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,int]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "raiden.transfer.state.ChainState",
                    "raiden.utils.TokenNetworkAddress"
                ],
                "state": [
                    "int"
                ]
            }
        },
        "test_expected_deposit_in_block": {
            "name": "test_expected_deposit_in_block",
            "location": 712,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,dict[str, typing.Any],None,str]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]",
                "typing.Generator[tuple[typing.Optional[typing.Text]]]"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ],
                "state": [
                    "raiden.utils.TokenNetworkAddress",
                    "dict[str, typing.Any]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "None"
                ]
            }
        },
        "test_deposit_in_block": {
            "name": "test_deposit_in_block",
            "location": 726,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,list[int],list[float]]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [
                    "typing.Sequence[str]",
                    "int",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Sequence[str]",
                    "bool"
                ],
                "state": [
                    "List[int]",
                    "list[int]",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "test_deposit_top_up": {
            "name": "test_deposit_top_up",
            "location": 751,
            "return": [
                "",
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [
                    "typing.Sequence[str]",
                    "int",
                    "Sequence[str]",
                    "typing.Iterable[typing.Any]",
                    "Iterable[Any]",
                    "tests.pathfinding.utils.SimpleReachabilityContainer"
                ],
                "state": [
                    "int",
                    "Iterable[Any]"
                ]
            }
        },
        "test_attestation": {
            "name": "test_attestation",
            "location": 794,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,int]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "raiden.utils.NetworkTimeout",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.PaymentNetworkID"
                ],
                "state": [
                    "int",
                    "raiden.utils.NetworkTimeout",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.PaymentNetworkID"
                ]
            }
        },
        "test_voluntary_exit": {
            "name": "test_voluntary_exit",
            "location": 844,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,str,tuple[typing.Union[str,dict[, ]]]]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "raiden.utils.Callable",
                    "Tuple[str, dict]"
                ],
                "state": [
                    "str",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "raiden.utils.Callable",
                    "Tuple[str, dict]"
                ]
            }
        },
        "test_double_validator_exit_same_block": {
            "name": "test_double_validator_exit_same_block",
            "location": 872,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,str,dict[str, typing.Any],None]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]",
                "typing.Generator[tuple[typing.Optional[typing.Text]]]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "raiden.utils.Callable"
                ],
                "state": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "raiden.utils.Callable",
                    "None"
                ]
            }
        },
        "test_multiple_different_validator_exits_same_block": {
            "name": "test_multiple_different_validator_exits_same_block",
            "location": 894,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,dict[str, typing.Any],None,str]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [
                    "Optional[Dict[str, Any]]",
                    "raiden.utils.Callable",
                    "str"
                ],
                "state": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "str",
                    "raiden.utils.Callable",
                    "None"
                ]
            }
        },
        "test_slash_and_exit_same_index": {
            "name": "test_slash_and_exit_same_index",
            "location": 927,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "raiden.utils.Callable",
                    "Tuple[str, dict]"
                ],
                "state": [
                    "str",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "raiden.utils.Callable",
                    "Tuple[str, dict]"
                ]
            }
        },
        "test_slash_and_exit_diff_index": {
            "name": "test_slash_and_exit_diff_index",
            "location": 935,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "raiden.utils.Callable",
                    "Tuple[str, dict]"
                ],
                "state": [
                    "str",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "raiden.utils.Callable",
                    "Tuple[str, dict]"
                ]
            }
        },
        "test_balance_driven_status_transitions": {
            "name": "test_balance_driven_status_transitions",
            "location": 943,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,str,dict[str, typing.Any],None]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [
                    "raiden.utils.Callable",
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "state": [
                    "str",
                    "raiden.utils.Callable",
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "None"
                ]
            }
        },
        "test_historical_batch": {
            "name": "test_historical_batch",
            "location": 969,
            "return": [
                "",
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_eth1_data_votes_consensus": {
            "name": "test_eth1_data_votes_consensus",
            "location": 989,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,int]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[str]]]]"
            ],
            "arguments": {
                "spec": [
                    "typing.Callable[, ]",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.PaymentNetworkID",
                    "Callable",
                    "raiden.utils.Callable"
                ],
                "state": [
                    "int",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.TargetAddress"
                ]
            }
        },
        "test_eth1_data_votes_no_consensus": {
            "name": "test_eth1_data_votes_no_consensus",
            "location": 1030,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,dict[str, typing.Sequence[typing.Any]]]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,list[str],list[]]]]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "typing.Callable[, ]",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.PaymentNetworkID",
                    "Callable",
                    "raiden.utils.Callable"
                ],
                "state": [
                    "Dict[str, Sequence[Any]]",
                    "dict[str, typing.Sequence[typing.Any]]"
                ]
            }
        },
        "test_full_random_operations_0": {
            "name": "test_full_random_operations_0",
            "location": 1060,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "raiden.utils.List[raiden.utils.TokenAddress]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ],
                "state": [
                    "int",
                    "raiden.utils.List[raiden.utils.TokenAddress]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ]
            }
        },
        "test_full_random_operations_1": {
            "name": "test_full_random_operations_1",
            "location": 1066,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "raiden.utils.List[raiden.utils.TokenAddress]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ],
                "state": [
                    "int",
                    "raiden.utils.List[raiden.utils.TokenAddress]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ]
            }
        },
        "test_full_random_operations_2": {
            "name": "test_full_random_operations_2",
            "location": 1072,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "raiden.utils.List[raiden.utils.TokenAddress]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ],
                "state": [
                    "int",
                    "raiden.utils.List[raiden.utils.TokenAddress]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ]
            }
        },
        "test_full_random_operations_3": {
            "name": "test_full_random_operations_3",
            "location": 1078,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "raiden.utils.List[raiden.utils.TokenAddress]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ],
                "state": [
                    "int",
                    "raiden.utils.List[raiden.utils.TokenAddress]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/phase0/sanity/test_slots.py": {
        "test_slots_1": {
            "name": "test_slots_1",
            "location": 7,
            "return": [
                "",
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[tuple[typing.Union[typing.Text,int]]]"
            ],
            "arguments": {
                "spec": [
                    "float"
                ],
                "state": []
            }
        },
        "test_slots_2": {
            "name": "test_slots_2",
            "location": 23,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,list[int]]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,int]]]"
            ],
            "arguments": {
                "spec": [
                    "List[int]",
                    "list[int]"
                ],
                "state": [
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "test_empty_epoch": {
            "name": "test_empty_epoch",
            "location": 33,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,list[int]]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,int]]]"
            ],
            "arguments": {
                "spec": [
                    "str"
                ],
                "state": [
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "test_double_empty_epoch": {
            "name": "test_double_empty_epoch",
            "location": 43,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,list[int]]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,int]]]"
            ],
            "arguments": {
                "spec": [
                    "str"
                ],
                "state": [
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "test_over_epoch_boundary": {
            "name": "test_over_epoch_boundary",
            "location": 53,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,typing.Iterable[typing.Any]]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,int]]]"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "Iterable[Any]",
                    "typing.Iterable[typing.Any]"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/phase0/sanity/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/phase0/unittests/test_config_invariants.py": {
        "check_bound": {
            "name": "check_bound",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "value": [
                    "bool",
                    "float",
                    "int"
                ],
                "lower_bound": [
                    "bool",
                    "str",
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "None",
                    "int",
                    "List[Tuple[str, Any]]",
                    "Optional[List[Any]]",
                    "Optional[str]",
                    "Union[str, None]"
                ],
                "upper_bound": [
                    "bool",
                    "str",
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "None",
                    "int",
                    "List[Tuple[str, Any]]",
                    "Optional[List[Any]]",
                    "Optional[str]",
                    "Union[str, None]"
                ]
            }
        },
        "test_validators": {
            "name": "test_validators",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [],
                "state": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_balances": {
            "name": "test_balances",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [],
                "state": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_hysteresis_quotient": {
            "name": "test_hysteresis_quotient",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [],
                "state": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_incentives": {
            "name": "test_incentives",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_time": {
            "name": "test_time",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "test_networking": {
            "name": "test_networking",
            "location": 75,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "bytes"
                ],
                "state": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_fork_choice": {
            "name": "test_fork_choice",
            "location": 81,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "state": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/phase0/unittests/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/phase0/unittests/fork_choice/test_on_attestation.py": {
        "run_on_attestation": {
            "name": "run_on_attestation",
            "location": 9,
            "return": [
                "Awaitable",
                "None"
            ],
            "arguments": {
                "spec": [
                    "bytes",
                    "Callable",
                    "bool"
                ],
                "state": [
                    "int",
                    "str"
                ],
                "store": [
                    "list",
                    "list[]"
                ],
                "attestation": [
                    "str",
                    "bytes",
                    "bool",
                    "List[str]",
                    "list[str]"
                ],
                "valid": [
                    "bool",
                    "Sequence[int]",
                    "Optional[Set[str]]",
                    "list"
                ]
            }
        },
        "test_on_attestation_current_epoch": {
            "name": "test_on_attestation_current_epoch",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_on_attestation_previous_epoch": {
            "name": "test_on_attestation_previous_epoch",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_on_attestation_past_epoch": {
            "name": "test_on_attestation_past_epoch",
            "location": 74,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_on_attestation_mismatched_target_and_slot": {
            "name": "test_on_attestation_mismatched_target_and_slot",
            "location": 96,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_on_attestation_inconsistent_target_and_head": {
            "name": "test_on_attestation_inconsistent_target_and_head",
            "location": 119,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_on_attestation_target_block_not_in_store": {
            "name": "test_on_attestation_target_block_not_in_store",
            "location": 157,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_on_attestation_target_checkpoint_not_in_store": {
            "name": "test_on_attestation_target_checkpoint_not_in_store",
            "location": 179,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_on_attestation_target_checkpoint_not_in_store_diff_slot": {
            "name": "test_on_attestation_target_checkpoint_not_in_store_diff_slot",
            "location": 204,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_on_attestation_beacon_block_not_in_store": {
            "name": "test_on_attestation_beacon_block_not_in_store",
            "location": 231,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_on_attestation_future_epoch": {
            "name": "test_on_attestation_future_epoch",
            "location": 260,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "state": []
            }
        },
        "test_on_attestation_future_block": {
            "name": "test_on_attestation_future_block",
            "location": 280,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "int"
                ],
                "state": []
            }
        },
        "test_on_attestation_same_slot": {
            "name": "test_on_attestation_same_slot",
            "location": 300,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "state": []
            }
        },
        "test_on_attestation_invalid_attestation": {
            "name": "test_on_attestation_invalid_attestation",
            "location": 316,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "state": []
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/phase0/unittests/fork_choice/test_on_block.py": {
        "test_on_block_outside_safe_slots_and_multiple_better_justified": {
            "name": "test_on_block_outside_safe_slots_and_multiple_better_justified",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/phase0/unittests/fork_choice/test_on_tick.py": {
        "run_on_tick": {
            "name": "run_on_tick",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "store": [
                    "int"
                ],
                "time": [
                    "bytes",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "new_justified_checkpoint": [
                    "bool",
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_basic": {
            "name": "test_basic",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "dict",
                    "float",
                    "dict[, ]"
                ],
                "state": []
            }
        },
        "test_update_justified_single_on_store_finalized_chain": {
            "name": "test_update_justified_single_on_store_finalized_chain",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_update_justified_single_not_on_store_finalized_chain": {
            "name": "test_update_justified_single_not_on_store_finalized_chain",
            "location": 74,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_no_update_same_slot_at_epoch_boundary": {
            "name": "test_no_update_same_slot_at_epoch_boundary",
            "location": 127,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [],
                "state": [
                    "str"
                ]
            }
        },
        "test_no_update_not_epoch_boundary": {
            "name": "test_no_update_not_epoch_boundary",
            "location": 144,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "dict",
                    "dict[, ]"
                ],
                "state": [
                    "str"
                ]
            }
        },
        "test_no_update_new_justified_equal_epoch": {
            "name": "test_no_update_new_justified_equal_epoch",
            "location": 157,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_no_update_new_justified_later_epoch": {
            "name": "test_no_update_new_justified_later_epoch",
            "location": 176,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/phase0/unittests/validator/test_validator_unittest.py": {
        "run_get_signature_test": {
            "name": "run_get_signature_test",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "int"
                ],
                "state": [
                    "bool",
                    "typing.Callable[, ]",
                    "Callable",
                    "int",
                    "raiden.utils.Address"
                ],
                "obj": [
                    "str",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "domain": [
                    "str",
                    "int",
                    "Optional[Mapping[str, Any]]",
                    "typing.Mapping",
                    "None"
                ],
                "get_signature_fn": [
                    "bool",
                    "typing.Callable[, ]",
                    "Callable",
                    "int",
                    "raiden.utils.Address"
                ],
                "privkey": [
                    "bool",
                    "typing.Callable[, ]",
                    "Callable",
                    "int",
                    "raiden.utils.Address"
                ],
                "pubkey": [
                    "str",
                    "bool"
                ],
                "signing_ssz_object": [
                    "Dict[str, Any]",
                    "None",
                    "int",
                    "dict[str, typing.Any]",
                    "str",
                    "Optional[List[str]]",
                    "list[str]",
                    "Optional[str]"
                ]
            }
        },
        "run_get_committee_assignment": {
            "name": "run_get_committee_assignment",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "raiden.utils.NetworkTimeout",
                    "raiden.utils.List[raiden.utils.TokenAddress]",
                    "raiden.utils.TokenAmount",
                    "int"
                ],
                "state": [
                    "typing.Callable[, ]",
                    "float",
                    "raiden.utils.TokenAmount",
                    "Callable",
                    "raiden.utils.Address"
                ],
                "epoch": [
                    "typing.Callable[, ]",
                    "int",
                    "Callable",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.NetworkTimeout"
                ],
                "validator_index": [
                    "typing.Callable[, ]",
                    "int",
                    "Callable",
                    "str",
                    "float",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.Secret",
                    "bool"
                ],
                "valid": [
                    "bool",
                    "int",
                    "str",
                    "Callable"
                ]
            }
        },
        "run_is_candidate_block": {
            "name": "run_is_candidate_block",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "typing.Callable[int, None]",
                    "raiden.utils.Address",
                    "raiden.utils.BlockIdentifier",
                    "raiden.utils.BlockSpecification",
                    "Callable[[int], None]"
                ],
                "eth1_block": [
                    "int",
                    "typing.Callable[int, None]",
                    "raiden.utils.Address",
                    "raiden.utils.BlockIdentifier",
                    "raiden.utils.BlockSpecification",
                    "Callable[[int], None]"
                ],
                "period_start": [
                    "int",
                    "typing.Callable[int, None]",
                    "raiden.utils.Address",
                    "raiden.utils.BlockIdentifier",
                    "raiden.utils.BlockSpecification",
                    "Callable[[int], None]"
                ],
                "success": [
                    "bool",
                    "int",
                    "raiden.utils.Address",
                    "raiden.utils.BlockIdentifier",
                    "raiden.utils.BlockSpecification",
                    "Callable[[int], None]"
                ]
            }
        },
        "get_min_new_period_epochs": {
            "name": "get_min_new_period_epochs",
            "location": 42,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "spec": [
                    "dict[str, dict[str, typing.Any]]",
                    "Dict[str, Dict[str, Any]]",
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ServiceName",
                    "Optional[bool]",
                    "Optional[int]"
                ]
            }
        },
        "get_mock_aggregate": {
            "name": "get_mock_aggregate",
            "location": 49,
            "return": [
                "str",
                "int",
                "bool",
                "dict",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "bool",
                    "Optional[Callable]"
                ]
            }
        },
        "test_check_if_validator_active": {
            "name": "test_check_if_validator_active",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [],
                "state": [
                    "bytes"
                ]
            }
        },
        "test_get_committee_assignment_current_epoch": {
            "name": "test_get_committee_assignment_current_epoch",
            "location": 81,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "raiden.utils.TokenAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "bool"
                ],
                "state": [
                    "int",
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "test_get_committee_assignment_next_epoch": {
            "name": "test_get_committee_assignment_next_epoch",
            "location": 89,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "raiden.utils.TokenAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "bool"
                ],
                "state": [
                    "int",
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "test_get_committee_assignment_out_bound_epoch": {
            "name": "test_get_committee_assignment_out_bound_epoch",
            "location": 97,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "raiden.utils.TokenAddress",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "bool"
                ],
                "state": [
                    "float",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.SecreRegistryAddress"
                ]
            }
        },
        "test_is_proposer": {
            "name": "test_is_proposer",
            "location": 105,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "raiden.utils.Address",
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.PaymentNetworkID",
                    "raiden.utils.TokenNetworkAddress"
                ],
                "state": [
                    "int",
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.TargetAddress"
                ]
            }
        },
        "test_get_epoch_signature": {
            "name": "test_get_epoch_signature",
            "location": 123,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "List[str]"
                ],
                "state": [
                    "typing.Callable[, ]",
                    "raiden.utils.Address",
                    "raiden.utils.NetworkTimeout",
                    "Callable"
                ]
            }
        },
        "test_is_candidate_block": {
            "name": "test_is_candidate_block",
            "location": 142,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [],
                "state": [
                    "List[str]",
                    "bool",
                    "list[str]",
                    "str"
                ]
            }
        },
        "test_get_eth1_vote_default_vote": {
            "name": "test_get_eth1_vote_default_vote",
            "location": 173,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "aiozipkin.helpers.TraceContext"
                ]
            }
        },
        "test_get_eth1_vote_consensus_vote": {
            "name": "test_get_eth1_vote_consensus_vote",
            "location": 186,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "mythril.laser.ethereum.state.constraints.Constraints",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "raiden.utils.NetworkTimeout"
                ]
            }
        },
        "test_get_eth1_vote_tie": {
            "name": "test_get_eth1_vote_tie",
            "location": 222,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "mythril.laser.ethereum.state.constraints.Constraints",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "raiden.utils.NetworkTimeout"
                ]
            }
        },
        "test_get_eth1_vote_chain_in_past": {
            "name": "test_get_eth1_vote_chain_in_past",
            "location": 261,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "typing.Callable[, ]",
                    "Callable",
                    "raiden.utils.TokenAddress",
                    "Callable[[list], None]"
                ],
                "state": [
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.Address",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.PaymentNetworkID"
                ]
            }
        },
        "test_compute_new_state_root": {
            "name": "test_compute_new_state_root",
            "location": 288,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "List[str]",
                    "list[str]",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "state": [
                    "list[raiden.utils.Address]",
                    "list[list[int]]",
                    "List[raiden.utils.Address]",
                    "str",
                    "raiden.utils.TokenNetworkID",
                    "List[List[int]]",
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "test_get_block_signature": {
            "name": "test_get_block_signature",
            "location": 306,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_compute_fork_digest": {
            "name": "test_compute_fork_digest",
            "location": 324,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_get_attestation_signature_phase0": {
            "name": "test_get_attestation_signature_phase0",
            "location": 341,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [],
                "state": []
            }
        },
        "test_compute_subnet_for_attestation": {
            "name": "test_compute_subnet_for_attestation",
            "location": 360,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "float"
                ],
                "state": [
                    "float",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_get_slot_signature": {
            "name": "test_get_slot_signature",
            "location": 379,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "dict"
                ],
                "state": [
                    "list[raiden.utils.Address]",
                    "List[raiden.utils.Address]",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.TokenNetworkRegistryAddress"
                ]
            }
        },
        "test_is_aggregator": {
            "name": "test_is_aggregator",
            "location": 398,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "typing.Callable[, ]",
                    "float",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.PaymentNetworkID",
                    "Callable",
                    "raiden.utils.Callable"
                ],
                "state": [
                    "raiden.utils.Callable",
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "None"
                ]
            }
        },
        "test_get_aggregate_signature": {
            "name": "test_get_aggregate_signature",
            "location": 417,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "List[List[int]]",
                    "str"
                ],
                "state": []
            }
        },
        "test_get_aggregate_and_proof": {
            "name": "test_get_aggregate_and_proof",
            "location": 451,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "float",
                    "Callable",
                    "raiden.utils.SecreRegistryAddress",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.PaymentNetworkID"
                ],
                "state": [
                    "float",
                    "typing.Callable[, ]",
                    "raiden.utils.Callable",
                    "Callable",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.PaymentNetworkID"
                ]
            }
        },
        "test_get_aggregate_and_proof_signature": {
            "name": "test_get_aggregate_and_proof_signature",
            "location": 464,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [],
                "state": [
                    "typing.Callable[, ]",
                    "bool",
                    "raiden.utils.Callable",
                    "Callable"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/phase0/unittests/validator/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/sharding/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/sharding/unittests/test_get_start_shard.py": {
        "test_get_committee_count_delta": {
            "name": "test_get_committee_count_delta",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "state": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "test_get_start_shard_current_epoch_start": {
            "name": "test_get_start_shard_current_epoch_start",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "float"
                ],
                "state": [
                    "int",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_get_start_shard_next_slot": {
            "name": "test_get_start_shard_next_slot",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "float"
                ],
                "state": [
                    "float"
                ]
            }
        },
        "test_get_start_shard_previous_slot": {
            "name": "test_get_start_shard_previous_slot",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "float"
                ],
                "state": [
                    "float"
                ]
            }
        },
        "test_get_start_shard_far_past_epoch": {
            "name": "test_get_start_shard_far_past_epoch",
            "location": 81,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState"
                ],
                "state": [
                    "bool",
                    "str",
                    "raiden.transfer.state.ChainState"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/sharding/unittests/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/utils/randomized_block_tests.py": {
        "_randomize_deposit_state": {
            "name": "_randomize_deposit_state",
            "location": 33,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "spec": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "numpy.random.RandomState",
                    "int"
                ],
                "state": [
                    "float",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "Optional[bool]"
                ],
                "stats": [
                    "dict",
                    "str",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "randomize_state": {
            "name": "randomize_state",
            "location": 52,
            "return": [
                "int",
                "Callable",
                "Sequence[str]",
                "List[recidiviz.persistence.database.schema.state.schema.StatePerson]"
            ],
            "arguments": {
                "spec": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ],
                "state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ],
                "stats": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "prefecengine.state.State",
                    "int"
                ],
                "exit_fraction": [
                    "raiden.transfer.state.ChainState",
                    "raiden.transfer.mediated_transfer.state.InitiatorPaymentState",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ],
                "slash_fraction": [
                    "raiden.transfer.state.ChainState",
                    "raiden.transfer.mediated_transfer.state.InitiatorPaymentState",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "randomize_state_altair": {
            "name": "randomize_state_altair",
            "location": 58,
            "return": [
                "int",
                "Callable",
                "Sequence[str]",
                "List[recidiviz.persistence.database.schema.state.schema.StatePerson]"
            ],
            "arguments": {
                "spec": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState"
                ],
                "state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState"
                ],
                "stats": [
                    "raiden.transfer.state.ChainState",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.mediated_transfer.state.InitiatorPaymentState",
                    "raiden.utils.List[raiden.transfer.state.RouteState]",
                    "raiden.transfer.state.RouteState"
                ],
                "exit_fraction": [
                    "raiden.transfer.state.ChainState",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.mediated_transfer.state.InitiatorPaymentState",
                    "raiden.utils.List[raiden.transfer.state.RouteState]",
                    "raiden.transfer.state.RouteState"
                ],
                "slash_fraction": [
                    "raiden.transfer.state.ChainState",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.mediated_transfer.state.InitiatorPaymentState",
                    "raiden.utils.List[raiden.transfer.state.RouteState]",
                    "raiden.transfer.state.RouteState"
                ]
            }
        },
        "randomize_state_bellatrix": {
            "name": "randomize_state_bellatrix",
            "location": 64,
            "return": [
                "int",
                "Callable",
                "Sequence[str]",
                "List[recidiviz.persistence.database.schema.state.schema.StatePerson]"
            ],
            "arguments": {
                "spec": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState"
                ],
                "state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState"
                ],
                "stats": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState"
                ],
                "exit_fraction": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState"
                ],
                "slash_fraction": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "epochs_until_leak": {
            "name": "epochs_until_leak",
            "location": 76,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "epochs_for_shard_committee_period": {
            "name": "epochs_for_shard_committee_period",
            "location": 84,
            "return": [
                "bool",
                "Optional[str]",
                "Tuple[str]"
            ],
            "arguments": {
                "spec": [
                    "bool",
                    "int",
                    "Tuple[str]",
                    "List[str]"
                ]
            }
        },
        "last_slot_in_epoch": {
            "name": "last_slot_in_epoch",
            "location": 90,
            "return": [
                "int",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "random_slot_in_epoch": {
            "name": "random_slot_in_epoch",
            "location": 94,
            "return": [
                "Dict[str, str]",
                "Optional[recidiviz.common.constants.state.state_supervision_period.StateSupervisionPeriodTerminationReason]",
                "int",
                "Iterable[Iterable[T]]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "List[str]"
                ],
                "rng": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "penultimate_slot_in_epoch": {
            "name": "penultimate_slot_in_epoch",
            "location": 98,
            "return": [
                "Dict[str, str]",
                "Optional[recidiviz.common.constants.state.state_supervision_period.StateSupervisionPeriodTerminationReason]",
                "int",
                "Iterable[Iterable[T]]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "spec": [
                    "Dict[str, str]",
                    "Optional[recidiviz.common.constants.state.state_supervision_period.StateSupervisionPeriodTerminationReason]",
                    "int",
                    "Iterable[Iterable[T]]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "no_block": {
            "name": "no_block",
            "location": 104,
            "return": [
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "_spec": [
                    "bool",
                    "Sequence[str]"
                ],
                "_pre_state": [
                    "bool",
                    "Sequence[str]"
                ],
                "_signed_blocks": [
                    "bool",
                    "Sequence[str]"
                ],
                "_scenario_state": [
                    "bool",
                    "Sequence[str]"
                ]
            }
        },
        "_warn_if_empty_operations": {
            "name": "_warn_if_empty_operations",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "block": [
                    "str",
                    "int",
                    "bool",
                    "Callable[[str, T], None]"
                ]
            }
        },
        "_pull_deposits_from_scenario_state": {
            "name": "_pull_deposits_from_scenario_state",
            "location": 131,
            "return": [
                "str",
                "type"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "Optional[int]",
                    "tuple"
                ],
                "scenario_state": [
                    "\"Task\"",
                    "Optional[Dict]",
                    "int",
                    "Dict[str, Any]",
                    "bool"
                ],
                "existing_block_count": [
                    "int",
                    "float",
                    "Union[None, int]"
                ]
            }
        },
        "random_block": {
            "name": "random_block",
            "location": 137,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "spec": [
                    "bytes",
                    "int",
                    "raiden.utils.List[raiden.transfer.mediated_transfer.state.MediationPairState]"
                ],
                "state": [
                    "Callable",
                    "raiden.transfer.mediated_transfer.state.MediatorTransferState"
                ],
                "signed_blocks": [
                    "int",
                    "float",
                    "List[float]",
                    "List[int]"
                ],
                "scenario_state": [
                    "int",
                    "float",
                    "List[float]",
                    "List[int]"
                ]
            }
        },
        "random_block_altair_with_cycling_sync_committee_participation": {
            "name": "random_block_altair_with_cycling_sync_committee_participation",
            "location": 173,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "spec": [],
                "state": [],
                "signed_blocks": [
                    "raiden.transfer.state.TokenNetworkState",
                    "random.Random"
                ],
                "scenario_state": [
                    "bool"
                ]
            }
        },
        "random_block_bellatrix": {
            "name": "random_block_bellatrix",
            "location": 192,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "spec": [],
                "state": [],
                "signed_blocks": [],
                "scenario_state": []
            }
        },
        "no_op_validation": {
            "name": "no_op_validation",
            "location": 200,
            "return": [
                "bool"
            ],
            "arguments": {
                "_spec": [
                    "BaseException",
                    "dict"
                ],
                "_state": [
                    "BaseException",
                    "dict"
                ]
            }
        },
        "validate_is_leaking": {
            "name": "validate_is_leaking",
            "location": 204,
            "return": [
                "bool"
            ],
            "arguments": {
                "spec": [
                    "int"
                ],
                "state": [
                    "int"
                ]
            }
        },
        "validate_is_not_leaking": {
            "name": "validate_is_not_leaking",
            "location": 208,
            "return": [
                "bool"
            ],
            "arguments": {
                "spec": [
                    "Callable",
                    "List[List[Any]]",
                    "List[List[str]]",
                    "str"
                ],
                "state": [
                    "Callable",
                    "List[List[Any]]",
                    "List[List[str]]",
                    "str"
                ]
            }
        },
        "with_validation": {
            "name": "with_validation",
            "location": 214,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "transition": [
                    "int",
                    "Callable",
                    "str"
                ],
                "validation": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "no_op_transition": {
            "name": "no_op_transition",
            "location": 221,
            "return": [
                "Tuple[int]",
                "str",
                "Sequence"
            ],
            "arguments": {}
        },
        "epoch_transition": {
            "name": "epoch_transition",
            "location": 225,
            "return": [
                "int",
                "float",
                "dict"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "slot_transition": {
            "name": "slot_transition",
            "location": 231,
            "return": [
                "int",
                "float",
                "dict"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "transition_to_leaking": {
            "name": "transition_to_leaking",
            "location": 237,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "transition_with_random_block": {
            "name": "transition_with_random_block",
            "location": 249,
            "return": [],
            "arguments": {
                "block_randomizer": [
                    "bool",
                    "Callable"
                ]
            }
        },
        "_randomized_scenario_setup": {
            "name": "_randomized_scenario_setup",
            "location": 263,
            "return": [
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "state_randomizer": [
                    "state.State"
                ]
            }
        },
        "_resolve_ref": {
            "name": "_resolve_ref",
            "location": 313,
            "return": [],
            "arguments": {
                "ref": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_iter_temporal": {
            "name": "_iter_temporal",
            "location": 319,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "int",
                    "Tuple[List[str], Optional[str]]",
                    "List[str]",
                    "list"
                ],
                "description": [
                    "int",
                    "Tuple[List[str], Optional[str]]",
                    "List[str]",
                    "list"
                ]
            }
        },
        "_compute_statistics": {
            "name": "_compute_statistics",
            "location": 332,
            "return": [
                "bool"
            ],
            "arguments": {
                "scenario": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "run_generated_randomized_test": {
            "name": "run_generated_randomized_test",
            "location": 343,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState"
                ],
                "state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ],
                "scenario": [
                    "Callable",
                    "dict"
                ]
            }
        },
        "_randomized_scenario_setup._skip_epochs": {
            "name": "_skip_epochs",
            "location": 277,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "epoch_producer": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_randomized_scenario_setup._simulate_honest_execution": {
            "name": "_simulate_honest_execution",
            "location": 288,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "float",
                    "List[src.main.core.models.state.State]"
                ],
                "state": [
                    "float",
                    "List[src.main.core.models.state.State]"
                ],
                "_stats": [
                    "BaseException",
                    "dict"
                ]
            }
        },
        "_randomized_scenario_setup._skip_epochs.f": {
            "name": "f",
            "location": 278,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "raiden.transfer.state.ChainState"
                ],
                "state": [
                    "Sequence[str]",
                    "raiden.transfer.state.ChainState",
                    "fakesmtpd.state.State"
                ],
                "_stats": [
                    "list"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/utils/utils.py": {
        "vector_test": {
            "name": "vector_test",
            "location": 6,
            "return": [
                "int",
                "str",
                "Dict[str, int]"
            ],
            "arguments": {
                "description": [
                    "str",
                    "None"
                ]
            }
        },
        "with_meta_tags": {
            "name": "with_meta_tags",
            "location": 76,
            "return": [
                "str",
                "float",
                "int",
                "Tuple[int, int]"
            ],
            "arguments": {
                "tags": [
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, Any]",
                    "list[str]",
                    "Iterable[str]",
                    "typing.Type",
                    "List[str]",
                    "list[]",
                    "Type[Exception]",
                    "list[int]",
                    "list",
                    "List[int]"
                ]
            }
        },
        "vector_test.runner": {
            "name": "runner",
            "location": 16,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "with_meta_tags.runner": {
            "name": "runner",
            "location": 83,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "vector_test.runner.entry": {
            "name": "entry",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "with_meta_tags.runner.entry": {
            "name": "entry",
            "location": 84,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "vector_test.runner.entry.generator_mode": {
            "name": "generator_mode",
            "location": 24,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,typing.Text]]]",
                "typing.Generator[]",
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[tuple[typing.Union[typing.Text,bytes]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,typing.Text,bytes]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,typing.Text,int]]]",
                "typing.Generator[tuple[typing.Optional[typing.Text]]]"
            ],
            "arguments": {}
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/test/utils/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/utils/bls.py": {
        "use_milagro": {
            "name": "use_milagro",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "use_py_ecc": {
            "name": "use_py_ecc",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "only_with_bls": {
            "name": "only_with_bls",
            "location": 33,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "alt_return": [
                    "bool",
                    "None",
                    "Exception",
                    "Literal[True]",
                    "Literal[False]"
                ]
            }
        },
        "Verify": {
            "name": "Verify",
            "location": 48,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "PK": [
                    "bytes",
                    "int",
                    "Optional[str]",
                    "str",
                    "List[List[int]]",
                    "None",
                    "Optional[Dict]",
                    "list[list[int]]",
                    "dict[, ]"
                ],
                "message": [
                    "bytes",
                    "int",
                    "Optional[str]",
                    "str",
                    "List[List[int]]",
                    "None",
                    "Optional[Dict]",
                    "list[list[int]]",
                    "dict[, ]"
                ],
                "signature": [
                    "bytes",
                    "int",
                    "Optional[str]",
                    "str",
                    "List[List[int]]",
                    "None",
                    "Optional[Dict]",
                    "list[list[int]]",
                    "dict[, ]"
                ]
            }
        },
        "AggregateVerify": {
            "name": "AggregateVerify",
            "location": 58,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "pubkeys": [
                    "list[typing.Union[dict[, ],str,str,str,str,str,str,str]]",
                    "str",
                    "List[Dict]",
                    "list[list[str]]",
                    "float",
                    "object",
                    "List[List[str]]",
                    "bool"
                ],
                "messages": [
                    "list[typing.Union[dict[, ],str,str,str,str,str,str,str]]",
                    "str",
                    "List[Dict]",
                    "list[list[str]]",
                    "float",
                    "object",
                    "List[List[str]]",
                    "bool"
                ],
                "signature": [
                    "list[dict[, ]]",
                    "str",
                    "List[Dict]",
                    "float",
                    "bool",
                    "list[list[str]]",
                    "object",
                    "List[List[str]]"
                ]
            }
        },
        "FastAggregateVerify": {
            "name": "FastAggregateVerify",
            "location": 68,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "pubkeys": [
                    "str",
                    "bytes",
                    "int",
                    "list[str]",
                    "bool",
                    "List[str]"
                ],
                "message": [
                    "int",
                    "str",
                    "bytes",
                    "list[str]",
                    "bool",
                    "List[str]"
                ],
                "signature": [
                    "int",
                    "str",
                    "bytes",
                    "list[str]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "Aggregate": {
            "name": "Aggregate",
            "location": 78,
            "return": [
                "list",
                "str",
                "bytes"
            ],
            "arguments": {
                "signatures": [
                    "bytes",
                    "int",
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "Sign": {
            "name": "Sign",
            "location": 83,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "SK": [
                    "bytes",
                    "str",
                    "Union[str, bytes]"
                ],
                "message": [
                    "bytes",
                    "str",
                    "Union[str, bytes]"
                ]
            }
        },
        "signature_to_G2": {
            "name": "signature_to_G2",
            "location": 91,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Optional[Dict]",
                "int",
                "\"Position\""
            ],
            "arguments": {
                "signature": [
                    "int",
                    "bytes",
                    "tuple[typing.Union[int,int]]",
                    "Tuple[int, int]",
                    "list[int]",
                    "Tuple[int, int, int]",
                    "List[int]"
                ]
            }
        },
        "AggregatePKs": {
            "name": "AggregatePKs",
            "location": 96,
            "return": [
                "Callable",
                "str",
                "Tuple[Any, Any, Any]",
                "list"
            ],
            "arguments": {
                "pubkeys": [
                    "str",
                    "int",
                    "dict[, ]",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "SkToPk": {
            "name": "SkToPk",
            "location": 107,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "SK": [
                    "int",
                    "bytes",
                    "IO",
                    "List[str]",
                    "str"
                ]
            }
        },
        "only_with_bls.runner": {
            "name": "runner",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "only_with_bls.runner.entry": {
            "name": "entry",
            "location": 38,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {}
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/utils/hash_function.py": {
        "hash": {
            "name": "hash",
            "location": 8,
            "return": [
                "Bytes32",
                "str",
                "bytearray",
                "bytes",
                "Union[bytes, bytearray]",
                "Union[str, bytes]",
                "BinaryIO",
                "int"
            ],
            "arguments": {
                "x": [
                    "bytes",
                    "Union[bytes, bytearray, memoryview]",
                    "float",
                    "int",
                    "bytearray",
                    "memoryview"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/utils/merkle_minimal.py": {
        "calc_merkle_tree_from_leaves": {
            "name": "calc_merkle_tree_from_leaves",
            "location": 12,
            "return": [
                "list[int]",
                "float",
                "dict"
            ],
            "arguments": {
                "values": [
                    "list[str]",
                    "List[str]",
                    "dict[str, typing.Any]",
                    "Sequence[str]",
                    "list[]",
                    "list[list[typing.Any]]",
                    "int",
                    "Dict[str, Any]",
                    "list",
                    "List[List[Any]]"
                ],
                "layer_count": [
                    "int",
                    "List[Tuple[int, float]]",
                    "str",
                    "bool",
                    "float",
                    "Iterable[T]"
                ]
            }
        },
        "get_merkle_tree": {
            "name": "get_merkle_tree",
            "location": 23,
            "return": [
                "bytes",
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "values": [
                    "int",
                    "Optional[int]",
                    "bytes",
                    "bool"
                ],
                "pad_to": [
                    "None",
                    "Optional[int]",
                    "bytes",
                    "int",
                    "bool",
                    "Optional['InstrumentBase']"
                ]
            }
        },
        "get_merkle_root": {
            "name": "get_merkle_root",
            "location": 30,
            "return": [
                "int",
                "bytes",
                "Optional[str]",
                "str",
                "Sequence[int]"
            ],
            "arguments": {
                "values": [
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Optional['ModelOrDc']",
                    "float"
                ],
                "pad_to": [
                    "int",
                    "Optional[bool]",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "get_merkle_proof": {
            "name": "get_merkle_proof",
            "location": 39,
            "return": [
                "list[typing.Union[bytes,int]]",
                "str",
                "bool"
            ],
            "arguments": {
                "tree": [
                    "int"
                ],
                "item_index": [
                    "bool",
                    "List[int]"
                ],
                "tree_len": [
                    "int",
                    "None"
                ]
            }
        },
        "merkleize_chunks": {
            "name": "merkleize_chunks",
            "location": 47,
            "return": [
                "int",
                "bytes",
                "Callable",
                "str",
                "None"
            ],
            "arguments": {
                "chunks": [
                    "str",
                    "int"
                ],
                "limit": [
                    "int",
                    "None",
                    "str",
                    "Iterable['Context']",
                    "typing.Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "merkleize_chunks.merge": {
            "name": "merge",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "h": [
                    "str",
                    "int",
                    "bool"
                ],
                "i": [
                    "int",
                    "bytes",
                    "dict"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/utils/test_merkle_minimal.py": {
        "h": {
            "name": "h",
            "location": 6,
            "return": [
                "int",
                "Optional[Dict[str, int]]",
                "Dict[str, List[str]]",
                "List[List[str]]",
                "bool",
                "Dict[str, int]"
            ],
            "arguments": {
                "a": [
                    "str",
                    "Iterable",
                    "Iterable[str]",
                    "Sequence[T]",
                    "bool"
                ],
                "b": [
                    "str",
                    "Iterable",
                    "Iterable[str]",
                    "Sequence[T]",
                    "bool"
                ]
            }
        },
        "e": {
            "name": "e",
            "location": 10,
            "return": [
                "bytes",
                "str",
                "int",
                "Union[bytes, bytearray]",
                "bool",
                "bytearray"
            ],
            "arguments": {
                "v": [
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "z": {
            "name": "z",
            "location": 15,
            "return": [
                "int"
            ],
            "arguments": {
                "i": [
                    "int",
                    "Iterator",
                    "typing.Iterator"
                ]
            }
        },
        "test_merkleize_chunks_and_get_merkle_root": {
            "name": "test_merkleize_chunks_and_get_merkle_root",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "count": [
                    "str",
                    "int"
                ],
                "limit": [
                    "str"
                ],
                "value": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/utils/test_merkle_proof_util.py": {
        "get_power_of_two_ceil": {
            "name": "get_power_of_two_ceil",
            "location": 7,
            "return": [
                "int",
                "Optional[str]",
                "str",
                "List[dict]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "get_power_of_two_floor": {
            "name": "get_power_of_two_floor",
            "location": 16,
            "return": [
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "test_get_power_of_two_ceil": {
            "name": "test_get_power_of_two_ceil",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "value": [
                    "Dict[str, str]",
                    "int",
                    "dict[str, str]",
                    "dict",
                    "dict[, ]"
                ],
                "expected": [
                    "Dict[str, str]",
                    "int",
                    "dict[str, str]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_get_power_of_two_floor": {
            "name": "test_get_power_of_two_floor",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "value": [
                    "Dict[str, str]",
                    "int",
                    "dict[str, str]",
                    "dict",
                    "dict[, ]"
                ],
                "expected": [
                    "Dict[str, str]",
                    "int",
                    "dict[str, str]",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/utils/__init__.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/utils/ssz/ssz_impl.py": {
        "serialize": {
            "name": "serialize",
            "location": 8,
            "return": [
                "MutableMapping[str, Any]",
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "hash_tree_root": {
            "name": "hash_tree_root",
            "location": 12,
            "return": [
                "Bytes32"
            ],
            "arguments": {
                "obj": [
                    "List[str]",
                    "int",
                    "list[str]"
                ]
            }
        },
        "uint_to_bytes": {
            "name": "uint_to_bytes",
            "location": 16,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float"
                ]
            }
        },
        "copy": {
            "name": "copy",
            "location": 24,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "sublime.View",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "consensus-specs-master/tests/core/pyspec/eth2spec/utils/ssz/ssz_typing.py": {},
    "consensus-specs-master/tests/core/pyspec/eth2spec/utils/ssz/__init__.py": {},
    "consensus-specs-master/tests/generators/bls/main.py": {
        "to_bytes": {
            "name": "to_bytes",
            "location": 21,
            "return": [
                "bytes",
                "Union[str, List[str]]",
                "Optional[str]",
                "bool",
                "Dict[str, List[int]]",
                "raiden.utils.BlockHash",
                "Counter",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "i": [
                    "int"
                ]
            }
        },
        "hash": {
            "name": "hash",
            "location": 25,
            "return": [
                "str",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {
                "x": [
                    "str",
                    "bool"
                ]
            }
        },
        "int_to_hex": {
            "name": "int_to_hex",
            "location": 29,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "n": [
                    "int",
                    "str",
                    "Dict[str, int]",
                    "dict[str, int]",
                    "Optional[int]",
                    "None",
                    "List[int]",
                    "list[int]"
                ],
                "byte_length": [
                    "int",
                    "None"
                ]
            }
        },
        "hex_to_int": {
            "name": "hex_to_int",
            "location": 36,
            "return": [
                "int",
                "str",
                "utils.Node"
            ],
            "arguments": {
                "x": [
                    "str",
                    "int",
                    "float",
                    "T"
                ]
            }
        },
        "expect_exception": {
            "name": "expect_exception",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "func": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "case01_sign": {
            "name": "case01_sign",
            "location": 75,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,dict[typing.Union[typing.Text,typing.Text], dict[typing.Union[typing.Text,typing.Text], ]]]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,dict[typing.Union[typing.Text,typing.Text], typing.Union[dict[typing.Union[typing.Text,typing.Text], ],None]]]]]"
            ],
            "arguments": {}
        },
        "case02_verify": {
            "name": "case02_verify",
            "location": 101,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,dict[typing.Union[typing.Text,typing.Text], typing.Union[dict[typing.Union[typing.Text,typing.Text,typing.Text], ],bool]]]]]"
            ],
            "arguments": {}
        },
        "case03_aggregate": {
            "name": "case03_aggregate",
            "location": 166,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,dict[typing.Union[typing.Text,typing.Text], list[]]]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,dict[typing.Union[typing.Text,typing.Text], typing.Union[list[],None]]]]]"
            ],
            "arguments": {}
        },
        "case04_fast_aggregate_verify": {
            "name": "case04_fast_aggregate_verify",
            "location": 194,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,dict[typing.Union[typing.Text,typing.Text], typing.Union[dict[typing.Union[typing.Text,typing.Text,typing.Text], list[]],bool]]]]]"
            ],
            "arguments": {}
        },
        "case05_aggregate_verify": {
            "name": "case05_aggregate_verify",
            "location": 285,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,dict[typing.Union[typing.Text,typing.Text], typing.Union[dict[typing.Union[typing.Text,typing.Text,typing.Text], typing.Union[list[],list[]]],bool]]]]]"
            ],
            "arguments": {}
        },
        "case06_eth_aggregate_pubkeys": {
            "name": "case06_eth_aggregate_pubkeys",
            "location": 363,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,dict[typing.Union[typing.Text,typing.Text], list[]]]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,dict[typing.Union[typing.Text,typing.Text], typing.Union[list[],None]]]]]"
            ],
            "arguments": {}
        },
        "case07_eth_fast_aggregate_verify": {
            "name": "case07_eth_fast_aggregate_verify",
            "location": 417,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,dict[typing.Union[typing.Text,typing.Text], typing.Union[dict[typing.Union[typing.Text,typing.Text,typing.Text], list[]],bool]]]]]"
            ],
            "arguments": {}
        },
        "create_provider": {
            "name": "create_provider",
            "location": 505,
            "return": [
                "TestProvider"
            ],
            "arguments": {
                "fork_name": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "handler_name": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "test_case_fn": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        },
        "create_provider.prepare_fn": {
            "name": "prepare_fn",
            "location": 509,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "create_provider.cases_fn": {
            "name": "cases_fn",
            "location": 514,
            "return": [
                "typing.Iterable[eth2spec.gen_helpers.gen_base.gen_typing.TestCase]",
                "typing.Generator[TestCase]"
            ],
            "arguments": {}
        }
    },
    "consensus-specs-master/tests/generators/epoch_processing/main.py": {},
    "consensus-specs-master/tests/generators/finality/main.py": {},
    "consensus-specs-master/tests/generators/forks/main.py": {
        "create_provider": {
            "name": "create_provider",
            "location": 11,
            "return": [],
            "arguments": {
                "tests_src": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "Set[str]",
                    "set[str]"
                ],
                "preset_name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "Set[str]",
                    "set[str]"
                ],
                "phase": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "Set[str]",
                    "set[str]"
                ],
                "fork_name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "_get_fork_tests_providers": {
            "name": "_get_fork_tests_providers",
            "location": 30,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "create_provider.prepare_fn": {
            "name": "prepare_fn",
            "location": 14,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "create_provider.cases_fn": {
            "name": "cases_fn",
            "location": 17,
            "return": [
                "str",
                "bool",
                "Optional[constants.AgeClass]",
                "List[str]",
                "int"
            ],
            "arguments": {}
        }
    },
    "consensus-specs-master/tests/generators/fork_choice/main.py": {},
    "consensus-specs-master/tests/generators/genesis/main.py": {},
    "consensus-specs-master/tests/generators/merkle/main.py": {},
    "consensus-specs-master/tests/generators/merkle/__init__.py": {},
    "consensus-specs-master/tests/generators/operations/main.py": {},
    "consensus-specs-master/tests/generators/random/generate.py": {
        "_normalize_transition": {
            "name": "_normalize_transition",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "transition": [
                    "helpers.TraceContext",
                    "int",
                    "str"
                ]
            }
        },
        "_normalize_scenarios": {
            "name": "_normalize_scenarios",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "scenarios": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_flatten": {
            "name": "_flatten",
            "location": 71,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "t": [
                    "float",
                    "int",
                    "Collection[int]",
                    "list"
                ]
            }
        },
        "_generate_randomized_scenarios": {
            "name": "_generate_randomized_scenarios",
            "location": 84,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "block_randomizer": []
            }
        },
        "_id_from_scenario": {
            "name": "_id_from_scenario",
            "location": 144,
            "return": [
                "bool"
            ],
            "arguments": {
                "test_description": [
                    "str",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "_to_comment": {
            "name": "_to_comment",
            "location": 208,
            "return": [
                "str",
                "List[dcos_test_utils.helpers.Host]",
                "int"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Union[str, None]"
                ],
                "indent_level": [
                    "str",
                    "bool",
                    "Tuple[str, int]"
                ]
            }
        },
        "run_generate_tests_to_std_out": {
            "name": "run_generate_tests_to_std_out",
            "location": 217,
            "return": [
                ""
            ],
            "arguments": {
                "phase": [
                    "str"
                ],
                "state_randomizer": [
                    "str",
                    "float",
                    "Optional[str]",
                    "bool"
                ],
                "block_randomizer": [
                    "int",
                    "str",
                    "bool",
                    "Tuple[int, int]"
                ]
            }
        },
        "_id_from_scenario._to_id_part": {
            "name": "_to_id_part",
            "location": 148,
            "return": [
                "str",
                "Optional[str]",
                "float"
            ],
            "arguments": {
                "prefix": [
                    "int",
                    "Collection[int]",
                    "str",
                    "Dict[int, Tuple[int, int]]"
                ],
                "x": [
                    "List[str]",
                    "str",
                    "list",
                    "Dict[str, str]",
                    "List[Union[int, Any]]",
                    "dict"
                ]
            }
        },
        "_id_from_scenario._id_from_transition": {
            "name": "_id_from_transition",
            "location": 154,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "transition": [
                    "bool",
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "consensus-specs-master/tests/generators/random/main.py": {},
    "consensus-specs-master/tests/generators/rewards/main.py": {},
    "consensus-specs-master/tests/generators/sanity/main.py": {},
    "consensus-specs-master/tests/generators/shuffling/main.py": {
        "shuffling_case_fn": {
            "name": "shuffling_case_fn",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "int",
                    "str",
                    "List[float]",
                    "List[int]"
                ],
                "seed": [
                    "int",
                    "str",
                    "List[float]",
                    "List[int]"
                ],
                "count": [
                    "int",
                    "str",
                    "List[float]",
                    "List[int]"
                ]
            }
        },
        "shuffling_case": {
            "name": "shuffling_case",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "spec": [
                    "int",
                    "Sequence[int]"
                ],
                "seed": [
                    "int",
                    "Sequence[int]"
                ],
                "count": [
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "shuffling_test_cases": {
            "name": "shuffling_test_cases",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "spec": [
                    "bytes",
                    "str"
                ]
            }
        },
        "create_provider": {
            "name": "create_provider",
            "location": 30,
            "return": [],
            "arguments": {
                "preset_name": [
                    "Optional[str]",
                    "str",
                    "List[AnyStr]",
                    "bool"
                ]
            }
        },
        "create_provider.prepare_fn": {
            "name": "prepare_fn",
            "location": 32,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "create_provider.cases_fn": {
            "name": "cases_fn",
            "location": 35,
            "return": [
                "typing.Iterable[eth2spec.gen_helpers.gen_base.gen_typing.TestCase]"
            ],
            "arguments": {}
        }
    },
    "consensus-specs-master/tests/generators/ssz_generic/main.py": {
        "create_provider": {
            "name": "create_provider",
            "location": 12,
            "return": [],
            "arguments": {
                "handler_name": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "suite_name": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "case_maker": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        },
        "create_provider.prepare_fn": {
            "name": "prepare_fn",
            "location": 14,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "create_provider.cases_fn": {
            "name": "cases_fn",
            "location": 17,
            "return": [
                "typing.Iterable[eth2spec.gen_helpers.gen_base.gen_typing.TestCase]",
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "consensus-specs-master/tests/generators/ssz_generic/ssz_basic_vector.py": {
        "basic_vector_case_fn": {
            "name": "basic_vector_case_fn",
            "location": 9,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "rng": [
                    "int",
                    "str",
                    "float",
                    "random.Random",
                    "eth2spec.debug.random_value.RandomizationMode",
                    "Union[str, int, float]"
                ],
                "mode": [
                    "int",
                    "str",
                    "float",
                    "random.Random",
                    "eth2spec.debug.random_value.RandomizationMode",
                    "Union[str, int, float]"
                ],
                "elem_type": [
                    "int",
                    "str",
                    "float",
                    "random.Random",
                    "eth2spec.debug.random_value.RandomizationMode",
                    "Union[str, int, float]"
                ],
                "length": [
                    "int",
                    "str",
                    "float",
                    "random.Random",
                    "eth2spec.debug.random_value.RandomizationMode",
                    "Union[str, int, float]"
                ]
            }
        },
        "valid_cases": {
            "name": "valid_cases",
            "location": 27,
            "return": [
                "",
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {}
        },
        "invalid_cases": {
            "name": "invalid_cases",
            "location": 39,
            "return": [
                "",
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {}
        }
    },
    "consensus-specs-master/tests/generators/ssz_generic/ssz_bitlist.py": {
        "bitlist_case_fn": {
            "name": "bitlist_case_fn",
            "location": 8,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "rng": [
                    "int",
                    "str",
                    "random.Random",
                    "eth2spec.debug.random_value.RandomizationMode"
                ],
                "mode": [
                    "int",
                    "str",
                    "random.Random",
                    "eth2spec.debug.random_value.RandomizationMode"
                ],
                "limit": [
                    "int",
                    "random.Random",
                    "eth2spec.debug.random_value.RandomizationMode",
                    "str"
                ]
            }
        },
        "valid_cases": {
            "name": "valid_cases",
            "location": 15,
            "return": [
                "",
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {}
        },
        "invalid_cases": {
            "name": "invalid_cases",
            "location": 28,
            "return": [
                "",
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {}
        }
    },
    "consensus-specs-master/tests/generators/ssz_generic/ssz_bitvector.py": {
        "bitvector_case_fn": {
            "name": "bitvector_case_fn",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "rng": [
                    "int",
                    "str",
                    "random.Random",
                    "eth2spec.debug.random_value.RandomizationMode"
                ],
                "mode": [
                    "int",
                    "str",
                    "random.Random",
                    "eth2spec.debug.random_value.RandomizationMode"
                ],
                "size": [
                    "int",
                    "str",
                    "random.Random",
                    "eth2spec.debug.random_value.RandomizationMode"
                ],
                "invalid_making_pos": [
                    "int",
                    "float",
                    "Optional[int]",
                    "Optional[float]"
                ]
            }
        },
        "valid_cases": {
            "name": "valid_cases",
            "location": 23,
            "return": [
                "",
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {}
        },
        "invalid_cases": {
            "name": "invalid_cases",
            "location": 30,
            "return": [
                "",
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {}
        }
    },
    "consensus-specs-master/tests/generators/ssz_generic/ssz_boolean.py": {
        "valid_cases": {
            "name": "valid_cases",
            "location": 5,
            "return": [
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {}
        },
        "invalid_cases": {
            "name": "invalid_cases",
            "location": 10,
            "return": [
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {}
        }
    },
    "consensus-specs-master/tests/generators/ssz_generic/ssz_container.py": {
        "container_case_fn": {
            "name": "container_case_fn",
            "location": 49,
            "return": [
                "str",
                "BaseException",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "rng": [
                    "float",
                    "bool",
                    "random.Random",
                    "bytes",
                    "str",
                    "None",
                    "raiden.utils.MessageID",
                    "int",
                    "Optional[bool]"
                ],
                "mode": [
                    "float",
                    "bool",
                    "random.Random",
                    "bytes",
                    "str",
                    "None",
                    "raiden.utils.MessageID",
                    "int",
                    "Optional[bool]"
                ],
                "typ": [
                    "float",
                    "bool",
                    "random.Random",
                    "bytes",
                    "str",
                    "None",
                    "raiden.utils.MessageID",
                    "int",
                    "Optional[bool]"
                ]
            }
        },
        "valid_cases": {
            "name": "valid_cases",
            "location": 66,
            "return": [
                "",
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {}
        },
        "mod_offset": {
            "name": "mod_offset",
            "location": 85,
            "return": [
                "bool",
                "Union[bytes, bytearray]",
                "str",
                "bytearray"
            ],
            "arguments": {
                "b": [
                    "int",
                    "bytes"
                ],
                "offset_index": [
                    "int",
                    "bytes"
                ],
                "change": [
                    "int",
                    "bytes"
                ]
            }
        },
        "invalid_cases": {
            "name": "invalid_cases",
            "location": 92,
            "return": [
                "",
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {}
        }
    },
    "consensus-specs-master/tests/generators/ssz_generic/ssz_test_case.py": {
        "valid_test_case": {
            "name": "valid_test_case",
            "location": 7,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "value_fn": [
                    "str",
                    "bool",
                    "typing.Sequence[str]",
                    "Sequence[str]",
                    "int"
                ]
            }
        },
        "invalid_test_case": {
            "name": "invalid_test_case",
            "location": 16,
            "return": [
                "int",
                "str",
                "Dict[str, int]"
            ],
            "arguments": {
                "bytez_fn": [
                    "bool",
                    "BaseException",
                    "Callable[[], bytes]",
                    "typing.Callable[[], bytes]"
                ]
            }
        },
        "valid_test_case.case_fn": {
            "name": "case_fn",
            "location": 8,
            "return": [
                "typing.Generator[tuple[typing.Union[typing.Text,typing.Text]]]"
            ],
            "arguments": {}
        },
        "invalid_test_case.case_fn": {
            "name": "case_fn",
            "location": 17,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[typing.Text,typing.Text]]]"
            ],
            "arguments": {}
        }
    },
    "consensus-specs-master/tests/generators/ssz_generic/ssz_uints.py": {
        "uint_case_fn": {
            "name": "uint_case_fn",
            "location": 8,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "rng": [
                    "int",
                    "random.Random",
                    "eth2spec.debug.random_value.RandomizationMode",
                    "bool"
                ],
                "mode": [
                    "int",
                    "random.Random",
                    "eth2spec.debug.random_value.RandomizationMode",
                    "bool"
                ],
                "typ": [
                    "random.Random",
                    "eth2spec.debug.random_value.RandomizationMode",
                    "int",
                    "bool"
                ]
            }
        },
        "valid_cases": {
            "name": "valid_cases",
            "location": 18,
            "return": [
                "",
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {}
        },
        "invalid_cases": {
            "name": "invalid_cases",
            "location": 30,
            "return": [
                "",
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {}
        }
    },
    "consensus-specs-master/tests/generators/ssz_generic/uint_test_cases.py": {
        "get_random_bytes": {
            "name": "get_random_bytes",
            "location": 23,
            "return": [
                "bytes",
                "str",
                "bool",
                "Dict[str, str]",
                "Mapping",
                "int"
            ],
            "arguments": {
                "length": [
                    "int",
                    "Tuple[int]",
                    "tuple[int]",
                    "list",
                    "list[]"
                ]
            }
        },
        "generate_random_uint_test_cases": {
            "name": "generate_random_uint_test_cases",
            "location": 28,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "generate_uint_wrong_length_test_cases": {
            "name": "generate_uint_wrong_length_test_cases",
            "location": 48,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "generate_uint_bounds_test_cases": {
            "name": "generate_uint_bounds_test_cases",
            "location": 70,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "generate_uint_out_of_bounds_test_cases": {
            "name": "generate_uint_out_of_bounds_test_cases",
            "location": 87,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "consensus-specs-master/tests/generators/ssz_generic/__init__.py": {},
    "consensus-specs-master/tests/generators/ssz_static/main.py": {
        "create_test_case": {
            "name": "create_test_case",
            "location": 21,
            "return": [
                "typing.Iterable[eth2spec.gen_helpers.gen_base.gen_typing.TestCasePart]",
                "typing.Generator[tuple[typing.Union[typing.Text,typing.Text]]]",
                "typing.Generator[tuple[typing.Union[typing.Text,typing.Text,dict[typing.Text, ]]]]"
            ],
            "arguments": {
                "rng": [
                    "int",
                    "dict[str, typing.Any]",
                    "str",
                    "bool",
                    "None",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]"
                ],
                "typ": [
                    "int",
                    "dict[str, typing.Any]",
                    "str",
                    "bool",
                    "None",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]"
                ],
                "mode": [
                    "int",
                    "dict[str, typing.Any]",
                    "str",
                    "bool",
                    "None",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]"
                ],
                "chaos": [
                    "int",
                    "dict[str, typing.Any]",
                    "str",
                    "bool",
                    "None",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]"
                ]
            }
        },
        "get_spec_ssz_types": {
            "name": "get_spec_ssz_types",
            "location": 32,
            "return": [
                "list[tuple[]]",
                "str",
                "list",
                "tuple",
                "Dict[str, List[str]]",
                "object",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "spec": [
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "ssz_static_cases": {
            "name": "ssz_static_cases",
            "location": 39,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "fork_name": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "dict[str, typing.Any]",
                    "Optional[int]",
                    "Dict[str, Any]"
                ],
                "preset_name": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "dict[str, typing.Any]",
                    "Optional[int]",
                    "Dict[str, Any]"
                ],
                "seed": [
                    "int",
                    "str",
                    "float",
                    "Optional[int]",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "name": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "dict[str, typing.Any]",
                    "Optional[int]",
                    "Dict[str, Any]"
                ],
                "ssz_type": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "dict[str, typing.Any]",
                    "Optional[int]",
                    "Dict[str, Any]"
                ],
                "mode": [
                    "str",
                    "Set[str]"
                ],
                "chaos": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "dict[str, typing.Any]",
                    "Optional[int]",
                    "Dict[str, Any]"
                ],
                "count": [
                    "str",
                    "int"
                ]
            }
        },
        "create_provider": {
            "name": "create_provider",
            "location": 58,
            "return": [],
            "arguments": {
                "fork_name": [
                    "str",
                    "Iterable[int]",
                    "float",
                    "typing.Iterable[int]",
                    "Optional[str]",
                    "None"
                ],
                "preset_name": [
                    "str",
                    "Iterable[int]",
                    "float",
                    "typing.Iterable[int]",
                    "Optional[str]",
                    "None"
                ],
                "seed": [
                    "str",
                    "Iterable[int]",
                    "float",
                    "typing.Iterable[int]",
                    "Optional[str]",
                    "None"
                ],
                "mode": [
                    "str",
                    "Iterable[int]",
                    "float",
                    "typing.Iterable[int]",
                    "Optional[str]",
                    "None"
                ],
                "chaos": [
                    "str",
                    "Iterable[int]",
                    "float",
                    "typing.Iterable[int]",
                    "Optional[str]",
                    "None"
                ],
                "cases_if_random": [
                    "str",
                    "Iterable[int]",
                    "float",
                    "typing.Iterable[int]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "create_provider.prepare_fn": {
            "name": "prepare_fn",
            "location": 60,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "create_provider.cases_fn": {
            "name": "cases_fn",
            "location": 63,
            "return": [
                "typing.Iterable[eth2spec.gen_helpers.gen_base.gen_typing.TestCase]",
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "consensus-specs-master/tests/generators/ssz_static/__init__.py": {},
    "consensus-specs-master/tests/generators/transition/main.py": {
        "create_provider": {
            "name": "create_provider",
            "location": 24,
            "return": [],
            "arguments": {
                "tests_src": [
                    "str",
                    "bool"
                ],
                "preset_name": [
                    "str",
                    "bool"
                ],
                "pre_fork_name": [
                    "str",
                    "bool"
                ],
                "post_fork_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "create_provider.prepare_fn": {
            "name": "prepare_fn",
            "location": 26,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "create_provider.cases_fn": {
            "name": "cases_fn",
            "location": 29,
            "return": [
                "str",
                "bool",
                "Optional[constants.AgeClass]",
                "List[str]",
                "int"
            ],
            "arguments": {}
        }
    }
}
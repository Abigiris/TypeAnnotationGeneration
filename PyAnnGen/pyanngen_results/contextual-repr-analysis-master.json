{
    "contextual-repr-analysis-master/contexteval/run.py": {},
    "contextual-repr-analysis-master/contexteval/__init__.py": {},
    "contextual-repr-analysis-master/contexteval/commands/error_analysis.py": {
        "evaluate_from_args": {
            "name": "evaluate_from_args",
            "location": 84,
            "return": [
                "str",
                "int",
                "django.db.models.QuerySet"
            ],
            "arguments": {
                "args": []
            }
        },
        "ErrorAnalysis.add_subparser": {
            "name": "add_subparser",
            "location": 51,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "parser": [
                    "str"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/contexteval/commands/__init__.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "prog": [
                    "str",
                    "None",
                    "List[str]",
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/contexteval/common/custom_test_case.py": {
        "CustomTestCase.setUp": {
            "name": "setUp",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomTestCase.tearDown": {
            "name": "tearDown",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "contextual-repr-analysis-master/contexteval/common/model_test_case.py": {
        "ModelTestCase.set_up_model": {
            "name": "set_up_model",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "param_file": [
                    "str",
                    "Callable[[float], None]"
                ],
                "dataset_file": [
                    "int",
                    "apps.common.coininfo.CoinInfo",
                    "str",
                    "List[str]",
                    "TextIO",
                    "tuple",
                    "Tuple[int, int]",
                    "bool",
                    "float"
                ]
            }
        },
        "ModelTestCase.ensure_model_can_train_save_and_load": {
            "name": "ensure_model_can_train_save_and_load",
            "location": 41,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "param_file": [
                    "str",
                    "TextIO",
                    "Callable[[float], None]"
                ],
                "tolerance": [
                    "bool",
                    "dict",
                    "List[float]",
                    "_params.Params",
                    "str"
                ],
                "cuda_device": [
                    "str",
                    "List[str]"
                ],
                "gradients_to_ignore": [
                    "Optional[str]",
                    "allennlp.models.model.Model",
                    "Callable",
                    "tensorflow.keras.Model"
                ],
                "overrides": [
                    "List[str]",
                    "str",
                    "Callable[[float], None]",
                    "Container[str]",
                    "Optional[str]"
                ]
            }
        },
        "ModelTestCase.assert_fields_equal": {
            "name": "assert_fields_equal",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field1": [
                    "str",
                    "float"
                ],
                "field2": [
                    "str",
                    "float"
                ],
                "name": [
                    "str",
                    "float"
                ],
                "tolerance": [
                    "str",
                    "float"
                ]
            }
        },
        "ModelTestCase.check_model_computes_gradients_correctly": {
            "name": "check_model_computes_gradients_correctly",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "str",
                    "Dict[str, Dict[str, str]]",
                    "dict"
                ],
                "model_batch": [
                    "int",
                    "Optional[str]",
                    "str",
                    "Optional[Sequence[Any]]",
                    "Optional[dict]"
                ],
                "params_to_ignore": [
                    "str",
                    "bool",
                    "Callable",
                    "Exception",
                    "Tuple[bool]"
                ]
            }
        },
        "ModelTestCase.ensure_batch_predictions_are_consistent": {
            "name": "ensure_batch_predictions_are_consistent",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "param_file": [
                    "str"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/contexteval/common/util.py": {
        "get_text_mask_from_representations": {
            "name": "get_text_mask_from_representations",
            "location": 9,
            "return": [
                "int",
                "List[int]",
                "Dict",
                "torch.Tensor",
                "str",
                "List[list[int]]",
                "Union[str,int,float]",
                "Sequence[float]"
            ],
            "arguments": {
                "token_representations": [
                    "str",
                    "int",
                    "List[int]",
                    "allennlp.models.semantic_parsing.nlvr.nlvr_decoder_state.NlvrDecoderState"
                ]
            }
        },
        "is_empty_metric": {
            "name": "is_empty_metric",
            "location": 26,
            "return": [
                "bool",
                "Optional[str]",
                "Callable[...,None]",
                "str"
            ],
            "arguments": {
                "metric": [
                    "int"
                ]
            }
        },
        "get_item": {
            "name": "get_item",
            "location": 41,
            "return": [
                "int",
                "Tuple[bytes]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "value": [
                    "Dict[str, Any]",
                    "Iterator[Any]",
                    "static_frame.core.util.IndexConstructor",
                    "Tuple[Any, Any]",
                    "Iterable"
                ]
            }
        },
        "pad_contextualizer_output": {
            "name": "pad_contextualizer_output",
            "location": 49,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "seqs": [
                    "int",
                    "Sequence['cirq.Qid']",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/contexteval/common/__init__.py": {},
    "contextual-repr-analysis-master/contexteval/contextualizers/contextualizer.py": {
        "Contextualizer.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Contextualizer.forward": {
            "name": "forward",
            "location": 19,
            "return": [
                "torch.FloatTensor",
                "None"
            ],
            "arguments": {
                "self": [],
                "sentences": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/contexteval/contextualizers/elmo_contextualizer.py": {
        "ElmoContextualizer.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "elmo": [
                    "int",
                    "float",
                    "str"
                ],
                "batch_size": [
                    "int",
                    "List[float]",
                    "List[str]",
                    "bool",
                    "Tuple[Union[int,int,int]]",
                    "Tuple[int,int,int]",
                    "Union[Tuple[int,int],int]"
                ],
                "layer_num": [
                    "int",
                    "None",
                    "float",
                    "bytes",
                    "apps.common.coininfo.CoinInfo"
                ],
                "freeze_scalar_mix": [
                    "bool",
                    "int",
                    "bytes",
                    "float",
                    "List[int]"
                ],
                "first_half_only": [
                    "bool",
                    "int",
                    "float",
                    "apps.common.coininfo.CoinInfo",
                    "bytes"
                ],
                "second_half_only": [
                    "bool",
                    "int",
                    "float",
                    "apps.common.coininfo.CoinInfo",
                    "bytes"
                ]
            }
        },
        "ElmoContextualizer.set_layer_num": {
            "name": "set_layer_num",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layer_num": [
                    "int",
                    "Dict[str,str]",
                    "Dict[int,int]",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "ElmoContextualizer.reset_layer_num": {
            "name": "reset_layer_num",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElmoContextualizer.forward": {
            "name": "forward",
            "location": 121,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "set",
                "str",
                "allennlp.data.vocabulary.Vocabulary"
            ],
            "arguments": {
                "self": [],
                "sentences": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/contexteval/contextualizers/glove_contextualizer.py": {
        "GloveContextualizer.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "glove_path": [
                    "str",
                    "TextIO",
                    "numpy.ndarray"
                ],
                "embedding_dim": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "trainable": [
                    "bool",
                    "int",
                    "Match",
                    "Iterator[str]",
                    "Type[Iterable[Any]]",
                    "str",
                    "Optional[bool]",
                    "List",
                    "List[Tuple[Any,Any]]"
                ]
            }
        },
        "GloveContextualizer.forward": {
            "name": "forward",
            "location": 84,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "sentences": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/contexteval/contextualizers/precomputed_contextualizer.py": {
        "PrecomputedContextualizer.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "representations_path": [
                    "str",
                    "int",
                    "bool"
                ],
                "layer_num": [
                    "int",
                    "None",
                    "Tuple[int]",
                    "Iterator[int]",
                    "Iterator",
                    "bool",
                    "Optional[bool]"
                ],
                "scalar_weights": [
                    "int",
                    "None",
                    "Tuple[int]",
                    "bytes",
                    "bool"
                ],
                "first_half_only": [
                    "bool",
                    "int",
                    "Iterator[int]",
                    "Tuple[int]",
                    "Optional[bool]"
                ],
                "second_half_only": [
                    "bool",
                    "int",
                    "Iterator[int]",
                    "Tuple[int]",
                    "Optional[bool]"
                ],
                "gamma": [
                    "str",
                    "None",
                    "bool",
                    "List[str]",
                    "int"
                ]
            }
        },
        "PrecomputedContextualizer.forward": {
            "name": "forward",
            "location": 96,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "sentences": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/contexteval/contextualizers/scalar_mixed_precomputed_contextualizer.py": {
        "ScalarMixedPrecomputedContextualizer.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "representations_path": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "int"
                ],
                "num_layers": [
                    "int",
                    "List[str]",
                    "float"
                ],
                "first_half_only": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]",
                    "float"
                ],
                "second_half_only": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]",
                    "float"
                ]
            }
        },
        "ScalarMixedPrecomputedContextualizer.forward": {
            "name": "forward",
            "location": 68,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "sentences": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/contexteval/contextualizers/__init__.py": {},
    "contextual-repr-analysis-master/contexteval/data/__init__.py": {},
    "contextual-repr-analysis-master/contexteval/data/dataset_readers/adposition_supersense_tagging.py": {
        "AdpositionSupersenseTaggingDatasetReader.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "include_raw_tokens": [
                    "bool",
                    "Optional[str]",
                    "Dict[str,str]",
                    "int"
                ],
                "contextualizer": [
                    "bool",
                    "None",
                    "int",
                    "float",
                    "Optional[contexteval.contextualizers.Contextualizer]",
                    "Optional[Union[int,float]]"
                ],
                "max_instances": [
                    "bool",
                    "None",
                    "int",
                    "float",
                    "Optional[contexteval.contextualizers.Contextualizer]",
                    "Optional[Union[int,float]]"
                ],
                "seed": [
                    "int",
                    "bool",
                    "Optional[contexteval.contextualizers.Contextualizer]",
                    "Optional[Union[int,float]]"
                ],
                "lazy": [
                    "bool",
                    "int",
                    "Optional[contexteval.contextualizers.Contextualizer]",
                    "Optional[Union[int,float]]"
                ]
            }
        },
        "AdpositionSupersenseTaggingDatasetReader._read_dataset": {
            "name": "_read_dataset",
            "location": 72,
            "return": [
                "typing.Generator[int]",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "count_only": [
                    "bool",
                    "str",
                    "Optional[Set[int]]"
                ],
                "keep_idx": [
                    "Optional[Set[int]]",
                    "None",
                    "Set[int]"
                ]
            }
        },
        "AdpositionSupersenseTaggingDatasetReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 140,
            "return": [
                "Instance",
                "List[str]",
                "List[Tuple[str,str]]",
                "str",
                "Set[str]",
                "List[Tuple[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "List[str]",
                    "str"
                ],
                "label_indices": [
                    "List[str]",
                    "List",
                    "List[bytes]",
                    "str",
                    "List[int]",
                    "Tuple[Literal,Literal,Literal,Literal,Literal,Literal]",
                    "Tuple[Union[Literal,Literal,Literal,Literal,Literal,Literal]]"
                ],
                "token_representations": [
                    "Union[str,Tuple[str,...]]",
                    "None",
                    "str",
                    "Tuple[str]",
                    "Optional[str]",
                    "bool",
                    "Tuple[Union[str,...]]",
                    "Dict[str,Union[int,str]]",
                    "Union[List[Any],List[str]]",
                    "List[Any]",
                    "List[str]",
                    "Union[bool,str]"
                ],
                "labels": [
                    "List[str]",
                    "None"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/contexteval/data/dataset_readers/ccg_supertagging.py": {
        "CcgSupertaggingDatasetReader._read_dataset": {
            "name": "_read_dataset",
            "location": 37,
            "return": [
                "typing.Generator[int]",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "count_only": [
                    "bool",
                    "str",
                    "Optional[Set[int]]"
                ],
                "keep_idx": [
                    "Optional[Set[int]]",
                    "Set[int]"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/contexteval/data/dataset_readers/conjunct_identification.py": {
        "parse_sentence": {
            "name": "parse_sentence",
            "location": 15,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "sentence": [
                    "str"
                ]
            }
        },
        "lazy_parse": {
            "name": "lazy_parse",
            "location": 26,
            "return": [
                "Generator[(List[dict], Any, None)]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "ConjunctIdentificationDatasetReader._read_dataset": {
            "name": "_read_dataset",
            "location": 61,
            "return": [
                "typing.Generator[int]",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str",
                    "Dict[str,bytes]",
                    "bool",
                    "Dict[str,LabwareDefinition]",
                    "Dict[str,D]",
                    "Optional[str]",
                    "None"
                ],
                "count_only": [
                    "bool",
                    "str",
                    "Optional[Set[int]]"
                ],
                "keep_idx": [
                    "Optional[Set[int]]",
                    "None",
                    "Set[int]"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/contexteval/data/dataset_readers/conll2000_chunking.py": {
        "parse_sentence": {
            "name": "parse_sentence",
            "location": 15,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "sentence": [
                    "str"
                ]
            }
        },
        "lazy_parse": {
            "name": "lazy_parse",
            "location": 26,
            "return": [
                "Generator[(List[dict], Any, None)]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "Conll2000ChunkingDatasetReader._read_dataset": {
            "name": "_read_dataset",
            "location": 59,
            "return": [
                "typing.Generator[int]",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str",
                    "Dict[str,bytes]",
                    "bool",
                    "Dict[str,LabwareDefinition]",
                    "Dict[str,D]",
                    "Optional[str]",
                    "None"
                ],
                "count_only": [
                    "bool",
                    "str",
                    "Optional[Set[int]]"
                ],
                "keep_idx": [
                    "Optional[Set[int]]",
                    "None",
                    "Set[int]"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/contexteval/data/dataset_readers/conll2003_ner.py": {
        "_is_divider": {
            "name": "_is_divider",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        },
        "Conll2003NERDatasetReader.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label_encoding": [
                    "Text",
                    "str",
                    "Dict[str,Any]",
                    "int"
                ],
                "contextualizer": [
                    "str",
                    "None",
                    "bool",
                    "List[List[Any]]",
                    "Optional[str]",
                    "List[list[Any]]"
                ],
                "max_instances": [
                    "bool",
                    "None",
                    "int",
                    "Optional[Union[int,float]]",
                    "float"
                ],
                "seed": [
                    "int",
                    "bool",
                    "Optional[Union[int,float]]"
                ],
                "lazy": [
                    "bool",
                    "int",
                    "Optional[Union[int,float]]"
                ]
            }
        },
        "Conll2003NERDatasetReader._read_dataset": {
            "name": "_read_dataset",
            "location": 80,
            "return": [
                "typing.Generator[int]",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str",
                    "Dict[str,bytes]",
                    "Dict[str,LabwareDefinition]",
                    "Dict[str,D]"
                ],
                "count_only": [
                    "bool",
                    "str",
                    "Optional[Set[int]]"
                ],
                "keep_idx": [
                    "Optional[Set[int]]",
                    "Set[int]"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/contexteval/data/dataset_readers/conllu_pos.py": {
        "lazy_parse": {
            "name": "lazy_parse",
            "location": 15,
            "return": [
                "Generator[(list, Any, None)]"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "fields": [
                    "tuple",
                    "str",
                    "Pattern[str]",
                    "List[str]"
                ]
            }
        },
        "ConllUPOSDatasetReader._read_dataset": {
            "name": "_read_dataset",
            "location": 46,
            "return": [
                "typing.Generator[int]",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "count_only": [
                    "bool",
                    "str",
                    "Optional[Set[int]]"
                ],
                "keep_idx": [
                    "Optional[Set[int]]",
                    "None",
                    "Set[int]"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/contexteval/data/dataset_readers/conllx_pos.py": {
        "parse_sentence": {
            "name": "parse_sentence",
            "location": 18,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "sentence": [
                    "str"
                ]
            }
        },
        "lazy_parse": {
            "name": "lazy_parse",
            "location": 31,
            "return": [
                "Generator[(List[dict], Any, None)]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "ConllXPOSDatasetReader._read_dataset": {
            "name": "_read_dataset",
            "location": 58,
            "return": [
                "typing.Generator[int]",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "count_only": [
                    "bool",
                    "str",
                    "Optional[Set[int]]"
                ],
                "keep_idx": [
                    "Optional[Set[int]]",
                    "None",
                    "Set[int]"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/contexteval/data/dataset_readers/constituency_ancestor_prediction.py": {
        "ConstituencyAncestorPredictionDatasetReader.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ancestor": [
                    "Text",
                    "int",
                    "bool",
                    "float"
                ],
                "contextualizer": [
                    "int",
                    "None",
                    "float",
                    "Optional[Union[int,float]]",
                    "bool",
                    "Optional[contexteval.contextualizers.Contextualizer]",
                    "Optional[int]"
                ],
                "max_instances": [
                    "int",
                    "None",
                    "float",
                    "Optional[Union[int,float]]",
                    "bool",
                    "Optional[contexteval.contextualizers.Contextualizer]",
                    "Optional[int]"
                ],
                "seed": [
                    "int",
                    "Optional[Union[int,float]]",
                    "bool",
                    "Optional[contexteval.contextualizers.Contextualizer]",
                    "Optional[int]"
                ],
                "lazy": [
                    "bool",
                    "int",
                    "Optional[Union[int,float]]",
                    "Optional[contexteval.contextualizers.Contextualizer]",
                    "Optional[int]"
                ]
            }
        },
        "ConstituencyAncestorPredictionDatasetReader._read_dataset": {
            "name": "_read_dataset",
            "location": 71,
            "return": [
                "typing.Generator[int]",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "count_only": [
                    "bool",
                    "str",
                    "Optional[Set[int]]"
                ],
                "keep_idx": [
                    "Optional[Set[int]]",
                    "Set[int]"
                ]
            }
        },
        "ConstituencyAncestorPredictionDatasetReader.get_example": {
            "name": "get_example",
            "location": 135,
            "return": [
                "Tuple[list]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "tree": [],
                "ancestor": [
                    "str",
                    "Dict[str,Any]",
                    "List[Tuple[str,Any]]",
                    "List",
                    "List[tuple[Union[str,Any]]]"
                ]
            }
        },
        "ConstituencyAncestorPredictionDatasetReader._get_label": {
            "name": "_get_label",
            "location": 160,
            "return": [
                "Text",
                "Optional[str]",
                "Union[None,List[str]]",
                "str",
                "Optional[Sequence[str]]"
            ],
            "arguments": {
                "self": [],
                "tree": [],
                "ancestor": [
                    "str",
                    "Callable[[T], T]",
                    "List[str]"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/contexteval/data/dataset_readers/coreference_arc_prediction.py": {
        "canonicalize_clusters": {
            "name": "canonicalize_clusters",
            "location": 23,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "clusters": [
                    "DefaultDict[int, List[Any]]",
                    "OrderedDict",
                    "str",
                    "int"
                ]
            }
        },
        "filter_clusters": {
            "name": "filter_clusters",
            "location": 55,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "clusters": [
                    "List[list[Any]]",
                    "str",
                    "List[List[Any]]",
                    "int",
                    "bool",
                    "Optional[str]",
                    "Iterable[int]"
                ],
                "max_span_size": [
                    "float",
                    "int",
                    "Dict[str,Tuple[str,int,int]]",
                    "Optional[int]",
                    "torch.Tensor"
                ]
            }
        },
        "CoreferenceArcPredictionDatasetReader.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contextualizer": [
                    "str",
                    "None",
                    "List[str]",
                    "bool",
                    "Dict[str,int]",
                    "Optional[str]"
                ],
                "include_raw_tokens": [
                    "bool",
                    "str",
                    "List[str]",
                    "Dict[str,int]",
                    "Optional[str]"
                ],
                "max_instances": [
                    "Optional[Union[int,float]]",
                    "None",
                    "int",
                    "bool",
                    "float"
                ],
                "seed": [
                    "int",
                    "bool",
                    "random.Random",
                    "Optional[str]"
                ],
                "lazy": [
                    "bool",
                    "Optional[Union[int,float]]",
                    "int"
                ]
            }
        },
        "CoreferenceArcPredictionDatasetReader._reseed": {
            "name": "_reseed",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seed": [
                    "int",
                    "float",
                    "random.Random",
                    "str",
                    "List[int]"
                ]
            }
        },
        "CoreferenceArcPredictionDatasetReader._read_dataset": {
            "name": "_read_dataset",
            "location": 121,
            "return": [
                "typing.Generator[int]"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "count_only": [
                    "bool",
                    "str",
                    "Optional[Set[int]]"
                ],
                "keep_idx": [
                    "Optional[Set[int]]",
                    "None",
                    "Set[int]"
                ]
            }
        },
        "CoreferenceArcPredictionDatasetReader._sample_negative_coreferent": {
            "name": "_sample_negative_coreferent",
            "location": 259,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]",
                "torch.Tensor"
            ],
            "arguments": {
                "self": [],
                "all_cluster_spans": [
                    "str",
                    "bool",
                    "Callable"
                ],
                "child_index": [
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        },
        "CoreferenceArcPredictionDatasetReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 268,
            "return": [
                "Instance",
                "List[str]",
                "List[Tuple[str,str]]",
                "str",
                "Set[str]",
                "List[Tuple[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "List[str]",
                    "str"
                ],
                "arc_indices": [
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]"
                ],
                "token_representations": [
                    "List[str]",
                    "None",
                    "int",
                    "List",
                    "Optional[str]",
                    "List[Optional[str]]",
                    "Optional[list]",
                    "str"
                ],
                "labels": [
                    "List[str]",
                    "None",
                    "List[Tuple[str,str]]",
                    "Optional[str]",
                    "List[tuple[Union[str,str]]]",
                    "str"
                ]
            }
        },
        "CoreferenceArcPredictionDatasetReader._normalize_word": {
            "name": "_normalize_word",
            "location": 328,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "word": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/contexteval/data/dataset_readers/dependency_arc_prediction.py": {
        "DependencyArcPredictionDatasetReader.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "negative_sampling_method": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Union[str,int]]",
                    "int"
                ],
                "contextualizer": [
                    "str",
                    "bool",
                    "None",
                    "float"
                ],
                "include_raw_tokens": [
                    "bool",
                    "str",
                    "float"
                ],
                "max_instances": [
                    "bool",
                    "None",
                    "Optional[Union[int,float]]",
                    "int",
                    "float"
                ],
                "seed": [
                    "int",
                    "Optional[Set[str]]",
                    "List[Dict[str,str]]",
                    "float",
                    "bool"
                ],
                "lazy": [
                    "bool",
                    "Optional[Union[int,float]]",
                    "int"
                ]
            }
        },
        "DependencyArcPredictionDatasetReader._reseed": {
            "name": "_reseed",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seed": [
                    "int",
                    "float",
                    "random.Random",
                    "str",
                    "List[int]"
                ]
            }
        },
        "DependencyArcPredictionDatasetReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 83,
            "return": [
                "Instance",
                "List[str]",
                "List[Tuple[str,str]]",
                "str",
                "Set[str]",
                "List[Tuple[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "List[str]",
                    "str"
                ],
                "arc_indices": [
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]"
                ],
                "token_representations": [
                    "List[str]",
                    "None",
                    "int",
                    "List",
                    "Optional[str]",
                    "List[Optional[str]]",
                    "Optional[list]",
                    "str"
                ],
                "labels": [
                    "List[str]",
                    "None",
                    "List[Tuple[str,str]]",
                    "Optional[str]",
                    "List[tuple[Union[str,str]]]",
                    "str"
                ]
            }
        },
        "DependencyArcPredictionDatasetReader._sample_negative_indices": {
            "name": "_sample_negative_indices",
            "location": 142,
            "return": [
                "Optional[Tuple[(_T0, int)]]"
            ],
            "arguments": {
                "self": [],
                "child_index": [
                    "str",
                    "bool",
                    "torch.Tensor"
                ],
                "all_arc_indices": [
                    "Dict[str,torch.Tensor]",
                    "int",
                    "str",
                    "List[dict]",
                    "Dict[int,tuple[Union[int,int]]]",
                    "List[Dict]",
                    "Dict[int,Tuple[int,int]]"
                ],
                "seq_len": [
                    "int",
                    "List[int]",
                    "List"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/contexteval/data/dataset_readers/event_factuality.py": {
        "EventFactualityDatasetReader.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "include_raw_tokens": [
                    "bool",
                    "str",
                    "List[str]",
                    "Sequence"
                ],
                "contextualizer": [
                    "str",
                    "List[str]",
                    "None",
                    "Sequence"
                ],
                "max_instances": [
                    "bool",
                    "None",
                    "Optional[Union[int,float]]",
                    "int",
                    "float"
                ],
                "seed": [
                    "int",
                    "bool",
                    "Optional[Union[int,float]]"
                ],
                "lazy": [
                    "bool",
                    "Optional[Union[int,float]]",
                    "int"
                ]
            }
        },
        "EventFactualityDatasetReader._read_dataset": {
            "name": "_read_dataset",
            "location": 58,
            "return": [
                "typing.Generator[int]",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "count_only": [
                    "bool",
                    "str",
                    "Optional[Set[int]]"
                ],
                "keep_idx": [
                    "Optional[Set[int]]",
                    "Set[int]"
                ]
            }
        },
        "EventFactualityDatasetReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 117,
            "return": [
                "Instance",
                "List[str]",
                "List[Tuple[str,str]]",
                "str",
                "Set[str]",
                "List[Tuple[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "List[str]",
                    "str"
                ],
                "predicate_indices": [
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]"
                ],
                "token_representations": [
                    "List[str]",
                    "None",
                    "int",
                    "List",
                    "Optional[str]",
                    "List[Optional[str]]",
                    "Optional[list]",
                    "str"
                ],
                "labels": [
                    "List[float]",
                    "None",
                    "List[Tuple[Any,int]]",
                    "List[int]",
                    "List[tuple[Union[Any,int]]]",
                    "Dict",
                    "List[List[float]]",
                    "List[list[float]]",
                    "List[Tuple[Any]]",
                    "List[tuple[Union[bytes,Any]]]",
                    "List[Tuple[bytes,Any]]",
                    "List[Tuple[Any,str]]"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/contexteval/data/dataset_readers/grammatical_error_correction.py": {
        "parse_sentence": {
            "name": "parse_sentence",
            "location": 15,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "sentence": [
                    "str"
                ]
            }
        },
        "lazy_parse": {
            "name": "lazy_parse",
            "location": 26,
            "return": [
                "Generator[(List[dict], Any, None)]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "GrammaticalErrorCorrectionDatasetReader._read_dataset": {
            "name": "_read_dataset",
            "location": 60,
            "return": [
                "typing.Generator[int]",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "count_only": [
                    "bool",
                    "str",
                    "Optional[Set[int]]"
                ],
                "keep_idx": [
                    "Optional[Set[int]]",
                    "None",
                    "Set[int]"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/contexteval/data/dataset_readers/language_modeling.py": {
        "LanguageModelingDatasetReader.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_length": [
                    "int"
                ],
                "backward": [
                    "bool",
                    "Iterator[int]",
                    "int",
                    "Tuple[int]",
                    "Optional[str]",
                    "str"
                ],
                "vocabulary_path": [
                    "bool",
                    "None",
                    "str",
                    "Optional[str]"
                ],
                "contextualizer": [
                    "int",
                    "None",
                    "float",
                    "List[str]",
                    "Optional[Union[int,float]]",
                    "bool",
                    "Optional[contexteval.contextualizers.Contextualizer]",
                    "Optional[int]"
                ],
                "max_instances": [
                    "int",
                    "None",
                    "float",
                    "List[str]",
                    "Optional[Union[int,float]]",
                    "bool",
                    "Optional[contexteval.contextualizers.Contextualizer]",
                    "Optional[int]"
                ],
                "seed": [
                    "int",
                    "Optional[Union[int,float]]",
                    "bool",
                    "Optional[contexteval.contextualizers.Contextualizer]",
                    "List[str]",
                    "Optional[int]",
                    "float"
                ],
                "lazy": [
                    "bool",
                    "int",
                    "Optional[Union[int,float]]",
                    "Optional[contexteval.contextualizers.Contextualizer]",
                    "List[str]",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "LanguageModelingDatasetReader._read_dataset": {
            "name": "_read_dataset",
            "location": 75,
            "return": [
                "typing.Generator[int]",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "count_only": [
                    "bool",
                    "str",
                    "Optional[Set[int]]"
                ],
                "keep_idx": [
                    "Optional[Set[int]]",
                    "Set[int]"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/contexteval/data/dataset_readers/semantic_dependency_arc_classification.py": {
        "parse_sentence": {
            "name": "parse_sentence",
            "location": 26,
            "return": [
                "Tuple[(List[dict], List[Tuple[(int, int)]], list)]"
            ],
            "arguments": {
                "sentence": [
                    "str"
                ]
            }
        },
        "lazy_parse": {
            "name": "lazy_parse",
            "location": 49,
            "return": [
                "Generator[(Tuple[(List[dict], List[Tuple[(int, int)]], list)], Any, None)]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "SemanticDependencyArcClassificationDatasetReader.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "directed": [
                    "bool",
                    "str",
                    "List[str]",
                    "Dict[str,int]",
                    "Optional[str]"
                ],
                "include_raw_tokens": [
                    "bool",
                    "str",
                    "List[str]",
                    "Dict[str,int]",
                    "Optional[str]"
                ],
                "contextualizer": [
                    "str",
                    "None",
                    "List[str]",
                    "bool",
                    "Dict[str,int]",
                    "Optional[str]"
                ],
                "max_instances": [
                    "Optional[Union[int,float]]",
                    "None",
                    "int",
                    "bool",
                    "float"
                ],
                "seed": [
                    "int",
                    "Optional[Union[int,float]]",
                    "bool"
                ],
                "lazy": [
                    "bool",
                    "Optional[Union[int,float]]",
                    "int"
                ]
            }
        },
        "SemanticDependencyArcClassificationDatasetReader._read_dataset": {
            "name": "_read_dataset",
            "location": 101,
            "return": [
                "typing.Generator[int]"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "count_only": [
                    "bool",
                    "str",
                    "Optional[Set[int]]"
                ],
                "keep_idx": [
                    "Optional[Set[int]]",
                    "Set[int]"
                ]
            }
        },
        "SemanticDependencyArcClassificationDatasetReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 179,
            "return": [
                "Instance",
                "List[str]",
                "List[Tuple[str,str]]",
                "str",
                "Set[str]",
                "List[Tuple[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "List[str]",
                    "str"
                ],
                "arc_indices": [
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]"
                ],
                "token_representations": [
                    "List[str]",
                    "None",
                    "int",
                    "List",
                    "Optional[str]",
                    "List[Optional[str]]",
                    "Optional[list]",
                    "str"
                ],
                "labels": [
                    "List[str]",
                    "None",
                    "List[Tuple[str,str]]",
                    "Optional[str]",
                    "List[tuple[Union[str,str]]]",
                    "str"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/contexteval/data/dataset_readers/semantic_dependency_arc_prediction.py": {
        "parse_sentence": {
            "name": "parse_sentence",
            "location": 16,
            "return": [
                "Tuple[(List[dict], List[Tuple[(int, int)]], list)]"
            ],
            "arguments": {
                "sentence": [
                    "str"
                ]
            }
        },
        "lazy_parse": {
            "name": "lazy_parse",
            "location": 40,
            "return": [
                "Generator[(Tuple[(List[dict], List[Tuple[(int, int)]], list)], Any, None)]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "SemanticDependencyArcPredictionDatasetReader._read_dataset": {
            "name": "_read_dataset",
            "location": 81,
            "return": [
                "typing.Generator[int]"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "count_only": [
                    "bool",
                    "str",
                    "Optional[Set[int]]"
                ],
                "keep_idx": [
                    "Optional[Set[int]]",
                    "Set[int]"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/contexteval/data/dataset_readers/semantic_tagging.py": {
        "parse_sentence": {
            "name": "parse_sentence",
            "location": 19,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "sentence": [
                    "str"
                ]
            }
        },
        "lazy_parse": {
            "name": "lazy_parse",
            "location": 33,
            "return": [
                "Generator[(List[dict], Any, None)]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "SemanticTaggingDatasetReader._read_dataset": {
            "name": "_read_dataset",
            "location": 66,
            "return": [
                "typing.Generator[int]",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "count_only": [
                    "bool",
                    "str",
                    "Optional[Set[int]]"
                ],
                "keep_idx": [
                    "Optional[Set[int]]",
                    "None",
                    "Set[int]"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/contexteval/data/dataset_readers/syntactic_dependency_arc_classification.py": {
        "lazy_parse": {
            "name": "lazy_parse",
            "location": 20,
            "return": [
                "Generator[(Tuple[(list, List[Tuple[(int, Any)]], list)], Any, None)]"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "fields": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "SyntacticDependencyArcClassificationDatasetReader.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "directed": [
                    "bool",
                    "str",
                    "List[str]",
                    "Dict[str,int]",
                    "Optional[str]"
                ],
                "include_raw_tokens": [
                    "bool",
                    "str",
                    "List[str]",
                    "Dict[str,int]",
                    "Optional[str]"
                ],
                "contextualizer": [
                    "str",
                    "None",
                    "List[str]",
                    "bool",
                    "Dict[str,int]",
                    "Optional[str]"
                ],
                "max_instances": [
                    "Optional[Union[int,float]]",
                    "None",
                    "int",
                    "bool",
                    "float"
                ],
                "seed": [
                    "int",
                    "Optional[Union[int,float]]",
                    "bool"
                ],
                "lazy": [
                    "bool",
                    "Optional[Union[int,float]]",
                    "int"
                ]
            }
        },
        "SyntacticDependencyArcClassificationDatasetReader._read_dataset": {
            "name": "_read_dataset",
            "location": 87,
            "return": [
                "typing.Generator[int]",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "count_only": [
                    "bool",
                    "str",
                    "Optional[Set[int]]"
                ],
                "keep_idx": [
                    "Optional[Set[int]]",
                    "Set[int]"
                ]
            }
        },
        "SyntacticDependencyArcClassificationDatasetReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 163,
            "return": [
                "Instance",
                "List[str]",
                "List[Tuple[str,str]]",
                "str",
                "Set[str]",
                "List[Tuple[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "List[str]",
                    "str"
                ],
                "arc_indices": [
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]"
                ],
                "token_representations": [
                    "List[str]",
                    "None",
                    "int",
                    "List",
                    "Optional[str]",
                    "List[Optional[str]]",
                    "Optional[list]",
                    "str"
                ],
                "labels": [
                    "List[str]",
                    "None",
                    "List[Tuple[str,str]]",
                    "Optional[str]",
                    "List[tuple[Union[str,str]]]",
                    "str"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/contexteval/data/dataset_readers/syntactic_dependency_arc_prediction.py": {
        "lazy_parse": {
            "name": "lazy_parse",
            "location": 16,
            "return": [
                "Generator[(Tuple[(list, List[Tuple[(int, Any)]], list)], Any, None)]"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "fields": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "SyntacticDependencyArcPredictionDatasetReader._read_dataset": {
            "name": "_read_dataset",
            "location": 74,
            "return": [
                "typing.Generator[int]",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "count_only": [
                    "bool",
                    "str",
                    "Optional[Set[int]]"
                ],
                "keep_idx": [
                    "Optional[Set[int]]",
                    "Set[int]"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/contexteval/data/dataset_readers/tagging.py": {
        "TaggingDatasetReader.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contextualizer": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ],
                "max_instances": [
                    "int",
                    "None",
                    "Optional[Union[int,float]]",
                    "float",
                    "bool",
                    "Optional[int]"
                ],
                "seed": [
                    "int",
                    "Optional[Union[int,float]]",
                    "bool",
                    "Optional[int]"
                ],
                "lazy": [
                    "bool",
                    "int",
                    "Optional[Union[int,float]]",
                    "Optional[int]"
                ]
            }
        },
        "TaggingDatasetReader._read_dataset": {
            "name": "_read_dataset",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "bool",
                    "str",
                    "Optional[Set[int]]",
                    "Set[int]",
                    "None"
                ],
                "count_only": [
                    "bool",
                    "str",
                    "Optional[Set[int]]"
                ],
                "keep_idx": [
                    "bool",
                    "str",
                    "None",
                    "Optional[Set[int]]",
                    "Set[int]"
                ]
            }
        },
        "TaggingDatasetReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 67,
            "return": [
                "Instance",
                "List[str]",
                "List[Tuple[str,str]]",
                "str",
                "Set[str]",
                "List[Tuple[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "str",
                    "List[str]",
                    "Dict[str,Any]",
                    "Set[str]",
                    "int"
                ],
                "token_representations": [
                    "Union[List[str],str]",
                    "None",
                    "List[Optional[str]]",
                    "str",
                    "List[str]",
                    "Union[List[Any],List[str]]",
                    "Set[Union[str,Any]]",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,dict[str,Any]]",
                    "Set[Tuple[str,str]]",
                    "Set[tuple[Union[str,str]]]"
                ],
                "labels": [
                    "List[str]",
                    "None",
                    "str",
                    "Union[List[str],str]",
                    "List[list[str]]",
                    "List[List[str]]",
                    "Dict[str,list[Any]]",
                    "Dict[str,List[Any]]",
                    "Tuple[Union[str,str]]",
                    "Tuple[str,str]",
                    "Tuple[str,str,str,str,str,str,str,str,str]"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/contexteval/data/dataset_readers/truncatable_dataset_reader.py": {
        "TruncatableDatasetReader.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_instances": [
                    "int",
                    "Optional[int]",
                    "str"
                ],
                "seed": [
                    "int",
                    "random.Random",
                    "bool",
                    "Optional[int]",
                    "float",
                    "Optional[Tuple[int,...]]"
                ],
                "lazy": [
                    "bool",
                    "Dict[str,Any]",
                    "Callable[[Any,Any],bool]"
                ]
            }
        },
        "TruncatableDatasetReader._reseed": {
            "name": "_reseed",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seed": [
                    "int",
                    "float",
                    "random.Random",
                    "str",
                    "List[int]"
                ]
            }
        },
        "TruncatableDatasetReader._read": {
            "name": "_read",
            "location": 65,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "TruncatableDatasetReader._read_dataset": {
            "name": "_read_dataset",
            "location": 94,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "bool",
                    "str",
                    "Optional[Set[int]]",
                    "Set[int]",
                    "None"
                ],
                "count_only": [
                    "bool",
                    "str",
                    "Optional[Set[int]]"
                ],
                "keep_idx": [
                    "bool",
                    "str",
                    "None",
                    "Optional[Set[int]]",
                    "Set[int]"
                ]
            }
        },
        "TruncatableDatasetReader._count_instances_in_dataset": {
            "name": "_count_instances_in_dataset",
            "location": 114,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/contexteval/data/dataset_readers/__init__.py": {},
    "contextual-repr-analysis-master/contexteval/data/fields/sequence_array_field.py": {
        "SequenceArrayField.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "array": [
                    "int",
                    "str",
                    "float",
                    "List[str]",
                    "Union[str,float]",
                    "bool"
                ],
                "padding_value": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ],
                "sequence_dim": [
                    "int",
                    "Union[str,float]",
                    "float",
                    "List[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "SequenceArrayField.sequence_length": {
            "name": "sequence_length",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "contextual-repr-analysis-master/contexteval/data/fields/__init__.py": {},
    "contextual-repr-analysis-master/contexteval/models/pairwise_tagger.py": {
        "PairwiseTagger.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [
                    "str",
                    "bool",
                    "bytes",
                    "torch.Tensor",
                    "util.codec.FileIn",
                    "django.db.models.QuerySet"
                ],
                "token_representation_dim": [
                    "Sequence",
                    "List[str]",
                    "str"
                ],
                "encoder": [
                    "Optional[str]",
                    "None",
                    "str",
                    "Optional[Tuple[numpy.ndarray,numpy.ndarray]]",
                    "bool",
                    "List[str]",
                    "Tuple[Union[numpy.ndarray,numpy.ndarray]]"
                ],
                "decoder": [
                    "str",
                    "None",
                    "Dict",
                    "bytes",
                    "zerver.models.UserProfile"
                ],
                "combination": [
                    "Text",
                    "Callable",
                    "str",
                    "zerver.models.Realm"
                ],
                "contextualizer": [
                    "Sequence",
                    "List[str]",
                    "None",
                    "str"
                ],
                "calculate_per_label_f1": [
                    "Optional[Dict[str,Any]]",
                    "bool"
                ],
                "loss_average": [
                    "Text",
                    "str",
                    "int"
                ],
                "pretrained_file": [
                    "str",
                    "Set[str]",
                    "None",
                    "List[str]"
                ],
                "transfer_contextualizer_from_pretrained_file": [
                    "bool",
                    "Sequence",
                    "List[str]",
                    "str"
                ],
                "transfer_encoder_from_pretrained_file": [
                    "bool",
                    "int",
                    "Iterable[Tuple[str,str]]",
                    "Optional[bool]",
                    "str",
                    "Mapping",
                    "torch.Tensor",
                    "Optional[Mapping[str,Any]]"
                ],
                "freeze_encoder": [
                    "bool",
                    "Sequence",
                    "List[str]",
                    "str"
                ],
                "initializer": [
                    "InitializerApplicator",
                    "Sequence",
                    "List[str]",
                    "str"
                ],
                "regularizer": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]",
                    "Tuple[Union[str,dict]]",
                    "models.Payment",
                    "Tuple[str,dict]"
                ]
            }
        },
        "PairwiseTagger.forward": {
            "name": "forward",
            "location": 202,
            "return": [
                "Dict[Text,]",
                "Dict[str,Any]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "arc_indices": [
                    "int",
                    "Optional[str]",
                    "Optional[float]",
                    "Optional[bool]"
                ],
                "token_representations": [
                    "str",
                    "None",
                    "bytes",
                    "Optional[List[str]]",
                    "List[str]",
                    "Optional[float]",
                    "float"
                ],
                "raw_tokens": [
                    "str",
                    "None",
                    "Optional[float]",
                    "Tuple",
                    "Optional[List[str]]",
                    "float",
                    "List[str]"
                ],
                "labels": [
                    "Optional[float]",
                    "None",
                    "Optional[Outcome]",
                    "float"
                ]
            }
        },
        "PairwiseTagger.decode": {
            "name": "decode",
            "location": 317,
            "return": [
                "Dict[str, Any]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "output_dict": [
                    "Dict[str, torch.Tensor]",
                    "Dict[str, Any]"
                ]
            }
        },
        "PairwiseTagger.get_metrics": {
            "name": "get_metrics",
            "location": 339,
            "return": [
                "Dict[,Union[list,list[str],dict,float,str,dict[str,Any],int,tuple]]",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "reset": [
                    "bool",
                    "str",
                    "core.models.Recipe",
                    "float",
                    "int",
                    "List[str]"
                ]
            }
        },
        "PairwiseTagger._get_label_mask_from_arc_indices": {
            "name": "_get_label_mask_from_arc_indices",
            "location": 363,
            "return": [
                "str",
                "int",
                "List",
                "Dict",
                "bytes",
                "List[int]",
                "Dict[str,Any]",
                "List[list[int]]",
                "Tuple[int,int,int]"
            ],
            "arguments": {
                "self": [],
                "arc_indices": [
                    "str",
                    "List",
                    "bytes",
                    "Dict[str,Any]",
                    "Tuple[int,int,int]",
                    "Tuple[Union[int,int,int]]"
                ]
            }
        },
        "PairwiseTagger.from_params": {
            "name": "from_params",
            "location": 385,
            "return": [
                "int",
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "Dict[str,Any]",
                    "allennlp.common.Params"
                ],
                "vocab": [
                    "str",
                    "List",
                    "Dict",
                    "Callable",
                    "Dict[int,Dict[str,Any]]",
                    "Dict[int,dict[str,Any]]"
                ],
                "params": [
                    "dict"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/contexteval/models/selective_regressor.py": {
        "SelectiveRegressor.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [
                    "str",
                    "bool"
                ],
                "token_representation_dim": [
                    "Optional[int]",
                    "int",
                    "str",
                    "bool",
                    "None"
                ],
                "encoder": [
                    "bool",
                    "None",
                    "str",
                    "Optional[str]"
                ],
                "decoder": [
                    "None",
                    "Optional[str]",
                    "int",
                    "str",
                    "Optional[int]",
                    "List[dict]",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]",
                    "Optional[bool]"
                ],
                "contextualizer": [
                    "Optional[int]",
                    "None",
                    "str",
                    "bool",
                    "int"
                ],
                "pretrained_file": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "transfer_contextualizer_from_pretrained_file": [
                    "bool",
                    "Optional[int]",
                    "str"
                ],
                "transfer_encoder_from_pretrained_file": [
                    "bool",
                    "Dict",
                    "str"
                ],
                "freeze_encoder": [
                    "bool",
                    "Optional[int]",
                    "str"
                ],
                "initializer": [
                    "InitializerApplicator",
                    "Optional[int]",
                    "bool",
                    "str"
                ],
                "regularizer": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "SelectiveRegressor.forward": {
            "name": "forward",
            "location": 160,
            "return": [
                "Dict[Text,float]",
                "Dict[str,Any]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "label_indices": [
                    "float"
                ],
                "token_representations": [
                    "str",
                    "None",
                    "Tuple",
                    "Optional[Outcome]"
                ],
                "raw_tokens": [
                    "int",
                    "None",
                    "Tuple",
                    "List[Set[int]]",
                    "List[set[int]]",
                    "Union[int,str,None]",
                    "str",
                    "Optional[bool]",
                    "Any",
                    "Optional[Union[str,Any]]",
                    "bool"
                ],
                "labels": [
                    "Optional[float]",
                    "None",
                    "float"
                ]
            }
        },
        "SelectiveRegressor.get_metrics": {
            "name": "get_metrics",
            "location": 270,
            "return": [
                "Dict",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "reset": [
                    "bool",
                    "str",
                    "core.models.Recipe",
                    "List[str]",
                    "Tuple",
                    "List[List[str]]"
                ]
            }
        },
        "SelectiveRegressor._get_label_mask_from_label_indices": {
            "name": "_get_label_mask_from_label_indices",
            "location": 282,
            "return": [
                "str",
                "int",
                "bool",
                "List[str]",
                "Dict",
                "List[int]",
                "List[list[int]]"
            ],
            "arguments": {
                "self": [],
                "label_indices": [
                    "str",
                    "Optional[Callable]"
                ]
            }
        },
        "SelectiveRegressor.from_params": {
            "name": "from_params",
            "location": 305,
            "return": [
                "int",
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "Dict[str,Any]",
                    "allennlp.common.Params"
                ],
                "vocab": [
                    "str",
                    "bool",
                    "Optional[Iterable[T]]",
                    "Iterable[T]",
                    "None"
                ],
                "params": [
                    "str",
                    "taskiapplication.models.projecProject",
                    "pykechain.models.parPart",
                    "dict",
                    "list"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/contexteval/models/selective_tagger.py": {
        "SelectiveTagger.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "token_representation_dim": [
                    "str",
                    "Sequence[str]",
                    "List[list[int]]",
                    "torch.LongTensor",
                    "List[list[str]]",
                    "List[List[int]]",
                    "List[List[str]]"
                ],
                "encoder": [
                    "bool",
                    "None",
                    "str",
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[int]",
                    "Optional[torch.Tensor]"
                ],
                "decoder": [
                    "str",
                    "None",
                    "int",
                    "Optional[int]",
                    "Optional[str]",
                    "allennlp.data.vocabulary.Vocabulary"
                ],
                "contextualizer": [
                    "str",
                    "None",
                    "Sequence[str]",
                    "torch.LongTensor",
                    "List[List[int]]",
                    "List[list[int]]",
                    "List[List[str]]",
                    "List[list[str]]"
                ],
                "calculate_per_label_f1": [
                    "bool",
                    "Dict[str,allennlp.data.token_indexers.TokenIndexer]",
                    "int",
                    "Callable"
                ],
                "loss_average": [
                    "Text",
                    "str",
                    "int"
                ],
                "pretrained_file": [
                    "str",
                    "bool",
                    "None",
                    "Dict"
                ],
                "transfer_contextualizer_from_pretrained_file": [
                    "bool",
                    "str",
                    "Sequence[str]",
                    "torch.LongTensor",
                    "List[List[int]]",
                    "List[List[str]]"
                ],
                "transfer_encoder_from_pretrained_file": [
                    "bool",
                    "List[str]",
                    "allennlp.state_machines.states.GrammarBasedState",
                    "Dict[str,torch.Tensor]",
                    "List[Callable]",
                    "numpy.ndarray"
                ],
                "freeze_encoder": [
                    "bool",
                    "str",
                    "Sequence[str]",
                    "torch.LongTensor",
                    "List[List[int]]",
                    "List[List[str]]"
                ],
                "initializer": [
                    "InitializerApplicator",
                    "str",
                    "Sequence[str]",
                    "torch.LongTensor",
                    "List[List[int]]",
                    "List[List[str]]"
                ],
                "regularizer": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]",
                    "annofabcli.common.dataclasses.WaitOptions"
                ]
            }
        },
        "SelectiveTagger.forward": {
            "name": "forward",
            "location": 187,
            "return": [
                "Dict[Text,]",
                "Dict[str,Any]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "label_indices": [
                    "float"
                ],
                "token_representations": [
                    "str",
                    "None",
                    "Tuple",
                    "numpy.ndarray",
                    "Optional[Outcome]"
                ],
                "raw_tokens": [
                    "int",
                    "None",
                    "Tuple",
                    "List[Set[int]]",
                    "List[set[int]]",
                    "Union[int,str,None]",
                    "str",
                    "Optional[bool]",
                    "Any",
                    "Optional[Union[str,Any]]",
                    "bool"
                ],
                "labels": [
                    "Optional[float]",
                    "None",
                    "float"
                ]
            }
        },
        "SelectiveTagger.decode": {
            "name": "decode",
            "location": 296,
            "return": [
                "Dict[str, Any]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "output_dict": [
                    "Dict[str, torch.Tensor]",
                    "Dict[str, Any]"
                ]
            }
        },
        "SelectiveTagger.get_metrics": {
            "name": "get_metrics",
            "location": 318,
            "return": [
                "Dict[,Union[list,list[str],dict,float,str,dict[str,Any],int,tuple]]",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "reset": [
                    "bool",
                    "str",
                    "core.models.Recipe",
                    "float",
                    "int",
                    "List[str]"
                ]
            }
        },
        "SelectiveTagger._get_label_mask_from_label_indices": {
            "name": "_get_label_mask_from_label_indices",
            "location": 342,
            "return": [
                "str",
                "int",
                "bool",
                "List[str]",
                "Dict",
                "List[int]",
                "List[list[int]]"
            ],
            "arguments": {
                "self": [],
                "label_indices": [
                    "str",
                    "Optional[Callable]"
                ]
            }
        },
        "SelectiveTagger.from_params": {
            "name": "from_params",
            "location": 365,
            "return": [
                "int",
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "Dict[str,Any]",
                    "allennlp.common.Params"
                ],
                "vocab": [
                    "str",
                    "zerver.models.Realm.Domain"
                ],
                "params": [
                    "Dict[str, str]"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/contexteval/models/tagger.py": {
        "Tagger.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [
                    "Optional[int]",
                    "int",
                    "List[str]",
                    "allennlp.modules.similarity_functions.SimilarityFunction",
                    "List",
                    "None"
                ],
                "token_representation_dim": [
                    "torch.LongTensor",
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "encoder": [
                    "None",
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[bool]",
                    "Optional[torch.Tensor]",
                    "Optional[int]"
                ],
                "decoder": [
                    "str",
                    "None",
                    "int",
                    "Callable[,int]",
                    "Optional[List[str]]",
                    "List[str]",
                    "Dict[str,str]",
                    "Optional[bool]",
                    "Union[str,None]",
                    "Optional[str]",
                    "Optional[Dict[str,str]]"
                ],
                "use_crf": [
                    "bool"
                ],
                "constrain_crf_decoding": [
                    "bool",
                    "torch.LongTensor",
                    "Optional[str]",
                    "int"
                ],
                "include_start_end_transitions": [
                    "bool",
                    "Iterable",
                    "Dict[str,allennlp.data.token_indexers.token_indexer.TokenIndexer]"
                ],
                "label_encoding": [
                    "int",
                    "None",
                    "bool",
                    "bytes",
                    "Optional[str]",
                    "str",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "contextualizer": [
                    "torch.LongTensor",
                    "None",
                    "int",
                    "Optional[str]",
                    "str"
                ],
                "calculate_per_label_f1": [
                    "bool",
                    "Callable"
                ],
                "calculate_span_f1": [
                    "bool",
                    "torch.LongTensor",
                    "Optional[str]",
                    "int"
                ],
                "calculate_perplexity": [
                    "bool",
                    "torch.LongTensor",
                    "Optional[str]",
                    "int"
                ],
                "loss_average": [
                    "Text",
                    "str",
                    "Dict",
                    "Dict[str,Any]"
                ],
                "pretrained_file": [
                    "str",
                    "None",
                    "Iterable[str]",
                    "Optional[str]",
                    "bool",
                    "Mapping"
                ],
                "transfer_contextualizer_from_pretrained_file": [
                    "bool",
                    "torch.LongTensor",
                    "Optional[str]",
                    "int"
                ],
                "transfer_encoder_from_pretrained_file": [
                    "bool",
                    "List[Callable]",
                    "allennlp.state_machines.states.GrammarBasedState",
                    "Dict[str,torch.Tensor]",
                    "List[Dict[str,Any]]",
                    "Callable[...,None]",
                    "str"
                ],
                "freeze_encoder": [
                    "bool",
                    "torch.LongTensor",
                    "Optional[str]",
                    "int"
                ],
                "initializer": [
                    "InitializerApplicator",
                    "torch.LongTensor",
                    "Optional[str]",
                    "int"
                ],
                "regularizer": [
                    "bool",
                    "None",
                    "float",
                    "str",
                    "List[int]"
                ]
            }
        },
        "Tagger.forward": {
            "name": "forward",
            "location": 252,
            "return": [
                "Dict[str, Any]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "token_representations": [
                    "List[Set[int]]",
                    "Dict[str,torch.LongTensor]",
                    "None",
                    "List[set[int]]"
                ],
                "raw_tokens": [
                    "List[Set[int]]",
                    "None",
                    "str",
                    "Optional[Outcome]",
                    "List[set[int]]"
                ],
                "labels": [
                    "None",
                    "Optional[numpy.ndarray]",
                    "str",
                    "List[set[int]]",
                    "List[Set[int]]",
                    "Tuple",
                    "Dict[Type,Any]",
                    "torch.LongTensor",
                    "Dict[type,Any]"
                ]
            }
        },
        "Tagger.decode": {
            "name": "decode",
            "location": 356,
            "return": [
                "Dict[str, Any]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "output_dict": [
                    "Dict[str, torch.Tensor]",
                    "Dict[str, Any]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Tagger.get_metrics": {
            "name": "get_metrics",
            "location": 384,
            "return": [
                "Dict[tuple[Union[str,int]],tuple[Union[str,int]]]",
                "str",
                "Dict[,Union[list,list[str],dict,float,str,dict[str,Any],int,tuple]]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "reset": [
                    "bool",
                    "str",
                    "Dict",
                    "int",
                    "core.models.Recipe"
                ]
            }
        },
        "Tagger.from_params": {
            "name": "from_params",
            "location": 414,
            "return": [
                "int",
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "allennlp.common.Params"
                ],
                "vocab": [
                    "int",
                    "purplship.core.models.RateRequest",
                    "bool"
                ],
                "params": [
                    "videoarchiver.tvasahi.models.Episode",
                    "Dict[str, str]",
                    "salon.models.Stylist",
                    "bool"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/contexteval/models/word_conditional_majority_pairwise_tagger.py": {
        "WordConditionalMajorityPairwiseTagger.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]",
                    "int",
                    "List[tuple[Union[int,int]]]",
                    "List[Tuple[int,int]]",
                    "float",
                    "Iterable[str]",
                    "bool",
                    "Tuple[int]",
                    "Union[int,float]"
                ],
                "calculate_per_label_f1": [
                    "bool",
                    "allennlp.models.archival.Archive",
                    "Optional[bool]"
                ],
                "initializer": [
                    "InitializerApplicator",
                    "bool",
                    "int",
                    "str",
                    "float",
                    "Optional[Union[IPUtilityFunction,UtilityDistribution]]",
                    "Optional[Dict[str,Any]]"
                ],
                "regularizer": [
                    "int",
                    "None",
                    "List[List[int]]",
                    "List[util.Position]",
                    "Tuple[int,int]",
                    "List[int]",
                    "List[list[int]]",
                    "List[Tuple[int,int]]",
                    "Tuple[Union[int,int]]",
                    "List[tuple[Union[int,int]]]"
                ]
            }
        },
        "WordConditionalMajorityPairwiseTagger.forward": {
            "name": "forward",
            "location": 67,
            "return": [
                "Dict[Text,]",
                "Dict[str,Any]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "raw_tokens": [
                    "int",
                    "str",
                    "numpy.ndarray",
                    "bool"
                ],
                "arc_indices": [
                    "int",
                    "List[Set[int]]",
                    "torch.Tensor",
                    "allennlp.nn.decoding.decoder_step.DecoderStep"
                ],
                "labels": [
                    "str",
                    "None",
                    "List[str]",
                    "bytes",
                    "Optional[List[str]]",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "WordConditionalMajorityPairwiseTagger._get_token_label": {
            "name": "_get_token_label",
            "location": 153,
            "return": [
                "int",
                "Dict[str, str]",
                "Dict[int, Set[str]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "WordConditionalMajorityPairwiseTagger.decode": {
            "name": "decode",
            "location": 162,
            "return": [
                "Dict[str, Any]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "output_dict": [
                    "Dict[str, torch.Tensor]",
                    "Dict[str, Any]"
                ]
            }
        },
        "WordConditionalMajorityPairwiseTagger.get_metrics": {
            "name": "get_metrics",
            "location": 184,
            "return": [
                "Dict[,Union[list,list[str],dict,float,str,dict[str,Any],int,tuple]]",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "reset": [
                    "bool",
                    "str",
                    "core.models.Recipe",
                    "float",
                    "int",
                    "List[str]"
                ]
            }
        },
        "WordConditionalMajorityPairwiseTagger.state_dict": {
            "name": "state_dict",
            "location": 209,
            "return": [
                "dict",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "destination": [
                    "float",
                    "None",
                    "bool",
                    "Optional[bool]"
                ],
                "prefix": [
                    "Text",
                    "float",
                    "bool",
                    "Optional[bool]"
                ],
                "keep_vars": [
                    "bool",
                    "float",
                    "Optional[bool]"
                ]
            }
        },
        "WordConditionalMajorityPairwiseTagger.load_state_dict": {
            "name": "load_state_dict",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state_dict": [
                    "Dict[str,Any]",
                    "Dict[str,List[str]]",
                    "Dict[str,list[str]]"
                ],
                "strict": [
                    "bool",
                    "Sequence[str]",
                    "Union[List[Any],tuple]",
                    "Dict[int,Dict[str,Any]]",
                    "Dict",
                    "List",
                    "Match",
                    "List[tuple]"
                ]
            }
        },
        "WordConditionalMajorityPairwiseTagger._get_text_mask_from_arc_indices": {
            "name": "_get_text_mask_from_arc_indices",
            "location": 224,
            "return": [
                "int",
                "List[int]",
                "Dict",
                "torch.Tensor",
                "str",
                "List[list[int]]",
                "Union[str,int,float]",
                "Sequence[float]"
            ],
            "arguments": {
                "self": [],
                "arc_indices": [
                    "int",
                    "List[int]",
                    "str",
                    "torch.Tensor",
                    "Sequence[float]",
                    "float",
                    "Union[str,int,float]"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/contexteval/models/word_conditional_majority_selective_tagger.py": {
        "WordConditionalMajoritySelectiveTagger.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]",
                    "int",
                    "List[tuple[Union[int,int]]]",
                    "List[Tuple[int,int]]",
                    "float",
                    "Iterable[str]",
                    "bool",
                    "Tuple[int]",
                    "Union[int,float]"
                ],
                "calculate_per_label_f1": [
                    "bool",
                    "allennlp.models.archival.Archive",
                    "Optional[bool]"
                ],
                "initializer": [
                    "InitializerApplicator",
                    "bool",
                    "int",
                    "str",
                    "float",
                    "Optional[Union[IPUtilityFunction,UtilityDistribution]]",
                    "Optional[Dict[str,Any]]"
                ],
                "regularizer": [
                    "int",
                    "None",
                    "List[List[int]]",
                    "List[util.Position]",
                    "Tuple[int,int]",
                    "List[int]",
                    "List[list[int]]",
                    "List[Tuple[int,int]]",
                    "Tuple[Union[int,int]]",
                    "List[tuple[Union[int,int]]]"
                ]
            }
        },
        "WordConditionalMajoritySelectiveTagger.forward": {
            "name": "forward",
            "location": 81,
            "return": [
                "Dict[Text,]",
                "Dict[str,Any]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "label_indices": [
                    "List[int]",
                    "List[List[str]]",
                    "bool",
                    "Counter[int]"
                ],
                "raw_tokens": [
                    "Set[int]",
                    "List[int]",
                    "str",
                    "Tuple[Union[int,Any]]",
                    "numpy.ndarray",
                    "Deque",
                    "Tuple[int,Any]",
                    "Deque[int]"
                ],
                "labels": [
                    "int",
                    "bytes"
                ]
            }
        },
        "WordConditionalMajoritySelectiveTagger._get_token_label": {
            "name": "_get_token_label",
            "location": 169,
            "return": [
                "int",
                "Dict[str, str]",
                "Dict[int, Set[str]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "WordConditionalMajoritySelectiveTagger.decode": {
            "name": "decode",
            "location": 178,
            "return": [
                "Dict[str, Any]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "output_dict": [
                    "Dict[str, torch.Tensor]",
                    "Dict[str, Any]"
                ]
            }
        },
        "WordConditionalMajoritySelectiveTagger.get_metrics": {
            "name": "get_metrics",
            "location": 200,
            "return": [
                "Dict[,Union[list,list[str],dict,float,str,dict[str,Any],int,tuple]]",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "reset": [
                    "bool",
                    "str",
                    "core.models.Recipe",
                    "float",
                    "int",
                    "List[str]"
                ]
            }
        },
        "WordConditionalMajoritySelectiveTagger.state_dict": {
            "name": "state_dict",
            "location": 225,
            "return": [
                "dict",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "destination": [
                    "float",
                    "None",
                    "bool",
                    "Optional[bool]"
                ],
                "prefix": [
                    "Text",
                    "float",
                    "bool",
                    "Optional[bool]"
                ],
                "keep_vars": [
                    "bool",
                    "float",
                    "Optional[bool]"
                ]
            }
        },
        "WordConditionalMajoritySelectiveTagger.load_state_dict": {
            "name": "load_state_dict",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state_dict": [
                    "Dict[str,Any]",
                    "Dict[str,List[str]]",
                    "Dict[str,list[str]]"
                ],
                "strict": [
                    "bool",
                    "Sequence[str]",
                    "Union[List[Any],tuple]",
                    "Dict[int,Dict[str,Any]]",
                    "Dict",
                    "List",
                    "Match",
                    "List[tuple]"
                ]
            }
        },
        "WordConditionalMajoritySelectiveTagger._get_text_mask_from_label_indices": {
            "name": "_get_text_mask_from_label_indices",
            "location": 240,
            "return": [
                "float",
                "int",
                "str",
                "Dict",
                "Model",
                "List[int]",
                "Dict[str,str]",
                "List[list[int]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "label_indices": [
                    "str",
                    "Sequence[str]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/contexteval/models/word_conditional_majority_tagger.py": {
        "WordConditionalMajorityTagger.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [
                    "int",
                    "str",
                    "Callable",
                    "Dict[str,Any]",
                    "List[List[str]]",
                    "List[list[str]]"
                ],
                "calculate_per_label_f1": [
                    "bool",
                    "str",
                    "int",
                    "Dict[str,Dict[str,Any]]",
                    "Dict"
                ],
                "calculate_span_f1": [
                    "bool",
                    "Dict[str,str]",
                    "float",
                    "int"
                ],
                "label_encoding": [
                    "str",
                    "None"
                ],
                "initializer": [
                    "InitializerApplicator",
                    "bool",
                    "Dict[str,str]",
                    "float",
                    "int"
                ],
                "regularizer": [
                    "int",
                    "None",
                    "List[float]",
                    "str",
                    "Tuple[int,int]",
                    "List[Tuple[int,int]]",
                    "Tuple[Union[int,int]]",
                    "Union[int,str]",
                    "List[tuple[Union[int,int]]]"
                ]
            }
        },
        "WordConditionalMajorityTagger.forward": {
            "name": "forward",
            "location": 99,
            "return": [
                "Dict[Text,]",
                "Dict[str,Any]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "raw_tokens": [
                    "List[List[Any]]",
                    "int",
                    "str",
                    "Union[int, str]",
                    "List[int]"
                ],
                "labels": [
                    "torch.IntTensor",
                    "Optional[numpy.ndarray]",
                    "Optional[torch.Tensor]"
                ]
            }
        },
        "WordConditionalMajorityTagger._get_token_label": {
            "name": "_get_token_label",
            "location": 194,
            "return": [
                "int",
                "Dict[str, str]",
                "Dict[int, Set[str]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "WordConditionalMajorityTagger.decode": {
            "name": "decode",
            "location": 203,
            "return": [
                "Dict[str, Any]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "output_dict": [
                    "Dict[str, torch.Tensor]",
                    "dict"
                ]
            }
        },
        "WordConditionalMajorityTagger.get_metrics": {
            "name": "get_metrics",
            "location": 224,
            "return": [
                "Dict[tuple[Union[str,int]],tuple[Union[str,int]]]",
                "str",
                "Dict[,Union[list,list[str],dict,float,str,dict[str,Any],int,tuple]]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "reset": [
                    "bool",
                    "str",
                    "Dict",
                    "int",
                    "core.models.Recipe"
                ]
            }
        },
        "WordConditionalMajorityTagger.state_dict": {
            "name": "state_dict",
            "location": 254,
            "return": [
                "dict",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "destination": [
                    "float",
                    "None",
                    "bool",
                    "Optional[bool]"
                ],
                "prefix": [
                    "Text",
                    "float",
                    "bool",
                    "Optional[bool]"
                ],
                "keep_vars": [
                    "bool",
                    "float",
                    "Optional[bool]"
                ]
            }
        },
        "WordConditionalMajorityTagger.load_state_dict": {
            "name": "load_state_dict",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state_dict": [
                    "Dict[str,Any]",
                    "Dict",
                    "matches.models.Match",
                    "Type[T]"
                ],
                "strict": [
                    "bool",
                    "Sequence[str]",
                    "Union[List[Any],tuple]",
                    "List[dict]",
                    "Dict",
                    "List",
                    "Match",
                    "List[tuple]",
                    "Final"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/contexteval/models/__init__.py": {},
    "contextual-repr-analysis-master/contexteval/predictors/conll_tagger.py": {
        "ConllTaggerPredictor.dump_line": {
            "name": "dump_line",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "outputs": [
                    "str",
                    "allennlp.common.util.JsonDict",
                    "Type[GenericList]"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/contexteval/predictors/__init__.py": {},
    "contextual-repr-analysis-master/contexteval/training/null_optimizer.py": {
        "NullOptimizer.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "List",
                    "str",
                    "Optional[List[Any]]"
                ],
                "defaults": [
                    "Dict",
                    "int",
                    "bool",
                    "str",
                    "Sequence[T]",
                    "List[Tuple[int,float]]"
                ]
            }
        },
        "NullOptimizer.step": {
            "name": "step",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "closure": [
                    "int",
                    "None",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "NullOptimizer.zero_grad": {
            "name": "zero_grad",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullOptimizer.state_dict": {
            "name": "state_dict",
            "location": 42,
            "return": [
                "Dict",
                "str",
                "bool",
                "Mapping[str,Any]",
                "Tuple[int,int,int]",
                "List[Dict]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "contextual-repr-analysis-master/contexteval/training/__init__.py": {},
    "contextual-repr-analysis-master/contexteval/training/metrics/perplexity.py": {
        "Perplexity.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Perplexity.__call__": {
            "name": "__call__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loss": [
                    "str",
                    "int",
                    "Dict[int, dict]"
                ],
                "num_instances": [
                    "int",
                    "bytes",
                    "str",
                    "Iterator[int]"
                ]
            }
        },
        "Perplexity.get_metric": {
            "name": "get_metric",
            "location": 37,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "reset": [
                    "bool",
                    "str"
                ]
            }
        },
        "Perplexity.reset": {
            "name": "reset",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "contextual-repr-analysis-master/contexteval/training/metrics/__init__.py": {},
    "contextual-repr-analysis-master/scripts/allennlp_elmo_parameter_shift.py": {
        "main": {
            "name": "main",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "contextual-repr-analysis-master/scripts/calypso_elmo_parameter_shift.py": {
        "main": {
            "name": "main",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "contextual-repr-analysis-master/scripts/combine_elmo_hdf5.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "contextual-repr-analysis-master/scripts/evaluate_with_beaker.py": {
        "main": {
            "name": "main",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "param_file": [
                    "str",
                    "List[str]",
                    "TextIO"
                ],
                "args": []
            }
        }
    },
    "contextual-repr-analysis-master/scripts/generate_openai_transformer_embeddings.py": {
        "main": {
            "name": "main",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "input_path": [
                    "str"
                ],
                "output_path": [
                    "str"
                ],
                "output_format": [
                    "Text",
                    "str",
                    "Set[int]",
                    "bool",
                    "Optional[str]"
                ],
                "model_path": [
                    "Text",
                    "str",
                    "int"
                ],
                "batch_size": [
                    "int",
                    "bool",
                    "str",
                    "float"
                ],
                "cuda_device": [
                    "int",
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "List[str]",
                    "str"
                ],
                "forget_sentences": [
                    "bool",
                    "str"
                ],
                "use_sentence_keys": [
                    "bool",
                    "int",
                    "Tuple",
                    "Tuple[int,int,bool]",
                    "str",
                    "bytes"
                ]
            }
        },
        "embed_sentences": {
            "name": "embed_sentences",
            "location": 150,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "indexer": [
                    "str",
                    "bytes"
                ],
                "transformer": [
                    "int",
                    "bool",
                    "List[float]",
                    "List[str]",
                    "Optional[int]",
                    "str",
                    "float"
                ],
                "sentences": [
                    "int",
                    "str",
                    "bool"
                ],
                "output_format": [
                    "str",
                    "bool",
                    "List[str]",
                    "List"
                ],
                "batch_size": [
                    "int",
                    "str",
                    "bool"
                ],
                "cuda_device": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/scripts/get_config_sentences.py": {
        "main": {
            "name": "main",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "contextual-repr-analysis-master/scripts/get_elmo_scalar_weights.py": {
        "main": {
            "name": "main",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_scalar_weights_from_elmo_token_embedder": {
            "name": "get_scalar_weights_from_elmo_token_embedder",
            "location": 58,
            "return": [
                "Dict[(str, Dict[(str, Any)])]"
            ],
            "arguments": {
                "elmo_token_embedder": [
                    "str",
                    "List[int]",
                    "Dict[int,str]"
                ]
            }
        },
        "get_scalar_weights_from_elmo": {
            "name": "get_scalar_weights_from_elmo",
            "location": 66,
            "return": [
                "Dict[(str, Dict[(str, Any)])]"
            ],
            "arguments": {
                "elmo_module": [
                    "str",
                    "Dict[str,Any]",
                    "Callable"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/scripts/subsample_1b_benchmark.py": {
        "main": {
            "name": "main",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "contextual-repr-analysis-master/tests/__init__.py": {},
    "contextual-repr-analysis-master/tests/common/util_test.py": {
        "TestUtil.test_get_text_mask_from_representations": {
            "name": "test_get_text_mask_from_representations",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUtil.test_pad_contextualizer_output": {
            "name": "test_pad_contextualizer_output",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "contextual-repr-analysis-master/tests/common/__init__.py": {},
    "contextual-repr-analysis-master/tests/contextualizers/elmo_contextualizer_test.py": {
        "TestElmoContextualizer.test_elmo_contextualizer_normal": {
            "name": "test_elmo_contextualizer_normal",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestElmoContextualizer.test_elmo_contextualizer_raises_error_2_output_reps": {
            "name": "test_elmo_contextualizer_raises_error_2_output_reps",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestElmoContextualizer.test_elmo_contextualizer_with_grad": {
            "name": "test_elmo_contextualizer_with_grad",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestElmoContextualizer.test_elmo_contextualizer_without_grad": {
            "name": "test_elmo_contextualizer_without_grad",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestElmoContextualizer.test_elmo_contextualizer_with_layer_num_and_grad": {
            "name": "test_elmo_contextualizer_with_layer_num_and_grad",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestElmoContextualizer.test_elmo_contextualizer_with_layer_num_and_without_grad": {
            "name": "test_elmo_contextualizer_with_layer_num_and_without_grad",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestElmoContextualizer.test_elmo_contextualizer_with_grad_frozen_scalar_mix": {
            "name": "test_elmo_contextualizer_with_grad_frozen_scalar_mix",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestElmoContextualizer.test_elmo_contextualizer_without_grad_frozen_scalar_mix": {
            "name": "test_elmo_contextualizer_without_grad_frozen_scalar_mix",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "contextual-repr-analysis-master/tests/contextualizers/glove_contextualizer_test.py": {
        "TestGloveContextualizer.test_glove_contextualizer_default": {
            "name": "test_glove_contextualizer_default",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGloveContextualizer.test_glove_contextualizer_trainable": {
            "name": "test_glove_contextualizer_trainable",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGloveContextualizer.test_glove_contextualizer_frozen": {
            "name": "test_glove_contextualizer_frozen",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "contextual-repr-analysis-master/tests/contextualizers/precomputed_contextualizer_test.py": {
        "TestPrecomputedContextualizer.test_precomputed_contextualizer_all_elmo_layers": {
            "name": "test_precomputed_contextualizer_all_elmo_layers",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrecomputedContextualizer.test_precomputed_contextualizer_all_elmo_layers_first_half": {
            "name": "test_precomputed_contextualizer_all_elmo_layers_first_half",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrecomputedContextualizer.test_precomputed_contextualizer_all_elmo_layers_second_half": {
            "name": "test_precomputed_contextualizer_all_elmo_layers_second_half",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrecomputedContextualizer.test_precomputed_contextualizer_top_elmo_layers": {
            "name": "test_precomputed_contextualizer_top_elmo_layers",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrecomputedContextualizer.test_precomputed_contextualizer_scalar_mix": {
            "name": "test_precomputed_contextualizer_scalar_mix",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "contextual-repr-analysis-master/tests/contextualizers/scalar_mixed_precomputed_contextualizer_test.py": {
        "TestScalarMixedPrecomputedContextualizer.test_scalar_mixed_precomputed_contextualizer": {
            "name": "test_scalar_mixed_precomputed_contextualizer",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "contextual-repr-analysis-master/tests/contextualizers/__init__.py": {},
    "contextual-repr-analysis-master/tests/data/__init__.py": {},
    "contextual-repr-analysis-master/tests/data/dataset_readers/adposition_supersense_tagging_test.py": {
        "TestAdpositionSupersenseTaggingDatasetReader.test_read_from_file": {
            "name": "test_read_from_file",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "use_contextualizer": [
                    "str",
                    "bool",
                    "Set[str]"
                ],
                "include_raw_tokens": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "mode": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "TestAdpositionSupersenseTaggingDatasetReader.test_reproducible_with_and_without_contextualization": {
            "name": "test_reproducible_with_and_without_contextualization",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "int",
                    "Dict",
                    "bool"
                ],
                "mode": [
                    "int",
                    "Dict",
                    "bool"
                ],
                "include_raw_tokens": [
                    "int",
                    "Dict",
                    "bool"
                ],
                "max_instances": [
                    "int",
                    "Dict",
                    "bool"
                ]
            }
        },
        "TestAdpositionSupersenseTaggingDatasetReader.test_truncation": {
            "name": "test_truncation",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "bool",
                    "Callable",
                    "Optional[Mapping[str,Any]]",
                    "Mapping",
                    "List[Exception]",
                    "str",
                    "None",
                    "int"
                ],
                "use_contextualizer": [
                    "bool",
                    "Callable",
                    "List[str]",
                    "int"
                ],
                "include_raw_tokens": [
                    "bool",
                    "Callable",
                    "Optional[Mapping[str,Any]]",
                    "Mapping",
                    "List[Exception]",
                    "str",
                    "None",
                    "int"
                ],
                "mode": [
                    "bool",
                    "Callable",
                    "Optional[Mapping[str,Any]]",
                    "Mapping",
                    "List[Exception]",
                    "str",
                    "None",
                    "int"
                ],
                "max_instances": [
                    "bool",
                    "Callable",
                    "Optional[Mapping[str,Any]]",
                    "Mapping",
                    "List[Exception]",
                    "str",
                    "None",
                    "int"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/tests/data/dataset_readers/ccg_supertagging_test.py": {
        "TestCcgSupertaggingDatasetReader.test_read_from_file": {
            "name": "test_read_from_file",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "str"
                ],
                "use_contextualizer": [
                    "str",
                    "bytes",
                    "bool",
                    "Optional[bytes]",
                    "None"
                ]
            }
        },
        "TestCcgSupertaggingDatasetReader.test_reproducible_with_and_without_contextualization": {
            "name": "test_reproducible_with_and_without_contextualization",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_instances": [
                    "int",
                    "numpy.ndarray"
                ],
                "lazy": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "TestCcgSupertaggingDatasetReader.test_truncation": {
            "name": "test_truncation",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "bool"
                ],
                "use_contextualizer": [
                    "str",
                    "bool",
                    "Set[str]",
                    "Optional[bool]",
                    "None"
                ],
                "max_instances": [
                    "int",
                    "List",
                    "Dict[str,int]",
                    "str"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/tests/data/dataset_readers/conjunct_identification_test.py": {
        "TestConjunctIdentificationDatasetReader.test_read_from_file": {
            "name": "test_read_from_file",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "str"
                ],
                "use_contextualizer": [
                    "str",
                    "bytes",
                    "bool",
                    "Optional[bytes]",
                    "None"
                ]
            }
        },
        "TestConjunctIdentificationDatasetReader.test_reproducible_with_and_without_contextualization": {
            "name": "test_reproducible_with_and_without_contextualization",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_instances": [
                    "int",
                    "numpy.ndarray"
                ],
                "lazy": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "TestConjunctIdentificationDatasetReader.test_truncation": {
            "name": "test_truncation",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "bool"
                ],
                "use_contextualizer": [
                    "str",
                    "bool",
                    "Set[str]",
                    "Optional[bool]",
                    "None"
                ],
                "max_instances": [
                    "int",
                    "List",
                    "Dict[str,int]",
                    "str"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/tests/data/dataset_readers/conll2000_chunking_test.py": {
        "TestConll2000ChunkingDatasetReader.test_read_from_file": {
            "name": "test_read_from_file",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "str"
                ],
                "use_contextualizer": [
                    "str",
                    "bytes",
                    "bool",
                    "Optional[bytes]",
                    "None"
                ]
            }
        },
        "TestConll2000ChunkingDatasetReader.test_reproducible_with_and_without_contextualization": {
            "name": "test_reproducible_with_and_without_contextualization",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_instances": [
                    "int",
                    "numpy.ndarray"
                ],
                "lazy": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "TestConll2000ChunkingDatasetReader.test_truncation": {
            "name": "test_truncation",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "bool"
                ],
                "use_contextualizer": [
                    "str",
                    "bool",
                    "Set[str]",
                    "Optional[bool]",
                    "None"
                ],
                "max_instances": [
                    "int",
                    "List",
                    "Dict[str,int]",
                    "str"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/tests/data/dataset_readers/conll2003_ner_test.py": {
        "TestConll2003NERDatasetReader.test_read_from_file": {
            "name": "test_read_from_file",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "str",
                    "Callable",
                    "bool"
                ],
                "use_contextualizer": [
                    "str",
                    "List[str]"
                ],
                "label_encoding": [
                    "str",
                    "Callable",
                    "bool"
                ]
            }
        },
        "TestConll2003NERDatasetReader.test_reproducible_with_and_without_contextualization": {
            "name": "test_reproducible_with_and_without_contextualization",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_instances": [
                    "int",
                    "numpy.ndarray"
                ],
                "lazy": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "TestConll2003NERDatasetReader.test_truncation": {
            "name": "test_truncation",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "bool"
                ],
                "use_contextualizer": [
                    "str",
                    "bool",
                    "Set[str]",
                    "Optional[bool]",
                    "None"
                ],
                "max_instances": [
                    "int",
                    "List",
                    "Dict[str,int]",
                    "str"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/tests/data/dataset_readers/conllu_pos_test.py": {
        "TestConllUPOSDatasetReader.test_read_from_file": {
            "name": "test_read_from_file",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "str"
                ],
                "use_contextualizer": [
                    "str",
                    "bytes",
                    "bool",
                    "Optional[bytes]",
                    "None"
                ]
            }
        },
        "TestConllUPOSDatasetReader.test_reproducible_with_and_without_contextualization": {
            "name": "test_reproducible_with_and_without_contextualization",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "int",
                    "numpy.ndarray"
                ],
                "max_instances": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "TestConllUPOSDatasetReader.test_truncation": {
            "name": "test_truncation",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "bool"
                ],
                "use_contextualizer": [
                    "str",
                    "bool",
                    "Set[str]",
                    "Optional[bool]",
                    "None"
                ],
                "max_instances": [
                    "int",
                    "List",
                    "Dict[str,int]",
                    "str"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/tests/data/dataset_readers/conllx_pos_test.py": {
        "TestConllXPOSDatasetReader.test_read_from_file": {
            "name": "test_read_from_file",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "str"
                ],
                "use_contextualizer": [
                    "str",
                    "bytes",
                    "bool",
                    "Optional[bytes]",
                    "None"
                ]
            }
        },
        "TestConllXPOSDatasetReader.test_reproducible_with_and_without_contextualization": {
            "name": "test_reproducible_with_and_without_contextualization",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "int",
                    "numpy.ndarray"
                ],
                "max_instances": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "TestConllXPOSDatasetReader.test_truncation": {
            "name": "test_truncation",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "bool"
                ],
                "use_contextualizer": [
                    "str",
                    "bool",
                    "Set[str]",
                    "Optional[bool]",
                    "None"
                ],
                "max_instances": [
                    "int",
                    "List",
                    "Dict[str,int]",
                    "str"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/tests/data/dataset_readers/constituency_ancestor_prediction_test.py": {
        "TestConstituencyAncestorPredictionDatasetReader.test_read_from_file": {
            "name": "test_read_from_file",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "str"
                ],
                "use_contextualizer": [
                    "str",
                    "bytes",
                    "bool",
                    "Optional[bytes]",
                    "None"
                ],
                "ancestor": [
                    "str"
                ]
            }
        },
        "TestConstituencyAncestorPredictionDatasetReader.test_reproducible_with_and_without_contextualization": {
            "name": "test_reproducible_with_and_without_contextualization",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "int",
                    "numpy.ndarray"
                ],
                "max_instances": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "TestConstituencyAncestorPredictionDatasetReader.test_truncation": {
            "name": "test_truncation",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "int",
                    "List",
                    "float",
                    "allennlp.nn.Activation",
                    "allennlp.modules.Attention",
                    "bool"
                ],
                "use_contextualizer": [
                    "str",
                    "bool",
                    "Set[str]",
                    "Optional[bool]",
                    "None"
                ],
                "max_instances": [
                    "int",
                    "List[float]",
                    "Dict[str,int]",
                    "Dict",
                    "float"
                ],
                "ancestor": [
                    "int",
                    "List",
                    "float",
                    "allennlp.nn.Activation",
                    "allennlp.modules.Attention",
                    "bool"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/tests/data/dataset_readers/coreference_arc_prediction_test.py": {
        "TestCoreferenceArcPredictionDatasetReader.test_read_from_file": {
            "name": "test_read_from_file",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "str",
                    "bytes",
                    "List[str]",
                    "int"
                ],
                "use_contextualizer": [
                    "str",
                    "bool",
                    "List[str]",
                    "Dict"
                ],
                "include_raw_tokens": [
                    "str",
                    "bytes",
                    "List[str]",
                    "int"
                ]
            }
        },
        "TestCoreferenceArcPredictionDatasetReader.test_reproducible_with_and_without_contextualization": {
            "name": "test_reproducible_with_and_without_contextualization",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "int",
                    "bytes",
                    "Optional[int]",
                    "None"
                ],
                "include_raw_tokens": [
                    "int",
                    "bytes",
                    "Optional[int]",
                    "None"
                ],
                "max_instances": [
                    "int",
                    "bytes",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "TestCoreferenceArcPredictionDatasetReader.test_truncation": {
            "name": "test_truncation",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "int",
                    "List",
                    "str",
                    "bool"
                ],
                "use_contextualizer": [
                    "str",
                    "bool",
                    "Set[str]",
                    "Optional[bool]",
                    "None"
                ],
                "max_instances": [
                    "Dict[str,int]",
                    "str",
                    "List",
                    "List[int]",
                    "int",
                    "allennlp.nn.Activation"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/tests/data/dataset_readers/event_factuality_test.py": {
        "TestEventFactualityDatasetReader.test_read_from_file": {
            "name": "test_read_from_file",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "str"
                ],
                "use_contextualizer": [
                    "str",
                    "bool",
                    "List[str]",
                    "Dict"
                ],
                "include_raw_tokens": [
                    "str"
                ]
            }
        },
        "TestEventFactualityDatasetReader.test_reproducible_with_and_without_contextualization": {
            "name": "test_reproducible_with_and_without_contextualization",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "str",
                    "Type",
                    "bool"
                ],
                "include_raw_tokens": [
                    "str",
                    "Type",
                    "bool"
                ],
                "max_instances": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "TestEventFactualityDatasetReader.test_truncation": {
            "name": "test_truncation",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "Optional[bool]",
                    "List[str]",
                    "bool",
                    "None"
                ],
                "use_contextualizer": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "include_raw_tokens": [
                    "Optional[bool]",
                    "List[str]",
                    "bool",
                    "None"
                ],
                "max_instances": [
                    "float"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/tests/data/dataset_readers/grammatical_error_correction_test.py": {
        "TestGrammaticalErrorCorrectionDatasetReader.test_read_from_file": {
            "name": "test_read_from_file",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "str"
                ],
                "use_contextualizer": [
                    "str",
                    "bytes",
                    "bool",
                    "Optional[bytes]",
                    "None"
                ]
            }
        },
        "TestGrammaticalErrorCorrectionDatasetReader.test_reproducible_with_and_without_contextualization": {
            "name": "test_reproducible_with_and_without_contextualization",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "int",
                    "numpy.ndarray"
                ],
                "max_instances": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "TestGrammaticalErrorCorrectionDatasetReader.test_truncation": {
            "name": "test_truncation",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "str",
                    "int",
                    "IO",
                    "IO[bytes]",
                    "bool"
                ],
                "use_contextualizer": [
                    "str",
                    "bool",
                    "Set[str]",
                    "Optional[bool]",
                    "None"
                ],
                "max_instances": [
                    "int",
                    "str",
                    "float",
                    "IO[bytes]",
                    "IO"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/tests/data/dataset_readers/language_modeling_test.py": {
        "TestLanguageModelingDatasetReader.test_read_from_file": {
            "name": "test_read_from_file",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "str",
                    "int"
                ],
                "use_contextualizer": [
                    "str",
                    "bytes",
                    "bool",
                    "Optional[bytes]",
                    "None"
                ],
                "backward": [
                    "str",
                    "int"
                ]
            }
        },
        "TestLanguageModelingDatasetReader.test_max_length": {
            "name": "test_max_length",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "int",
                    "str",
                    "float",
                    "None",
                    "Union[str,int]",
                    "Optional[int]"
                ],
                "use_contextualizer": [
                    "str",
                    "bool",
                    "Set[str]",
                    "Optional[bool]",
                    "None"
                ],
                "backward": [
                    "int",
                    "str",
                    "float",
                    "None",
                    "Union[str,int]",
                    "Optional[int]"
                ],
                "max_length": [
                    "int",
                    "Dict[str,int]",
                    "Tuple",
                    "float"
                ]
            }
        },
        "TestLanguageModelingDatasetReader.test_reproducible_with_and_without_contextualization": {
            "name": "test_reproducible_with_and_without_contextualization",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [],
                "max_instances": [],
                "backward": []
            }
        },
        "TestLanguageModelingDatasetReader.test_truncation": {
            "name": "test_truncation",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "int",
                    "allennlp.nn.Activation"
                ],
                "use_contextualizer": [
                    "str",
                    "bool",
                    "Set[str]",
                    "Optional[bool]",
                    "None"
                ],
                "max_instances": [
                    "str",
                    "Dict[str,int]",
                    "List[int]",
                    "float",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "backward": [
                    "int",
                    "allennlp.nn.Activation"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/tests/data/dataset_readers/semantic_dependency_arc_classification_test.py": {
        "TestSemanticDependencyArcClassificationDatasetReader.test_read_from_file": {
            "name": "test_read_from_file",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "str",
                    "bytes",
                    "List[str]",
                    "int"
                ],
                "use_contextualizer": [
                    "str",
                    "bool",
                    "List[str]",
                    "Dict"
                ],
                "include_raw_tokens": [
                    "str",
                    "bytes",
                    "List[str]",
                    "int"
                ]
            }
        },
        "TestSemanticDependencyArcClassificationDatasetReader.test_read_from_file_undirected": {
            "name": "test_read_from_file_undirected",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "str",
                    "bool"
                ],
                "include_raw_tokens": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestSemanticDependencyArcClassificationDatasetReader.test_reproducible_with_and_without_contextualization": {
            "name": "test_reproducible_with_and_without_contextualization",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "int",
                    "str",
                    "bool"
                ],
                "directed": [
                    "int",
                    "str",
                    "bool"
                ],
                "include_raw_tokens": [
                    "int",
                    "str",
                    "bool"
                ],
                "max_instances": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "TestSemanticDependencyArcClassificationDatasetReader.test_truncation": {
            "name": "test_truncation",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "bool"
                ],
                "use_contextualizer": [
                    "bool",
                    "str",
                    "List"
                ],
                "directed": [
                    "bool"
                ],
                "include_raw_tokens": [
                    "bool"
                ],
                "max_instances": [
                    "bool"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/tests/data/dataset_readers/semantic_dependency_arc_prediction_test.py": {
        "TestSemanticDependencyArcPredictionDatasetReader.test_read_from_file_balanced_negative_sampling": {
            "name": "test_read_from_file_balanced_negative_sampling",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "str",
                    "Callable",
                    "bool",
                    "List[str]",
                    "int"
                ],
                "use_contextualizer": [
                    "str",
                    "Set[str]",
                    "bool"
                ],
                "include_raw_tokens": [
                    "str",
                    "Callable",
                    "bool",
                    "List[str]",
                    "int"
                ]
            }
        },
        "TestSemanticDependencyArcPredictionDatasetReader.test_read_from_file_all_negative_sampling": {
            "name": "test_read_from_file_all_negative_sampling",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "str",
                    "bool",
                    "Callable",
                    "None",
                    "int",
                    "Optional[bool]"
                ],
                "include_raw_tokens": [
                    "str",
                    "bool",
                    "Callable",
                    "None",
                    "int",
                    "Optional[bool]"
                ]
            }
        },
        "TestSemanticDependencyArcPredictionDatasetReader.test_reproducible_with_and_without_contextualization": {
            "name": "test_reproducible_with_and_without_contextualization",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "str",
                    "Optional[str]",
                    "None",
                    "IO[Any]",
                    "IO"
                ],
                "include_raw_tokens": [
                    "str",
                    "Optional[str]",
                    "None",
                    "IO[Any]",
                    "IO"
                ],
                "max_instances": [
                    "str",
                    "Optional[str]",
                    "None",
                    "IO[Any]",
                    "IO"
                ]
            }
        },
        "TestSemanticDependencyArcPredictionDatasetReader.test_truncation": {
            "name": "test_truncation",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "float",
                    "str"
                ],
                "use_contextualizer": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "include_raw_tokens": [
                    "float",
                    "str"
                ],
                "max_instances": [
                    "float",
                    "str"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/tests/data/dataset_readers/semantic_tagging_test.py": {
        "TestSemanticTaggingDatasetReader.test_read_from_file": {
            "name": "test_read_from_file",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "str"
                ],
                "use_contextualizer": [
                    "str",
                    "bytes",
                    "bool",
                    "Optional[bytes]",
                    "None"
                ]
            }
        },
        "TestSemanticTaggingDatasetReader.test_reproducible_with_and_without_contextualization": {
            "name": "test_reproducible_with_and_without_contextualization",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "int",
                    "numpy.ndarray"
                ],
                "max_instances": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "TestSemanticTaggingDatasetReader.test_truncation": {
            "name": "test_truncation",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "bool"
                ],
                "use_contextualizer": [
                    "str",
                    "bool",
                    "Set[str]",
                    "Optional[bool]",
                    "None"
                ],
                "max_instances": [
                    "int",
                    "List",
                    "Dict[str,int]",
                    "str"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/tests/data/dataset_readers/syntactic_dependency_arc_classification_test.py": {
        "TestSyntacticDependencyArcClassificationDatasetReader.test_read_from_file": {
            "name": "test_read_from_file",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "str",
                    "bytes",
                    "List[str]",
                    "int"
                ],
                "use_contextualizer": [
                    "str",
                    "bool",
                    "List[str]",
                    "Dict"
                ],
                "include_raw_tokens": [
                    "str",
                    "bytes",
                    "List[str]",
                    "int"
                ]
            }
        },
        "TestSyntacticDependencyArcClassificationDatasetReader.test_read_from_file_undirected": {
            "name": "test_read_from_file_undirected",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "str",
                    "bool"
                ],
                "include_raw_tokens": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestSyntacticDependencyArcClassificationDatasetReader.test_reproducible_with_and_without_contextualization": {
            "name": "test_reproducible_with_and_without_contextualization",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "Dict[str,int]",
                    "int",
                    "Set",
                    "numpy.ndarray"
                ],
                "directed": [
                    "Dict[str,int]",
                    "int",
                    "Set",
                    "numpy.ndarray"
                ],
                "include_raw_tokens": [
                    "Dict[str,int]",
                    "int",
                    "Set",
                    "numpy.ndarray"
                ],
                "max_instances": [
                    "Dict[str,int]",
                    "int",
                    "Set",
                    "numpy.ndarray"
                ]
            }
        },
        "TestSyntacticDependencyArcClassificationDatasetReader.test_truncation": {
            "name": "test_truncation",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "bool"
                ],
                "use_contextualizer": [
                    "bool",
                    "str",
                    "List"
                ],
                "directed": [
                    "bool"
                ],
                "include_raw_tokens": [
                    "bool"
                ],
                "max_instances": [
                    "bool"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/tests/data/dataset_readers/syntactic_dependency_arc_prediction_test.py": {
        "TestSyntacticDependencyArcPredictionDatasetReader.test_read_from_file_balanced_negative_sampling": {
            "name": "test_read_from_file_balanced_negative_sampling",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "str",
                    "Callable",
                    "bool",
                    "List[str]",
                    "int"
                ],
                "use_contextualizer": [
                    "str",
                    "Set[str]",
                    "bool"
                ],
                "include_raw_tokens": [
                    "str",
                    "Callable",
                    "bool",
                    "List[str]",
                    "int"
                ]
            }
        },
        "TestSyntacticDependencyArcPredictionDatasetReader.test_read_from_file_all_negative_sampling": {
            "name": "test_read_from_file_all_negative_sampling",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "str",
                    "bool",
                    "Callable",
                    "None",
                    "int",
                    "Optional[bool]"
                ],
                "include_raw_tokens": [
                    "str",
                    "bool",
                    "Callable",
                    "None",
                    "int",
                    "Optional[bool]"
                ]
            }
        },
        "TestSyntacticDependencyArcPredictionDatasetReader.test_reproducible_with_and_without_contextualization": {
            "name": "test_reproducible_with_and_without_contextualization",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "str",
                    "int"
                ],
                "include_raw_tokens": [
                    "str",
                    "int"
                ],
                "max_instances": [
                    "str",
                    "int"
                ]
            }
        },
        "TestSyntacticDependencyArcPredictionDatasetReader.test_truncation": {
            "name": "test_truncation",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "float",
                    "str"
                ],
                "use_contextualizer": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "include_raw_tokens": [
                    "float",
                    "str"
                ],
                "max_instances": [
                    "float",
                    "str"
                ]
            }
        }
    },
    "contextual-repr-analysis-master/tests/data/dataset_readers/__init__.py": {},
    "contextual-repr-analysis-master/tests/data/fields/__init__.py": {},
    "contextual-repr-analysis-master/tests/models/__init__.py": {},
    "contextual-repr-analysis-master/tests/models/pairwise_tagger/coreference_arc_prediction_test.py": {
        "TestCoreferenceArcPrediction.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCoreferenceArcPrediction.test_pairwise_tagger_can_train_save_and_load": {
            "name": "test_pairwise_tagger_can_train_save_and_load",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCoreferenceArcPrediction.test_pairwise_tagger_with_contextualizer_can_train_save_and_load": {
            "name": "test_pairwise_tagger_with_contextualizer_can_train_save_and_load",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCoreferenceArcPrediction.test_batch_predictions_are_consistent": {
            "name": "test_batch_predictions_are_consistent",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCoreferenceArcPrediction.test_forward_pass_runs_correctly": {
            "name": "test_forward_pass_runs_correctly",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCoreferenceArcPrediction.test_no_input_representations_throws_error": {
            "name": "test_no_input_representations_throws_error",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "contextual-repr-analysis-master/tests/models/pairwise_tagger/semantic_dependency_arc_classification_test.py": {
        "TestSemanticDependencyArcClassification.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSemanticDependencyArcClassification.test_pairwise_tagger_can_train_save_and_load": {
            "name": "test_pairwise_tagger_can_train_save_and_load",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSemanticDependencyArcClassification.test_pairwise_tagger_with_contextualizer_can_train_save_and_load": {
            "name": "test_pairwise_tagger_with_contextualizer_can_train_save_and_load",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSemanticDependencyArcClassification.test_batch_classifications_are_consistent": {
            "name": "test_batch_classifications_are_consistent",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSemanticDependencyArcClassification.test_forward_pass_runs_correctly": {
            "name": "test_forward_pass_runs_correctly",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSemanticDependencyArcClassification.test_mismatching_dimensions_throws_configuration_error": {
            "name": "test_mismatching_dimensions_throws_configuration_error",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSemanticDependencyArcClassification.test_no_input_representations_throws_error": {
            "name": "test_no_input_representations_throws_error",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "contextual-repr-analysis-master/tests/models/pairwise_tagger/semantic_dependency_arc_prediction_test.py": {
        "TestSemanticDependencyArcPrediction.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSemanticDependencyArcPrediction.test_pairwise_tagger_can_train_save_and_load": {
            "name": "test_pairwise_tagger_can_train_save_and_load",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSemanticDependencyArcPrediction.test_pairwise_tagger_with_contextualizer_can_train_save_and_load": {
            "name": "test_pairwise_tagger_with_contextualizer_can_train_save_and_load",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSemanticDependencyArcPrediction.test_batch_predictions_are_consistent": {
            "name": "test_batch_predictions_are_consistent",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSemanticDependencyArcPrediction.test_forward_pass_runs_correctly": {
            "name": "test_forward_pass_runs_correctly",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSemanticDependencyArcPrediction.test_no_input_representations_throws_error": {
            "name": "test_no_input_representations_throws_error",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "contextual-repr-analysis-master/tests/models/pairwise_tagger/syntactic_dependency_arc_classification_test.py": {
        "TestSyntacticDependencyArcClassification.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSyntacticDependencyArcClassification.test_pairwise_tagger_can_train_save_and_load": {
            "name": "test_pairwise_tagger_can_train_save_and_load",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSyntacticDependencyArcClassification.test_pairwise_tagger_with_contextualizer_can_train_save_and_load": {
            "name": "test_pairwise_tagger_with_contextualizer_can_train_save_and_load",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSyntacticDependencyArcClassification.test_batch_predictions_are_consistent": {
            "name": "test_batch_predictions_are_consistent",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSyntacticDependencyArcClassification.test_forward_pass_runs_correctly": {
            "name": "test_forward_pass_runs_correctly",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSyntacticDependencyArcClassification.test_no_input_representations_throws_error": {
            "name": "test_no_input_representations_throws_error",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "contextual-repr-analysis-master/tests/models/pairwise_tagger/syntactic_dependency_arc_prediction_test.py": {
        "TestSyntacticDependencyArcPrediction.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSyntacticDependencyArcPrediction.test_pairwise_tagger_can_train_save_and_load": {
            "name": "test_pairwise_tagger_can_train_save_and_load",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSyntacticDependencyArcPrediction.test_pairwise_tagger_with_contextualizer_can_train_save_and_load": {
            "name": "test_pairwise_tagger_with_contextualizer_can_train_save_and_load",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSyntacticDependencyArcPrediction.test_batch_predictions_are_consistent": {
            "name": "test_batch_predictions_are_consistent",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSyntacticDependencyArcPrediction.test_forward_pass_runs_correctly": {
            "name": "test_forward_pass_runs_correctly",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSyntacticDependencyArcPrediction.test_mismatching_dimensions_throws_configuration_error": {
            "name": "test_mismatching_dimensions_throws_configuration_error",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSyntacticDependencyArcPrediction.test_no_input_representations_throws_error": {
            "name": "test_no_input_representations_throws_error",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "contextual-repr-analysis-master/tests/models/pairwise_tagger/transfer_from_pretrained_file_test.py": {
        "TestPairwiseTaggerTransferFromPretrainedFile.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPairwiseTaggerTransferFromPretrainedFile.test_tagger_transfer_encoder": {
            "name": "test_tagger_transfer_encoder",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPairwiseTaggerTransferFromPretrainedFile.test_tagger_transfer_contextualizer": {
            "name": "test_tagger_transfer_contextualizer",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPairwiseTaggerTransferFromPretrainedFile.test_tagger_transfer_encoder_and_contextualizer": {
            "name": "test_tagger_transfer_encoder_and_contextualizer",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "contextual-repr-analysis-master/tests/models/pairwise_tagger/__init__.py": {},
    "contextual-repr-analysis-master/tests/models/selective_regressor/event_factuality_test.py": {
        "TestEventFactualityRegression.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEventFactualityRegression.test_selective_regressor_can_train_save_and_load": {
            "name": "test_selective_regressor_can_train_save_and_load",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEventFactualityRegression.test_selective_regressor_with_contextualizer_can_train_save_and_load": {
            "name": "test_selective_regressor_with_contextualizer_can_train_save_and_load",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEventFactualityRegression.test_selective_regressor_mlp_train_save_and_load": {
            "name": "test_selective_regressor_mlp_train_save_and_load",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEventFactualityRegression.test_batch_predictions_are_consistent": {
            "name": "test_batch_predictions_are_consistent",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEventFactualityRegression.test_no_input_representations_throws_error": {
            "name": "test_no_input_representations_throws_error",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "contextual-repr-analysis-master/tests/models/selective_regressor/transfer_from_pretrained_file_test.py": {
        "TestSelectiveRegressorTransferFromPretrainedFile.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSelectiveRegressorTransferFromPretrainedFile.test_tagger_transfer_encoder": {
            "name": "test_tagger_transfer_encoder",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSelectiveRegressorTransferFromPretrainedFile.test_tagger_transfer_contextualizer": {
            "name": "test_tagger_transfer_contextualizer",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSelectiveRegressorTransferFromPretrainedFile.test_tagger_transfer_encoder_and_contextualizer": {
            "name": "test_tagger_transfer_encoder_and_contextualizer",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "contextual-repr-analysis-master/tests/models/selective_regressor/__init__.py": {},
    "contextual-repr-analysis-master/tests/models/selective_tagger/adposition_supersense_tagging_test.py": {
        "TestAdpositionSupersenseTagging.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAdpositionSupersenseTagging.test_selective_tagger_role_can_train_save_and_load": {
            "name": "test_selective_tagger_role_can_train_save_and_load",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAdpositionSupersenseTagging.test_selective_tagger_role_with_contextualizer_can_train_save_and_load": {
            "name": "test_selective_tagger_role_with_contextualizer_can_train_save_and_load",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAdpositionSupersenseTagging.test_selective_tagger_function_can_train_save_and_load": {
            "name": "test_selective_tagger_function_can_train_save_and_load",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAdpositionSupersenseTagging.test_selective_tagger_mlp_can_train_save_and_load": {
            "name": "test_selective_tagger_mlp_can_train_save_and_load",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAdpositionSupersenseTagging.test_batch_classifications_are_consistent": {
            "name": "test_batch_classifications_are_consistent",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAdpositionSupersenseTagging.test_forward_pass_runs_correctly": {
            "name": "test_forward_pass_runs_correctly",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAdpositionSupersenseTagging.test_mismatching_dimensions_throws_configuration_error": {
            "name": "test_mismatching_dimensions_throws_configuration_error",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAdpositionSupersenseTagging.test_no_input_representations_throws_error": {
            "name": "test_no_input_representations_throws_error",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "contextual-repr-analysis-master/tests/models/selective_tagger/transfer_from_pretrained_file_test.py": {
        "TestSelectiveTaggerTransferFromPretrainedFile.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSelectiveTaggerTransferFromPretrainedFile.test_tagger_transfer_encoder": {
            "name": "test_tagger_transfer_encoder",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSelectiveTaggerTransferFromPretrainedFile.test_tagger_transfer_contextualizer": {
            "name": "test_tagger_transfer_contextualizer",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSelectiveTaggerTransferFromPretrainedFile.test_tagger_transfer_encoder_and_contextualizer": {
            "name": "test_tagger_transfer_encoder_and_contextualizer",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "contextual-repr-analysis-master/tests/models/selective_tagger/__init__.py": {},
    "contextual-repr-analysis-master/tests/models/tagger/ccg_supertagging_test.py": {
        "TestCCGSupertagging.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCCGSupertagging.test_simple_tagger_can_train_save_and_load": {
            "name": "test_simple_tagger_can_train_save_and_load",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCCGSupertagging.test_simple_tagger_with_contextualizer_can_train_save_and_load": {
            "name": "test_simple_tagger_with_contextualizer_can_train_save_and_load",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCCGSupertagging.test_batch_predictions_are_consistent": {
            "name": "test_batch_predictions_are_consistent",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCCGSupertagging.test_forward_pass_runs_correctly": {
            "name": "test_forward_pass_runs_correctly",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCCGSupertagging.test_no_input_representations_throws_error": {
            "name": "test_no_input_representations_throws_error",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "contextual-repr-analysis-master/tests/models/tagger/conjunct_identification_test.py": {
        "TestConjunctIdentificationModel.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConjunctIdentificationModel.test_simple_tagger_can_train_save_and_load": {
            "name": "test_simple_tagger_can_train_save_and_load",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConjunctIdentificationModel.test_simple_tagger_with_contextualizer_can_train_save_and_load": {
            "name": "test_simple_tagger_with_contextualizer_can_train_save_and_load",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConjunctIdentificationModel.test_batch_predictions_are_consistent": {
            "name": "test_batch_predictions_are_consistent",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConjunctIdentificationModel.test_forward_pass_runs_correctly": {
            "name": "test_forward_pass_runs_correctly",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConjunctIdentificationModel.test_no_input_representations_throws_error": {
            "name": "test_no_input_representations_throws_error",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "contextual-repr-analysis-master/tests/models/tagger/conll2000_chunking_test.py": {
        "TestConll2000Chunking.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConll2000Chunking.test_simple_tagger_can_train_save_and_load": {
            "name": "test_simple_tagger_can_train_save_and_load",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConll2000Chunking.test_simple_tagger_with_contextualizer_can_train_save_and_load": {
            "name": "test_simple_tagger_with_contextualizer_can_train_save_and_load",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConll2000Chunking.test_batch_predictions_are_consistent": {
            "name": "test_batch_predictions_are_consistent",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConll2000Chunking.test_forward_pass_runs_correctly": {
            "name": "test_forward_pass_runs_correctly",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConll2000Chunking.test_mismatching_dimensions_throws_configuration_error": {
            "name": "test_mismatching_dimensions_throws_configuration_error",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConll2000Chunking.test_no_input_representations_throws_error": {
            "name": "test_no_input_representations_throws_error",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "contextual-repr-analysis-master/tests/models/tagger/conll2003_ner_test.py": {
        "TestConll2003NER.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConll2003NER.test_simple_tagger_can_train_save_and_load": {
            "name": "test_simple_tagger_can_train_save_and_load",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConll2003NER.test_simple_tagger_with_contextualizer_can_train_save_and_load": {
            "name": "test_simple_tagger_with_contextualizer_can_train_save_and_load",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConll2003NER.test_simple_crf_tagger_can_train_save_and_load": {
            "name": "test_simple_crf_tagger_can_train_save_and_load",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConll2003NER.test_batch_predictions_are_consistent": {
            "name": "test_batch_predictions_are_consistent",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConll2003NER.test_forward_pass_runs_correctly": {
            "name": "test_forward_pass_runs_correctly",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConll2003NER.test_no_input_representations_throws_error": {
            "name": "test_no_input_representations_throws_error",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "contextual-repr-analysis-master/tests/models/tagger/conllu_pos_tagging_test.py": {
        "TestConllUPosTagging.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConllUPosTagging.test_simple_tagger_can_train_save_and_load": {
            "name": "test_simple_tagger_can_train_save_and_load",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConllUPosTagging.test_simple_tagger_with_contextualizer_can_train_save_and_load": {
            "name": "test_simple_tagger_with_contextualizer_can_train_save_and_load",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConllUPosTagging.test_batch_predictions_are_consistent": {
            "name": "test_batch_predictions_are_consistent",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConllUPosTagging.test_forward_pass_runs_correctly": {
            "name": "test_forward_pass_runs_correctly",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConllUPosTagging.test_no_input_representations_throws_error": {
            "name": "test_no_input_representations_throws_error",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "contextual-repr-analysis-master/tests/models/tagger/conllx_pos_tagging_test.py": {
        "TestConllXPosTagging.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConllXPosTagging.test_simple_tagger_can_train_save_and_load": {
            "name": "test_simple_tagger_can_train_save_and_load",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConllXPosTagging.test_simple_tagger_with_contextualizer_can_train_save_and_load": {
            "name": "test_simple_tagger_with_contextualizer_can_train_save_and_load",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConllXPosTagging.test_batch_predictions_are_consistent": {
            "name": "test_batch_predictions_are_consistent",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConllXPosTagging.test_forward_pass_runs_correctly": {
            "name": "test_forward_pass_runs_correctly",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConllXPosTagging.test_no_input_representations_throws_error": {
            "name": "test_no_input_representations_throws_error",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "contextual-repr-analysis-master/tests/models/tagger/constituency_ancestor_prediction_test.py": {
        "TestConstituencyParentPrediction.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConstituencyParentPrediction.test_simple_tagger_can_train_save_and_load": {
            "name": "test_simple_tagger_can_train_save_and_load",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConstituencyParentPrediction.test_simple_tagger_with_contextualizer_can_train_save_and_load": {
            "name": "test_simple_tagger_with_contextualizer_can_train_save_and_load",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConstituencyParentPrediction.test_batch_predictions_are_consistent": {
            "name": "test_batch_predictions_are_consistent",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConstituencyParentPrediction.test_forward_pass_runs_correctly": {
            "name": "test_forward_pass_runs_correctly",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConstituencyParentPrediction.test_no_input_representations_throws_error": {
            "name": "test_no_input_representations_throws_error",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConstituencyGrandparentPrediction.setUp": {
            "name": "setUp",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConstituencyGrandparentPrediction.test_simple_tagger_can_train_save_and_load": {
            "name": "test_simple_tagger_can_train_save_and_load",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConstituencyGrandparentPrediction.test_batch_predictions_are_consistent": {
            "name": "test_batch_predictions_are_consistent",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConstituencyGrandparentPrediction.test_forward_pass_runs_correctly": {
            "name": "test_forward_pass_runs_correctly",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConstituencyGreatgrandparentPrediction.setUp": {
            "name": "setUp",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConstituencyGreatgrandparentPrediction.test_simple_tagger_can_train_save_and_load": {
            "name": "test_simple_tagger_can_train_save_and_load",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConstituencyGreatgrandparentPrediction.test_batch_predictions_are_consistent": {
            "name": "test_batch_predictions_are_consistent",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConstituencyGreatgrandparentPrediction.test_forward_pass_runs_correctly": {
            "name": "test_forward_pass_runs_correctly",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConstituencyGreatgrandparentPrediction.test_mismatching_dimensions_throws_configuration_error": {
            "name": "test_mismatching_dimensions_throws_configuration_error",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "contextual-repr-analysis-master/tests/models/tagger/grammatical_error_correction_test.py": {
        "TestGrammaticalErrorCorrection.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGrammaticalErrorCorrection.test_simple_tagger_can_train_save_and_load": {
            "name": "test_simple_tagger_can_train_save_and_load",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGrammaticalErrorCorrection.test_simple_tagger_with_contextualizer_can_train_save_and_load": {
            "name": "test_simple_tagger_with_contextualizer_can_train_save_and_load",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGrammaticalErrorCorrection.test_batch_predictions_are_consistent": {
            "name": "test_batch_predictions_are_consistent",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGrammaticalErrorCorrection.test_forward_pass_runs_correctly": {
            "name": "test_forward_pass_runs_correctly",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGrammaticalErrorCorrection.test_no_input_representations_throws_error": {
            "name": "test_no_input_representations_throws_error",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "contextual-repr-analysis-master/tests/models/tagger/language_modeling_test.py": {
        "TestLanguageModel.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLanguageModel.test_simple_tagger_forward_can_train_save_and_load": {
            "name": "test_simple_tagger_forward_can_train_save_and_load",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLanguageModel.test_simple_tagger_backward_can_train_save_and_load": {
            "name": "test_simple_tagger_backward_can_train_save_and_load",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLanguageModel.test_batch_predictions_are_consistent": {
            "name": "test_batch_predictions_are_consistent",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLanguageModel.test_simple_tagger_with_forward_contextualizer_can_train_save_and_load": {
            "name": "test_simple_tagger_with_forward_contextualizer_can_train_save_and_load",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLanguageModel.test_simple_tagger_with_backward_contextualizer_can_train_save_and_load": {
            "name": "test_simple_tagger_with_backward_contextualizer_can_train_save_and_load",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLanguageModel.test_forward_pass_runs_correctly": {
            "name": "test_forward_pass_runs_correctly",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLanguageModel.test_no_input_representations_throws_error": {
            "name": "test_no_input_representations_throws_error",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "contextual-repr-analysis-master/tests/models/tagger/semantic_tagging_test.py": {
        "TestSemanticTagging.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSemanticTagging.test_simple_tagger_can_train_save_and_load": {
            "name": "test_simple_tagger_can_train_save_and_load",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSemanticTagging.test_batch_predictions_are_consistent": {
            "name": "test_batch_predictions_are_consistent",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSemanticTagging.test_simple_tagger_with_contextualizer_can_train_save_and_load": {
            "name": "test_simple_tagger_with_contextualizer_can_train_save_and_load",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSemanticTagging.test_forward_pass_runs_correctly": {
            "name": "test_forward_pass_runs_correctly",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSemanticTagging.test_mismatching_dimensions_throws_configuration_error": {
            "name": "test_mismatching_dimensions_throws_configuration_error",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSemanticTagging.test_no_input_representations_throws_error": {
            "name": "test_no_input_representations_throws_error",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "contextual-repr-analysis-master/tests/models/tagger/transfer_from_pretrained_file_test.py": {
        "TestTaggerTransferFromPretrainedFile.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTaggerTransferFromPretrainedFile.test_tagger_transfer_encoder": {
            "name": "test_tagger_transfer_encoder",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTaggerTransferFromPretrainedFile.test_tagger_transfer_contextualizer": {
            "name": "test_tagger_transfer_contextualizer",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTaggerTransferFromPretrainedFile.test_tagger_transfer_encoder_and_contextualizer": {
            "name": "test_tagger_transfer_encoder_and_contextualizer",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "contextual-repr-analysis-master/tests/models/word_conditional_majority_pairwise_tagger/word_conditional_coreference_arc_prediction_test.py": {
        "TestWordConditionalCoreferenceArcPrediction.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWordConditionalCoreferenceArcPrediction.test_pairwise_tagger_can_train_save_and_load": {
            "name": "test_pairwise_tagger_can_train_save_and_load",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWordConditionalCoreferenceArcPrediction.test_batch_predictions_are_consistent": {
            "name": "test_batch_predictions_are_consistent",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWordConditionalCoreferenceArcPrediction.test_forward_pass_runs_correctly": {
            "name": "test_forward_pass_runs_correctly",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "contextual-repr-analysis-master/tests/models/word_conditional_majority_pairwise_tagger/word_conditional_semantic_dependency_arc_classification.py": {
        "TestWordConditionalSemanticDependencyArcClassification.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWordConditionalSemanticDependencyArcClassification.test_pairwise_tagger_can_train_save_and_load": {
            "name": "test_pairwise_tagger_can_train_save_and_load",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWordConditionalSemanticDependencyArcClassification.test_batch_predictions_are_consistent": {
            "name": "test_batch_predictions_are_consistent",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWordConditionalSemanticDependencyArcClassification.test_forward_pass_runs_correctly": {
            "name": "test_forward_pass_runs_correctly",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "contextual-repr-analysis-master/tests/models/word_conditional_majority_pairwise_tagger/__init__.py": {},
    "contextual-repr-analysis-master/tests/models/word_conditional_majority_selective_tagger/word_conditional_adposition_supersense_tagging_test.py": {
        "TestWordConditionalAdpositionSupersenseTagging.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWordConditionalAdpositionSupersenseTagging.test_selective_tagger_role_can_train_save_and_load": {
            "name": "test_selective_tagger_role_can_train_save_and_load",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWordConditionalAdpositionSupersenseTagging.test_batch_classifications_are_consistent": {
            "name": "test_batch_classifications_are_consistent",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWordConditionalAdpositionSupersenseTagging.test_forward_pass_runs_correctly": {
            "name": "test_forward_pass_runs_correctly",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "contextual-repr-analysis-master/tests/models/word_conditional_majority_selective_tagger/__init__.py": {},
    "contextual-repr-analysis-master/tests/models/word_conditional_majority_tagger/word_conditional_conllu_pos_tagging_test.py": {
        "TestWordConditionalConllUPosTagging.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWordConditionalConllUPosTagging.test_word_conditional_majority_tagger_can_train_save_and_load": {
            "name": "test_word_conditional_majority_tagger_can_train_save_and_load",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWordConditionalConllUPosTagging.test_batch_predictions_are_consistent": {
            "name": "test_batch_predictions_are_consistent",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWordConditionalConllUPosTagging.test_forward_pass_runs_correctly": {
            "name": "test_forward_pass_runs_correctly",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "contextual-repr-analysis-master/tests/models/word_conditional_majority_tagger/__init__.py": {}
}
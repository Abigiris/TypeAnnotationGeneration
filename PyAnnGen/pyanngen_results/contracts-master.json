{
    "contracts-master/py-bin/calc_npm_version.py": {
        "is_prerelease": {
            "name": "is_prerelease",
            "location": 6,
            "return": [
                "bool"
            ],
            "arguments": {
                "version": [
                    "str"
                ]
            }
        },
        "to_npm_version": {
            "name": "to_npm_version",
            "location": 11,
            "return": [
                "str",
                "Union[str, int]"
            ],
            "arguments": {
                "python_version": [
                    "bool",
                    "float"
                ]
            }
        },
        "test_is_prerelease": {
            "name": "test_is_prerelease",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_to_npm_version": {
            "name": "test_to_npm_version",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "contracts-master/py-bin/setup.py": {},
    "contracts-master/py-bin/scripts/merge_abis.py": {
        "create_merged_abi": {
            "name": "create_merged_abi",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "legacy_networks_filename": [
                    "str",
                    "bool",
                    "Dict[str,Dict[str,str]]",
                    "Optional[str]"
                ],
                "recent_networks_filename": [
                    "str",
                    "bool",
                    "Dict[str,Dict[str,str]]",
                    "Optional[str]"
                ],
                "output_filename": [
                    "str",
                    "int"
                ]
            }
        },
        "merge_abis": {
            "name": "merge_abis",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "abis_1": [
                    "int",
                    "Callable",
                    "str"
                ],
                "abis_2": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "abi_signatures_clash": {
            "name": "abi_signatures_clash",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "abi_1": [
                    "dict",
                    "Optional[Tuple[str, ...]]",
                    "Dict[str, float]"
                ],
                "abi_2": [
                    "dict",
                    "Optional[Tuple[str, ...]]",
                    "Dict[str, float]"
                ]
            }
        }
    },
    "contracts-master/py-bin/tlbin/contracts.py": {
        "load_packaged_contracts": {
            "name": "load_packaged_contracts",
            "location": 6,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "load_packaged_merged_abis": {
            "name": "load_packaged_merged_abis",
            "location": 11,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {}
        }
    },
    "contracts-master/py-bin/tlbin/__init__.py": {},
    "contracts-master/py-deploy/conftest.py": {},
    "contracts-master/py-deploy/setup.py": {},
    "contracts-master/py-deploy/tldeploy/cli.py": {
        "report_version": {
            "name": "report_version",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "validate_date": {
            "name": "validate_date",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "tuple[str]"
                ],
                "param": [
                    "str",
                    "tuple[str]"
                ],
                "value": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "cli": {
            "name": "cli",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [],
                "version": [
                    "bool",
                    "list[]"
                ]
            }
        },
        "currencynetwork": {
            "name": "currencynetwork",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "None",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "symbol": [
                    "str",
                    "None",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "decimals": [
                    "str",
                    "None",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "jsonrpc": [
                    "bool",
                    "str",
                    "None",
                    "list[str]",
                    "bytes",
                    "float"
                ],
                "fee_rate": [
                    "float",
                    "bool"
                ],
                "default_interest_rate": [],
                "custom_interests": [
                    "bool",
                    "str",
                    "None"
                ],
                "prevent_mediator_interests": [
                    "list[str]",
                    "None",
                    "int",
                    "str"
                ],
                "exchange_contract": [
                    "int",
                    "None",
                    "str"
                ],
                "currency_network_contract_name": [
                    "bool",
                    "str",
                    "None",
                    "float"
                ],
                "expiration_time": [
                    "int",
                    "dict[str, typing.Any]",
                    "None",
                    "str",
                    "float"
                ],
                "expiration_date": [
                    "None"
                ],
                "gas": [
                    "list[str]",
                    "bool",
                    "list[dict[str, typing.Any]]"
                ],
                "gas_price": [
                    "list[str]",
                    "bool",
                    "list[dict[str, typing.Any]]"
                ],
                "nonce": [
                    "str",
                    "bool"
                ],
                "keystore": [
                    "str",
                    "bool"
                ]
            }
        },
        "exchange": {
            "name": "exchange",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "jsonrpc": [
                    "bool",
                    "str"
                ],
                "gas": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[str, set[str]]",
                    "dict[, ]",
                    "bool",
                    "list[str]"
                ],
                "gas_price": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[str, set[str]]",
                    "dict[, ]",
                    "bool",
                    "list[str]"
                ],
                "nonce": [
                    "str",
                    "None",
                    "int",
                    "bytes"
                ],
                "keystore": [
                    "str",
                    "dict[str, str]",
                    "bool"
                ]
            }
        },
        "identity_implementation": {
            "name": "identity_implementation",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "jsonrpc": [
                    "bool",
                    "str"
                ],
                "gas": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[str, set[str]]",
                    "dict[, ]",
                    "bool",
                    "list[str]"
                ],
                "gas_price": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[str, set[str]]",
                    "dict[, ]",
                    "bool",
                    "list[str]"
                ],
                "nonce": [
                    "str",
                    "None",
                    "int",
                    "bytes"
                ],
                "keystore": [
                    "str",
                    "dict[str, str]",
                    "bool"
                ]
            }
        },
        "identity_proxy_factory": {
            "name": "identity_proxy_factory",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "jsonrpc": [
                    "bool",
                    "str"
                ],
                "gas": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[str, set[str]]",
                    "dict[, ]",
                    "bool",
                    "list[str]"
                ],
                "gas_price": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[str, set[str]]",
                    "dict[, ]",
                    "bool",
                    "list[str]"
                ],
                "nonce": [
                    "str",
                    "None",
                    "int",
                    "bytes"
                ],
                "keystore": [
                    "str",
                    "dict[str, str]",
                    "bool"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "jsonrpc": [
                    "str",
                    "bool"
                ],
                "file": [
                    "str"
                ],
                "gas": [
                    "int",
                    "str",
                    "None"
                ],
                "gas_price": [
                    "int",
                    "str",
                    "None"
                ],
                "nonce": [
                    "str",
                    "typing.IO",
                    "None",
                    "list[str]"
                ],
                "keystore": [
                    "str",
                    "typing.BinaryIO"
                ],
                "currency_network_contract_name": [
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        },
        "migration": {
            "name": "migration",
            "location": 491,
            "return": [
                "None"
            ],
            "arguments": {
                "old_addresses_file_path": [
                    "str"
                ],
                "new_addresses_file_path": [
                    "str"
                ],
                "jsonrpc": [
                    "str",
                    "bool"
                ],
                "gas_price": [
                    "str",
                    "None",
                    "int"
                ],
                "nonce": [
                    "str",
                    "dict[str, str]"
                ],
                "keystore": [
                    "str"
                ]
            }
        },
        "verify_migration": {
            "name": "verify_migration",
            "location": 535,
            "return": [
                "None"
            ],
            "arguments": {
                "old_addresses_file_path": [
                    "str",
                    "bool"
                ],
                "new_addresses_file_path": [
                    "str",
                    "bool"
                ],
                "jsonrpc": [
                    "str",
                    "bool"
                ]
            }
        },
        "beacon": {
            "name": "beacon",
            "location": 568,
            "return": [
                "None"
            ],
            "arguments": {
                "implementation_address": [
                    "int",
                    "bytes",
                    "list[bytes]"
                ],
                "owner_address": [
                    "int",
                    "bytes",
                    "list[bytes]"
                ],
                "jsonrpc": [
                    "int",
                    "str",
                    "bytes",
                    "float",
                    "None"
                ],
                "gas_price": [
                    "bool",
                    "str",
                    "None"
                ],
                "nonce": [
                    "str",
                    "None",
                    "bool",
                    "bytes",
                    "typing.Mapping"
                ],
                "keystore": [
                    "str",
                    "typing.Callable[, ]",
                    "None"
                ]
            }
        },
        "deploy_and_migrate": {
            "name": "deploy_and_migrate",
            "location": 619,
            "return": [
                "None"
            ],
            "arguments": {
                "addresses_file_path": [
                    "str",
                    "None"
                ],
                "output_file_path": [
                    "str",
                    "None"
                ],
                "beacon_address": [
                    "str",
                    "None"
                ],
                "owner_address": [
                    "str",
                    "None"
                ],
                "jsonrpc": [
                    "str",
                    "bool",
                    "None"
                ],
                "gas_price": [
                    "str",
                    "None"
                ],
                "nonce": [
                    "str",
                    "None",
                    "int",
                    "typing.Any",
                    "list[str]"
                ],
                "keystore": [
                    "str",
                    "bool"
                ]
            }
        },
        "currency_network_proxy": {
            "name": "currency_network_proxy",
            "location": 705,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "None",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "symbol": [
                    "str",
                    "None",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "decimals": [
                    "str",
                    "None",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "jsonrpc": [
                    "bool",
                    "str",
                    "None",
                    "list[str]",
                    "bytes",
                    "float"
                ],
                "fee_rate": [
                    "float",
                    "bool"
                ],
                "default_interest_rate": [],
                "custom_interests": [
                    "bool",
                    "str",
                    "None"
                ],
                "prevent_mediator_interests": [
                    "list[str]",
                    "None",
                    "int",
                    "str"
                ],
                "expiration_time": [
                    "int",
                    "dict[str, typing.Any]",
                    "None",
                    "str",
                    "float"
                ],
                "expiration_date": [
                    "None"
                ],
                "beacon_address": [
                    "typing.Iterator",
                    "list[str]",
                    "float"
                ],
                "owner_address": [
                    "typing.Iterator",
                    "list[str]",
                    "float"
                ],
                "gas": [
                    "list[str]",
                    "bool",
                    "list[dict[str, typing.Any]]"
                ],
                "gas_price": [
                    "list[str]",
                    "bool",
                    "list[dict[str, typing.Any]]"
                ],
                "nonce": [
                    "str",
                    "bool"
                ],
                "keystore": [
                    "str",
                    "bool"
                ]
            }
        },
        "unfreeze_and_remove_owner": {
            "name": "unfreeze_and_remove_owner",
            "location": 819,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_address": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "jsonrpc": [
                    "bool",
                    "str",
                    "typing.Callable[, ]"
                ],
                "gas_price": [
                    "dict[, ]",
                    "typing.Callable[typing.Mapping, collections.abc.Awaitable[]]",
                    "dict[str, str]",
                    "tuple[]"
                ],
                "nonce": [
                    "str"
                ],
                "keystore": [
                    "str",
                    "dict[str, str]"
                ]
            }
        }
    },
    "contracts-master/py-deploy/tldeploy/core.py": {
        "deploy": {
            "name": "deploy",
            "location": 34,
            "return": [],
            "arguments": {
                "contract_name": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "deploy_exchange": {
            "name": "deploy_exchange",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "deploy_unw_eth": {
            "name": "deploy_unw_eth",
            "location": 72,
            "return": [],
            "arguments": {}
        },
        "deploy_network": {
            "name": "deploy_network",
            "location": 104,
            "return": [
                "list[str]",
                "dict[str, str]",
                "str",
                "dict[str, float]"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "None",
                    "bool",
                    "dict[str, str]",
                    "tuple[typing.Union[str,str,int,int]]"
                ],
                "network_settings": [],
                "exchange_address": [
                    "None"
                ],
                "currency_network_contract_name": [
                    "None",
                    "typing.Callable[, ]",
                    "list[str]",
                    "dict[, ]",
                    "str",
                    "float",
                    "dict[str, typing.Any]"
                ],
                "transaction_options": [
                    "None",
                    "str"
                ],
                "private_key": [
                    "None",
                    "str",
                    "bool",
                    "dict[str, str]",
                    "tuple[typing.Union[str,str,int,int]]"
                ],
                "authorized_addresses": [
                    "None",
                    "str",
                    "dict[str, int]",
                    "tuple[typing.Union[float,float]]",
                    "list[str]"
                ]
            }
        },
        "deploy_networks": {
            "name": "deploy_networks",
            "location": 147,
            "return": [
                "tuple[typing.Union[list[],list[tuple[typing.Union[int,int]]]]]"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "str",
                    "typing.Callable[..., collections.abc.Awaitable[]]"
                ],
                "network_settings": [
                    "list[str]",
                    "str"
                ],
                "currency_network_contract_name": [
                    "None",
                    "bool",
                    "list[str]",
                    "str",
                    "float"
                ],
                "transaction_options": [
                    "None",
                    "int",
                    "str",
                    "typing.Callable[..., collections.abc.Awaitable[]]"
                ]
            }
        },
        "deploy_identity": {
            "name": "deploy_identity",
            "location": 174,
            "return": [],
            "arguments": {
                "web3": [
                    "str",
                    "None",
                    "int"
                ],
                "owner_address": [
                    "str",
                    "None",
                    "dict[, ]"
                ],
                "chain_id": [
                    "None",
                    "int",
                    "str",
                    "dict[, ]",
                    "float"
                ],
                "transaction_options": [
                    "None",
                    "float"
                ]
            }
        },
        "get_chain_id": {
            "name": "get_chain_id",
            "location": 192,
            "return": [
                "int"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "typing.Iterable[str]",
                    "int"
                ]
            }
        },
        "deploy_beacon": {
            "name": "deploy_beacon",
            "location": 196,
            "return": [
                "dict[str, typing.Any]",
                "str"
            ],
            "arguments": {
                "web3": [
                    "str"
                ],
                "implementation_address": [
                    "str"
                ],
                "owner_address": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "deploy_currency_network_proxy": {
            "name": "deploy_currency_network_proxy",
            "location": 225,
            "return": [
                "list[]",
                "tuple[]",
                "tuple[typing.Literal]"
            ],
            "arguments": {}
        },
        "verify_owner_not_deployer": {
            "name": "verify_owner_not_deployer",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "bytes",
                    "str"
                ],
                "owner_address": [
                    "bytes",
                    "str"
                ],
                "private_key": [
                    "bytes",
                    "None",
                    "typing.AnyStr"
                ]
            }
        },
        "init_currency_network": {
            "name": "init_currency_network",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "deploy_and_migrate_networks_from_file": {
            "name": "deploy_and_migrate_networks_from_file",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "deploy_and_migrate_network": {
            "name": "deploy_and_migrate_network",
            "location": 368,
            "return": [
                "list[str]",
                "int"
            ],
            "arguments": {}
        },
        "get_network_settings": {
            "name": "get_network_settings",
            "location": 407,
            "return": [
                "NetworkSettings"
            ],
            "arguments": {
                "currency_network": [
                    "dict[, ]",
                    "typing.Callable[, ]",
                    "typing.Type",
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "unfreeze_owned_network": {
            "name": "unfreeze_owned_network",
            "location": 420,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "remove_owner_of_network": {
            "name": "remove_owner_of_network",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TransactionsFailed.__init__": {
            "name": "__init__",
            "location": 455,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "failed_tx_hashs": [
                    "str",
                    "int",
                    "dict[, ]",
                    "list[str]",
                    "tuple[typing.Union[list[str],str,None]]"
                ]
            }
        }
    },
    "contracts-master/py-deploy/tldeploy/exchange.py": {
        "Order.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exchange_address": [
                    "bool",
                    "str",
                    "Dict",
                    "Optional[str]",
                    "None",
                    "Optional[float]",
                    "float"
                ],
                "maker_address": [
                    "bool",
                    "str",
                    "Dict",
                    "Optional[str]",
                    "None",
                    "Optional[float]",
                    "float"
                ],
                "taker_address": [
                    "bool",
                    "str",
                    "Dict",
                    "Optional[str]",
                    "None",
                    "Optional[float]",
                    "float"
                ],
                "maker_token": [
                    "bool",
                    "List[Any]",
                    "Optional[List[Any]]",
                    "None",
                    "int",
                    "Optional[int]"
                ],
                "taker_token": [
                    "bool",
                    "List[Any]",
                    "Optional[List[Any]]",
                    "None",
                    "int",
                    "Optional[int]"
                ],
                "fee_recipient": [
                    "bool",
                    "List[Any]",
                    "Optional[List[Any]]",
                    "None",
                    "int",
                    "Optional[int]"
                ],
                "maker_token_amount": [
                    "bool",
                    "str",
                    "Callable"
                ],
                "taker_token_amount": [
                    "bool",
                    "str",
                    "Callable"
                ],
                "maker_fee": [
                    "bool",
                    "List[Any]",
                    "Optional[List[Any]]",
                    "None",
                    "int",
                    "Optional[int]"
                ],
                "taker_fee": [
                    "bool",
                    "List[Any]",
                    "Optional[List[Any]]",
                    "None",
                    "int",
                    "Optional[int]"
                ],
                "expiration_timestamp_in_sec": [
                    "bool",
                    "List[Any]",
                    "Optional[List[Any]]",
                    "None",
                    "int",
                    "Optional[int]"
                ],
                "salt": [
                    "bool",
                    "List[Any]",
                    "Optional[List[Any]]",
                    "None",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "Order.hash": {
            "name": "hash",
            "location": 33,
            "return": [
                "Callable",
                "bytes",
                "T",
                "int",
                "IO"
            ],
            "arguments": {
                "self": []
            }
        },
        "Order.sign": {
            "name": "sign",
            "location": 65,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bool",
                    "KT"
                ]
            }
        }
    },
    "contracts-master/py-deploy/tldeploy/identity.py": {
        "validate_and_checksum_addresses": {
            "name": "validate_and_checksum_addresses",
            "location": 26,
            "return": [
                "list[]"
            ],
            "arguments": {
                "addresses": [
                    "str"
                ]
            }
        },
        "get_pinned_proxy_interface": {
            "name": "get_pinned_proxy_interface",
            "location": 436,
            "return": [],
            "arguments": {}
        },
        "deploy_identity_proxy_factory": {
            "name": "deploy_identity_proxy_factory",
            "location": 441,
            "return": [
                "str",
                "int",
                "None"
            ],
            "arguments": {}
        },
        "deploy_identity_implementation": {
            "name": "deploy_identity_implementation",
            "location": 465,
            "return": [],
            "arguments": {}
        },
        "deploy_proxied_identity": {
            "name": "deploy_proxied_identity",
            "location": 481,
            "return": [
                "list[int]",
                "tuple[]",
                "list[]",
                "tuple[typing.Literal]"
            ],
            "arguments": {
                "web3": [
                    "int"
                ],
                "factory_address": [
                    "int"
                ],
                "implementation_address": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "signature": [
                    "bool",
                    "typing.Callable[, ]"
                ]
            }
        },
        "recover_proxy_deployment_signature_owner": {
            "name": "recover_proxy_deployment_signature_owner",
            "location": 537,
            "return": [
                "str",
                "list[int]",
                "list[str]",
                "int"
            ],
            "arguments": {
                "web3": [
                    "typing.Callable[, ]",
                    "typing.Iterable[int]",
                    "bool",
                    "str"
                ],
                "factory_address": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "implementation_address": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "signature": [
                    "typing.Callable[, ]",
                    "typing.Iterable[int]",
                    "bool",
                    "str"
                ]
            }
        },
        "build_create2_address": {
            "name": "build_create2_address",
            "location": 547,
            "return": [],
            "arguments": {
                "deployer_address": [
                    "str",
                    "int",
                    "bytes",
                    "float"
                ],
                "bytecode": [
                    "bool",
                    "None",
                    "str",
                    "dict[, ]"
                ],
                "salt": [
                    "typing.Text"
                ]
            }
        },
        "MetaTransaction._default_for_currency_network_of_fees": {
            "name": "_default_for_currency_network_of_fees",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MetaTransaction.from_function_call": {
            "name": "from_function_call",
            "location": 72,
            "return": [],
            "arguments": {
                "cls": [
                    "int",
                    "str"
                ],
                "function_call": []
            }
        },
        "MetaTransaction.hash": {
            "name": "hash",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MetaTransaction.signed": {
            "name": "signed",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "typing.Type",
                    "int",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "Delegate.__init__": {
            "name": "__init__",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delegate_address": [
                    "int",
                    "str",
                    "None",
                    "float"
                ]
            }
        },
        "Delegate.estimate_gas_signed_meta_transaction": {
            "name": "estimate_gas_signed_meta_transaction",
            "location": 200,
            "return": [],
            "arguments": {
                "self": [],
                "signed_meta_transaction": [
                    "typing.Iterable[list[str]]",
                    "bool",
                    "float",
                    "str"
                ]
            }
        },
        "Delegate.send_signed_meta_transaction": {
            "name": "send_signed_meta_transaction",
            "location": 207,
            "return": [],
            "arguments": {
                "self": [],
                "signed_meta_transaction": [
                    "list[str]",
                    "float",
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "Delegate.validate_meta_transaction": {
            "name": "validate_meta_transaction",
            "location": 235,
            "return": [],
            "arguments": {
                "self": [],
                "signed_meta_transaction": [
                    "dict[str, typing.Any]",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "Delegate.validate_nonce": {
            "name": "validate_nonce",
            "location": 259,
            "return": [
                "list[str]",
                "dict[str, typing.Any]",
                "list[]",
                "dict[str, int]",
                "str",
                "dict[str, str]",
                "typing.Type"
            ],
            "arguments": {
                "self": [],
                "signed_meta_transaction": [
                    "bool",
                    "None"
                ]
            }
        },
        "Delegate.validate_signature": {
            "name": "validate_signature",
            "location": 279,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "signed_meta_transaction": [
                    "int",
                    "None"
                ]
            }
        },
        "Delegate.validate_time_limit": {
            "name": "validate_time_limit",
            "location": 300,
            "return": [],
            "arguments": {
                "self": [],
                "meta_transaction": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "Delegate.validate_chain_id": {
            "name": "validate_chain_id",
            "location": 321,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "meta_transaction": [
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "Delegate.get_next_nonce": {
            "name": "get_next_nonce",
            "location": 328,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "identity_address": [
                    "str",
                    "float"
                ]
            }
        },
        "Delegate.get_implementation_address": {
            "name": "get_implementation_address",
            "location": 341,
            "return": [],
            "arguments": {
                "self": [],
                "identity_address": [
                    "dict[str, set[str]]",
                    "str",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "Delegate._get_identity_contract": {
            "name": "_get_identity_contract",
            "location": 348,
            "return": [],
            "arguments": {
                "self": [],
                "address": [
                    "int",
                    "str"
                ]
            }
        },
        "Delegate._meta_transaction_function_call": {
            "name": "_meta_transaction_function_call",
            "location": 351,
            "return": [],
            "arguments": {
                "self": [],
                "signed_meta_transaction": [
                    "int"
                ]
            }
        },
        "Delegate.get_meta_transaction_status": {
            "name": "get_meta_transaction_status",
            "location": 372,
            "return": [],
            "arguments": {
                "self": [],
                "identity_address": [
                    "str",
                    "bool"
                ],
                "hash": [
                    "int",
                    "list[]",
                    "float"
                ]
            }
        },
        "Identity.__init__": {
            "name": "__init__",
            "location": 394,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Identity.address": {
            "name": "address",
            "location": 399,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Identity.defaults_filled": {
            "name": "defaults_filled",
            "location": 402,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "meta_transaction": [
                    "bytes",
                    "str",
                    "bool"
                ]
            }
        },
        "Identity.signed_meta_transaction": {
            "name": "signed_meta_transaction",
            "location": 420,
            "return": [],
            "arguments": {
                "self": [],
                "meta_transaction": [
                    "int",
                    "str"
                ]
            }
        },
        "Identity.filled_and_signed_meta_transaction": {
            "name": "filled_and_signed_meta_transaction",
            "location": 425,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "meta_transaction": [
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "Identity.get_next_nonce": {
            "name": "get_next_nonce",
            "location": 432,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "contracts-master/py-deploy/tldeploy/interests.py": {
        "_ensure_non_negative_delta_time": {
            "name": "_ensure_non_negative_delta_time",
            "location": 8,
            "return": [
                "int",
                "bool",
                "float",
                "str"
            ],
            "arguments": {
                "delta_time": [
                    "float",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "calculate_interests": {
            "name": "calculate_interests",
            "location": 20,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "balance": [
                    "int",
                    "float",
                    "bool"
                ],
                "internal_interest_rate": [
                    "int",
                    "str"
                ],
                "delta_time_in_seconds": [
                    "str",
                    "float",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "highest_order": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "balance_with_interests": {
            "name": "balance_with_interests",
            "location": 45,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "balance": [
                    "int",
                    "Dict[str,int]",
                    "bool"
                ],
                "internal_interest_rate_positive_balance": [
                    "int",
                    "str",
                    "Dict[str,int]"
                ],
                "internal_interest_rate_negative_balance": [
                    "int",
                    "str",
                    "Dict[str,int]"
                ],
                "delta_time_in_seconds": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "contracts-master/py-deploy/tldeploy/load_contracts.py": {
        "get_contract_interface": {
            "name": "get_contract_interface",
            "location": 18,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "contract_name": [
                    "Dict[str,Any]",
                    "str"
                ]
            }
        },
        "LazyContractsLoader.__getitem__": {
            "name": "__getitem__",
            "location": 9,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "contracts-master/py-deploy/tldeploy/migration.py": {
        "migrate_networks": {
            "name": "migrate_networks",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "list[str]",
                    "str",
                    "None",
                    "bool"
                ],
                "old_addresses_file_path": [
                    "str"
                ],
                "new_addresses_file_path": [
                    "str"
                ],
                "transaction_options": [
                    "None",
                    "list[str]",
                    "str",
                    "bool"
                ],
                "private_key": [
                    "None",
                    "list[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "verify_networks_migrations": {
            "name": "verify_networks_migrations",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "list[str]",
                    "bool"
                ],
                "old_addresses_file_path": [
                    "str"
                ],
                "new_addresses_file_path": [
                    "str"
                ]
            }
        },
        "read_addresses_to_migrate": {
            "name": "read_addresses_to_migrate",
            "location": 54,
            "return": [],
            "arguments": {
                "old_addresses_file_path": [
                    "str",
                    "None"
                ],
                "new_addresses_file_path": [
                    "str",
                    "None"
                ]
            }
        },
        "get_last_frozen_status_of_account": {
            "name": "get_last_frozen_status_of_account",
            "location": 365,
            "return": [],
            "arguments": {
                "currency_network": [],
                "user": [],
                "friend": []
            }
        },
        "get_last_trustline_update_event": {
            "name": "get_last_trustline_update_event",
            "location": 375,
            "return": [],
            "arguments": {
                "currency_network": [
                    "typing.Callable[, ]",
                    "str"
                ],
                "user": [
                    "typing.Callable[, ]",
                    "str"
                ],
                "friend": [
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "sorted_events": {
            "name": "sorted_events",
            "location": 392,
            "return": [
                "list[typing.Union[str,bytes]]"
            ],
            "arguments": {
                "events": [
                    "str",
                    "dict[str, typing.Any]",
                    "bytes",
                    "dict[, ]"
                ],
                "reverse": [
                    "bool"
                ]
            }
        },
        "get_all_debts_of_currency_network": {
            "name": "get_all_debts_of_currency_network",
            "location": 410,
            "return": [],
            "arguments": {
                "currency_network": [
                    "int",
                    "str"
                ]
            }
        },
        "get_pending_trustline_update_requests": {
            "name": "get_pending_trustline_update_requests",
            "location": 429,
            "return": [
                "list[list[]]"
            ],
            "arguments": {
                "currency_network": [
                    "dict[str, typing.Any]",
                    "Exception",
                    "None"
                ]
            }
        },
        "unique_id": {
            "name": "unique_id",
            "location": 461,
            "return": [],
            "arguments": {
                "user_1": [],
                "user_2": []
            }
        },
        "NetworkMigrationVerifier.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web3": [
                    "typing.Callable[, ]"
                ],
                "old_currency_network_address": [
                    "float"
                ],
                "new_currency_network_address": [
                    "int",
                    "dict[str, typing.Any]",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "NetworkMigrationVerifier.verify_migration": {
            "name": "verify_migration",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetworkMigrationVerifier.verify_accounts_migrated": {
            "name": "verify_accounts_migrated",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetworkMigrationVerifier.is_account_migrated": {
            "name": "is_account_migrated",
            "location": 112,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "int",
                    "dict[str, typing.Any]"
                ],
                "friend": [
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "NetworkMigrationVerifier.warn_account_verification_failed": {
            "name": "warn_account_verification_failed",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "bool"
                ],
                "friend": [
                    "bool"
                ]
            }
        },
        "NetworkMigrationVerifier.verify_on_boarders_migrated": {
            "name": "verify_on_boarders_migrated",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetworkMigrationVerifier.is_on_boarder_migrated": {
            "name": "is_on_boarder_migrated",
            "location": 167,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "float"
                ]
            }
        },
        "NetworkMigrationVerifier.verify_debts_migrated": {
            "name": "verify_debts_migrated",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetworkMigrationVerifier.is_debt_migrated": {
            "name": "is_debt_migrated",
            "location": 183,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "debts": [
                    "str"
                ],
                "debtor": [],
                "creditor": []
            }
        },
        "NetworkMigrationVerifier.verify_network_unfrozen": {
            "name": "verify_network_unfrozen",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetworkMigrationVerifier.verify_owner_removed": {
            "name": "verify_owner_removed",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetworkMigrater.__init__": {
            "name": "__init__",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web3": [
                    "bool",
                    "list[float]",
                    "dict[int, dict[, ]]"
                ],
                "old_currency_network_address": [
                    "int"
                ],
                "new_currency_network_address": [
                    "int"
                ],
                "transaction_options": [
                    "None",
                    "bool",
                    "str",
                    "list[str]"
                ],
                "private_key": [
                    "None",
                    "bytes",
                    "str",
                    "bool"
                ],
                "max_tx_queue_size": [
                    "int"
                ]
            }
        },
        "NetworkMigrater.migrate_network": {
            "name": "migrate_network",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetworkMigrater.freeze_old_network": {
            "name": "freeze_old_network",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetworkMigrater.migrate_accounts": {
            "name": "migrate_accounts",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetworkMigrater.migrate_on_boarders": {
            "name": "migrate_on_boarders",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetworkMigrater.migrate_debts": {
            "name": "migrate_debts",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetworkMigrater.migrate_trustline_update_requests": {
            "name": "migrate_trustline_update_requests",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetworkMigrater.unfreeze_network": {
            "name": "unfreeze_network",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetworkMigrater.remove_owner": {
            "name": "remove_owner",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetworkMigrater.call_contract_function_with_tx": {
            "name": "call_contract_function_with_tx",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "function_call": [
                    "collections.abc.AsyncGenerator",
                    "typing.Type"
                ]
            }
        },
        "NetworkMigrater.wait_for_successfull_txs_in_queue": {
            "name": "wait_for_successfull_txs_in_queue",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "sorted_events.log_index_key": {
            "name": "log_index_key",
            "location": 393,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "sorted_events.block_number_key": {
            "name": "block_number_key",
            "location": 398,
            "return": [],
            "arguments": {
                "event": []
            }
        }
    },
    "contracts-master/py-deploy/tldeploy/signing.py": {
        "eth_sign": {
            "name": "eth_sign",
            "location": 8,
            "return": [
                "Tuple",
                "List",
                "int"
            ],
            "arguments": {
                "hash": [
                    "str",
                    "Type",
                    "int"
                ],
                "key": [
                    "str",
                    "Type",
                    "int"
                ]
            }
        },
        "eth_validate": {
            "name": "eth_validate",
            "location": 21,
            "return": [
                "bool",
                "int",
                "List[Callable]"
            ],
            "arguments": {
                "msg_hash": [
                    "int",
                    "Sequence[str]",
                    "str"
                ],
                "vrs": [
                    "bytes",
                    "int",
                    "Tuple[Union[int,int,int]]",
                    "umbral.keys.UmbralPublicKey",
                    "Tuple[int,int,int]"
                ],
                "address": [
                    "str",
                    "bytes",
                    "Dict"
                ]
            }
        },
        "priv_to_pubkey": {
            "name": "priv_to_pubkey",
            "location": 45,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "key": [
                    "str"
                ]
            }
        },
        "solidity_keccak": {
            "name": "solidity_keccak",
            "location": 49,
            "return": [
                "Sequence[Any]"
            ],
            "arguments": {
                "abi_types": [
                    "BaseException",
                    "Exception",
                    "Type",
                    "bool",
                    "Type[BaseException]",
                    "Type[Any]"
                ],
                "values": [
                    "BaseException",
                    "Exception",
                    "Type",
                    "bool",
                    "Type[BaseException]",
                    "Type[Any]"
                ]
            }
        },
        "sign_msg_hash": {
            "name": "sign_msg_hash",
            "location": 53,
            "return": [
                "bool",
                "Dict[str, Any]",
                "List[int]",
                "List[str]",
                "Mapping[int, str]",
                "Dict[int, str]"
            ],
            "arguments": {
                "hash": [
                    "str",
                    "int",
                    "Set[str]"
                ],
                "key": [
                    "str",
                    "int",
                    "Set[str]"
                ]
            }
        }
    },
    "contracts-master/py-deploy/tldeploy/__init__.py": {},
    "contracts-master/tests/conftest.py": {
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 45,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "bind_contracts": {
            "name": "bind_contracts",
            "location": 54,
            "return": [],
            "arguments": {
                "contract_assets": []
            }
        },
        "gas_values_snapshot": {
            "name": "gas_values_snapshot",
            "location": 490,
            "return": [],
            "arguments": {
                "pytestconfig": []
            }
        },
        "get_events_of_contract": {
            "name": "get_events_of_contract",
            "location": 549,
            "return": [],
            "arguments": {
                "contract": [],
                "event_name": [],
                "from_block": []
            }
        },
        "get_single_event_of_contract": {
            "name": "get_single_event_of_contract",
            "location": 553,
            "return": [],
            "arguments": {
                "contract": [],
                "event_name": [],
                "from_block": []
            }
        },
        "assert_failing_transaction": {
            "name": "assert_failing_transaction",
            "location": 560,
            "return": [],
            "arguments": {
                "web3": []
            }
        },
        "assert_failing_call": {
            "name": "assert_failing_call",
            "location": 580,
            "return": [],
            "arguments": {
                "web3": []
            }
        },
        "make_currency_network_adapter": {
            "name": "make_currency_network_adapter",
            "location": 601,
            "return": [],
            "arguments": {
                "assert_failing_transaction": [],
                "assert_failing_call": []
            }
        },
        "CurrencyNetworkAdapter.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "contract": [],
                "assert_failing_transaction": [],
                "assert_failing_call": []
            }
        },
        "CurrencyNetworkAdapter.expiration_time": {
            "name": "expiration_time",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CurrencyNetworkAdapter.name": {
            "name": "name",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CurrencyNetworkAdapter.symbol": {
            "name": "symbol",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CurrencyNetworkAdapter.decimals": {
            "name": "decimals",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CurrencyNetworkAdapter.is_initialized": {
            "name": "is_initialized",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CurrencyNetworkAdapter.is_network_frozen": {
            "name": "is_network_frozen",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CurrencyNetworkAdapter.fee_divisor": {
            "name": "fee_divisor",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CurrencyNetworkAdapter.default_interest_rate": {
            "name": "default_interest_rate",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CurrencyNetworkAdapter.custom_interests": {
            "name": "custom_interests",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CurrencyNetworkAdapter.prevent_mediator_interests": {
            "name": "prevent_mediator_interests",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CurrencyNetworkAdapter.owner": {
            "name": "owner",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CurrencyNetworkAdapter.set_account": {
            "name": "set_account",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "a_address": [],
                "b_address": []
            }
        },
        "CurrencyNetworkAdapter.get_account": {
            "name": "get_account",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "a_address": [],
                "b_address": []
            }
        },
        "CurrencyNetworkAdapter.check_account": {
            "name": "check_account",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "a_address": [],
                "b_address": [],
                "creditline_given": [],
                "creditline_received": [],
                "interest_rate_given": [],
                "interest_rate_received": [],
                "is_frozen": [],
                "m_time": [],
                "balance": []
            }
        },
        "CurrencyNetworkAdapter.set_trustline_request": {
            "name": "set_trustline_request",
            "location": 176,
            "return": [],
            "arguments": {
                "self": [],
                "creditor": [],
                "debtor": [],
                "creditline_given": [],
                "creditline_received": [],
                "interest_rate_given": [],
                "interest_rate_received": [],
                "is_frozen": [],
                "transaction_options": [],
                "should_fail": []
            }
        },
        "CurrencyNetworkAdapter.set_on_boarder": {
            "name": "set_on_boarder",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "on_boardee": [],
                "on_boarder": [],
                "transaction_options": [],
                "should_fail": []
            }
        },
        "CurrencyNetworkAdapter.get_on_boarder": {
            "name": "get_on_boarder",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "CurrencyNetworkAdapter.balance": {
            "name": "balance",
            "location": 216,
            "return": [],
            "arguments": {
                "self": [],
                "a_address": [],
                "b_address": []
            }
        },
        "CurrencyNetworkAdapter.balance_with_interests": {
            "name": "balance_with_interests",
            "location": 219,
            "return": [],
            "arguments": {
                "self": [],
                "balance": [],
                "old_mtime": [],
                "new_mtime": [],
                "interest_rate_given": [],
                "interest_rate_received": []
            }
        },
        "CurrencyNetworkAdapter.creditline": {
            "name": "creditline",
            "location": 226,
            "return": [],
            "arguments": {
                "self": [],
                "creditor_address": [],
                "debtor_address": []
            }
        },
        "CurrencyNetworkAdapter.interest_rate": {
            "name": "interest_rate",
            "location": 231,
            "return": [],
            "arguments": {
                "self": [],
                "creditor_address": [],
                "debtor_address": []
            }
        },
        "CurrencyNetworkAdapter.update_trustline": {
            "name": "update_trustline",
            "location": 236,
            "return": [],
            "arguments": {
                "self": [],
                "creditor_address": [],
                "debtor_address": []
            }
        },
        "CurrencyNetworkAdapter.cancel_trustline_update": {
            "name": "cancel_trustline_update",
            "location": 294,
            "return": [],
            "arguments": {
                "self": [],
                "from_address": [],
                "to_address": [],
                "should_fail": []
            }
        },
        "CurrencyNetworkAdapter.close_trustline": {
            "name": "close_trustline",
            "location": 300,
            "return": [],
            "arguments": {
                "self": [],
                "user_address": [],
                "other_address": []
            }
        },
        "CurrencyNetworkAdapter.close_trustline_by_direct_transfer": {
            "name": "close_trustline_by_direct_transfer",
            "location": 311,
            "return": [],
            "arguments": {
                "self": [],
                "from_address": [],
                "to_address": [],
                "min_balance": [],
                "max_balance": [],
                "transaction_options": [],
                "should_fail": []
            }
        },
        "CurrencyNetworkAdapter.is_trustline_closed": {
            "name": "is_trustline_closed",
            "location": 338,
            "return": [],
            "arguments": {
                "self": [],
                "a_address": [],
                "b_address": []
            }
        },
        "CurrencyNetworkAdapter.transfer": {
            "name": "transfer",
            "location": 353,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "CurrencyNetworkAdapter.transfer_receiver_pays": {
            "name": "transfer_receiver_pays",
            "location": 367,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "CurrencyNetworkAdapter.transfer_from": {
            "name": "transfer_from",
            "location": 381,
            "return": [],
            "arguments": {
                "self": [],
                "msg_sender": [],
                "value": []
            }
        },
        "CurrencyNetworkAdapter.debit_transfer": {
            "name": "debit_transfer",
            "location": 398,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "CurrencyNetworkAdapter.increase_debt": {
            "name": "increase_debt",
            "location": 408,
            "return": [],
            "arguments": {
                "self": [],
                "debtor": [],
                "creditor": [],
                "value": []
            }
        },
        "CurrencyNetworkAdapter.set_debt": {
            "name": "set_debt",
            "location": 413,
            "return": [],
            "arguments": {
                "self": [],
                "debtor": [],
                "creditor": [],
                "value": [],
                "transaction_options": [],
                "should_fail": []
            }
        },
        "CurrencyNetworkAdapter.get_debt": {
            "name": "get_debt",
            "location": 423,
            "return": [],
            "arguments": {
                "self": [],
                "debtor": [],
                "creditor": []
            }
        },
        "CurrencyNetworkAdapter.get_all_debtors": {
            "name": "get_all_debtors",
            "location": 426,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CurrencyNetworkAdapter.get_debtors_of_user": {
            "name": "get_debtors_of_user",
            "location": 429,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "CurrencyNetworkAdapter.add_authorized_address": {
            "name": "add_authorized_address",
            "location": 432,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CurrencyNetworkAdapter.remove_authorized_address": {
            "name": "remove_authorized_address",
            "location": 435,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CurrencyNetworkAdapter.remove_owner": {
            "name": "remove_owner",
            "location": 439,
            "return": [],
            "arguments": {
                "self": [],
                "sender": [],
                "should_fail": []
            }
        },
        "CurrencyNetworkAdapter.freeze_network": {
            "name": "freeze_network",
            "location": 445,
            "return": [],
            "arguments": {
                "self": [],
                "should_fail": []
            }
        },
        "CurrencyNetworkAdapter.freeze_network_if_not_frozen": {
            "name": "freeze_network_if_not_frozen",
            "location": 449,
            "return": [],
            "arguments": {
                "self": [],
                "should_fail": []
            }
        },
        "CurrencyNetworkAdapter.unfreeze_network": {
            "name": "unfreeze_network",
            "location": 455,
            "return": [],
            "arguments": {
                "self": [],
                "transaction_options": [],
                "should_fail": []
            }
        },
        "CurrencyNetworkAdapter.is_trustline_frozen": {
            "name": "is_trustline_frozen",
            "location": 463,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "b": []
            }
        },
        "CurrencyNetworkAdapter.get_friends": {
            "name": "get_friends",
            "location": 466,
            "return": [],
            "arguments": {
                "self": [],
                "a": []
            }
        },
        "CurrencyNetworkAdapter.get_users": {
            "name": "get_users",
            "location": 469,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CurrencyNetworkAdapter.events": {
            "name": "events",
            "location": 472,
            "return": [],
            "arguments": {
                "self": [],
                "event_name": [],
                "from_block": []
            }
        },
        "CurrencyNetworkAdapter._transact_with_function_call": {
            "name": "_transact_with_function_call",
            "location": 477,
            "return": [],
            "arguments": {
                "self": [],
                "function_call": [],
                "transaction_options": [],
                "should_fail": []
            }
        },
        "assert_failing_transaction.asserting_function": {
            "name": "asserting_function",
            "location": 561,
            "return": [],
            "arguments": {
                "function_transact": [],
                "transaction_options": []
            }
        },
        "assert_failing_call.asserting_function": {
            "name": "asserting_function",
            "location": 583,
            "return": [],
            "arguments": {
                "function_call": [],
                "transaction_options": []
            }
        },
        "make_currency_network_adapter.make": {
            "name": "make",
            "location": 602,
            "return": [],
            "arguments": {
                "contract": []
            }
        },
        "gas_values_snapshot.GasValueSnapshoter.__init__": {
            "name": "__init__",
            "location": 497,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "gas_values_snapshot.GasValueSnapshoter.assert_gas_values_match_for_call": {
            "name": "assert_gas_values_match_for_call",
            "location": 508,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "web3": [],
                "contract_call": [],
                "transaction_options": []
            }
        },
        "gas_values_snapshot.GasValueSnapshoter.assert_gas_costs_match": {
            "name": "assert_gas_costs_match",
            "location": 529,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "gas_cost": []
            }
        }
    },
    "contracts-master/tests/test_signing.py": {
        "test_eth_validate": {
            "name": "test_eth_validate",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "accounts": [],
                "account_keys": [
                    "str"
                ]
            }
        },
        "test_eth_validate_fail": {
            "name": "test_eth_validate_fail",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "accounts": [],
                "account_keys": [
                    "str"
                ]
            }
        },
        "test_eth_validate_fail2": {
            "name": "test_eth_validate_fail2",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "accounts": [],
                "account_keys": [
                    "bool",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "contracts-master/tests/utils.py": {
        "assert_gas_costs": {
            "name": "assert_gas_costs",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "actual": [
                    "str",
                    "List[str]"
                ],
                "expected": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "assert_gas_values_for_call": {
            "name": "assert_gas_values_for_call",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "str",
                    "Optional[AbstractPurpose]",
                    "None"
                ],
                "contract_call": [
                    "int",
                    "str",
                    "Optional[AbstractPurpose]",
                    "None"
                ]
            }
        },
        "assert_contract_call_status": {
            "name": "assert_contract_call_status",
            "location": 72,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "web3": [
                    "bool",
                    "str",
                    "Dict[str,Any]"
                ],
                "contract_call": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "status": [
                    "bool",
                    "Optional[bool]",
                    "str",
                    "None",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "assert_contract_call_succeeds": {
            "name": "assert_contract_call_succeeds",
            "location": 89,
            "return": [
                "str",
                "Callable[[str], str]",
                "dict",
                "bool"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "Union[Sequence[str],str]",
                    "Sequence[str]"
                ],
                "contract_call": [
                    "str",
                    "Union[Sequence[str],str]",
                    "Sequence[str]"
                ]
            }
        },
        "assert_contract_call_fails": {
            "name": "assert_contract_call_fails",
            "location": 103,
            "return": [
                "str",
                "Callable[[str], str]",
                "dict",
                "bool"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "Dict[str,Any]"
                ],
                "contract_call": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "get_gas_costs": {
            "name": "get_gas_costs",
            "location": 117,
            "return": [
                "bool",
                "List[str]",
                "str",
                "bytes",
                "set"
            ],
            "arguments": {
                "web3": [
                    "int"
                ],
                "tx_hash": [
                    "int"
                ]
            }
        },
        "find_gas_values_for_call": {
            "name": "find_gas_values_for_call",
            "location": 122,
            "return": [
                "GasValues",
                "str",
                "Dict",
                "Tuple",
                "Dict[Tuple[str,str],Tuple[float,float]]",
                "int"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "bytes",
                    "Callable",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "contract_call": [
                    "str",
                    "bool"
                ],
                "transaction_options": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Type",
                    "bool",
                    "Optional[Iterable[str]]",
                    "Iterable[str]"
                ]
            }
        },
        "read_test_data": {
            "name": "read_test_data",
            "location": 146,
            "return": [
                "Dict",
                "Dict[str,List[int]]",
                "str",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "write_test_data": {
            "name": "write_test_data",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "header": [
                    "str",
                    "Callable",
                    "List[bytes]",
                    "Optional[int]",
                    "int",
                    "Dict",
                    "List[int]",
                    "Tuple[bytes,str]",
                    "bytes",
                    "None",
                    "Tuple[Union[bytes,str]]"
                ],
                "data": [
                    "Dict",
                    "Dict[str,Any]",
                    "Mapping"
                ]
            }
        }
    },
    "contracts-master/tests/__init__.py": {},
    "contracts-master/tests/currency_network/conftest.py": {
        "deploy_test_network": {
            "name": "deploy_test_network",
            "location": 24,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "web3": [
                    "Union[str,IO]",
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "IO",
                    "IO[str]"
                ],
                "network_setting": [
                    "Union[str,IO]",
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "IO",
                    "IO[str]"
                ]
            }
        },
        "deploy_ownable_network": {
            "name": "deploy_ownable_network",
            "location": 33,
            "return": [
                "str",
                "List[dict]",
                "int"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "bytes",
                    "int"
                ],
                "network_setting": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "currency_network_contract": {
            "name": "currency_network_contract",
            "location": 43,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "int",
                "Optional[List[Any]]",
                "bool"
            ],
            "arguments": {
                "web3": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "currency_network_adapter": {
            "name": "currency_network_adapter",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "currency_network_contract": [
                    "int",
                    "Callable",
                    "str"
                ],
                "make_currency_network_adapter": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "currency_network_v2_contract": {
            "name": "currency_network_v2_contract",
            "location": 53,
            "return": [
                "int",
                "List[dict]",
                "str",
                "float",
                "List[int]"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "int"
                ]
            }
        },
        "currency_network_v2_adapter": {
            "name": "currency_network_v2_adapter",
            "location": 62,
            "return": [
                "int",
                "Optional[int]",
                "Dict[str, int]",
                "bool"
            ],
            "arguments": {
                "currency_network_v2_contract": [
                    "bool",
                    "str",
                    "int"
                ],
                "make_currency_network_adapter": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "currency_network_contract_with_trustlines": {
            "name": "currency_network_contract_with_trustlines",
            "location": 69,
            "return": [
                "int",
                "Callable",
                "List",
                "str",
                "Type"
            ],
            "arguments": {
                "web3": [
                    "str"
                ],
                "accounts": [],
                "make_currency_network_adapter": []
            }
        },
        "currency_network_adapter_with_trustlines": {
            "name": "currency_network_adapter_with_trustlines",
            "location": 83,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "currency_network_contract_with_trustlines": [
                    "int",
                    "Callable",
                    "str"
                ],
                "make_currency_network_adapter": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "currency_network_contract_custom_interest": {
            "name": "currency_network_contract_custom_interest",
            "location": 90,
            "return": [
                "bool",
                "Optional[bool]",
                "int",
                "Optional[List[Any]]",
                "Optional[int]"
            ],
            "arguments": {
                "web3": [
                    "bool",
                    "None",
                    "List[Any]",
                    "Optional[bool]",
                    "int",
                    "Optional[List[Any]]",
                    "Optional[int]"
                ]
            }
        },
        "currency_network_adapter_custom_interest": {
            "name": "currency_network_adapter_custom_interest",
            "location": 98,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "currency_network_contract_custom_interest": [
                    "str",
                    "bool",
                    "int",
                    "core.models.MyUser"
                ],
                "make_currency_network_adapter": [
                    "str",
                    "bool",
                    "int",
                    "core.models.MyUser"
                ]
            }
        },
        "currency_network_contract_with_fees": {
            "name": "currency_network_contract_with_fees",
            "location": 105,
            "return": [
                "bool",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "web3": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "currency_network_adapter_with_fees": {
            "name": "currency_network_adapter_with_fees",
            "location": 111,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "currency_network_contract_with_fees": [
                    "int",
                    "Callable",
                    "str"
                ],
                "make_currency_network_adapter": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "upgradeable_implementation": {
            "name": "upgradeable_implementation",
            "location": 118,
            "return": [
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "deploy_contract": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "upgraded_implementation": {
            "name": "upgraded_implementation",
            "location": 123,
            "return": [
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "deploy_contract": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "proxy_beacon": {
            "name": "proxy_beacon",
            "location": 128,
            "return": [
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "owner_key": [],
                "contract_assets": [],
                "web3": [],
                "upgradeable_implementation": []
            }
        },
        "owner": {
            "name": "owner",
            "location": 139,
            "return": [
                "bool",
                "str",
                "Union[str, Dict]",
                "int",
                "dict"
            ],
            "arguments": {
                "accounts": [
                    "bool"
                ]
            }
        },
        "owner_key": {
            "name": "owner_key",
            "location": 144,
            "return": [
                "str",
                "Dict[str,str]",
                "core.models.GroupingKey"
            ],
            "arguments": {
                "account_keys": [
                    "str",
                    "int",
                    "List[dict[str,str]]",
                    "List[Dict[str,str]]"
                ]
            }
        },
        "not_owner": {
            "name": "not_owner",
            "location": 149,
            "return": [
                "int",
                "bytes",
                "bool",
                "str"
            ],
            "arguments": {
                "accounts": [
                    "bytes",
                    "str",
                    "Dict"
                ],
                "owner": [
                    "str",
                    "bool"
                ]
            }
        },
        "not_owner_key": {
            "name": "not_owner_key",
            "location": 156,
            "return": [
                "Dict[str,str]",
                "str",
                "Union[str,DatabaseURL]",
                "core.models.GroupingKey",
                "Dict"
            ],
            "arguments": {
                "account_keys": [
                    "List",
                    "int",
                    "str",
                    "List[dict[str,str]]",
                    "List[Dict[str,str]]"
                ]
            }
        },
        "owned_currency_network": {
            "name": "owned_currency_network",
            "location": 161,
            "return": [
                "Callable",
                "str",
                "list",
                "int",
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "owner": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "beacon_with_currency_network": {
            "name": "beacon_with_currency_network",
            "location": 167,
            "return": [
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "owned_currency_network": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "contract_assets": [
                    "Optional[int]",
                    "int"
                ],
                "owner_key": [
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        }
    },
    "contracts-master/tests/currency_network/test_close_trustline.py": {
        "interest_rate": {
            "name": "interest_rate",
            "location": 19,
            "return": [],
            "arguments": {
                "request": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "currency_network_contract_with_trustlines": {
            "name": "currency_network_contract_with_trustlines",
            "location": 24,
            "return": [
                "tuple[]",
                "set[str]"
            ],
            "arguments": {
                "chain": [],
                "web3": [
                    "str"
                ],
                "accounts": [
                    "str"
                ],
                "interest_rate": [],
                "make_currency_network_adapter": [
                    "list[str]",
                    "str",
                    "int",
                    "typing.Sized"
                ]
            }
        },
        "currency_network_adapter_with_trustlines": {
            "name": "currency_network_adapter_with_trustlines",
            "location": 53,
            "return": [],
            "arguments": {
                "currency_network_contract_with_trustlines": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "make_currency_network_adapter": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "currency_network_contract_with_max_uint_trustlines": {
            "name": "currency_network_contract_with_max_uint_trustlines",
            "location": 60,
            "return": [
                "int",
                "typing.Callable[..., None]",
                "list[str]",
                "float"
            ],
            "arguments": {
                "currency_network_contract_custom_interest": [
                    "int",
                    "typing.Callable[..., None]",
                    "list[str]",
                    "float"
                ],
                "chain": [
                    "bool",
                    "list[int]",
                    "typing.Callable[, ]",
                    "typing.Sequence[str]"
                ],
                "web3": [
                    "bool",
                    "list[int]",
                    "typing.Callable[, ]",
                    "typing.Sequence[str]"
                ],
                "accounts": [
                    "list[int]"
                ],
                "make_currency_network_adapter": [
                    "int",
                    "typing.Callable[..., None]",
                    "list[str]",
                    "float"
                ]
            }
        },
        "test_close_trustline": {
            "name": "test_close_trustline",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter_with_fees": [],
                "accounts": [
                    "bool",
                    "tuple[typing.Union[paradigm.models.Base,tests.utils.Kwargs]]",
                    "str"
                ]
            }
        },
        "test_cannot_close_with_balance": {
            "name": "test_cannot_close_with_balance",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter_with_fees": [],
                "accounts": [
                    "bool",
                    "tuple[typing.Union[paradigm.models.Base,tests.utils.Kwargs]]",
                    "str"
                ],
                "assert_failing_transaction": []
            }
        },
        "test_cannot_reopen_closed_trustline": {
            "name": "test_cannot_reopen_closed_trustline",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter_with_fees": [],
                "accounts": [
                    "bool",
                    "tuple[typing.Union[paradigm.models.Base,tests.utils.Kwargs]]",
                    "str"
                ]
            }
        },
        "test_close_trustline_negative_balance": {
            "name": "test_close_trustline_negative_balance",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract_with_trustlines": [],
                "accounts": [],
                "make_currency_network_adapter": []
            }
        },
        "test_close_trustline_positive_balance": {
            "name": "test_close_trustline_positive_balance",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract_with_trustlines": [],
                "accounts": [],
                "make_currency_network_adapter": []
            }
        },
        "test_close_trustline_max_balance": {
            "name": "test_close_trustline_max_balance",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract_with_max_uint_trustlines": [
                    "bool"
                ],
                "accounts": [
                    "bool"
                ],
                "make_currency_network_adapter": [
                    "bool"
                ]
            }
        },
        "test_close_trustline_direct_transfer_no_balance": {
            "name": "test_close_trustline_direct_transfer_no_balance",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter_with_trustlines": [
                    "float",
                    "typing.Callable[, ]",
                    "list[blurr.core.record.Record]"
                ],
                "accounts": []
            }
        },
        "test_close_trustline_direct_transfer_with_balance": {
            "name": "test_close_trustline_direct_transfer_with_balance",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter_with_trustlines": [
                    "typing.Callable[, ]",
                    "float"
                ],
                "accounts": []
            }
        },
        "test_close_trustline_direct_transfer_event": {
            "name": "test_close_trustline_direct_transfer_event",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter_with_trustlines": [],
                "accounts": [],
                "web3": [
                    "int",
                    "None",
                    "float"
                ]
            }
        },
        "test_close_trustline_max_balance_fails": {
            "name": "test_close_trustline_max_balance_fails",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter_custom_interest": [
                    "int"
                ],
                "accounts": []
            }
        },
        "test_close_trustline_min_balance_fails": {
            "name": "test_close_trustline_min_balance_fails",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter_custom_interest": [
                    "int"
                ],
                "accounts": []
            }
        },
        "test_close_trustline_interest_overflows": {
            "name": "test_close_trustline_interest_overflows",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter_custom_interest": [
                    "int"
                ],
                "accounts": [],
                "web3": [
                    "int",
                    "str"
                ]
            }
        },
        "test_close_trustline_negative_balance.get_balance": {
            "name": "get_balance",
            "location": 137,
            "return": [],
            "arguments": {}
        },
        "test_close_trustline_positive_balance.get_balance": {
            "name": "get_balance",
            "location": 156,
            "return": [],
            "arguments": {}
        },
        "test_close_trustline_max_balance.get_balance": {
            "name": "get_balance",
            "location": 189,
            "return": [],
            "arguments": {}
        }
    },
    "contracts-master/tests/currency_network/test_currency_network_authorizable.py": {
        "global_authorized_address": {
            "name": "global_authorized_address",
            "location": 13,
            "return": [
                "int",
                "str",
                "Union[str,Dict]",
                "Dict"
            ],
            "arguments": {
                "accounts": [
                    "List[int]"
                ]
            }
        },
        "currency_network_contract_authorized_with_trustlines": {
            "name": "currency_network_contract_authorized_with_trustlines",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "str"
                ],
                "global_authorized_address": [
                    "int",
                    "str"
                ],
                "accounts": [
                    "int"
                ],
                "make_currency_network_adapter": [
                    "int"
                ]
            }
        },
        "possible_transfer_path": {
            "name": "possible_transfer_path",
            "location": 36,
            "return": [
                "List[str]",
                "str",
                "Tuple[str]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "accounts": [
                    "str",
                    "Set[str]"
                ]
            }
        },
        "currency_network_adapter": {
            "name": "currency_network_adapter",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "currency_network_contract_authorized_with_trustlines": [
                    "int",
                    "Callable",
                    "str"
                ],
                "make_currency_network_adapter": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_transfer_from_global_authorized": {
            "name": "test_transfer_from_global_authorized",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter": [
                    "str"
                ],
                "global_authorized_address": [
                    "str"
                ],
                "possible_transfer_path": [
                    "str"
                ]
            }
        },
        "test_transfer_from_not_authorized": {
            "name": "test_transfer_from_not_authorized",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter": [
                    "Callable"
                ],
                "global_authorized_address": [
                    "str",
                    "cli_ui.tests.MessageRecorder"
                ],
                "accounts": [],
                "possible_transfer_path": [
                    "Callable"
                ]
            }
        },
        "test_transfer_from_personal_authorized": {
            "name": "test_transfer_from_personal_authorized",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter": [],
                "possible_transfer_path": [],
                "accounts": []
            }
        },
        "test_transfer_from_removed_personal_authorized": {
            "name": "test_transfer_from_removed_personal_authorized",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter": [],
                "possible_transfer_path": [
                    "Callable"
                ],
                "accounts": []
            }
        },
        "test_cannot_remove_not_authorized": {
            "name": "test_cannot_remove_not_authorized",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter": [
                    "str"
                ],
                "accounts": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_add_global_authorized_event": {
            "name": "test_add_global_authorized_event",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter": [
                    "int"
                ],
                "global_authorized_address": [
                    "int"
                ]
            }
        },
        "test_add_personal_authorized_event": {
            "name": "test_add_personal_authorized_event",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter": [
                    "str"
                ],
                "accounts": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "tests.conftesWorker"
                ]
            }
        },
        "test_remove_personal_authorized_event": {
            "name": "test_remove_personal_authorized_event",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter": [],
                "accounts": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        }
    },
    "contracts-master/tests/currency_network/test_currency_network_basics.py": {
        "currency_network_contract_with_trustline_update": {
            "name": "currency_network_contract_with_trustline_update",
            "location": 23,
            "return": [],
            "arguments": {
                "web3": [
                    "list[list[int]]",
                    "typing.Callable[, ]",
                    "str",
                    "tuple[]"
                ],
                "accounts": [
                    "str"
                ]
            }
        },
        "invalid_interest_rate": {
            "name": "invalid_interest_rate",
            "location": 34,
            "return": [
                "int"
            ],
            "arguments": {
                "request": []
            }
        },
        "test_meta_name": {
            "name": "test_meta_name",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract": []
            }
        },
        "test_meta_symbol": {
            "name": "test_meta_symbol",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract": []
            }
        },
        "test_meta_decimal": {
            "name": "test_meta_decimal",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract": []
            }
        },
        "test_init_only_once": {
            "name": "test_init_only_once",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract": [],
                "assert_failing_transaction": []
            }
        },
        "test_default_interests_rates_out_of_bounds": {
            "name": "test_default_interests_rates_out_of_bounds",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [],
                "invalid_interest_rate": [
                    "list[blurr.core.record.Record]"
                ]
            }
        },
        "test_users": {
            "name": "test_users",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract_with_trustlines": [
                    "int"
                ],
                "accounts": [
                    "int",
                    "float"
                ]
            }
        },
        "test_friends": {
            "name": "test_friends",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract_with_trustlines": [
                    "int",
                    "str"
                ],
                "accounts": [
                    "typing.Sequence[str]",
                    "list[float]"
                ]
            }
        },
        "test_set_get_Account": {
            "name": "test_set_get_Account",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract_custom_interest": [],
                "accounts": []
            }
        },
        "test_creditlines": {
            "name": "test_creditlines",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract_with_trustlines": [],
                "accounts": [
                    "float",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_set_get_Account_default_interests": {
            "name": "test_set_get_Account_default_interests",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract": [],
                "accounts": [
                    "int"
                ]
            }
        },
        "test_balance": {
            "name": "test_balance",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract": [],
                "accounts": [],
                "make_currency_network_adapter": []
            }
        },
        "test_transfer_0_mediators": {
            "name": "test_transfer_0_mediators",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter_with_trustlines": [],
                "accounts": [
                    "bool",
                    "tuple[typing.Union[paradigm.models.Base,tests.utils.Kwargs]]",
                    "str"
                ]
            }
        },
        "test_transfer_0_mediators_fail_not_enough_credit": {
            "name": "test_transfer_0_mediators_fail_not_enough_credit",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter_with_trustlines": [],
                "accounts": [
                    "bool",
                    "tuple[typing.Union[paradigm.models.Base,tests.utils.Kwargs]]",
                    "str"
                ]
            }
        },
        "test_transfer_0_mediators_fail_wrong_path": {
            "name": "test_transfer_0_mediators_fail_wrong_path",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract_with_trustlines": [],
                "accounts": [
                    "str"
                ],
                "assert_failing_transaction": [
                    "str",
                    "None"
                ]
            }
        },
        "test_transfer_1_mediators": {
            "name": "test_transfer_1_mediators",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter_with_trustlines": [],
                "accounts": [
                    "list[float]",
                    "int",
                    "float"
                ]
            }
        },
        "test_transfer_1_mediators_not_enough_credit": {
            "name": "test_transfer_1_mediators_not_enough_credit",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter_with_trustlines": [],
                "accounts": [
                    "list[float]",
                    "int",
                    "float"
                ]
            }
        },
        "test_transfer_1_mediators_not_enough_wrong_path": {
            "name": "test_transfer_1_mediators_not_enough_wrong_path",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter_with_trustlines": [],
                "accounts": [
                    "str"
                ]
            }
        },
        "test_transfer_3_mediators": {
            "name": "test_transfer_3_mediators",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter_with_trustlines": [],
                "accounts": [
                    "typing.Sequence[str]",
                    "list[float]"
                ]
            }
        },
        "test_transfer_payback": {
            "name": "test_transfer_payback",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter_with_trustlines": [],
                "accounts": [
                    "typing.Sequence[str]",
                    "list[float]"
                ]
            }
        },
        "test_send_back": {
            "name": "test_send_back",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter_with_trustlines": [],
                "accounts": [
                    "bool",
                    "tuple[typing.Union[paradigm.models.Base,tests.utils.Kwargs]]",
                    "str"
                ]
            }
        },
        "test_send_more": {
            "name": "test_send_more",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter_with_trustlines": [],
                "accounts": [
                    "bool",
                    "tuple[typing.Union[paradigm.models.Base,tests.utils.Kwargs]]",
                    "str"
                ]
            }
        },
        "test_can_always_reduce": {
            "name": "test_can_always_reduce",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter_with_trustlines": [],
                "accounts": []
            }
        },
        "test_update_cannot_open_zero_trustline": {
            "name": "test_update_cannot_open_zero_trustline",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter": [],
                "accounts": [
                    "typing.Sequence[str]"
                ]
            }
        },
        "test_update_without_accept_trustline": {
            "name": "test_update_without_accept_trustline",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter": [],
                "accounts": [
                    "dict[str, typing.Sequence[typing.Any]]",
                    "tuple[typing.Union[paradigm.models.Base,tests.utils.Kwargs]]"
                ]
            }
        },
        "test_update_with_accept_trustline": {
            "name": "test_update_with_accept_trustline",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter": [],
                "accounts": [
                    "dict[str, typing.Sequence[typing.Any]]",
                    "tuple[typing.Union[paradigm.models.Base,tests.utils.Kwargs]]"
                ]
            }
        },
        "test_update_with_accept_lower_trustline": {
            "name": "test_update_with_accept_lower_trustline",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter": [],
                "accounts": [
                    "dict[str, typing.Sequence[typing.Any]]",
                    "tuple[typing.Union[paradigm.models.Base,tests.utils.Kwargs]]"
                ]
            }
        },
        "test_update_with_accept_higher_trustline": {
            "name": "test_update_with_accept_higher_trustline",
            "location": 405,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter": [],
                "accounts": [
                    "dict[str, typing.Sequence[typing.Any]]",
                    "tuple[typing.Union[paradigm.models.Base,tests.utils.Kwargs]]"
                ]
            }
        },
        "test_update_with_accept_2nd_trustline": {
            "name": "test_update_with_accept_2nd_trustline",
            "location": 419,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter": [],
                "accounts": [
                    "dict[str, typing.Sequence[typing.Any]]",
                    "tuple[typing.Union[paradigm.models.Base,tests.utils.Kwargs]]"
                ]
            }
        },
        "test_cannot_accept_old_trustline": {
            "name": "test_cannot_accept_old_trustline",
            "location": 444,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter": [],
                "accounts": [
                    "dict[str, typing.Sequence[typing.Any]]",
                    "tuple[typing.Union[paradigm.models.Base,tests.utils.Kwargs]]"
                ]
            }
        },
        "test_update_reduce_need_no_accept_trustline": {
            "name": "test_update_reduce_need_no_accept_trustline",
            "location": 463,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "float",
                    "typing.Callable[, ]"
                ],
                "currency_network_adapter_with_trustlines": [],
                "accounts": [
                    "tuple[typing.Union[paradigm.models.Base,tests.utils.Kwargs]]"
                ],
                "new_creditlimit_given": [
                    "str"
                ],
                "new_creditlmit_received": [
                    "str"
                ]
            }
        },
        "test_update_without_accept_trustline_interests": {
            "name": "test_update_without_accept_trustline_interests",
            "location": 492,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter_custom_interest": [],
                "accounts": [
                    "tuple[typing.Union[paradigm.models.Base,tests.utils.Kwargs]]",
                    "str"
                ]
            }
        },
        "test_update_with_accept_trustline_interests": {
            "name": "test_update_with_accept_trustline_interests",
            "location": 514,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter_custom_interest": [],
                "accounts": [
                    "tuple[typing.Union[paradigm.models.Base,tests.utils.Kwargs]]",
                    "str"
                ]
            }
        },
        "test_update_with_accept_different_trustline_interests": {
            "name": "test_update_with_accept_different_trustline_interests",
            "location": 536,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract_custom_interest": [],
                "accounts": [
                    "tuple[typing.Union[paradigm.models.Base,tests.utils.Kwargs]]",
                    "str"
                ]
            }
        },
        "test_update_with_accept_2nd_trustline_interests": {
            "name": "test_update_with_accept_2nd_trustline_interests",
            "location": 552,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract_custom_interest": [],
                "accounts": [
                    "tuple[typing.Union[paradigm.models.Base,tests.utils.Kwargs]]",
                    "str"
                ]
            }
        },
        "test_cannot_accept_old_trustline_interests": {
            "name": "test_cannot_accept_old_trustline_interests",
            "location": 577,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract_custom_interest": [],
                "accounts": [
                    "tuple[typing.Union[paradigm.models.Base,tests.utils.Kwargs]]",
                    "str"
                ]
            }
        },
        "test_cannot_accept_trustline_request_after_reduce": {
            "name": "test_cannot_accept_trustline_request_after_reduce",
            "location": 594,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract_custom_interest": [],
                "accounts": [
                    "tuple[typing.Union[paradigm.models.Base,tests.utils.Kwargs]]",
                    "str"
                ]
            }
        },
        "test_update_trustline_with_custom_while_forbidden": {
            "name": "test_update_trustline_with_custom_while_forbidden",
            "location": 616,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter": [],
                "accounts": [
                    "dict[str, typing.Sequence[typing.Any]]",
                    "tuple[typing.Union[paradigm.models.Base,tests.utils.Kwargs]]"
                ]
            }
        },
        "test_update_trustline_with_custom_while_forbidden_lowering_interests": {
            "name": "test_update_trustline_with_custom_while_forbidden_lowering_interests",
            "location": 627,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter": [],
                "accounts": [
                    "tuple[typing.Union[paradigm.models.Base,tests.utils.Kwargs]]",
                    "dict[str, typing.Sequence[typing.Any]]"
                ]
            }
        },
        "test_update_trustline_lowering_interest_given": {
            "name": "test_update_trustline_lowering_interest_given",
            "location": 645,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter": [],
                "accounts": [
                    "tuple[typing.Union[paradigm.models.Base,tests.utils.Kwargs]]",
                    "dict[, ]"
                ]
            }
        },
        "test_update_trustline_lowering_interest_received": {
            "name": "test_update_trustline_lowering_interest_received",
            "location": 658,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter": [],
                "accounts": [
                    "tuple[typing.Union[paradigm.models.Base,tests.utils.Kwargs]]",
                    "dict[, ]"
                ]
            }
        },
        "test_setting_trustline_with_negative_interests_with_custom_interests": {
            "name": "test_setting_trustline_with_negative_interests_with_custom_interests",
            "location": 674,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter_with_trustlines": [],
                "accounts": [
                    "dict[str, typing.Sequence[typing.Any]]"
                ]
            }
        },
        "test_update_trustline_interests_out_of_bounds": {
            "name": "test_update_trustline_interests_out_of_bounds",
            "location": 696,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter_custom_interest": [],
                "interest_rate_param": [
                    "typing.Callable[, ]",
                    "set[]"
                ],
                "accounts": [
                    "int",
                    "typing.Callable[, ]",
                    "str",
                    "typing.Type"
                ],
                "invalid_interest_rate": [
                    "typing.Callable[, ]",
                    "set[]"
                ]
            }
        },
        "test_cancel_trustline_update": {
            "name": "test_cancel_trustline_update",
            "location": 717,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract_with_trustline_update": [],
                "accounts": [],
                "assert_failing_transaction": [
                    "int"
                ]
            }
        },
        "test_cancel_trustline_update_not_initiator": {
            "name": "test_cancel_trustline_update_not_initiator",
            "location": 740,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract_with_trustline_update": [],
                "accounts": [],
                "assert_failing_transaction": [
                    "int"
                ]
            }
        },
        "test_cancel_no_trustline_update": {
            "name": "test_cancel_no_trustline_update",
            "location": 763,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter": [],
                "accounts": []
            }
        },
        "test_cancel_trustline_update_event": {
            "name": "test_cancel_trustline_update_event",
            "location": 773,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract_with_trustline_update": [],
                "accounts": []
            }
        },
        "test_balance_event": {
            "name": "test_balance_event",
            "location": 791,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter_with_trustlines": [],
                "accounts": [
                    "tuple[typing.Union[paradigm.models.Base,tests.utils.Kwargs]]",
                    "dict[str, typing.Sequence[typing.Any]]"
                ]
            }
        },
        "test_transfer_event": {
            "name": "test_transfer_event",
            "location": 814,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter_with_trustlines": [],
                "accounts": [
                    "tuple[typing.Union[paradigm.models.Base,tests.utils.Kwargs]]",
                    "dict[str, typing.Sequence[typing.Any]]"
                ]
            }
        },
        "test_update_trustline_add_users": {
            "name": "test_update_trustline_add_users",
            "location": 832,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter": [],
                "accounts": [
                    "dict[str, typing.Sequence[typing.Any]]",
                    "tuple[typing.Union[paradigm.models.Base,tests.utils.Kwargs]]"
                ]
            }
        },
        "test_update_set_account_add_users": {
            "name": "test_update_set_account_add_users",
            "location": 842,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter": [],
                "accounts": [
                    "tuple[typing.Union[paradigm.models.Base,tests.utils.Kwargs]]",
                    "dict[str, typing.Sequence[typing.Any]]",
                    "bytes",
                    "int"
                ]
            }
        },
        "test_max_transfer": {
            "name": "test_max_transfer",
            "location": 850,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter": [
                    "int"
                ],
                "accounts": [
                    "tuple[typing.Union[paradigm.models.Base,tests.utils.Kwargs]]",
                    "str"
                ]
            }
        },
        "test_overflow_max_transfer": {
            "name": "test_overflow_max_transfer",
            "location": 865,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter": [],
                "accounts": [
                    "tuple[typing.Union[paradigm.models.Base,tests.utils.Kwargs]]",
                    "str"
                ]
            }
        },
        "test_transfer_no_path": {
            "name": "test_transfer_no_path",
            "location": 880,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter": [],
                "accounts": [],
                "assert_failing_transaction": []
            }
        },
        "test_transfer_too_short_path": {
            "name": "test_transfer_too_short_path",
            "location": 889,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter": [],
                "accounts": [
                    "str"
                ]
            }
        }
    },
    "contracts-master/tests/currency_network/test_currency_network_debt.py": {
        "currency_network_contract": {
            "name": "currency_network_contract",
            "location": 23,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "int",
                "Optional[List[Any]]",
                "bool"
            ],
            "arguments": {
                "web3": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "currency_network_contract_with_trustlines": {
            "name": "currency_network_contract_with_trustlines",
            "location": 28,
            "return": [
                "List[list[None]]",
                "int",
                "Dict",
                "Callable",
                "str"
            ],
            "arguments": {
                "web3": [
                    "bool",
                    "List[Callable]"
                ],
                "accounts": [],
                "make_currency_network_adapter": []
            }
        },
        "debtor": {
            "name": "debtor",
            "location": 40,
            "return": [
                "int",
                "str",
                "Union[str,Dict]",
                "Dict"
            ],
            "arguments": {
                "accounts": [
                    "List[int]"
                ]
            }
        },
        "creditor": {
            "name": "creditor",
            "location": 45,
            "return": [
                "int",
                "str",
                "Union[str,Dict]",
                "Dict"
            ],
            "arguments": {
                "accounts": [
                    "List[int]"
                ]
            }
        },
        "debt_value": {
            "name": "debt_value",
            "location": 50,
            "return": [
                "int",
                "str",
                "Tuple[int,int]",
                "Tuple[str,int]",
                "T",
                "float"
            ],
            "arguments": {}
        },
        "currency_network_contract_with_trustlines_and_debt": {
            "name": "currency_network_contract_with_trustlines_and_debt",
            "location": 55,
            "return": [
                "List[dict]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "currency_network_contract_with_trustlines": [
                    "List[Dict]",
                    "List[dict]"
                ],
                "debtor": [
                    "List[Dict]",
                    "List[dict]"
                ],
                "creditor": [
                    "List[Dict]",
                    "List[dict]"
                ],
                "debt_value": [
                    "List[Dict]",
                    "List[dict]"
                ]
            }
        },
        "currency_network_adapter_with_trustlines_and_debt": {
            "name": "currency_network_adapter_with_trustlines_and_debt",
            "location": 65,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "currency_network_contract_with_trustlines_and_debt": [
                    "int",
                    "Callable",
                    "str"
                ],
                "make_currency_network_adapter": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_increasing_debt": {
            "name": "test_increasing_debt",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract": [
                    "Dict[str,Any]",
                    "Callable",
                    "core.Year"
                ],
                "accounts": [
                    "Dict[str, Any]",
                    "core.Year",
                    "Callable"
                ],
                "creditor": [
                    "Dict[str,Any]",
                    "Callable",
                    "core.Year"
                ],
                "debtor": [
                    "Dict[str,Any]",
                    "Callable",
                    "core.Year"
                ]
            }
        },
        "test_increasing_debt_event": {
            "name": "test_increasing_debt_event",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "Callable",
                    "None"
                ],
                "accounts": [
                    "str",
                    "Optional[str]",
                    "float",
                    "bool"
                ],
                "creditor": [
                    "Optional[str]",
                    "float",
                    "str",
                    "bool",
                    "None"
                ],
                "debtor": [
                    "bool",
                    "Optional[str]",
                    "float"
                ],
                "web3": [
                    "Dict[str,Sequence[Any]]",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_debit_transfer": {
            "name": "test_debit_transfer",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract_with_trustlines_and_debt": [
                    "str",
                    "bool"
                ],
                "accounts": [
                    "int",
                    "bool"
                ],
                "creditor": [],
                "debtor": [
                    "Sequence[Union[int,float]]"
                ],
                "debt_value": [
                    "Type",
                    "float",
                    "Optional[Callable[[str],bool]]",
                    "bool",
                    "Callable[str,bool]",
                    "None"
                ]
            }
        },
        "test_debit_transfer_over_value": {
            "name": "test_debit_transfer_over_value",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter_with_trustlines_and_debt": [],
                "accounts": [
                    "str"
                ],
                "creditor": [
                    "str"
                ],
                "debtor": [
                    "str"
                ],
                "debt_value": []
            }
        },
        "test_debit_transfer_under_value": {
            "name": "test_debit_transfer_under_value",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter_with_trustlines_and_debt": [
                    "bool",
                    "str"
                ],
                "accounts": [
                    "Tuple[Union[int,int]]",
                    "int",
                    "Tuple[int,int]",
                    "src.main.core.repositories.window_repository.WindowRepository"
                ],
                "creditor": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "debtor": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "debt_value": []
            }
        },
        "test_debit_transfer_revert": {
            "name": "test_debit_transfer_revert",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter_with_trustlines_and_debt": [
                    "bool",
                    "Union[Tuple[int], Tuple[int, int]]"
                ],
                "accounts": [
                    "str",
                    "Callable",
                    "tests.fixtures.cloud_uploader.Uploader"
                ],
                "creditor": [
                    "Callable",
                    "str",
                    "tests.fixtures.cloud_uploader.Uploader"
                ],
                "debtor": [
                    "Callable",
                    "str",
                    "tests.fixtures.cloud_uploader.Uploader"
                ],
                "debt_value": [
                    "tests.conftesWorker"
                ]
            }
        },
        "test_debit_transfer_events": {
            "name": "test_debit_transfer_events",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract_with_trustlines_and_debt": [
                    "bool"
                ],
                "accounts": [
                    "str"
                ],
                "creditor": [
                    "int",
                    "src.core.model.scripScript"
                ],
                "debtor": [
                    "List[blurr.core.record.Record]",
                    "int",
                    "bool"
                ],
                "debt_value": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "test_add_to_debt_min_int256_fails": {
            "name": "test_add_to_debt_min_int256_fails",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract": [],
                "accounts": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "tests.conftesWorker"
                ],
                "creditor_index": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "tests.conftesWorker"
                ],
                "debtor_index": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "tests.conftesWorker"
                ],
                "assert_failing_transaction": []
            }
        },
        "test_add_to_debt_max_int256_succeeds": {
            "name": "test_add_to_debt_max_int256_succeeds",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract": [
                    "int",
                    "float"
                ],
                "accounts": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "tests.conftesWorker"
                ],
                "creditor_index": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "tests.conftesWorker"
                ],
                "debtor_index": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "tests.conftesWorker"
                ]
            }
        },
        "test_add_to_debt_twice_to_reach_min_int": {
            "name": "test_add_to_debt_twice_to_reach_min_int",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract": [],
                "accounts": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "tests.conftesWorker"
                ],
                "creditor_index": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "tests.conftesWorker"
                ],
                "debtor_index": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "tests.conftesWorker"
                ],
                "assert_failing_transaction": [
                    "int",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_get_debtor_from_state": {
            "name": "test_get_debtor_from_state",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter_with_trustlines_and_debt": [
                    "meeshkan.core.sagemaker_monitor.SageMakerJobMonitor"
                ],
                "creditor": [
                    "meeshkan.core.sagemaker_monitor.SageMakerJobMonitor"
                ],
                "debtor": [
                    "meeshkan.core.sagemaker_monitor.SageMakerJobMonitor"
                ]
            }
        },
        "test_zeroing_debt_cleans_state": {
            "name": "test_zeroing_debt_cleans_state",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter_with_trustlines_and_debt": [
                    "Dict[str, Any]"
                ],
                "creditor": [
                    "Dict[str,Any]"
                ],
                "debtor": [
                    "Dict[str,Any]"
                ],
                "debt_value": [
                    "bool",
                    "str",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        }
    },
    "contracts-master/tests/currency_network/test_currency_network_erc165.py": {
        "currency_network_contract": {
            "name": "currency_network_contract",
            "location": 8,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "int",
                "Optional[List[Any]]",
                "bool"
            ],
            "arguments": {
                "web3": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "test_supports_interface": {
            "name": "test_supports_interface",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract": [],
                "web3": []
            }
        }
    },
    "contracts-master/tests/currency_network/test_currency_network_fees.py": {
        "currency_network_adapter_with_trustlines": {
            "name": "currency_network_adapter_with_trustlines",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "web3": [
                    "bool",
                    "List[Callable]"
                ],
                "accounts": [
                    "str",
                    "List[dict[str,Any]]",
                    "float",
                    "List[Dict[str,Any]]"
                ],
                "make_currency_network_adapter": [
                    "int",
                    "List[str]",
                    "str"
                ]
            }
        },
        "currency_network_contract_with_trustlines": {
            "name": "currency_network_contract_with_trustlines",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "currency_network_adapter_with_trustlines": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_transfer_0_mediators": {
            "name": "test_transfer_0_mediators",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract_with_trustlines": [],
                "accounts": [
                    "bool",
                    "float"
                ]
            }
        },
        "test_transfer_0_mediators_fail_not_enough_credit": {
            "name": "test_transfer_0_mediators_fail_not_enough_credit",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter_with_trustlines": [],
                "accounts": []
            }
        },
        "test_transfer_1_mediators": {
            "name": "test_transfer_1_mediators",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract_with_trustlines": [],
                "accounts": [
                    "Optional[Set[str]]"
                ]
            }
        },
        "test_transfer_1_mediators_not_enough_credit": {
            "name": "test_transfer_1_mediators_not_enough_credit",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter_with_trustlines": [],
                "accounts": []
            }
        },
        "test_transfer_3_mediators": {
            "name": "test_transfer_3_mediators",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract_with_trustlines": [],
                "accounts": [
                    "dict"
                ]
            }
        },
        "test_rounding_fee": {
            "name": "test_rounding_fee",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract_with_trustlines": [],
                "accounts": [
                    "Optional[Set[str]]"
                ]
            }
        },
        "test_max_fee": {
            "name": "test_max_fee",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter_with_trustlines": [
                    "bool"
                ],
                "accounts": [
                    "bool"
                ]
            }
        },
        "test_send_back_with_fees": {
            "name": "test_send_back_with_fees",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract_with_trustlines": [],
                "accounts": [
                    "bytes"
                ]
            }
        },
        "test_send_more_with_fees": {
            "name": "test_send_more_with_fees",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract_with_trustlines": [],
                "accounts": [
                    "bytes"
                ]
            }
        }
    },
    "contracts-master/tests/currency_network/test_currency_network_freezing.py": {
        "currency_network_contract_with_expiration": {
            "name": "currency_network_contract_with_expiration",
            "location": 18,
            "return": [],
            "arguments": {
                "web3": [
                    "bool",
                    "dict[str, list[str]]",
                    "str"
                ],
                "accounts": [
                    "list[int]"
                ],
                "chain": [
                    "list[int]"
                ],
                "make_currency_network_adapter": [
                    "list[int]"
                ]
            }
        },
        "currency_network_contract_with_trustlines": {
            "name": "currency_network_contract_with_trustlines",
            "location": 26,
            "return": [],
            "arguments": {
                "web3": [
                    "bool",
                    "list[typing.Callable[, ]]"
                ],
                "accounts": [],
                "chain": [
                    "list[int]"
                ],
                "make_currency_network_adapter": []
            }
        },
        "frozen_currency_network_contract": {
            "name": "frozen_currency_network_contract",
            "location": 40,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "currency_network_contract_with_expiration": [
                    "int",
                    "str"
                ],
                "chain": []
            }
        },
        "frozen_currency_network_adapter": {
            "name": "frozen_currency_network_adapter",
            "location": 48,
            "return": [],
            "arguments": {
                "frozen_currency_network_contract": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "make_currency_network_adapter": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "currency_network_contract_with_frozen_trustline": {
            "name": "currency_network_contract_with_frozen_trustline",
            "location": 55,
            "return": [
                "dict[str, typing.Any]",
                "list[float]",
                "typing.AbstractSet",
                "None"
            ],
            "arguments": {
                "currency_network_contract_with_trustlines": [
                    "dict[str, typing.Any]",
                    "list[float]",
                    "typing.AbstractSet",
                    "None"
                ],
                "chain": [
                    "bool",
                    "typing.TextIO",
                    "None",
                    "str",
                    "typing.Iterable[]",
                    "typing.Callable[, ]"
                ],
                "accounts": [
                    "list[float]"
                ]
            }
        },
        "currency_network_adapter_with_frozen_trustline": {
            "name": "currency_network_adapter_with_frozen_trustline",
            "location": 75,
            "return": [],
            "arguments": {
                "currency_network_contract_with_frozen_trustline": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "make_currency_network_adapter": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "frozen_currency_network_contract_with_trustlines": {
            "name": "frozen_currency_network_contract_with_trustlines",
            "location": 84,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "currency_network_contract_with_trustlines": [
                    "int",
                    "str"
                ],
                "chain": []
            }
        },
        "frozen_currency_network_adapter_with_trustlines": {
            "name": "frozen_currency_network_adapter_with_trustlines",
            "location": 94,
            "return": [],
            "arguments": {
                "frozen_currency_network_contract_with_trustlines": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "make_currency_network_adapter": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "frozen_functions_and_args": {
            "name": "frozen_functions_and_args",
            "location": 103,
            "return": [
                "list[typing.Union[list[typing.Union[typing.Text,tuple[typing.Union[int,list[str],bytes]]]],list[typing.Union[typing.Text,list[str]]],list[typing.Union[typing.Text,tuple[typing.Union[str,int,list[str]]]]]]]"
            ],
            "arguments": {
                "accounts": [
                    "str"
                ]
            }
        },
        "test_freeze_too_soon": {
            "name": "test_freeze_too_soon",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter": []
            }
        },
        "test_cannot_freeze_with_disabled_expiration": {
            "name": "test_cannot_freeze_with_disabled_expiration",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter": []
            }
        },
        "test_freeze": {
            "name": "test_freeze",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract_with_expiration": [],
                "chain": []
            }
        },
        "test_trustline_frozen_if_network_frozen": {
            "name": "test_trustline_frozen_if_network_frozen",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "frozen_currency_network_contract_with_trustlines": [],
                "accounts": []
            }
        },
        "test_interaction_fails_if_network_frozen": {
            "name": "test_interaction_fails_if_network_frozen",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "frozen_currency_network_contract_with_trustlines": [
                    "bool",
                    "str"
                ],
                "frozen_functions_and_args": [],
                "accounts": [
                    "str"
                ],
                "assert_failing_transaction": [
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_cannot_open_trustline_if_network_frozen": {
            "name": "test_cannot_open_trustline_if_network_frozen",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "frozen_currency_network_adapter": [],
                "accounts": []
            }
        },
        "test_freezing_trustline": {
            "name": "test_freezing_trustline",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract_with_trustlines": [],
                "accounts": []
            }
        },
        "test_freezeing_trustline_requires_counter_party_agreement": {
            "name": "test_freezeing_trustline_requires_counter_party_agreement",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract_with_trustlines": [],
                "accounts": []
            }
        },
        "test_unfreezing_trustline": {
            "name": "test_unfreezing_trustline",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract_with_frozen_trustline": [
                    "str",
                    "bool"
                ],
                "accounts": []
            }
        },
        "test_unfreezing_trustline_requires_counter_party_agreement": {
            "name": "test_unfreezing_trustline_requires_counter_party_agreement",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract_with_frozen_trustline": [
                    "str",
                    "bool"
                ],
                "accounts": []
            }
        },
        "test_cannot_unfreeze_trustline_if_network_frozen": {
            "name": "test_cannot_unfreeze_trustline_if_network_frozen",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "frozen_currency_network_adapter_with_trustlines": [],
                "accounts": []
            }
        },
        "test_freezing_trustline_via_set_account": {
            "name": "test_freezing_trustline_via_set_account",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract_with_trustlines": [],
                "accounts": [
                    "typing.Callable[, ]"
                ],
                "make_currency_network_adapter": [
                    "float"
                ]
            }
        },
        "test_freezing_trustline_via_set_account_default_interests": {
            "name": "test_freezing_trustline_via_set_account_default_interests",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract_with_trustlines": [],
                "accounts": [
                    "int"
                ]
            }
        },
        "test_updating_credit_limits_does_not_freeze": {
            "name": "test_updating_credit_limits_does_not_freeze",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract_with_trustlines": [],
                "accounts": []
            }
        },
        "test_freezing_trustline_event": {
            "name": "test_freezing_trustline_event",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract_with_trustlines": [],
                "web3": [
                    "str",
                    "typing.Callable[, ]"
                ],
                "accounts": []
            }
        },
        "test_interaction_fails_if_trustline_frozen": {
            "name": "test_interaction_fails_if_trustline_frozen",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter_with_frozen_trustline": [],
                "frozen_functions_and_args": [],
                "accounts": [
                    "list[str]",
                    "str"
                ],
                "assert_failing_transaction": [
                    "str",
                    "typing.Type",
                    "bool"
                ]
            }
        },
        "test_mediate_transfer_fails_if_intermediate_trustline_frozen": {
            "name": "test_mediate_transfer_fails_if_intermediate_trustline_frozen",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter_with_frozen_trustline": [],
                "accounts": [
                    "str"
                ]
            }
        }
    },
    "contracts-master/tests/currency_network/test_currency_network_interests.py": {
        "years_to_seconds": {
            "name": "years_to_seconds",
            "location": 28,
            "return": [
                "int"
            ],
            "arguments": {
                "years": []
            }
        },
        "test_currency_network_contract": {
            "name": "test_currency_network_contract",
            "location": 34,
            "return": [],
            "arguments": {
                "deploy_contract": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "currency_network_contract_no_interests": {
            "name": "currency_network_contract_no_interests",
            "location": 39,
            "return": [],
            "arguments": {
                "web3": [
                    "str",
                    "None",
                    "typing.Iterable[]"
                ]
            }
        },
        "currency_network_contract_default_interests": {
            "name": "currency_network_contract_default_interests",
            "location": 48,
            "return": [],
            "arguments": {
                "web3": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "currency_network_contract_negative_interests": {
            "name": "currency_network_contract_negative_interests",
            "location": 57,
            "return": [],
            "arguments": {
                "web3": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "currency_network_contract_custom_interests_safe_ripple": {
            "name": "currency_network_contract_custom_interests_safe_ripple",
            "location": 66,
            "return": [],
            "arguments": {
                "web3": [
                    "str"
                ]
            }
        },
        "transfer_function_name": {
            "name": "transfer_function_name",
            "location": 75,
            "return": [],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "test_interest_calculation": {
            "name": "test_interest_calculation",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "test_currency_network_contract": [],
                "balance": [],
                "start_time": [],
                "end_time": [],
                "interest_rate_given": [],
                "interest_rate_received": [],
                "result": [
                    "int",
                    "typing.Callable[, ]",
                    "list[int]",
                    "None",
                    "dict[, ]"
                ],
                "assert_failing_call": []
            }
        },
        "test_interest_calculation_approximation_boundary": {
            "name": "test_interest_calculation_approximation_boundary",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "test_currency_network_contract": [],
                "balance": [],
                "start_time": [],
                "end_time": [],
                "interest_rate_given": [],
                "interest_rate_received": [],
                "result": []
            }
        },
        "test_interests_positive_balance": {
            "name": "test_interests_positive_balance",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "chain": [],
                "currency_network_contract_default_interests": [
                    "typing.Callable[, ]",
                    "typing.Mapping",
                    "None",
                    "dict[, ]"
                ],
                "accounts": [
                    "str"
                ],
                "transfer_function_name": [
                    "list[str]",
                    "typing.Type"
                ]
            }
        },
        "test_interests_high_value": {
            "name": "test_interests_high_value",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "chain": [],
                "currency_network_contract_custom_interests_safe_ripple": [
                    "int",
                    "typing.Hashable",
                    "str",
                    "None",
                    "bytes"
                ],
                "accounts": [],
                "transfer_function_name": [
                    "dict[, ]",
                    "str",
                    "set[str]"
                ]
            }
        },
        "test_interests_negative_balance": {
            "name": "test_interests_negative_balance",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "chain": [],
                "currency_network_contract_default_interests": [
                    "typing.Callable[, ]",
                    "typing.Mapping",
                    "None",
                    "dict[, ]"
                ],
                "accounts": [
                    "str"
                ],
                "transfer_function_name": [
                    "list[str]",
                    "typing.Type"
                ]
            }
        },
        "test_no_interests": {
            "name": "test_no_interests",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "chain": [],
                "currency_network_contract_no_interests": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "accounts": [
                    "str"
                ],
                "transfer_function_name": [
                    "dict[, ]",
                    "str",
                    "list[tuple[typing.Union[str,str]]]",
                    "set[str]",
                    "dict[typing.Any, int]"
                ]
            }
        },
        "test_custom_interests": {
            "name": "test_custom_interests",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "chain": [],
                "currency_network_contract_custom_interests_safe_ripple": [
                    "int",
                    "typing.Callable[, ]",
                    "str",
                    "None"
                ],
                "accounts": [
                    "list[str]"
                ],
                "transfer_function_name": []
            }
        },
        "test_custom_interests_postive_balance": {
            "name": "test_custom_interests_postive_balance",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "chain": [],
                "currency_network_contract_custom_interests_safe_ripple": [
                    "int"
                ],
                "accounts": [],
                "transfer_function_name": [
                    "dict[, ]",
                    "str",
                    "set[str]"
                ]
            }
        },
        "test_setting_default_and_custom_interests_fails": {
            "name": "test_setting_default_and_custom_interests_fails",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "dict[str, float]"
                ]
            }
        },
        "test_safe_interest_allows_direct_transactions": {
            "name": "test_safe_interest_allows_direct_transactions",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract_custom_interests_safe_ripple": [
                    "str",
                    "dict[typing.Hashable, typing.Iterable[typing.Hashable]]",
                    "list[list[typing.Any]]",
                    "list[list[str]]",
                    "dict[, ]",
                    "None"
                ],
                "accounts": [
                    "str"
                ],
                "transfer_function_name": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_safe_interest_allows_transactions_mediated": {
            "name": "test_safe_interest_allows_transactions_mediated",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "chain": [],
                "currency_network_contract_custom_interests_safe_ripple": [
                    "int",
                    "str",
                    "None",
                    "bytes",
                    "typing.Hashable"
                ],
                "accounts": [],
                "transfer_function_name": []
            }
        },
        "test_safe_interest_disallows_transactions_mediated_if_interests_increase": {
            "name": "test_safe_interest_disallows_transactions_mediated_if_interests_increase",
            "location": 402,
            "return": [
                "None"
            ],
            "arguments": {
                "chain": [],
                "currency_network_contract_custom_interests_safe_ripple": [
                    "int",
                    "bytes",
                    "str",
                    "None",
                    "typing.Hashable"
                ],
                "accounts": [],
                "transfer_function_name": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "assert_failing_transaction": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_safe_interest_allows_transactions_mediated_solves_imbalance": {
            "name": "test_safe_interest_allows_transactions_mediated_solves_imbalance",
            "location": 430,
            "return": [
                "None"
            ],
            "arguments": {
                "chain": [],
                "currency_network_contract_custom_interests_safe_ripple": [
                    "int",
                    "str",
                    "None",
                    "bytes",
                    "typing.Hashable"
                ],
                "accounts": [],
                "transfer_function_name": []
            }
        },
        "test_safe_interest_disallows_transactions_mediated_solves_imbalance_but_overflows": {
            "name": "test_safe_interest_disallows_transactions_mediated_solves_imbalance_but_overflows",
            "location": 469,
            "return": [
                "None"
            ],
            "arguments": {
                "chain": [],
                "currency_network_contract_custom_interests_safe_ripple": [
                    "int",
                    "bytes",
                    "str",
                    "None",
                    "typing.Hashable"
                ],
                "accounts": [],
                "transfer_function_name": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "assert_failing_transaction": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_negative_interests_default_positive_balance": {
            "name": "test_negative_interests_default_positive_balance",
            "location": 512,
            "return": [
                "None"
            ],
            "arguments": {
                "chain": [],
                "currency_network_contract_negative_interests": [
                    "str",
                    "int",
                    "list[int]"
                ],
                "accounts": [],
                "transfer_function_name": [
                    "list[str]",
                    "str",
                    "dict[typing.Any, int]"
                ]
            }
        },
        "test_negative_interests_default_negative_balance": {
            "name": "test_negative_interests_default_negative_balance",
            "location": 546,
            "return": [
                "None"
            ],
            "arguments": {
                "chain": [],
                "currency_network_contract_negative_interests": [
                    "str",
                    "int",
                    "list[int]"
                ],
                "accounts": [],
                "transfer_function_name": [
                    "list[str]",
                    "str",
                    "dict[typing.Any, int]"
                ]
            }
        },
        "test_interests_overflow": {
            "name": "test_interests_overflow",
            "location": 585,
            "return": [
                "None"
            ],
            "arguments": {
                "chain": [],
                "currency_network_contract_custom_interests_safe_ripple": [
                    "int"
                ],
                "accounts": []
            }
        },
        "test_interests_underflow": {
            "name": "test_interests_underflow",
            "location": 615,
            "return": [
                "None"
            ],
            "arguments": {
                "chain": [],
                "currency_network_contract_custom_interests_safe_ripple": [
                    "int"
                ],
                "accounts": [],
                "assert_failing_transaction": []
            }
        },
        "test_interests_over_change_in_trustline": {
            "name": "test_interests_over_change_in_trustline",
            "location": 653,
            "return": [
                "None"
            ],
            "arguments": {
                "chain": [],
                "currency_network_contract_custom_interests_safe_ripple": [
                    "int",
                    "str",
                    "None",
                    "typing.Hashable"
                ],
                "accounts": []
            }
        },
        "test_payback_interests_even_over_creditline": {
            "name": "test_payback_interests_even_over_creditline",
            "location": 686,
            "return": [
                "None"
            ],
            "arguments": {
                "chain": [],
                "currency_network_contract_custom_interests_safe_ripple": [
                    "int",
                    "typing.Callable[, ]",
                    "str",
                    "None"
                ],
                "accounts": []
            }
        },
        "test_interests_over_creditline_is_usable": {
            "name": "test_interests_over_creditline_is_usable",
            "location": 714,
            "return": [
                "None"
            ],
            "arguments": {
                "chain": [],
                "currency_network_contract_custom_interests_safe_ripple": [
                    "int",
                    "str",
                    "None",
                    "typing.Hashable",
                    "bytes"
                ],
                "accounts": []
            }
        },
        "test_correct_balance_update_event_on_interest_rate_change": {
            "name": "test_correct_balance_update_event_on_interest_rate_change",
            "location": 742,
            "return": [
                "None"
            ],
            "arguments": {
                "chain": [],
                "currency_network_contract_custom_interests_safe_ripple": [
                    "dict[typing.Hashable, typing.Iterable[typing.Hashable]]"
                ],
                "accounts": []
            }
        },
        "test_apply_interests": {
            "name": "test_apply_interests",
            "location": 787,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract_custom_interests_safe_ripple": [
                    "typing.Callable[, ]"
                ],
                "chain": [],
                "accounts": [
                    "typing.Callable[, ]"
                ],
                "value": [],
                "rate": [
                    "typing.Callable[, ]"
                ],
                "make_currency_network_adapter": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_apply_interests_not_possible_when_frozen": {
            "name": "test_apply_interests_not_possible_when_frozen",
            "location": 830,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract_custom_interests_safe_ripple": [
                    "int",
                    "str",
                    "typing.Callable[, ]",
                    "dict[typing.Hashable, typing.Iterable[typing.Hashable]]"
                ],
                "accounts": [
                    "bool",
                    "typing.Callable[, ]",
                    "str",
                    "typing.Type"
                ],
                "make_currency_network_adapter": [
                    "int",
                    "str",
                    "typing.Callable[, ]",
                    "dict[typing.Hashable, typing.Iterable[typing.Hashable]]"
                ],
                "assert_failing_transaction": [
                    "int",
                    "tuple[typing.Union[str,typing.Any]]"
                ]
            }
        },
        "test_interest_calculation_sane": {
            "name": "test_interest_calculation_sane",
            "location": 865,
            "return": [
                "None"
            ],
            "arguments": {
                "test_currency_network_contract": [
                    "str"
                ],
                "rate_percent": [],
                "duration_years": [
                    "str"
                ],
                "balance": [
                    "str"
                ]
            }
        },
        "test_interests_calculation_balance_out_of_bounds": {
            "name": "test_interests_calculation_balance_out_of_bounds",
            "location": 892,
            "return": [
                "None"
            ],
            "arguments": {
                "test_currency_network_contract": [
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "balance": [
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "assert_failing_call": [
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_interest_calculation_accuracy": {
            "name": "test_interest_calculation_accuracy",
            "location": 928,
            "return": [
                "None"
            ],
            "arguments": {
                "test_currency_network_contract": [
                    "str"
                ],
                "rate_percent": [],
                "duration_years": [],
                "balance": []
            }
        }
    },
    "contracts-master/tests/currency_network/test_currency_network_migration.py": {
        "currency_network_contract": {
            "name": "currency_network_contract",
            "location": 15,
            "return": [
                "int",
                "str",
                "typing.Iterable[C]"
            ],
            "arguments": {
                "owned_currency_network": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "currency_network_adapter": {
            "name": "currency_network_adapter",
            "location": 21,
            "return": [],
            "arguments": {
                "currency_network_contract": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "make_currency_network_adapter": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "test_remove_owner": {
            "name": "test_remove_owner",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract": [
                    "str",
                    "list[]"
                ],
                "owner": [
                    "str",
                    "list[]"
                ]
            }
        },
        "test_remover_owner_not_owner": {
            "name": "test_remover_owner_not_owner",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter": [],
                "not_owner": [
                    "str"
                ]
            }
        },
        "test_remove_owner_event": {
            "name": "test_remove_owner_event",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract": [
                    "str"
                ],
                "owner": [],
                "web3": []
            }
        },
        "test_set_account": {
            "name": "test_set_account",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter": [],
                "owner": [],
                "accounts": [
                    "str"
                ],
                "creditor_index": [],
                "debtor_index": [],
                "web3": [
                    "int"
                ]
            }
        },
        "test_set_account_not_owner": {
            "name": "test_set_account_not_owner",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "not_owner": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "accounts": []
            }
        },
        "test_set_account_events": {
            "name": "test_set_account_events",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter": [],
                "owner": [],
                "accounts": [],
                "creditor_index": [],
                "debtor_index": [],
                "web3": [
                    "str"
                ]
            }
        },
        "test_set_account_add_friends": {
            "name": "test_set_account_add_friends",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter": [
                    "str",
                    "int"
                ],
                "owner": [],
                "accounts": []
            }
        },
        "test_set_account_add_users": {
            "name": "test_set_account_add_users",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter": [
                    "int"
                ],
                "owner": [
                    "bool"
                ],
                "accounts": [
                    "str"
                ]
            }
        },
        "test_set_trustline_request": {
            "name": "test_set_trustline_request",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter": [],
                "owner": [],
                "accounts": [],
                "creditor_index": [],
                "debtor_index": []
            }
        },
        "test_set_trustline_request_not_owner": {
            "name": "test_set_trustline_request_not_owner",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter": [],
                "not_owner": [],
                "accounts": []
            }
        },
        "test_set_trustline_request_event": {
            "name": "test_set_trustline_request_event",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter": [],
                "owner": [],
                "accounts": [],
                "web3": []
            }
        },
        "test_set_on_boarder": {
            "name": "test_set_on_boarder",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract": [],
                "owner": [],
                "accounts": []
            }
        },
        "test_set_on_boarder_not_owner": {
            "name": "test_set_on_boarder_not_owner",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter": [],
                "not_owner": [],
                "accounts": []
            }
        },
        "test_set_on_boarder_event": {
            "name": "test_set_on_boarder_event",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract": [],
                "owner": [],
                "accounts": [],
                "creditor_index": [],
                "debtor_index": [],
                "web3": []
            }
        },
        "test_set_debt": {
            "name": "test_set_debt",
            "location": 425,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract": [],
                "owner": [],
                "accounts": [],
                "creditor_index": [],
                "debtor_index": []
            }
        },
        "test_set_debt_not_owner": {
            "name": "test_set_debt_not_owner",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter": [],
                "not_owner": [],
                "accounts": []
            }
        },
        "test_set_debt_event": {
            "name": "test_set_debt_event",
            "location": 448,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract": [],
                "owner": [],
                "accounts": [],
                "creditor_index": [],
                "debtor_index": [],
                "web3": []
            }
        },
        "test_network_starts_frozen": {
            "name": "test_network_starts_frozen",
            "location": 468,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract": []
            }
        },
        "test_unfreeze_network": {
            "name": "test_unfreeze_network",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter": [],
                "owner": [
                    "int",
                    "str",
                    "tuple[typing.Union[str,dict[, ]]]"
                ]
            }
        },
        "test_unfreeze_network_not_owner": {
            "name": "test_unfreeze_network_not_owner",
            "location": 477,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter": [],
                "not_owner": []
            }
        },
        "test_unfreeze_network_event": {
            "name": "test_unfreeze_network_event",
            "location": 483,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter": [],
                "owner": [],
                "web3": []
            }
        }
    },
    "contracts-master/tests/currency_network/test_currency_network_onboarding.py": {
        "open_trustline": {
            "name": "open_trustline",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "network": [
                    "float",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ],
                "a": [
                    "float",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ],
                "b": [
                    "float",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "test_no_onboarder": {
            "name": "test_no_onboarder",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract": [
                    "str"
                ],
                "accounts": [
                    "str"
                ]
            }
        },
        "test_onboarder_simple_trustline": {
            "name": "test_onboarder_simple_trustline",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract": [],
                "accounts": []
            }
        },
        "test_cannot_change_no_onboarder": {
            "name": "test_cannot_change_no_onboarder",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract": [
                    "str"
                ],
                "accounts": [
                    "str"
                ]
            }
        },
        "test_cannot_change_onboarder": {
            "name": "test_cannot_change_onboarder",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract": [],
                "accounts": []
            }
        },
        "test_set_account_onboards": {
            "name": "test_set_account_onboards",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract": [
                    "int",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ],
                "accounts": [
                    "int",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "test_onboarding_event_no_onboarder": {
            "name": "test_onboarding_event_no_onboarder",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract": [],
                "web3": [
                    "Callable",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "accounts": []
            }
        },
        "test_onboarding_event_with_onboarder": {
            "name": "test_onboarding_event_with_onboarder",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract": [],
                "web3": [
                    "Callable",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "accounts": [
                    "str"
                ]
            }
        },
        "test_onboarding_no_accept_tl": {
            "name": "test_onboarding_no_accept_tl",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract": [
                    "Dict[str,Any]",
                    "str"
                ],
                "accounts": [
                    "str",
                    "Dict[str,Any]"
                ],
                "assert_failing_transaction": [
                    "str"
                ]
            }
        }
    },
    "contracts-master/tests/currency_network/test_currency_network_receiver_pays.py": {
        "currency_network_contract_with_trustlines": {
            "name": "currency_network_contract_with_trustlines",
            "location": 19,
            "return": [
                "Tuple[Union[float,float]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "web3": [
                    "bool",
                    "List[Callable]"
                ],
                "accounts": [
                    "int"
                ]
            }
        },
        "currency_network_adapter_with_trustlines": {
            "name": "currency_network_adapter_with_trustlines",
            "location": 29,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "currency_network_contract_with_trustlines": [
                    "int",
                    "Callable",
                    "str"
                ],
                "make_currency_network_adapter": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "currency_network_contract_with_high_trustlines": {
            "name": "currency_network_contract_with_high_trustlines",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "web3": [
                    "bool",
                    "List[Callable]"
                ],
                "accounts": [
                    "str"
                ]
            }
        },
        "test_transfer_0_mediators": {
            "name": "test_transfer_0_mediators",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract_with_trustlines": [],
                "accounts": [
                    "Optional[Set[str]]"
                ]
            }
        },
        "test_transfer_0_mediators_fail_not_enough_credit": {
            "name": "test_transfer_0_mediators_fail_not_enough_credit",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter_with_trustlines": [
                    "bool"
                ],
                "accounts": [
                    "bool"
                ]
            }
        },
        "test_transfer_1_mediators": {
            "name": "test_transfer_1_mediators",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract_with_trustlines": [],
                "accounts": [
                    "dict"
                ]
            }
        },
        "test_transfer_1_mediator_enough_credit_because_of_fee": {
            "name": "test_transfer_1_mediator_enough_credit_because_of_fee",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract_with_trustlines": [],
                "accounts": [
                    "bool"
                ]
            }
        },
        "test_transfer_3_mediators": {
            "name": "test_transfer_3_mediators",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract_with_trustlines": [],
                "accounts": [
                    "int"
                ]
            }
        },
        "test_rounding_fee": {
            "name": "test_rounding_fee",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract_with_trustlines": [],
                "accounts": []
            }
        },
        "test_max_fee": {
            "name": "test_max_fee",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter_with_trustlines": [
                    "bool"
                ],
                "accounts": [
                    "bool"
                ]
            }
        },
        "test_max_fee_3_mediators": {
            "name": "test_max_fee_3_mediators",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter_with_trustlines": [
                    "bool"
                ],
                "accounts": [
                    "bool"
                ]
            }
        },
        "test_send_back_with_fees": {
            "name": "test_send_back_with_fees",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract_with_trustlines": [],
                "accounts": [
                    "bytes"
                ]
            }
        },
        "test_send_more_with_fees": {
            "name": "test_send_more_with_fees",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract_with_trustlines": [],
                "accounts": [
                    "bytes"
                ]
            }
        },
        "test_transfer_1_received": {
            "name": "test_transfer_1_received",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract_with_trustlines": [],
                "accounts": []
            }
        },
        "test_transfer_0_received": {
            "name": "test_transfer_0_received",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract_with_trustlines": [],
                "accounts": []
            }
        },
        "test_fees_are_the_same": {
            "name": "test_fees_are_the_same",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract_with_high_trustlines": [
                    "str"
                ],
                "accounts": [
                    "bytes",
                    "Callable",
                    "float"
                ],
                "value": [
                    "float",
                    "int",
                    "Callable"
                ]
            }
        }
    },
    "contracts-master/tests/currency_network/test_currency_network_registry.py": {
        "currency_network_registry_contract": {
            "name": "currency_network_registry_contract",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "deploy_contract": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "initialized_currency_network_registry_contract": {
            "name": "initialized_currency_network_registry_contract",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "currency_network_registry_contract": [
                    "slice"
                ],
                "currency_network_contract": [
                    "slice"
                ]
            }
        },
        "test_add_network": {
            "name": "test_add_network",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_registry_contract": [
                    "bool"
                ],
                "currency_network_contract": [
                    "int"
                ]
            }
        },
        "test_add_network_multiple": {
            "name": "test_add_network_multiple",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "initialized_currency_network_registry_contract": [],
                "currency_network_contract": [],
                "accounts": []
            }
        },
        "test_add_network_twice_does_not_change_metadata": {
            "name": "test_add_network_twice_does_not_change_metadata",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "initialized_currency_network_registry_contract": [
                    "int"
                ],
                "currency_network_contract": [
                    "int"
                ],
                "accounts": [
                    "int"
                ]
            }
        },
        "test_add_network_multiple_events": {
            "name": "test_add_network_multiple_events",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_registry_contract": [],
                "currency_network_contract": [
                    "int"
                ],
                "accounts": []
            }
        },
        "test_add_invalid_network": {
            "name": "test_add_invalid_network",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "initialized_currency_network_registry_contract": [
                    "int"
                ],
                "accounts": [
                    "int"
                ],
                "assert_failing_transaction": [
                    "int"
                ]
            }
        },
        "test_get_address": {
            "name": "test_get_address",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "initialized_currency_network_registry_contract": [
                    "int"
                ],
                "currency_network_contract": [
                    "int"
                ]
            }
        },
        "test_get_metadata": {
            "name": "test_get_metadata",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "initialized_currency_network_registry_contract": [
                    "int",
                    "List[str]",
                    "Optional[bool]",
                    "None"
                ],
                "currency_network_contract": [
                    "int",
                    "List[str]",
                    "Optional[bool]",
                    "None"
                ],
                "default_account": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_no_events": {
            "name": "test_no_events",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_registry_contract": [
                    "tests.setup.SetupTest"
                ]
            }
        },
        "test_add_event": {
            "name": "test_add_event",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "initialized_currency_network_registry_contract": [
                    "tests.setup.SetupTest"
                ],
                "default_account": [
                    "List[Dict]",
                    "List[str]",
                    "List[dict]",
                    "bool"
                ]
            }
        }
    },
    "contracts-master/tests/currency_network/test_currency_network_v2.py": {
        "test_open_trustline_with_transfer": {
            "name": "test_open_trustline_with_transfer",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_v2_adapter": [],
                "accounts": [],
                "transfer": [],
                "web3": [
                    "Callable",
                    "Optional[Mapping]",
                    "Mapping",
                    "None"
                ]
            }
        },
        "test_trustline_request_event_with_transfer": {
            "name": "test_trustline_request_event_with_transfer",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_v2_adapter": [
                    "Type",
                    "str"
                ],
                "accounts": [],
                "web3": [
                    "Callable",
                    "Optional[Mapping]",
                    "Mapping",
                    "None"
                ],
                "transfer": [
                    "str"
                ]
            }
        },
        "test_update_trustline_with_transfer": {
            "name": "test_update_trustline_with_transfer",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_v2_adapter": [
                    "Type",
                    "str"
                ],
                "accounts": []
            }
        },
        "test_update_trustline_request_transfer_initiator": {
            "name": "test_update_trustline_request_transfer_initiator",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_v2_adapter": [
                    "Type",
                    "str"
                ],
                "accounts": [],
                "transfer": [
                    "Type",
                    "str"
                ]
            }
        },
        "test_update_trustline_request_transfer_counterparty": {
            "name": "test_update_trustline_request_transfer_counterparty",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_v2_adapter": [
                    "Type",
                    "str"
                ],
                "accounts": [],
                "transfer": [
                    "Type",
                    "str"
                ]
            }
        },
        "test_open_trustline_overflow_balance": {
            "name": "test_open_trustline_overflow_balance",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_v2_adapter": [
                    "Type",
                    "bool",
                    "str"
                ],
                "accounts": [],
                "balance": [
                    "Type",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "contracts-master/tests/currency_network/test_deploy.py": {
        "test_deploy_networks": {
            "name": "test_deploy_networks",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "float",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.Mock"
                ]
            }
        },
        "test_deploy_network": {
            "name": "test_deploy_network",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "float",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.Mock"
                ]
            }
        },
        "test_deploy_beacon": {
            "name": "test_deploy_beacon",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "bytes"
                ],
                "accounts": [
                    "bytes",
                    "str",
                    "bool",
                    "int"
                ],
                "currency_network_contract": [
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "tests.components.withings.common.ComponentFactory"
                ],
                "account_keys": [
                    "str"
                ]
            }
        },
        "test_deploy_currency_network_proxy": {
            "name": "test_deploy_currency_network_proxy",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "Dict[str,Any]",
                    "bool"
                ],
                "beacon_with_currency_network": [
                    "Dict[str,Any]",
                    "bool"
                ],
                "accounts": [
                    "str",
                    "List[dict[str,str]]",
                    "int",
                    "List[Dict[str,str]]"
                ],
                "account_keys": [
                    "str",
                    "bytes",
                    "Dict[str,str]"
                ],
                "contract_assets": [
                    "static_frame.core.util.DtypeSpecifier"
                ]
            }
        },
        "test_verify_owner_not_deployer_default_account": {
            "name": "test_verify_owner_not_deployer_default_account",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "core.models.Grouping",
                    "static_frame.core.util.DtypeSpecifier"
                ],
                "accounts": [
                    "str"
                ]
            }
        },
        "test_verify_owner_not_deployer_private_key": {
            "name": "test_verify_owner_not_deployer_private_key",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "bytes",
                    "str",
                    "aiokatcp.core.Address"
                ],
                "accounts": [
                    "bytes",
                    "str",
                    "aiokatcp.core.Address"
                ],
                "account_keys": [
                    "bytes",
                    "str",
                    "aiokatcp.core.Address"
                ]
            }
        },
        "test_deploy_and_migrate_network": {
            "name": "test_deploy_and_migrate_network",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "core.models.Recipe",
                    "core.models.Grouping"
                ],
                "beacon_with_currency_network": [
                    "str",
                    "core.models.Recipe",
                    "core.models.Grouping"
                ],
                "currency_network_contract_with_trustlines": [
                    "int"
                ],
                "owner": [
                    "str",
                    "core.models.Recipe",
                    "core.models.Grouping"
                ],
                "not_owner_key": [
                    "str",
                    "core.models.Recipe",
                    "core.models.Grouping"
                ],
                "chain": [
                    "bool"
                ]
            }
        }
    },
    "contracts-master/tests/currency_network/test_gas_costs_currency_network.py": {
        "currency_network_contract": {
            "name": "currency_network_contract",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "bytearray"
                ]
            }
        },
        "currency_network_contract_with_trustlines": {
            "name": "currency_network_contract_with_trustlines",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "web3": [
                    "str"
                ],
                "accounts": [
                    "str",
                    "Dict",
                    "Callable"
                ]
            }
        },
        "test_cost_transfer_0_mediators": {
            "name": "test_cost_transfer_0_mediators",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "Callable",
                    "bool"
                ],
                "currency_network_contract_with_trustlines": [
                    "str",
                    "bool",
                    "List[int]"
                ],
                "accounts": [
                    "bool",
                    "Callable",
                    "str",
                    "int"
                ],
                "gas_values_snapshot": [
                    "Callable",
                    "bool"
                ]
            }
        },
        "test_cost_transfer_1_mediators": {
            "name": "test_cost_transfer_1_mediators",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "Union[Tuple[int],Tuple[int,int]]",
                    "bool",
                    "Tuple[int]"
                ],
                "currency_network_contract_with_trustlines": [
                    "str",
                    "bool",
                    "List[int]"
                ],
                "accounts": [
                    "List[float]",
                    "float",
                    "int",
                    "bool"
                ],
                "gas_values_snapshot": [
                    "Union[Tuple[int],Tuple[int,int]]",
                    "bool",
                    "Tuple[int]"
                ]
            }
        },
        "test_cost_transfer_2_mediators": {
            "name": "test_cost_transfer_2_mediators",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "bool",
                    "Callable",
                    "Tuple[int]",
                    "Union[Tuple[int],Tuple[int,int]]",
                    "Iterable[Any]"
                ],
                "currency_network_contract_with_trustlines": [
                    "str",
                    "bool",
                    "List[int]"
                ],
                "accounts": [
                    "int",
                    "Callable",
                    "bool"
                ],
                "gas_values_snapshot": [
                    "bool",
                    "Callable",
                    "Tuple[int]",
                    "Union[Tuple[int],Tuple[int,int]]",
                    "Iterable[Any]"
                ]
            }
        },
        "test_cost_transfer_3_mediators": {
            "name": "test_cost_transfer_3_mediators",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "bool",
                    "Tuple[int]",
                    "Union[Tuple[int],Tuple[int,int]]",
                    "int"
                ],
                "currency_network_contract_with_trustlines": [
                    "str",
                    "bool",
                    "List[int]"
                ],
                "accounts": [
                    "int",
                    "List[float]",
                    "bool"
                ],
                "gas_values_snapshot": [
                    "bool",
                    "Tuple[int]",
                    "Union[Tuple[int],Tuple[int,int]]",
                    "int"
                ]
            }
        },
        "test_cost_first_trustline_request": {
            "name": "test_cost_first_trustline_request",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [],
                "currency_network_contract": [
                    "str"
                ],
                "accounts": [
                    "Callable",
                    "bool",
                    "str"
                ],
                "gas_values_snapshot": []
            }
        },
        "test_cost_second_trustline_request": {
            "name": "test_cost_second_trustline_request",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [],
                "currency_network_contract": [
                    "str"
                ],
                "accounts": [
                    "Callable",
                    "bool",
                    "str"
                ],
                "gas_values_snapshot": []
            }
        },
        "test_cost_first_trustline": {
            "name": "test_cost_first_trustline",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "static_frame.core.util.PathSpecifier",
                    "Tuple[int]",
                    "Union[Tuple[int],Tuple[int,int]]",
                    "bool"
                ],
                "currency_network_contract": [
                    "str",
                    "List[int]",
                    "bool"
                ],
                "accounts": [
                    "bool",
                    "str",
                    "int"
                ],
                "gas_values_snapshot": [
                    "int",
                    "static_frame.core.util.PathSpecifier",
                    "Tuple[int]",
                    "Union[Tuple[int],Tuple[int,int]]",
                    "bool"
                ]
            }
        },
        "test_cost_update_trustline": {
            "name": "test_cost_update_trustline",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "Optional[Exception]",
                    "Exception",
                    "bool",
                    "Union[Tuple[int],Tuple[int,int]]",
                    "None",
                    "Tuple[int]"
                ],
                "currency_network_contract_with_trustlines": [
                    "str"
                ],
                "accounts": [
                    "bool",
                    "str",
                    "Type",
                    "int"
                ],
                "gas_values_snapshot": [
                    "Optional[Exception]",
                    "Exception",
                    "bool",
                    "Union[Tuple[int],Tuple[int,int]]",
                    "None",
                    "Tuple[int]"
                ]
            }
        },
        "test_cost_update_reduce_need_no_accept_trustline": {
            "name": "test_cost_update_reduce_need_no_accept_trustline",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "Optional[Exception]",
                    "Callable",
                    "Exception",
                    "None"
                ],
                "currency_network_contract_with_trustlines": [
                    "str",
                    "bool"
                ],
                "accounts": [
                    "bool",
                    "str",
                    "Type",
                    "int"
                ],
                "gas_values_snapshot": [
                    "Optional[Exception]",
                    "Callable",
                    "Exception",
                    "None"
                ]
            }
        },
        "test_cost_close_trustline_no_transfer": {
            "name": "test_cost_close_trustline_no_transfer",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "Callable"
                ],
                "currency_network_contract_with_trustlines": [
                    "str",
                    "bool"
                ],
                "accounts": [
                    "List[float]",
                    "float",
                    "int",
                    "Callable"
                ],
                "gas_values_snapshot": [
                    "Callable"
                ]
            }
        },
        "test_cost_close_trustline_triangular_transfer_2_mediators": {
            "name": "test_cost_close_trustline_triangular_transfer_2_mediators",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "Callable",
                    "int",
                    "float",
                    "Hashable"
                ],
                "currency_network_contract_with_trustlines": [
                    "str",
                    "bool",
                    "List[int]"
                ],
                "accounts": [
                    "List[str]",
                    "str",
                    "bool",
                    "Union[int,str]",
                    "int"
                ],
                "gas_values_snapshot": [
                    "Callable",
                    "int",
                    "float",
                    "Hashable"
                ]
            }
        },
        "test_cost_close_trustline_triangular_transfer_4_mediators": {
            "name": "test_cost_close_trustline_triangular_transfer_4_mediators",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "Callable",
                    "int",
                    "float",
                    "Hashable"
                ],
                "currency_network_contract_with_trustlines": [
                    "str",
                    "bool",
                    "List[int]"
                ],
                "accounts": [
                    "int",
                    "List[float]",
                    "bool"
                ],
                "gas_values_snapshot": [
                    "Callable",
                    "int",
                    "float",
                    "Hashable"
                ]
            }
        },
        "test_cancel_trustline_update": {
            "name": "test_cancel_trustline_update",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "Callable",
                    "Hashable"
                ],
                "currency_network_contract": [],
                "accounts": [
                    "Callable",
                    "str",
                    "bool"
                ],
                "gas_values_snapshot": [
                    "int",
                    "Callable",
                    "Hashable"
                ]
            }
        }
    },
    "contracts-master/tests/currency_network/test_information_from_events.py": {
        "currency_network_contract_with_trustlines": {
            "name": "currency_network_contract_with_trustlines",
            "location": 29,
            "return": [],
            "arguments": {
                "web3": [],
                "accounts": []
            }
        },
        "currency_network_with_pending_interests": {
            "name": "currency_network_with_pending_interests",
            "location": 39,
            "return": [],
            "arguments": {
                "web3": [],
                "currency_network_contract_with_trustlines": [],
                "accounts": [],
                "chain": []
            }
        },
        "currency_network_with_different_interests": {
            "name": "currency_network_with_different_interests",
            "location": 60,
            "return": [],
            "arguments": {
                "web3": [],
                "currency_network_contract_with_trustlines": [],
                "accounts": [],
                "chain": []
            }
        },
        "calculate_interests": {
            "name": "calculate_interests",
            "location": 80,
            "return": [],
            "arguments": {
                "balance": [],
                "delta_time_in_seconds": [],
                "highest_order": []
            }
        },
        "event_id": {
            "name": "event_id",
            "location": 109,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "get_interests_for_trustline": {
            "name": "get_interests_for_trustline",
            "location": 113,
            "return": [],
            "arguments": {
                "currency_network_contract": [],
                "a": [],
                "b": []
            }
        },
        "get_all_balance_update_events_for_trustline": {
            "name": "get_all_balance_update_events_for_trustline",
            "location": 136,
            "return": [],
            "arguments": {
                "currency_network_contract": [],
                "a": [],
                "b": []
            }
        },
        "get_all_balances_for_trustline": {
            "name": "get_all_balances_for_trustline",
            "location": 157,
            "return": [],
            "arguments": {
                "currency_network_contract": [],
                "a": [],
                "b": []
            }
        },
        "get_balance_update_events_for_transfer": {
            "name": "get_balance_update_events_for_transfer",
            "location": 180,
            "return": [],
            "arguments": {
                "currency_network_contract": [],
                "transfer_event": []
            }
        },
        "get_transfer_path": {
            "name": "get_transfer_path",
            "location": 221,
            "return": [],
            "arguments": {
                "currency_network_contract": [],
                "transfer_event": []
            }
        },
        "get_previous_balance": {
            "name": "get_previous_balance",
            "location": 234,
            "return": [],
            "arguments": {
                "currency_network": [],
                "a": [],
                "b": [],
                "balance_update_event": []
            }
        },
        "get_interest_at": {
            "name": "get_interest_at",
            "location": 255,
            "return": [],
            "arguments": {
                "currency_network_contract": [],
                "balance_update_event": []
            }
        },
        "get_delta_balances_of_transfer": {
            "name": "get_delta_balances_of_transfer",
            "location": 278,
            "return": [],
            "arguments": {
                "currency_network_contract": [],
                "transfer_event": []
            }
        },
        "test_get_transfer_path_information": {
            "name": "test_get_transfer_path_information",
            "location": 328,
            "return": [],
            "arguments": {
                "currency_network_contract_with_trustlines": [],
                "accounts": [],
                "path": [],
                "fee_payer": []
            }
        },
        "test_get_value_information": {
            "name": "test_get_value_information",
            "location": 367,
            "return": [],
            "arguments": {
                "currency_network_with_pending_interests": [],
                "accounts": [],
                "path": [],
                "value": [],
                "fee_payer": [],
                "delta_values": []
            }
        },
        "test_get_balance_update_events": {
            "name": "test_get_balance_update_events",
            "location": 410,
            "return": [],
            "arguments": {
                "currency_network_contract_with_trustlines": [],
                "accounts": [],
                "path": [],
                "fee_payer": []
            }
        },
        "test_get_interests_for_trustline": {
            "name": "test_get_interests_for_trustline",
            "location": 444,
            "return": [],
            "arguments": {
                "currency_network_contract_with_trustlines": [],
                "web3": [],
                "chain": [],
                "accounts": [],
                "years": [],
                "interests": []
            }
        },
        "get_all_balances_for_trustline.balance": {
            "name": "balance",
            "location": 163,
            "return": [],
            "arguments": {
                "balance_update_event": []
            }
        }
    },
    "contracts-master/tests/currency_network/test_migrate_network_tool.py": {
        "owner": {
            "name": "owner",
            "location": 34,
            "return": [],
            "arguments": {
                "accounts": []
            }
        },
        "new_contract": {
            "name": "new_contract",
            "location": 39,
            "return": [],
            "arguments": {
                "web3": [
                    "int",
                    "str",
                    "typing.Callable[, ]"
                ],
                "owner": [
                    "int",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "old_contract": {
            "name": "old_contract",
            "location": 48,
            "return": [
                "dict[, ]",
                "str",
                "dict[str, typing.Any]",
                "set[str]",
                "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal]]",
                "list[tuple[typing.Union[int,int,int,int,int,int]]]",
                "int"
            ],
            "arguments": {
                "web3": [
                    "bool"
                ],
                "accounts": [
                    "str",
                    "bytes"
                ],
                "chain": [],
                "on_boarders": [
                    "str",
                    "int"
                ],
                "on_boardees": [
                    "str",
                    "int"
                ],
                "creditors": [
                    "str",
                    "int"
                ],
                "debtors": [
                    "str",
                    "int"
                ],
                "debt_values": [
                    "str",
                    "int"
                ],
                "make_currency_network_adapter": [
                    "str",
                    "int"
                ]
            }
        },
        "old_contract_adapter": {
            "name": "old_contract_adapter",
            "location": 132,
            "return": [],
            "arguments": {
                "old_contract": [
                    "int",
                    "None",
                    "list[]"
                ],
                "make_currency_network_adapter": [
                    "int",
                    "None",
                    "list[]"
                ]
            }
        },
        "new_contract_adapter": {
            "name": "new_contract_adapter",
            "location": 137,
            "return": [],
            "arguments": {
                "new_contract": [
                    "str",
                    "int"
                ],
                "make_currency_network_adapter": [
                    "str",
                    "int"
                ]
            }
        },
        "assert_accounts_migrated": {
            "name": "assert_accounts_migrated",
            "location": 142,
            "return": [],
            "arguments": {
                "new_contract": [
                    "typing.Literal",
                    "typing.Callable[, ]"
                ],
                "accounts": [
                    "typing.Literal",
                    "typing.Callable[, ]"
                ]
            }
        },
        "assert_pending_trusltines_migrated": {
            "name": "assert_pending_trusltines_migrated",
            "location": 169,
            "return": [],
            "arguments": {
                "new_contract_adapter": [
                    "bool",
                    "str",
                    "list[dict[, ]]",
                    "typing.Sequence[str]",
                    "typing.Type"
                ],
                "accounts": [
                    "bool",
                    "str",
                    "list[dict[, ]]",
                    "typing.Sequence[str]",
                    "typing.Type"
                ]
            }
        },
        "on_boarders": {
            "name": "on_boarders",
            "location": 208,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "accounts": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "on_boardees": {
            "name": "on_boardees",
            "location": 215,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "accounts": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "assert_on_boarders_migrated": {
            "name": "assert_on_boarders_migrated",
            "location": 220,
            "return": [],
            "arguments": {
                "new_contract": [
                    "bool",
                    "list[dict[str, typing.Any]]",
                    "float"
                ],
                "on_boarders": [
                    "bool",
                    "list[dict[str, typing.Any]]",
                    "float"
                ],
                "on_boardees": [
                    "bool",
                    "list[dict[str, typing.Any]]",
                    "float"
                ]
            }
        },
        "creditors": {
            "name": "creditors",
            "location": 229,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "accounts": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "debtors": {
            "name": "debtors",
            "location": 234,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "accounts": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "debt_values": {
            "name": "debt_values",
            "location": 239,
            "return": [
                "list[int]"
            ],
            "arguments": {}
        },
        "assert_debts_migrated": {
            "name": "assert_debts_migrated",
            "location": 244,
            "return": [],
            "arguments": {
                "new_contract": [
                    "bool",
                    "float",
                    "str"
                ],
                "creditors": [
                    "bool",
                    "float",
                    "str"
                ],
                "debtors": [
                    "bool",
                    "float",
                    "str"
                ],
                "debt_values": [
                    "bool",
                    "float",
                    "str"
                ],
                "make_currency_network_adapter": [
                    "bool",
                    "float",
                    "str"
                ]
            }
        },
        "network_migrater": {
            "name": "network_migrater",
            "location": 258,
            "return": [
                "NetworkMigrater"
            ],
            "arguments": {
                "web3": [
                    "int"
                ],
                "new_contract": [
                    "int"
                ],
                "owner": [
                    "int"
                ],
                "old_contract": [
                    "int"
                ]
            }
        },
        "test_migrate_network_accounts": {
            "name": "test_migrate_network_accounts",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "network_migrater": [],
                "assert_accounts_migrated": []
            }
        },
        "test_migrate_network_on_boarders": {
            "name": "test_migrate_network_on_boarders",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "network_migrater": [],
                "assert_on_boarders_migrated": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "test_migrate_network_debts": {
            "name": "test_migrate_network_debts",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "network_migrater": [],
                "assert_debts_migrated": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "test_unfreeze_new_network": {
            "name": "test_unfreeze_new_network",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "network_migrater": [],
                "new_contract": [
                    "bool",
                    "typing.Iterable[typing.Iterable[typing.Any]]"
                ]
            }
        },
        "test_remove_owner": {
            "name": "test_remove_owner",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "network_migrater": [],
                "new_contract": []
            }
        },
        "test_migrate_network_global": {
            "name": "test_migrate_network_global",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "network_migrater": [],
                "new_contract": [],
                "assert_debts_migrated": [
                    "bool"
                ],
                "assert_on_boarders_migrated": [
                    "bool"
                ],
                "assert_accounts_migrated": [
                    "bool"
                ],
                "assert_pending_trusltines_migrated": [
                    "bool"
                ]
            }
        },
        "test_get_last_frozen_status_of_account": {
            "name": "test_get_last_frozen_status_of_account",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "old_contract_adapter": [],
                "accounts": [
                    "list[str]"
                ]
            }
        },
        "test_get_pending_trustline_requests": {
            "name": "test_get_pending_trustline_requests",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "network_migrater": [],
                "assert_pending_trusltines_migrated": [
                    "str"
                ]
            }
        },
        "assert_accounts_migrated.assert_migrated": {
            "name": "assert_migrated",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "assert_pending_trusltines_migrated.assert_migrated": {
            "name": "assert_migrated",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "assert_on_boarders_migrated.assert_migrated": {
            "name": "assert_migrated",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "assert_debts_migrated.assert_debt": {
            "name": "assert_debt",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "contracts-master/tests/currency_network/__init__.py": {},
    "contracts-master/tests/currency_network/upgradeable/test_beacon.py": {
        "test_implementation_set": {
            "name": "test_implementation_set",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "proxy_beacon": [],
                "upgradeable_implementation": []
            }
        },
        "test_update_implementation": {
            "name": "test_update_implementation",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "proxy_beacon": [
                    "str"
                ],
                "upgraded_implementation": [
                    "str"
                ],
                "owner": [
                    "int"
                ]
            }
        },
        "test_update_implementation_not_owner": {
            "name": "test_update_implementation_not_owner",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "proxy_beacon": [
                    "float"
                ],
                "upgraded_implementation": [
                    "float"
                ],
                "not_owner": [
                    "float"
                ],
                "assert_failing_transaction": [
                    "float"
                ]
            }
        },
        "test_update_implementation_event": {
            "name": "test_update_implementation_event",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "proxy_beacon": [
                    "Callable",
                    "str"
                ],
                "upgraded_implementation": [
                    "str"
                ],
                "owner": [
                    "int"
                ]
            }
        }
    },
    "contracts-master/tests/currency_network/upgradeable/test_upgradeable_proxy.py": {
        "proxy": {
            "name": "proxy",
            "location": 13,
            "return": [
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "owner_key": [
                    "bool",
                    "float",
                    "str",
                    "int"
                ],
                "contract_assets": [
                    "str",
                    "bool",
                    "float",
                    "int"
                ],
                "web3": [
                    "bool",
                    "float",
                    "str",
                    "int"
                ],
                "upgradeable_implementation": [
                    "Optional[\"AbstractPurpose\"]",
                    "str",
                    "int",
                    "bool"
                ],
                "upgradeable_initialized_value": [
                    "None",
                    "str",
                    "Optional[AbstractPurpose]",
                    "int",
                    "bool"
                ],
                "proxy_beacon": [
                    "bool",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "new_proxy_beacon": {
            "name": "new_proxy_beacon",
            "location": 34,
            "return": [
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "owner_key": [],
                "contract_assets": [],
                "web3": [],
                "upgraded_implementation": []
            }
        },
        "upgradeable_initialized_value": {
            "name": "upgradeable_initialized_value",
            "location": 45,
            "return": [
                "int",
                "str",
                "Tuple[int,int]",
                "Tuple[str,int]"
            ],
            "arguments": {}
        },
        "upgraded_initialized_value": {
            "name": "upgraded_initialized_value",
            "location": 51,
            "return": [
                "int",
                "str",
                "Dict[str,Any]",
                "Type[T]"
            ],
            "arguments": {
                "upgradeable_initialized_value": [
                    "int",
                    "str",
                    "T"
                ]
            }
        },
        "proxied_upgradeable_contract": {
            "name": "proxied_upgradeable_contract",
            "location": 60,
            "return": [
                "bytearray",
                "float",
                "List[int]"
            ],
            "arguments": {
                "proxy": [
                    "str",
                    "Callable"
                ],
                "contract_assets": [
                    "str",
                    "Callable"
                ],
                "web3": [
                    "str",
                    "Callable"
                ]
            }
        },
        "proxied_upgraded_contract": {
            "name": "proxied_upgraded_contract",
            "location": 69,
            "return": [
                "bytearray",
                "float",
                "List[int]"
            ],
            "arguments": {
                "proxy": [
                    "str",
                    "Callable"
                ],
                "contract_assets": [
                    "str",
                    "Callable"
                ],
                "web3": [
                    "str",
                    "Callable"
                ]
            }
        },
        "test_proxy_admin": {
            "name": "test_proxy_admin",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "proxy": [
                    "str",
                    "Callable"
                ],
                "owner": [
                    "str",
                    "Callable"
                ]
            }
        },
        "test_get_admin_not_admin": {
            "name": "test_get_admin_not_admin",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "proxy": [
                    "str"
                ],
                "not_owner": [
                    "str"
                ]
            }
        },
        "test_get_beacon": {
            "name": "test_get_beacon",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "proxy": [
                    "str"
                ],
                "owner": [
                    "str"
                ],
                "proxy_beacon": [
                    "str"
                ]
            }
        },
        "test_get_beacon_not_admin": {
            "name": "test_get_beacon_not_admin",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "proxy": [
                    "Callable",
                    "Dict[str,Union[str,Any]]"
                ],
                "not_owner": [
                    "Callable",
                    "Dict[str,Union[str,Any]]"
                ],
                "assert_failing_call": [
                    "Callable",
                    "Dict[str,Union[str,Any]]"
                ]
            }
        },
        "test_get_implementation": {
            "name": "test_get_implementation",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "proxy": [
                    "str"
                ],
                "owner": [
                    "str"
                ],
                "upgradeable_implementation": [
                    "str"
                ]
            }
        },
        "test_get_implementation_not_admin": {
            "name": "test_get_implementation_not_admin",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "proxy": [
                    "Callable",
                    "Dict[str,Union[str,Any]]"
                ],
                "not_owner": [
                    "Callable",
                    "Dict[str,Union[str,Any]]"
                ],
                "assert_failing_call": [
                    "Callable",
                    "Dict[str,Union[str,Any]]"
                ]
            }
        },
        "test_call_proxied_function": {
            "name": "test_call_proxied_function",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "proxied_upgradeable_contract": [
                    "str",
                    "float",
                    "bool",
                    "Callable"
                ],
                "not_owner": [
                    "str",
                    "float",
                    "bool",
                    "Callable"
                ]
            }
        },
        "test_call_proxied_function_admin": {
            "name": "test_call_proxied_function_admin",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "proxied_upgradeable_contract": [],
                "owner": [],
                "assert_failing_transaction": []
            }
        },
        "test_call_payable_proxied_function_admin": {
            "name": "test_call_payable_proxied_function_admin",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "proxied_upgradeable_contract": [
                    "Callable",
                    "int"
                ],
                "owner": [
                    "Callable",
                    "int"
                ],
                "assert_failing_transaction": [
                    "Callable",
                    "int"
                ]
            }
        },
        "test_call_proxied_init_value": {
            "name": "test_call_proxied_init_value",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "proxied_upgradeable_contract": [
                    "Iterable",
                    "Sequence[str]",
                    "str"
                ],
                "not_owner": [
                    "Iterable",
                    "Sequence[str]",
                    "str"
                ],
                "upgradeable_initialized_value": [
                    "Iterable",
                    "Sequence[str]",
                    "str"
                ]
            }
        },
        "test_change_admin": {
            "name": "test_change_admin",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "proxy": [
                    "float"
                ],
                "not_owner": [
                    "float"
                ],
                "owner": [
                    "int",
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "test_change_admin_not_admin": {
            "name": "test_change_admin_not_admin",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "proxy": [
                    "str",
                    "Sequence[int]"
                ],
                "not_owner": [
                    "str",
                    "Sequence[int]"
                ],
                "owner": [
                    "str",
                    "Sequence[int]"
                ],
                "assert_failing_transaction": [
                    "str",
                    "Sequence[int]"
                ]
            }
        },
        "test_change_admin_event": {
            "name": "test_change_admin_event",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "proxy": [
                    "str"
                ],
                "not_owner": [
                    "str",
                    "Dict[str,Any]"
                ],
                "owner": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "test_change_beacon": {
            "name": "test_change_beacon",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "proxy": [
                    "Callable"
                ],
                "owner": [
                    "Callable"
                ],
                "new_proxy_beacon": [
                    "Callable"
                ],
                "not_owner": [
                    "bool"
                ],
                "proxied_upgraded_contract": [
                    "bool"
                ],
                "upgradeable_initialized_value": [
                    "int",
                    "Callable"
                ]
            }
        },
        "test_change_beacon_not_admin": {
            "name": "test_change_beacon_not_admin",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "proxy": [
                    "Callable"
                ],
                "not_owner": [
                    "Callable"
                ],
                "new_proxy_beacon": [
                    "Callable"
                ],
                "assert_failing_transaction": [
                    "Callable"
                ]
            }
        },
        "test_change_beacon_event": {
            "name": "test_change_beacon_event",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "proxy": [],
                "new_proxy_beacon": [],
                "proxy_beacon": [
                    "int",
                    "List[str]"
                ],
                "owner": [
                    "int"
                ]
            }
        },
        "test_change_beacon_and_call": {
            "name": "test_change_beacon_and_call",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "proxy": [
                    "Callable",
                    "int",
                    "bool"
                ],
                "owner": [
                    "Callable",
                    "int",
                    "bool"
                ],
                "new_proxy_beacon": [
                    "Callable",
                    "int",
                    "bool"
                ],
                "not_owner": [
                    "bool"
                ],
                "proxied_upgraded_contract": [
                    "int"
                ],
                "upgraded_initialized_value": [
                    "bool"
                ]
            }
        },
        "test_change_beacon_and_call_not_admin": {
            "name": "test_change_beacon_and_call_not_admin",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "proxy": [
                    "Callable",
                    "List"
                ],
                "not_owner": [
                    "Callable",
                    "List"
                ],
                "proxied_upgraded_contract": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ],
                "new_proxy_beacon": [
                    "Callable",
                    "List"
                ],
                "upgraded_initialized_value": [
                    "str",
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ],
                "assert_failing_transaction": [
                    "Callable",
                    "List"
                ]
            }
        },
        "test_change_beacon_and_call_event": {
            "name": "test_change_beacon_and_call_event",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "proxy": [
                    "int",
                    "bool"
                ],
                "owner": [
                    "int",
                    "Callable",
                    "bool"
                ],
                "new_proxy_beacon": [
                    "int",
                    "Callable",
                    "bool"
                ],
                "proxied_upgraded_contract": [
                    "str"
                ],
                "upgraded_initialized_value": [
                    "str"
                ],
                "proxy_beacon": [
                    "Dict[str,Sequence[str]]",
                    "int",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ]
            }
        },
        "test_change_implementation_in_beacon": {
            "name": "test_change_implementation_in_beacon",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "proxy": [
                    "Sequence[int]",
                    "bool",
                    "str",
                    "Union[bytes,bytearray]",
                    "bytes",
                    "bytearray"
                ],
                "proxy_beacon": [],
                "upgraded_implementation": [],
                "owner": [],
                "not_owner": [
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ],
                "proxied_upgraded_contract": [
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ],
                "upgradeable_initialized_value": [
                    "Callable"
                ]
            }
        }
    },
    "contracts-master/tests/currency_network/upgradeable/test_upgrade_currency_network.py": {
        "upgraded_currency_network_implementation": {
            "name": "upgraded_currency_network_implementation",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "deploy_contract": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "proxied_currency_network": {
            "name": "proxied_currency_network",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "web3": [
                    "List[int]"
                ],
                "contract_assets": [
                    "str",
                    "Tuple[int]",
                    "int"
                ],
                "beacon_with_currency_network": [
                    "List[int]"
                ],
                "owner": [
                    "List[int]"
                ],
                "account_keys": [
                    "str",
                    "List[str]",
                    "bool",
                    "int",
                    "Optional[List[str]]",
                    "Dict[str,dict]"
                ],
                "accounts": [
                    "str",
                    "bool",
                    "int",
                    "float",
                    "Optional[str]",
                    "Optional[bool]"
                ]
            }
        },
        "currency_network_adapter": {
            "name": "currency_network_adapter",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "proxied_currency_network": [
                    "int",
                    "Callable",
                    "str"
                ],
                "make_currency_network_adapter": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "currency_network_proxy": {
            "name": "currency_network_proxy",
            "location": 49,
            "return": [
                "int",
                "Dict",
                "Callable",
                "Dict[str,str]",
                "str"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "Dict",
                    "bool",
                    "List[str]",
                    "int"
                ],
                "proxied_currency_network": [
                    "str",
                    "Dict",
                    "bool",
                    "List[str]",
                    "int"
                ],
                "contract_assets": [
                    "str",
                    "List[str]",
                    "Dict",
                    "bool",
                    "int"
                ]
            }
        },
        "upgrade_currency_network": {
            "name": "upgrade_currency_network",
            "location": 58,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "beacon_with_currency_network": [
                    "bool",
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ],
                "upgraded_currency_network_implementation": [
                    "bool",
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ],
                "owner": [
                    "bool",
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_upgrade_currency_network_with_pending_trustlines_requests": {
            "name": "test_upgrade_currency_network_with_pending_trustlines_requests",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter": [
                    "float"
                ],
                "upgrade_currency_network": [],
                "accounts": [
                    "bool"
                ]
            }
        },
        "test_upgrade_currency_network_meta_data": {
            "name": "test_upgrade_currency_network_meta_data",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter": [
                    "core.models.Grouping"
                ],
                "upgrade_currency_network": []
            }
        },
        "test_upgrade_currency_network_existing_trustlines": {
            "name": "test_upgrade_currency_network_existing_trustlines",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter": [
                    "float"
                ],
                "upgrade_currency_network": [
                    "bool"
                ],
                "accounts": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_upgrade_currency_network_events": {
            "name": "test_upgrade_currency_network_events",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_adapter": [
                    "float"
                ],
                "upgrade_currency_network": [],
                "accounts": [],
                "chain": [
                    "bool",
                    "Union[Tuple[int], Tuple[int, int]]"
                ]
            }
        },
        "upgrade_currency_network.upgrade": {
            "name": "upgrade",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "contracts-master/tests/exchange/test_exchange.py": {
        "exchange_contract": {
            "name": "exchange_contract",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "token_contract": {
            "name": "token_contract",
            "location": 32,
            "return": [
                "DefaultDict",
                "int",
                "Sequence[Tuple[float,float]]",
                "Dict[str,str]",
                "bytes",
                "str"
            ],
            "arguments": {
                "web3": [
                    "Dict"
                ],
                "accounts": [
                    "float",
                    "int",
                    "bytes",
                    "raiden_contracts.deploy.contract_deployer.ContractDeployer",
                    "None",
                    "Optional[int]"
                ]
            }
        },
        "currency_network_contract_with_trustlines": {
            "name": "currency_network_contract_with_trustlines",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ],
                "exchange_contract": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ],
                "accounts": [
                    "int"
                ]
            }
        },
        "test_order_hash": {
            "name": "test_order_hash",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "exchange_contract": [
                    "Callable",
                    "float"
                ],
                "token_contract": [],
                "currency_network_contract_with_trustlines": [],
                "accounts": [
                    "str",
                    "Dict[str,str]",
                    "Union[str,int]",
                    "int"
                ]
            }
        },
        "test_order_signature": {
            "name": "test_order_signature",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "exchange_contract": [
                    "float",
                    "Callable"
                ],
                "token_contract": [
                    "float"
                ],
                "currency_network_contract_with_trustlines": [
                    "float"
                ],
                "accounts": [
                    "str",
                    "Dict[str,str]",
                    "Union[str,int]",
                    "int"
                ],
                "account_keys": [
                    "str",
                    "bytes",
                    "Mapping",
                    "bool",
                    "Exception"
                ]
            }
        },
        "test_exchange": {
            "name": "test_exchange",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "exchange_contract": [],
                "token_contract": [],
                "currency_network_contract_with_trustlines": [],
                "accounts": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "raiden.tests.fuzz.utils.SendSecretRevealInNode",
                    "Optional[int]"
                ],
                "account_keys": [
                    "str",
                    "bytes",
                    "Dict",
                    "Mapping"
                ]
            }
        }
    },
    "contracts-master/tests/exchange/test_unweth.py": {
        "unweth_contract": {
            "name": "unweth_contract",
            "location": 9,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_transfer": {
            "name": "test_transfer",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "unweth_contract": [
                    "List[blurr.core.record.Record]",
                    "int"
                ],
                "web3": [
                    "bool"
                ],
                "accounts": [
                    "str",
                    "blurr.core.schema_loader.SchemaLoader"
                ]
            }
        },
        "test_deposit_withdraw": {
            "name": "test_deposit_withdraw",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "unweth_contract": [
                    "int",
                    "float",
                    "Union[int,float]",
                    "Callable",
                    "blurr.core.schema_loader.SchemaLoader"
                ],
                "web3": [],
                "accounts": [
                    "bool",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None",
                    "List[Dict[str,str]]",
                    "List[dict[str,str]]"
                ]
            }
        },
        "test_transfer_from": {
            "name": "test_transfer_from",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "unweth_contract": [
                    "float",
                    "Callable"
                ],
                "web3": [
                    "bool",
                    "int"
                ],
                "accounts": [],
                "assert_failing_transaction": [
                    "Union[int,float]",
                    "int",
                    "float"
                ]
            }
        }
    },
    "contracts-master/tests/exchange/__init__.py": {},
    "contracts-master/tests/identity/conftest.py": {
        "chain_id": {
            "name": "chain_id",
            "location": 10,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "Iterable[str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "proxy_factory": {
            "name": "proxy_factory",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "deploy_contract": [
                    "int",
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "None"
                ],
                "contract_assets": [
                    "str",
                    "bool",
                    "int"
                ],
                "web3": [
                    "str",
                    "bool",
                    "Dict",
                    "float"
                ],
                "chain_id": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "identity_implementation": {
            "name": "identity_implementation",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str",
                "Dict",
                "List[int]",
                "List[list[int]]"
            ],
            "arguments": {
                "deploy_contract": [
                    "int",
                    "Callable",
                    "str"
                ],
                "web3": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "owner": {
            "name": "owner",
            "location": 43,
            "return": [
                "bool",
                "str",
                "Union[str, Dict]",
                "int",
                "dict"
            ],
            "arguments": {
                "accounts": [
                    "bool"
                ]
            }
        },
        "owner_key": {
            "name": "owner_key",
            "location": 48,
            "return": [
                "str",
                "Dict[str,str]",
                "core.models.GroupingKey"
            ],
            "arguments": {
                "account_keys": [
                    "str",
                    "int",
                    "List[dict[str,str]]",
                    "List[Dict[str,str]]"
                ]
            }
        },
        "delegate_address": {
            "name": "delegate_address",
            "location": 53,
            "return": [
                "int",
                "str",
                "Union[str,Dict]",
                "Dict"
            ],
            "arguments": {
                "accounts": [
                    "List[int]"
                ]
            }
        },
        "delegate": {
            "name": "delegate",
            "location": 58,
            "return": [
                "Delegate",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "contract_assets": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "delegate_address": [
                    "bool",
                    "str",
                    "List[str]"
                ],
                "web3": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "identity_contract": {
            "name": "identity_contract",
            "location": 69,
            "return": [
                "int",
                "List",
                "Callable",
                "str"
            ],
            "arguments": {
                "deploy_contract": [
                    "int",
                    "str",
                    "bytes",
                    "Tuple",
                    "bool"
                ],
                "web3": [
                    "bytes",
                    "int",
                    "str"
                ],
                "owner": [
                    "int",
                    "Dict[str,Any]",
                    "bool"
                ],
                "chain_id": [
                    "int",
                    "str"
                ]
            }
        },
        "identity": {
            "name": "identity",
            "location": 80,
            "return": [
                "Identity",
                "str",
                "Iterable[str]",
                "IO[str]",
                "Optional[int]"
            ],
            "arguments": {
                "identity_contract": [
                    "Iterator",
                    "bytes",
                    "Iterator[str]",
                    "List[bytes]",
                    "core.models.UserKey"
                ],
                "owner_key": [
                    "Iterator",
                    "bytes",
                    "Iterator[str]",
                    "List[bytes]",
                    "core.models.UserKey"
                ]
            }
        },
        "signature_of_owner_on_implementation": {
            "name": "signature_of_owner_on_implementation",
            "location": 85,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Optional[Dict[str, Any]]",
                "Dict[str, str]",
                "Dict[str, object]",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "owner_key": [
                    "int",
                    "str",
                    "bytes",
                    "List[str]",
                    "Optional[str]",
                    "None",
                    "Optional[Sequence[str]]",
                    "Sequence[str]"
                ],
                "identity_implementation": [
                    "bytes",
                    "str",
                    "int",
                    "Dict[Tuple[int,int],str]",
                    "Dict[tuple[Union[int,int]],str]"
                ],
                "proxy_factory": [
                    "bytes",
                    "str",
                    "int",
                    "Dict[Tuple[int,int],str]",
                    "Dict[tuple[Union[int,int]],str]"
                ]
            }
        },
        "proxied_identity_contract": {
            "name": "proxied_identity_contract",
            "location": 95,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "web3": [
                    "Callable",
                    "int",
                    "web3.contracContract"
                ],
                "proxy_factory": [
                    "Callable",
                    "int",
                    "web3.contracContract"
                ],
                "identity_implementation": [
                    "Callable",
                    "int",
                    "web3.contracContract"
                ],
                "signature_of_owner_on_implementation": [
                    "Callable",
                    "int",
                    "web3.contracContract"
                ],
                "owner": [
                    "int",
                    "web3.contracContract"
                ]
            }
        },
        "proxied_identity": {
            "name": "proxied_identity",
            "location": 116,
            "return": [
                "Identity",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "proxied_identity_contract": [
                    "str",
                    "bool"
                ],
                "owner_key": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "contracts-master/tests/identity/test_gas_costs_identity.py": {
        "test_contract": {
            "name": "test_contract",
            "location": 16,
            "return": [
                "tests.basilisp.helpers.CompileFn",
                "bool"
            ],
            "arguments": {
                "deploy_contract": [
                    "str",
                    "Mapping",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str,Any]"
                ]
            }
        },
        "test_deploy_identity": {
            "name": "test_deploy_identity",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "str"
                ],
                "accounts": [
                    "Callable",
                    "Dict"
                ],
                "gas_values_snapshot": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "test_deploy_proxied_identity": {
            "name": "test_deploy_proxied_identity",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "Callable",
                    "List[str]",
                    "Optional[bool]",
                    "bool",
                    "None"
                ],
                "gas_values_snapshot": [
                    "bool",
                    "str"
                ],
                "proxy_factory": [
                    "float",
                    "Callable",
                    "bool",
                    "raiden.utils.WithdrawAmount",
                    "raiden.utils.BlockExpiration",
                    "raiden.utils.Address",
                    "raiden.utils.TokenAmount"
                ],
                "identity_implementation": [
                    "float",
                    "Callable",
                    "bool",
                    "raiden.utils.WithdrawAmount",
                    "raiden.utils.BlockExpiration",
                    "raiden.utils.Address",
                    "raiden.utils.TokenAmount"
                ],
                "signature_of_owner_on_implementation": [
                    "float",
                    "Callable",
                    "bool",
                    "raiden.utils.WithdrawAmount",
                    "raiden.utils.BlockExpiration",
                    "raiden.utils.Address",
                    "raiden.utils.TokenAmount"
                ]
            }
        },
        "test_meta_tx_over_regular_tx_overhead": {
            "name": "test_meta_tx_over_regular_tx_overhead",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [],
                "gas_values_snapshot": [
                    "Dict[str,Any]",
                    "Tuple",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "List[str]",
                    "raiden.tests.integration.fixtures.raiden_network.RestartNode"
                ],
                "test_contract": [],
                "identity": [
                    "Dict[str,Any]",
                    "str",
                    "bool"
                ],
                "delegate": [
                    "List[blurr.core.record.Record]",
                    "int"
                ]
            }
        },
        "test_proxy_overhead": {
            "name": "test_proxy_overhead",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [],
                "gas_values_snapshot": [
                    "Dict[str,Any]",
                    "Tuple",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "List[str]",
                    "raiden.tests.integration.fixtures.raiden_network.RestartNode"
                ],
                "test_contract": [
                    "str",
                    "Iterable"
                ],
                "proxied_identity": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "identity": [
                    "tests.basilisp.helpers.CompileFn",
                    "core.models.Recipe"
                ],
                "delegate": [
                    "Callable",
                    "core.models.Recipe"
                ]
            }
        },
        "test_meta_tx_over_own_identity_tx_overhead": {
            "name": "test_meta_tx_over_own_identity_tx_overhead",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "Callable",
                    "bool",
                    "str"
                ],
                "gas_values_snapshot": [
                    "Callable",
                    "str"
                ],
                "test_contract": [
                    "Callable"
                ],
                "identity": [
                    "Union[Tuple[int],Tuple[int,int]]",
                    "Tuple[int]"
                ],
                "owner": [
                    "Callable",
                    "raiden.utils.List[raiden.utils.TokenAddress]"
                ],
                "delegate": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "test_own_identity_meta_tx_overhead": {
            "name": "test_own_identity_meta_tx_overhead",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [],
                "gas_values_snapshot": [
                    "Callable",
                    "str"
                ],
                "test_contract": [
                    "Callable"
                ],
                "identity": [
                    "Callable",
                    "raiden.utils.List[raiden.utils.TokenAddress]"
                ],
                "owner": [
                    "Callable",
                    "raiden.utils.List[raiden.utils.TokenAddress]"
                ]
            }
        }
    },
    "contracts-master/tests/identity/test_identity.py": {
        "get_transaction_status": {
            "name": "get_transaction_status",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "int"
                ],
                "tx_id": [
                    "str",
                    "int"
                ]
            }
        },
        "each_identity_contract": {
            "name": "each_identity_contract",
            "location": 24,
            "return": [],
            "arguments": {
                "request": [],
                "identity_contract": [],
                "proxied_identity_contract": []
            }
        },
        "each_identity": {
            "name": "each_identity",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "request": [
                    "str"
                ],
                "identity": [
                    "str"
                ],
                "proxied_identity": [
                    "str"
                ]
            }
        },
        "test_contract": {
            "name": "test_contract",
            "location": 36,
            "return": [],
            "arguments": {
                "deploy_contract": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "currency_network_contract": {
            "name": "currency_network_contract",
            "location": 41,
            "return": [],
            "arguments": {
                "web3": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "second_currency_network_contract": {
            "name": "second_currency_network_contract",
            "location": 46,
            "return": [],
            "arguments": {
                "web3": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "test_contract_initcode": {
            "name": "test_contract_initcode",
            "location": 51,
            "return": [],
            "arguments": {
                "contract_assets": [
                    "str"
                ]
            }
        },
        "test_contract_abi": {
            "name": "test_contract_abi",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "contract_assets": [
                    "str"
                ]
            }
        },
        "non_payable_contract_inticode": {
            "name": "non_payable_contract_inticode",
            "location": 65,
            "return": [],
            "arguments": {
                "contract_assets": [
                    "str"
                ]
            }
        },
        "test_init_already_init": {
            "name": "test_init_already_init",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "each_identity_contract": [
                    "str",
                    "None",
                    "bool"
                ],
                "accounts": [
                    "str"
                ]
            }
        },
        "test_signature_from_owner": {
            "name": "test_signature_from_owner",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "each_identity_contract": [
                    "str",
                    "int",
                    "None"
                ],
                "owner_key": [
                    "str"
                ]
            }
        },
        "test_signature_not_owner": {
            "name": "test_signature_not_owner",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "each_identity_contract": [
                    "str",
                    "int",
                    "None"
                ],
                "account_keys": [
                    "str",
                    "list[list[str]]"
                ]
            }
        },
        "test_wrong_signature_from_owner": {
            "name": "test_wrong_signature_from_owner",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "each_identity_contract": [
                    "str",
                    "bytes"
                ],
                "owner_key": [
                    "bytes",
                    "float",
                    "typing.Iterator"
                ]
            }
        },
        "test_meta_transaction_signature_corresponds_to_clientlib_signature": {
            "name": "test_meta_transaction_signature_corresponds_to_clientlib_signature",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "each_identity": [
                    "tuple[typing.Union[int,int]]",
                    "dict[str, typing.Any]",
                    "None",
                    "bool"
                ],
                "owner_key": [
                    "bool",
                    "bytes",
                    "typing.BinaryIO",
                    "str"
                ]
            }
        },
        "test_delegated_transaction_hash": {
            "name": "test_delegated_transaction_hash",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "each_identity_contract": [
                    "int",
                    "float"
                ],
                "test_contract": [],
                "accounts": [
                    "str"
                ]
            }
        },
        "test_delegated_transaction_function_call": {
            "name": "test_delegated_transaction_function_call",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "each_identity": [],
                "delegate": [
                    "str"
                ],
                "test_contract": [],
                "web3": [
                    "int"
                ]
            }
        },
        "test_delegated_transaction_transfer": {
            "name": "test_delegated_transaction_transfer",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [],
                "each_identity": [],
                "delegate": [
                    "str"
                ],
                "accounts": []
            }
        },
        "test_delegated_transaction_same_tx_fails": {
            "name": "test_delegated_transaction_same_tx_fails",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "each_identity": [],
                "delegate": [
                    "dict[str, typing.Sequence[typing.Any]]"
                ],
                "accounts": [
                    "str"
                ],
                "web3": []
            }
        },
        "test_delegated_transaction_wrong_from": {
            "name": "test_delegated_transaction_wrong_from",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "each_identity_contract": [
                    "int"
                ],
                "delegate_address": [
                    "int"
                ],
                "accounts": [],
                "owner_key": [
                    "list[int]",
                    "int"
                ],
                "chain_id": [
                    "list[int]",
                    "int"
                ]
            }
        },
        "test_delegated_transaction_wrong_signature": {
            "name": "test_delegated_transaction_wrong_signature",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "each_identity": [
                    "int",
                    "list[dict[str, typing.Any]]"
                ],
                "delegate": [],
                "accounts": [
                    "str"
                ],
                "account_keys": [
                    "list[dict[str, typing.Any]]"
                ],
                "web3": [
                    "bool",
                    "dict[, ]",
                    "typing.Sequence[int]"
                ],
                "chain_id": [
                    "int",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "test_delegated_transaction_success_event": {
            "name": "test_delegated_transaction_success_event",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "each_identity": [],
                "delegate": [
                    "dict[str, typing.Sequence[typing.Any]]"
                ],
                "test_contract": []
            }
        },
        "test_delegated_transaction_fail_event": {
            "name": "test_delegated_transaction_fail_event",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "each_identity": [],
                "delegate": [
                    "dict[str, typing.Sequence[typing.Any]]"
                ],
                "test_contract": []
            }
        },
        "test_delegated_transaction_trustlines_flow": {
            "name": "test_delegated_transaction_trustlines_flow",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract": [
                    "str",
                    "None",
                    "typing.Callable[dict[, ], None]"
                ],
                "each_identity": [
                    "float",
                    "typing.Sequence[typing.Union[int,float]]"
                ],
                "delegate": [],
                "accounts": []
            }
        },
        "test_delegated_transaction_nonce_zero": {
            "name": "test_delegated_transaction_nonce_zero",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "each_identity": [],
                "delegate": [],
                "web3": [
                    "list[blurr.core.record.Record]"
                ],
                "accounts": []
            }
        },
        "test_delegated_transaction_nonce_increase": {
            "name": "test_delegated_transaction_nonce_increase",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "each_identity": [],
                "delegate": [],
                "web3": [
                    "list[blurr.core.record.Record]"
                ],
                "accounts": []
            }
        },
        "test_delegated_transaction_same_nonce_fails": {
            "name": "test_delegated_transaction_same_nonce_fails",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "each_identity": [],
                "delegate": [],
                "web3": [],
                "accounts": []
            }
        },
        "test_delegated_transaction_nonce_gap_fails": {
            "name": "test_delegated_transaction_nonce_gap_fails",
            "location": 411,
            "return": [
                "None"
            ],
            "arguments": {
                "each_identity": [],
                "delegate": [],
                "web3": [],
                "accounts": []
            }
        },
        "test_meta_transaction_time_limit_valid": {
            "name": "test_meta_transaction_time_limit_valid",
            "location": 428,
            "return": [
                "None"
            ],
            "arguments": {
                "each_identity": [],
                "delegate": [
                    "str"
                ],
                "web3": [
                    "int"
                ],
                "accounts": [
                    "str"
                ]
            }
        },
        "test_meta_transaction_no_limit_valid": {
            "name": "test_meta_transaction_no_limit_valid",
            "location": 443,
            "return": [
                "None"
            ],
            "arguments": {
                "each_identity": [],
                "delegate": [
                    "str"
                ],
                "web3": [
                    "int"
                ],
                "accounts": []
            }
        },
        "test_meta_transaction_time_limit_invalid": {
            "name": "test_meta_transaction_time_limit_invalid",
            "location": 458,
            "return": [
                "None"
            ],
            "arguments": {
                "each_identity": [],
                "delegate": [
                    "dict[str, typing.Sequence[typing.Any]]",
                    "str"
                ],
                "web3": [
                    "int"
                ],
                "accounts": [
                    "str"
                ]
            }
        },
        "test_validate_same_tx": {
            "name": "test_validate_same_tx",
            "location": 473,
            "return": [
                "None"
            ],
            "arguments": {
                "each_identity": [],
                "delegate": [],
                "accounts": [
                    "str"
                ]
            }
        },
        "test_validate_from_no_code": {
            "name": "test_validate_from_no_code",
            "location": 485,
            "return": [
                "None"
            ],
            "arguments": {
                "delegate": [],
                "accounts": [
                    "str",
                    "list[str]"
                ],
                "owner_key": [
                    "list[int]",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "chain_id": [
                    "list[int]",
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_validate_from_wrong_contract": {
            "name": "test_validate_from_wrong_contract",
            "location": 498,
            "return": [
                "None"
            ],
            "arguments": {
                "delegate": [],
                "accounts": [
                    "str",
                    "bytes"
                ],
                "owner_key": [
                    "int",
                    "list[dict[str, typing.Any]]",
                    "bytes",
                    "float",
                    "list[int]"
                ],
                "currency_network_contract": [
                    "str",
                    "bool",
                    "typing.Callable[[], None]",
                    "bytes"
                ],
                "chain_id": [
                    "int",
                    "list[dict[str, typing.Any]]",
                    "bytes",
                    "float",
                    "list[int]"
                ]
            }
        },
        "test_validate_wrong_signature": {
            "name": "test_validate_wrong_signature",
            "location": 513,
            "return": [
                "None"
            ],
            "arguments": {
                "each_identity": [
                    "int"
                ],
                "delegate": [
                    "tuple[str]"
                ],
                "accounts": [],
                "account_keys": [],
                "chain_id": [
                    "int"
                ]
            }
        },
        "test_validate_same_nonce_fails": {
            "name": "test_validate_same_nonce_fails",
            "location": 526,
            "return": [
                "None"
            ],
            "arguments": {
                "each_identity": [],
                "delegate": [],
                "accounts": [
                    "str"
                ]
            }
        },
        "test_validate_nonce_gap_fails": {
            "name": "test_validate_nonce_gap_fails",
            "location": 542,
            "return": [
                "None"
            ],
            "arguments": {
                "each_identity": [],
                "delegate": [],
                "accounts": [
                    "str"
                ]
            }
        },
        "test_validate_valid_transfer": {
            "name": "test_validate_valid_transfer",
            "location": 558,
            "return": [
                "None"
            ],
            "arguments": {
                "each_identity": [],
                "delegate": [
                    "str"
                ],
                "accounts": [
                    "str"
                ]
            }
        },
        "test_validate_valid_nonce_increase": {
            "name": "test_validate_valid_nonce_increase",
            "location": 569,
            "return": [
                "None"
            ],
            "arguments": {
                "each_identity": [],
                "delegate": [],
                "accounts": [
                    "str"
                ]
            }
        },
        "test_estimate_gas": {
            "name": "test_estimate_gas",
            "location": 585,
            "return": [
                "None"
            ],
            "arguments": {
                "each_identity": [],
                "delegate": [
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "accounts": [
                    "str"
                ]
            }
        },
        "test_deploy_identity": {
            "name": "test_deploy_identity",
            "location": 598,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "bool",
                    "None"
                ],
                "delegate": [],
                "owner": [
                    "str",
                    "bool",
                    "None"
                ],
                "owner_key": [
                    "int",
                    "typing.Sequence[typing.Hashable]",
                    "list[N]"
                ],
                "test_contract": [
                    "bool",
                    "str",
                    "dict[, ]",
                    "float"
                ]
            }
        },
        "test_next_nonce": {
            "name": "test_next_nonce",
            "location": 616,
            "return": [
                "None"
            ],
            "arguments": {
                "each_identity": [],
                "delegate": [
                    "str",
                    "float"
                ],
                "accounts": [
                    "str"
                ]
            }
        },
        "test_meta_transaction_with_fees_increases_debt": {
            "name": "test_meta_transaction_with_fees_increases_debt",
            "location": 633,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract": [
                    "bool",
                    "typing.Callable[, ]",
                    "None",
                    "typing.Mapping"
                ],
                "each_identity": [
                    "float"
                ],
                "delegate": [
                    "dict[str, typing.Sequence[typing.Any]]"
                ],
                "delegate_address": [
                    "None",
                    "str",
                    "bool"
                ],
                "accounts": [
                    "str"
                ]
            }
        },
        "test_failing_meta_transaction_with_fees_does_not_increases_debt": {
            "name": "test_failing_meta_transaction_with_fees_does_not_increases_debt",
            "location": 653,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract": [
                    "list[str]",
                    "int",
                    "str",
                    "None"
                ],
                "each_identity": [
                    "float"
                ],
                "delegate": [
                    "dict[str, typing.Sequence[typing.Any]]"
                ],
                "delegate_address": [
                    "None",
                    "typing.Callable[, ]"
                ],
                "accounts": []
            }
        },
        "test_tracking_delegation_fee_in_different_network": {
            "name": "test_tracking_delegation_fee_in_different_network",
            "location": 670,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract": [
                    "dict[, ]"
                ],
                "second_currency_network_contract": [],
                "each_identity": [],
                "delegate": [
                    "str",
                    "dict[str, typing.Sequence[typing.Any]]"
                ],
                "delegate_address": [],
                "accounts": []
            }
        },
        "test_meta_transaction_gas_fee": {
            "name": "test_meta_transaction_gas_fee",
            "location": 701,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract": [
                    "typing.Callable[, ]",
                    "None",
                    "bool"
                ],
                "each_identity": [
                    "float"
                ],
                "delegate": [
                    "dict[str, typing.Sequence[typing.Any]]"
                ],
                "delegate_address": [
                    "bool"
                ],
                "accounts": [
                    "str"
                ]
            }
        },
        "test_meta_transaction_gas_limit": {
            "name": "test_meta_transaction_gas_limit",
            "location": 728,
            "return": [
                "None"
            ],
            "arguments": {
                "each_identity": [],
                "delegate": [
                    "dict[str, typing.Sequence[typing.Any]]"
                ],
                "web3": [],
                "accounts": []
            }
        },
        "test_meta_transaction_fee_recipient": {
            "name": "test_meta_transaction_fee_recipient",
            "location": 743,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_contract": [
                    "bool",
                    "typing.Callable[, ]",
                    "None"
                ],
                "each_identity": [
                    "float"
                ],
                "delegate": [
                    "dict[str, typing.Sequence[typing.Any]]"
                ],
                "delegate_address": [
                    "bool"
                ],
                "accounts": [
                    "str"
                ]
            }
        },
        "test_meta_transaction_delegate_call": {
            "name": "test_meta_transaction_delegate_call",
            "location": 774,
            "return": [
                "None"
            ],
            "arguments": {
                "each_identity": [
                    "list[blurr.core.record.Record]",
                    "int"
                ],
                "delegate": [
                    "str"
                ],
                "delegate_address": [
                    "int"
                ],
                "web3": [
                    "list[blurr.core.record.Record]"
                ],
                "test_contract": []
            }
        },
        "test_meta_transaction_delegate_call_fail": {
            "name": "test_meta_transaction_delegate_call_fail",
            "location": 813,
            "return": [
                "None"
            ],
            "arguments": {
                "each_identity": [
                    "list[blurr.core.record.Record]",
                    "int"
                ],
                "delegate": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "web3": [
                    "str",
                    "typing.Callable[, ]"
                ],
                "test_contract": []
            }
        },
        "test_meta_transaction_create_contract": {
            "name": "test_meta_transaction_create_contract",
            "location": 841,
            "return": [
                "None"
            ],
            "arguments": {
                "each_identity": [],
                "delegate": [
                    "dict[str, typing.Sequence[typing.Any]]"
                ],
                "test_contract_initcode": [
                    "dict[str, typing.Any]"
                ],
                "test_contract_abi": [
                    "float"
                ],
                "web3": [
                    "list[blurr.core.record.Record]"
                ],
                "operation_type": [
                    "str",
                    "int"
                ]
            }
        },
        "test_meta_transaction_create_contract_fails": {
            "name": "test_meta_transaction_create_contract_fails",
            "location": 895,
            "return": [
                "None"
            ],
            "arguments": {
                "each_identity": [],
                "delegate": [
                    "dict[str, typing.Any]",
                    "str"
                ],
                "non_payable_contract_inticode": [
                    "typing.Type",
                    "int",
                    "str"
                ],
                "web3": [
                    "int",
                    "str",
                    "bytes"
                ],
                "operation_type": [
                    "typing.Type",
                    "int",
                    "str"
                ]
            }
        },
        "test_get_version": {
            "name": "test_get_version",
            "location": 930,
            "return": [
                "None"
            ],
            "arguments": {
                "each_identity_contract": []
            }
        },
        "test_revoke_meta_transaction_hash": {
            "name": "test_revoke_meta_transaction_hash",
            "location": 934,
            "return": [
                "None"
            ],
            "arguments": {
                "each_identity": [],
                "delegate": [
                    "int",
                    "list[blurr.core.record.Record]"
                ],
                "test_contract": []
            }
        },
        "test_cannot_revoke_executed_transaction": {
            "name": "test_cannot_revoke_executed_transaction",
            "location": 963,
            "return": [
                "None"
            ],
            "arguments": {
                "each_identity": [],
                "delegate": [],
                "test_contract": []
            }
        },
        "test_revoke_meta_transaction_nonce": {
            "name": "test_revoke_meta_transaction_nonce",
            "location": 987,
            "return": [
                "None"
            ],
            "arguments": {
                "each_identity": [],
                "delegate": [
                    "int",
                    "list[blurr.core.record.Record]"
                ],
                "test_contract": []
            }
        },
        "test_reveoke_meta_transaction_nonce_via_hash": {
            "name": "test_reveoke_meta_transaction_nonce_via_hash",
            "location": 1007,
            "return": [
                "None"
            ],
            "arguments": {
                "each_identity": [],
                "delegate": [
                    "list[blurr.core.record.Record]",
                    "int"
                ],
                "test_contract": []
            }
        },
        "test_execute": {
            "name": "test_execute",
            "location": 1034,
            "return": [
                "None"
            ],
            "arguments": {
                "owner": [
                    "int",
                    "float"
                ],
                "accounts": [
                    "str"
                ],
                "each_identity_contract": [
                    "int",
                    "float"
                ],
                "web3": []
            }
        },
        "test_execute_below_time_limit": {
            "name": "test_execute_below_time_limit",
            "location": 1046,
            "return": [
                "None"
            ],
            "arguments": {
                "owner": [
                    "bool"
                ],
                "accounts": [],
                "each_identity_contract": [
                    "bool"
                ],
                "web3": [
                    "int"
                ]
            }
        },
        "test_execute_expired_time_limit": {
            "name": "test_execute_expired_time_limit",
            "location": 1055,
            "return": [
                "None"
            ],
            "arguments": {
                "owner": [
                    "bool"
                ],
                "accounts": [],
                "each_identity_contract": [
                    "bool"
                ],
                "web3": [
                    "int"
                ]
            }
        },
        "test_send_same_function_call_twice_without_nonce_tracking": {
            "name": "test_send_same_function_call_twice_without_nonce_tracking",
            "location": 1065,
            "return": [
                "None"
            ],
            "arguments": {
                "each_identity": [],
                "test_contract": [],
                "delegate": [
                    "dict[str, typing.Sequence[typing.Any]]"
                ]
            }
        },
        "test_get_successful_meta_transaction_status": {
            "name": "test_get_successful_meta_transaction_status",
            "location": 1100,
            "return": [
                "None"
            ],
            "arguments": {
                "each_identity": [],
                "delegate": []
            }
        },
        "test_get_failed_meta_transaction_status": {
            "name": "test_get_failed_meta_transaction_status",
            "location": 1114,
            "return": [
                "None"
            ],
            "arguments": {
                "each_identity": [],
                "delegate": [],
                "test_contract": []
            }
        },
        "test_get_not_found_meta_transaction_status": {
            "name": "test_get_not_found_meta_transaction_status",
            "location": 1132,
            "return": [
                "None"
            ],
            "arguments": {
                "each_identity": [],
                "delegate": [
                    "list[blurr.core.record.Record]",
                    "int"
                ]
            }
        },
        "test_set_delegate_transaction_params": {
            "name": "test_set_delegate_transaction_params",
            "location": 1144,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "list[blurr.core.record.Record]"
                ],
                "each_identity": [],
                "delegate": [],
                "accounts": []
            }
        }
    },
    "contracts-master/tests/identity/test_identity_factory.py": {
        "sign_implementation": {
            "name": "sign_implementation",
            "location": 13,
            "return": [],
            "arguments": {
                "proxy_factory_address": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "list[int]",
                    "dict[int, str]"
                ],
                "identity_implementation_address": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "list[int]",
                    "dict[int, str]"
                ],
                "owner_key": [
                    "list[str]",
                    "bool",
                    "bytes",
                    "tuple[typing.Union[bytes,bytes]]",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "owner": {
            "name": "owner",
            "location": 23,
            "return": [],
            "arguments": {
                "accounts": []
            }
        },
        "owner_key": {
            "name": "owner_key",
            "location": 28,
            "return": [
                "str",
                "dict[str, str]"
            ],
            "arguments": {
                "account_keys": [
                    "str",
                    "list[dict[str, str]]"
                ]
            }
        },
        "signature_of_owner_on_implementation": {
            "name": "signature_of_owner_on_implementation",
            "location": 33,
            "return": [],
            "arguments": {
                "owner_key": [
                    "str",
                    "list[typing.Optional[str]]",
                    "list[int]"
                ],
                "identity_implementation": [
                    "str",
                    "list[typing.Optional[str]]",
                    "list[int]"
                ],
                "proxy_factory": [
                    "str",
                    "list[typing.Optional[str]]",
                    "list[int]"
                ]
            }
        },
        "identity_implementation_different_address": {
            "name": "identity_implementation_different_address",
            "location": 42,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "identity_implementation": [
                    "int",
                    "list[str]"
                ],
                "deploy_contract": [
                    "str"
                ],
                "web3": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "signature_of_not_owner_on_implementation": {
            "name": "signature_of_not_owner_on_implementation",
            "location": 55,
            "return": [],
            "arguments": {
                "account_keys": [
                    "str"
                ],
                "identity_implementation": [
                    "str",
                    "int"
                ],
                "proxy_factory": [
                    "str",
                    "int"
                ]
            }
        },
        "get_proxy_initcode": {
            "name": "get_proxy_initcode",
            "location": 64,
            "return": [],
            "arguments": {
                "contract_assets": [
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "proxied_identity_contract_with_owner": {
            "name": "proxied_identity_contract_with_owner",
            "location": 77,
            "return": [
                "list[]",
                "str"
            ],
            "arguments": {
                "proxy_factory": [
                    "typing.Callable[, ]",
                    "bool",
                    "float"
                ],
                "identity_implementation": [
                    "int"
                ],
                "get_proxy_initcode": [
                    "typing.Callable[, ]",
                    "int"
                ],
                "owner": [
                    "str",
                    "list['cirq.Circuit']",
                    "Exception",
                    "typing.Callable[str, None]",
                    "None"
                ],
                "signature_of_owner_on_implementation": [
                    "int"
                ],
                "web3": [
                    "typing.Callable[, ]",
                    "int",
                    "str"
                ],
                "contract_assets": [
                    "str"
                ]
            }
        },
        "proxy_contract_with_owner": {
            "name": "proxy_contract_with_owner",
            "location": 109,
            "return": [
                "dict[, ]",
                "dict[str, str]",
                "int"
            ],
            "arguments": {
                "proxied_identity_contract_with_owner": [
                    "typing.Callable[, ]"
                ],
                "web3": [
                    "typing.Callable[, ]"
                ],
                "contract_assets": []
            }
        },
        "proxied_identity": {
            "name": "proxied_identity",
            "location": 123,
            "return": [
                "Identity"
            ],
            "arguments": {
                "proxied_identity_contract_with_owner": [
                    "list[bool]",
                    "str"
                ],
                "owner_key": [
                    "list[bool]",
                    "str"
                ]
            }
        },
        "test_build_create2_address_conform_to_EIP1014": {
            "name": "test_build_create2_address_conform_to_EIP1014",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_deploy_identity_proxy_at_precomputed_address": {
            "name": "test_deploy_identity_proxy_at_precomputed_address",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "proxy_factory": [
                    "int",
                    "None"
                ],
                "identity_implementation": [
                    "str"
                ],
                "get_proxy_initcode": [
                    "typing.Callable[, ]"
                ],
                "owner": [
                    "typing.Callable[, ]"
                ],
                "signature_of_owner_on_implementation": [
                    "str"
                ]
            }
        },
        "test_proxy_deployment_arguments": {
            "name": "test_proxy_deployment_arguments",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "proxy_factory": [
                    "dict[, ]"
                ],
                "web3": [
                    "bool"
                ],
                "contract_assets": [],
                "identity_implementation": [
                    "bool"
                ],
                "get_proxy_initcode": [
                    "int"
                ],
                "owner": [
                    "bool"
                ],
                "signature_of_owner_on_implementation": [
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "test_deploy_proxy_wrong_signature": {
            "name": "test_deploy_proxy_wrong_signature",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "proxy_factory": [
                    "str"
                ],
                "identity_implementation": [
                    "str"
                ],
                "get_proxy_initcode": [
                    "typing.Callable[, ]",
                    "float"
                ],
                "owner": [
                    "typing.Callable[, ]",
                    "bool",
                    "str",
                    "None"
                ],
                "signature_of_not_owner_on_implementation": [
                    "str"
                ]
            }
        },
        "test_change_identity_implementation": {
            "name": "test_change_identity_implementation",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "proxy_contract_with_owner": [
                    "int",
                    "str",
                    "dict[str, typing.Union[str,typing.Any]]"
                ],
                "identity_implementation": [
                    "dict[str, typing.Union[str,typing.Any]]"
                ],
                "identity_implementation_different_address": [
                    "dict[str, typing.Union[str,typing.Any]]"
                ],
                "proxied_identity": [
                    "dict[str, typing.Union[str,typing.Any]]"
                ],
                "delegate": [
                    "str"
                ]
            }
        },
        "test_clientlib_calculate_proxy_address": {
            "name": "test_clientlib_calculate_proxy_address",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "proxy_factory": [],
                "get_proxy_initcode": [
                    "int",
                    "str"
                ]
            }
        },
        "test_deploy_identity_proxy": {
            "name": "test_deploy_identity_proxy",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "typing.Callable[, ]"
                ],
                "proxy_factory": [
                    "typing.Callable[, ]",
                    "str"
                ],
                "identity_implementation": [],
                "signature_of_owner_on_implementation": [
                    "int",
                    "typing.Callable[, ]"
                ],
                "owner": [
                    "int",
                    "typing.Callable[, ]",
                    "typing.Sequence[str]"
                ],
                "get_proxy_initcode": [
                    "int",
                    "typing.Callable[, ]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "remove_meta_data_hash": {
            "name": "remove_meta_data_hash",
            "location": 301,
            "return": [
                "bytes",
                "str",
                "list[str]"
            ],
            "arguments": {
                "bytecode": [
                    "bytes",
                    "list[]",
                    "str",
                    "list[list[str]]"
                ]
            }
        },
        "test_correct_proxy_pinned": {
            "name": "test_correct_proxy_pinned",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "contract_assets": []
            }
        },
        "test_set_deploy_proxied_identity_transaction_params": {
            "name": "test_set_deploy_proxied_identity_transaction_params",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "float"
                ],
                "proxy_factory": [
                    "float"
                ],
                "identity_implementation": [
                    "float"
                ],
                "signature_of_owner_on_implementation": [
                    "float"
                ],
                "accounts": [
                    "str"
                ]
            }
        },
        "get_proxy_initcode.initcode": {
            "name": "initcode",
            "location": 65,
            "return": [],
            "arguments": {
                "args": []
            }
        }
    },
    "contracts-master/tests/identity/__init__.py": {}
}
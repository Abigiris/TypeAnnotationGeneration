{
    "convnet-abstraction-master/python/aug2conv.py": {
        "shiftY": {
            "name": "shiftY",
            "location": 17,
            "return": [
                "Tuple[Union[float,float]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "img": [
                    "Tuple[Union[float,float]]",
                    "numpy.ndarray",
                    "Tuple[float,float]",
                    "int",
                    "float"
                ],
                "offset": [
                    "int",
                    "str",
                    "Tuple[str]",
                    "Dict[str,tuple[Union[int,int]]]",
                    "Dict[str,Tuple[int,int]]",
                    "float",
                    "Iterable[Any]",
                    "Union[int,float]"
                ]
            }
        },
        "shiftX": {
            "name": "shiftX",
            "location": 27,
            "return": [
                "numpy.ndarray",
                "int"
            ],
            "arguments": {
                "img": [
                    "int"
                ],
                "offset": [
                    "int",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]",
                    "str",
                    "Optional[Sequence[Any]]",
                    "Sequence[Any]",
                    "Callable[[str],str]",
                    "None",
                    "Callable[str,str]"
                ]
            }
        },
        "pad": {
            "name": "pad",
            "location": 37,
            "return": [
                "copyMakeBorder",
                "bool",
                "Optional[Union[str,Any]]"
            ],
            "arguments": {
                "img": [
                    "str",
                    "bool",
                    "numpy.ndarray",
                    "int"
                ],
                "size": [
                    "str",
                    "bool",
                    "numpy.ndarray",
                    "int"
                ]
            }
        },
        "getData": {
            "name": "getData",
            "location": 170,
            "return": [
                "DataLoader",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "Augmenter.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "proto": [
                    "Dict[str,Callable]",
                    "mxnendarray.NDArray",
                    "str",
                    "Sequence[str]",
                    "Optional[Sequence[str]]",
                    "None"
                ]
            }
        },
        "Augmenter.aug1": {
            "name": "aug1",
            "location": 68,
            "return": [
                "bool",
                "Tuple[Union[bool,float]]",
                "Optional[Union[str,Any]]",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "img": [
                    "Dict"
                ]
            }
        },
        "Augmenter.augBatch": {
            "name": "augBatch",
            "location": 80,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "imgs": [
                    "str",
                    "List[int]",
                    "bool",
                    "mxnendarray.NDArray"
                ],
                "labels": [
                    "str",
                    "List[int]",
                    "bool",
                    "mxnendarray.NDArray"
                ]
            }
        },
        "Augmenter.augTuples": {
            "name": "augTuples",
            "location": 106,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "tt": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "Augmenter.augFirstTuple": {
            "name": "augFirstTuple",
            "location": 109,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "tt": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "Augmenter.augBatch._batchItr": {
            "name": "_batchItr",
            "location": 85,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {}
        }
    },
    "convnet-abstraction-master/python/aug2conv_test.py": {
        "testInPlace": {
            "name": "testInPlace",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "testIter": {
            "name": "testIter",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "testAugBatch": {
            "name": "testAugBatch",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "testGetData": {
            "name": "testGetData",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "convnet-abstraction-master/python/const.py": {},
    "convnet-abstraction-master/python/graphPlot.py": {
        "setCanvas": {
            "name": "setCanvas",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "drawEdgesAndLabels": {
            "name": "drawEdgesAndLabels",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "options": [
                    "str",
                    "Type",
                    "bool"
                ],
                "g": [
                    "bool",
                    "Callable[...,None]"
                ],
                "edgeFactory": [
                    "Callable",
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "drawGraph": {
            "name": "drawGraph",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "g": [
                    "bytes",
                    "Mapping[str, Any]"
                ],
                "layoutG": [
                    "str",
                    "Callable",
                    "None"
                ]
            }
        }
    },
    "convnet-abstraction-master/python/udacity-mxnet.py": {
        "activaton": {
            "name": "activaton",
            "location": 6,
            "return": [
                "int",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "str",
                    "T"
                ]
            }
        }
    },
    "convnet-abstraction-master/python/fc2convnet/main.py": {
        "pad": {
            "name": "pad",
            "location": 34,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "img": [
                    "numpy.ndarray",
                    "T",
                    "int"
                ],
                "x": [
                    "numpy.ndarray",
                    "T",
                    "int"
                ],
                "y": [
                    "numpy.ndarray",
                    "T",
                    "int"
                ]
            }
        }
    },
    "convnet-abstraction-master/python/gan/GAN.py": {
        "transform": {
            "name": "transform",
            "location": 43,
            "return": [
                "str",
                "bool",
                "Dict[str, str]",
                "List[int]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str"
                ],
                "target_wd": [
                    "bytes",
                    "int",
                    "str",
                    "numpy.ndarray"
                ],
                "target_ht": [
                    "bytes",
                    "int",
                    "str",
                    "numpy.ndarray"
                ]
            }
        },
        "getImageList": {
            "name": "getImageList",
            "location": 55,
            "return": [
                "list"
            ],
            "arguments": {
                "base_path": [
                    "str"
                ],
                "training_folder": [
                    "str",
                    "bool",
                    "Tuple[str]"
                ]
            }
        },
        "visualize": {
            "name": "visualize",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "img_arr": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "convnet-abstraction-master/python/harmonicNet/draft.py": {},
    "convnet-abstraction-master/python/harmonicNet/mnist.py": {
        "HConv_SO2.forward": {
            "name": "forward",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "convnet-abstraction-master/python/rnn/RNN-gluon.py": {
        "rnn_batch": {
            "name": "rnn_batch",
            "location": 107,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "data": [
                    "int",
                    "bool"
                ],
                "batch_size": [
                    "int",
                    "bool"
                ]
            }
        },
        "get_batch": {
            "name": "get_batch",
            "location": 122,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "source": [
                    "str",
                    "int"
                ],
                "i": [
                    "str",
                    "int"
                ],
                "seq": [
                    "str",
                    "int",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "detach": {
            "name": "detach",
            "location": 130,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "hidden": [
                    "Union[int, slice]",
                    "int",
                    "str"
                ]
            }
        },
        "trainGluonRNN": {
            "name": "trainGluonRNN",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "epochs": [
                    "str",
                    "bool",
                    "Optional[Dict]",
                    "Dict",
                    "int",
                    "None"
                ],
                "train_data": [
                    "int"
                ],
                "seq": [
                    "int",
                    "bool",
                    "Callable",
                    "Dict[str,Any]",
                    "TextIO"
                ]
            }
        },
        "evaluate_seq2seq": {
            "name": "evaluate_seq2seq",
            "location": 183,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "model": [
                    "int",
                    "bool",
                    "Dict[str,Any]",
                    "float",
                    "Optional[float]",
                    "None"
                ],
                "input_string": [
                    "str",
                    "tuple",
                    "int",
                    "Union[int, float]"
                ],
                "seq_length": [
                    "int",
                    "float",
                    "str"
                ],
                "batch_size": [
                    "str",
                    "int",
                    "float",
                    "None",
                    "Optional[float]",
                    "List[int]",
                    "Union[int,float]",
                    "bool",
                    "Optional[List[int]]"
                ]
            }
        },
        "mapInput": {
            "name": "mapInput",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "input_str": [
                    "str",
                    "int"
                ],
                "output_str": [
                    "bytes",
                    "str",
                    "List[str]",
                    "int",
                    "Mapping",
                    "Tuple[Union[int,int,int,int]]",
                    "Mapping[str,str]",
                    "Tuple[int,int,int,int]"
                ]
            }
        },
        "generate_random_text": {
            "name": "generate_random_text",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "bool",
                    "List[str]",
                    "Set",
                    "int",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]"
                ],
                "input_string": [
                    "bool",
                    "Type",
                    "bytes",
                    "int"
                ],
                "seq_length": [
                    "int",
                    "str"
                ],
                "batch_size": [
                    "str",
                    "int",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]",
                    "bool",
                    "float",
                    "Optional[float]",
                    "None",
                    "Optional[Callable[[Type,Dict],Any]]",
                    "Callable[Type,Dict,Any]"
                ],
                "sentence_length": [
                    "bool",
                    "int"
                ]
            }
        },
        "GluonRNNModel.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "bool",
                    "Dict[str,Any]",
                    "str",
                    "int",
                    "None",
                    "Union[None,float,str]",
                    "float",
                    "Type[BaseException]",
                    "Type"
                ],
                "vocab_size": [
                    "int",
                    "float",
                    "bool"
                ],
                "num_embed": [
                    "int",
                    "float",
                    "bool"
                ],
                "num_hidden": [
                    "int",
                    "str"
                ],
                "num_layers": [
                    "int",
                    "str"
                ],
                "dropout": [
                    "float",
                    "Optional[int]",
                    "int",
                    "Union[int,float]",
                    "Optional[Union[int,float]]"
                ]
            }
        },
        "GluonRNNModel.forward": {
            "name": "forward",
            "location": 59,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "int",
                    "Callable",
                    "str"
                ],
                "hidden": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "GluonRNNModel.begin_state": {
            "name": "begin_state",
            "location": 68,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "convnet-abstraction-master/python/rnn/RNN.py": {
        "UnRolledRNNtrain": {
            "name": "UnRolledRNNtrain",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "train_data": [
                    "int"
                ],
                "label_data": [
                    "bool",
                    "bytes",
                    "numpy.ndarray",
                    "bytearray",
                    "Dict",
                    "Optional[dict]",
                    "None",
                    "Callable[[str],None]",
                    "Callable[str,None]"
                ],
                "batch_size": [
                    "int"
                ],
                "epochs": [
                    "int",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "evaluate": {
            "name": "evaluate",
            "location": 111,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input_string": [
                    "str",
                    "Dict",
                    "bytes",
                    "int"
                ]
            }
        },
        "UnRolledRNN_Model.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab_size": [
                    "int",
                    "float",
                    "Union[Tuple[int,int],int]",
                    "Tuple[Union[int,int]]"
                ],
                "num_embed": [
                    "int",
                    "Tuple[int]"
                ],
                "num_hidden": [
                    "int",
                    "Optional[int]",
                    "float",
                    "None"
                ]
            }
        },
        "UnRolledRNN_Model.forward": {
            "name": "forward",
            "location": 27,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "convnet-abstraction-master/python/rnn/shared.py": {
        "get_batch": {
            "name": "get_batch",
            "location": 91,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "source": [
                    "float",
                    "int",
                    "Dict",
                    "None",
                    "Optional[dict]",
                    "bool"
                ],
                "label_data": [
                    "bool",
                    "List[str]",
                    "None",
                    "int",
                    "str",
                    "Optional[List[str]]",
                    "Optional[int]"
                ],
                "i": [
                    "int",
                    "float",
                    "bool"
                ],
                "batch_size": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "convnet-abstraction-master/python/rnn/__init__.py": {},
    "convnet-abstraction-master/python/spikes/simple-mxnet.py": {},
    "convnet-abstraction-master/python/spikes/spike-networkx.py": {},
    "convnet-abstraction-master/python/spikes/spike-pygraphviz.py": {},
    "convnet-abstraction-master/python/utils/helper.py": {
        "imshow": {
            "name": "imshow",
            "location": 32,
            "return": [
                "int",
                "Tuple[Union[int,int]]",
                "str",
                "Callable",
                "collections.abc.Awaitable[None]"
            ],
            "arguments": {
                "image": [
                    "str",
                    "int",
                    "float",
                    "numpy.ndarray"
                ],
                "ax": [
                    "Optional[numpy.ndarray]",
                    "None",
                    "Optional[Tuple[int,int]]",
                    "Tuple[Union[int,int]]",
                    "Optional[str]",
                    "str",
                    "Optional[Awaitable[None]]",
                    "collections.abc.Awaitable[None]"
                ],
                "title": [
                    "None",
                    "str",
                    "numpy.ndarray",
                    "int",
                    "numpy.array",
                    "Tuple[Union[int,int,int]]",
                    "Tuple[int,int,int]"
                ]
            }
        },
        "view_recon": {
            "name": "view_recon",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "img": [
                    "int",
                    "Callable",
                    "str"
                ],
                "recon": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "view_classify": {
            "name": "view_classify",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "img": [
                    "int",
                    "mxnendarray.NDArray",
                    "Tuple",
                    "str",
                    "Set[str]",
                    "None",
                    "Optional[Set[str]]",
                    "bool"
                ],
                "ps": [
                    "int",
                    "mxnendarray.NDArray",
                    "Tuple",
                    "str",
                    "Set[str]",
                    "None",
                    "Optional[Set[str]]",
                    "bool"
                ],
                "version": [
                    "Text",
                    "bool",
                    "Dict",
                    "Iterable[str]",
                    "float",
                    "str"
                ]
            }
        },
        "viewFCWeights": {
            "name": "viewFCWeights",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "fc": [
                    "int",
                    "List[str]",
                    "List[Dict]",
                    "List[dict]",
                    "str",
                    "Optional[Callable[[dict],None]]",
                    "Callable[dict,None]",
                    "Union[float,int]",
                    "None",
                    "float",
                    "bool"
                ],
                "inShape": [
                    "Tuple[int]",
                    "List",
                    "numpy.ndarray",
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "viewWeights": {
            "name": "viewWeights",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "w": [
                    "int",
                    "Optional[int]",
                    "float",
                    "Dict",
                    "None",
                    "List[int]",
                    "numpy.ndarray"
                ],
                "inShape": [
                    "float",
                    "Tuple[int]"
                ]
            }
        }
    },
    "convnet-abstraction-master/python/utils/__init__.py": {
        "expand": {
            "name": "expand",
            "location": 5,
            "return": [
                "List[Union[str,Sequential]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "v": [
                    "List[str]",
                    "Optional[List[str]]",
                    "int"
                ]
            }
        },
        "debugSeq": {
            "name": "debugSeq",
            "location": 20,
            "return": [
                "None",
                "Dict[str,Any]",
                "Union[tuple,list]",
                "str"
            ],
            "arguments": {
                "v": [
                    "int",
                    "float",
                    "Tuple"
                ],
                "shape": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "convnet-abstraction-master/slide/A-overview.py": {},
    "convnet-abstraction-master/slide/B-experiment.py": {
        "newModel": {
            "name": "newModel",
            "location": 134,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "train": {
            "name": "train",
            "location": 167,
            "return": [
                "Any"
            ],
            "arguments": {
                "name": [],
                "loader": [],
                "lossTarget": [],
                "maxEpochs": [],
                "aug": []
            }
        },
        "HWY.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layers": []
            }
        },
        "HWY.getLayers": {
            "name": "getLayers",
            "location": 117,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "HWY.hybrid_forward": {
            "name": "hybrid_forward",
            "location": 120,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "F": [],
                "x": []
            }
        },
        "HWY.__hash__": {
            "name": "__hash__",
            "location": 124,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "convnet-abstraction-master/slide/C-aug.py": {},
    "convnet-abstraction-master/slide/D-g-conv.py": {
        "regularize": {
            "name": "regularize",
            "location": 129,
            "return": [
                "Any"
            ],
            "arguments": {
                "v": []
            }
        },
        "repr": {
            "name": "repr",
            "location": 138,
            "return": [
                "str"
            ],
            "arguments": {
                "v": []
            }
        }
    },
    "convnet-abstraction-master/slide/E-spectral.py": {
        "repr": {
            "name": "repr",
            "location": 397,
            "return": [
                "str"
            ],
            "arguments": {
                "r": []
            }
        },
        "getNode": {
            "name": "getNode",
            "location": 415,
            "return": [
                "str"
            ],
            "arguments": {
                "sub": [],
                "i": []
            }
        },
        "getExp": {
            "name": "getExp",
            "location": 408,
            "return": [
                "str"
            ],
            "arguments": {
                "i": []
            }
        }
    },
    "convnet-abstraction-master/slide/_backup.py": {},
    "convnet-abstraction-master/slide/__init__.py": {}
}
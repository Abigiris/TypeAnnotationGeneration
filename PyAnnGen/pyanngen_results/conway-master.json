{
    "conway-master/demo.py": {
        "build_parser": {
            "name": "build_parser",
            "location": 25,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "play": {
            "name": "play",
            "location": 48,
            "return": [
                "Generator[(List[nothing], Any, Any)]"
            ],
            "arguments": {
                "scr": [
                    "int",
                    "List[T]"
                ],
                "pattern": [
                    "int",
                    "bool",
                    "Pattern",
                    "Pattern[str]",
                    "float",
                    "Optional[float]",
                    "None"
                ],
                "is_toroidal": [
                    "bool",
                    "float",
                    "int"
                ]
            }
        }
    },
    "conway-master/conway/life.py": {
        "Grid.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grid": [
                    "int",
                    "Union[float, List[float]]",
                    "Sequence",
                    "List[T]"
                ],
                "n": [
                    "int",
                    "Union[float,List[float]]",
                    "Sequence",
                    "List"
                ],
                "m": [
                    "int",
                    "Union[float,List[float]]",
                    "Sequence",
                    "List"
                ]
            }
        },
        "Grid.live_cells": {
            "name": "live_cells",
            "location": 17,
            "return": [
                "Dict[tuple,int]",
                "str",
                "List[str]",
                "int",
                "bool",
                "Optional[dict]",
                "List"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grid.tick": {
            "name": "tick",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grid.should_live": {
            "name": "should_live",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "Grid.count_live_neighbours": {
            "name": "count_live_neighbours",
            "location": 35,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "Grid.get_neighbours": {
            "name": "get_neighbours",
            "location": 39,
            "return": [
                "Dict[(Tuple[(int, int)], int)]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "Grid.is_in_border": {
            "name": "is_in_border",
            "location": 51,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "Tuple[float,float]",
                    "T"
                ],
                "y": [
                    "int",
                    "Tuple[float,float]",
                    "T"
                ]
            }
        },
        "ToroidalGrid.live_cells": {
            "name": "live_cells",
            "location": 58,
            "return": [
                "Dict[tuple,int]",
                "bool",
                "str",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ToroidalGrid.is_in_border": {
            "name": "is_in_border",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "Sequence",
                    "Dict[str,Any]",
                    "int",
                    "bool"
                ],
                "y": [
                    "Sequence",
                    "Dict[str,Any]",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "conway-master/conway/__init__.py": {},
    "conway-master/conway/patterns/guns.py": {},
    "conway-master/conway/patterns/infinite.py": {},
    "conway-master/conway/patterns/methuselah.py": {},
    "conway-master/conway/patterns/oscillators.py": {},
    "conway-master/conway/patterns/spaceships.py": {},
    "conway-master/conway/patterns/still.py": {},
    "conway-master/conway/patterns/__init__.py": {},
    "conway-master/tests/test_life.py": {
        "TestGrid.grid": {
            "name": "grid",
            "location": 9,
            "return": [
                "Grid",
                "int",
                "str",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGrid.test_init": {
            "name": "test_init",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grid": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "TestGrid.test_get_neighbours": {
            "name": "test_get_neighbours",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grid": [
                    "str"
                ]
            }
        },
        "TestGrid.test_count_live_neighbours": {
            "name": "test_count_live_neighbours",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grid": [
                    "str",
                    "float"
                ]
            }
        },
        "TestGrid.test_should_alive": {
            "name": "test_should_alive",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grid": [
                    "str"
                ]
            }
        },
        "TestGrid.test_tick": {
            "name": "test_tick",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToroidalGrid.grid": {
            "name": "grid",
            "location": 68,
            "return": [
                "ToroidalGrid",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToroidalGrid.test_tick": {
            "name": "test_tick",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToroidalGrid.test_is_in_border": {
            "name": "test_is_in_border",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grid": [
                    "bool"
                ]
            }
        }
    },
    "conway-master/tests/__init__.py": {}
}
{
    "cookiecutter-django-master/hooks/post_gen_project.py": {
        "remove_celery_app": {
            "name": "remove_celery_app",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "remove_dottravisyml_file": {
            "name": "remove_dottravisyml_file",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "append_to_gitignore_file": {
            "name": "append_to_gitignore_file",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "bool",
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "set_flag": {
            "name": "set_flag",
            "location": 36,
            "return": [
                "str",
                "int",
                "float",
                "Iterable[int]",
                "None",
                "bytes",
                "TypeError",
                "Tuple[Union[Literal,Literal]]",
                "OrderedDict",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ],
                "flag": [
                    "str"
                ],
                "length": [
                    "str",
                    "None"
                ],
                "value": [
                    "Optional[str]",
                    "None",
                    "str"
                ],
                "formatted": [
                    "None",
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[int]",
                    "List[Any]",
                    "Optional[List[Any]]",
                    "bool"
                ]
            }
        },
        "set_django_secret_key": {
            "name": "set_django_secret_key",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "file_path": [
                    "str",
                    "int"
                ]
            }
        },
        "set_django_admin_url": {
            "name": "set_django_admin_url",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ]
            }
        },
        "generate_random_user": {
            "name": "generate_random_user",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "generate_postgres_user": {
            "name": "generate_postgres_user",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "debug": [
                    "bool",
                    "List[Tuple[str,str]]",
                    "Type[T]",
                    "List[str]",
                    "str",
                    "Exception",
                    "Dict"
                ]
            }
        },
        "set_postgres_user": {
            "name": "set_postgres_user",
            "location": 80,
            "return": [
                "Union[(str, _T1)]"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "set_postgres_password": {
            "name": "set_postgres_password",
            "location": 86,
            "return": [
                "Union[(str, _T1)]"
            ],
            "arguments": {
                "file_path": [
                    "str",
                    "bool"
                ],
                "value": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "set_celery_flower_user": {
            "name": "set_celery_flower_user",
            "location": 92,
            "return": [
                "Union[(str, _T1)]"
            ],
            "arguments": {
                "file_path": [
                    "str",
                    "bool"
                ],
                "value": [
                    "str",
                    "bool"
                ]
            }
        },
        "set_celery_flower_password": {
            "name": "set_celery_flower_password",
            "location": 98,
            "return": [
                "Union[(str, _T1)]"
            ],
            "arguments": {
                "file_path": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "value": [
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "set_flags_in_envs": {
            "name": "set_flags_in_envs",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "postgres_user": [
                    "str"
                ],
                "celery_flower_user": [
                    "int",
                    "str"
                ],
                "debug": [
                    "bool",
                    "Callable[,Any]",
                    "str"
                ]
            }
        },
        "set_flags_in_settings_files": {
            "name": "set_flags_in_settings_files",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "initialize_repo": {
            "name": "initialize_repo",
            "location": 135,
            "return": [
                "bytes"
            ],
            "arguments": {}
        },
        "add_black_formatter_git_hook": {
            "name": "add_black_formatter_git_hook",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "apply_initial_black_formatting": {
            "name": "apply_initial_black_formatting",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "remove_envs_and_associated_files": {
            "name": "remove_envs_and_associated_files",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "remove_celery_compose_dirs": {
            "name": "remove_celery_compose_dirs",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "remove_git_hooks_directory": {
            "name": "remove_git_hooks_directory",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "remove_graphql_files": {
            "name": "remove_graphql_files",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "remove_channels_files": {
            "name": "remove_channels_files",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cookiecutter-django-master/hooks/pre_gen_project.py": {
        "clone_git_hooks": {
            "name": "clone_git_hooks",
            "location": 15,
            "return": [
                "bytes"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cookiecutter-django-master/tests/test_cookiecutter_generation.py": {
        "context": {
            "name": "context",
            "location": 13,
            "return": [
                "Dict[Text,Text]",
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "build_files_list": {
            "name": "build_files_list",
            "location": 26,
            "return": [
                "list"
            ],
            "arguments": {
                "root_dir": [
                    "str"
                ]
            }
        },
        "check_paths": {
            "name": "check_paths",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "paths": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "test_default_configuration": {
            "name": "test_default_configuration",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "cookies": [],
                "context": []
            }
        },
        "feature_context": {
            "name": "feature_context",
            "location": 63,
            "return": [
                "Dict[,Text]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "request": [],
                "context": []
            }
        },
        "test_enabled_features": {
            "name": "test_enabled_features",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "cookies": [
                    "str"
                ],
                "feature_context": []
            }
        },
        "test_flake8_compliance": {
            "name": "test_flake8_compliance",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "cookies": [
                    "Callable"
                ]
            }
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/conftest.py": {
        "media_storage": {
            "name": "media_storage",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None"
                ],
                "tmpdir": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None"
                ]
            }
        },
        "faker": {
            "name": "faker",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "user": {
            "name": "user",
            "location": 29,
            "return": [
                "UserFactory",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "request_factory": {
            "name": "request_factory",
            "location": 42,
            "return": [
                "RequestFactory",
                "int",
                "raiden.utils.Address",
                "List[Dict[str,Any]]",
                "bool",
                "List"
            ],
            "arguments": {}
        },
        "api_request_factory": {
            "name": "api_request_factory",
            "location": 55,
            "return": [
                "APIRequestFactory",
                "bytes",
                "Optional[str]",
                "Optional[Dict[str,Any]]",
                "Dict",
                "int"
            ],
            "arguments": {}
        },
        "django_client": {
            "name": "django_client",
            "location": 68,
            "return": [
                "Client"
            ],
            "arguments": {}
        },
        "api_client": {
            "name": "api_client",
            "location": 80,
            "return": [
                "APIClient",
                "str",
                "Callable",
                "Callable[...,neuromation.api.Client]",
                "baseplate.lib.metrics.Client"
            ],
            "arguments": {}
        },
        "api_common_responses": {
            "name": "api_common_responses",
            "location": 93,
            "return": [
                "CommonResponses",
                "Optional[str]",
                "List[str]",
                "Dict[str,Any]",
                "str",
                "int",
                "bytes"
            ],
            "arguments": {}
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/copy_clientside_libraries.py": {
        "copy_client_side_dependencies": {
            "name": "copy_client_side_dependencies",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/manage.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/__init__.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/accounts/adapters.py": {
        "AccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 9,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict",
                    "django.http.HttpRequest"
                ]
            }
        },
        "SocialAccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 14,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict",
                    "django.http.HttpRequest"
                ],
                "sociallogin": [
                    "Dict",
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/accounts/admin.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/accounts/apps.py": {
        "AccountsAppConfig.ready": {
            "name": "ready",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/accounts/filters.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/accounts/forms.py": {
        "UserCreationForm.clean_username": {
            "name": "clean_username",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/accounts/models.py": {
        "User.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 15,
            "return": [
                "str",
                "dict",
                "zerver.models.Message"
            ],
            "arguments": {
                "self": [],
                "api": [
                    "bool",
                    "str",
                    "Set[int]",
                    "int",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/accounts/permissions.py": {
        "RequestUserIsInstanceUser.has_object_permission": {
            "name": "has_object_permission",
            "location": 16,
            "return": [
                "bool",
                "Dict",
                "Dict[str,bool]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "django.http.requesHttpRequest",
                    "rest_framework.requesRequest",
                    "aiohttp.web.Request",
                    "Request"
                ],
                "view": [
                    "None",
                    "Dict",
                    "django.http.HttpRequest",
                    "django.db.models.Model",
                    "Optional[django.db.models.Model]",
                    "aiohttp.web.Request",
                    "_models.Request",
                    "django.db.models.query.QuerySet"
                ],
                "instance": [
                    "Dict",
                    "rest_framework.requesRequest",
                    "django.http.HttpRequest",
                    "aiohttp.web.Request"
                ]
            }
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/accounts/schema.py": {
        "QueryType.resolve_users": {
            "name": "resolve_users",
            "location": 19,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "Dict[str,Any]",
                    "Dict",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/accounts/serializers.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/accounts/tables.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/accounts/urls.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/accounts/__init__.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/accounts/migrations/0001_initial.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/accounts/migrations/__init__.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/accounts/tests/factories.py": {
        "UserFactory.id_number": {
            "name": "id_number",
            "location": 21,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserFactory.password": {
            "name": "password",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "create": [
                    "int",
                    "str",
                    "bool",
                    "Callable[Any,T]",
                    "Callable[[Any],T]"
                ],
                "extracted": [
                    "int",
                    "str",
                    "bool",
                    "Callable[Any,T]",
                    "Callable[[Any],T]"
                ]
            }
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/accounts/tests/test_api_views.py": {
        "TestUserViewSet.test_detail_action_access": {
            "name": "test_detail_action_access",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "Dict",
                    "rest_framework.tesAPIClient",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "api_client": [
                    "rest_framework.tesAPIClient",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "dict"
                ],
                "api_common_responses": []
            }
        },
        "TestUserViewSet.test_me_action_authenticated": {
            "name": "test_me_action_authenticated",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "django.http.HttpRequest",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "api_client": [
                    "str"
                ],
                "api_request_factory": [
                    "Dict",
                    "duniterpy.api.clienClient",
                    "str"
                ]
            }
        },
        "TestUserViewSet.test_me_action_unauthenticated": {
            "name": "test_me_action_unauthenticated",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL",
                    "rest_framework.tesAPIRequestFactory",
                    "tests.clienMDMClient",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ],
                "api_client": [
                    "rest_framework.tesAPIClient"
                ],
                "api_common_responses": []
            }
        },
        "TestUserViewSet.test_check_username_availability_true": {
            "name": "test_check_username_availability_true",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api_client": [
                    "rest_framework.tesAPIClient",
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        },
        "TestUserViewSet.test_check_username_availability_false": {
            "name": "test_check_username_availability_false",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "Dict",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "rest_framework.tesAPIClient",
                    "raiden.utils.Address",
                    "raiden.utils.PaymentNetworkID"
                ],
                "api_client": [
                    "Dict",
                    "rest_framework.tesAPIClient",
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/accounts/tests/test_forms.py": {
        "TestUserCreationForm.test_clean_username": {
            "name": "test_clean_username",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/accounts/tests/test_models.py": {
        "test_user_get_absolute_url": {
            "name": "test_user_get_absolute_url",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        },
        "test_user_get_absolute_url_api": {
            "name": "test_user_get_absolute_url_api",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "Dict[Type,Any]",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "Dict[type,Any]"
                ]
            }
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/accounts/tests/test_permissions.py": {
        "TestRequestUserIsInstanceUser.test_has_object_permission_true": {
            "name": "test_has_object_permission_true",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL",
                    "asgard.models.accounAccount",
                    "asgard.models.user.User"
                ],
                "request_factory": [
                    "django.tesRequestFactory",
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "neuromation.api.Client"
                ]
            }
        },
        "TestRequestUserIsInstanceUser.test_has_object_permission_false": {
            "name": "test_has_object_permission_false",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_factory": [
                    "django.tesRequestFactory",
                    "django.http.HttpRequest",
                    "tests.e2e.Helper"
                ]
            }
        },
        "TestRequestUserIsInstanceUser.test_has_object_permission_raises_type_error": {
            "name": "test_has_object_permission_raises_type_error",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "request_factory": [
                    "django.tesRequestFactory",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/accounts/tests/test_template_views.py": {
        "TestUserUpdateView.test_get_success_url": {
            "name": "test_get_success_url",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        },
        "TestUserUpdateView.test_get_object": {
            "name": "test_get_object",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        },
        "TestUserRedirectView.test_get_redirect_url": {
            "name": "test_get_redirect_url",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/accounts/tests/test_urls.py": {
        "test_detail": {
            "name": "test_detail",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        },
        "test_list": {
            "name": "test_list",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update": {
            "name": "test_update",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_redirect": {
            "name": "test_redirect",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_api_root": {
            "name": "test_api_root",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_api_user_list": {
            "name": "test_api_user_list",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_api_user_detail": {
            "name": "test_api_user_detail",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL",
                    "str",
                    "Callable"
                ]
            }
        },
        "test_api_username_available": {
            "name": "test_api_username_available",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_api_me": {
            "name": "test_api_me",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestApiRootView.test_api_root_get_routes": {
            "name": "test_api_root_get_routes",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "request_factory": [
                    "django.tesRequestFactory",
                    "str"
                ]
            }
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/accounts/tests/__init__.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/accounts/views/api.py": {
        "UserViewSet.me": {
            "name": "me",
            "location": 32,
            "return": [
                "Response",
                "Optional[str]",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict",
                    "Dict[str,Any]",
                    "aiohttp.web.Request",
                    "Tuple[int]",
                    "django.http.requesHttpRequest",
                    "django.http.HttpRequest"
                ]
            }
        },
        "UserViewSet.check_availability": {
            "name": "check_availability",
            "location": 50,
            "return": [
                "Response",
                "Optional[str]",
                "float",
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest",
                    "jj.requests.Request"
                ]
            }
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/accounts/views/template.py": {
        "UserUpdateView.get_success_url": {
            "name": "get_success_url",
            "location": 38,
            "return": [
                "int",
                "bool",
                "Optional[Dict]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserUpdateView.get_object": {
            "name": "get_object",
            "location": 49,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserRedirectView.get_redirect_url": {
            "name": "get_redirect_url",
            "location": 58,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "float",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/accounts/views/__init__.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/common/apps.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/common/mixins.py": {
        "ObjectPermissionsModelMixin.has_object_read_permission": {
            "name": "has_object_read_permission",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "None",
                    "django.http.HttpRequest",
                    "aiohttp.web.Request",
                    "Optional[django.db.models.Model]",
                    "django.db.models.Model",
                    "starlette.requests.Request"
                ]
            }
        },
        "ObjectPermissionsModelMixin.has_object_write_permission": {
            "name": "has_object_write_permission",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "None",
                    "django.http.HttpRequest",
                    "aiohttp.web.Request",
                    "Optional[django.db.models.Model]",
                    "django.db.models.Model",
                    "starlette.requests.Request"
                ]
            }
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/common/setup.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/common/utils.py": {
        "GooglePlacesClient.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "API_KEY": [
                    "List[str]",
                    "str",
                    "Sequence[str]",
                    "Dict"
                ]
            }
        },
        "GooglePlacesClient._build_url": {
            "name": "_build_url",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "base_url": [
                    "str"
                ]
            }
        },
        "GooglePlacesClient._make_request": {
            "name": "_make_request",
            "location": 21,
            "return": [
                "dict",
                "Dict[str, Union[int, str]]",
                "Optional[Dict[str, Any]]",
                "Optional[Dict[str, str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "GooglePlacesClient.geocode": {
            "name": "geocode",
            "location": 29,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "bool",
                    "str",
                    "IO"
                ]
            }
        },
        "GooglePlacesClient.rgeocode": {
            "name": "rgeocode",
            "location": 35,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "lat": [
                    "int",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "lon": [
                    "int",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "GooglePlacesClient.places": {
            "name": "places",
            "location": 41,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Dict[str,Any]",
                    "IO",
                    "IO[bytes]",
                    "IO[str]"
                ]
            }
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/common/validation.py": {
        "append_check_digit_luhn_algorithm": {
            "name": "append_check_digit_luhn_algorithm",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "is_valid_luhn_algorithm": {
            "name": "is_valid_luhn_algorithm",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "is_valid_cipc_registration_number": {
            "name": "is_valid_cipc_registration_number",
            "location": 84,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/common/__init__.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/common/django/fields.py": {
        "LuhnField.validate": {
            "name": "validate",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bytes",
                    "Union[bytes,str]",
                    "T"
                ]
            }
        },
        "CompanyRegistrationNumberField.validate": {
            "name": "validate",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Iterable",
                    "int",
                    "T",
                    "Dict"
                ]
            }
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/common/django/__init__.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/common/faker/providers.py": {
        "SouthAfricaCommonProvider._get_random_integer": {
            "name": "_get_random_integer",
            "location": 14,
            "return": [
                "int"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "SouthAfricaCommonProvider.id_number": {
            "name": "id_number",
            "location": 19,
            "return": [
                "Dict[str, int]",
                "List[str]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SouthAfricaCommonProvider.cipc_registration_number": {
            "name": "cipc_registration_number",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SouthAfricaCommonProvider.vat_number": {
            "name": "vat_number",
            "location": 33,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/common/faker/__init__.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/common/graphql/types.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/common/graphql/__init__.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/common/rest_framework/fields.py": {
        "LuhnField.to_internal_value": {
            "name": "to_internal_value",
            "location": 14,
            "return": [
                "str",
                "int",
                "List",
                "bytes",
                "List[str]",
                "List[float]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T",
                    "nevergrad.common.Any"
                ]
            }
        },
        "CompanyRegistrationNumberField.to_internal_value": {
            "name": "to_internal_value",
            "location": 39,
            "return": [
                "str",
                "int",
                "List",
                "List[str]",
                "bytes",
                "List[float]",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Iterable[T]",
                    "float",
                    "nevergrad.common.Any"
                ]
            }
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/common/rest_framework/permissions.py": {
        "has_object_permission": {
            "name": "has_object_permission",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "request": [
                    "bytes",
                    "django.http.HttpRequest"
                ],
                "action": [
                    "Dict",
                    "projects.models.Project",
                    "tracim.models.auth.User"
                ],
                "instance": [
                    "Dict[str,Any]",
                    "models.Course"
                ],
                "action_mapping": [
                    "Dict",
                    "None",
                    "Callable[...,None]",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "get_permission_dict": {
            "name": "get_permission_dict",
            "location": 51,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "request": [
                    "None",
                    "rest_framework.requesRequest",
                    "django.http.HttpRequest",
                    "Optional[django.http.HttpRequest]",
                    "core.models.Recipe",
                    "aiohttp.web.Request"
                ],
                "instance": [
                    "rest_framework.requesRequest",
                    "aiohttp.web.Request",
                    "django.http.HttpRequest"
                ]
            }
        },
        "UserRolePermission.has_object_permission": {
            "name": "has_object_permission",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "Dict",
                    "rest_framework.requesRequest",
                    "django.http.HttpRequest"
                ],
                "view": [
                    "Dict",
                    "aiohttp.web.Request",
                    "rest_framework.requesRequest",
                    "django.http.HttpRequest",
                    "fastapi.Request"
                ],
                "instance": [
                    "aiohttp.web.Request",
                    "rest_framework.requesRequest",
                    "morepath.Request"
                ]
            }
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/common/rest_framework/utils.py": {
        "CommonResponses.missing_permission": {
            "name": "missing_permission",
            "location": 3,
            "return": [
                "Dict[Text,Text]",
                "Dict[str,int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommonResponses.missing_authentication": {
            "name": "missing_authentication",
            "location": 7,
            "return": [
                "Dict[Text,Text]",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/common/rest_framework/__init__.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/common/tables/helpers.py": {
        "PagedFilteredTableView.get_filterset": {
            "name": "get_filterset",
            "location": 9,
            "return": [
                "str",
                "Dict[str,str]",
                "Dict[Any,str]",
                "Callable",
                "Dict[str,Any]",
                "OrderedDict",
                "ChainMap"
            ],
            "arguments": {
                "self": [],
                "filterset_class": [
                    "str",
                    "Dict[str,str]",
                    "Callable[...,Coroutine[Any,Any,Any]]",
                    "Callable[...,collections.abc.Coroutine]",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/common/tables/__init__.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/common/templatetags/table_helpers.py": {
        "table_is_filtered": {
            "name": "table_is_filtered",
            "location": 8,
            "return": [
                "bool",
                "str",
                "IO",
                "Dict",
                "Dict[str,Any]",
                "List[Dict[str,object]]"
            ],
            "arguments": {
                "table": [
                    "str",
                    "Dict[str,str]",
                    "Optional[Callable]",
                    "Callable",
                    "None"
                ],
                "request": [
                    "Dict[str,str]",
                    "Dict",
                    "str",
                    "Optional[str]",
                    "None",
                    "Dict[str,Any]",
                    "django.http.requesHttpRequest"
                ]
            }
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/common/templatetags/__init__.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/common/tests/test_api_views.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/common/tests/test_django_fields.py": {
        "TestLuhnField.test_forms_luhn_field_raises_validation_error": {
            "name": "test_forms_luhn_field_raises_validation_error",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLuhnField.test_forms_luhn_field": {
            "name": "test_forms_luhn_field",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompanyRegistrationField.test_forms_cipc_company_registration_number_raises_validation_error": {
            "name": "test_forms_cipc_company_registration_number_raises_validation_error",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompanyRegistrationField.test_forms_cipc_company_registration_number": {
            "name": "test_forms_cipc_company_registration_number",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/common/tests/test_faker_providers.py": {
        "test_id_number": {
            "name": "test_id_number",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "faker": [
                    "str",
                    "Callable[[str], None]"
                ]
            }
        },
        "test_vat_number": {
            "name": "test_vat_number",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "faker": [
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "test_cipc_registration_number": {
            "name": "test_cipc_registration_number",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "faker": [
                    "Dict[str, Sequence[str]]"
                ]
            }
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/common/tests/test_rest_framework_fields.py": {
        "TestLuhnField.test_rest_framework_luhn_field_raises_validation_error": {
            "name": "test_rest_framework_luhn_field_raises_validation_error",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLuhnField.test_rest_framework_luhn_field": {
            "name": "test_rest_framework_luhn_field",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompanyRegistrationNumberField.test_raises_validation_error": {
            "name": "test_raises_validation_error",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompanyRegistrationNumberField.test_rest_framework_company_registration_number_field": {
            "name": "test_rest_framework_company_registration_number_field",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/common/tests/test_rest_framework_permissions.py": {
        "user": {
            "name": "user",
            "location": 18,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "superuser": {
            "name": "superuser",
            "location": 25,
            "return": [
                "bool",
                "set",
                "django.db.migrations.state.StateApps",
                "Mapping",
                "str"
            ],
            "arguments": {
                "user": [
                    "str",
                    "bool",
                    "Sequence[str]"
                ]
            }
        },
        "TestHasObjectPermission.test_has_object_permission_existing": {
            "name": "test_has_object_permission_existing",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vendor_admin": [
                    "authark.application.domain.common.User"
                ],
                "api_request_factory": [
                    "Dict",
                    "bool"
                ]
            }
        },
        "TestHasObjectPermission.test_has_object_permission_mapped": {
            "name": "test_has_object_permission_mapped",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vendor_admin": [
                    "authark.application.domain.common.User"
                ],
                "api_request_factory": [
                    "Dict",
                    "bool"
                ]
            }
        },
        "TestHasObjectPermission.test_has_object_permission_missing": {
            "name": "test_has_object_permission_missing",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vendor_admin": [
                    "authark.application.domain.common.User"
                ],
                "api_request_factory": [
                    "Dict",
                    "bool"
                ]
            }
        },
        "TestGetPermisssionDict.test_get_permission_dict_superuser": {
            "name": "test_get_permission_dict_superuser",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "superuser": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "api_request_factory": [
                    "Dict[str,Any]",
                    "bool",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestGetPermisssionDict.test_get_permission_dict": {
            "name": "test_get_permission_dict",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vendor_admin": [
                    "int",
                    "List[list[int]]",
                    "rest_framework.tesAPIRequestFactory",
                    "unittesmock.MagicMock",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "List[List[int]]"
                ],
                "api_request_factory": [
                    "rest_framework.tesAPIRequestFactory",
                    "unittesmock.MagicMock",
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "List[List[int]]"
                ]
            }
        },
        "TestUserRolePermission.test_superuser": {
            "name": "test_superuser",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "superuser": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "api_request_factory": [
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        },
        "TestUserRolePermission.test_regular_user": {
            "name": "test_regular_user",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "api_request_factory": [
                    "Dict[str,Any]",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestGetPermisssionDict.test_get_permission_dict.mock_permission": {
            "name": "mock_permission",
            "location": 99,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/common/tests/test_templatetags.py": {
        "table": {
            "name": "table",
            "location": 10,
            "return": [
                "TestTable",
                "Optional[str]",
                "str"
            ],
            "arguments": {}
        },
        "TestTableIsFiltered.test_table_is_filtered_no_filters": {
            "name": "test_table_is_filtered_no_filters",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_factory": [
                    "django.tesRequestFactory"
                ],
                "table": [
                    "str",
                    "bool",
                    "django.http.HttpRequest"
                ]
            }
        },
        "TestTableIsFiltered.test_table_is_filtered_with_filters": {
            "name": "test_table_is_filtered_with_filters",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_factory": [
                    "django.tesRequestFactory"
                ],
                "table": [
                    "bool",
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/common/tests/test_utils.py": {
        "TestGooglePlacesClient.test_geocode": {
            "name": "test_geocode",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGooglePlacesClient.test_rgeocode": {
            "name": "test_rgeocode",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGooglePlacesClient.test_places": {
            "name": "test_places",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/common/tests/test_validation.py": {
        "TestIsValidLuhnAlgorithm.test_is_valid_luhn_algorithm": {
            "name": "test_is_valid_luhn_algorithm",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsValidLuhnAlgorithm.test_is_valid_luhn_algorithm_raises_type_error": {
            "name": "test_is_valid_luhn_algorithm_raises_type_error",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsValidLuhnAlgorithm.test_is_valid_luhn_algorithm_raises_value_error": {
            "name": "test_is_valid_luhn_algorithm_raises_value_error",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAppendCheckDigitLuhnAlgorithm.test_append_check_digit_luhn_algorithm": {
            "name": "test_append_check_digit_luhn_algorithm",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAppendCheckDigitLuhnAlgorithm.test_append_check_digit_luhn_algorithm_raises_type_error": {
            "name": "test_append_check_digit_luhn_algorithm_raises_type_error",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAppendCheckDigitLuhnAlgorithm.test_append_check_digit_luhn_algorithm_raises_value_error": {
            "name": "test_append_check_digit_luhn_algorithm_raises_value_error",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsValidCipcRegistrationNumber.test_is_valid_cipc_registration_number": {
            "name": "test_is_valid_cipc_registration_number",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsValidCipcRegistrationNumber.test_is_valid_cipc_registration_number_raises_type_error": {
            "name": "test_is_valid_cipc_registration_number_raises_type_error",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsValidCipcRegistrationNumber.test_invalid_format": {
            "name": "test_invalid_format",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/common/views/api.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/common/views/__init__.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/config/asgi.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/config/routing.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/config/urls.py": {
        "APIRootView.get_routes": {
            "name": "get_routes",
            "location": 19,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "aiohttp.web.Request"
                ]
            }
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/config/wsgi.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/config/__init__.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/config/settings/base.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/config/settings/local.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/config/settings/production.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/config/settings/test.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/config/settings/__init__.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/config/tests/test_urls.py": {
        "TestApiRootView.test_api_root_get_routes": {
            "name": "test_api_root_get_routes",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "request_factory": [
                    "django.tesRequestFactory",
                    "str"
                ]
            }
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/config/tests/__init__.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/contrib/__init__.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/contrib/sites/__init__.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/contrib/sites/migrations/0001_initial.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/contrib/sites/migrations/0002_alter_domain_unique.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/contrib/sites/migrations/0003_set_site_domain_and_name.py": {
        "update_site_forward": {
            "name": "update_site_forward",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "schema_editor": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "update_site_backward": {
            "name": "update_site_backward",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "schema_editor": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/contrib/sites/migrations/__init__.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/docs/conf.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/docs/__init__.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/jupyter_notebooks/ipython_config.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/showcase/admin.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/showcase/apps.py": {
        "ShowcaseAppConfig.ready": {
            "name": "ready",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/showcase/filters.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/showcase/forms.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/showcase/models.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/showcase/permissions.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/showcase/serializers.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/showcase/tables.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/showcase/urls.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/showcase/__init__.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/showcase/migrations/__init__.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/showcase/templatetags/table_helpers.py": {
        "table_is_filtered": {
            "name": "table_is_filtered",
            "location": 8,
            "return": [
                "bool",
                "str",
                "IO",
                "Dict",
                "Dict[str,Any]",
                "List[Dict[str,object]]"
            ],
            "arguments": {
                "table": [
                    "str",
                    "Dict[str,str]",
                    "Optional[Callable]",
                    "Callable",
                    "None"
                ],
                "request": [
                    "Dict[str,str]",
                    "Dict",
                    "str",
                    "Optional[str]",
                    "None",
                    "Dict[str,Any]",
                    "django.http.requesHttpRequest"
                ]
            }
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/showcase/templatetags/__init__.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/showcase/tests/factories.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/showcase/tests/test_forms.py": {
        "TestPlaceholder.test_placeholder": {
            "name": "test_placeholder",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/showcase/tests/test_models.py": {
        "TestPlaceholder.test_placeholder": {
            "name": "test_placeholder",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/showcase/tests/test_permissions.py": {
        "TestPlaceholder.test_placeholder": {
            "name": "test_placeholder",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/showcase/tests/test_serializers.py": {
        "TestPlaceholder.test_placeholder": {
            "name": "test_placeholder",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/showcase/tests/test_template_tags.py": {
        "table": {
            "name": "table",
            "location": 11,
            "return": [
                "TestTable",
                "Optional[str]",
                "str"
            ],
            "arguments": {}
        },
        "TestTableIsFiltered.test_table_is_filtered_no_filters": {
            "name": "test_table_is_filtered_no_filters",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_factory": [
                    "django.tesRequestFactory"
                ],
                "table": [
                    "str",
                    "bool",
                    "django.http.HttpRequest"
                ]
            }
        },
        "TestTableIsFiltered.test_table_is_filtered_with_filters": {
            "name": "test_table_is_filtered_with_filters",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_factory": [
                    "django.tesRequestFactory"
                ],
                "table": [
                    "bool",
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/showcase/tests/test_urls.py": {
        "test_list": {
            "name": "test_list",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/showcase/tests/test_views.py": {
        "TestPlaceholder.test_placeholder": {
            "name": "test_placeholder",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/showcase/tests/__init__.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/showcase/views/api.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/showcase/views/template.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/showcase/views/__init__.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/taskapp/celery.py": {},
    "cookiecutter-django-master/{{cookiecutter.project_slug}}/taskapp/__init__.py": {}
}
{
    "coordinator_data_tasks-master/setup.py": {
        "filter_req_paths": {
            "name": "filter_req_paths",
            "location": 13,
            "return": [
                "list"
            ],
            "arguments": {
                "paths": [
                    "str",
                    "Optional[str]",
                    "pathlib.Path",
                    "Tuple[str]",
                    "bool"
                ],
                "func": [
                    "str"
                ]
            }
        },
        "is_pipable": {
            "name": "is_pipable",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "line": [
                    "bytes",
                    "str",
                    "Set[str]"
                ]
            }
        }
    },
    "coordinator_data_tasks-master/travis_pypi_setup.py": {
        "load_key": {
            "name": "load_key",
            "location": 28,
            "return": [
                "bytes",
                "str",
                "Dict[str, str]",
                "Optional[str]"
            ],
            "arguments": {
                "pubkey": [
                    "str"
                ]
            }
        },
        "encrypt": {
            "name": "encrypt",
            "location": 44,
            "return": [
                "bytes"
            ],
            "arguments": {
                "pubkey": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Callable[[T], bool]",
                    "typing.Callable[T, bool]",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "fetch_public_key": {
            "name": "fetch_public_key",
            "location": 55,
            "return": [
                "str",
                "tuple[typing.Union[typing.Any,typing.Any,None]]",
                "dict",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "repo": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "prepend_line": {
            "name": "prepend_line",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "Optional[str]"
                ],
                "line": [
                    "str",
                    "int",
                    "typing.Mapping",
                    "Mapping[str, Any]",
                    "typing.Iterator",
                    "Iterator[str]",
                    "Iterable"
                ]
            }
        },
        "load_yaml_config": {
            "name": "load_yaml_config",
            "location": 80,
            "return": [
                "bytes",
                "Callable",
                "Dict[str, Dict[str, str]]",
                "IO",
                "str",
                "dict"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "save_yaml_config": {
            "name": "save_yaml_config",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "Dict[str, Any]"
                ],
                "config": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "update_travis_deploy_password": {
            "name": "update_travis_deploy_password",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "encrypted_password": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "coordinator_data_tasks-master/coordinator_data_tasks/cli.py": {
        "main": {
            "name": "main",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "pathlib.Path",
                    "click.Context"
                ],
                "verbosity": [
                    "str"
                ]
            }
        },
        "join": {
            "name": "join",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "left_join": {
            "name": "left_join",
            "location": 72,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "str",
                    "click.Context"
                ],
                "left": [
                    "str"
                ],
                "right": [
                    "str"
                ],
                "join_on": [
                    "str",
                    "typing.BinaryIO",
                    "list[int]",
                    "click.HelpFormatter",
                    "BinaryIO",
                    "List[int]",
                    "click.Context"
                ],
                "out": [
                    "str",
                    "typing.BinaryIO",
                    "list[int]",
                    "click.HelpFormatter",
                    "BinaryIO",
                    "List[int]",
                    "click.Context"
                ]
            }
        }
    },
    "coordinator_data_tasks-master/coordinator_data_tasks/coordinator_data_tasks.py": {},
    "coordinator_data_tasks-master/coordinator_data_tasks/__init__.py": {},
    "coordinator_data_tasks-master/coordinator_data_tasks/commands/left_join.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "left_path": [
                    "pathlib.Path"
                ],
                "right_path": [
                    "pathlib.Path"
                ],
                "join_on": [
                    "List[str]"
                ],
                "out": [
                    "pathlib.Path"
                ],
                "indicator": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]",
                    "tuple"
                ]
            }
        }
    },
    "coordinator_data_tasks-master/coordinator_data_tasks/commands/__init__.py": {},
    "coordinator_data_tasks-master/coordinator_data_tasks/utils/errors.py": {
        "NotImplementedYet.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "bool",
                    "None",
                    "dict",
                    "Optional[List[str]]",
                    "dict[, ]",
                    "Optional[str]",
                    "list[str]",
                    "str"
                ]
            }
        }
    },
    "coordinator_data_tasks-master/coordinator_data_tasks/utils/loaders.py": {
        "is_csv": {
            "name": "is_csv",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "paradigm.catalog.Path",
                    "norfs.fs.base.Path"
                ]
            }
        },
        "is_excel": {
            "name": "is_excel",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "paradigm.catalog.Path"
                ]
            }
        },
        "load_table": {
            "name": "load_table",
            "location": 24,
            "return": [
                "int",
                "bool",
                "str",
                "Dict[str, Union[str, int]]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "load_csv": {
            "name": "load_csv",
            "location": 32,
            "return": [
                "str",
                "bool",
                "pandas._FilePathOrBuffer"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "load_xls": {
            "name": "load_xls",
            "location": 54,
            "return": [
                "str",
                "bool",
                "pandas._FilePathOrBuffer"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "coordinator_data_tasks-master/coordinator_data_tasks/utils/recoders.py": {
        "recode_dates": {
            "name": "recode_dates",
            "location": 10,
            "return": [
                "int",
                "pandas.DataFrame",
                "bool"
            ],
            "arguments": {
                "x": [
                    "str",
                    "pandas.Series"
                ]
            }
        }
    },
    "coordinator_data_tasks-master/coordinator_data_tasks/utils/__init__.py": {},
    "coordinator_data_tasks-master/docs/conf.py": {
        "run_apidoc": {
            "name": "run_apidoc",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "str",
                    "bool"
                ]
            }
        },
        "setup": {
            "name": "setup",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "sphinx.application.Sphinx"
                ]
            }
        }
    },
    "coordinator_data_tasks-master/tests/test_coordinator_data_tasks.py": {
        "test_command_line_interface": {
            "name": "test_command_line_interface",
            "location": 30,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {}
        }
    },
    "coordinator_data_tasks-master/tests/__init__.py": {},
    "coordinator_data_tasks-master/tests/functionals/__init__.py": {},
    "coordinator_data_tasks-master/tests/units/test_commands.py": {
        "tmp_out_dir": {
            "name": "tmp_out_dir",
            "location": 13,
            "return": [
                "",
                "typing.Generator[Path]"
            ],
            "arguments": {
                "tmpdir": [
                    "typing.Callable[, ]",
                    "typing.Iterable[typing.Any]",
                    "Callable",
                    "Callable[[], T]",
                    "Iterable[Any]",
                    "pathlib.Path",
                    "Callable[..., None]"
                ]
            }
        },
        "test_left_join_overall": {
            "name": "test_left_join_overall",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_out_dir": [
                    "str",
                    "pypi2nix.path.Path",
                    "pathlib.Path"
                ]
            }
        }
    },
    "coordinator_data_tasks-master/tests/units/__init__.py": {}
}
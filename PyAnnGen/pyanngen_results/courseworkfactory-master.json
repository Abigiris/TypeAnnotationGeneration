{
    "courseworkfactory-master/kursach/cli.py": {
        "parse_cli_args": {
            "name": "parse_cli_args",
            "location": 9,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {
                "args": [
                    "None"
                ]
            }
        }
    },
    "courseworkfactory-master/kursach/evaluating_method.py": {
        "calculate_deviations": {
            "name": "calculate_deviations",
            "location": 7,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "d": [
                    "float",
                    "Sequence[T]",
                    "Optional[Type[BaseException]]",
                    "type",
                    "T"
                ],
                "c": [
                    "str",
                    "Callable",
                    "T",
                    "Set[str]"
                ],
                "m1": [
                    "int",
                    "Optional[int]",
                    "Dict[str, Any]",
                    "bool",
                    "Dict[str, str]",
                    "numpy.ndarray",
                    "List[int]"
                ],
                "p": [
                    "str",
                    "Sequence[T]",
                    "float",
                    "numpy.ndarray",
                    "T"
                ]
            }
        },
        "evaluating_method": {
            "name": "evaluating_method",
            "location": 26,
            "return": [
                "Tuple[(Any, Any, list)]"
            ],
            "arguments": {
                "a": [
                    "str",
                    "int",
                    "bool",
                    "float",
                    "numpy.ndarray"
                ],
                "b": [
                    "int",
                    "float",
                    "Optional[bool]",
                    "None"
                ],
                "c": [
                    "float",
                    "numpy.ndarray",
                    "int",
                    "None",
                    "Optional[Union[int, float]]"
                ],
                "d": [
                    "str",
                    "numpy.ndarray"
                ],
                "p": [
                    "float",
                    "numpy.ndarray",
                    "int",
                    "None",
                    "Optional[Union[int, float]]"
                ],
                "m1": [
                    "int",
                    "float",
                    "str"
                ],
                "m2": [
                    "float",
                    "int",
                    "str",
                    "bool"
                ],
                "pull": [
                    "int",
                    "float",
                    "bool"
                ],
                "repeats": [
                    "float",
                    "int",
                    "Optional[str]",
                    "tuple",
                    "numpy.ndarray"
                ],
                "k": [
                    "Iterator[Any]",
                    "typing.Iterator"
                ]
            }
        }
    },
    "courseworkfactory-master/kursach/greedy_algorithm.py": {
        "greedy_algorithm": {
            "name": "greedy_algorithm",
            "location": 5,
            "return": [
                "Tuple[(Any, list)]"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float"
                ],
                "b": [
                    "int"
                ],
                "c": [
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]"
                ],
                "d": [
                    "int",
                    "float"
                ],
                "p": [
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]"
                ],
                "m1": [
                    "float",
                    "int"
                ],
                "m2": [
                    "int"
                ]
            }
        }
    },
    "courseworkfactory-master/kursach/method_potencialov.py": {
        "target_function": {
            "name": "target_function",
            "location": 4,
            "return": [
                "bool",
                "int",
                "Iterator"
            ],
            "arguments": {
                "d": [
                    "int",
                    "numpy.ndarray",
                    "Union[int, float]",
                    "float",
                    "Mapping[str, float]"
                ],
                "p": [
                    "int",
                    "numpy.ndarray",
                    "Union[int, float]",
                    "float",
                    "Mapping[str, float]"
                ],
                "c": [
                    "int",
                    "numpy.ndarray",
                    "Union[int, float]",
                    "float",
                    "Mapping[str, float]"
                ],
                "x": [
                    "int",
                    "numpy.ndarray",
                    "Union[int, float]",
                    "float",
                    "Mapping[str, float]"
                ],
                "y": [
                    "int",
                    "float",
                    "typing.Mapping",
                    "numpy.ndarray",
                    "Union[int, float]",
                    "Mapping[str, float]"
                ]
            }
        },
        "potential": {
            "name": "potential",
            "location": 9,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "a": [
                    "Union[float, int]",
                    "int",
                    "float"
                ],
                "b": [
                    "Union[float, int]",
                    "int",
                    "float"
                ],
                "c": [
                    "int",
                    "str"
                ]
            }
        },
        "dbr": {
            "name": "dbr",
            "location": 33,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "a": [
                    "int",
                    "str"
                ],
                "b": [
                    "str",
                    "numpy.ndarray",
                    "List[int]",
                    "list",
                    "int"
                ]
            }
        },
        "balance": {
            "name": "balance",
            "location": 45,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "a": [
                    "numpy.ndarray",
                    "int",
                    "str"
                ],
                "b": [
                    "int",
                    "numpy.ndarray",
                    "float"
                ],
                "c": [
                    "int",
                    "list",
                    "list[]",
                    "List[int]",
                    "list[int]",
                    "Sequence[int]",
                    "typing.Sequence[int]"
                ]
            }
        },
        "check_degeneracy": {
            "name": "check_degeneracy",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str"
                ]
            }
        },
        "find_potentials": {
            "name": "find_potentials",
            "location": 71,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "Union[str]",
                    "Union[int, float]",
                    "bool"
                ],
                "c": [
                    "int",
                    "typing.Iterable['cirq.Qid']",
                    "str",
                    "Iterable['cirq.Qid']",
                    "List['cirq.Qid']",
                    "T",
                    "bool"
                ]
            }
        },
        "go_row": {
            "name": "go_row",
            "location": 80,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "x": [
                    "list[str]",
                    "int",
                    "List[str]",
                    "bool",
                    "float"
                ],
                "c": [
                    "str",
                    "numpy.ndarray",
                    "int",
                    "dict"
                ],
                "v": [
                    "Tuple[int, int]",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "int"
                ],
                "u": [
                    "str",
                    "numpy.ndarray",
                    "int",
                    "dict"
                ],
                "i": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[numpy.dtype]"
                ]
            }
        },
        "go_column": {
            "name": "go_column",
            "location": 88,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "Sequence[T]"
                ],
                "c": [
                    "int",
                    "str",
                    "dict",
                    "dict[, ]",
                    "Sequence[T]",
                    "typing.Sequence[T]",
                    "List['Product']",
                    "list['Product']"
                ],
                "v": [
                    "str",
                    "int",
                    "Sequence[T]"
                ],
                "u": [
                    "int",
                    "str"
                ],
                "j": [
                    "int",
                    "Sequence[T]",
                    "bool",
                    "float"
                ]
            }
        },
        "calculate_delta_c": {
            "name": "calculate_delta_c",
            "location": 96,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "c": [
                    "tuple",
                    "bool",
                    "float"
                ],
                "v": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "tuple[typing.Union[int,int,int]]",
                    "Tuple[int, int, int]"
                ],
                "u": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "tuple[typing.Union[int,int,int]]",
                    "Tuple[int, int, int]"
                ]
            }
        },
        "check_optimum": {
            "name": "check_optimum",
            "location": 104,
            "return": [
                "bool"
            ],
            "arguments": {
                "delta_c": [
                    "list",
                    "List[int]",
                    "int",
                    "str"
                ]
            }
        },
        "find_max_diff": {
            "name": "find_max_diff",
            "location": 112,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "delta_c": [
                    "list",
                    "List[str]",
                    "List[int]",
                    "List[OrderedDict]",
                    "str"
                ]
            }
        },
        "find_loop": {
            "name": "find_loop",
            "location": 125,
            "return": [
                "List[Tuple[(_T1, int)]]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str",
                    "float",
                    "Union[float, int]",
                    "tuple[typing.Union[float,float]]",
                    "bool",
                    "Tuple[float, float]"
                ],
                "max_i": [
                    "_T1"
                ],
                "max_j": [
                    "int",
                    "str",
                    "float",
                    "Union[float, int]",
                    "tuple[typing.Union[float,float]]",
                    "bool",
                    "Tuple[float, float]"
                ]
            }
        },
        "clipping": {
            "name": "clipping",
            "location": 131,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "Iterable[T]",
                    "numpy.ndarray"
                ]
            }
        },
        "go_row_loop": {
            "name": "go_row_loop",
            "location": 158,
            "return": [
                "_T1"
            ],
            "arguments": {
                "x1": [
                    "Mapping[str, float]",
                    "int",
                    "numpy.array",
                    "bool",
                    "numpy.ndarray",
                    "float"
                ],
                "loop": [
                    "_T1"
                ],
                "i": [
                    "int",
                    "typing.Mapping",
                    "Mapping[str, float]",
                    "None",
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray"
                ],
                "k": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "go_column_loop": {
            "name": "go_column_loop",
            "location": 168,
            "return": [
                "_T1"
            ],
            "arguments": {
                "x1": [
                    "int",
                    "Mapping[str, float]",
                    "numpy.ndarray",
                    "float",
                    "str"
                ],
                "loop": [
                    "_T1"
                ],
                "k": [
                    "int",
                    "float",
                    "None",
                    "str",
                    "Optional[T]",
                    "numpy.ndarray",
                    "typing.Any",
                    "Optional[Union[str, Any]]"
                ],
                "j": [
                    "int",
                    "float",
                    "tuple[typing.Union[int,int]]",
                    "bool",
                    "Union[int, float]",
                    "Tuple[int, int]"
                ]
            }
        },
        "find_min_x": {
            "name": "find_min_x",
            "location": 178,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "list[list[str]]",
                    "List[List[str]]",
                    "T"
                ],
                "loop": [
                    "str",
                    "list",
                    "List[Union[\"PipeChain\", str]]",
                    "int"
                ]
            }
        },
        "new_dbr": {
            "name": "new_dbr",
            "location": 191,
            "return": [
                "_T0"
            ],
            "arguments": {
                "x": [
                    "_T0"
                ],
                "loop": [
                    "numpy.ndarray",
                    "str",
                    "int",
                    "tuple"
                ],
                "min_x": [
                    "int",
                    "float",
                    "str",
                    "Union[float, str]",
                    "Union[int, bool]"
                ]
            }
        },
        "evaluating": {
            "name": "evaluating",
            "location": 203,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "a": [
                    "int",
                    "numpy.ndarray"
                ],
                "b": [
                    "int",
                    "numpy.ndarray",
                    "list"
                ],
                "c": [
                    "int",
                    "float",
                    "Sequence[T]",
                    "typing.Sequence[T]"
                ],
                "d": [
                    "int",
                    "memoryview",
                    "list[float]",
                    "List[float]",
                    "numpy.ndarray"
                ],
                "p": [
                    "int",
                    "memoryview",
                    "list[float]",
                    "List[float]",
                    "numpy.ndarray"
                ],
                "y": [
                    "int",
                    "memoryview",
                    "list[float]",
                    "List[float]",
                    "numpy.ndarray"
                ]
            }
        }
    },
    "courseworkfactory-master/kursach/random_method.py": {
        "random_method": {
            "name": "random_method",
            "location": 7,
            "return": [
                "Tuple[(Any, Any, list)]"
            ],
            "arguments": {
                "a": [
                    "str",
                    "dict",
                    "float",
                    "Optional[int]",
                    "int",
                    "bool",
                    "Optional[bool]"
                ],
                "b": [
                    "int",
                    "float",
                    "Optional[bool]",
                    "None"
                ],
                "c": [
                    "Sequence[float]",
                    "typing.Sequence[float]",
                    "float",
                    "List[str]",
                    "list[str]",
                    "Callable[[], float]",
                    "typing.Callable[[], float]"
                ],
                "d": [
                    "int",
                    "typing.Collection",
                    "bool",
                    "Collection[str]",
                    "numpy.ndarray"
                ],
                "p": [
                    "Sequence[float]",
                    "typing.Sequence[float]",
                    "float",
                    "List[str]",
                    "list[str]",
                    "Callable[[], float]",
                    "typing.Callable[[], float]"
                ],
                "m1": [
                    "int",
                    "dict",
                    "float",
                    "str",
                    "Optional[int]",
                    "bool",
                    "Optional[bool]"
                ],
                "m2": [
                    "float",
                    "bool",
                    "int",
                    "str",
                    "list"
                ],
                "pull": [
                    "float",
                    "bool",
                    "int",
                    "str"
                ],
                "repeats": [
                    "float",
                    "int",
                    "Optional[str]",
                    "tuple",
                    "numpy.ndarray"
                ],
                "k": [
                    "Iterator[Any]",
                    "typing.Iterator"
                ]
            }
        }
    },
    "courseworkfactory-master/kursach/utils.py": {
        "prepare_matrix": {
            "name": "prepare_matrix",
            "location": 4,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float",
                    "bytes",
                    "list",
                    "list[]"
                ],
                "p": [
                    "bool",
                    "typing.Iterable[T]",
                    "Iterable[T]",
                    "numpy.ndarray",
                    "Tuple[bool]",
                    "int"
                ],
                "c": [
                    "typing.Iterable[T]",
                    "int",
                    "Iterable[T]",
                    "numpy.ndarray",
                    "List[int]",
                    "List[Tuple[str]]",
                    "bool"
                ],
                "y": [
                    "str",
                    "int",
                    "bool"
                ],
                "m1": [
                    "float",
                    "int",
                    "list[int]",
                    "numpy.ndarray",
                    "List[int]"
                ]
            }
        },
        "generation_start_pull": {
            "name": "generation_start_pull",
            "location": 15,
            "return": [
                "float",
                "bool",
                "Callable[[None], bool]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "pull": [
                    "bool",
                    "float",
                    "Tuple[float, float]",
                    "Optional[Callable]"
                ],
                "m1": [
                    "float"
                ],
                "m2": [
                    "int",
                    "numpy.array",
                    "bool"
                ],
                "a": [
                    "float"
                ],
                "b": [
                    "str",
                    "int",
                    "float",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "unique_rows": {
            "name": "unique_rows",
            "location": 28,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "a": [
                    "str"
                ]
            }
        },
        "validate_input_data": {
            "name": "validate_input_data",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "seconds_to_human": {
            "name": "seconds_to_human",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "sec": [
                    "int"
                ]
            }
        }
    },
    "courseworkfactory-master/kursach/__main__.py": {
        "main": {
            "name": "main",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
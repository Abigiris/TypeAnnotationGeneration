{
    "craftassist-master/acl2020_submission/annotation_tools/tools/all_question_flows.py": {},
    "craftassist-master/acl2020_submission/annotation_tools/tools/analyze_outputs.py": {
        "any_two": {
            "name": "any_two",
            "location": 8,
            "return": [
                "bool",
                "str",
                "bytearray",
                "Union[bytes,bytearray]",
                "bytes",
                "int"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float"
                ],
                "b": [
                    "int",
                    "float"
                ],
                "c": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "craftassist-master/acl2020_submission/annotation_tools/tools/annotation_tool_1.py": {},
    "craftassist-master/acl2020_submission/annotation_tools/tools/annotation_tool_2.py": {},
    "craftassist-master/acl2020_submission/annotation_tools/tools/composite_command_tool.py": {},
    "craftassist-master/acl2020_submission/annotation_tools/tools/construct_input_for_turk.py": {
        "print_csv_format": {
            "name": "print_csv_format",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bytes"
                ],
                "option_num": [
                    "str",
                    "bool",
                    "List[str]",
                    "int"
                ]
            }
        }
    },
    "craftassist-master/acl2020_submission/annotation_tools/tools/evaluate_qualification.py": {
        "read_gold_set": {
            "name": "read_gold_set",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "gold_set": [
                    "str",
                    "Optional[str]",
                    "Sequence[Sequence[Any]]",
                    "Optional[int]"
                ]
            }
        },
        "compare_dicts": {
            "name": "compare_dicts",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "action_dict": [
                    "dict",
                    "Dict[str, float]",
                    "Dict[str, Any]",
                    "OrderedDict"
                ],
                "allowed_dict": [
                    "Dict",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Iterable[Dict[str,Any]]"
                ]
            }
        },
        "get_wrong_stats": {
            "name": "get_wrong_stats",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "dict1": [
                    "str",
                    "Dict[str,Any]",
                    "Dict[str,str]"
                ],
                "dict2": [
                    "Dict",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "evaluate_workers": {
            "name": "evaluate_workers",
            "location": 81,
            "return": [
                "Dict",
                "int",
                "Dict[Union[list[str],int,list,str],int]",
                "Callable",
                "str"
            ],
            "arguments": {
                "worker_file": [
                    "str"
                ]
            }
        }
    },
    "craftassist-master/acl2020_submission/annotation_tools/tools/qualification_tool.py": {},
    "craftassist-master/acl2020_submission/annotation_tools/tools/question_flow_for_step_1.py": {},
    "craftassist-master/acl2020_submission/annotation_tools/tools/question_flow_for_step_2.py": {
        "get_questions": {
            "name": "get_questions",
            "location": 500,
            "return": [
                "List[Union[dict[Text,Union[None,Text]],dict[Text,Union[Text,bool]]]]",
                "str",
                "bool"
            ],
            "arguments": {
                "child": [
                    "str",
                    "bool"
                ],
                "action": [
                    "str",
                    "bool"
                ],
                "optional_words": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "craftassist-master/acl2020_submission/annotation_tools/tools/render_questions_tool_1.py": {
        "render_q": {
            "name": "render_q",
            "location": 8,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "q": [
                    "str",
                    "bool",
                    "Optional[Any]",
                    "Optional[str]",
                    "Dict[str, float]"
                ],
                "parent_id": [
                    "List",
                    "List[int]",
                    "int",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "show": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Dict[str,str]"
                ],
                "show_siblings": [
                    "bool",
                    "str",
                    "int",
                    "bytes"
                ],
                "sentence_id": [
                    "Text",
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[bool]"
                ]
            }
        },
        "render_span": {
            "name": "render_span",
            "location": 29,
            "return": [
                "Text",
                "List[str]",
                "bool",
                "List[Mapping[str,Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "parent_id": [
                    "str",
                    "int",
                    "Dict",
                    "bool"
                ],
                "optional": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "sentence_id": [
                    "Text",
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "render_radios": {
            "name": "render_radios",
            "location": 59,
            "return": [
                "Text",
                "List[str]",
                "bool",
                "List[Mapping[str,Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "opts": [
                    "Tuple[Union[str,...]]",
                    "int",
                    "float",
                    "Callable",
                    "bool",
                    "Union[str,Tuple[str,...]]"
                ],
                "parent_id": [
                    "str",
                    "Iterable[str]"
                ],
                "add_other_opt": [
                    "bool",
                    "str",
                    "List[Tuple[int,int]]"
                ],
                "show_siblings": [
                    "bool",
                    "str",
                    "List[Tuple[int,int]]"
                ],
                "sentence_id": [
                    "Text",
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "label_tag": {
            "name": "label_tag",
            "location": 128,
            "return": [
                "str",
                "Dict[str,Any]",
                "Text"
            ],
            "arguments": {
                "tooltip": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "Optional[str]"
                ]
            }
        },
        "child_id": {
            "name": "child_id",
            "location": 135,
            "return": [
                "str",
                "bool",
                "type",
                "Dict[str, Any]"
            ],
            "arguments": {
                "parent_id": [
                    "str",
                    "bool",
                    "Dict[str,Any]"
                ],
                "text": [
                    "str",
                    "bool",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "craftassist-master/acl2020_submission/annotation_tools/tools/render_questions_tool_2.py": {
        "render_q": {
            "name": "render_q",
            "location": 8,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "q": [
                    "str"
                ],
                "parent_id": [
                    "List",
                    "str",
                    "Set",
                    "int",
                    "IO[bytes]",
                    "IO"
                ],
                "show": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "show_siblings": [
                    "bool",
                    "str",
                    "Dict"
                ]
            }
        },
        "render_span": {
            "name": "render_span",
            "location": 30,
            "return": [
                "Text",
                "List[str]",
                "bool",
                "List[Mapping[str,Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "parent_id": [
                    "str",
                    "Sequence[str]",
                    "bytes",
                    "int",
                    "float",
                    "Optional[int]",
                    "None"
                ],
                "optional": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "render_radios": {
            "name": "render_radios",
            "location": 60,
            "return": [
                "Text",
                "List[str]",
                "bool",
                "List[Mapping[str,Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "opts": [
                    "str",
                    "float",
                    "int",
                    "Optional[int]"
                ],
                "parent_id": [
                    "str"
                ],
                "add_other_opt": [
                    "bool",
                    "str",
                    "int",
                    "Sequence[str]",
                    "bytes"
                ],
                "show_siblings": [
                    "bool",
                    "str",
                    "int",
                    "Sequence[str]",
                    "bytes"
                ],
                "make_checkbox": [
                    "bool",
                    "str",
                    "Type[T]",
                    "Optional[str]",
                    "Optional[Sequence[str]]"
                ]
            }
        },
        "label_tag": {
            "name": "label_tag",
            "location": 130,
            "return": [
                "str",
                "Dict[str,Any]",
                "Text"
            ],
            "arguments": {
                "tooltip": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "Optional[str]"
                ]
            }
        },
        "child_id": {
            "name": "child_id",
            "location": 137,
            "return": [
                "str",
                "bool",
                "type",
                "Dict[str, Any]"
            ],
            "arguments": {
                "parent_id": [
                    "str",
                    "bool",
                    "Dict[str,Any]"
                ],
                "text": [
                    "str",
                    "bool",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "craftassist-master/acl2020_submission/model_training_code/query_model.py": {
        "TTADBertModel.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_dir": [
                    "str",
                    "Optional[str]"
                ],
                "data_dir": [
                    "str"
                ],
                "model_name": [
                    "Text",
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Dict"
                ]
            }
        },
        "TTADBertModel.parse": {
            "name": "parse",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "chat": [
                    "int",
                    "List",
                    "Optional[int]",
                    "float",
                    "None",
                    "Dict[str,Tuple[str,int,int]]",
                    "Dict[str,tuple[Union[str,int,int]]]"
                ],
                "noop_thres": [
                    "float",
                    "bool",
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "int"
                ],
                "beam_size": [
                    "int",
                    "Optional[int]",
                    "List",
                    "float",
                    "Dict[str,Tuple[str,int,int]]"
                ],
                "well_formed_pen": [
                    "float",
                    "int",
                    "Optional[int]",
                    "List",
                    "Dict[str,Tuple[str,int,int]]"
                ]
            }
        }
    },
    "craftassist-master/acl2020_submission/model_training_code/train_model.py": {
        "train": {
            "name": "train",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "model": [],
                "dataset": [
                    "int",
                    "None",
                    "torch.Tensor",
                    "Optional[torch.Tensor]"
                ],
                "tokenizer": [
                    "Union[Contributor,Coverage]",
                    "float",
                    "Optional[float]",
                    "None"
                ],
                "args": []
            }
        },
        "validate": {
            "name": "validate",
            "location": 96,
            "return": [
                "Tuple[float]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "model": [
                    "List"
                ],
                "dataset": [
                    "None",
                    "float",
                    "torch.Tensor",
                    "Optional[torch.Tensor]"
                ],
                "tokenizer": [
                    "Union[Contributor,Coverage]",
                    "float",
                    "Optional[float]",
                    "None"
                ],
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "craftassist-master/acl2020_submission/model_training_code/utils_caip.py": {
        "is_span": {
            "name": "is_span",
            "location": 14,
            "return": [
                "bool",
                "Set[str]",
                "List",
                "str",
                "Dict[str,List[str]]",
                "object"
            ],
            "arguments": {
                "val": [
                    "numpy.ndarray"
                ]
            }
        },
        "is_span_list": {
            "name": "is_span_list",
            "location": 22,
            "return": [
                "bool",
                "Union[numbers.Real,numpy.ndarray]",
                "str",
                "Match"
            ],
            "arguments": {
                "val": [
                    "Sequence[int]"
                ]
            }
        },
        "is_cat": {
            "name": "is_cat",
            "location": 27,
            "return": [
                "bool",
                "str",
                "Type"
            ],
            "arguments": {
                "val": [
                    "str",
                    "Dict"
                ]
            }
        },
        "is_cat_list": {
            "name": "is_cat_list",
            "location": 31,
            "return": [
                "bool",
                "Union[numbers.Real,numpy.ndarray]",
                "str",
                "Match"
            ],
            "arguments": {
                "val": [
                    "Sequence[int]"
                ]
            }
        },
        "is_int": {
            "name": "is_int",
            "location": 36,
            "return": [
                "bool",
                "Optional[str]",
                "Type[Any]"
            ],
            "arguments": {
                "val": [
                    "str",
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "is_int_list": {
            "name": "is_int_list",
            "location": 40,
            "return": [
                "bool",
                "Union[numbers.Real,numpy.ndarray]",
                "str",
                "Match"
            ],
            "arguments": {
                "val": [
                    "Sequence[int]"
                ]
            }
        },
        "add_tree": {
            "name": "add_tree",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "full_tree": [
                    "dict",
                    "cmk.utils.structured_data.StructuredDataTree",
                    "Optional[str]"
                ],
                "new_tree": [
                    "Dict[str,Any]",
                    "List[dict]",
                    "T",
                    "Type"
                ],
                "vocounts": [
                    "Dict",
                    "bool",
                    "Set",
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ],
                "nw": [
                    "int",
                    "Optional[str]",
                    "MutableMapping[str,str]",
                    "str",
                    "Dict"
                ]
            }
        },
        "make_full_tree": {
            "name": "make_full_tree",
            "location": 83,
            "return": [
                "Tuple[Union[dict,list[Text]]]",
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "trees_weight_ls": [
                    "Dict",
                    "bool",
                    "Exception",
                    "Callable"
                ]
            }
        },
        "tree_to_seq": {
            "name": "tree_to_seq",
            "location": 100,
            "return": [
                "bool",
                "Union[int, float, complex]",
                "Optional[str]"
            ],
            "arguments": {
                "full_tree": [
                    "List",
                    "List[List[Any]]",
                    "List[list[Any]]"
                ],
                "tree": [
                    "list",
                    "List[List[Any]]"
                ],
                "idx_map": [
                    "Awaitable[T]",
                    "None",
                    "collections.abc.Awaitable[T]"
                ]
            }
        },
        "select_spans": {
            "name": "select_spans",
            "location": 134,
            "return": [
                "Dict[str, Any]",
                "dict",
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "seq": [
                    "List[float]",
                    "List[int]",
                    "str",
                    "int"
                ]
            }
        },
        "seq_to_tree": {
            "name": "seq_to_tree",
            "location": 173,
            "return": [
                "bool",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "full_tree": [
                    "Dict",
                    "Dict[str,Any]",
                    "bool",
                    "str"
                ],
                "seq": [
                    "str",
                    "numpy.ndarray",
                    "Optional[List[Any]]"
                ],
                "idx_rev_map": [
                    "Optional[int]",
                    "bool",
                    "int"
                ],
                "span_dct": [
                    "None",
                    "Optional[str]",
                    "str",
                    "float",
                    "Optional[allennlp.data.token_indexers.TokenIndexer]",
                    "Iterable[str]",
                    "Sequence[str]",
                    "bool",
                    "Optional[Iterable[str]]",
                    "Optional[torch.Tensor]"
                ],
                "start_id": [
                    "int",
                    "Sequence",
                    "Dict[str,List[str]]",
                    "raiden.utils.TokenAmount",
                    "cmk.utils.type_defs.UserId"
                ]
            }
        },
        "compare_tree": {
            "name": "compare_tree",
            "location": 248,
            "return": [
                "Tuple",
                "Dict[,tuple[Text]]",
                "List",
                "Union[numpy.ndarray,PIL.Image.Image]",
                "Type",
                "Dict",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "ta": [
                    "str"
                ],
                "tb": [
                    "numpy.ndarray",
                    "raiden.utils.Any",
                    "Optional[str]",
                    "float"
                ]
            }
        },
        "align_post_tok": {
            "name": "align_post_tok",
            "location": 274,
            "return": [
                "List[list[int]]",
                "bool",
                "str",
                "Type"
            ],
            "arguments": {
                "pre_tok": [
                    "Sequence[int]",
                    "numpy.ndarray",
                    "List[int]"
                ],
                "post_tok": [
                    "int",
                    "Callable[[None], bool]",
                    "List[Tuple[str]]",
                    "List[int]"
                ],
                "seen_toks": [
                    "int",
                    "numpy.ndarray",
                    "List[int]"
                ]
            }
        },
        "tokenize_mapidx": {
            "name": "tokenize_mapidx",
            "location": 303,
            "return": [
                "Tuple[Union[str,list[list]]]",
                "bool",
                "str",
                "Optional[float]",
                "numpy.dtype",
                "int"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "tokenizer": [
                    "str",
                    "Pattern",
                    "Dict[str,Any]"
                ]
            }
        },
        "tokenize_linearize": {
            "name": "tokenize_linearize",
            "location": 322,
            "return": [
                "Tuple[Union[str,list[str],tuple[Union[Any,list[Any]]],Type]]",
                "float",
                "Dict",
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "text": [
                    "int",
                    "str"
                ],
                "tree": [
                    "str",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]",
                    "Callable[[str],str]",
                    "Callable[str,str]"
                ],
                "tokenizer": [
                    "int",
                    "str"
                ],
                "full_tree": [
                    "str",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]",
                    "Callable[[str],str]",
                    "Callable[str,str]"
                ],
                "word_noise": [
                    "float",
                    "Type",
                    "Callable[[str],str]",
                    "List[Union[str,int]]"
                ]
            }
        },
        "caip_collate": {
            "name": "caip_collate",
            "location": 434,
            "return": [
                "Tuple[list[tuple]]",
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "batch": [
                    "bool",
                    "float",
                    "int"
                ],
                "tokenizer": [
                    "Set",
                    "numpy.ndarray",
                    "sideeye.data.Trial"
                ]
            }
        },
        "CAIPDataset.__init__": {
            "name": "__init__",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tokenizer": [
                    "int",
                    "bool"
                ],
                "args": [],
                "prefix": [
                    "Text",
                    "bool",
                    "Sequence[str]",
                    "Iterable[Any]",
                    "Optional[List[str]]",
                    "List[str]",
                    "Optional[str]"
                ],
                "dtype": [
                    "Text",
                    "bool",
                    "int",
                    "raiden.utils.Address",
                    "Dict",
                    "Dict[str,str]",
                    "float"
                ],
                "sampling": [
                    "bool",
                    "int"
                ],
                "word_noise": [
                    "float",
                    "int",
                    "List[float]",
                    "Type"
                ],
                "full_tree_voc": [
                    "List[str]",
                    "None",
                    "Optional[Union[Any,Any]]",
                    "Optional[Callable[,Any]]",
                    "Any",
                    "Callable",
                    "Callable[,Any]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "CAIPDataset.__len__": {
            "name": "__len__",
            "location": 403,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CAIPDataset.__getitem__": {
            "name": "__getitem__",
            "location": 406,
            "return": [
                "Tuple[Union[list[list],tuple]]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "str",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "CAIPDataset.add_hard_example": {
            "name": "add_hard_example",
            "location": 425,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exple": [
                    "Dict",
                    "float",
                    "torch.Tensor",
                    "numpy.ndarray"
                ]
            }
        }
    },
    "craftassist-master/acl2020_submission/model_training_code/utils_parsing.py": {
        "my_xavier_init": {
            "name": "my_xavier_init",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "m": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Union[Literal[False], None, str]"
                ],
                "gain": [
                    "int",
                    "torch.Tensor",
                    "str",
                    "bool",
                    "Dict[str,Any]"
                ]
            }
        },
        "predict_tree": {
            "name": "predict_tree",
            "location": 165,
            "return": [
                "Optional[Callable[[bool], None]]",
                "Exception",
                "list",
                "Optional[AbstractSet[str]]"
            ],
            "arguments": {
                "txt": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "model": [
                    "int",
                    "Set[int]",
                    "bool"
                ],
                "tokenizer": [
                    "Sequence[str]",
                    "str",
                    "int"
                ],
                "dataset": [
                    "str",
                    "Dict[str,int]",
                    "Dict",
                    "List[str]"
                ],
                "ban_noop": [
                    "bool",
                    "Type",
                    "Set[str]",
                    "Optional[Dict[str,str]]"
                ],
                "noop_threshold": [
                    "float",
                    "Type",
                    "Set[str]",
                    "Optional[Dict[str,str]]"
                ]
            }
        },
        "beam_search": {
            "name": "beam_search",
            "location": 221,
            "return": [
                "str",
                "bytes",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "txt": [
                    "float",
                    "Optional[str]",
                    "str",
                    "List[Tuple[int,int]]",
                    "None",
                    "List[tuple[Union[int,int]]]"
                ],
                "model": [
                    "int",
                    "str",
                    "bool",
                    "Union[int,str]"
                ],
                "tokenizer": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "float",
                    "Optional[float]",
                    "int"
                ],
                "dataset": [
                    "str",
                    "Mapping",
                    "List[str]",
                    "Dict[str,str]",
                    "int",
                    "Dict"
                ],
                "beam_size": [
                    "int",
                    "bool",
                    "List[int]",
                    "Hashable"
                ],
                "well_formed_pen": [
                    "float",
                    "bool",
                    "Optional[bool]",
                    "torch.Tensor",
                    "Optional[int]",
                    "allennlp.nn.initializers.InitializerApplicator"
                ]
            }
        },
        "compute_accuracy": {
            "name": "compute_accuracy",
            "location": 317,
            "return": [
                "Tuple[bool]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "outputs": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "y": [
                    "str",
                    "Pattern",
                    "Union[str]"
                ]
            }
        },
        "HighwayLayer.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dim": [
                    "Callable",
                    "List[int]"
                ]
            }
        },
        "HighwayLayer.forward": {
            "name": "forward",
            "location": 31,
            "return": [
                "int",
                "List[int]",
                "float",
                "Iterable[str]",
                "Iterable[T]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "float"
                ]
            }
        },
        "DecoderWithLoss.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str,Any]"
                ],
                "args": [],
                "tokenizer": [
                    "Dict",
                    "str"
                ]
            }
        },
        "DecoderWithLoss.step": {
            "name": "step",
            "location": 63,
            "return": [
                "Dict[Text,]",
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "self": [],
                "y": [],
                "y_mask": [],
                "x_reps": [],
                "x_mask": []
            }
        },
        "DecoderWithLoss.forward": {
            "name": "forward",
            "location": 93,
            "return": [
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "self": [],
                "y": [],
                "y_mask": [],
                "x_reps": [],
                "x_mask": []
            }
        },
        "EncoderDecoderWithLoss.__init__": {
            "name": "__init__",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "encoder": [
                    "int",
                    "float",
                    "bool"
                ],
                "decoder": [
                    "int",
                    "float",
                    "bool"
                ],
                "args": []
            }
        },
        "EncoderDecoderWithLoss.forward": {
            "name": "forward",
            "location": 154,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "List[str]",
                    "torch.Tensor"
                ],
                "x_mask": [
                    "float",
                    "bool",
                    "torch.Tensor"
                ],
                "y": [
                    "float",
                    "bool"
                ],
                "y_mask": [
                    "float",
                    "bool"
                ],
                "x_reps": [
                    "None"
                ]
            }
        },
        "OptimWarmupEncoderDecoder.__init__": {
            "name": "__init__",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "int"
                ],
                "args": []
            }
        },
        "OptimWarmupEncoderDecoder._update_rate": {
            "name": "_update_rate",
            "location": 366,
            "return": [
                "float",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "OptimWarmupEncoderDecoder.zero_grad": {
            "name": "zero_grad",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OptimWarmupEncoderDecoder.step": {
            "name": "step",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelSmoothingLoss.__init__": {
            "name": "__init__",
            "location": 394,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label_smoothing": [
                    "int",
                    "List[str]"
                ],
                "tgt_vocab_size": [
                    "float",
                    "int",
                    "Optional[Union[int,float]]",
                    "bool"
                ],
                "ignore_index": [
                    "int",
                    "torch.LongTensor",
                    "Optional[Dict[str,Any]]",
                    "Optional[int]"
                ]
            }
        },
        "LabelSmoothingLoss.forward": {
            "name": "forward",
            "location": 405,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "output": [
                    "float",
                    "int",
                    "torch.Tensor"
                ],
                "target": [
                    "str",
                    "Iterator[Any]",
                    "Dict[str, str]",
                    "Callable"
                ]
            }
        }
    },
    "craftassist-master/acl2020_submission/writeup/figures/acl_tree.py": {},
    "craftassist-master/cuberite_plugins/minecraft_asr_app/qr_web.py": {
        "makeQRCode": {
            "name": "makeQRCode",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "info": [
                    "Dict[str,Any]",
                    "Exception"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "HTTPHandler.do_GET": {
            "name": "do_GET",
            "location": 17,
            "return": [
                "None",
                "Iterator[object]",
                "Union[tuple,list]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/cuberite_plugins/minecraft_asr_app/start_qr_web.py": {
        "makeQRCode": {
            "name": "makeQRCode",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "info": [
                    "Dict[str,Any]",
                    "Exception"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "HTTPHandler.do_GET": {
            "name": "do_GET",
            "location": 10,
            "return": [
                "None",
                "Iterator[object]",
                "Union[tuple,list]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/minecraft_specs/block_images/read_images.py": {
        "get_colors": {
            "name": "get_colors",
            "location": 141,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "im": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "craftassist-master/python/agent_connection.py": {
        "agent_init": {
            "name": "agent_init",
            "location": 11,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "port": [
                    "int",
                    "str"
                ]
            }
        },
        "default_agent_name": {
            "name": "default_agent_name",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "craftassist-master/python/argument_parser.py": {
        "ArgumentParser.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent_type": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "base_path": [
                    "str",
                    "List[str]",
                    "Tuple[List[int],int]",
                    "Tuple[Union[list[int],int]]"
                ]
            }
        },
        "ArgumentParser.add_nsp_parser": {
            "name": "add_nsp_parser",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArgumentParser.add_mc_parser": {
            "name": "add_mc_parser",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArgumentParser.add_loco_parser": {
            "name": "add_loco_parser",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArgumentParser.fix_path": {
            "name": "fix_path",
            "location": 102,
            "return": [
                "int",
                "Tuple[str]",
                "str",
                "bool",
                "List[str]",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "opts": [
                    "Tuple[str]",
                    "int",
                    "str",
                    "Dict",
                    "bool"
                ]
            }
        },
        "ArgumentParser.parse": {
            "name": "parse",
            "location": 114,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/config_parser.py": {
        "inplace_edit": {
            "name": "inplace_edit",
            "location": 11,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "read_config": {
            "name": "read_config",
            "location": 19,
            "return": [
                "dict",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "lines": [
                    "str",
                    "List[str]",
                    "Iterator[str]"
                ]
            }
        },
        "write_config": {
            "name": "write_config",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "dict",
                    "str"
                ],
                "config": [
                    "Dict",
                    "Dict[str,Any]",
                    "Dict[str,bool]",
                    "Union[str,dict]",
                    "Mapping"
                ]
            }
        }
    },
    "craftassist-master/python/cuberite_process.py": {
        "add_plugins": {
            "name": "add_plugins",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "workdir": [
                    "str",
                    "int"
                ],
                "plugins": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "create_workdir": {
            "name": "create_workdir",
            "location": 36,
            "return": [
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "config_name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "bool",
                    "float",
                    "Optional[float]",
                    "Optional[bool]"
                ],
                "seed": [
                    "bool"
                ],
                "game_mode": [
                    "int",
                    "Union[int,str]",
                    "Sequence[Sequence[int]]",
                    "bool",
                    "str",
                    "float",
                    "Optional[Union[int,float]]",
                    "None"
                ],
                "port": [
                    "str",
                    "float",
                    "Optional[str]",
                    "Exception",
                    "None",
                    "Optional[bool]",
                    "bool"
                ],
                "plugins": [
                    "bool",
                    "Tuple[str]",
                    "Union[float,Tuple[float,float]]",
                    "float",
                    "Tuple[Union[float,float]]"
                ],
                "place_blocks_yzx": [
                    "bool",
                    "Optional[bool]",
                    "None",
                    "Optional[str]",
                    "str",
                    "int"
                ],
                "workdir_root": [
                    "Optional[Set[int]]",
                    "None",
                    "Set[int]"
                ]
            }
        },
        "generate_place_blocks_plugin": {
            "name": "generate_place_blocks_plugin",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "workdir": [
                    "str",
                    "bytes",
                    "Union[str,IO[bytes]]",
                    "bool"
                ],
                "place_blocks_yzx": [
                    "bool",
                    "float",
                    "numpy.matrix"
                ]
            }
        },
        "CuberiteProcess.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_name": [
                    "int",
                    "Optional[int]",
                    "Optional[str]",
                    "None",
                    "str"
                ],
                "seed": [
                    "int",
                    "Optional[int]",
                    "Optional[str]",
                    "None",
                    "str"
                ],
                "game_mode": [
                    "Text",
                    "Optional[int]",
                    "Optional[str]",
                    "int"
                ],
                "port": [
                    "int",
                    "str"
                ],
                "plugins": [
                    "List",
                    "Optional[int]",
                    "Optional[str]",
                    "int"
                ],
                "log_comm_in": [
                    "bool",
                    "Optional[str]",
                    "str"
                ],
                "place_blocks_yzx": [
                    "Optional[int]",
                    "None",
                    "int",
                    "Optional[str]",
                    "str"
                ],
                "workdir_root": [
                    "Optional[int]",
                    "None",
                    "int",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "CuberiteProcess.destroy": {
            "name": "destroy",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CuberiteProcess.wait": {
            "name": "wait",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CuberiteProcess.atexit": {
            "name": "atexit",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/edit_cuberite_config.py": {
        "set_seed": {
            "name": "set_seed",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "seed": [
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "str",
                    "bool",
                    "Tuple",
                    "None"
                ]
            }
        },
        "add_plugin": {
            "name": "add_plugin",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool"
                ],
                "plugin": [
                    "str",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        },
        "remove_plugin": {
            "name": "remove_plugin",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "plugin": [
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "str",
                    "bool",
                    "Tuple",
                    "None"
                ]
            }
        },
        "set_mode_survival": {
            "name": "set_mode_survival",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "set_mode_creative": {
            "name": "set_mode_creative",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "set_port": {
            "name": "set_port",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "port": [
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "str",
                    "bool",
                    "Tuple",
                    "None"
                ]
            }
        }
    },
    "craftassist-master/python/example_agent_random.py": {},
    "craftassist-master/python/generate_recipes.py": {
        "fill_recipe": {
            "name": "fill_recipe",
            "location": 38,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "recipe": [],
                "idm": [
                    "float",
                    "int"
                ],
                "xs": [
                    "float"
                ],
                "ys": [
                    "float"
                ]
            }
        },
        "format_recipe": {
            "name": "format_recipe",
            "location": 115,
            "return": [
                "str"
            ],
            "arguments": {
                "idm": [
                    "str",
                    "int",
                    "Iterable[Sequence[str]]",
                    "Set[str]"
                ],
                "recipe": [],
                "count": [
                    "Tuple[cirq.Qid]",
                    "Dict[str,str]",
                    "int",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "craftassist-master/python/ping_cuberite.py": {
        "ping": {
            "name": "ping",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "str",
                    "int",
                    "float"
                ],
                "port": [
                    "str",
                    "int",
                    "float"
                ],
                "timeout": [
                    "int",
                    "Optional[bool]",
                    "Optional[str]",
                    "Tuple"
                ]
            }
        }
    },
    "craftassist-master/python/place_blocks.py": {
        "yzx_to_dicts": {
            "name": "yzx_to_dicts",
            "location": 6,
            "return": [
                "bytes",
                "List[dict[Text,int]]"
            ],
            "arguments": {
                "yzx": [
                    "str",
                    "int",
                    "Dict"
                ],
                "y_offset": [
                    "int",
                    "str",
                    "float",
                    "List"
                ]
            }
        },
        "dicts_to_lua": {
            "name": "dicts_to_lua",
            "location": 24,
            "return": [
                "Text",
                "str",
                "Sequence[cirq.Qid]",
                "int"
            ],
            "arguments": {
                "dicts": [
                    "str",
                    "List[int]",
                    "int",
                    "List[list[str]]",
                    "float",
                    "List[List[str]]"
                ]
            }
        }
    },
    "craftassist-master/python/render_one_block_change.py": {
        "to_unit_vec": {
            "name": "to_unit_vec",
            "location": 24,
            "return": [
                "numpy.ndarray",
                "float",
                "Dict[str, numpy.ndarray]",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "yaw": [
                    "float",
                    "Union[numpy.ndarray, numpy.void]",
                    "numpy.ndarray",
                    "int",
                    "List[numpy.array]"
                ],
                "pitch": [
                    "float",
                    "Union[numpy.ndarray, numpy.void]",
                    "numpy.ndarray",
                    "int",
                    "List[numpy.array]"
                ]
            }
        },
        "ground_height": {
            "name": "ground_height",
            "location": 32,
            "return": [
                "str",
                "Exception",
                "Optional[str]"
            ],
            "arguments": {
                "blocks": [
                    "str"
                ]
            }
        },
        "ray_intersect_triangle": {
            "name": "ray_intersect_triangle",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "p0": [
                    "Optional[int]",
                    "int",
                    "tuple"
                ],
                "p1": [
                    "bool",
                    "float"
                ],
                "triangle": [
                    "Iterable[Any]",
                    "Iterable",
                    "str",
                    "int",
                    "List[int]",
                    "Sequence[int]"
                ]
            }
        },
        "intersect_cube": {
            "name": "intersect_cube",
            "location": 101,
            "return": [
                "bool"
            ],
            "arguments": {
                "xyz": [
                    "int",
                    "list",
                    "str"
                ],
                "camera": [
                    "numpy.ndarray",
                    "float"
                ],
                "focus": [
                    "numpy.ndarray",
                    "float"
                ]
            }
        },
        "change_one_block": {
            "name": "change_one_block",
            "location": 136,
            "return": [
                "Sequence",
                "Mapping"
            ],
            "arguments": {
                "schematic": [
                    "Dict[str, Tuple[int, int]]",
                    "int"
                ],
                "yaw": [
                    "Sequence",
                    "Mapping"
                ]
            }
        },
        "render": {
            "name": "render",
            "location": 173,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "npy_file": [
                    "str",
                    "bool",
                    "int",
                    "dict",
                    "List[str]"
                ],
                "out_dir": [
                    "str",
                    "List[int]",
                    "List[str]"
                ],
                "no_chunky": [
                    "bool",
                    "List[str]",
                    "str",
                    "int",
                    "tuple",
                    "float"
                ],
                "no_vision": [
                    "bool",
                    "List[str]",
                    "str",
                    "int",
                    "tuple",
                    "float"
                ],
                "port": [
                    "int",
                    "List[str]"
                ],
                "yaw": [
                    "int",
                    "bool",
                    "Optional[float]",
                    "List[int]",
                    "Optional[str]"
                ],
                "pitch": [
                    "int",
                    "float",
                    "bool",
                    "dict"
                ],
                "camera": [
                    "int",
                    "float",
                    "bool",
                    "dict"
                ],
                "spp": [
                    "int",
                    "str"
                ],
                "img_size": [
                    "int",
                    "str"
                ],
                "block_change": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "craftassist-master/python/render_schematic.py": {
        "to_unit_vec": {
            "name": "to_unit_vec",
            "location": 24,
            "return": [
                "numpy.ndarray",
                "float",
                "Dict[str, numpy.ndarray]",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "yaw": [
                    "float",
                    "Union[numpy.ndarray, numpy.void]",
                    "numpy.ndarray",
                    "int",
                    "List[numpy.array]"
                ],
                "pitch": [
                    "float",
                    "Union[numpy.ndarray, numpy.void]",
                    "numpy.ndarray",
                    "int",
                    "List[numpy.array]"
                ]
            }
        },
        "ground_height": {
            "name": "ground_height",
            "location": 32,
            "return": [
                "str",
                "Exception",
                "Optional[str]"
            ],
            "arguments": {
                "blocks": [
                    "str"
                ]
            }
        },
        "render": {
            "name": "render",
            "location": 40,
            "return": [],
            "arguments": {
                "npy_file": [
                    "int",
                    "bool",
                    "Optional[bool]",
                    "dict",
                    "Tuple[str, str, str]"
                ],
                "out_dir": [
                    "str",
                    "List[str]",
                    "bool",
                    "float"
                ],
                "world": [
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "seed": [
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "no_chunky": [
                    "bool",
                    "Optional[int]",
                    "str"
                ],
                "no_vision": [
                    "bool",
                    "Optional[int]",
                    "str"
                ],
                "port": [
                    "int"
                ],
                "distance": [
                    "Optional[Union[int, str]]",
                    "Optional[str]",
                    "Optional[int]",
                    "Union[str, int]",
                    "int",
                    "Optional[float]"
                ],
                "yaws": [
                    "Optional[str]",
                    "bool",
                    "Sequence[str]",
                    "Union[None, int]"
                ],
                "spp": [
                    "bool",
                    "Callable",
                    "str"
                ],
                "img_size": [
                    "str",
                    "List[str]",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "craftassist-master/python/repo.py": {
        "path": {
            "name": "path",
            "location": 11,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "p": [
                    "str"
                ]
            }
        }
    },
    "craftassist-master/python/schematic_convert.py": {},
    "craftassist-master/python/visual_segmentation.py": {
        "gen_segmentation_npy": {
            "name": "gen_segmentation_npy",
            "location": 44,
            "return": [
                "Text",
                "AbstractSet[str]",
                "str",
                "Callable[[str],str]"
            ],
            "arguments": {
                "raw_data": [
                    "List[List[str]]",
                    "List[Tuple[int, int]]",
                    "List[str]",
                    "Dict[str, int]",
                    "List[int]",
                    "Tuple[str]",
                    "Optional[Sequence[str]]",
                    "bool",
                    "int"
                ],
                "name": [
                    "str",
                    "bool",
                    "Tuple[int,int]",
                    "bytes"
                ],
                "save_folder": [
                    "Text",
                    "str",
                    "bool",
                    "Tuple[int,int]",
                    "bytes"
                ]
            }
        },
        "visualize_segmentation": {
            "name": "visualize_segmentation",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "segment_pkl": [
                    "str",
                    "Iterable[dict]",
                    "Dict"
                ],
                "save_folder": [
                    "Text",
                    "str",
                    "bool"
                ]
            }
        },
        "visualize_segmentation_by_step": {
            "name": "visualize_segmentation_by_step",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "segment_pkl": [
                    "str",
                    "Iterable[dict]",
                    "Dict"
                ],
                "save_folder": [
                    "Text",
                    "str",
                    "bool"
                ]
            }
        },
        "save_order_data": {
            "name": "save_order_data",
            "location": 159,
            "return": [
                "None",
                "bytes",
                "Dict[str,Any]"
            ],
            "arguments": {
                "segment_pkl": [
                    "str",
                    "Iterable[dict]",
                    "Dict"
                ],
                "save_folder": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "Dict[str,str]"
                ]
            }
        }
    },
    "craftassist-master/python/wait_for_cuberite.py": {
        "wait_for_server": {
            "name": "wait_for_server",
            "location": 11,
            "return": [
                "None",
                "int",
                "List[int]"
            ],
            "arguments": {
                "host": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "port": [
                    "int",
                    "str"
                ],
                "wait_ms": [
                    "int",
                    "Optional[int]",
                    "bool"
                ],
                "max_tries": [
                    "int",
                    "Dict[str,int]",
                    "str"
                ]
            }
        },
        "wait_for_cuberite": {
            "name": "wait_for_cuberite",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "int",
                    "str",
                    "bool"
                ],
                "port": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "craftassist-master/python/__init__.py": {},
    "craftassist-master/python/base_agent/base_util.py": {
        "number_from_span": {
            "name": "number_from_span",
            "location": 82,
            "return": [
                "str",
                "None",
                "BinaryIO",
                "float"
            ],
            "arguments": {
                "s": [
                    "float",
                    "int",
                    "str",
                    "Dict[str,str]",
                    "Dict"
                ]
            }
        },
        "check_username": {
            "name": "check_username",
            "location": 93,
            "return": [
                "bool",
                "Set",
                "Mapping",
                "str"
            ],
            "arguments": {
                "hashed_username": [
                    "Callable",
                    "IO[bytes]"
                ],
                "username": [
                    "str",
                    "Sequence[Any]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "get_bounds": {
            "name": "get_bounds",
            "location": 100,
            "return": [
                "Tuple",
                "Optional[str]",
                "List[List[int]]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "locs": [
                    "str",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        },
        "group_by": {
            "name": "group_by",
            "location": 106,
            "return": [
                "Dict[str,Any]",
                "Dict",
                "float",
                "Dict[str,bool]",
                "Union[Dict,str]",
                "int"
            ],
            "arguments": {
                "items": [
                    "str",
                    "List[T]",
                    "Hashable",
                    "bool"
                ],
                "key_fn": [
                    "str",
                    "int"
                ]
            }
        },
        "hash_user": {
            "name": "hash_user",
            "location": 114,
            "return": [
                "str",
                "bool",
                "float",
                "int"
            ],
            "arguments": {
                "username": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "manhat_dist": {
            "name": "manhat_dist",
            "location": 121,
            "return": [
                "str",
                "int",
                "bytearray",
                "bytes"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float"
                ],
                "b": [
                    "int",
                    "float"
                ]
            }
        },
        "pos_to_np": {
            "name": "pos_to_np",
            "location": 126,
            "return": [
                "None",
                "Optional[str]",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "pos": [
                    "bytes",
                    "Optional[bytes]",
                    "None",
                    "Optional[int]",
                    "float",
                    "int",
                    "Optional[float]",
                    "bool",
                    "Any",
                    "Optional[Any]"
                ]
            }
        },
        "shasum_file": {
            "name": "shasum_file",
            "location": 133,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Union[str,bytes,int]",
                    "bytes"
                ]
            }
        },
        "to_player_struct": {
            "name": "to_player_struct",
            "location": 146,
            "return": [
                "Player",
                "bool",
                "str",
                "bytes",
                "Tuple",
                "List[str]"
            ],
            "arguments": {
                "pos": [
                    "str",
                    "Union[Callable, str]",
                    "List[int]",
                    "Union[np.ndarray, Dict[str, np.ndarray], loompy.LayerManager]",
                    "int",
                    "Optional[float]"
                ],
                "yaw": [
                    "str",
                    "float",
                    "Sequence",
                    "bool"
                ],
                "pitch": [
                    "str",
                    "float",
                    "Sequence",
                    "bool"
                ],
                "eid": [
                    "Callable[Any,bool]",
                    "str",
                    "Callable[[Any],bool]",
                    "bool",
                    "None",
                    "Callable[[List],bool]",
                    "Callable[[str],bool]",
                    "Optional[str]"
                ],
                "name": [
                    "Callable[Any,bool]",
                    "str",
                    "Callable[[Any],bool]",
                    "bool",
                    "None",
                    "Callable[[List],bool]",
                    "Callable[[str],bool]",
                    "Optional[str]"
                ]
            }
        },
        "Time.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Time.round_time": {
            "name": "round_time",
            "location": 40,
            "return": [
                "int",
                "Tuple[int,int]"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "int",
                    "float",
                    "Sequence[T]",
                    "numpy.ndarray",
                    "Callable[[int],None]"
                ]
            }
        },
        "Time.get_time": {
            "name": "get_time",
            "location": 43,
            "return": [
                "Dict[str, Any]",
                "Optional[Callable]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Time.get_world_hour": {
            "name": "get_world_hour",
            "location": 46,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Time.add_tick": {
            "name": "add_tick",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ticks": [
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "ErrorWithResponse.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chat": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "TimingWarn.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_time": [
                    "int",
                    "float"
                ]
            }
        },
        "TimingWarn.__enter__": {
            "name": "__enter__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimingWarn.__exit__": {
            "name": "__exit__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Type",
                    "Optional[Type[BaseException]]",
                    "None",
                    "BaseException",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "exc_value": [
                    "Type",
                    "Optional[Type[BaseException]]",
                    "None",
                    "BaseException",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "exc_traceback": [
                    "Type",
                    "Optional[Type[BaseException]]",
                    "None",
                    "BaseException",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/condition.py": {
        "convert_comparison_value": {
            "name": "convert_comparison_value",
            "location": 159,
            "return": [
                "int",
                "Union[int,Tuple[int,...]]",
                "bool",
                "Tuple",
                "float",
                "None",
                "Tuple[Union[int,...]]",
                "Tuple[Union[int,int]]",
                "Dict",
                "Dict[str,float]",
                "Tuple[Union[numpy.ndarray,numpy.ndarray,numpy.ndarray,numpy.ndarray]]",
                "ScaledValue"
            ],
            "arguments": {
                "comparison_value": [
                    "int",
                    "Optional[float]",
                    "float",
                    "Dict",
                    "Union[int,Tuple[int,...]]",
                    "Dict[str,float]",
                    "None",
                    "Tuple[int,int]",
                    "Tuple[Union[int,...]]",
                    "Tuple[Union[int,int]]",
                    "Tuple[numpy.ndarray,numpy.ndarray,numpy.ndarray,numpy.ndarray]",
                    "Tuple[Union[numpy.ndarray,numpy.ndarray,numpy.ndarray,numpy.ndarray]]"
                ],
                "unit": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "build_special_time_condition": {
            "name": "build_special_time_condition",
            "location": 298,
            "return": [
                "AndCondition",
                "Comparator",
                "str",
                "Iterable[numpy.dtype]",
                "Callable",
                "Iterable[int]",
                "Dict[str,Any]",
                "Dict[Tuple[str,str],Tuple[float,float]]",
                "int"
            ],
            "arguments": {
                "agent": [
                    "str",
                    "int",
                    "float",
                    "numpy.ndarray"
                ],
                "start_time": [
                    "int",
                    "str",
                    "Optional[Sequence[Any]]",
                    "Sequence[Any]",
                    "Dict[str,List[str]]",
                    "None",
                    "Dict[str,list[str]]"
                ],
                "end_time": [
                    "int",
                    "str",
                    "Optional[Sequence[Any]]",
                    "Dict[str,List[str]]",
                    "List[str]",
                    "List[float]"
                ],
                "epsilon": [
                    "float",
                    "Sequence[int]",
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "Attribute.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Attribute.__call__": {
            "name": "__call__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mems": [
                    "Dict"
                ]
            }
        },
        "TableColumn.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "bool",
                    "Dict[str,Any]",
                    "Callable[[Any,Any],bool]",
                    "Callable[A,bool]"
                ],
                "attribute": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "TableColumn.__call__": {
            "name": "__call__",
            "location": 23,
            "return": [
                "List",
                "Optional[Iterable[Any]]",
                "Optional[str]",
                "Callable",
                "Callable[...,None]",
                "int",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "mems": [
                    "str"
                ]
            }
        },
        "LinearExtentAttribute.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "str",
                    "bool",
                    "AsyncContextManager[None]",
                    "int"
                ],
                "location_data": [
                    "Dict",
                    "Dict[str,Any]",
                    "str",
                    "Optional[str]",
                    "Optional[Union[Dict,str,int,bytes]]"
                ],
                "mem": [
                    "int",
                    "None",
                    "Optional[Dict]",
                    "Union[str,Dict[str,Any]]",
                    "Dict",
                    "str",
                    "Dict[str,Any]"
                ],
                "fixed_role": [
                    "Text",
                    "str",
                    "bytes",
                    "Dict[str,Any]",
                    "Dict[str,str]"
                ]
            }
        },
        "LinearExtentAttribute.extent": {
            "name": "extent",
            "location": 90,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "int",
                    "Union[str,bytes]",
                    "bytes"
                ],
                "destination": [
                    "str",
                    "int",
                    "Union[str,bytes]",
                    "bytes"
                ]
            }
        },
        "LinearExtentAttribute.__call__": {
            "name": "__call__",
            "location": 115,
            "return": [
                "List",
                "str",
                "bytes",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "mems": [
                    "int"
                ]
            }
        },
        "ComparisonValue.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "ComparisonValue.get_value": {
            "name": "get_value",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScaledValue.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ],
                "scale": [
                    "int",
                    "Tuple[str]",
                    "List[Tuple[int,float]]",
                    "str",
                    "List[tuple[Union[int,float]]]",
                    "float"
                ]
            }
        },
        "ScaledValue.get_value": {
            "name": "get_value",
            "location": 144,
            "return": [
                "str",
                "int",
                "bytes",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixedValue.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "str",
                    "Dict",
                    "Sequence",
                    "Dict[str,Any]",
                    "Type",
                    "int"
                ],
                "value": [
                    "float",
                    "str",
                    "int",
                    "Callable[[None],bool]",
                    "Callable[None,bool]"
                ]
            }
        },
        "FixedValue.get_value": {
            "name": "get_value",
            "location": 171,
            "return": [
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeValue.__init__": {
            "name": "__init__",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "bool"
                ],
                "mode": [
                    "Text",
                    "int",
                    "float",
                    "List[str]",
                    "Union[int,Tuple[int,int]]"
                ]
            }
        },
        "TimeValue.get_value": {
            "name": "get_value",
            "location": 198,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryColumnValue.__init__": {
            "name": "__init__",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "bool",
                    "str",
                    "AsyncContextManager[None]",
                    "int"
                ],
                "search_data": [
                    "Dict",
                    "str",
                    "Optional[Exception]",
                    "Exception",
                    "List[Dict[str,Any]]",
                    "None",
                    "List[dict[str,Any]]"
                ],
                "mem": [
                    "Optional[Dict]",
                    "int",
                    "None",
                    "Union[str,Dict[str,Any]]",
                    "Dict",
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "MemoryColumnValue.get_value": {
            "name": "get_value",
            "location": 212,
            "return": [
                "None",
                "int",
                "Dict",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinearExtentValue.__init__": {
            "name": "__init__",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "int",
                    "str"
                ],
                "linear_exent_attribute": [
                    "int",
                    "List[int]",
                    "bool"
                ],
                "mem": [
                    "bool",
                    "None",
                    "Iterable[int]",
                    "int",
                    "numpy.ndarray"
                ],
                "search_data": [
                    "bool",
                    "None",
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "LinearExtentValue.get_value": {
            "name": "get_value",
            "location": 237,
            "return": [
                "None",
                "Dict",
                "bool",
                "str",
                "Dict[str,Any]",
                "Dict[str,int]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Condition.__init__": {
            "name": "__init__",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Condition.check": {
            "name": "check",
            "location": 253,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NeverCondition.__init__": {
            "name": "__init__",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "bool",
                    "Dict[str,Any]",
                    "Callable[[Any,Any],bool]",
                    "Callable[A,bool]"
                ]
            }
        },
        "NeverCondition.check": {
            "name": "check",
            "location": 262,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AndCondition.__init__": {
            "name": "__init__",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "bool",
                    "Dict[str,Any]",
                    "Callable[[Any,Any],bool]",
                    "Callable[A,bool]"
                ],
                "conditions": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "AndCondition.check": {
            "name": "check",
            "location": 274,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrCondition.__init__": {
            "name": "__init__",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "bool",
                    "Dict[str,Any]",
                    "Callable[[Any,Any],bool]",
                    "Callable[A,bool]"
                ],
                "conditions": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "OrCondition.check": {
            "name": "check",
            "location": 289,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeCondition.__init__": {
            "name": "__init__",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [],
                "comparator": [
                    "str",
                    "Callable"
                ],
                "event": [
                    "bool",
                    "None",
                    "int"
                ]
            }
        },
        "TimeCondition.check": {
            "name": "check",
            "location": 354,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comparator.__init__": {
            "name": "__init__",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "bool",
                    "str",
                    "Optional[dict]",
                    "Dict",
                    "None"
                ],
                "comparison_type": [
                    "Text",
                    "int",
                    "str"
                ],
                "value_left": [
                    "bool",
                    "None",
                    "Tuple",
                    "Sequence",
                    "Optional[float]",
                    "float"
                ],
                "value_right": [
                    "bool",
                    "None",
                    "Tuple",
                    "Sequence",
                    "Optional[float]",
                    "float"
                ],
                "epsilon": [
                    "int"
                ]
            }
        },
        "Comparator.check": {
            "name": "check",
            "location": 379,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/base_agent/core.py": {
        "BaseAgent.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "opts": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "name": [
                    "List[str]",
                    "str",
                    "None",
                    "Dict"
                ]
            }
        },
        "BaseAgent.start": {
            "name": "start",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseAgent.step": {
            "name": "step",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseAgent.perceive": {
            "name": "perceive",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseAgent.controller_step": {
            "name": "controller_step",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseAgent.task_step": {
            "name": "task_step",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseAgent.handle_exception": {
            "name": "handle_exception",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "Exception",
                    "str",
                    "Callable",
                    "int"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/dialogue_manager.py": {
        "DialogueManager.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "bool",
                    "Optional[Union[IPUtilityFunction,UtilityDistribution]]",
                    "None"
                ],
                "model": [
                    "bool",
                    "Optional[Union[IPUtilityFunction,UtilityDistribution]]",
                    "None"
                ]
            }
        },
        "DialogueManager.get_safety_words": {
            "name": "get_safety_words",
            "location": 46,
            "return": [
                "List[Union[str,list]]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "safety_words_path": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "DialogueManager.is_safe": {
            "name": "is_safe",
            "location": 57,
            "return": [
                "bool",
                "IO[str]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str",
                    "List[str]",
                    "Counter",
                    "Counter[str]",
                    "Iterable[str]"
                ]
            }
        },
        "DialogueManager.step": {
            "name": "step",
            "location": 67,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "chat": [
                    "str",
                    "Dict"
                ]
            }
        },
        "DialogueManager.maybe_get_dialogue_obj": {
            "name": "maybe_get_dialogue_obj",
            "location": 88,
            "return": [
                "Optional[dialogue_objects.DialogueObject]",
                "None"
            ],
            "arguments": {
                "self": [],
                "chat": [
                    "bool",
                    "Dict[str,Any]",
                    "Callable[,T]",
                    "int"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/dialogue_stack.py": {
        "DialogueStack.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "agent": [
                    "int",
                    "bool",
                    "float"
                ],
                "memory": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "DialogueStack.__getitem__": {
            "name": "__getitem__",
            "location": 20,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "Iterator"
                ]
            }
        },
        "DialogueStack.peek": {
            "name": "peek",
            "location": 24,
            "return": [
                "Optional[str]",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DialogueStack.clear": {
            "name": "clear",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DialogueStack.append": {
            "name": "append",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "dialogue_object": [
                    "int",
                    "str",
                    "T"
                ]
            }
        },
        "DialogueStack.append_new": {
            "name": "append_new",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "cls": [
                    "Sequence[float]",
                    "str"
                ]
            }
        },
        "DialogueStack.step": {
            "name": "step",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DialogueStack.__len__": {
            "name": "__len__",
            "location": 73,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/base_agent/loco_mc_agent.py": {
        "default_agent_name": {
            "name": "default_agent_name",
            "location": 156,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "LocoMCAgent.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "opts": [
                    "str",
                    "int",
                    "float"
                ],
                "name": [
                    "str",
                    "None",
                    "Dict",
                    "Set[str]",
                    "Dict[str,LabwareDefinition]",
                    "Dict[str,L]"
                ]
            }
        },
        "LocoMCAgent.init_physical_interfaces": {
            "name": "init_physical_interfaces",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocoMCAgent.init_perception": {
            "name": "init_perception",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocoMCAgent.init_memory": {
            "name": "init_memory",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocoMCAgent.init_controller": {
            "name": "init_controller",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocoMCAgent.handle_exception": {
            "name": "handle_exception",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "Exception",
                    "str",
                    "Callable",
                    "int",
                    "logging.Logger"
                ]
            }
        },
        "LocoMCAgent.step": {
            "name": "step",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocoMCAgent.task_step": {
            "name": "task_step",
            "location": 95,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "sleep_time": [
                    "float",
                    "int"
                ]
            }
        },
        "LocoMCAgent.get_time": {
            "name": "get_time",
            "location": 115,
            "return": [
                "Dict[str, Any]",
                "str",
                "boucanpy.core.http_server.HttpServerRepo",
                "boucanpy.core.dns_server.DnsServerRepo",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocoMCAgent.perceive": {
            "name": "perceive",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "force": [
                    "bool",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "LocoMCAgent.controller_step": {
            "name": "controller_step",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/base_agent/memory_filters.py": {
        "maybe_and": {
            "name": "maybe_and",
            "location": 6,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sql": [
                    "Iterable[T]"
                ],
                "a": [
                    "Iterable[T]"
                ]
            }
        },
        "maybe_or": {
            "name": "maybe_or",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sql": [
                    "Iterable[T]"
                ],
                "a": [
                    "Iterable[T]"
                ]
            }
        },
        "get_property_value": {
            "name": "get_property_value",
            "location": 21,
            "return": [
                "None",
                "Dict",
                "List[Dict]",
                "int",
                "Optional[BaseException]"
            ],
            "arguments": {
                "agent_memory": [
                    "int",
                    "bool"
                ],
                "mem": [
                    "int",
                    "Tuple"
                ],
                "prop": [
                    "Dict[str, Any]",
                    "Iterable[str]"
                ]
            }
        },
        "MemorySearcher.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "self_memid": [
                    "Text",
                    "str",
                    "List",
                    "Dict",
                    "int",
                    "bytes"
                ],
                "search_data": [
                    "Tuple[int,str,bytearray]",
                    "None",
                    "Dict[str,str]",
                    "bool",
                    "Tuple[Union[int,str,bytearray]]",
                    "Callable",
                    "Optional[TrackingData]",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "MemorySearcher.search": {
            "name": "search",
            "location": 53,
            "return": [
                "List[ReferenceObjectNode]",
                "None"
            ],
            "arguments": {
                "self": [],
                "memory": [
                    "str",
                    "Sequence[str]",
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "Type",
                    "Type[T]",
                    "T"
                ],
                "search_data": [
                    "str",
                    "None",
                    "Sequence[str]",
                    "List[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "List[dict[str,Any]]",
                    "Type[T]",
                    "Type",
                    "T"
                ]
            }
        },
        "ReferenceObjectSearcher.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "self_memid": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "Optional[float]",
                    "bool",
                    "int"
                ],
                "search_data": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]",
                    "float",
                    "Optional[float]",
                    "int"
                ]
            }
        },
        "ReferenceObjectSearcher.is_filter_empty": {
            "name": "is_filter_empty",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "filter_dict": [
                    "Dict",
                    "Dict[str,Any]",
                    "str",
                    "List[dict]"
                ]
            }
        },
        "ReferenceObjectSearcher.range_queries": {
            "name": "range_queries",
            "location": 82,
            "return": [
                "Tuple[Text]",
                "str",
                "int",
                "Union[str,int,float]"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "Dict",
                    "str",
                    "List[str]",
                    "Optional[Dict]"
                ],
                "table": [
                    "str",
                    "bool"
                ],
                "a": [
                    "bool",
                    "str",
                    "Optional[List[Any]]",
                    "Union[Type[Exception],Tuple[Any,...]]",
                    "List[str]",
                    "List"
                ]
            }
        },
        "ReferenceObjectSearcher.exact_matches": {
            "name": "exact_matches",
            "location": 100,
            "return": [
                "Tuple[Text]",
                "Callable[[T],bool]",
                "Iterable[T]"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "float"
                ],
                "table": [
                    "Tuple[Union[int,int]]",
                    "str",
                    "int",
                    "Tuple[int,int]"
                ],
                "a": [
                    "bool",
                    "int",
                    "float",
                    "Dict[str,float]",
                    "str"
                ]
            }
        },
        "ReferenceObjectSearcher.triples": {
            "name": "triples",
            "location": 109,
            "return": [
                "Tuple[Text]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "triples": [
                    "list",
                    "List[str]",
                    "Callable"
                ],
                "a": [
                    "Iterable[T]",
                    "bool"
                ]
            }
        },
        "ReferenceObjectSearcher.get_query": {
            "name": "get_query",
            "location": 128,
            "return": [
                "Tuple[Union[Text,list]]",
                "int",
                "Tuple[Union[list,str]]",
                "str",
                "Dict[str,float]"
            ],
            "arguments": {
                "self": [],
                "filter_dict": [
                    "Dict",
                    "Dict[str,str]",
                    "Dict[str,dict[str,Any]]",
                    "str",
                    "Dict[str,Dict[str,Any]]"
                ],
                "ignore_self": [
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "List",
                    "List[Entity]"
                ]
            }
        },
        "ReferenceObjectSearcher.handle_special": {
            "name": "handle_special",
            "location": 181,
            "return": [
                "List",
                "bool",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "memory": [
                    "int",
                    "str"
                ],
                "search_data": [
                    "Dict",
                    "Dict[str,Any]",
                    "str",
                    "bytes"
                ]
            }
        },
        "ReferenceObjectSearcher.search": {
            "name": "search",
            "location": 202,
            "return": [
                "List",
                "int",
                "List[Tuple[str,int]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "memory": [
                    "Optional[Any]",
                    "str",
                    "Any",
                    "None"
                ],
                "search_data": [
                    "Dict[str,Any]",
                    "Dict",
                    "str",
                    "Mapping[str,Any]",
                    "Type[Declared]",
                    "List[Dict]"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/memory_nodes.py": {
        "link_archive_to_mem": {
            "name": "link_archive_to_mem",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "agent_memory": [
                    "List[str]",
                    "str",
                    "Dict[str, Any]"
                ],
                "memid": [
                    "List[str]",
                    "str",
                    "Dict[str,Any]"
                ],
                "archive_memid": [
                    "List[str]",
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "MemoryNode.new": {
            "name": "new",
            "location": 14,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [],
                "agent_memory": [
                    "Callable",
                    "int",
                    "bytes",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ],
                "snapshot": [
                    "bool"
                ]
            }
        },
        "MemoryNode.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent_memory": [
                    "int",
                    "float",
                    "bool"
                ],
                "memid": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "MemoryNode.get_tags": {
            "name": "get_tags",
            "location": 26,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryNode.get_properties": {
            "name": "get_properties",
            "location": 29,
            "return": [
                "Dict",
                "Dict[str,Any]",
                "Dict[str,str]",
                "Optional[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryNode.update_recently_attended": {
            "name": "update_recently_attended",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryNode._more_properties_blacklist": {
            "name": "_more_properties_blacklist",
            "location": 37,
            "return": [
                "List",
                "Type",
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryNode.snapshot": {
            "name": "snapshot",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent_memory": [
                    "IO[bytes]",
                    "IO"
                ]
            }
        },
        "ProgramNode.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent_memory": [
                    "str",
                    "int"
                ],
                "memid": [
                    "str",
                    "int"
                ]
            }
        },
        "ProgramNode.create": {
            "name": "create",
            "location": 92,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "dict"
                ],
                "memory": [
                    "str",
                    "Dict[str,Union[str,Set]]",
                    "Dict[str,Union[str,set]]"
                ],
                "logical_form": [
                    "str",
                    "Dict"
                ],
                "snapshot": [
                    "bool",
                    "int",
                    "Dict"
                ]
            }
        },
        "NamedAbstractionNode.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent_memory": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "Optional[str]",
                    "None"
                ],
                "memid": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "NamedAbstractionNode.create": {
            "name": "create",
            "location": 115,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Union[int, str]",
                    "Dict[str, Any]",
                    "bool"
                ],
                "memory": [
                    "str",
                    "dict",
                    "Optional[Dict]"
                ],
                "name": [
                    "str",
                    "Type"
                ],
                "snapshot": [
                    "bool",
                    "str",
                    "Union[int,str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "SetNode.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent_memory": [
                    "bool",
                    "Dict[str,Any]",
                    "Callable[[Any,Any],bool]",
                    "Callable[A,bool]"
                ],
                "memid": [
                    "bool",
                    "Dict[str,Any]",
                    "Callable[[Any,Any],bool]",
                    "Callable[A,bool]"
                ]
            }
        },
        "SetNode.create": {
            "name": "create",
            "location": 139,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "dict"
                ],
                "memory": [
                    "Type[T]",
                    "bool",
                    "Type",
                    "dict"
                ],
                "snapshot": [
                    "bool",
                    "int",
                    "Dict"
                ]
            }
        },
        "SetNode.get_members": {
            "name": "get_members",
            "location": 144,
            "return": [
                "Optional[str]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetNode.snapshot": {
            "name": "snapshot",
            "location": 147,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "agent_memory": [
                    "Optional[int]",
                    "int",
                    "Callable",
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "ReferenceObjectNode.get_pos": {
            "name": "get_pos",
            "location": 159,
            "return": [
                "base_util.XYZ",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReferenceObjectNode.get_point_at_target": {
            "name": "get_point_at_target",
            "location": 162,
            "return": [
                "base_util.POINT_AT_TARGET",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReferenceObjectNode.get_bounds": {
            "name": "get_bounds",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayerNode.__init__": {
            "name": "__init__",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent_memory": [
                    "str",
                    "int"
                ],
                "memid": [
                    "str",
                    "int"
                ]
            }
        },
        "PlayerNode.create": {
            "name": "create",
            "location": 187,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "dict"
                ],
                "memory": [
                    "str",
                    "Set",
                    "Type[T]",
                    "Type",
                    "Callable[[str],bool]",
                    "Callable[str,bool]"
                ],
                "player_struct": [
                    "List[str]",
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "PlayerNode.update": {
            "name": "update",
            "location": 209,
            "return": [
                "int",
                "str",
                "float",
                "Dict[str,Any]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "Type",
                    "Type[T]",
                    "Callable[None,None]",
                    "Callable[[None],None]",
                    "Type[tuple]"
                ],
                "memory": [
                    "int",
                    "str",
                    "Dict[str,Any]"
                ],
                "p": [
                    "int",
                    "str",
                    "Dict[str,Any]"
                ],
                "memid": [
                    "int",
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "PlayerNode.get_pos": {
            "name": "get_pos",
            "location": 217,
            "return": [
                "Tuple[Union[int,float,list[float],str,list,list[tuple[Union[Any,Any]]],Pattern]]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayerNode.get_point_at_target": {
            "name": "get_point_at_target",
            "location": 225,
            "return": [
                "bool",
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayerNode.get_bounds": {
            "name": "get_bounds",
            "location": 230,
            "return": [
                "Tuple",
                "str",
                "Callable",
                "Optional[str]",
                "List[int]",
                "Type",
                "Hashable"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayerNode.get_struct": {
            "name": "get_struct",
            "location": 234,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocationNode.__init__": {
            "name": "__init__",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent_memory": [
                    "Dict[cirq.Qid,float]",
                    "int",
                    "str",
                    "bool"
                ],
                "memid": [
                    "Dict[cirq.Qid,float]",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "LocationNode.create": {
            "name": "create",
            "location": 261,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "dict"
                ],
                "memory": [
                    "int",
                    "Dict"
                ],
                "xyz": [
                    "str",
                    "util.XYZ",
                    "float",
                    "Callable"
                ]
            }
        },
        "LocationNode.get_bounds": {
            "name": "get_bounds",
            "location": 273,
            "return": [
                "Tuple",
                "str",
                "Callable",
                "Optional[str]",
                "List[int]",
                "Type",
                "Hashable"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocationNode.get_pos": {
            "name": "get_pos",
            "location": 277,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocationNode.get_point_at_target": {
            "name": "get_point_at_target",
            "location": 280,
            "return": [
                "bool",
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "AttentionNode.__init__": {
            "name": "__init__",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent_memory": [
                    "bool",
                    "Dict[str,Any]",
                    "Callable[[Any,Any],bool]",
                    "Callable[A,bool]"
                ],
                "memid": [
                    "bool",
                    "Dict[str,Any]",
                    "Callable[[Any,Any],bool]",
                    "Callable[A,bool]"
                ]
            }
        },
        "AttentionNode.create": {
            "name": "create",
            "location": 301,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "dict"
                ],
                "memory": [
                    "int",
                    "Dict"
                ],
                "xyz": [
                    "str",
                    "util.XYZ",
                    "float",
                    "Callable"
                ],
                "attender": [
                    "str",
                    "None",
                    "float",
                    "util.XYZ",
                    "Callable"
                ]
            }
        },
        "TimeNode.__init__": {
            "name": "__init__",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent_memory": [
                    "Iterable[float]",
                    "Optional[Iterable[float]]",
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "Dict[str,str]"
                ],
                "memid": [
                    "Iterable[float]",
                    "Optional[Iterable[float]]",
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "Dict[str,str]"
                ]
            }
        },
        "TimeNode.create": {
            "name": "create",
            "location": 328,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Type",
                    "str"
                ],
                "memory": [
                    "int",
                    "Type",
                    "str"
                ],
                "time": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "ChatNode.__init__": {
            "name": "__init__",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent_memory": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "memid": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "ChatNode.create": {
            "name": "create",
            "location": 351,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "dict"
                ],
                "memory": [
                    "Type[T]",
                    "bool",
                    "Type",
                    "dict"
                ],
                "speaker": [
                    "str",
                    "int"
                ],
                "chat": [
                    "str",
                    "int"
                ]
            }
        },
        "TaskNode.__init__": {
            "name": "__init__",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent_memory": [
                    "bool",
                    "str",
                    "int"
                ],
                "memid": [
                    "str",
                    "Union[str,List[str],Tuple[str,...]]",
                    "bool",
                    "List[str]",
                    "Union[str,dict]",
                    "Tuple[Union[str,...]]",
                    "Dict"
                ]
            }
        },
        "TaskNode.create": {
            "name": "create",
            "location": 381,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "List[Dict]"
                ],
                "memory": [
                    "Dict[str, Any]",
                    "str"
                ],
                "task": [
                    "Dict[str,Any]",
                    "str",
                    "util.freefocus.sql.Task"
                ]
            }
        },
        "TaskNode.get_chat": {
            "name": "get_chat",
            "location": 393,
            "return": [
                "ChatNode",
                "Optional[str]",
                "None",
                "str",
                "Callable[,int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskNode.get_parent_task": {
            "name": "get_parent_task",
            "location": 402,
            "return": [
                "None",
                "TaskNode",
                "Optional[int]",
                "Optional[str]",
                "str",
                "List[str]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskNode.get_root_task": {
            "name": "get_root_task",
            "location": 413,
            "return": [
                "TaskNode",
                "bool",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskNode.get_child_tasks": {
            "name": "get_child_tasks",
            "location": 421,
            "return": [
                "List[TaskNode]",
                "Optional[str]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskNode.all_descendent_tasks": {
            "name": "all_descendent_tasks",
            "location": 427,
            "return": [
                "List[TaskNode]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "include_root": [
                    "bool",
                    "Dict",
                    "str",
                    "Sequence[str]",
                    "List[str]"
                ]
            }
        },
        "TaskNode.__repr__": {
            "name": "__repr__",
            "location": 445,
            "return": [
                "str",
                "int",
                "Mapping[str,int]",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/base_agent/nsp_dialogue_manager.py": {
        "NSPDialogueManager.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "bool",
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "None",
                    "int",
                    "Iterable[str]"
                ],
                "dialogue_object_classes": [
                    "bool",
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "None",
                    "int",
                    "Iterable[str]"
                ],
                "opts": [
                    "bool",
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "None",
                    "int",
                    "Iterable[str]"
                ]
            }
        },
        "NSPDialogueManager.add_to_dict": {
            "name": "add_to_dict",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chat_message": [
                    "Dict",
                    "str",
                    "Dict[str,Dict]",
                    "Dict[str,float]",
                    "Dict[str,dict]"
                ],
                "action_dict": [
                    "Dict",
                    "str",
                    "Dict[str,Dict]",
                    "Dict[str,float]",
                    "Dict[str,dict]"
                ]
            }
        },
        "NSPDialogueManager.maybe_get_dialogue_obj": {
            "name": "maybe_get_dialogue_obj",
            "location": 136,
            "return": [
                "None",
                "Optional[int]",
                "BotCapabilities",
                "BotGreet",
                "bool",
                "Optional[str]",
                "Dict",
                "Optional[Dict]",
                "str"
            ],
            "arguments": {
                "self": [],
                "chat": [
                    "bool",
                    "str",
                    "int",
                    "slice"
                ]
            }
        },
        "NSPDialogueManager.handle_logical_form": {
            "name": "handle_logical_form",
            "location": 158,
            "return": [
                "Say",
                "bytes",
                "Tuple[float,float]",
                "str"
            ],
            "arguments": {
                "self": [],
                "speaker": [
                    "str",
                    "Dict[str,str]",
                    "Mapping[str,int]",
                    "Mapping"
                ],
                "d": [
                    "bytes",
                    "str",
                    "Dict",
                    "Sequence",
                    "Callable[[bytes],bytes]",
                    "float"
                ],
                "chatstr": [
                    "Any",
                    "List",
                    "Dict",
                    "str",
                    "bool"
                ]
            }
        },
        "NSPDialogueManager.get_logical_form": {
            "name": "get_logical_form",
            "location": 202,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "bool",
                    "int"
                ],
                "model": [
                    "str",
                    "bytes",
                    "dict",
                    "Optional[Dict]",
                    "Optional[str]"
                ],
                "chat_as_list": [
                    "bool",
                    "str",
                    "int",
                    "Dict[str,str]",
                    "List[Dict[str,Any]]",
                    "Type[Exception]"
                ]
            }
        },
        "NSPDialogueManager.__init__.query_parser": {
            "name": "query_parser",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "sid": [
                    "bytes",
                    "Optional[bytes]",
                    "str"
                ],
                "data": [
                    "int",
                    "List[int]",
                    "bytes",
                    "List[str]",
                    "Union[Iterable, str]",
                    "str"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/post_process_logical_form.py": {
        "fix_fill_and_destroy_location": {
            "name": "fix_fill_and_destroy_location",
            "location": 4,
            "return": [
                "dict"
            ],
            "arguments": {
                "action_dict": [
                    "dict",
                    "Dict[str, float]",
                    "Dict[str, Any]"
                ]
            }
        },
        "fix_location_type_in_location": {
            "name": "fix_location_type_in_location",
            "location": 16,
            "return": [
                "T",
                "Dict[str,Union[float,str]]"
            ],
            "arguments": {
                "d": [
                    "type"
                ]
            }
        },
        "fix_reference_object_with_filters": {
            "name": "fix_reference_object_with_filters",
            "location": 46,
            "return": [
                "str",
                "Type",
                "Dict[str,bool]",
                "Dict[str,Any]",
                "float",
                "Dict"
            ],
            "arguments": {
                "d": [
                    "Dict"
                ]
            }
        },
        "post_process_logical_form": {
            "name": "post_process_logical_form",
            "location": 68,
            "return": [
                "Optional[Type]",
                "dict"
            ],
            "arguments": {
                "logical_form": [
                    "int"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/preprocess.py": {
        "word_tokenize": {
            "name": "word_tokenize",
            "location": 15,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "st": [
                    "float",
                    "List[Exception]",
                    "str",
                    "Optional[float]",
                    "None"
                ]
            }
        },
        "sentence_split": {
            "name": "sentence_split",
            "location": 20,
            "return": [
                "List[str]",
                "str",
                "Optional[dict]"
            ],
            "arguments": {
                "st": [
                    "str",
                    "Union[str,Iterable[str]]",
                    "int"
                ]
            }
        },
        "insert_spaces": {
            "name": "insert_spaces",
            "location": 31,
            "return": [
                "Text",
                "Sequence[int]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "chat": [
                    "Set[str]",
                    "List[float]"
                ]
            }
        },
        "preprocess_chat": {
            "name": "preprocess_chat",
            "location": 55,
            "return": [
                "List[str]",
                "int",
                "List",
                "Callable",
                "str"
            ],
            "arguments": {
                "chat": [
                    "str"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/sql_memory.py": {
        "AgentMemory.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db_file": [
                    "Text",
                    "str",
                    "bool",
                    "Sequence[str]"
                ],
                "schema_paths": [
                    "List",
                    "bool",
                    "str",
                    "List[str]"
                ],
                "db_log_path": [
                    "str"
                ],
                "nodelist": [
                    "bool",
                    "str",
                    "List[str]"
                ],
                "agent_time": [
                    "None",
                    "Optional[int]",
                    "int",
                    "float",
                    "str",
                    "Optional[float]",
                    "Tuple[Union[int,int,int]]",
                    "Tuple[int,int,int]",
                    "bool"
                ]
            }
        },
        "AgentMemory.__del__": {
            "name": "__del__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentMemory.init_time_interface": {
            "name": "init_time_interface",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent_time": [
                    "int",
                    "str",
                    "None",
                    "float"
                ]
            }
        },
        "AgentMemory.get_time": {
            "name": "get_time",
            "location": 86,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentMemory.get_world_time": {
            "name": "get_world_time",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentMemory.add_tick": {
            "name": "add_tick",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ticks": [
                    "int"
                ]
            }
        },
        "AgentMemory.update": {
            "name": "update",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "AgentMemory.set_memory_updated_time": {
            "name": "set_memory_updated_time",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "memid": []
            }
        },
        "AgentMemory.set_memory_attended_time": {
            "name": "set_memory_attended_time",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "memid": []
            }
        },
        "AgentMemory.update_recent_entities": {
            "name": "update_recent_entities",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mems": [
                    "List",
                    "str",
                    "logging.Logger",
                    "int"
                ]
            }
        },
        "AgentMemory.get_recent_entities": {
            "name": "get_recent_entities",
            "location": 115,
            "return": [
                "List",
                "int",
                "Callable[,bool]",
                "str",
                "List[Dict[str,str]]",
                "Dict[str,Tuple[str,str]]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "memtype": [
                    "str",
                    "int",
                    "bool"
                ],
                "time_window": [
                    "Dict[int,dict]",
                    "int"
                ]
            }
        },
        "AgentMemory.get_node_from_memid": {
            "name": "get_node_from_memid",
            "location": 130,
            "return": [
                "Set[str]",
                "Dict",
                "int",
                "range",
                "Dict[str,int]"
            ],
            "arguments": {
                "self": [],
                "memid": [
                    "int"
                ]
            }
        },
        "AgentMemory.get_mem_by_id": {
            "name": "get_mem_by_id",
            "location": 134,
            "return": [
                "MemoryNode",
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "memid": [
                    "str",
                    "Dict[str,Union[str,Set]]",
                    "Dict[str,Union[str,set]]"
                ],
                "node_type": [
                    "str",
                    "BinaryIO",
                    "None",
                    "Type"
                ]
            }
        },
        "AgentMemory.get_all_tagged_mems": {
            "name": "get_all_tagged_mems",
            "location": 144,
            "return": [
                "List",
                "List[Dict[str,Any]]",
                "str",
                "bool",
                "Optional[bool]",
                "int"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "List[str]",
                    "Dict",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "AgentMemory.check_memid_exists": {
            "name": "check_memid_exists",
            "location": 148,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "memid": [
                    "str",
                    "Dict[str,Any]",
                    "Callable",
                    "Tuple[str]",
                    "Optional[str]",
                    "None"
                ],
                "table": [
                    "str",
                    "Dict[str,Any]",
                    "Callable",
                    "Tuple[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "AgentMemory.forget": {
            "name": "forget",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "memid": [
                    "bool",
                    "Iterable[str]",
                    "str"
                ],
                "hard": [
                    "bool",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict"
                ]
            }
        },
        "AgentMemory.get_reference_objects": {
            "name": "get_reference_objects",
            "location": 167,
            "return": [
                "str",
                "Dict[str, Type[Any]]",
                "Dict[str, Any]",
                "Dict[str, str]",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "filter_dict": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Dict[str,str]",
                    "None"
                ]
            }
        },
        "AgentMemory.add_triple": {
            "name": "add_triple",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subj": [
                    "Text",
                    "bool",
                    "Type",
                    "str",
                    "Union[type,Tuple[type,object]]"
                ],
                "obj": [
                    "Text",
                    "bool",
                    "Type",
                    "str",
                    "Union[type,Tuple[type,object]]"
                ],
                "subj_text": [
                    "Text",
                    "str",
                    "Type",
                    "bool"
                ],
                "pred_text": [
                    "Text",
                    "str",
                    "bool",
                    "Optional[Type]",
                    "Optional[str]",
                    "Dict[str,str]",
                    "Optional[List[str]]"
                ],
                "obj_text": [
                    "Text",
                    "str",
                    "Type",
                    "bool"
                ],
                "confidence": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "AgentMemory.tag": {
            "name": "tag",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subj_memid": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "tag_text": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "AgentMemory.untag": {
            "name": "untag",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subj_memid": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Callable",
                    "None"
                ],
                "tag_text": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Callable",
                    "None"
                ]
            }
        },
        "AgentMemory.get_memids_by_tag": {
            "name": "get_memids_by_tag",
            "location": 227,
            "return": [
                "List",
                "List[str]",
                "Optional[dict]"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "AgentMemory.get_tags_by_memid": {
            "name": "get_tags_by_memid",
            "location": 234,
            "return": [
                "List",
                "List[str]",
                "Optional[bool]",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "subj_memid": [
                    "int",
                    "str",
                    "List"
                ],
                "return_text": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "AgentMemory.get_triples": {
            "name": "get_triples",
            "location": 249,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "subj": [
                    "str",
                    "None",
                    "Optional[int]",
                    "Optional[str]",
                    "int"
                ],
                "obj": [
                    "str",
                    "None",
                    "Optional[int]",
                    "Optional[str]",
                    "int"
                ],
                "subj_text": [
                    "str",
                    "None",
                    "Optional[int]",
                    "Optional[str]",
                    "int"
                ],
                "pred_text": [
                    "str",
                    "None",
                    "Optional[int]",
                    "Optional[str]",
                    "int"
                ],
                "obj_text": [
                    "str",
                    "None",
                    "Optional[int]",
                    "Optional[str]",
                    "int"
                ],
                "return_obj_text": [
                    "Text",
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "AgentMemory.remove_memid_triple": {
            "name": "remove_memid_triple",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "memid": [
                    "int",
                    "Callable",
                    "str"
                ],
                "role": [
                    "Text",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "AgentMemory.add_chat": {
            "name": "add_chat",
            "location": 312,
            "return": [
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "speaker_memid": [
                    "int",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "chat": [
                    "int",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "AgentMemory.get_chat_by_id": {
            "name": "get_chat_by_id",
            "location": 315,
            "return": [
                "str",
                "ChatNode"
            ],
            "arguments": {
                "self": [],
                "memid": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ]
            }
        },
        "AgentMemory.get_recent_chats": {
            "name": "get_recent_chats",
            "location": 318,
            "return": [
                "List[ChatNode]",
                "List[str]",
                "bool",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "AgentMemory.get_most_recent_incoming_chat": {
            "name": "get_most_recent_incoming_chat",
            "location": 323,
            "return": [
                "ChatNode",
                "str",
                "None",
                "Optional[str]",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "after": [
                    "int"
                ]
            }
        },
        "AgentMemory.get_player_by_eid": {
            "name": "get_player_by_eid",
            "location": 345,
            "return": [
                "PlayerNode",
                "str",
                "None",
                "Optional[str]",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "eid": [
                    "int",
                    "float",
                    "str",
                    "bytes",
                    "Iterator[T]",
                    "Iterator"
                ]
            }
        },
        "AgentMemory.get_player_by_name": {
            "name": "get_player_by_name",
            "location": 352,
            "return": [
                "str",
                "PlayerNode",
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Union[str,List]",
                    "List"
                ]
            }
        },
        "AgentMemory.get_players_tagged": {
            "name": "get_players_tagged",
            "location": 362,
            "return": [
                "List",
                "Tuple[int,int]",
                "int",
                "Hashable",
                "bool",
                "List[str]",
                "str",
                "Dict[str,Callable[,Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentMemory.get_player_by_id": {
            "name": "get_player_by_id",
            "location": 367,
            "return": [
                "str",
                "PlayerNode"
            ],
            "arguments": {
                "self": [],
                "memid": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ]
            }
        },
        "AgentMemory.add_location": {
            "name": "add_location",
            "location": 374,
            "return": [
                "bool",
                "dict",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "xyz": [
                    "List[str]",
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "AgentMemory.get_location_by_id": {
            "name": "get_location_by_id",
            "location": 377,
            "return": [
                "LocationNode",
                "Optional[str]",
                "int",
                "Dict",
                "List[Dict[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "memid": [
                    "str",
                    "bool",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "AgentMemory.add_time": {
            "name": "add_time",
            "location": 384,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "float",
                    "int"
                ]
            }
        },
        "AgentMemory.get_time_by_id": {
            "name": "get_time_by_id",
            "location": 387,
            "return": [
                "TimeNode",
                "str",
                "int",
                "bool",
                "Dict[str,Any]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "memid": [
                    "int",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "AgentMemory.task_stack_push": {
            "name": "task_stack_push",
            "location": 407,
            "return": [
                "TaskNode"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "str",
                    "int",
                    "Dict",
                    "bool"
                ],
                "parent_memid": [
                    "str",
                    "bool",
                    "None",
                    "List[int]"
                ],
                "chat_effect": [
                    "bool",
                    "str",
                    "Type",
                    "List[str]"
                ]
            }
        },
        "AgentMemory.task_stack_update_task": {
            "name": "task_stack_update_task",
            "location": 424,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "memid": [
                    "Mapping",
                    "Mapping[str,Any]",
                    "util.freefocus.sql.Task"
                ],
                "task": [
                    "Mapping",
                    "Mapping[str,Any]",
                    "util.freefocus.sql.Task"
                ]
            }
        },
        "AgentMemory.task_stack_peek": {
            "name": "task_stack_peek",
            "location": 427,
            "return": [
                "TaskNode",
                "str",
                "None",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentMemory.task_stack_pop": {
            "name": "task_stack_pop",
            "location": 442,
            "return": [
                "str",
                "int",
                "Tuple[Union[int,int]]",
                "Generator",
                "List",
                "bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentMemory.task_stack_pause": {
            "name": "task_stack_pause",
            "location": 450,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentMemory.task_stack_clear": {
            "name": "task_stack_clear",
            "location": 454,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentMemory.task_stack_resume": {
            "name": "task_stack_resume",
            "location": 457,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentMemory.task_stack_find_lowest_instance": {
            "name": "task_stack_find_lowest_instance",
            "location": 461,
            "return": [
                "TaskNode",
                "Dict",
                "None",
                "Optional[str]",
                "bool",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "cls_names": [
                    "AbstractSet[str]",
                    "Set[str]",
                    "AbstractSet",
                    "int",
                    "MutableSet[str]",
                    "Dict[str,Any]",
                    "MutableSet",
                    "FrozenSet[str]",
                    "frozenset"
                ]
            }
        },
        "AgentMemory.task_stack_get_all": {
            "name": "task_stack_get_all",
            "location": 478,
            "return": [
                "List[TaskNode]",
                "List[str]",
                "Set[str]",
                "Dict[str,Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentMemory.get_last_finished_root_task": {
            "name": "get_last_finished_root_task",
            "location": 489,
            "return": [
                "TaskNode",
                "Iterable[T]",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": [],
                "action_name": [
                    "str",
                    "None"
                ],
                "recency": [
                    "None",
                    "str",
                    "Optional[str]",
                    "List",
                    "Optional[List]"
                ]
            }
        },
        "AgentMemory.get_task_by_id": {
            "name": "get_task_by_id",
            "location": 515,
            "return": [
                "TaskNode",
                "Dict",
                "str",
                "Dict[str,Any]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "memid": [
                    "str",
                    "bool",
                    "Callable",
                    "Dict"
                ]
            }
        },
        "AgentMemory.hurry_up": {
            "name": "hurry_up",
            "location": 522,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentMemory.slow_down": {
            "name": "slow_down",
            "location": 529,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentMemory._db_read": {
            "name": "_db_read",
            "location": 540,
            "return": [
                "Set[str]",
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "Dict",
                    "Exception",
                    "str",
                    "Type"
                ]
            }
        },
        "AgentMemory._db_read_one": {
            "name": "_db_read_one",
            "location": 555,
            "return": [
                "Set[str]",
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "Dict",
                    "Exception",
                    "str",
                    "Type"
                ]
            }
        },
        "AgentMemory._db_write": {
            "name": "_db_write",
            "location": 570,
            "return": [
                "dict",
                "Iterable[str]",
                "List[str]",
                "Dict[str, Any]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "Dict",
                    "str",
                    "Type",
                    "Tuple[type]",
                    "Tuple[Type]"
                ]
            }
        },
        "AgentMemory._db_script": {
            "name": "_db_script",
            "location": 587,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "script": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "AgentMemory.get_db_log_idx": {
            "name": "get_db_log_idx",
            "location": 598,
            "return": [
                "Dict[str, str]",
                "Callable",
                "str",
                "Dict[int, Set[str]]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentMemory._write_to_db_log": {
            "name": "_write_to_db_log",
            "location": 601,
            "return": [
                "None",
                "str",
                "Iterator[Any]",
                "Iterable[Mapping[str,Any]]",
                "Optional[bool]",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "Dict"
                ]
            }
        },
        "AgentMemory.dump": {
            "name": "dump",
            "location": 629,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sql_file": [
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[str]"
                ],
                "dict_memory_file": [
                    "List[str]",
                    "None",
                    "int",
                    "TextIO",
                    "bool"
                ]
            }
        },
        "AgentMemory.safe_pickle": {
            "name": "safe_pickle",
            "location": 639,
            "return": [
                "float",
                "numpy.ndarray",
                "str",
                "T",
                "int"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "AgentMemory.safe_unpickle": {
            "name": "safe_unpickle",
            "location": 659,
            "return": [
                "float",
                "numpy.ndarray",
                "str",
                "T",
                "int"
            ],
            "arguments": {
                "self": [],
                "bs": [
                    "str",
                    "Dict",
                    "Optional[Union[str,bytes]]",
                    "bytes",
                    "List[List[str]]",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "List[list[str]]",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/stop_condition.py": {
        "StopCondition.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "StopCondition.check": {
            "name": "check",
            "location": 10,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NeverStopCondition.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "bool",
                    "Dict[str,Any]",
                    "Callable[[Any,Any],bool]",
                    "Callable[Any,Any,bool]"
                ]
            }
        },
        "NeverStopCondition.check": {
            "name": "check",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/base_agent/string_lists.py": {},
    "craftassist-master/python/base_agent/task.py": {
        "Task.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.step": {
            "name": "step",
            "location": 19,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Task.add_child_task": {
            "name": "add_child_task",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "int",
                    "List"
                ],
                "agent": [
                    "int",
                    "Callable[[str],str]",
                    "Callable[str,str]"
                ],
                "pass_stop_condition": [
                    "bool",
                    "float",
                    "str"
                ]
            }
        },
        "Task.interrupt": {
            "name": "interrupt",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.check_finished": {
            "name": "check_finished",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.hurry_up": {
            "name": "hurry_up",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.slow_down": {
            "name": "slow_down",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.__repr__": {
            "name": "__repr__",
            "location": 49,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/base_agent/__init__.py": {},
    "craftassist-master/python/base_agent/dialogue_objects/attribute_helper.py": {
        "interpret_span_value": {
            "name": "interpret_span_value",
            "location": 12,
            "return": [
                "FixedValue",
                "str",
                "int",
                "bool",
                "float",
                "Iterable[str]",
                "Dict[str,Dict[str,int]]"
            ],
            "arguments": {
                "interpreter": [],
                "speaker": [
                    "int",
                    "float",
                    "Sequence",
                    "bool"
                ],
                "d": [
                    "bool",
                    "Optional[List[str]]",
                    "List[str]",
                    "int",
                    "None"
                ],
                "comparison_measure": [
                    "int",
                    "float",
                    "None"
                ]
            }
        },
        "maybe_specific_mem": {
            "name": "maybe_specific_mem",
            "location": 24,
            "return": [
                "Tuple[None]",
                "Tuple[Union[None,ReferenceObjectNode,list[dict[Text,Union[Text,int]]]]]",
                "List",
                "Optional[str]",
                "bool",
                "Optional[BaseException]",
                "Dict"
            ],
            "arguments": {
                "interpreter": [
                    "Dict[str,Any]",
                    "bool",
                    "Optional[float]",
                    "float",
                    "int",
                    "None",
                    "Optional[Collection[int]]",
                    "Collection"
                ],
                "speaker": [
                    "Dict[str,Any]",
                    "bool",
                    "Optional[float]",
                    "float",
                    "int",
                    "None",
                    "Optional[Collection[int]]",
                    "Collection"
                ],
                "ref_obj_d": [
                    "Dict",
                    "bool",
                    "Callable",
                    "Optional[Union[int,str]]",
                    "Tuple[str,str]",
                    "str"
                ]
            }
        },
        "interpret_linear_extent": {
            "name": "interpret_linear_extent",
            "location": 54,
            "return": [
                "LinearExtentAttribute",
                "str",
                "LinearExtentValue",
                "Dict[str,Any]",
                "Dict"
            ],
            "arguments": {
                "interpreter": [
                    "str",
                    "bool",
                    "Dict[str,str]",
                    "int"
                ],
                "speaker": [
                    "int",
                    "Union[str, float]",
                    "tuple"
                ],
                "d": [
                    "Dict",
                    "bool",
                    "str",
                    "List"
                ],
                "force_value": [
                    "bool",
                    "str",
                    "int",
                    "Exception"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/dialogue_objects/condition_helper.py": {
        "ConditionInterpreter.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionInterpreter.__call__": {
            "name": "__call__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "interpreter": [
                    "float"
                ],
                "speaker": [
                    "float"
                ],
                "d": [
                    "bool",
                    "str"
                ]
            }
        },
        "ConditionInterpreter.interpret_never": {
            "name": "interpret_never",
            "location": 52,
            "return": [
                "NeverCondition",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "interpreter": [
                    "int",
                    "Dict[int,Tuple[int,int]]",
                    "Dict[int,tuple[Union[int,int]]]"
                ],
                "speaker": [
                    "bool",
                    "float",
                    "List[int]",
                    "int"
                ],
                "d": [
                    "bool",
                    "float",
                    "List[int]",
                    "int"
                ]
            }
        },
        "ConditionInterpreter.interpret_or": {
            "name": "interpret_or",
            "location": 55,
            "return": [
                "OrCondition",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "interpreter": [
                    "bool",
                    "str",
                    "bytes",
                    "int"
                ],
                "speaker": [
                    "bool",
                    "str",
                    "float",
                    "int"
                ],
                "d": [
                    "List[int]",
                    "str",
                    "Collection[int]",
                    "Sequence[T]",
                    "float",
                    "int"
                ]
            }
        },
        "ConditionInterpreter.interpret_and": {
            "name": "interpret_and",
            "location": 64,
            "return": [
                "AndCondition",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "interpreter": [
                    "bool",
                    "str",
                    "bytes",
                    "int"
                ],
                "speaker": [
                    "bool",
                    "str",
                    "float",
                    "int"
                ],
                "d": [
                    "List[int]",
                    "str",
                    "Collection[int]",
                    "Sequence[T]",
                    "float",
                    "int"
                ]
            }
        },
        "ConditionInterpreter.interpret_time": {
            "name": "interpret_time",
            "location": 73,
            "return": [
                "TimeCondition",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "interpreter": [
                    "bool",
                    "float"
                ],
                "speaker": [
                    "int",
                    "Optional[Iterable[int]]",
                    "Iterable[int]",
                    "Collection[int]",
                    "None",
                    "Collection"
                ],
                "d": [
                    "str",
                    "dict",
                    "bool"
                ]
            }
        },
        "ConditionInterpreter.interpret_comparator": {
            "name": "interpret_comparator",
            "location": 92,
            "return": [
                "None",
                "Optional[int]",
                "Comparator",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "interpreter": [
                    "str",
                    "int",
                    "bool"
                ],
                "speaker": [
                    "str",
                    "Callable",
                    "int",
                    "List[int]"
                ],
                "d": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "OrderedDict[str, Any]",
                    "dict"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/dialogue_objects/dialogue_object.py": {
        "DialogueObject.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "int",
                    "float",
                    "bool"
                ],
                "memory": [
                    "int",
                    "float",
                    "bool"
                ],
                "dialogue_stack": [
                    "int",
                    "float",
                    "bool"
                ],
                "featurizer": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ],
                "max_steps": [
                    "int",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "DialogueObject.step": {
            "name": "step",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DialogueObject.update_progeny_data": {
            "name": "update_progeny_data",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "List",
                    "int",
                    "str",
                    "Dict[str,Any]",
                    "float"
                ]
            }
        },
        "DialogueObject.check_finished": {
            "name": "check_finished",
            "location": 34,
            "return": [
                "int",
                "Callable",
                "str",
                "float",
                "List",
                "List[Callable[,bool]]",
                "Tuple[Union[Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal]]",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "DialogueObject.featurize": {
            "name": "featurize",
            "location": 42,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DialogueObject.__repr__": {
            "name": "__repr__",
            "location": 48,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AwaitResponse.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wait_time": [
                    "int",
                    "float"
                ]
            }
        },
        "AwaitResponse.step": {
            "name": "step",
            "location": 64,
            "return": [
                "Tuple[Union[Text,dict[Text,Union[int,float,str]]]]",
                "List[str]",
                "Tuple[Union[Text,dict[Text,None]]]",
                "Tuple[Optional[Text]]",
                "int",
                "Dict[str,Any]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Say.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response_options": [
                    "dict",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "Say.step": {
            "name": "step",
            "location": 92,
            "return": [
                "Tuple[None]",
                "numpy.ndarray",
                "numpy.array"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotCapabilities.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotGreet.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "greeting_type": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "BotStackStatus.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotStackStatus.step": {
            "name": "step",
            "location": 149,
            "return": [
                "Tuple[None]",
                "Optional[str]",
                "str",
                "Dict",
                "logging.LogRecord"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetReward.step": {
            "name": "step",
            "location": 171,
            "return": [
                "Tuple[Optional[Text]]",
                "bool",
                "Optional[str]",
                "Optional[Sequence[str]]",
                "Optional[Callable]",
                "str",
                "Callable[...,None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotLocationStatus.step": {
            "name": "step",
            "location": 212,
            "return": [
                "Tuple[None]",
                "Optional[str]",
                "str",
                "Dict",
                "logging.LogRecord"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotMoveStatus.step": {
            "name": "step",
            "location": 231,
            "return": [
                "Tuple[None]",
                "Optional[str]",
                "str",
                "Dict",
                "logging.LogRecord"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfirmTask.__init__": {
            "name": "__init__",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "question": [
                    "Dict[str,Any]",
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "tasks": [
                    "str",
                    "int",
                    "Sequence[Dict[str,str]]",
                    "Sequence[dict[str,str]]",
                    "Dict[str,Any]",
                    "Optional[int]",
                    "None",
                    "Callable[[Dict],None]",
                    "Callable[dict,None]"
                ]
            }
        },
        "ConfirmTask.step": {
            "name": "step",
            "location": 262,
            "return": [
                "Tuple[Optional[Text]]",
                "Optional[str]",
                "Tuple[None]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfirmReferenceObject.__init__": {
            "name": "__init__",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reference_object": [
                    "int",
                    "str"
                ]
            }
        },
        "ConfirmReferenceObject.step": {
            "name": "step",
            "location": 301,
            "return": [
                "Tuple[Optional[Text]]",
                "Optional[str]",
                "Tuple[Union[Text,dict[Text,Text],None]]",
                "str",
                "Optional[List[Any]]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/base_agent/dialogue_objects/dialogue_object_utils.py": {
        "strip_prefix": {
            "name": "strip_prefix",
            "location": 8,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "pre": [
                    "str"
                ]
            }
        },
        "tags_from_dict": {
            "name": "tags_from_dict",
            "location": 15,
            "return": [
                "List",
                "str",
                "Optional[Sequence[str]]",
                "Dict",
                "List[str]"
            ],
            "arguments": {
                "d": [
                    "Iterable[str]",
                    "Pattern",
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "is_loc_speakerlook": {
            "name": "is_loc_speakerlook",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "d": [
                    "str",
                    "Match"
                ]
            }
        },
        "process_spans": {
            "name": "process_spans",
            "location": 32,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "d": [
                    "T",
                    "int",
                    "Callable",
                    "bool",
                    "Dict[str, Any]",
                    "dict"
                ],
                "original_words": [
                    "float",
                    "int",
                    "Callable[...,None]"
                ],
                "lemmatized_words": [
                    "Callable",
                    "List[int]"
                ]
            }
        },
        "coref_resolve": {
            "name": "coref_resolve",
            "location": 63,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "memory": [
                    "int",
                    "bool",
                    "dict"
                ],
                "d": [
                    "Dict",
                    "int"
                ],
                "chat": [
                    "float",
                    "Iterable[Any]"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/dialogue_objects/reference_object_helpers.py": {
        "ReferenceObjectInterpreter.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "interpret_reference_object": [
                    "bool",
                    "str",
                    "Tuple[Union[float,float,float]]",
                    "Tuple[float,float,float]",
                    "List",
                    "int",
                    "List[float]",
                    "Tuple[float,float,float,float]",
                    "None",
                    "Optional[List[float]]"
                ]
            }
        },
        "ReferenceObjectInterpreter.__call__": {
            "name": "__call__",
            "location": 12,
            "return": [
                "Tuple[float, float]",
                "bool",
                "Tuple[float, float, float]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/base_agent/dialogue_objects/__init__.py": {},
    "craftassist-master/python/base_agent/ttad/back_translation/dataset.py": {
        "load_paired_dataset": {
            "name": "load_paired_dataset",
            "location": 30,
            "return": [
                "Tuple[Union[tuple[Union[list[str],list[str]]],str,bytes,dict,dict[str,dict[str,Any]],dict[str,Union[int,str]]]]",
                "bytes",
                "int",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "data_dir": [
                    "str"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "collate": {
            "name": "collate",
            "location": 40,
            "return": [
                "Tuple[list[list[int]]]",
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "tree": [
                    "Set[str]"
                ],
                "text": [
                    "Tuple[Union[int,int]]",
                    "str",
                    "Tuple[int,int]"
                ],
                "tree_tokenizer": [],
                "text_tokenizer": [
                    "Optional[Sequence[Any]]",
                    "Pattern",
                    "Sequence[Any]",
                    "Dict",
                    "None"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Tree2TextDataset.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prog": [
                    "str",
                    "int",
                    "List[str]",
                    "Tuple[int]",
                    "Optional[str]",
                    "None"
                ],
                "chat": [
                    "str",
                    "int",
                    "List[str]",
                    "Tuple[int]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Tree2TextDataset.__len__": {
            "name": "__len__",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tree2TextDataset.__getitem__": {
            "name": "__getitem__",
            "location": 22,
            "return": [
                "str",
                "Tuple"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/back_translation/generate.py": {
        "build_inputs_with_special_tokens": {
            "name": "build_inputs_with_special_tokens",
            "location": 12,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "token_ids_0": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "token_ids_1": [
                    "str",
                    "int",
                    "dict",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "QueryModel.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "model": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ],
                "encoder_tokenizer": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ],
                "decoder_tokenizer": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ]
            }
        },
        "QueryModel.top_k_sampling": {
            "name": "top_k_sampling",
            "location": 23,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "y": [
                    "float",
                    "int",
                    "bool"
                ],
                "y_mask": [
                    "int",
                    "bool",
                    "Tuple[int, int]"
                ],
                "x_reps": [
                    "float",
                    "int",
                    "bool"
                ],
                "x_mask": [
                    "float",
                    "int",
                    "bool"
                ],
                "ntok": [
                    "int",
                    "Optional[Collection[int]]"
                ]
            }
        },
        "QueryModel.generate": {
            "name": "generate",
            "location": 43,
            "return": [
                "str",
                "bytes",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "tree_input": [
                    "str",
                    "list",
                    "Optional[str]",
                    "bool",
                    "bytes",
                    "List[T]",
                    "Set[str]",
                    "List[str]"
                ],
                "top_k": [
                    "str",
                    "Sequence[str]",
                    "Optional[int]"
                ],
                "beam_size": [
                    "List[int]",
                    "Callable[[str, str], float]",
                    "bytes",
                    "numpy.ndarray",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/back_translation/huggingface_modeling_gpt2.py": {
        "load_tf_weights_in_gpt2": {
            "name": "load_tf_weights_in_gpt2",
            "location": 63,
            "return": [
                "str",
                "Sequence[str]",
                "Dict",
                "int",
                "None"
            ],
            "arguments": {
                "model": [
                    "Sequence[str]",
                    "Dict",
                    "int",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "config": [
                    "str",
                    "List",
                    "Optional[bool]",
                    "bool",
                    "Callable",
                    "Tuple[str]",
                    "None",
                    "List[Union[str,int]]",
                    "Optional[str]"
                ],
                "gpt2_checkpoint_path": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "Attention.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nx": [
                    "int",
                    "torch.Tensor"
                ],
                "n_ctx": [
                    "int",
                    "str",
                    "Mapping",
                    "bool",
                    "Mapping[str,Any]"
                ],
                "config": [
                    "bool",
                    "Dict[str,Any]",
                    "str",
                    "int"
                ],
                "scale": [
                    "bool",
                    "int",
                    "slice"
                ],
                "is_cross_attention": [
                    "bool",
                    "int",
                    "slice"
                ]
            }
        },
        "Attention.prune_heads": {
            "name": "prune_heads",
            "location": 146,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "heads": [
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "Attention._attn": {
            "name": "_attn",
            "location": 163,
            "return": [
                "List[Union[float,str,int]]",
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "q": [],
                "k": [],
                "v": [
                    "float",
                    "List[float]",
                    "int",
                    "Tuple[float, float, float]"
                ],
                "attention_mask": [
                    "bool",
                    "None",
                    "float",
                    "str",
                    "List[int]",
                    "Union[int,float]",
                    "List"
                ],
                "head_mask": [
                    "Optional[float]",
                    "None",
                    "Callable",
                    "float",
                    "Optional[int]",
                    "int"
                ],
                "output_attentions": [
                    "bool",
                    "Dict",
                    "str",
                    "int"
                ],
                "decoder_input_length": [
                    "None",
                    "int",
                    "Optional[Dict]",
                    "List"
                ]
            }
        },
        "Attention.merge_heads": {
            "name": "merge_heads",
            "location": 209,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "tensorflow.Tensor"
                ]
            }
        },
        "Attention.split_heads": {
            "name": "split_heads",
            "location": 214,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "bool",
                    "Match",
                    "Hashable"
                ],
                "k": [
                    "bool",
                    "Union[Type[Exception],Tuple[Any,...]]",
                    "List[Tuple[str,scraping.utils.OptionType,scraping.utils.ArgumentType]]",
                    "int"
                ]
            }
        },
        "Attention.forward": {
            "name": "forward",
            "location": 222,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "hidden_states": [
                    "Iterable[Callable]",
                    "prefecengine.state.State"
                ],
                "layer_past": [
                    "str",
                    "Dict[int,str]",
                    "None",
                    "Optional[str]",
                    "Union[str,Callable[,str]]"
                ],
                "attention_mask": [
                    "torch.Tensor",
                    "Dict[str,torch.Tensor]",
                    "None",
                    "int"
                ],
                "head_mask": [
                    "Dict[str,torch.Tensor]",
                    "None",
                    "Callable",
                    "torch.Tensor",
                    "Optional[torch.Tensor]"
                ],
                "encoder_hidden_states": [
                    "None",
                    "Optional[Outcome]",
                    "str",
                    "Dict",
                    "Optional[torch.Tensor]",
                    "Callable[,str]",
                    "Optional[torch.BoolTensor]",
                    "Union[str,Callable[,str]]",
                    "torch.IntTensor"
                ],
                "encoder_attention_mask": [
                    "int",
                    "None"
                ],
                "use_cache": [
                    "bool",
                    "List[torch.Tensor]",
                    "float"
                ],
                "output_attentions": [
                    "bool",
                    "Dict[str,torch.Tensor]",
                    "Callable",
                    "torch.Tensor",
                    "Optional[torch.Tensor]"
                ],
                "decoder_input_length": [
                    "Dict[str,torch.Tensor]",
                    "None",
                    "Callable",
                    "torch.Tensor",
                    "Optional[torch.Tensor]"
                ]
            }
        },
        "MLP.__init__": {
            "name": "__init__",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_state": [
                    "int"
                ],
                "config": [
                    "int",
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "MLP.forward": {
            "name": "forward",
            "location": 283,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float"
                ]
            }
        },
        "Block.__init__": {
            "name": "__init__",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_ctx": [
                    "int",
                    "str",
                    "bytes"
                ],
                "config": [
                    "Dict",
                    "str"
                ],
                "scale": [
                    "bool",
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "Block.forward": {
            "name": "forward",
            "location": 304,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "hidden_states": [],
                "layer_past": [
                    "None"
                ],
                "attention_mask": [
                    "None"
                ],
                "head_mask": [
                    "None"
                ],
                "encoder_hidden_states": [
                    "None",
                    "torch.IntTensor",
                    "Tuple[Union[torch.Tensor,torch.Tensor]]",
                    "int",
                    "Optional[Tuple[torch.Tensor,torch.Tensor]]",
                    "Optional[torch.Tensor]",
                    "Optional[int]",
                    "torch.Tensor"
                ],
                "encoder_attention_mask": [
                    "None"
                ],
                "use_cache": [
                    "bool"
                ],
                "output_attentions": [
                    "bool"
                ],
                "decoder_input_length": [
                    "None"
                ]
            }
        },
        "GPT2PreTrainedModel.__init__": {
            "name": "__init__",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GPT2PreTrainedModel._init_weights": {
            "name": "_init_weights",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "Type",
                    "Iterable[Any]",
                    "Type[T]",
                    "str",
                    "Dict[str,List[str]]",
                    "None",
                    "int",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "GPT2Model.__init__": {
            "name": "__init__",
            "location": 499,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict"
                ]
            }
        },
        "GPT2Model.get_input_embeddings": {
            "name": "get_input_embeddings",
            "location": 512,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GPT2Model.set_input_embeddings": {
            "name": "set_input_embeddings",
            "location": 515,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_embeddings": [
                    "float",
                    "bool",
                    "Dict[str,Any]"
                ]
            }
        },
        "GPT2Model._prune_heads": {
            "name": "_prune_heads",
            "location": 518,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "heads_to_prune": [
                    "Dict[str,Any]",
                    "Dict",
                    "Dict[str,str]",
                    "utils.diskstaDisk"
                ]
            }
        },
        "GPT2Model.forward": {
            "name": "forward",
            "location": 532,
            "return": [
                "str",
                "Optional[dict]",
                "int",
                "Counter",
                "Sequence[int]",
                "Tuple[int]"
            ],
            "arguments": {
                "self": [],
                "input_ids": [
                    "Optional[str]",
                    "None",
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "past_key_values": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Optional[Any]",
                    "Any",
                    "int",
                    "Optional[int]",
                    "Optional[bool]",
                    "bool"
                ],
                "attention_mask": [
                    "Optional[int]",
                    "None",
                    "bytes",
                    "os.stat_result",
                    "int",
                    "Optional[float]",
                    "float",
                    "Optional[str]",
                    "str"
                ],
                "token_type_ids": [
                    "None",
                    "raiden.utils.BlockIdentifier",
                    "str",
                    "int",
                    "Optional[int]",
                    "List[Any]",
                    "Optional[str]",
                    "bool",
                    "Optional[List[Any]]"
                ],
                "position_ids": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "int",
                    "Optional[allennlp.nn.RegularizerApplicator]"
                ],
                "head_mask": [
                    "bool",
                    "None",
                    "Dict[str,Any]",
                    "List[str]",
                    "Optional[Dict[str,Any]]",
                    "int"
                ],
                "inputs_embeds": [
                    "int",
                    "None",
                    "Optional[int]"
                ],
                "encoder_hidden_states": [
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[Mapping[str, str]]"
                ],
                "encoder_attention_mask": [
                    "str",
                    "None",
                    "int",
                    "Optional[int]",
                    "bool",
                    "Optional[str]"
                ],
                "use_cache": [
                    "str",
                    "None",
                    "int",
                    "Optional[Callable[...,Any]]",
                    "Callable[...,Any]",
                    "bool",
                    "List[str]",
                    "Optional[List[str]]",
                    "Optional[str]"
                ],
                "output_attentions": [
                    "Optional[str]",
                    "str",
                    "None",
                    "int",
                    "Dict[str,Any]",
                    "Optional[List[int]]",
                    "List[int]",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "output_hidden_states": [
                    "bool",
                    "None",
                    "str",
                    "Mapping",
                    "int",
                    "List[str]",
                    "Mapping[Any,str]"
                ],
                "return_dict": [
                    "Dict",
                    "None",
                    "bool",
                    "Dict[int,List[str]]",
                    "Dict[str,str]",
                    "str",
                    "Dict[int,list[str]]",
                    "Optional[dict]",
                    "Optional[str]"
                ],
                "use_lm": [
                    "bool",
                    "List[str]",
                    "str",
                    "Optional[List[str]]",
                    "List[Tuple[int,int]]",
                    "int"
                ]
            }
        },
        "GPT2LMHeadModel.__init__": {
            "name": "__init__",
            "location": 718,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "GPT2LMHeadModel.get_output_embeddings": {
            "name": "get_output_embeddings",
            "location": 725,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GPT2LMHeadModel.prepare_inputs_for_generation": {
            "name": "prepare_inputs_for_generation",
            "location": 728,
            "return": [
                "bool",
                "Dict[Text,Union[str,int,Iterator,list,KeysView,None,dict,bytes,list[int]]]"
            ],
            "arguments": {
                "self": [],
                "input_ids": [
                    "str",
                    "int",
                    "Union[KspNativeControl,int]"
                ],
                "past": [
                    "int",
                    "None",
                    "Dict",
                    "bytes",
                    "List[int]"
                ]
            }
        },
        "GPT2LMHeadModel.forward": {
            "name": "forward",
            "location": 746,
            "return": [
                "CausalLMOutputWithPast",
                "str",
                "raiden.utils.Any"
            ],
            "arguments": {
                "self": [],
                "input_ids": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Mapping[Any,str]",
                    "Mapping",
                    "bool"
                ],
                "past_key_values": [
                    "str",
                    "None",
                    "Dict[str,str]",
                    "int",
                    "Tuple",
                    "Optional[str]"
                ],
                "attention_mask": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Mapping[Any,str]",
                    "Mapping",
                    "bool"
                ],
                "token_type_ids": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Mapping[Any,str]",
                    "Mapping",
                    "bool"
                ],
                "position_ids": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Mapping[Any,str]",
                    "Mapping",
                    "bool"
                ],
                "head_mask": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Mapping[Any,str]",
                    "Mapping",
                    "bool"
                ],
                "inputs_embeds": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Mapping[Any,str]",
                    "Mapping",
                    "bool"
                ],
                "encoder_hidden_states": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Mapping[Any,str]",
                    "Mapping",
                    "bool"
                ],
                "encoder_attention_mask": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Mapping[Any,str]",
                    "Mapping",
                    "bool"
                ],
                "labels": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[float]",
                    "Optional[int]",
                    "bool"
                ],
                "use_cache": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Mapping[Any,str]",
                    "Mapping",
                    "bool"
                ],
                "output_attentions": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Mapping[Any,str]",
                    "Mapping",
                    "bool"
                ],
                "output_hidden_states": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Mapping[Any,str]",
                    "Mapping",
                    "bool"
                ],
                "return_dict": [
                    "str",
                    "None",
                    "Dict",
                    "Optional[int]",
                    "int",
                    "Optional[str]"
                ],
                "use_lm": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "Mapping[Any,str]",
                    "str"
                ]
            }
        },
        "GPT2DoubleHeadsModel.__init__": {
            "name": "__init__",
            "location": 833,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "GPT2DoubleHeadsModel.get_output_embeddings": {
            "name": "get_output_embeddings",
            "location": 842,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GPT2DoubleHeadsModel.prepare_inputs_for_generation": {
            "name": "prepare_inputs_for_generation",
            "location": 845,
            "return": [
                "bool",
                "Dict[Text,Union[str,int,Iterator,list,KeysView,None,dict,bytes,list[int]]]"
            ],
            "arguments": {
                "self": [],
                "input_ids": [
                    "str",
                    "int",
                    "Union[KspNativeControl,int]"
                ],
                "past": [
                    "int",
                    "None",
                    "Dict",
                    "bytes",
                    "List[int]"
                ]
            }
        },
        "GPT2DoubleHeadsModel.forward": {
            "name": "forward",
            "location": 860,
            "return": [
                "str",
                "GPT2DoubleHeadsModelOutput"
            ],
            "arguments": {
                "self": [],
                "input_ids": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Mapping[Any,str]",
                    "Mapping",
                    "bool"
                ],
                "past_key_values": [
                    "str",
                    "None",
                    "Dict[str,str]",
                    "int",
                    "Tuple",
                    "Optional[str]"
                ],
                "attention_mask": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Mapping[Any,str]",
                    "Mapping",
                    "bool"
                ],
                "token_type_ids": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Mapping[Any,str]",
                    "Mapping",
                    "bool"
                ],
                "position_ids": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Mapping[Any,str]",
                    "Mapping",
                    "bool"
                ],
                "head_mask": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Mapping[Any,str]",
                    "Mapping",
                    "bool"
                ],
                "inputs_embeds": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Mapping[Any,str]",
                    "Mapping",
                    "bool"
                ],
                "mc_token_ids": [
                    "int",
                    "str",
                    "None"
                ],
                "labels": [
                    "str",
                    "None",
                    "bool",
                    "List[AnyStr]",
                    "int",
                    "List[list[Callable]]",
                    "Optional[int]",
                    "List[List[Callable]]"
                ],
                "mc_labels": [
                    "None",
                    "Optional[str]",
                    "Optional[Callable[[str],bool]]",
                    "Optional[Union[Any,Any]]"
                ],
                "use_cache": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Mapping[Any,str]",
                    "Mapping",
                    "bool"
                ],
                "output_attentions": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Mapping[Any,str]",
                    "Mapping",
                    "bool"
                ],
                "output_hidden_states": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Mapping[Any,str]",
                    "Mapping",
                    "bool"
                ],
                "return_dict": [
                    "str",
                    "None",
                    "Dict",
                    "Optional[int]",
                    "int",
                    "Optional[str]"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/back_translation/modeling_gpt2.py": {
        "load_tf_weights_in_gpt2": {
            "name": "load_tf_weights_in_gpt2",
            "location": 54,
            "return": [
                "str",
                "Sequence[str]",
                "Dict",
                "int",
                "None"
            ],
            "arguments": {
                "model": [
                    "Sequence[str]",
                    "Dict",
                    "int",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "config": [
                    "str",
                    "List",
                    "Optional[bool]",
                    "bool",
                    "Callable",
                    "Tuple[str]",
                    "None",
                    "List[Union[str,int]]",
                    "Optional[str]"
                ],
                "gpt2_checkpoint_path": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "Attention.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nx": [
                    "int",
                    "List[float]",
                    "torch.Tensor",
                    "List[int]",
                    "tensorflow.Tensor"
                ],
                "n_ctx": [
                    "int",
                    "Dict[str,torch.LongTensor]",
                    "float",
                    "bool",
                    "torch.Tensor"
                ],
                "config": [
                    "bool",
                    "Dict",
                    "int"
                ],
                "scale": [
                    "bool",
                    "int",
                    "slice"
                ]
            }
        },
        "Attention.prune_heads": {
            "name": "prune_heads",
            "location": 139,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "heads": [
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "Attention._attn": {
            "name": "_attn",
            "location": 156,
            "return": [
                "List[Union[float,str,int]]",
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "q": [],
                "k": [],
                "v": [
                    "float",
                    "List[float]",
                    "int",
                    "Tuple[float, float, float]"
                ],
                "attention_mask": [
                    "Optional[float]",
                    "float",
                    "Callable",
                    "None",
                    "Optional[int]",
                    "int"
                ],
                "head_mask": [
                    "Optional[float]",
                    "None",
                    "Callable",
                    "float",
                    "Optional[int]",
                    "int"
                ],
                "output_attentions": [
                    "bool",
                    "Dict",
                    "str",
                    "int"
                ]
            }
        },
        "Attention.merge_heads": {
            "name": "merge_heads",
            "location": 180,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "tensorflow.Tensor"
                ]
            }
        },
        "Attention.split_heads": {
            "name": "split_heads",
            "location": 185,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "bool",
                    "Match",
                    "Hashable"
                ],
                "k": [
                    "bool",
                    "Union[Type[Exception],Tuple[Any,...]]",
                    "int"
                ]
            }
        },
        "Attention.forward": {
            "name": "forward",
            "location": 193,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "bytes"
                ],
                "layer_past": [
                    "List[Optional[float]]",
                    "None",
                    "int",
                    "str",
                    "Optional[Union[Any,Any]]",
                    "Optional[float]",
                    "Optional[str]",
                    "bool",
                    "Optional[bool]"
                ],
                "attention_mask": [
                    "bool",
                    "None",
                    "Dict",
                    "T",
                    "torch.Tensor"
                ],
                "head_mask": [
                    "int",
                    "None",
                    "Match",
                    "T",
                    "bytes",
                    "Dict[str,float]",
                    "Tuple[Union[torch.Tensor,torch.Tensor]]",
                    "bool",
                    "Tuple[torch.Tensor,torch.Tensor]",
                    "RequestMonitoring"
                ],
                "use_cache": [
                    "bool",
                    "Dict[str,Any]"
                ],
                "output_attentions": [
                    "bool",
                    "int",
                    "T",
                    "Match",
                    "Tuple[torch.Tensor,torch.Tensor]",
                    "bytes",
                    "RequestMonitoring",
                    "Dict[str,float]"
                ],
                "encoder_hidden_states": [
                    "float",
                    "None",
                    "str",
                    "int",
                    "Optional[dict]",
                    "Dict"
                ],
                "encoder_attention_mask": [
                    "bool",
                    "None",
                    "Dict",
                    "T",
                    "torch.Tensor"
                ]
            }
        },
        "MLP.__init__": {
            "name": "__init__",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_state": [
                    "int"
                ],
                "config": [
                    "int",
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "MLP.forward": {
            "name": "forward",
            "location": 256,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float"
                ]
            }
        },
        "Block.__init__": {
            "name": "__init__",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_ctx": [
                    "Dict[str,Any]",
                    "logging.Logger"
                ],
                "config": [
                    "Dict[str,Any]",
                    "Dict",
                    "str"
                ],
                "scale": [
                    "bool",
                    "logging.Logger",
                    "Dict[str,Any]"
                ]
            }
        },
        "Block.forward": {
            "name": "forward",
            "location": 276,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "Counter",
                "range",
                "List",
                "Type",
                "Tuple[int]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float"
                ],
                "layer_past": [
                    "int",
                    "float",
                    "None"
                ],
                "attention_mask": [
                    "int",
                    "float",
                    "None"
                ],
                "head_mask": [
                    "int",
                    "float",
                    "None"
                ],
                "use_cache": [
                    "bool",
                    "int",
                    "float"
                ],
                "output_attentions": [
                    "bool",
                    "int",
                    "float"
                ],
                "encoder_hidden_states": [
                    "int",
                    "float",
                    "None"
                ],
                "encoder_attention_mask": [
                    "int",
                    "float",
                    "None"
                ]
            }
        },
        "GPT2PreTrainedModel.__init__": {
            "name": "__init__",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GPT2PreTrainedModel._init_weights": {
            "name": "_init_weights",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "Type",
                    "Iterable[Any]",
                    "Type[T]",
                    "str",
                    "Dict[str,List[str]]",
                    "None",
                    "int",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "GPT2Model.__init__": {
            "name": "__init__",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict"
                ]
            }
        },
        "GPT2Model.get_input_embeddings": {
            "name": "get_input_embeddings",
            "location": 346,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GPT2Model.set_input_embeddings": {
            "name": "set_input_embeddings",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_embeddings": [
                    "float",
                    "bool",
                    "Dict[str,Any]"
                ]
            }
        },
        "GPT2Model._prune_heads": {
            "name": "_prune_heads",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "heads_to_prune": [
                    "Dict[str,Any]",
                    "Dict",
                    "Dict[str,str]"
                ]
            }
        },
        "GPT2Model.forward": {
            "name": "forward",
            "location": 359,
            "return": [
                "str",
                "Optional[dict]",
                "int",
                "Counter",
                "Sequence[int]",
                "Tuple[int]"
            ],
            "arguments": {
                "self": [],
                "input_ids": [
                    "Optional[str]",
                    "None",
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "past_key_values": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Optional[Any]",
                    "Any",
                    "int",
                    "Optional[int]",
                    "Optional[bool]",
                    "bool"
                ],
                "attention_mask": [
                    "int",
                    "None",
                    "str",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]",
                    "Optional[float]",
                    "Optional[int]",
                    "float"
                ],
                "token_type_ids": [
                    "None",
                    "Optional[int]",
                    "str",
                    "int",
                    "Optional[str]",
                    "List[Any]",
                    "bool",
                    "Optional[List[Any]]"
                ],
                "position_ids": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "int",
                    "Optional[allennlp.nn.RegularizerApplicator]"
                ],
                "head_mask": [
                    "bool",
                    "None",
                    "Dict[str,Any]",
                    "List[str]",
                    "Optional[Dict[str,Any]]",
                    "int"
                ],
                "inputs_embeds": [
                    "int",
                    "None",
                    "Optional[int]"
                ],
                "use_cache": [
                    "str",
                    "None",
                    "int",
                    "Optional[Callable[...,Any]]",
                    "Callable[...,Any]",
                    "bool",
                    "List[str]",
                    "Optional[List[str]]",
                    "Optional[str]"
                ],
                "encoder_hidden_states": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "encoder_attention_mask": [
                    "Optional[int]",
                    "None",
                    "Optional[Any]",
                    "int",
                    "Optional[List[int]]",
                    "Any",
                    "Optional[str]",
                    "List[int]",
                    "bool",
                    "str",
                    "Optional[List]",
                    "List"
                ],
                "output_attentions": [
                    "Optional[str]",
                    "str",
                    "None",
                    "int",
                    "Dict[str,Any]",
                    "Optional[List[int]]",
                    "List[int]",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "output_hidden_states": [
                    "bool",
                    "None",
                    "str",
                    "Mapping",
                    "int",
                    "List[str]",
                    "Mapping[Any,str]"
                ],
                "return_dict": [
                    "Dict",
                    "None",
                    "bool",
                    "Dict[int,List[str]]",
                    "Dict[str,str]",
                    "str",
                    "Dict[int,list[str]]",
                    "Optional[dict]",
                    "Optional[str]"
                ]
            }
        },
        "GPT2LMHeadModel.__init__": {
            "name": "__init__",
            "location": 519,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "GPT2LMHeadModel.get_output_embeddings": {
            "name": "get_output_embeddings",
            "location": 526,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GPT2LMHeadModel.prepare_inputs_for_generation": {
            "name": "prepare_inputs_for_generation",
            "location": 529,
            "return": [
                "bool",
                "Dict[Text,Union[str,list[str],dict[str,str],int,list]]"
            ],
            "arguments": {
                "self": [],
                "input_ids": [
                    "str",
                    "int"
                ],
                "past": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "GPT2LMHeadModel.forward": {
            "name": "forward",
            "location": 536,
            "return": [
                "str",
                "CausalLMOutputWithPast"
            ],
            "arguments": {
                "self": [],
                "input_ids": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Mapping[Any,str]",
                    "Mapping",
                    "bool"
                ],
                "past_key_values": [
                    "str",
                    "None",
                    "Dict[str,str]",
                    "int",
                    "Tuple",
                    "Optional[str]"
                ],
                "attention_mask": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Mapping[Any,str]",
                    "Mapping",
                    "bool"
                ],
                "token_type_ids": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Mapping[Any,str]",
                    "Mapping",
                    "bool"
                ],
                "position_ids": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Mapping[Any,str]",
                    "Mapping",
                    "bool"
                ],
                "head_mask": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Mapping[Any,str]",
                    "Mapping",
                    "bool"
                ],
                "inputs_embeds": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Mapping[Any,str]",
                    "Mapping",
                    "bool"
                ],
                "labels": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[float]",
                    "Optional[int]",
                    "bool"
                ],
                "use_cache": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Mapping[Any,str]",
                    "Mapping",
                    "bool"
                ],
                "encoder_hidden_states": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Mapping[Any,str]",
                    "Mapping",
                    "bool"
                ],
                "encoder_attention_mask": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Mapping[Any,str]",
                    "Mapping",
                    "bool"
                ],
                "output_attentions": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Mapping[Any,str]",
                    "Mapping",
                    "bool"
                ],
                "output_hidden_states": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Mapping[Any,str]",
                    "Mapping",
                    "bool"
                ],
                "return_dict": [
                    "str",
                    "None",
                    "Dict",
                    "Optional[int]",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "GPT2DoubleHeadsModel.__init__": {
            "name": "__init__",
            "location": 613,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "GPT2DoubleHeadsModel.get_output_embeddings": {
            "name": "get_output_embeddings",
            "location": 622,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GPT2DoubleHeadsModel.forward": {
            "name": "forward",
            "location": 625,
            "return": [
                "str",
                "GPT2DoubleHeadsModelOutput"
            ],
            "arguments": {
                "self": [],
                "input_ids": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Mapping[Any,str]",
                    "Mapping",
                    "bool"
                ],
                "past_key_values": [
                    "str",
                    "None",
                    "Dict[str,str]",
                    "int",
                    "Tuple",
                    "Optional[str]"
                ],
                "attention_mask": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Mapping[Any,str]",
                    "Mapping",
                    "bool"
                ],
                "token_type_ids": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Mapping[Any,str]",
                    "Mapping",
                    "bool"
                ],
                "position_ids": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Mapping[Any,str]",
                    "Mapping",
                    "bool"
                ],
                "head_mask": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Mapping[Any,str]",
                    "Mapping",
                    "bool"
                ],
                "inputs_embeds": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Mapping[Any,str]",
                    "Mapping",
                    "bool"
                ],
                "mc_token_ids": [
                    "int",
                    "str",
                    "None"
                ],
                "labels": [
                    "str",
                    "None",
                    "bool",
                    "List[AnyStr]",
                    "int",
                    "List[list[Callable]]",
                    "Optional[int]",
                    "List[List[Callable]]"
                ],
                "mc_labels": [
                    "None",
                    "Optional[str]",
                    "Optional[Callable[[str],bool]]",
                    "Optional[Union[Any,Any]]"
                ],
                "use_cache": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Mapping[Any,str]",
                    "Mapping",
                    "bool"
                ],
                "output_attentions": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Mapping[Any,str]",
                    "Mapping",
                    "bool"
                ],
                "output_hidden_states": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Mapping[Any,str]",
                    "Mapping",
                    "bool"
                ],
                "return_dict": [
                    "str",
                    "None",
                    "Dict",
                    "Optional[int]",
                    "int",
                    "Optional[str]"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/back_translation/train.py": {
        "build_inputs_with_special_tokens": {
            "name": "build_inputs_with_special_tokens",
            "location": 21,
            "return": [
                "str",
                "torch.Tensor",
                "int",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "token_ids_0": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "token_ids_1": [
                    "str",
                    "int",
                    "dict",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "compute_accuracy": {
            "name": "compute_accuracy",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "outputs": [
                    "str",
                    "int"
                ],
                "y": [
                    "float",
                    "str",
                    "int"
                ],
                "tokenizer": [
                    "cmk.utils.type_defs.AgentRawData",
                    "bytes",
                    "Iterable[str]",
                    "torch.Tensor",
                    "List[str]"
                ]
            }
        },
        "validate": {
            "name": "validate",
            "location": 36,
            "return": [],
            "arguments": {
                "model": [
                    "\"Atom\"",
                    "List[Dict[str, Any]]",
                    "tracim.models.data.Content"
                ],
                "dataset": [
                    "int",
                    "float",
                    "list",
                    "torch.Tensor"
                ],
                "text_tokenizer": [
                    "tuple",
                    "str",
                    "bytes",
                    "autorecurse.lib.iterator.Iterator.Context[autorecurse.gnumake.data.Makefile]",
                    "Set[str]",
                    "os.DirEntry",
                    "Iterator[str]"
                ],
                "tree_tokenizer": [
                    "Tuple[int, int]",
                    "dict",
                    "torch.FloatTensor",
                    "autorecurse.lib.iterator.Iterator.Context[autorecurse.gnumake.data.Makefile]",
                    "IO"
                ],
                "args": []
            }
        },
        "generate_model_name": {
            "name": "generate_model_name",
            "location": 88,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 107,
            "return": [],
            "arguments": {}
        }
    },
    "craftassist-master/python/base_agent/ttad/back_translation/train_custom_gpt2.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "craftassist-master/python/base_agent/ttad/back_translation/train_utils.py": {
        "compute_accuracy": {
            "name": "compute_accuracy",
            "location": 7,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "outputs": [
                    "str",
                    "int"
                ],
                "y": [
                    "str",
                    "float",
                    "int"
                ],
                "tokenizer": [
                    "bytes",
                    "Iterable[str]",
                    "torch.Tensor",
                    "List[str]"
                ]
            }
        },
        "validate": {
            "name": "validate",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "float",
                    "str",
                    "Union[int,float]",
                    "int",
                    "List[int]",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ],
                "dataset": [
                    "int",
                    "Dict",
                    "torch.ByteTensor"
                ],
                "tokenizer": [
                    "str",
                    "int",
                    "Optional[List]",
                    "List",
                    "None"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/back_translation/transformer.py": {
        "TransformerEncoder.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str,Any]",
                    "Mapping[str,Any]",
                    "Mapping"
                ],
                "tokenizer": [
                    "Dict"
                ]
            }
        },
        "TransformerEncoder.forward": {
            "name": "forward",
            "location": 14,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "input_ids": [
                    "int",
                    "str"
                ],
                "attention_mask": [
                    "int",
                    "str"
                ]
            }
        },
        "EncoderDecoder.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "encoder": [
                    "int",
                    "float",
                    "bool"
                ],
                "decoder": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "EncoderDecoder.forward": {
            "name": "forward",
            "location": 29,
            "return": [
                "str",
                "List[int]",
                "bool",
                "frozenset"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int",
                    "List[str]",
                    "str"
                ],
                "x_mask": [
                    "bool",
                    "int"
                ],
                "y": [
                    "bool",
                    "str"
                ],
                "y_mask": [
                    "bool",
                    "str"
                ],
                "labels": [
                    "bool",
                    "str"
                ],
                "use_lm": [
                    "bool",
                    "str"
                ]
            }
        },
        "EncoderDecoder.step": {
            "name": "step",
            "location": 41,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "x_reps": [],
                "x_mask": [],
                "y": [],
                "y_mask": [],
                "use_lm": [
                    "bool"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/back_translation/__init__.py": {},
    "craftassist-master/python/base_agent/ttad/generation_dialogues/build_scene.py": {
        "inspect_ads": {
            "name": "inspect_ads",
            "location": 46,
            "return": [
                "str",
                "float",
                "numpy.ndarray",
                "int"
            ],
            "arguments": {
                "template_attributes": [
                    "str",
                    "bool"
                ],
                "condition": [
                    "int",
                    "str"
                ]
            }
        },
        "process_spans": {
            "name": "process_spans",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "d": [
                    "os.DirEntry",
                    "T",
                    "str",
                    "Type[T]",
                    "IO[bytes]",
                    "\"Pipeline\"",
                    "Dict[str, Any]",
                    "Callable"
                ],
                "words": [
                    "str",
                    "Dict[str,Any]",
                    "Set[str]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "surgery_by_value": {
            "name": "surgery_by_value",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "ad": [
                    "Dict[str, Set[str]]",
                    "bool",
                    "Optional[Dict[str, str]]",
                    "list",
                    "Optional[Dict[object, Any]]",
                    "Type",
                    "dict"
                ],
                "old_value": [
                    "Dict",
                    "str",
                    "bool",
                    "bytes",
                    "Optional[Dict[object,Any]]",
                    "Dict[object,Any]",
                    "None"
                ],
                "new_value": [
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "str",
                    "None",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,str]",
                    "Dict",
                    "List[str]",
                    "Dict[str,dict[str,Any]]",
                    "Dict[str,Dict[str,str]]",
                    "Dict[str,dict[str,str]]"
                ]
            }
        },
        "get_fields_by_key": {
            "name": "get_fields_by_key",
            "location": 89,
            "return": [
                "str",
                "List",
                "bool",
                "List[Union[str,tuple[str]]]"
            ],
            "arguments": {
                "ad_and_parent": [
                    "str",
                    "bool",
                    "int",
                    "Optional[Dict]"
                ],
                "key": [
                    "str",
                    "List[str]",
                    "List[Dict[str,Any]]",
                    "Dict[Any,list]",
                    "List[dict[str,Any]]",
                    "bytes",
                    "bool"
                ]
            }
        },
        "get_good_ad": {
            "name": "get_good_ad",
            "location": 109,
            "return": [
                "str",
                "Iterable[str]",
                "Exception"
            ],
            "arguments": {
                "template_attributes": [
                    "str",
                    "int"
                ],
                "flat": [
                    "str",
                    "bool"
                ]
            }
        },
        "fill_spans_and_coref_resolve": {
            "name": "fill_spans_and_coref_resolve",
            "location": 203,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "ad": [
                    "str"
                ],
                "text": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "regularize_ref_obj_dict": {
            "name": "regularize_ref_obj_dict",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "ref_obj_dict": [
                    "List[Optional[str]]"
                ],
                "flat": [
                    "bool",
                    "numpy.ndarray",
                    "Callable",
                    "Optional[List[str]]"
                ]
            }
        },
        "specify_object": {
            "name": "specify_object",
            "location": 222,
            "return": [
                "str",
                "Dict",
                "Dict[str,Any]",
                "Type",
                "Dict[str,str]",
                "int",
                "List[str]",
                "Dict[str,Union[int,str]]",
                "None",
                "List"
            ],
            "arguments": {
                "ref_obj_dict": [
                    "Dict[str,float]",
                    "Dict[str,dict[str,int]]",
                    "Dict",
                    "Dict[str,Dict[str,int]]",
                    "Dict[str,Any]",
                    "str"
                ],
                "sl": [
                    "int",
                    "str",
                    "float",
                    "bool",
                    "Union[int,Tuple[int,int],List[int]]",
                    "Optional[str]"
                ],
                "flat": [
                    "bool",
                    "Dict[str,float]",
                    "Dict",
                    "Mapping",
                    "Dict[str,Dict[str,int]]"
                ]
            }
        },
        "choose_loc": {
            "name": "choose_loc",
            "location": 290,
            "return": [
                "float",
                "int",
                "Optional[int]",
                "None"
            ],
            "arguments": {
                "obj_rad": [
                    "bool",
                    "float",
                    "int",
                    "Tuple[Union[float,float]]",
                    "Union[float,Tuple[float,float]]"
                ],
                "reldir": [
                    "bool",
                    "Dict[str,Any]",
                    "float",
                    "str",
                    "int"
                ],
                "viewer_pos": [
                    "bool",
                    "float",
                    "int",
                    "Union[float,Tuple[float,float]]"
                ],
                "view_vector": [
                    "str",
                    "numpy.ndarray",
                    "int",
                    "bool",
                    "float"
                ],
                "ref_obj_loc": [
                    "bool",
                    "float",
                    "int",
                    "Union[float,Tuple[float,float]]"
                ],
                "sl": [
                    "int",
                    "bool",
                    "Optional[int]",
                    "float"
                ],
                "num_tries": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "maybe_speaker_look": {
            "name": "maybe_speaker_look",
            "location": 316,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ref_obj_dict": [
                    "str",
                    "Dict[str,str]",
                    "Dict",
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "view_pos": [
                    "int",
                    "List[int]"
                ],
                "sl": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "build_ref_obj_scene": {
            "name": "build_ref_obj_scene",
            "location": 331,
            "return": [
                "bool",
                "List[Dict]",
                "Mapping[str, Any]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "ad": [
                    "bytes",
                    "bool"
                ],
                "ref_objs": [
                    "list",
                    "float",
                    "numpy.ndarray",
                    "Dict[str, Any]"
                ],
                "sl": [
                    "int",
                    "Iterable[str]",
                    "bool",
                    "str"
                ],
                "flat": [
                    "bool",
                    "numpy.ndarray",
                    "float",
                    "List[numpy.array]"
                ]
            }
        },
        "add_distractors": {
            "name": "add_distractors",
            "location": 452,
            "return": [
                "None"
            ],
            "arguments": {
                "scene": [
                    "int",
                    "List[int]",
                    "Union[List[int],float,str]",
                    "str"
                ],
                "template_attributes": [
                    "int",
                    "str",
                    "bool"
                ],
                "sl": [
                    "int",
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "num_objs": [
                    "int",
                    "Union[List[int],float,str]",
                    "List[str]",
                    "List[T]"
                ],
                "num_holes": [
                    "int",
                    "Union[List[int],float,str]",
                    "List[str]",
                    "List[T]"
                ],
                "num_mobs": [
                    "int",
                    "Union[List[int],float,str]",
                    "List[str]",
                    "List[T]"
                ],
                "flat": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "get_slice": {
            "name": "get_slice",
            "location": 481,
            "return": [
                "List",
                "List[int]",
                "List[List[int]]",
                "List[float]",
                "bool"
            ],
            "arguments": {
                "blocks": [
                    "Optional[numpy.ndarray]"
                ],
                "axis": [
                    "Optional[numpy.ndarray]",
                    "int"
                ],
                "coord": [
                    "Optional[numpy.ndarray]",
                    "int"
                ]
            }
        },
        "build_scene": {
            "name": "build_scene",
            "location": 485,
            "return": [
                "None",
                "str",
                "Dict",
                "Tuple[str,str]"
            ],
            "arguments": {
                "template_attributes": [
                    "str"
                ],
                "sl": [
                    "int",
                    "Callable[[str],None]",
                    "str"
                ],
                "flat": [
                    "str",
                    "bool"
                ]
            }
        },
        "EmptyWorkspaceMemory.get_recent_entities": {
            "name": "get_recent_entities",
            "location": 76,
            "return": [
                "List",
                "Callable",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "None",
                    "numpy.ndarray"
                ]
            }
        },
        "specify_object.ssti": {
            "name": "ssti",
            "location": 244,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "s": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/generation_dialogues/build_scene_flat_script.py": {},
    "craftassist-master/python/base_agent/ttad/generation_dialogues/generate_dialogue.py": {
        "add_new_similar_action": {
            "name": "add_new_similar_action",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "action_text": [
                    "str",
                    "Dict",
                    "Callable[[Any],bool]",
                    "Callable[Any,bool]"
                ],
                "previous_action": [
                    "str",
                    "Sequence[str]",
                    "float",
                    "int",
                    "Dict",
                    "bool"
                ],
                "name_2": [
                    "str",
                    "Dict",
                    "Callable[[Any],bool]",
                    "Callable[Any,bool]"
                ],
                "curr_action": [
                    "str",
                    "bool",
                    "Type"
                ],
                "curr_index": [
                    "int",
                    "str",
                    "Sequence[str]",
                    "float",
                    "Dict",
                    "bool"
                ]
            }
        },
        "fix_composite_in_dict": {
            "name": "fix_composite_in_dict",
            "location": 110,
            "return": [
                "str",
                "Dict[str,Any]",
                "Dict[str,Dict[str,Any]]",
                "Dict[str,float]",
                "Dict"
            ],
            "arguments": {
                "action_text": [
                    "str",
                    "Dict",
                    "Callable"
                ],
                "action_dict": [
                    "str",
                    "bool",
                    "Union[int,str]",
                    "Mapping[str,Any]",
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "fix_spans": {
            "name": "fix_spans",
            "location": 151,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "d": [
                    "Tuple[str, str, int]",
                    "Callable[[T], None]",
                    "int",
                    "Optional[Any]"
                ],
                "prev_sentence_len": [
                    "AbstractSet[int]",
                    "Callable"
                ]
            }
        },
        "combine_dicts": {
            "name": "combine_dicts",
            "location": 171,
            "return": [
                "List",
                "str",
                "Dict",
                "List[dict[str,Any]]",
                "Dict[str,Any]",
                "Dict[str,int]",
                "Dict[str,float]"
            ],
            "arguments": {
                "dict_1": [
                    "List",
                    "str",
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]",
                    "Dict"
                ],
                "dict_2": [
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Dict"
                ],
                "prev_sentence_len": [
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Dict"
                ]
            }
        },
        "create_composite_action": {
            "name": "create_composite_action",
            "location": 180,
            "return": [
                "Tuple[Union[list,dict,dict[str,Union[Any,str]],Type]]",
                "int",
                "Iterable[str]",
                "Dict"
            ],
            "arguments": {
                "action_1": [
                    "dict",
                    "Type[T]"
                ],
                "action_2": [
                    "dict",
                    "Type[T]"
                ]
            }
        },
        "generate_actions": {
            "name": "generate_actions",
            "location": 202,
            "return": [
                "str",
                "Tuple[list]"
            ],
            "arguments": {
                "n": [
                    "bool",
                    "int",
                    "float",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "action_type": [
                    "Set[str]",
                    "None",
                    "str",
                    "Sequence[Optional[str]]",
                    "int",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]"
                ],
                "template_attributes": [
                    "Dict",
                    "str",
                    "Type"
                ],
                "composite": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "str"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/generation_dialogues/generate_utils.py": {
        "pick_random": {
            "name": "pick_random",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "prob": [
                    "float",
                    "int"
                ]
            }
        },
        "prepend_a_an": {
            "name": "prepend_a_an",
            "location": 62,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "make_plural": {
            "name": "make_plural",
            "location": 70,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "word": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, Optional[str]]"
                ]
            }
        },
        "to_snake_case": {
            "name": "to_snake_case",
            "location": 107,
            "return": [
                "str",
                "Callable[[T], None]",
                "bool"
            ],
            "arguments": {
                "word": [
                    "int",
                    "str",
                    "Iterable"
                ],
                "case": [
                    "Text",
                    "Dict",
                    "IO",
                    "List[str]",
                    "int",
                    "Iterator[Dict[str,str]]"
                ]
            }
        },
        "update_dict_with_span": {
            "name": "update_dict_with_span",
            "location": 116,
            "return": [
                "Dict",
                "Dict[str,Union[int,str]]",
                "Optional[Dict[str,str]]",
                "Dict[int,List[str]]"
            ],
            "arguments": {
                "action_dict": [
                    "Dict",
                    "str",
                    "bool"
                ],
                "split": [
                    "Dict",
                    "bytes",
                    "Dict[int,str]",
                    "T",
                    "Dict[str,str]",
                    "Dict[Any,list]",
                    "str",
                    "Union[bytes,str]"
                ],
                "arg_types": [
                    "bool",
                    "Mapping",
                    "int",
                    "Type",
                    "Type[T]"
                ],
                "args": []
            }
        },
        "values_of_nested_dict": {
            "name": "values_of_nested_dict",
            "location": 128,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "d": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "variants": {
            "name": "variants",
            "location": 137,
            "return": [
                "List[list[Text]]",
                "bool",
                "Optional[Union[str,Any]]"
            ],
            "arguments": {
                "sublist": [
                    "list",
                    "List[str]",
                    "str",
                    "dict"
                ],
                "int_list": [
                    "bool",
                    "List",
                    "int"
                ]
            }
        },
        "find_sub_list": {
            "name": "find_sub_list",
            "location": 158,
            "return": [
                "int",
                "Tuple[int]",
                "bool",
                "None"
            ],
            "arguments": {
                "sublist": [
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]",
                    "List[str]",
                    "List[tuple[Union[int,int]]]",
                    "List[Tuple[int,int]]",
                    "Dict",
                    "List[tuple[Union[int,str,str]]]",
                    "List[Tuple[int,str,str]]",
                    "int",
                    "float"
                ],
                "full_list": [
                    "Union[str, List[str]]",
                    "T",
                    "List[List[Any]]",
                    "str"
                ],
                "int_list": [
                    "bool",
                    "int",
                    "str",
                    "bytes",
                    "Callable"
                ]
            }
        },
        "find_span": {
            "name": "find_span",
            "location": 194,
            "return": [
                "Sequence[cirq.Qid]",
                "List[Union[int,list]]"
            ],
            "arguments": {
                "input_list": [
                    "list",
                    "Union[str, List[str]]",
                    "List[Dict]",
                    "List[Union[int, float]]",
                    "List[List[Any]]",
                    "List[Tuple[str, int]]",
                    "List[str]"
                ],
                "val": [
                    "Sequence[str]",
                    "Iterator",
                    "Iterator[str]",
                    "Mapping",
                    "Callable[None,Any]",
                    "Mapping[str,Any]",
                    "Collection",
                    "Iterable[str]",
                    "Callable[[None],Any]",
                    "Mapping[str,str]",
                    "Collection[str]"
                ]
            }
        },
        "flatten_dict": {
            "name": "flatten_dict",
            "location": 219,
            "return": [
                "dict",
                "int",
                "Optional[Dict[str, str]]",
                "Dict[int, List[str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "d": [
                    "Dict",
                    "Dict[str,set[str]]",
                    "Dict[str,float]",
                    "Dict[str,Set[str]]",
                    "Mapping[str,Any]",
                    "List[Dict[str,Any]]"
                ]
            }
        },
        "int_to_words": {
            "name": "int_to_words",
            "location": 233,
            "return": [
                "int",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "num": [
                    "int",
                    "float"
                ]
            }
        },
        "Arguments.__setitem__": {
            "name": "__setitem__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Dict[str,Any]",
                    "str"
                ],
                "value": [
                    "Dict[str,Any]",
                    "str"
                ]
            }
        },
        "flatten_dict.expand": {
            "name": "expand",
            "location": 222,
            "return": [
                "List[tuple]",
                "Dict",
                "Set[str]",
                "Dict[int,Dict[int,Any]]",
                "str",
                "Dict[str,str]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "bool"
                ],
                "value": [
                    "dict",
                    "list"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/generation_dialogues/tree_components.py": {
        "ComponentNode.__init__": {
            "name": "__init__",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template_attr": [
                    "Dict",
                    "str",
                    "Dict[str,str]"
                ]
            }
        },
        "ComponentNode.generate_description": {
            "name": "generate_description",
            "location": 338,
            "return": [
                "Optional[str]",
                "Type",
                "str",
                "Dict",
                "bool",
                "Set[str]",
                "Dict[str,str]",
                "Set",
                "Dict[str,dict[str,str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComponentNode.generate": {
            "name": "generate",
            "location": 344,
            "return": [
                "int",
                "str",
                "List[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "cls": [
                    "Dict[str,Any]",
                    "List",
                    "str",
                    "List[str]",
                    "Tuple[Union[str,str]]",
                    "Tuple[str,str]",
                    "object"
                ]
            }
        },
        "ComponentNode.__repr__": {
            "name": "__repr__",
            "location": 351,
            "return": [
                "str",
                "Dict",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComponentNode.to_dict": {
            "name": "to_dict",
            "location": 357,
            "return": [
                "Dict[str, bool]",
                "dict",
                "int",
                "Exception",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CategoryObject.__init__": {
            "name": "__init__",
            "location": 470,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block_type": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Dict[str,Any]",
                    "Tuple[type]"
                ],
                "schematic_attributes": [
                    "bool",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "List[int]",
                    "str"
                ],
                "repeat_key": [
                    "Optional[str]",
                    "None",
                    "Dict[str,Any]",
                    "str",
                    "bool",
                    "List[int]"
                ],
                "template_attr": [
                    "Dict",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "CategoryObject._generate_description": {
            "name": "_generate_description",
            "location": 485,
            "return": [
                "Dict[Text,]",
                "Callable",
                "Mapping[int,str]",
                "List[int]",
                "bool",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shape.__init__": {
            "name": "__init__",
            "location": 512,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block_type": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Dict[str,Any]",
                    "Tuple[type]"
                ],
                "schematic_attributes": [
                    "bool",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "List[int]",
                    "str"
                ],
                "repeat_key": [
                    "Optional[str]",
                    "None",
                    "Dict[str,Any]",
                    "str",
                    "bool",
                    "List[int]"
                ],
                "template_attr": [
                    "Dict",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Shape._generate_description": {
            "name": "_generate_description",
            "location": 523,
            "return": [
                "Dict[Text,list[str]]",
                "Callable",
                "Mapping[int,str]",
                "List[int]",
                "bool",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockShape.__init__": {
            "name": "__init__",
            "location": 561,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block_type": [
                    "bool",
                    "str",
                    "int"
                ],
                "schematic_attributes": [
                    "bool",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "List[int]",
                    "str"
                ],
                "repeat_key": [
                    "Optional[str]",
                    "None",
                    "Dict[str,Any]",
                    "str",
                    "bool",
                    "List[int]"
                ],
                "template_attr": [
                    "Dict",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "bool",
                    "List[int]",
                    "str"
                ]
            }
        },
        "RectanguloidShape.__init__": {
            "name": "__init__",
            "location": 580,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block_type": [
                    "str",
                    "bool"
                ],
                "schematic_attributes": [
                    "int",
                    "bool"
                ],
                "repeat_key": [
                    "Optional[str]",
                    "None",
                    "Dict[str,Any]",
                    "str",
                    "bool",
                    "List[int]"
                ],
                "template_attr": [
                    "str",
                    "Dict"
                ]
            }
        },
        "HollowRectanguloidShape.__init__": {
            "name": "__init__",
            "location": 609,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block_type": [
                    "str",
                    "bool"
                ],
                "schematic_attributes": [
                    "bool",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "List[int]",
                    "str"
                ],
                "repeat_key": [
                    "Optional[str]",
                    "None",
                    "Dict[str,Any]",
                    "str",
                    "bool",
                    "List[int]"
                ],
                "template_attr": [
                    "str",
                    "Dict"
                ]
            }
        },
        "CubeShape.__init__": {
            "name": "__init__",
            "location": 633,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block_type": [
                    "str",
                    "bool"
                ],
                "schematic_attributes": [
                    "bool",
                    "Callable",
                    "List[str]",
                    "Callable[[int],Tuple]",
                    "Callable[[Dict],None]",
                    "float"
                ],
                "repeat_key": [
                    "Optional[str]",
                    "None",
                    "Dict[str,Any]",
                    "str",
                    "bool",
                    "List[int]"
                ],
                "template_attr": [
                    "str",
                    "Dict"
                ]
            }
        },
        "HollowCubeShape.__init__": {
            "name": "__init__",
            "location": 654,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block_type": [
                    "str",
                    "bool"
                ],
                "schematic_attributes": [
                    "bool",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "List[int]",
                    "str"
                ],
                "repeat_key": [
                    "Optional[str]",
                    "None",
                    "Dict[str,Any]",
                    "str",
                    "bool",
                    "List[int]"
                ],
                "template_attr": [
                    "str",
                    "Dict"
                ]
            }
        },
        "SphereShape.__init__": {
            "name": "__init__",
            "location": 676,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block_type": [
                    "str",
                    "bool"
                ],
                "schematic_attributes": [
                    "bool",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "List[int]",
                    "str"
                ],
                "repeat_key": [
                    "Optional[str]",
                    "None",
                    "Dict[str,Any]",
                    "str",
                    "bool",
                    "List[int]"
                ],
                "template_attr": [
                    "str",
                    "Dict"
                ]
            }
        },
        "HollowSphereShape.__init__": {
            "name": "__init__",
            "location": 693,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block_type": [
                    "str",
                    "bool"
                ],
                "schematic_attributes": [
                    "bool",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "List[int]",
                    "str"
                ],
                "repeat_key": [
                    "Optional[str]",
                    "None",
                    "Dict[str,Any]",
                    "str",
                    "bool",
                    "List[int]"
                ],
                "template_attr": [
                    "str",
                    "Dict"
                ]
            }
        },
        "PyramidShape.__init__": {
            "name": "__init__",
            "location": 717,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block_type": [
                    "str",
                    "bool"
                ],
                "schematic_attributes": [
                    "bool",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "List[int]",
                    "str"
                ],
                "repeat_key": [
                    "Optional[str]",
                    "None",
                    "Dict[str,Any]",
                    "str",
                    "bool",
                    "List[int]"
                ],
                "template_attr": [
                    "str",
                    "Dict"
                ]
            }
        },
        "RectangleShape.__init__": {
            "name": "__init__",
            "location": 744,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block_type": [
                    "str",
                    "bool"
                ],
                "schematic_attributes": [
                    "bool",
                    "int",
                    "Optional[int]"
                ],
                "repeat_key": [
                    "Optional[str]",
                    "None",
                    "Dict[str,Any]",
                    "str",
                    "bool",
                    "List[int]"
                ],
                "template_attr": [
                    "str",
                    "Dict"
                ]
            }
        },
        "SquareShape.__init__": {
            "name": "__init__",
            "location": 768,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block_type": [
                    "str",
                    "bool"
                ],
                "schematic_attributes": [
                    "bool",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "List[int]",
                    "str"
                ],
                "repeat_key": [
                    "Optional[str]",
                    "None",
                    "Dict[str,Any]",
                    "str",
                    "bool",
                    "List[int]"
                ],
                "template_attr": [
                    "str",
                    "Dict"
                ]
            }
        },
        "TriangleShape.__init__": {
            "name": "__init__",
            "location": 786,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block_type": [
                    "str",
                    "bool"
                ],
                "schematic_attributes": [
                    "bool",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "List[int]",
                    "str"
                ],
                "repeat_key": [
                    "Optional[str]",
                    "None",
                    "Dict[str,Any]",
                    "str",
                    "bool",
                    "List[int]"
                ],
                "template_attr": [
                    "str",
                    "Dict"
                ]
            }
        },
        "CircleShape.__init__": {
            "name": "__init__",
            "location": 809,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block_type": [
                    "str",
                    "bool"
                ],
                "schematic_attributes": [
                    "bool",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "List[int]",
                    "str"
                ],
                "repeat_key": [
                    "Optional[str]",
                    "None",
                    "Dict[str,Any]",
                    "str",
                    "bool",
                    "List[int]"
                ],
                "template_attr": [
                    "str",
                    "Dict"
                ]
            }
        },
        "DiskShape.__init__": {
            "name": "__init__",
            "location": 832,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block_type": [
                    "str",
                    "bool"
                ],
                "schematic_attributes": [
                    "bool",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "List[int]",
                    "str"
                ],
                "repeat_key": [
                    "Optional[str]",
                    "None",
                    "Dict[str,Any]",
                    "str",
                    "bool",
                    "List[int]"
                ],
                "template_attr": [
                    "str",
                    "Dict"
                ]
            }
        },
        "EllipsoidShape.__init__": {
            "name": "__init__",
            "location": 855,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block_type": [
                    "str",
                    "bool"
                ],
                "schematic_attributes": [
                    "bool",
                    "str",
                    "Optional[Dict[str,str]]",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "repeat_key": [
                    "Optional[str]",
                    "None",
                    "Dict[str,Any]",
                    "str",
                    "bool",
                    "List[int]"
                ],
                "template_attr": [
                    "str",
                    "Dict"
                ]
            }
        },
        "DomeShape.__init__": {
            "name": "__init__",
            "location": 875,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block_type": [
                    "str",
                    "bool"
                ],
                "schematic_attributes": [
                    "bool",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "List[int]",
                    "str"
                ],
                "repeat_key": [
                    "Optional[str]",
                    "None",
                    "Dict[str,Any]",
                    "str",
                    "bool",
                    "List[int]"
                ],
                "template_attr": [
                    "str",
                    "Dict"
                ]
            }
        },
        "ArchShape.__init__": {
            "name": "__init__",
            "location": 898,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block_type": [
                    "str",
                    "bool"
                ],
                "schematic_attributes": [
                    "bool",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "List[int]",
                    "str"
                ],
                "repeat_key": [
                    "Optional[str]",
                    "None",
                    "Dict[str,Any]",
                    "str",
                    "bool",
                    "List[int]"
                ],
                "template_attr": [
                    "str",
                    "Dict"
                ]
            }
        },
        "TowerShape.__init__": {
            "name": "__init__",
            "location": 921,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block_type": [
                    "str",
                    "bool"
                ],
                "schematic_attributes": [
                    "bool",
                    "int",
                    "Optional[object]",
                    "List[str]",
                    "Optional[Callable[[Type,Dict],Any]]",
                    "Optional[int]"
                ],
                "repeat_key": [
                    "Optional[str]",
                    "None",
                    "Dict[str,Any]",
                    "str",
                    "bool",
                    "List[int]"
                ],
                "template_attr": [
                    "str",
                    "Dict"
                ]
            }
        },
        "Schematic.__init__": {
            "name": "__init__",
            "location": 948,
            "return": [
                "None",
                "Dict[str,Dict[str,int]]",
                "str",
                "Dict[str,Any]",
                "Union[tuple,list]"
            ],
            "arguments": {
                "self": [],
                "only_block_type": [
                    "Union[bool,Iterable[str]]",
                    "bool"
                ],
                "block_type": [
                    "bool",
                    "Type",
                    "Optional[Callable[[bool],None]]"
                ],
                "schematic_attributes": [
                    "bool",
                    "Type",
                    "Optional[Callable[[bool],None]]"
                ],
                "schematic_type": [
                    "bool",
                    "None"
                ],
                "abstract_size": [
                    "Union[bool,Iterable[str]]",
                    "None",
                    "bool",
                    "Iterable[str]"
                ],
                "colour": [
                    "Union[bool,Iterable[str]]",
                    "None",
                    "bool",
                    "Iterable[str]"
                ],
                "repeat_key": [
                    "bool",
                    "Sequence[str]",
                    "None"
                ],
                "repeat_dir": [
                    "bool",
                    "Sequence[str]",
                    "None"
                ],
                "template_attr": [
                    "Dict",
                    "str",
                    "Optional[int]",
                    "bool",
                    "Optional[str]"
                ],
                "multiple_schematics": [
                    "Union[bool,Iterable[str]]",
                    "bool"
                ]
            }
        },
        "Schematic._generate_description": {
            "name": "_generate_description",
            "location": 1021,
            "return": [
                "float",
                "OrderedDict",
                "Dict",
                "Dict[str,Union[str,int,dict[str,Any]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Coordinates.__init__": {
            "name": "__init__",
            "location": 1053,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template_attr": [
                    "str",
                    "Dict"
                ]
            }
        },
        "Coordinates.__repr__": {
            "name": "__repr__",
            "location": 1059,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Coordinates._generate_description": {
            "name": "_generate_description",
            "location": 1062,
            "return": [
                "str",
                "bool",
                "Optional[Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocationDelta.__init__": {
            "name": "__init__",
            "location": 1080,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "relative_direction": [
                    "bool",
                    "int",
                    "Optional[bool]",
                    "str"
                ],
                "direction_type": [
                    "bool",
                    "Callable",
                    "None"
                ],
                "additional_direction": [
                    "bool",
                    "None",
                    "Optional[Callable[[List],Any]]",
                    "Optional[str]",
                    "Callable[list,Any]",
                    "int",
                    "str"
                ]
            }
        },
        "LocationDelta._generate_description": {
            "name": "_generate_description",
            "location": 1102,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpeakerLook._generate_description": {
            "name": "_generate_description",
            "location": 1140,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpeakerPos._generate_description": {
            "name": "_generate_description",
            "location": 1149,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentPos._generate_description": {
            "name": "_generate_description",
            "location": 1158,
            "return": [
                "Optional[int]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Location.__init__": {
            "name": "__init__",
            "location": 1170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "location_type": [
                    "bool"
                ],
                "relative_direction": [
                    "Optional[int]",
                    "None",
                    "Optional[Any]",
                    "int",
                    "Optional[str]",
                    "Any",
                    "str"
                ],
                "relative_direction_value": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]"
                ],
                "additional_direction": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]"
                ],
                "steps": [
                    "bool",
                    "int",
                    "Optional[float]",
                    "str",
                    "Optional[bool]"
                ],
                "repeat_key": [
                    "str",
                    "None",
                    "Dict[str,str]",
                    "Optional[str]"
                ],
                "coref_resolve": [
                    "int",
                    "None",
                    "Hashable",
                    "bool",
                    "Callable",
                    "Dict[str,List[Any]]",
                    "Dict[str,list[Any]]",
                    "List[cirq.Circuit]",
                    "List[C]"
                ],
                "bo_coref_resolve": [
                    "str",
                    "List[int]",
                    "None"
                ],
                "template_attr": [
                    "Dict",
                    "Optional[str]",
                    "Callable",
                    "OrderedDict",
                    "Sequence[float]",
                    "int"
                ]
            }
        },
        "Location._generate_description": {
            "name": "_generate_description",
            "location": 1286,
            "return": [
                "OrderedDict",
                "Callable",
                "Mapping[int,str]",
                "List[int]",
                "bool",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Object.__init__": {
            "name": "__init__",
            "location": 1312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repeat_key_val": [
                    "int",
                    "None",
                    "str",
                    "bool"
                ],
                "coref_type": [
                    "str",
                    "None",
                    "bool",
                    "List[str]",
                    "bytes",
                    "Iterable[str]"
                ],
                "template_attr": [
                    "str",
                    "Dict"
                ]
            }
        },
        "Object._generate_description": {
            "name": "_generate_description",
            "location": 1356,
            "return": [
                "Dict[Text,Text]",
                "Callable",
                "Mapping[int,str]",
                "List[int]",
                "bool",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointedObject.__init__": {
            "name": "__init__",
            "location": 1396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repeat_key_val": [
                    "bytes",
                    "None",
                    "Sequence[str]",
                    "str",
                    "Union[str,bytes]"
                ],
                "coref_type": [
                    "str",
                    "bool",
                    "None"
                ],
                "template_attr": [
                    "str",
                    "Dict"
                ]
            }
        },
        "PointedObject._generate_description": {
            "name": "_generate_description",
            "location": 1420,
            "return": [
                "Dict[Text,Union[None,Text]]",
                "Callable",
                "Mapping[int,str]",
                "List[int]",
                "bool",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockObject.__init__": {
            "name": "__init__",
            "location": 1474,
            "return": [
                "Union[tuple,list]",
                "None"
            ],
            "arguments": {
                "self": [],
                "block_object_type": [
                    "str",
                    "int",
                    "None"
                ],
                "block_object_attributes": [
                    "None",
                    "List[str]",
                    "bool",
                    "int",
                    "Optional[int]"
                ],
                "block_object_location": [
                    "str",
                    "None",
                    "Dict",
                    "int",
                    "List",
                    "Optional[str]",
                    "Union[int,List]",
                    "Union[int,bool]",
                    "bool"
                ],
                "no_child": [
                    "bool",
                    "str",
                    "List",
                    "int",
                    "Optional[str]"
                ],
                "repeat_key": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "repeat_no_child": [
                    "int",
                    "None",
                    "List[str]",
                    "bool",
                    "Dict[str,Any]",
                    "str"
                ],
                "repeat_location": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "coref_type": [
                    "str",
                    "None",
                    "bool",
                    "int",
                    "Optional[bool]"
                ],
                "template_attr": [
                    "str",
                    "Dict"
                ]
            }
        },
        "BlockObject._generate_description": {
            "name": "_generate_description",
            "location": 1588,
            "return": [
                "OrderedDict",
                "Callable",
                "Mapping[int,str]",
                "List[int]",
                "bool",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mob.__init__": {
            "name": "__init__",
            "location": 1627,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mob_location": [
                    "str",
                    "None",
                    "bool",
                    "int"
                ],
                "repeat_key": [
                    "str",
                    "None",
                    "bool",
                    "bytes",
                    "Dict[str,str]"
                ],
                "repeat_location": [
                    "str",
                    "None",
                    "bool",
                    "int"
                ],
                "coref_type": [
                    "str",
                    "None"
                ],
                "template_attr": [
                    "str",
                    "Dict"
                ]
            }
        },
        "Mob._generate_description": {
            "name": "_generate_description",
            "location": 1657,
            "return": [
                "Callable",
                "Mapping[int, str]",
                "List[int]",
                "bool",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StopCondition.__init__": {
            "name": "__init__",
            "location": 1697,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "condition_type": [
                    "Type",
                    "Callable",
                    "None"
                ],
                "block_type": [
                    "bool",
                    "None",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "StopCondition._generate_description": {
            "name": "_generate_description",
            "location": 1710,
            "return": [
                "Dict[Text,]",
                "Callable",
                "Mapping[int,str]",
                "List[int]",
                "bool",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Repeat.__init__": {
            "name": "__init__",
            "location": 1727,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repeat_key": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ],
                "repeat_count": [
                    "int",
                    "None",
                    "Tuple[int,int]",
                    "List",
                    "bool",
                    "Tuple[Union[int,int]]"
                ],
                "repeat_dir": [
                    "None",
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ]
            }
        },
        "Repeat._generate_description": {
            "name": "_generate_description",
            "location": 1738,
            "return": [
                "Dict",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Filters.__init__": {
            "name": "__init__",
            "location": 1752,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "temporal": [
                    "bool",
                    "None",
                    "Dict[str,bool]",
                    "Optional[str]",
                    "Hashable",
                    "str",
                    "Optional[Dict]",
                    "Dict",
                    "Optional[list]",
                    "List"
                ],
                "mem_type": [
                    "Callable",
                    "None",
                    "Type",
                    "Optional[str]",
                    "bool",
                    "str",
                    "Optional[Sequence[Any]]",
                    "Sequence[Any]"
                ],
                "action_type": [
                    "Callable",
                    "None",
                    "int",
                    "Dict[str,bool]",
                    "Optional[int]",
                    "bool"
                ],
                "block_object_attr": [
                    "str",
                    "None",
                    "int",
                    "Union[float,str]",
                    "float",
                    "Union[float,int,str]",
                    "bool"
                ],
                "bo_updated": [
                    "bool",
                    "int",
                    "str",
                    "Type",
                    "bytes"
                ],
                "location_attr": [
                    "bool",
                    "None",
                    "str",
                    "int"
                ],
                "location_updated": [
                    "bool",
                    "int",
                    "str",
                    "Type",
                    "bytes"
                ],
                "mob_attr": [
                    "List[int]",
                    "None",
                    "bool",
                    "Dict[str,object]",
                    "str",
                    "Callable"
                ],
                "mob_updated": [
                    "bool",
                    "int",
                    "str",
                    "Type",
                    "bytes"
                ]
            }
        },
        "Filters._generate_description": {
            "name": "_generate_description",
            "location": 1778,
            "return": [
                "Callable",
                "Dict",
                "Mapping[int,str]",
                "Pattern",
                "List[int]",
                "Final",
                "bool",
                "List",
                "Dict[str,Any]",
                "Dict[str,Union[dict,Any]]",
                "str",
                "int",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Upsert.__init__": {
            "name": "__init__",
            "location": 1796,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "memory_type": [
                    "int",
                    "str",
                    "None"
                ],
                "reward_value": [
                    "int",
                    "str",
                    "None"
                ],
                "has_tag": [
                    "int",
                    "str",
                    "None"
                ],
                "has_size": [
                    "int",
                    "str",
                    "None"
                ],
                "has_colour": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "Upsert._generate_description": {
            "name": "_generate_description",
            "location": 1810,
            "return": [
                "Dict",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryData.__init__": {
            "name": "__init__",
            "location": 1818,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reward_value": [
                    "bool",
                    "None",
                    "float",
                    "List",
                    "Optional[List[Any]]"
                ],
                "memory_type": [
                    "str",
                    "None",
                    "bool",
                    "Optional[int]",
                    "Optional[Mapping]",
                    "Mapping"
                ],
                "has_tag": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Optional[List[str]]",
                    "bool",
                    "List[str]",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "Iterable[str]"
                ],
                "has_colour": [
                    "Optional[str]",
                    "None",
                    "Optional[Any]",
                    "str",
                    "Optional[Dict]",
                    "Any",
                    "Optional[Union[str,Any]]",
                    "Dict"
                ],
                "has_size": [
                    "int",
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "MemoryData._generate_description": {
            "name": "_generate_description",
            "location": 1828,
            "return": [
                "Dict",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Location.__init__.assign_relative_direction": {
            "name": "assign_relative_direction",
            "location": 1182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "relative_direction": [
                    "Optional[int]",
                    "float",
                    "str"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/generation_dialogues/__init__.py": {},
    "craftassist-master/python/base_agent/ttad/generation_dialogues/generate_data/action_node.py": {
        "ActionNode.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template_key": [
                    "str"
                ],
                "template": [
                    "str",
                    "None"
                ],
                "template_attr": [
                    "str",
                    "Dict"
                ]
            }
        },
        "ActionNode.generate_description": {
            "name": "generate_description",
            "location": 34,
            "return": [
                "Optional[str]",
                "Type",
                "str",
                "Dict",
                "bool",
                "Set[str]",
                "Dict[str,str]",
                "Set",
                "Dict[str,dict[str,str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActionNode.generate": {
            "name": "generate",
            "location": 40,
            "return": [
                "Dict[str,str]",
                "str",
                "Dict",
                "List[str]",
                "bool",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "action_type": [
                    "str",
                    "None"
                ],
                "template_attr": [
                    "str",
                    "Dict"
                ]
            }
        },
        "ActionNode.__repr__": {
            "name": "__repr__",
            "location": 55,
            "return": [
                "str",
                "Dict",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActionNode.to_dict": {
            "name": "to_dict",
            "location": 61,
            "return": [
                "Dict[str, bool]",
                "dict",
                "int",
                "Exception",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActionNode.to_dict.substitute_with_spans": {
            "name": "substitute_with_spans",
            "location": 82,
            "return": [
                "Dict",
                "str",
                "Dict[str,Any]",
                "Set[str]"
            ],
            "arguments": {
                "action_description_split": [
                    "bytes",
                    "Tuple[str]",
                    "List[Tuple[int, str, str]]",
                    "str",
                    "List[str]",
                    "int",
                    "Optional[Iterable]",
                    "Optional[List[str]]"
                ],
                "d": [
                    "int",
                    "bytes",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/generation_dialogues/generate_data/human_bot_dialogue.py": {
        "GetMemory.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "None"
                ],
                "template_attr": [
                    "str",
                    "Dict"
                ]
            }
        },
        "GetMemory.generate": {
            "name": "generate",
            "location": 44,
            "return": [
                "GetMemory",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "Iterable[Mapping]",
                    "str",
                    "Iterable[Mapping[str,Any]]",
                    "Dict[int,str]"
                ],
                "template": [
                    "List[str]",
                    "str",
                    "None",
                    "Callable"
                ],
                "template_attr": [
                    "Dict",
                    "int",
                    "List[Callable]"
                ]
            }
        },
        "GetMemory._generate_description": {
            "name": "_generate_description",
            "location": 111,
            "return": [
                "List[str]",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PutMemory.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "None"
                ],
                "template_attr": [
                    "str",
                    "Dict"
                ]
            }
        },
        "PutMemory.generate": {
            "name": "generate",
            "location": 150,
            "return": [
                "PutMemory",
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "Iterable[Mapping]",
                    "str",
                    "Iterable[Mapping[str,Any]]",
                    "Dict[int,str]"
                ],
                "template": [
                    "int",
                    "None",
                    "str",
                    "List[str]",
                    "IO[str]",
                    "IO"
                ],
                "template_attr": [
                    "dict[, ]"
                ]
            }
        },
        "PutMemory._generate_description": {
            "name": "_generate_description",
            "location": 218,
            "return": [
                "List[str]",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/generation_dialogues/generate_data/human_human_dialogue.py": {
        "Move.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "None"
                ],
                "template_attr": [
                    "str",
                    "Dict"
                ]
            }
        },
        "Move.generate": {
            "name": "generate",
            "location": 69,
            "return": [
                "Move",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "Iterable[Mapping]",
                    "str",
                    "Iterable[Mapping[str,Any]]",
                    "Dict[int,str]"
                ],
                "template": [
                    "str",
                    "Dict[str,Any]",
                    "None",
                    "int"
                ],
                "template_attr": [
                    "Dict",
                    "Optional[Mapping[str,Any]]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "Move._generate_description": {
            "name": "_generate_description",
            "location": 120,
            "return": [
                "List[str]",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Build.__init__": {
            "name": "__init__",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "None"
                ],
                "template_attr": [
                    "str",
                    "Dict"
                ]
            }
        },
        "Build.generate": {
            "name": "generate",
            "location": 164,
            "return": [
                "Build",
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Iterable[Mapping]",
                    "str",
                    "Iterable[Mapping[str,Any]]",
                    "Dict[int,str]"
                ],
                "template": [
                    "str",
                    "None",
                    "Dict",
                    "BinaryIO",
                    "Iterable[Dict[str,Any]]"
                ],
                "template_attr": [
                    "Dict",
                    "str",
                    "Exception"
                ]
            }
        },
        "Build._generate_description": {
            "name": "_generate_description",
            "location": 226,
            "return": [
                "List[str]",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Copy.__init__": {
            "name": "__init__",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "None"
                ],
                "template_attr": [
                    "str",
                    "Dict"
                ]
            }
        },
        "Copy.generate": {
            "name": "generate",
            "location": 276,
            "return": [
                "Copy",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "template": [
                    "str",
                    "None",
                    "Optional[Dict]",
                    "Optional[str]",
                    "Dict",
                    "Optional[BaseException]",
                    "BaseException"
                ],
                "template_attr": [
                    "Dict",
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "Union[Callable,str]"
                ]
            }
        },
        "Copy._generate_description": {
            "name": "_generate_description",
            "location": 337,
            "return": [
                "List[str]",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dig.__init__": {
            "name": "__init__",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "None"
                ],
                "template_attr": [
                    "str",
                    "Dict"
                ]
            }
        },
        "Dig.generate": {
            "name": "generate",
            "location": 390,
            "return": [
                "Dig",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "template": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "int",
                    "Match[str]",
                    "Match"
                ],
                "template_attr": [
                    "Dict",
                    "str",
                    "Optional[object]"
                ]
            }
        },
        "Dig._generate_description": {
            "name": "_generate_description",
            "location": 442,
            "return": [
                "List[str]",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Destroy.__init__": {
            "name": "__init__",
            "location": 482,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "None"
                ],
                "template_attr": [
                    "str",
                    "Dict"
                ]
            }
        },
        "Destroy.generate": {
            "name": "generate",
            "location": 485,
            "return": [
                "Destroy",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "template": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "int",
                    "Match[str]",
                    "Match"
                ],
                "template_attr": [
                    "Dict",
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]"
                ]
            }
        },
        "Destroy._generate_description": {
            "name": "_generate_description",
            "location": 523,
            "return": [
                "List[str]",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Undo.__init__": {
            "name": "__init__",
            "location": 559,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "None"
                ],
                "template_attr": [
                    "str",
                    "Dict"
                ]
            }
        },
        "Undo.generate": {
            "name": "generate",
            "location": 562,
            "return": [
                "Undo",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "template": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "int",
                    "Match[str]",
                    "Match"
                ],
                "template_attr": [
                    "Dict",
                    "str",
                    "IO[str]",
                    "Optional[str]"
                ]
            }
        },
        "Undo._generate_description": {
            "name": "_generate_description",
            "location": 580,
            "return": [
                "List[str]",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fill.__init__": {
            "name": "__init__",
            "location": 616,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "None"
                ],
                "template_attr": [
                    "str",
                    "Dict"
                ]
            }
        },
        "Fill.generate": {
            "name": "generate",
            "location": 619,
            "return": [
                "Fill",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "template": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "int",
                    "Match[str]",
                    "Match"
                ],
                "template_attr": [
                    "Dict",
                    "str",
                    "Optional[object]",
                    "Optional[Dict]"
                ]
            }
        },
        "Fill._generate_description": {
            "name": "_generate_description",
            "location": 665,
            "return": [
                "List[str]",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Spawn.__init__": {
            "name": "__init__",
            "location": 700,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "None"
                ],
                "template_attr": [
                    "str",
                    "Dict"
                ]
            }
        },
        "Spawn.generate": {
            "name": "generate",
            "location": 703,
            "return": [
                "Spawn",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "template": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "int",
                    "Match[str]",
                    "Match"
                ],
                "template_attr": [
                    "Dict",
                    "str",
                    "Optional[Mapping[str,Any]]",
                    "Optional[Dict]",
                    "Optional[str]"
                ]
            }
        },
        "Spawn._generate_description": {
            "name": "_generate_description",
            "location": 738,
            "return": [
                "List[str]",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Freebuild.__init__": {
            "name": "__init__",
            "location": 774,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "None"
                ],
                "template_attr": [
                    "str",
                    "Dict"
                ]
            }
        },
        "Freebuild.generate": {
            "name": "generate",
            "location": 777,
            "return": [
                "Freebuild",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "template": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "int",
                    "Match[str]",
                    "Match"
                ],
                "template_attr": [
                    "Dict",
                    "str",
                    "bool"
                ]
            }
        },
        "Freebuild._generate_description": {
            "name": "_generate_description",
            "location": 828,
            "return": [
                "List[str]",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dance.__init__": {
            "name": "__init__",
            "location": 863,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "None"
                ],
                "template_attr": [
                    "str",
                    "Dict"
                ]
            }
        },
        "Dance.generate": {
            "name": "generate",
            "location": 866,
            "return": [
                "Dance",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "template": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "int",
                    "Match[str]",
                    "Match"
                ],
                "template_attr": [
                    "Dict",
                    "str",
                    "Optional[object]"
                ]
            }
        },
        "Dance._generate_description": {
            "name": "_generate_description",
            "location": 917,
            "return": [
                "List[str]",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stop.__init__": {
            "name": "__init__",
            "location": 951,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "None"
                ],
                "template_attr": [
                    "str",
                    "Dict"
                ]
            }
        },
        "Stop.generate": {
            "name": "generate",
            "location": 954,
            "return": [
                "Stop",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "template": [
                    "str",
                    "None",
                    "List[str]",
                    "Type",
                    "int"
                ],
                "template_attr": [
                    "str",
                    "Dict"
                ]
            }
        },
        "Stop._generate_description": {
            "name": "_generate_description",
            "location": 972,
            "return": [
                "List[str]",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Resume.__init__": {
            "name": "__init__",
            "location": 1001,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "None"
                ],
                "template_attr": [
                    "str",
                    "Dict"
                ]
            }
        },
        "Resume.generate": {
            "name": "generate",
            "location": 1004,
            "return": [
                "Resume",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "template": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "int",
                    "Match[str]",
                    "Match"
                ],
                "template_attr": [
                    "Dict",
                    "str",
                    "IO[str]",
                    "Optional[str]"
                ]
            }
        },
        "Resume._generate_description": {
            "name": "_generate_description",
            "location": 1022,
            "return": [
                "List[str]",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Noop.__init__": {
            "name": "__init__",
            "location": 1053,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template_attr": [
                    "str",
                    "Dict"
                ]
            }
        },
        "Noop._generate_description": {
            "name": "_generate_description",
            "location": 1057,
            "return": [
                "List",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/generation_dialogues/generate_data/__init__.py": {},
    "craftassist-master/python/base_agent/ttad/generation_dialogues/templates/build_templates.py": {},
    "craftassist-master/python/base_agent/ttad/generation_dialogues/templates/copy_templates.py": {},
    "craftassist-master/python/base_agent/ttad/generation_dialogues/templates/dance_templates.py": {},
    "craftassist-master/python/base_agent/ttad/generation_dialogues/templates/destroy_templates.py": {},
    "craftassist-master/python/base_agent/ttad/generation_dialogues/templates/dig_templates.py": {},
    "craftassist-master/python/base_agent/ttad/generation_dialogues/templates/fill_templates.py": {},
    "craftassist-master/python/base_agent/ttad/generation_dialogues/templates/freebuild_templates.py": {},
    "craftassist-master/python/base_agent/ttad/generation_dialogues/templates/get_memory_templates.py": {},
    "craftassist-master/python/base_agent/ttad/generation_dialogues/templates/move_templates.py": {},
    "craftassist-master/python/base_agent/ttad/generation_dialogues/templates/put_memory_templates.py": {},
    "craftassist-master/python/base_agent/ttad/generation_dialogues/templates/resume_templates.py": {},
    "craftassist-master/python/base_agent/ttad/generation_dialogues/templates/spawn_templates.py": {},
    "craftassist-master/python/base_agent/ttad/generation_dialogues/templates/stop_templates.py": {},
    "craftassist-master/python/base_agent/ttad/generation_dialogues/templates/templates.py": {
        "get_template": {
            "name": "get_template",
            "location": 51,
            "return": [
                "str",
                "List"
            ],
            "arguments": {
                "template_key": [
                    "str",
                    "Dict[str,str]"
                ],
                "node": [
                    "str",
                    "bool"
                ],
                "template": [
                    "str",
                    "List[str]",
                    "None",
                    "int"
                ],
                "template_attr": [
                    "Dict",
                    "str",
                    "Dict[str,str]"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/generation_dialogues/templates/undo_templates.py": {},
    "craftassist-master/python/base_agent/ttad/generation_dialogues/templates/__init__.py": {},
    "craftassist-master/python/base_agent/ttad/generation_dialogues/template_objects/action_names.py": {
        "Dance.add_generate_args": {
            "name": "add_generate_args",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "Dict",
                    "str"
                ]
            }
        },
        "Dance.generate_description": {
            "name": "generate_description",
            "location": 43,
            "return": [
                "Iterable[str]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "Move.generate_description": {
            "name": "generate_description",
            "location": 54,
            "return": [
                "Optional[int]",
                "None",
                "Optional[float]",
                "str",
                "Optional[bool]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "Optional[str]",
                    "Type"
                ]
            }
        },
        "MoveSingle.add_generate_args": {
            "name": "add_generate_args",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "str",
                    "bool",
                    "Type"
                ]
            }
        },
        "MoveSingle.generate_description": {
            "name": "generate_description",
            "location": 100,
            "return": [
                "Iterable[str]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "Optional[str]",
                    "Type"
                ]
            }
        },
        "Build.generate_description": {
            "name": "generate_description",
            "location": 129,
            "return": [
                "None",
                "Optional[int]",
                "Optional[float]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "int",
                    "Dict",
                    "str"
                ]
            }
        },
        "BuildSingle.add_generate_args": {
            "name": "add_generate_args",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "BuildSingle.generate_description": {
            "name": "generate_description",
            "location": 175,
            "return": [
                "Iterable[str]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "Dig.generate_description": {
            "name": "generate_description",
            "location": 231,
            "return": [
                "Iterable[str]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "int",
                    "Callable[...,None]",
                    "Optional[BaseException]",
                    "Iterable[str]",
                    "Callable[...,Awaitable]",
                    "str"
                ],
                "templ_index": [
                    "int",
                    "str"
                ]
            }
        },
        "DigSingle.add_generate_args": {
            "name": "add_generate_args",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "DigSingle.generate_description": {
            "name": "generate_description",
            "location": 256,
            "return": [
                "Iterable[str]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "Freebuild.generate_description": {
            "name": "generate_description",
            "location": 283,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "FreebuildLocation.add_generate_args": {
            "name": "add_generate_args",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "FreebuildLocation.generate_description": {
            "name": "generate_description",
            "location": 302,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "Destroy.generate_description": {
            "name": "generate_description",
            "location": 328,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "DestroySingle.add_generate_args": {
            "name": "add_generate_args",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "str",
                    "bool",
                    "Type"
                ]
            }
        },
        "DestroySingle.generate_description": {
            "name": "generate_description",
            "location": 364,
            "return": [
                "Iterable[str]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "Optional[str]",
                    "Type"
                ]
            }
        },
        "Spawn.generate_description": {
            "name": "generate_description",
            "location": 406,
            "return": [
                "str",
                "int",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "Fill.generate_description": {
            "name": "generate_description",
            "location": 420,
            "return": [
                "str",
                "int",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "int",
                    "Dict",
                    "str"
                ]
            }
        },
        "Undo.add_generate_args": {
            "name": "add_generate_args",
            "location": 442,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "str",
                    "bool",
                    "Type"
                ]
            }
        },
        "Undo.generate_description": {
            "name": "generate_description",
            "location": 449,
            "return": [
                "str",
                "int",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "Optional[str]",
                    "Type"
                ]
            }
        },
        "StopSingle.generate_description": {
            "name": "generate_description",
            "location": 474,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "Stop.generate_description": {
            "name": "generate_description",
            "location": 493,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "ResumeSingle.generate_description": {
            "name": "generate_description",
            "location": 504,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "Resume.generate_description": {
            "name": "generate_description",
            "location": 527,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "Copy.generate_description": {
            "name": "generate_description",
            "location": 537,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "Dict"
                ]
            }
        },
        "CopyMultiple.add_generate_args": {
            "name": "add_generate_args",
            "location": 588,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "CopyMultiple.generate_description": {
            "name": "generate_description",
            "location": 596,
            "return": [
                "Iterable[str]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "CopySingle.add_generate_args": {
            "name": "add_generate_args",
            "location": 620,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "CopySingle.generate_description": {
            "name": "generate_description",
            "location": 623,
            "return": [
                "Iterable[str]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "Tag.generate_description": {
            "name": "generate_description",
            "location": 651,
            "return": [
                "Iterable[str]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/generation_dialogues/template_objects/answer.py": {
        "What.add_generate_args": {
            "name": "add_generate_args",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "What.generate_description": {
            "name": "generate_description",
            "location": 27,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "WhatSee.add_generate_args": {
            "name": "add_generate_args",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "WhatSee.generate_description": {
            "name": "generate_description",
            "location": 41,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "AskSize.add_generate_args": {
            "name": "add_generate_args",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "AskSize.generate_description": {
            "name": "generate_description",
            "location": 55,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "AskColour.add_generate_args": {
            "name": "add_generate_args",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "AskColour.generate_description": {
            "name": "generate_description",
            "location": 72,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "AskIs.add_generate_args": {
            "name": "add_generate_args",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "AskIs.generate_description": {
            "name": "generate_description",
            "location": 94,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/generation_dialogues/template_objects/block_object.py": {
        "define_block_object_type": {
            "name": "define_block_object_type",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "template_obj": [
                    "str",
                    "Callable"
                ],
                "template_obj_name": [
                    "str"
                ],
                "index": [
                    "int",
                    "str",
                    "bool",
                    "List[float]",
                    "List[str]"
                ],
                "reference_type": [
                    "str",
                    "Type",
                    "None"
                ],
                "block_obj_name": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "Tuple[Type]"
                ],
                "templ_index": [
                    "int",
                    "str",
                    "Type"
                ]
            }
        },
        "BlockObjectCoref.add_generate_args": {
            "name": "add_generate_args",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ],
                "templ_index": [
                    "int"
                ]
            }
        },
        "BlockObjectCoref.generate_description": {
            "name": "generate_description",
            "location": 145,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "BlockObjectThis.add_generate_args": {
            "name": "add_generate_args",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Tuple"
                ],
                "templ_index": [
                    "int",
                    "Dict",
                    "Type",
                    "Dict[str,Any]",
                    "str"
                ]
            }
        },
        "BlockObjectThis.generate_description": {
            "name": "generate_description",
            "location": 163,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "BlockObjectThese.add_generate_args": {
            "name": "add_generate_args",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Tuple"
                ],
                "templ_index": [
                    "int",
                    "Tuple"
                ]
            }
        },
        "BlockObjectThese.generate_description": {
            "name": "generate_description",
            "location": 177,
            "return": [
                "Text",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "BlockObjectThat.add_generate_args": {
            "name": "add_generate_args",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Dict[str,Any]",
                    "Dict[str,int]",
                    "Dict[str,str]"
                ],
                "templ_index": [
                    "int",
                    "Dict",
                    "Type",
                    "Dict[str,Any]",
                    "str"
                ]
            }
        },
        "BlockObjectThat.generate_description": {
            "name": "generate_description",
            "location": 200,
            "return": [
                "int",
                "str",
                "bool",
                "Dict[str,int]",
                "Pattern"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "int",
                    "str",
                    "List[str]",
                    "Dict"
                ],
                "index": [
                    "int",
                    "bool",
                    "Dict[str,List[str]]",
                    "Dict[str,Any]",
                    "List",
                    "Optional[str]",
                    "Dict[str,Dict[str,Any]]",
                    "str"
                ],
                "templ_index": [
                    "int",
                    "Dict",
                    "str"
                ]
            }
        },
        "BlockObjectIt.add_generate_args": {
            "name": "add_generate_args",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Tuple"
                ],
                "templ_index": [
                    "int",
                    "Tuple"
                ]
            }
        },
        "BlockObjectIt.generate_description": {
            "name": "generate_description",
            "location": 230,
            "return": [
                "Text",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "BlockObjectThose.add_generate_args": {
            "name": "add_generate_args",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Tuple"
                ],
                "templ_index": [
                    "int",
                    "Tuple"
                ]
            }
        },
        "BlockObjectThose.generate_description": {
            "name": "generate_description",
            "location": 244,
            "return": [
                "Text",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "AbstractDescription.add_generate_args": {
            "name": "add_generate_args",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "AbstractDescription.generate_description": {
            "name": "generate_description",
            "location": 285,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "int",
                    "str",
                    "List[str]",
                    "Dict"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "int",
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "ConcreteDescription.add_generate_args": {
            "name": "add_generate_args",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "ConcreteDescription.generate_description": {
            "name": "generate_description",
            "location": 334,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "int",
                    "str",
                    "List[str]",
                    "Dict"
                ],
                "index": [
                    "int"
                ],
                "templ_index": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "Dict"
                ]
            }
        },
        "Colour.add_generate_args": {
            "name": "add_generate_args",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "Colour.generate_description": {
            "name": "generate_description",
            "location": 376,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "int",
                    "str",
                    "List[str]",
                    "Dict"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "Size.add_generate_args": {
            "name": "add_generate_args",
            "location": 386,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "Size.generate_description": {
            "name": "generate_description",
            "location": 413,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "int",
                    "str",
                    "List[str]",
                    "Dict"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "BlockObjectLocation.add_generate_args": {
            "name": "add_generate_args",
            "location": 422,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "Dict",
                    "int"
                ]
            }
        },
        "BlockObjectLocation.generate_description": {
            "name": "generate_description",
            "location": 471,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "int",
                    "str",
                    "List[str]",
                    "Dict"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/generation_dialogues/template_objects/common.py": {
        "NTimes.add_generate_args": {
            "name": "add_generate_args",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "NTimes.generate_description": {
            "name": "generate_description",
            "location": 27,
            "return": [
                "int",
                "Set[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/generation_dialogues/template_objects/dance.py": {
        "Fly.add_generate_args": {
            "name": "add_generate_args",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Dict[str,Dict[str,int]]",
                    "bool",
                    "Sequence[cirq.Qid]"
                ],
                "templ_index": [
                    "int",
                    "str",
                    "bool",
                    "Type"
                ]
            }
        },
        "Fly.generate_description": {
            "name": "generate_description",
            "location": 38,
            "return": [
                "Iterable[str]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "Jump.add_generate_args": {
            "name": "add_generate_args",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Dict[str,Dict[str,int]]",
                    "bool",
                    "Sequence[cirq.Qid]"
                ],
                "templ_index": [
                    "int",
                    "str",
                    "bool",
                    "Type"
                ]
            }
        },
        "Jump.generate_description": {
            "name": "generate_description",
            "location": 58,
            "return": [
                "Iterable[str]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "Walk.add_generate_args": {
            "name": "add_generate_args",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "Walk.generate_description": {
            "name": "generate_description",
            "location": 70,
            "return": [
                "Iterable[str]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "Hop.add_generate_args": {
            "name": "add_generate_args",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Dict[str,Dict[str,int]]",
                    "bool",
                    "Sequence[cirq.Qid]"
                ],
                "templ_index": [
                    "int",
                    "str",
                    "bool",
                    "Type"
                ]
            }
        },
        "Hop.generate_description": {
            "name": "generate_description",
            "location": 90,
            "return": [
                "Iterable[str]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/generation_dialogues/template_objects/dialogue_generic.py": {
        "Human.generate_description": {
            "name": "generate_description",
            "location": 12,
            "return": [
                "None",
                "Optional[bool]",
                "Optional[int]",
                "Optional[float]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "HumanReplace.add_generate_args": {
            "name": "add_generate_args",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "HumanReplace.generate_description": {
            "name": "generate_description",
            "location": 22,
            "return": [
                "None",
                "Optional[bool]",
                "Optional[int]",
                "Optional[float]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/generation_dialogues/template_objects/dialogue_human_bot.py": {
        "QueryBotCurrentAction.add_generate_args": {
            "name": "add_generate_args",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "QueryBotCurrentAction.generate_description": {
            "name": "generate_description",
            "location": 27,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "QueryBot.generate_description": {
            "name": "generate_description",
            "location": 42,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "Dict"
                ]
            }
        },
        "CurrentLocation.add_generate_args": {
            "name": "add_generate_args",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "ActionReferenceObjectName.add_generate_args": {
            "name": "add_generate_args",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "ActionReferenceObjectName.generate_description": {
            "name": "generate_description",
            "location": 89,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "MoveTarget.add_generate_args": {
            "name": "add_generate_args",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "MoveTarget.generate_description": {
            "name": "generate_description",
            "location": 102,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "HumanReward.add_generate_args": {
            "name": "add_generate_args",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "PosReward.add_generate_args": {
            "name": "add_generate_args",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "PosReward.generate_description": {
            "name": "generate_description",
            "location": 118,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "NegReward.add_generate_args": {
            "name": "add_generate_args",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "NegReward.generate_description": {
            "name": "generate_description",
            "location": 141,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "BotThank.generate_description": {
            "name": "generate_description",
            "location": 163,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/generation_dialogues/template_objects/dig.py": {
        "DigSomeShape.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "Dict",
                    "Optional[Mapping[str,Any]]",
                    "Mapping",
                    "Optional[str]",
                    "None"
                ],
                "template_attr": [
                    "str",
                    "Dict",
                    "Optional[Mapping[str,Any]]",
                    "Mapping",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "DigSomeShape.add_generate_args": {
            "name": "add_generate_args",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bytes",
                    "str",
                    "Dict[str,str]",
                    "List[str]"
                ],
                "templ_index": [
                    "int",
                    "bytes",
                    "str",
                    "Dict[str,str]",
                    "List[str]"
                ]
            }
        },
        "DigSomeShape.generate_description": {
            "name": "generate_description",
            "location": 29,
            "return": [
                "Optional[int]",
                "bool",
                "Optional[bool]",
                "int",
                "Optional[List[Any]]",
                "list"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "int",
                    "Callable[[int],None]",
                    "Sequence[int]"
                ],
                "index": [
                    "int",
                    "Callable[[int],None]",
                    "Sequence[int]"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "DigShapeHole.add_generate_args": {
            "name": "add_generate_args",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "str",
                    "bool",
                    "Iterable[str]"
                ],
                "templ_index": [
                    "Mapping[str,Any]",
                    "int"
                ]
            }
        },
        "DigShapeHole.generate_description": {
            "name": "generate_description",
            "location": 56,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "DigShapeAny.add_generate_args": {
            "name": "add_generate_args",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Type",
                    "Iterable",
                    "Set"
                ],
                "templ_index": [
                    "Mapping[str,Any]",
                    "int"
                ]
            }
        },
        "DigShapeAny.generate_description": {
            "name": "generate_description",
            "location": 103,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "int",
                    "str",
                    "bool",
                    "Callable",
                    "List[str]",
                    "Optional[str]"
                ],
                "index": [
                    "int",
                    "str",
                    "bool",
                    "Callable",
                    "List[str]",
                    "Optional[str]"
                ],
                "previous_text": [
                    "str",
                    "None",
                    "bool",
                    "Callable",
                    "List[str]",
                    "int",
                    "Optional[str]"
                ],
                "templ_index": [
                    "int",
                    "str",
                    "bool",
                    "Callable",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "DigDimensions.add_generate_args": {
            "name": "add_generate_args",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "DigDimensions.generate_description": {
            "name": "generate_description",
            "location": 128,
            "return": [
                "dict",
                "float"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "int",
                    "Dict",
                    "str"
                ]
            }
        },
        "DigAbstractSize.add_generate_args": {
            "name": "add_generate_args",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "DigAbstractSize.generate_description": {
            "name": "generate_description",
            "location": 155,
            "return": [
                "\"Task\"",
                "bool",
                "int",
                "Optional[Set[str]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "int",
                    "Dict",
                    "str"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/generation_dialogues/template_objects/fill.py": {
        "FillShape.add_generate_args": {
            "name": "add_generate_args",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "Mapping[str,Any]",
                    "int"
                ]
            }
        },
        "FillShape.generate_description": {
            "name": "generate_description",
            "location": 30,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "FillObjectThis.add_generate_args": {
            "name": "add_generate_args",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "Mapping[str,Any]",
                    "int"
                ]
            }
        },
        "FillObjectThis.generate_description": {
            "name": "generate_description",
            "location": 49,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "FillBlockType.add_generate_args": {
            "name": "add_generate_args",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "FillBlockType.generate_description": {
            "name": "generate_description",
            "location": 59,
            "return": [
                "Type",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "UseFill.generate_description": {
            "name": "generate_description",
            "location": 64,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/generation_dialogues/template_objects/location.py": {
        "MoveHere.add_generate_args": {
            "name": "add_generate_args",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "MoveHere.generate_description": {
            "name": "generate_description",
            "location": 23,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "Dict"
                ]
            }
        },
        "MoveHereCoref.add_generate_args": {
            "name": "add_generate_args",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "MoveHereCoref.generate_description": {
            "name": "generate_description",
            "location": 74,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "Stand.add_generate_args": {
            "name": "add_generate_args",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "Stand.generate_description": {
            "name": "generate_description",
            "location": 83,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "Optional[str]",
                    "Type"
                ]
            }
        },
        "Down.add_generate_args": {
            "name": "add_generate_args",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "Down.generate_description": {
            "name": "generate_description",
            "location": 96,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "Optional[str]",
                    "Type"
                ]
            }
        },
        "LocationBlockObjectTemplate.add_generate_args": {
            "name": "add_generate_args",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "LocationBlockObjectTemplate.generate_description": {
            "name": "generate_description",
            "location": 116,
            "return": [
                "str",
                "Dict[str, List[str]]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "int",
                    "str",
                    "List[str]",
                    "Dict"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "AroundString.add_generate_args": {
            "name": "add_generate_args",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "AroundString.generate_description": {
            "name": "generate_description",
            "location": 131,
            "return": [
                "Optional[str]",
                "str",
                "float",
                "List[str]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "Optional[str]",
                    "Type"
                ]
            }
        },
        "Between.add_generate_args": {
            "name": "add_generate_args",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "Between.generate_description": {
            "name": "generate_description",
            "location": 146,
            "return": [
                "Optional[str]",
                "dict",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "int",
                    "str",
                    "List[str]",
                    "Dict"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "RelativeDirectionTemplate.add_generate_args": {
            "name": "add_generate_args",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "str",
                    "bool"
                ],
                "templ_index": [
                    "int",
                    "str",
                    "bool",
                    "Type"
                ]
            }
        },
        "RelativeDirectionTemplate.generate_description": {
            "name": "generate_description",
            "location": 169,
            "return": [
                "Optional[str]",
                "dict",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "int",
                    "str",
                    "List[str]",
                    "Dict"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "ClimbDirectionTemplate.add_generate_args": {
            "name": "add_generate_args",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "ClimbDirectionTemplate.generate_description": {
            "name": "generate_description",
            "location": 181,
            "return": [
                "Optional[str]",
                "dict",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "int",
                    "str",
                    "List[str]",
                    "Dict"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "CoordinatesTemplate.add_generate_args": {
            "name": "add_generate_args",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "CoordinatesTemplate.generate_description": {
            "name": "generate_description",
            "location": 192,
            "return": [
                "str",
                "bool",
                "Union[int,float,complex]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "int",
                    "str",
                    "List[str]",
                    "Dict"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "LocationMobTemplate.add_generate_args": {
            "name": "add_generate_args",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Dict",
                    "List",
                    "str"
                ],
                "templ_index": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "LocationMobTemplate.generate_description": {
            "name": "generate_description",
            "location": 217,
            "return": [
                "Optional[str]",
                "dict",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "int",
                    "str",
                    "List[str]",
                    "Dict"
                ],
                "index": [
                    "int",
                    "str",
                    "bytes"
                ],
                "templ_index": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "Dict"
                ]
            }
        },
        "HereTemplate.add_generate_args": {
            "name": "add_generate_args",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "HereTemplate.generate_description": {
            "name": "generate_description",
            "location": 235,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "HereTemplateCoref.add_generate_args": {
            "name": "add_generate_args",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "HereTemplateCoref.generate_description": {
            "name": "generate_description",
            "location": 248,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "ThereTemplate.add_generate_args": {
            "name": "add_generate_args",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "ThereTemplate.generate_description": {
            "name": "generate_description",
            "location": 259,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "ThereTemplateCoref.add_generate_args": {
            "name": "add_generate_args",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "ThereTemplateCoref.generate_description": {
            "name": "generate_description",
            "location": 271,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "YouTemplate.add_generate_args": {
            "name": "add_generate_args",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "YouTemplate.generate_description": {
            "name": "generate_description",
            "location": 281,
            "return": [
                "Text",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "int",
                    "Dict",
                    "str"
                ]
            }
        },
        "ThisTemplate.add_generate_args": {
            "name": "add_generate_args",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "ThisTemplate.generate_description": {
            "name": "generate_description",
            "location": 296,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "StepsTemplate.add_generate_args": {
            "name": "add_generate_args",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "List[str]",
                    "Type",
                    "Set"
                ],
                "templ_index": [
                    "Mapping[str,Any]",
                    "int"
                ]
            }
        },
        "StepsTemplate.generate_description": {
            "name": "generate_description",
            "location": 312,
            "return": [
                "Optional[str]",
                "dict",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "int",
                    "str",
                    "List[str]",
                    "Dict"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "At.generate_description": {
            "name": "generate_description",
            "location": 322,
            "return": [
                "Text",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "ALittle.generate_description": {
            "name": "generate_description",
            "location": 327,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/generation_dialogues/template_objects/mob.py": {
        "set_mob_location": {
            "name": "set_mob_location",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "template_obj": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "location": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "MobThis.add_generate_args": {
            "name": "add_generate_args",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "MobThis.generate_description": {
            "name": "generate_description",
            "location": 28,
            "return": [
                "Text",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "MobThat.add_generate_args": {
            "name": "add_generate_args",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "MobThat.generate_description": {
            "name": "generate_description",
            "location": 39,
            "return": [
                "Text",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "MobLocation.add_generate_args": {
            "name": "add_generate_args",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "MobLocation.generate_description": {
            "name": "generate_description",
            "location": 49,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "int",
                    "str",
                    "List[str]",
                    "Dict"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "MobName.add_generate_args": {
            "name": "add_generate_args",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "MobName.generate_description": {
            "name": "generate_description",
            "location": 61,
            "return": [
                "str",
                "bool",
                "Dict[str,bool]"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "int",
                    "str",
                    "List[str]",
                    "Dict"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "int",
                    "Dict",
                    "str"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/generation_dialogues/template_objects/repeat_and_condition.py": {
        "assign_repeat_key": {
            "name": "assign_repeat_key",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "template_obj": [
                    "str",
                    "Dict[str,str]"
                ],
                "repeat_val": [
                    "Container",
                    "Type",
                    "bool"
                ],
                "templ_index": [
                    "int",
                    "str",
                    "Union[bytes,str]"
                ]
            }
        },
        "RepeatAllLocation.add_generate_args": {
            "name": "add_generate_args",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "RepeatCountLocation.add_generate_args": {
            "name": "add_generate_args",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "RepeatCount.add_generate_args": {
            "name": "add_generate_args",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "Mapping[str,Any]",
                    "int"
                ]
            }
        },
        "RepeatCount.generate_description": {
            "name": "generate_description",
            "location": 88,
            "return": [
                "None",
                "str",
                "int",
                "Mapping"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "int",
                    "str",
                    "List[str]",
                    "Dict"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "int",
                    "Dict",
                    "str"
                ]
            }
        },
        "Around.add_generate_args": {
            "name": "add_generate_args",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "Around.generate_description": {
            "name": "generate_description",
            "location": 106,
            "return": [
                "Text",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "Surround.add_generate_args": {
            "name": "add_generate_args",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "Surround.generate_description": {
            "name": "generate_description",
            "location": 117,
            "return": [
                "Text",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "RepeatAll.add_generate_args": {
            "name": "add_generate_args",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "Mapping[str,Any]",
                    "int"
                ]
            }
        },
        "RepeatAll.generate_description": {
            "name": "generate_description",
            "location": 148,
            "return": [
                "None",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "int",
                    "str",
                    "List[str]",
                    "Dict"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "int",
                    "Dict",
                    "str"
                ]
            }
        },
        "ConditionTypeNever.add_generate_args": {
            "name": "add_generate_args",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "ConditionTypeAdjacentBlockType.add_generate_args": {
            "name": "add_generate_args",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "ConditionTypeAdjacentBlockType.generate_description": {
            "name": "generate_description",
            "location": 177,
            "return": [
                "int",
                "List[str]",
                "str",
                "bool",
                "Type",
                "Dict[str,dict[str,Any]]",
                "Tuple[Union[str,str,str,str]]",
                "Dict[str,Union[None,Any,Any]]"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "int",
                    "str",
                    "List[str]",
                    "Dict"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "int",
                    "Dict",
                    "str"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/generation_dialogues/template_objects/schematics.py": {
        "UsingBlockType.add_generate_args": {
            "name": "add_generate_args",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "Mapping[str,Any]",
                    "int"
                ]
            }
        },
        "UsingBlockType.generate_description": {
            "name": "generate_description",
            "location": 32,
            "return": [
                "Type",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "int",
                    "str",
                    "List[str]",
                    "Dict"
                ],
                "index": [
                    "int",
                    "str",
                    "Dict[str,Any]",
                    "Tuple[str]"
                ],
                "templ_index": [
                    "int",
                    "Dict",
                    "str"
                ]
            }
        },
        "AndBuild.add_generate_args": {
            "name": "add_generate_args",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "DescribingWord.generate_description": {
            "name": "generate_description",
            "location": 53,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "int",
                    "str",
                    "List[str]",
                    "Dict"
                ],
                "index": [
                    "int",
                    "str",
                    "Dict[str,Any]",
                    "Tuple[str]"
                ],
                "templ_index": [
                    "int",
                    "Dict",
                    "str"
                ]
            }
        },
        "NumBlocks.add_generate_args": {
            "name": "add_generate_args",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Optional[int]",
                    "Dict[str,Any]"
                ],
                "templ_index": [
                    "int",
                    "Dict",
                    "bool"
                ]
            }
        },
        "NumBlocks.generate_description": {
            "name": "generate_description",
            "location": 101,
            "return": [
                "str",
                "Text",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "int",
                    "Dict",
                    "List[str]",
                    "Dict[str,Any]"
                ],
                "templ_index": [
                    "int",
                    "Dict",
                    "str"
                ]
            }
        },
        "SchematicsDimensions.add_generate_args": {
            "name": "add_generate_args",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "SchematicsDimensions.generate_description": {
            "name": "generate_description",
            "location": 117,
            "return": [
                "str",
                "int",
                "Text",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "int",
                    "str",
                    "List[str]",
                    "Dict"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "int",
                    "Dict",
                    "str"
                ]
            }
        },
        "WithAttributes.add_generate_args": {
            "name": "add_generate_args",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "WithAttributes.generate_description": {
            "name": "generate_description",
            "location": 160,
            "return": [
                "Text",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int",
                    "List[str]",
                    "Dict"
                ],
                "index": [
                    "str"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "SchematicSize.add_generate_args": {
            "name": "add_generate_args",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "SchematicSize.generate_description": {
            "name": "generate_description",
            "location": 176,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int",
                    "List[str]",
                    "Dict"
                ],
                "index": [
                    "str"
                ],
                "templ_index": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "Optional[str]",
                    "Type"
                ]
            }
        },
        "SchematicColour.add_generate_args": {
            "name": "add_generate_args",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "SchematicColour.generate_description": {
            "name": "generate_description",
            "location": 196,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int",
                    "List[str]",
                    "Dict"
                ],
                "index": [
                    "str"
                ],
                "templ_index": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "Optional[str]",
                    "Type"
                ]
            }
        },
        "BuildShape.add_generate_args": {
            "name": "add_generate_args",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "BuildShape.generate_description": {
            "name": "generate_description",
            "location": 218,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "int",
                    "str",
                    "List[str]",
                    "Dict"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "Use.add_generate_args": {
            "name": "add_generate_args",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "Use.generate_description": {
            "name": "generate_description",
            "location": 229,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/generation_dialogues/template_objects/special_shape_commands.py": {
        "Wall.add_generate_args": {
            "name": "add_generate_args",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "Wall.generate_description": {
            "name": "generate_description",
            "location": 27,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "int",
                    "str",
                    "List[str]",
                    "Dict"
                ],
                "index": [
                    "int",
                    "str",
                    "Dict[str,Any]",
                    "Tuple[str]"
                ],
                "templ_index": [
                    "int",
                    "Dict",
                    "str"
                ]
            }
        },
        "Stack.add_generate_args": {
            "name": "add_generate_args",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "Stack.generate_description": {
            "name": "generate_description",
            "location": 46,
            "return": [
                "Iterable[str]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "Place.add_generate_args": {
            "name": "add_generate_args",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "Place.generate_description": {
            "name": "generate_description",
            "location": 62,
            "return": [
                "Iterable[str]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/generation_dialogues/template_objects/string_output.py": {
        "MadeOutOf.generate_description": {
            "name": "generate_description",
            "location": 22,
            "return": [
                "Text",
                "bool",
                "int",
                "T",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str"
                ],
                "index": [
                    "str"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "OnGround.generate_description": {
            "name": "generate_description",
            "location": 30,
            "return": [
                "Text",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "All.generate_description": {
            "name": "generate_description",
            "location": 35,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "Every.generate_description": {
            "name": "generate_description",
            "location": 41,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "The.generate_description": {
            "name": "generate_description",
            "location": 47,
            "return": [
                "Text",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "To.generate_description": {
            "name": "generate_description",
            "location": 52,
            "return": [
                "Text",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "LocationWord.generate_description": {
            "name": "generate_description",
            "location": 57,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "Where.generate_description": {
            "name": "generate_description",
            "location": 63,
            "return": [
                "Text",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "Is.generate_description": {
            "name": "generate_description",
            "location": 68,
            "return": [
                "Text",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "int",
                    "bool",
                    "Dict[str,List[str]]",
                    "Dict[str,Any]",
                    "List",
                    "Optional[str]",
                    "Dict[str,Dict[str,Any]]",
                    "str"
                ],
                "templ_index": [
                    "int",
                    "Dict",
                    "str"
                ]
            }
        },
        "SurroundWith.generate_description": {
            "name": "generate_description",
            "location": 79,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "With.generate_description": {
            "name": "generate_description",
            "location": 84,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "Blocks.generate_description": {
            "name": "generate_description",
            "location": 90,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "Squares.generate_description": {
            "name": "generate_description",
            "location": 96,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "Wide.generate_description": {
            "name": "generate_description",
            "location": 102,
            "return": [
                "Text",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "Long.generate_description": {
            "name": "generate_description",
            "location": 108,
            "return": [
                "Text",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "High.generate_description": {
            "name": "generate_description",
            "location": 114,
            "return": [
                "Text",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "Deep.generate_description": {
            "name": "generate_description",
            "location": 120,
            "return": [
                "Text",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "InARow.generate_description": {
            "name": "generate_description",
            "location": 126,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "And.generate_description": {
            "name": "generate_description",
            "location": 132,
            "return": [
                "Text",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "Under.generate_description": {
            "name": "generate_description",
            "location": 138,
            "return": [
                "Text",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "Times.generate_description": {
            "name": "generate_description",
            "location": 143,
            "return": [
                "Text",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "Everything.generate_description": {
            "name": "generate_description",
            "location": 148,
            "return": [
                "Text",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "DownTo.generate_description": {
            "name": "generate_description",
            "location": 153,
            "return": [
                "Text",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "Find.generate_description": {
            "name": "generate_description",
            "location": 158,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "Up.generate_description": {
            "name": "generate_description",
            "location": 164,
            "return": [
                "Text",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "ForMe.generate_description": {
            "name": "generate_description",
            "location": 169,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "OfDimensionsPhrase.generate_description": {
            "name": "generate_description",
            "location": 175,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "Optional[str]",
                    "Type"
                ]
            }
        },
        "Please.generate_description": {
            "name": "generate_description",
            "location": 186,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "One.generate_description": {
            "name": "generate_description",
            "location": 192,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "Dict"
                ]
            }
        },
        "Thing.generate_description": {
            "name": "generate_description",
            "location": 204,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "Using.generate_description": {
            "name": "generate_description",
            "location": 210,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "Dont.generate_description": {
            "name": "generate_description",
            "location": 216,
            "return": [
                "Text",
                "Optional[int]",
                "int",
                "Union[str,int]",
                "float",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/generation_dialogues/template_objects/tag.py": {
        "TagDesc.add_generate_args": {
            "name": "add_generate_args",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "TagDesc.generate_description": {
            "name": "generate_description",
            "location": 32,
            "return": [
                "str",
                "Set[str]",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "TagName.add_generate_args": {
            "name": "add_generate_args",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ]
            }
        },
        "TagName.generate_description": {
            "name": "generate_description",
            "location": 50,
            "return": [
                "str",
                "bool",
                "OrderedDict",
                "Optional[Union[Any, str]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/generation_dialogues/template_objects/template_object.py": {
        "get_template_names": {
            "name": "get_template_names",
            "location": 98,
            "return": [
                "List",
                "Dict[str,Any]",
                "Dict[str,Union[str,Any]]",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "obj": [
                    "Dict[str,Any]"
                ],
                "templ_index": [
                    "Dict[str,Any]",
                    "int"
                ]
            }
        },
        "TemplateObject.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[int]",
                    "int",
                    "Dict",
                    "List[str]"
                ],
                "template_attr": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "TemplateObject.generate_description": {
            "name": "generate_description",
            "location": 94,
            "return": [
                "None",
                "Sequence[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/generation_dialogues/template_objects/undo_commands.py": {
        "ActionBuild.add_generate_args": {
            "name": "add_generate_args",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "Mapping[str,Any]",
                    "int"
                ]
            }
        },
        "ActionBuild.generate_description": {
            "name": "generate_description",
            "location": 45,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "ActionDestroy.add_generate_args": {
            "name": "add_generate_args",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "Mapping[str,Any]",
                    "int"
                ]
            }
        },
        "ActionDestroy.generate_description": {
            "name": "generate_description",
            "location": 66,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "ActionFill.add_generate_args": {
            "name": "add_generate_args",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "Mapping[str,Any]",
                    "int"
                ]
            }
        },
        "ActionFill.generate_description": {
            "name": "generate_description",
            "location": 93,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "ActionTag.add_generate_args": {
            "name": "add_generate_args",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "Mapping[str,Any]",
                    "int"
                ]
            }
        },
        "ActionTag.generate_description": {
            "name": "generate_description",
            "location": 128,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "ActionDig.add_generate_args": {
            "name": "add_generate_args",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "Mapping[str,Any]",
                    "int"
                ]
            }
        },
        "ActionDig.generate_description": {
            "name": "generate_description",
            "location": 148,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        },
        "ActionMove.add_generate_args": {
            "name": "add_generate_args",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Iterator[str]",
                    "List[int]"
                ],
                "templ_index": [
                    "Mapping[str,Any]",
                    "int"
                ]
            }
        },
        "ActionMove.generate_description": {
            "name": "generate_description",
            "location": 166,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_index": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ],
                "templ_index": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/generation_dialogues/template_objects/__init__.py": {},
    "craftassist-master/python/base_agent/ttad/ttad_model/make_action_grammar.py": {},
    "craftassist-master/python/base_agent/ttad/ttad_model/make_dataset.py": {
        "tokenize": {
            "name": "tokenize",
            "location": 13,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "st": [
                    "Callable",
                    "List[int]",
                    "str",
                    "Set[str]",
                    "Mapping[Any,Any]",
                    "Mapping"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/ttad_model/train_model.py": {
        "main": {
            "name": "main",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "craftassist-master/python/base_agent/ttad/ttad_model/ttad_model_wrapper.py": {
        "ActionDictBuilder.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_path": [
                    "Dict[str, str]",
                    "bool",
                    "str",
                    "list",
                    "Sequence[Sequence[Any]]"
                ],
                "embeddings_path": [
                    "Dict[str, str]",
                    "bool",
                    "str",
                    "list",
                    "Sequence[Sequence[Any]]"
                ],
                "action_tree_path": [
                    "Dict[str, str]",
                    "bool",
                    "str",
                    "list",
                    "Sequence[Sequence[Any]]"
                ],
                "cuda": [
                    "bool",
                    "Dict[str,str]",
                    "str",
                    "List",
                    "Sequence[Sequence[Any]]"
                ]
            }
        },
        "ActionDictBuilder.parse": {
            "name": "parse",
            "location": 33,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "chat_list": [
                    "Type",
                    "Callable",
                    "Type[BaseException]"
                ]
            }
        },
        "ActionDictBuilder._remove_not_implemented": {
            "name": "_remove_not_implemented",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "Callable",
                    "str",
                    "Type[object]"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/ttad_model/__init__.py": {},
    "craftassist-master/python/base_agent/ttad/ttad_model/emnlp_model/action_tree.py": {
        "is_span": {
            "name": "is_span",
            "location": 19,
            "return": [
                "bool",
                "Set[str]",
                "List",
                "str",
                "Dict[str,List[str]]",
                "object"
            ],
            "arguments": {
                "val": []
            }
        },
        "is_span_dialogue": {
            "name": "is_span_dialogue",
            "location": 30,
            "return": [
                "bool",
                "Set[str]",
                "List",
                "str",
                "Dict[str,List[str]]",
                "object"
            ],
            "arguments": {
                "val": []
            }
        },
        "is_span_list": {
            "name": "is_span_list",
            "location": 45,
            "return": [
                "bool",
                "str",
                "Match"
            ],
            "arguments": {
                "val": [
                    "Sequence[int]"
                ]
            }
        },
        "is_cat": {
            "name": "is_cat",
            "location": 58,
            "return": [
                "bool",
                "str",
                "Type"
            ],
            "arguments": {
                "val": [
                    "str",
                    "Dict"
                ]
            }
        },
        "is_cat_list": {
            "name": "is_cat_list",
            "location": 70,
            "return": [
                "bool",
                "str",
                "Match"
            ],
            "arguments": {
                "val": [
                    "Sequence[int]"
                ]
            }
        },
        "make_leaf": {
            "name": "make_leaf",
            "location": 75,
            "return": [
                "bool",
                "int",
                "SpanSingleLeaf",
                "SpanSetLeaf",
                "CategoricalSingleLeaf",
                "CategoricalSetLeaf"
            ],
            "arguments": {
                "node_id": [
                    "str",
                    "Callable",
                    "Union[int,str]",
                    "int"
                ],
                "name": [
                    "str",
                    "Callable",
                    "Union[int,str]",
                    "int"
                ],
                "value": [
                    "str",
                    "int",
                    "dict"
                ],
                "node_type": [
                    "Text",
                    "str",
                    "Optional[List[int]]",
                    "Optional[Tuple[str]]",
                    "Optional[str]",
                    "List[str]",
                    "List[Tuple]"
                ]
            }
        },
        "is_sub_tree": {
            "name": "is_sub_tree",
            "location": 126,
            "return": [
                "bool",
                "Type[Any]",
                "int",
                "List[Dict[str,Any]]"
            ],
            "arguments": {
                "val": [
                    "Tuple[bytes]",
                    "int",
                    "str",
                    "Union[int,float]",
                    "float"
                ]
            }
        },
        "SpanSingleLeaf.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_id": [
                    "str",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]"
                ]
            }
        },
        "SpanSetLeaf.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_id": [
                    "str",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]"
                ]
            }
        },
        "CategoricalSingleLeaf.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_id": [
                    "str",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]"
                ],
                "choices": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Callable",
                    "bool",
                    "Optional[Any]",
                    "Any",
                    "Optional[bytes]",
                    "bytes"
                ]
            }
        },
        "CategoricalSetLeaf.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_id": [
                    "str",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]"
                ],
                "choices": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Callable",
                    "bool",
                    "Optional[Any]",
                    "Any",
                    "Optional[bytes]",
                    "bytes"
                ]
            }
        },
        "InternalNode.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_id": [
                    "str",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]"
                ]
            }
        },
        "InternalNode.add_int_node": {
            "name": "add_int_node",
            "location": 104,
            "return": [
                "int",
                "List",
                "Union[Sequence,SweepFixedValues]",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "InternalNode.add_leaf_node": {
            "name": "add_leaf_node",
            "location": 111,
            "return": [
                "int",
                "Union[Sequence,SweepFixedValues]",
                "Dict[str,Type]",
                "str",
                "List",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "Union[int,float]"
                ],
                "value": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "ActionTree.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActionTree._add_subtree_dict": {
            "name": "_add_subtree_dict",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict",
                    "list",
                    "Dict[str, Any]"
                ],
                "sub_tree": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "ActionTree.build_from_list": {
            "name": "build_from_list",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tree_list": [
                    "str",
                    "Iterable[bytes]",
                    "Dict"
                ]
            }
        },
        "ActionTree._sub_to_dict": {
            "name": "_sub_to_dict",
            "location": 151,
            "return": [
                "OrderedDict",
                "str",
                "int",
                "List[Dict[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Union[int,slice]",
                    "int",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "ActionTree.to_dict": {
            "name": "to_dict",
            "location": 163,
            "return": [
                "List[str]",
                "Optional[str]",
                "int",
                "bytes",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActionTree._sub_from_dict": {
            "name": "_sub_from_dict",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict"
                ],
                "sub_tree": [
                    "Dict",
                    "Dict[str,Any]",
                    "T",
                    "Callable",
                    "MutableMapping[str,str]"
                ]
            }
        },
        "ActionTree.from_dict": {
            "name": "from_dict",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a_tree": [
                    "Dict[str,Any]",
                    "Dict[str,object]"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/ttad_model/emnlp_model/data.py": {
        "tree_to_action_type": {
            "name": "tree_to_action_type",
            "location": 15,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "tr": [
                    "dict"
                ]
            }
        },
        "tree_to_nodes": {
            "name": "tree_to_nodes",
            "location": 23,
            "return": [
                "str",
                "Callable",
                "torch.autograd.Variable",
                "Dict"
            ],
            "arguments": {
                "tr": [
                    "str",
                    "List",
                    "AbstractSet[str]",
                    "deque"
                ],
                "all_nodes": [
                    "bool",
                    "str",
                    "AbstractSet[str]",
                    "deque",
                    "List"
                ]
            }
        },
        "tree_to_nodes_rec": {
            "name": "tree_to_nodes_rec",
            "location": 32,
            "return": [
                "List",
                "bool",
                "Union[int,float,complex]"
            ],
            "arguments": {
                "tr": [
                    "Dict[str,dict[str,str]]",
                    "Dict[str,bool]",
                    "str",
                    "Dict",
                    "Mapping[str,Any]",
                    "Dict[str,Dict[str,str]]",
                    "Dict[str,int]",
                    "Dict[str,Any]"
                ],
                "all_nodes": [
                    "str"
                ],
                "ancestor_path": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "join_chats": {
            "name": "join_chats",
            "location": 178,
            "return": [
                "List[tuple[str]]",
                "List[int]",
                "numpy.ndarray",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "desc_action_list": [
                    "List",
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray",
                    "int"
                ]
            }
        },
        "map_spans": {
            "name": "map_spans",
            "location": 202,
            "return": [
                "str"
            ],
            "arguments": {
                "tree": [
                    "Iterable[bytes]",
                    "Callable",
                    "Sequence[str]",
                    "dict"
                ],
                "index_map": [
                    "Optional[Sequence]",
                    "int",
                    "Hashable"
                ]
            }
        },
        "make_batch": {
            "name": "make_batch",
            "location": 217,
            "return": [
                "int",
                "Tuple[int, int]",
                "str"
            ],
            "arguments": {
                "desc_action_list": [
                    "float",
                    "List",
                    "Tuple[int,int]",
                    "Tuple",
                    "Tuple[Union[int,int]]",
                    "bool"
                ],
                "w2i": [],
                "cuda": [
                    "bool",
                    "str",
                    "int",
                    "List[int]"
                ],
                "sentence_noise": [
                    "float",
                    "Optional[List[str]]",
                    "Type",
                    "Mapping[Any,Any]",
                    "str",
                    "Union[Dict,List]"
                ]
            }
        },
        "DataLoader.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "DataLoader.next_batch": {
            "name": "next_batch",
            "location": 126,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "str",
                    "bool",
                    "int",
                    "torch.Tensor"
                ],
                "mode": [
                    "int",
                    "Optional[int]",
                    "str",
                    "Iterable[str]",
                    "None"
                ],
                "src": [
                    "str",
                    "Optional[List[Any]]",
                    "List[Any]",
                    "None"
                ],
                "resample": [
                    "bool",
                    "str",
                    "int",
                    "torch.Tensor"
                ]
            }
        },
        "DataLoader.update_buffer": {
            "name": "update_buffer",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mistakes": [
                    "str",
                    "float",
                    "int",
                    "bool"
                ]
            }
        },
        "DataLoader.reset_valid": {
            "name": "reset_valid",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/ttad_model/emnlp_model/model_utils.py": {
        "clones": {
            "name": "clones",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {
                "module": [
                    "int",
                    "List[int]",
                    "Sequence[T]",
                    "Sized"
                ],
                "n": [
                    "int",
                    "List[int]",
                    "Sequence[T]",
                    "Sized"
                ]
            }
        },
        "xavier_init": {
            "name": "xavier_init",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "module": [
                    "int",
                    "bool"
                ],
                "mul": [
                    "float",
                    "bool",
                    "str",
                    "Optional[Dict]"
                ]
            }
        },
        "attention": {
            "name": "attention",
            "location": 26,
            "return": [
                "Tuple",
                "int",
                "Optional[int]",
                "List[int]",
                "str"
            ],
            "arguments": {
                "query": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "T",
                    "Union[Dict, None]"
                ],
                "key": [
                    "dict",
                    "str",
                    "int",
                    "Type['Declared']"
                ],
                "value": [
                    "bool",
                    "int"
                ],
                "mask": [
                    "None",
                    "Optional[Archive]",
                    "bytes"
                ],
                "dropout": [
                    "Union[str,dict]",
                    "None",
                    "int",
                    "torch.LongTensor",
                    "str",
                    "Dict"
                ]
            }
        },
        "log_sum_exp": {
            "name": "log_sum_exp",
            "location": 207,
            "return": [
                "float",
                "Dict[str, bool]",
                "Dict[str, Any]",
                "dict",
                "bool"
            ],
            "arguments": {
                "bx": [
                    "int",
                    "float",
                    "pygame.math.Vector2"
                ]
            }
        },
        "MultiHeadedAttention.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "h": [
                    "int",
                    "Type[T]",
                    "torch.nn.Module",
                    "str"
                ],
                "d_model": [
                    "int",
                    "Union[int,str]",
                    "str",
                    "bool",
                    "torch.nn.Module"
                ],
                "dropout": [
                    "float",
                    "int",
                    "Optional[List[str]]"
                ]
            }
        },
        "MultiHeadedAttention.forward": {
            "name": "forward",
            "location": 49,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "list",
                    "str"
                ],
                "key": [
                    "Hashable",
                    "Callable",
                    "int",
                    "Sequence[Any]"
                ],
                "value": [
                    "Hashable",
                    "Callable",
                    "int",
                    "Sequence[Any]"
                ],
                "mask": [
                    "Optional[object]",
                    "Dict",
                    "None",
                    "Optional"
                ]
            }
        },
        "MultiHeadedAttention.initialize": {
            "name": "initialize",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mul": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "NodeSentenceRep.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "Dict",
                    "Dict[str,Any]"
                ],
                "sent_attn": [
                    "Dict"
                ],
                "tree_attn": [
                    "Dict"
                ],
                "rec_cell": [
                    "Dict"
                ]
            }
        },
        "NodeSentenceRep.initialize": {
            "name": "initialize",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mul": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "NodeSentenceRep.forward": {
            "name": "forward",
            "location": 92,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "node_vec": [
                    "dict",
                    "Callable[..., T]"
                ],
                "sentence_rep": [
                    "Tuple[str,str]",
                    "Callable",
                    "Tuple[Union[str,str]]",
                    "Dict",
                    "List[str]",
                    "List[List[str]]",
                    "List[list[str]]"
                ],
                "tree_context": [
                    "Dict",
                    "Tuple[str,str]",
                    "List[str]",
                    "Callable",
                    "List[tuple[Union[Any,Any,int]]]",
                    "List[Tuple[Any,Any,int]]"
                ]
            }
        },
        "NodeSentenceRep._apply_tree_attn": {
            "name": "_apply_tree_attn",
            "location": 105,
            "return": [
                "float",
                "int",
                "str",
                "type"
            ],
            "arguments": {
                "self": [],
                "node_vec": [
                    "int",
                    "float"
                ],
                "context_rep": [],
                "context_mask": []
            }
        },
        "NodeSentenceRep._apply_sen_attn": {
            "name": "_apply_sen_attn",
            "location": 115,
            "return": [
                "int",
                "str",
                "Iterable[str]",
                "Union[int,slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "node_vec": [
                    "int"
                ],
                "sent_rep": [
                    "bytes"
                ],
                "sent_mask": [
                    "bytes"
                ]
            }
        },
        "NodeSentenceRep._apply_recurrence": {
            "name": "_apply_recurrence",
            "location": 121,
            "return": [
                "float",
                "int",
                "Iterable[str]",
                "Union[int,slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "node_rep": [
                    "bytes",
                    "int",
                    "bool"
                ],
                "prev_h": [
                    "int"
                ],
                "parent_h": [
                    "Optional[int]",
                    "int",
                    "Optional[bool]",
                    "None"
                ],
                "on_mask": [
                    "List[float]",
                    "bool",
                    "Optional[List[float]]",
                    "Optional[bool]"
                ]
            }
        },
        "PredictPresence.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dim": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "PredictPresence.initialize": {
            "name": "initialize",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mul": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "PredictPresence.forward": {
            "name": "forward",
            "location": 143,
            "return": [
                "int",
                "str",
                "Callable",
                "Type",
                "List[int]",
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "PredictCategorySingle.__init__": {
            "name": "__init__",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dim": [
                    "int",
                    "str",
                    "bool"
                ],
                "n_vals": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "PredictCategorySingle.initialize": {
            "name": "initialize",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mul": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "PredictCategorySingle.forward": {
            "name": "forward",
            "location": 157,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "PredictCategorySet.__init__": {
            "name": "__init__",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dim": [
                    "int",
                    "str",
                    "bool"
                ],
                "n_vals": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "PredictCategorySet.initialize": {
            "name": "initialize",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mul": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "PredictCategorySet.forward": {
            "name": "forward",
            "location": 172,
            "return": [
                "int",
                "Callable",
                "Tuple[Union[Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal]]",
                "str",
                "Type"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "PredictSpanSingle.__init__": {
            "name": "__init__",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dim": [
                    "Optional[list]",
                    "List",
                    "Tuple[int]",
                    "List[List[int]]",
                    "None",
                    "Callable",
                    "List[str]",
                    "str",
                    "List[list[int]]",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "PredictSpanSingle.initialize": {
            "name": "initialize",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mul": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "PredictSpanSingle.forward": {
            "name": "forward",
            "location": 188,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int",
                    "bool"
                ],
                "sentence_rep": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "PredictSpanSet.__init__": {
            "name": "__init__",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dim": [
                    "str",
                    "bool"
                ]
            }
        },
        "PredictSpanSet.initialize": {
            "name": "initialize",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mul": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "PredictSpanSet.forward": {
            "name": "forward",
            "location": 224,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "torch.Tensor",
                    "Sequence[int]",
                    "Sequence[float]"
                ],
                "sentence_rep": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/ttad_model/emnlp_model/my_optim.py": {
        "to_cpu": {
            "name": "to_cpu",
            "location": 139,
            "return": [
                "List",
                "int",
                "str",
                "Sequence[Any]",
                "Sequence[object]",
                "Tuple"
            ],
            "arguments": {
                "obj": [
                    "Tuple",
                    "List",
                    "int"
                ]
            }
        },
        "run_epoch": {
            "name": "run_epoch",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "data_loader": [
                    "int",
                    "Optional[int]",
                    "float",
                    "None",
                    "bool"
                ],
                "model": [
                    "bool",
                    "Iterable[Entity]",
                    "float",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "loss": [
                    "bool",
                    "float"
                ],
                "w2i": [
                    "bool",
                    "str",
                    "int"
                ],
                "args": [],
                "mode": [
                    "Text",
                    "bool",
                    "List[Type]",
                    "Callable[[Optional,Optional,str],None]",
                    "Optional[Iterable[int]]",
                    "Iterable[int]"
                ],
                "data_type": [
                    "Text",
                    "bool",
                    "int"
                ],
                "optimizer": [
                    "None",
                    "Optional[str]",
                    "Optional[int]",
                    "Sequence[str]",
                    "Optional[torch.Tensor]",
                    "bytes"
                ]
            }
        },
        "predict_tree": {
            "name": "predict_tree",
            "location": 257,
            "return": [
                "Optional[\"TreeNode\"]",
                "Optional[Dict[str, Any]]",
                "str",
                "BaseException"
            ],
            "arguments": {
                "model": [
                    "int",
                    "str",
                    "Dict[str,Any]",
                    "bool"
                ],
                "sentence_list": [
                    "List[str]",
                    "List",
                    "List[Type]",
                    "List[Dict]",
                    "List[dict]"
                ],
                "w2i": [
                    "List[str]",
                    "Optional[int]",
                    "int",
                    "Union[List[str],List[int]]",
                    "None",
                    "bool",
                    "List[int]"
                ],
                "args": []
            }
        },
        "reverse_map_spans": {
            "name": "reverse_map_spans",
            "location": 281,
            "return": [
                "str"
            ],
            "arguments": {
                "tree": [
                    "dict",
                    "Dict[str, Any]",
                    "Iterable[bytes]"
                ],
                "span_map": [
                    "str",
                    "List",
                    "Mapping[str,Any]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "tree_equal": {
            "name": "tree_equal",
            "location": 297,
            "return": [
                "bool"
            ],
            "arguments": {
                "ground_truth": [
                    "Optional[int]",
                    "Optional[Any]"
                ],
                "prediction": [
                    "Optional[int]"
                ],
                "only_internal": [
                    "bool",
                    "int",
                    "NamedTuple"
                ]
            }
        },
        "compute_accuracy": {
            "name": "compute_accuracy",
            "location": 324,
            "return": [
                "float",
                "str",
                "List[int]",
                "Optional[str]",
                "List[str]",
                "Tuple[int,int]",
                "List[Tuple[int,int]]"
            ],
            "arguments": {
                "model": [
                    "str",
                    "Dict[str,Any]",
                    "Sequence[str]",
                    "List[str]",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "examples": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "Sequence[str]",
                    "int",
                    "Optional[str]"
                ],
                "w2i": [
                    "str",
                    "Dict[str,Any]",
                    "Sequence[str]",
                    "List[str]",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "args": [],
                "only_internal": [
                    "bool",
                    "List",
                    "int",
                    "Union[int,float]",
                    "Sequence[Sequence[float]]",
                    "Iterable",
                    "List[str]"
                ]
            }
        },
        "compute_accuracy_per_action_type": {
            "name": "compute_accuracy_per_action_type",
            "location": 341,
            "return": [
                "Dict[,str]",
                "Set[str]",
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "model": [
                    "str",
                    "Type",
                    "Callable",
                    "Dict"
                ],
                "examples": [
                    "str",
                    "Dict",
                    "Type",
                    "Callable"
                ],
                "w2i": [
                    "str",
                    "Type",
                    "Callable",
                    "Dict"
                ],
                "args": [],
                "only_internal": [
                    "bool",
                    "Dict",
                    "Tuple[int,int,int,int,int,int,int]",
                    "Iterable[Iterable[str]]",
                    "Tuple"
                ]
            }
        },
        "compute_stats": {
            "name": "compute_stats",
            "location": 366,
            "return": [
                "Tuple",
                "str",
                "int"
            ],
            "arguments": {
                "ground_truth": [
                    "Dict[str,Any]",
                    "Dict[str,list[str]]",
                    "Dict[str,List[str]]",
                    "Dict[str,dict[str,float]]",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Dict[str,float]]"
                ],
                "prediction": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "Union[str,List[str],None]",
                    "Optional[Dict[str,Any]]",
                    "int"
                ],
                "total_internal": [
                    "str",
                    "Callable"
                ],
                "correct_internal": [
                    "str",
                    "Callable"
                ],
                "total_str": [
                    "str",
                    "Callable"
                ],
                "correct_str": [
                    "str",
                    "Callable"
                ],
                "total_span": [
                    "str",
                    "Callable"
                ],
                "correct_span": [
                    "str",
                    "Callable"
                ]
            }
        },
        "compute_precision_recall": {
            "name": "compute_precision_recall",
            "location": 434,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "model": [
                    "str",
                    "Dict[str,Any]",
                    "Sequence[str]",
                    "List[str]",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "examples": [
                    "str",
                    "Callable",
                    "dict"
                ],
                "w2i": [
                    "str",
                    "Dict[str,Any]",
                    "Sequence[str]",
                    "List[str]",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "args": []
            }
        },
        "LabelSmoothingBCE.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "smoothing": [
                    "float",
                    "int",
                    "bool"
                ]
            }
        },
        "LabelSmoothingBCE.forward": {
            "name": "forward",
            "location": 23,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "int"
                ],
                "target": []
            }
        },
        "LabelSmoothingCE.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "smoothing": [
                    "float",
                    "int",
                    "bool"
                ]
            }
        },
        "LabelSmoothingCE.forward": {
            "name": "forward",
            "location": 34,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float"
                ],
                "target": [
                    "str",
                    "int",
                    "Collection",
                    "torch.Tensor",
                    "Collection[int]"
                ]
            }
        },
        "TreeLoss.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "TreeLoss.forward": {
            "name": "forward",
            "location": 57,
            "return": [
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "self": [],
                "node_list": [
                    "List",
                    "str",
                    "Union[str,Iterable[str]]"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/ttad_model/emnlp_model/prediction_model.py": {
        "make_model": {
            "name": "make_model",
            "location": 408,
            "return": [
                "Tuple[Union[ActionTreePrediction,TreeLoss,complex,float,tuple[Union[str,str]],dict]]",
                "Type",
                "str"
            ],
            "arguments": {
                "args": [],
                "embeddings_path": [
                    "bool",
                    "str",
                    "Dict",
                    "List[str]",
                    "bytes",
                    "Optional[str]",
                    "None"
                ],
                "action_tree_path": [
                    "bool",
                    "str",
                    "float"
                ],
                "use_cuda": [
                    "bool",
                    "str"
                ]
            }
        },
        "load_model": {
            "name": "load_model",
            "location": 444,
            "return": [
                "Tuple",
                "str",
                "Optional[str]",
                "Sequence"
            ],
            "arguments": {
                "model_path": [
                    "str"
                ],
                "embeddings_path": [
                    "bool",
                    "None",
                    "int",
                    "Optional[str]",
                    "str"
                ],
                "action_tree_path": [
                    "bool",
                    "None",
                    "int",
                    "Optional[str]",
                    "str"
                ],
                "use_cuda": [
                    "bool",
                    "str",
                    "List[str]",
                    "Tuple[int,int]",
                    "Optional[Callable]",
                    "Tuple[str,int]"
                ],
                "epoch": [
                    "int",
                    "bool",
                    "str",
                    "Dict[str,str]",
                    "List[Dict[str,Any]]",
                    "Dict[str,bool]",
                    "Dict",
                    "Optional[str]"
                ]
            }
        },
        "NodePrediction.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_sen_rep": [
                    "str"
                ],
                "node": [
                    "int",
                    "Callable",
                    "Set[Type]",
                    "bool",
                    "None",
                    "Optional[Callable]"
                ],
                "args": []
            }
        },
        "NodePrediction.forward": {
            "name": "forward",
            "location": 63,
            "return": [
                "Dict[Text,Union[None,int,float,Type,tuple[Union[str,str,str,str,str,str,str]],str]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "sentence_rep": [
                    "Dict",
                    "str"
                ],
                "tree_context": [
                    "Dict[str,Any]",
                    "Dict",
                    "Callable",
                    "Union[float,int]",
                    "float",
                    "int"
                ],
                "recursion": [
                    "bool",
                    "List"
                ],
                "active": [
                    "Tuple[List[Any], Tuple[str, str], Optional[Any]]",
                    "Dict[str, Any]",
                    "bool"
                ],
                "labels": [
                    "int",
                    "str",
                    "Optional[Scope]",
                    "None"
                ]
            }
        },
        "NodePrediction.to": {
            "name": "to",
            "location": 117,
            "return": [
                "NodePrediction",
                "float",
                "Dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodePrediction.initialize": {
            "name": "initialize",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mul": [
                    "str",
                    "float"
                ]
            }
        },
        "ActionTreePrediction.__init__": {
            "name": "__init__",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sentence_embed": [
                    "bool",
                    "float",
                    "Callable[[str],Any]",
                    "Callable[str,Any]"
                ],
                "action_tree_path": [
                    "dict",
                    "Union[None, Dict]"
                ],
                "args": []
            }
        },
        "ActionTreePrediction.to": {
            "name": "to",
            "location": 164,
            "return": [
                "ActionTreePrediction",
                "float",
                "Dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActionTreePrediction.initialize": {
            "name": "initialize",
            "location": 172,
            "return": [
                "ActionTreePrediction",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "mul": [
                    "float",
                    "List",
                    "int",
                    "str",
                    "Set[int]"
                ]
            }
        },
        "ActionTreePrediction.device": {
            "name": "device",
            "location": 179,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActionTreePrediction.make_modules": {
            "name": "make_modules",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActionTreePrediction._make_modules_recursion": {
            "name": "_make_modules_recursion",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int"
                ]
            }
        },
        "ActionTreePrediction._make_tree_context": {
            "name": "_make_tree_context",
            "location": 207,
            "return": [
                "Tuple[Union[float,str,int]]",
                "int",
                "Tuple[Union[float,str,int,None]]",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node_h": [
                    "str",
                    "int",
                    "Optional[str]",
                    "float",
                    "None"
                ],
                "node_path": [
                    "str",
                    "int"
                ]
            }
        },
        "ActionTreePrediction.forward": {
            "name": "forward",
            "location": 219,
            "return": [
                "List",
                "int",
                "Iterable[str]",
                "Union[int,slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "sent_ids": [
                    "int",
                    "str",
                    "bool"
                ],
                "sent_mask": [
                    "int",
                    "str"
                ],
                "sent_len": [
                    "int",
                    "str",
                    "bool"
                ],
                "recursion": [
                    "Text",
                    "str",
                    "Iterable[str]",
                    "int"
                ],
                "prediction": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "ActionTreePrediction._forward_recursion": {
            "name": "_forward_recursion",
            "location": 262,
            "return": [
                "str",
                "Tuple[tuple[Union[list[int],int,Any]]]",
                "List[int]",
                "Tuple[Union[list[list[int]],list[int],Sequence[Any],None,bool,tuple[Union[list[int],int,Any]]]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[int]"
                ],
                "sentence_rep": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[int]"
                ],
                "node_h": [
                    "List[List[int]]",
                    "List[int]",
                    "List[list[int]]",
                    "bool",
                    "Optional[Sequence[Any]]",
                    "Sequence[Any]",
                    "None"
                ],
                "node_path": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[int]"
                ],
                "recursion": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[int]"
                ],
                "prediction": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[int]"
                ]
            }
        },
        "ActionTreePrediction.make_labels": {
            "name": "make_labels",
            "location": 306,
            "return": [
                "str",
                "List"
            ],
            "arguments": {
                "self": [],
                "tree_list": [
                    "List[int]",
                    "List[str]",
                    "int",
                    "Sequence[int]"
                ],
                "cuda": [
                    "bool",
                    "Dict[str,str]",
                    "Iterable[str]"
                ]
            }
        },
        "ActionTreePrediction._make_labels_recursion": {
            "name": "_make_labels_recursion",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ],
                "sub_tree_list": [
                    "bool"
                ],
                "active": [
                    "Type",
                    "int",
                    "Optional[Callable]",
                    "Callable",
                    "None"
                ]
            }
        },
        "ActionTreePrediction.predict_tree": {
            "name": "predict_tree",
            "location": 361,
            "return": [
                "list",
                "type",
                "dict",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "sent_ids": [
                    "int",
                    "str"
                ],
                "sent_mask": [
                    "str",
                    "int",
                    "Dict",
                    "Optional[float]",
                    "float",
                    "bool",
                    "None"
                ],
                "sent_len": [
                    "str",
                    "int",
                    "Dict",
                    "Optional[float]",
                    "float",
                    "bool",
                    "None"
                ],
                "recursion": [
                    "str",
                    "int",
                    "Dict",
                    "Optional[float]",
                    "float",
                    "bool",
                    "None"
                ]
            }
        },
        "ActionTreePrediction._predict_tree_recursion": {
            "name": "_predict_tree_recursion",
            "location": 379,
            "return": [
                "Dict[,Text]",
                "List",
                "Dict[,tuple[Union[int,tuple[Union[int,Text]]]]]",
                "Dict[,list]",
                "Type",
                "Dict",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Set[str]",
                    "Dict[str,str]",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/ttad_model/emnlp_model/sentence_encoder.py": {
        "HighwayNetwork.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "in_dim": [
                    "Optional[dict]",
                    "int",
                    "Dict",
                    "List[cirq.Circuit]",
                    "None"
                ],
                "out_dim": [
                    "Optional[dict]",
                    "int",
                    "Dict",
                    "List[cirq.Circuit]",
                    "None"
                ]
            }
        },
        "HighwayNetwork.forward": {
            "name": "forward",
            "location": 23,
            "return": [
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "Sequence[int]"
                ]
            }
        },
        "FastTextSentenceEmbedding.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dim": [
                    "int",
                    "str",
                    "List"
                ],
                "l_dim": [
                    "int",
                    "str",
                    "List"
                ],
                "n_words": [
                    "int",
                    "str",
                    "List"
                ],
                "ft_embeds": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "init_embeds": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "FastTextSentenceEmbedding.forward": {
            "name": "forward",
            "location": 61,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "sent_ids": [
                    "str",
                    "int",
                    "Union[str,List[str]]",
                    "List[str]"
                ],
                "sent_mask": [
                    "int",
                    "None",
                    "str",
                    "List",
                    "bytes",
                    "Optional[float]",
                    "float"
                ],
                "sent_len": [
                    "int",
                    "None",
                    "str",
                    "List",
                    "bytes",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "PositionalEncoding.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dim": [
                    "int",
                    "float",
                    "bool",
                    "None",
                    "Optional[Union[int,float]]",
                    "Optional[int]"
                ],
                "dropout": [
                    "int",
                    "float",
                    "bool"
                ],
                "max_len": [
                    "int",
                    "Optional[int]",
                    "bool",
                    "Optional[Union[int,float]]"
                ]
            }
        },
        "PositionalEncoding.forward": {
            "name": "forward",
            "location": 89,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "torch.Tensor"
                ]
            }
        },
        "SentenceConvEncoder.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word_embed": [
                    "int"
                ],
                "dim": [
                    "int",
                    "float",
                    "torch.Tensor",
                    "Optional[int]"
                ],
                "k": [
                    "int",
                    "float",
                    "torch.Tensor",
                    "Optional[int]"
                ],
                "n_layers": [
                    "int",
                    "float",
                    "None",
                    "torch.Tensor",
                    "Optional[int]"
                ],
                "dropout": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "SentenceConvEncoder.forward": {
            "name": "forward",
            "location": 112,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "sent_ids": [
                    "str",
                    "int"
                ],
                "sent_mask": [
                    "str",
                    "float",
                    "list",
                    "List[Dict[str, float]]",
                    "List[str]"
                ],
                "sent_len": [
                    "int",
                    "str",
                    "List",
                    "bytes",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        },
        "SentenceBiGRUEncoder.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word_embed": [
                    "int",
                    "Sequence"
                ],
                "dim": [
                    "int",
                    "str",
                    "List[int]",
                    "bool",
                    "Dict"
                ],
                "n_layers": [
                    "int",
                    "str",
                    "List[int]",
                    "Dict",
                    "bool"
                ],
                "dropout": [
                    "float",
                    "int",
                    "str",
                    "bool",
                    "Dict"
                ]
            }
        },
        "SentenceBiGRUEncoder.forward": {
            "name": "forward",
            "location": 140,
            "return": [
                "int",
                "Callable",
                "float",
                "str",
                "Dict[str,str]",
                "List",
                "List[str]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "sent_ids": [
                    "str",
                    "int"
                ],
                "sent_mask": [
                    "int",
                    "str",
                    "Set[str]"
                ],
                "sent_len": [
                    "int",
                    "str",
                    "Set[str]"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/ttad_model/emnlp_model/__init__.py": {},
    "craftassist-master/python/base_agent/ttad/ttad_model/processing_scripts/read_data.py": {
        "read_generations": {
            "name": "read_generations",
            "location": 12,
            "return": [
                "List[dict[Text,Union[list,list[str],str,tuple[Union[str,str,str,str,str]],dict]]]",
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "multinedb.models.workspace.Workspace",
                "int"
            ],
            "arguments": {
                "f_name": [
                    "str"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/ttad_model/processing_scripts/read_rephrased.py": {
        "word_tokenize": {
            "name": "word_tokenize",
            "location": 16,
            "return": [
                "List[tuple]",
                "str",
                "Set",
                "List",
                "Dict[str,Any]"
            ],
            "arguments": {
                "st": [
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]",
                    "Iterable[T]"
                ]
            }
        },
        "remove_brackets": {
            "name": "remove_brackets",
            "location": 34,
            "return": [
                "Tuple[Union[str,list[tuple[Union[int,str]]]]]",
                "bool",
                "Tuple[int,int]",
                "Union[List[str],str]",
                "Tuple"
            ],
            "arguments": {
                "br_sen": [
                    "str",
                    "int",
                    "float",
                    "List[str]"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/ttad_transformer_model/gen_cross_valid_chunks.py": {
        "partition_dataset": {
            "name": "partition_dataset",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "k": [
                    "Optional[Any]",
                    "Any",
                    "numpy.random.RandomState",
                    "Dict[str,int]",
                    "None",
                    "bool",
                    "Mapping[str,str]",
                    "Mapping",
                    "Union[str,Tuple[str,...]]",
                    "str",
                    "int",
                    "Tuple[Union[str,...]]"
                ],
                "data_path": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "output_dir": [
                    "str",
                    "List[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "create_train_valid_split": {
            "name": "create_train_valid_split",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "chunk_index": [
                    "str",
                    "bool"
                ],
                "k": [
                    "str",
                    "bool",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "data_dir": [
                    "str"
                ],
                "output_dir": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "craftassist-master/python/base_agent/ttad/ttad_transformer_model/query_model.py": {
        "TTADBertModel.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_dir": [
                    "str",
                    "Optional[str]"
                ],
                "data_dir": [
                    "str"
                ],
                "model_name": [
                    "Text",
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Dict"
                ]
            }
        },
        "TTADBertModel.parse": {
            "name": "parse",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "chat": [
                    "int",
                    "List",
                    "Optional[int]",
                    "float",
                    "None",
                    "Dict[str,Tuple[str,int,int]]",
                    "Dict[str,tuple[Union[str,int,int]]]"
                ],
                "noop_thres": [
                    "float",
                    "bool",
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "int"
                ],
                "beam_size": [
                    "int",
                    "Optional[int]",
                    "List",
                    "float",
                    "Dict[str,Tuple[str,int,int]]"
                ],
                "well_formed_pen": [
                    "float",
                    "int",
                    "Optional[int]",
                    "List",
                    "Dict[str,Tuple[str,int,int]]"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/ttad_transformer_model/recombine_data.py": {
        "create_train_valid_split": {
            "name": "create_train_valid_split",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "chunk_index": [],
                "k": [],
                "data_dir": [],
                "output_dir": []
            }
        },
        "get_train_annotated_commands": {
            "name": "get_train_annotated_commands",
            "location": 50,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "data_dir": [],
                "tool1_path": [],
                "tool2_path": [],
                "node_types": []
            }
        },
        "create_templates_for_node_type": {
            "name": "create_templates_for_node_type",
            "location": 71,
            "return": [
                "tuple[list[tuple[None]]]"
            ],
            "arguments": {
                "chat": [],
                "node_type": [],
                "action_dict": [],
                "filtered_tool1_lines": [],
                "chat_tree_inserts": []
            }
        },
        "gen_chat_tree_templates_and_fragments": {
            "name": "gen_chat_tree_templates_and_fragments",
            "location": 103,
            "return": [
                "tuple[dict[, list[]]]"
            ],
            "arguments": {
                "filtered_tool1_lines": [],
                "filtered_tool2_lines": [],
                "chat_tree_inserts": [],
                "node_types": []
            }
        },
        "process_chat": {
            "name": "process_chat",
            "location": 128,
            "return": [
                "tuple[str]"
            ],
            "arguments": {
                "chat": [],
                "span_idxs": []
            }
        },
        "insert_fragment_to_templated_chat": {
            "name": "insert_fragment_to_templated_chat",
            "location": 147,
            "return": [
                "tuple[typing.Union[str,list[int]]]"
            ],
            "arguments": {
                "templated_chat": [],
                "fragment": []
            }
        },
        "insert_subtree_into_full_tree": {
            "name": "insert_subtree_into_full_tree",
            "location": 164,
            "return": [],
            "arguments": {
                "subtree": [],
                "full_tree": [],
                "original_span_idx": [],
                "idx_shift": [],
                "span_offset": []
            }
        },
        "update_fragment_tree": {
            "name": "update_fragment_tree",
            "location": 200,
            "return": [],
            "arguments": {
                "tree": [],
                "offset": []
            }
        },
        "create_fragment_dataset": {
            "name": "create_fragment_dataset",
            "location": 217,
            "return": [
                "list[tuple[]]"
            ],
            "arguments": {
                "subtrees": [],
                "key": []
            }
        },
        "gen_recombined_data": {
            "name": "gen_recombined_data",
            "location": 230,
            "return": [
                "list[tuple[]]"
            ],
            "arguments": {
                "templates": [],
                "fragments": []
            }
        },
        "write_recombined_data_chunk": {
            "name": "write_recombined_data_chunk",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "data_dir": [],
                "output_dir": [],
                "tool1_path": [],
                "tool2_path": [],
                "dataset_name": [],
                "node_types": [],
                "use_fragments": []
            }
        },
        "main": {
            "name": "main",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "craftassist-master/python/base_agent/ttad/ttad_transformer_model/recombine_data_utils.py": {
        "get_full_tree": {
            "name": "get_full_tree",
            "location": 71,
            "return": [
                "None",
                "bool",
                "str"
            ],
            "arguments": {
                "chat": [
                    "List"
                ],
                "key": [
                    "Tuple",
                    "str",
                    "Type",
                    "List[Optional[Any]]",
                    "Type[str]",
                    "int",
                    "bool",
                    "List"
                ],
                "tool1_lines": [
                    "List[str]",
                    "str",
                    "Tuple[str]",
                    "bool",
                    "Sequence[str]"
                ],
                "chat_tree_inserts": [
                    "Tuple",
                    "str",
                    "Type",
                    "List[Optional[Any]]",
                    "Type[str]",
                    "int",
                    "bool",
                    "List"
                ]
            }
        },
        "fill_other_holes": {
            "name": "fill_other_holes",
            "location": 88,
            "return": [
                "dict",
                "str",
                "list",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "bool",
                    "Dict[str,str]",
                    "NamedTuple"
                ],
                "full_tree": [
                    "Callable",
                    "bool",
                    "Dict",
                    "List[str]",
                    "Tuple[Union[str,str]]",
                    "Tuple[str,str]",
                    "UdpTransport"
                ],
                "chat": [
                    "str",
                    "dict",
                    "Optional[Any]"
                ],
                "chat_tree_inserts": [
                    "str",
                    "Dict",
                    "Optional[Any]"
                ]
            }
        },
        "is_span": {
            "name": "is_span",
            "location": 108,
            "return": [
                "bool",
                "Mapping[str,Any]",
                "str"
            ],
            "arguments": {
                "val": [
                    "int",
                    "List[str]",
                    "Iterator",
                    "Iterable[T]",
                    "Iterator[T]",
                    "Union[int,slice]"
                ]
            }
        },
        "contains_negative": {
            "name": "contains_negative",
            "location": 122,
            "return": [
                "bool"
            ],
            "arguments": {
                "span": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "offset": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "contains_span": {
            "name": "contains_span",
            "location": 132,
            "return": [
                "bool"
            ],
            "arguments": {
                "tree": [
                    "Dict",
                    "Dict[str,str]",
                    "Dict[str,Any]",
                    "List[Mapping[str,str]]",
                    "List[Dict[str,Any]]"
                ]
            }
        },
        "get_loc_span_range": {
            "name": "get_loc_span_range",
            "location": 145,
            "return": [
                "bool",
                "str",
                "List[tuple[Union[str,str]]]",
                "Optional[str]",
                "Callable[...,None]",
                "List[tuple[Union[int,int]]]",
                "range",
                "Dict[str,str]",
                "Tuple[Union[int,int]]",
                "List[int]",
                "List",
                "None"
            ],
            "arguments": {
                "tree": [
                    "Dict",
                    "Dict[str,str]",
                    "bool"
                ],
                "key": [
                    "str",
                    "float",
                    "Dict[str,str]",
                    "Exception"
                ]
            }
        },
        "reformat_span_idxs": {
            "name": "reformat_span_idxs",
            "location": 157,
            "return": [
                "str",
                "List[Union[int,list[Union[int,list[None],list[dict[str,str]],dict[str,str],float,list[str],str,tuple[Union[Literal,Literal]],dict[str,Type],dict[str,set[str]]]]]]"
            ],
            "arguments": {
                "span_idx_list": [
                    "float"
                ]
            }
        },
        "update_tree_spans": {
            "name": "update_tree_spans",
            "location": 168,
            "return": [
                "List",
                "str",
                "Dict",
                "float",
                "int"
            ],
            "arguments": {
                "tree": [
                    "Dict",
                    "bool",
                    "str"
                ],
                "shift": [
                    "int",
                    "Dict[str,Any]",
                    "Dict"
                ]
            }
        },
        "postprocess_tree": {
            "name": "postprocess_tree",
            "location": 184,
            "return": [
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "tree": [
                    "Dict",
                    "bool",
                    "IO",
                    "Sequence[str]"
                ]
            }
        },
        "postprocess_tree_helper": {
            "name": "postprocess_tree_helper",
            "location": 205,
            "return": [
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "tree": [
                    "Dict",
                    "int"
                ]
            }
        },
        "TurkToolProcessor.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "train_annotated_phrases": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "None"
                ],
                "node_types": [
                    "List[str]",
                    "int",
                    "Optional[List[float]]",
                    "List[float]",
                    "None"
                ]
            }
        },
        "TurkToolProcessor.filter_tool1_lines": {
            "name": "filter_tool1_lines",
            "location": 12,
            "return": [
                "List[str]",
                "List",
                "Optional[Any]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "tool1_lines": [
                    "List[str]",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "TurkToolProcessor.is_chat_subset": {
            "name": "is_chat_subset",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "chat": [
                    "str"
                ]
            }
        },
        "TurkToolProcessor.filter_tool2_lines": {
            "name": "filter_tool2_lines",
            "location": 41,
            "return": [
                "List[str]",
                "List",
                "Optional[Any]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "tool2_lines": [
                    "List[str]",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "TurkToolProcessor.build_tree_inserts_dict": {
            "name": "build_tree_inserts_dict",
            "location": 56,
            "return": [
                "float",
                "Optional[str]",
                "Optional[\"TreeNode\"]",
                "T",
                "Callable[[None], bool]"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "List[str]",
                    "List[AnyStr]",
                    "str"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/ttad_transformer_model/test_model_script.py": {
        "get_beam_tree": {
            "name": "get_beam_tree",
            "location": 36,
            "return": [
                "float",
                "int",
                "Optional[bool]",
                "type",
                "str"
            ],
            "arguments": {
                "chat": [
                    "float",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "noop_thres": [
                    "float",
                    "str",
                    "int",
                    "torch.nn.Module",
                    "Optional[str]"
                ],
                "beam_size": [
                    "int",
                    "float",
                    "Optional[int]"
                ],
                "well_formed_pen": [
                    "float",
                    "int",
                    "Optional[int]"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/ttad_transformer_model/train_model.py": {
        "generate_model_name": {
            "name": "generate_model_name",
            "location": 231,
            "return": [
                "Text",
                "str",
                "List[str]"
            ],
            "arguments": {
                "args": [],
                "optional_identifier": [
                    "Text",
                    "int",
                    "Dict[str,Any]",
                    "Iterator",
                    "str",
                    "Container[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ModelTrainer.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "ModelTrainer.train": {
            "name": "train",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Callable",
                    "bool",
                    "Sequence[Any]",
                    "List[str]",
                    "Optional[Callable[[Type, Dict], Any]]",
                    "Type"
                ],
                "dataset": [
                    "bool",
                    "rl_algorithms.utils.config.ConfigDict",
                    "str",
                    "Iterable"
                ],
                "tokenizer": [],
                "model_identifier": [
                    "Callable",
                    "bool",
                    "Dict",
                    "List[str]",
                    "argparse.Namespace"
                ],
                "full_tree_voc": [
                    "bool",
                    "int"
                ]
            }
        },
        "ModelTrainer.validate": {
            "name": "validate",
            "location": 165,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "List"
                ],
                "dataset": [
                    "None",
                    "float",
                    "torch.Tensor",
                    "Optional[torch.Tensor]"
                ],
                "tokenizer": [
                    "int",
                    "str",
                    "List"
                ],
                "args": []
            }
        },
        "ModelTrainer.eval_model_on_dataset": {
            "name": "eval_model_on_dataset",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "encoder_decoder": [
                    "int",
                    "List",
                    "Union[Sequence[int],Sequence[dict]]",
                    "Sequence[int]",
                    "Sequence[dict]"
                ],
                "dtype": [
                    "str",
                    "bool",
                    "List[str]",
                    "List"
                ],
                "full_tree_voc": [
                    "str",
                    "argparse.Namespace",
                    "List[Type]",
                    "List[str]",
                    "Callable",
                    "Tuple"
                ],
                "tokenizer": [
                    "List[int]",
                    "List[str]",
                    "List"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/ttad_transformer_model/utils_caip.py": {
        "is_span": {
            "name": "is_span",
            "location": 16,
            "return": [
                "bool",
                "Set[str]",
                "List",
                "str",
                "Dict[str,List[str]]",
                "object"
            ],
            "arguments": {
                "val": [
                    "numpy.ndarray"
                ]
            }
        },
        "is_span_list": {
            "name": "is_span_list",
            "location": 24,
            "return": [
                "bool",
                "Union[numbers.Real,numpy.ndarray]",
                "str",
                "Match"
            ],
            "arguments": {
                "val": [
                    "Sequence[int]"
                ]
            }
        },
        "is_cat": {
            "name": "is_cat",
            "location": 29,
            "return": [
                "bool",
                "str",
                "Type"
            ],
            "arguments": {
                "val": [
                    "str",
                    "Dict"
                ]
            }
        },
        "is_cat_list": {
            "name": "is_cat_list",
            "location": 33,
            "return": [
                "bool",
                "Union[numbers.Real,numpy.ndarray]",
                "str",
                "Match"
            ],
            "arguments": {
                "val": [
                    "Sequence[int]"
                ]
            }
        },
        "is_int": {
            "name": "is_int",
            "location": 38,
            "return": [
                "bool",
                "Optional[str]",
                "Type[Any]"
            ],
            "arguments": {
                "val": [
                    "str",
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "is_int_list": {
            "name": "is_int_list",
            "location": 42,
            "return": [
                "bool",
                "Union[numbers.Real,numpy.ndarray]",
                "str",
                "Match"
            ],
            "arguments": {
                "val": [
                    "Sequence[int]"
                ]
            }
        },
        "add_tree": {
            "name": "add_tree",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "full_tree": [
                    "Dict",
                    "str",
                    "cmk.utils.structured_data.StructuredDataTree",
                    "Optional[str]"
                ],
                "new_tree": [
                    "Dict[str,Any]",
                    "List[dict]",
                    "T",
                    "Type"
                ],
                "vocounts": [
                    "Dict",
                    "bool",
                    "Set",
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ],
                "nw": [
                    "int",
                    "Optional[str]",
                    "MutableMapping[str,str]",
                    "str",
                    "Dict"
                ]
            }
        },
        "make_full_tree": {
            "name": "make_full_tree",
            "location": 91,
            "return": [
                "Tuple[Union[dict,list[Text]]]",
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "trees_weight_ls": [
                    "Dict",
                    "bool",
                    "Exception",
                    "Callable"
                ]
            }
        },
        "process_txt_data": {
            "name": "process_txt_data",
            "location": 109,
            "return": [
                "List[list[str]]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "Union[str,IO[bytes]]"
                ]
            }
        },
        "tree_to_seq": {
            "name": "tree_to_seq",
            "location": 122,
            "return": [
                "bool",
                "Union[int, float, complex]",
                "Optional[str]"
            ],
            "arguments": {
                "full_tree": [
                    "List",
                    "List[List[Any]]",
                    "List[list[Any]]"
                ],
                "tree": [
                    "list",
                    "List[List[Any]]"
                ],
                "idx_map": [
                    "T",
                    "None"
                ]
            }
        },
        "select_spans": {
            "name": "select_spans",
            "location": 160,
            "return": [
                "Dict[str, Any]",
                "dict",
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "seq": [
                    "List[float]",
                    "List[int]",
                    "str",
                    "int"
                ]
            }
        },
        "seq_to_tree": {
            "name": "seq_to_tree",
            "location": 199,
            "return": [
                "bool",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "full_tree": [
                    "Dict",
                    "Dict[str,Any]",
                    "bool",
                    "str"
                ],
                "seq": [
                    "str",
                    "numpy.ndarray",
                    "Optional[List[Any]]"
                ],
                "idx_rev_map": [
                    "None",
                    "int",
                    "Optional[int]",
                    "bool"
                ],
                "span_dct": [
                    "None",
                    "Optional[str]",
                    "str",
                    "float",
                    "Optional[allennlp.data.token_indexers.TokenIndexer]",
                    "Iterable[str]",
                    "Sequence[str]",
                    "bool",
                    "Optional[Iterable[str]]",
                    "Optional[torch.Tensor]"
                ],
                "start_id": [
                    "int",
                    "Sequence",
                    "Dict[str,List[str]]",
                    "raiden.utils.TokenAmount",
                    "cmk.utils.type_defs.UserId"
                ]
            }
        },
        "compare_tree": {
            "name": "compare_tree",
            "location": 284,
            "return": [
                "Tuple",
                "Dict[,tuple[Text]]",
                "List",
                "Union[numpy.ndarray,PIL.Image.Image]",
                "Type",
                "Dict",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "ta": [
                    "str"
                ],
                "tb": [
                    "numpy.ndarray",
                    "raiden.utils.Any",
                    "Optional[str]",
                    "float"
                ]
            }
        },
        "align_post_tok": {
            "name": "align_post_tok",
            "location": 310,
            "return": [
                "List[list[int]]",
                "bool",
                "str",
                "Type"
            ],
            "arguments": {
                "pre_tok": [
                    "Sequence[int]",
                    "numpy.ndarray",
                    "List[int]"
                ],
                "post_tok": [
                    "int",
                    "Callable[[None], bool]",
                    "List[Tuple[str]]",
                    "List[int]"
                ],
                "seen_toks": [
                    "int",
                    "numpy.ndarray",
                    "List[int]"
                ]
            }
        },
        "tokenize_mapidx": {
            "name": "tokenize_mapidx",
            "location": 339,
            "return": [
                "Tuple[Union[str,list[list]]]",
                "bool",
                "str",
                "Optional[float]",
                "numpy.dtype",
                "int"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "tokenizer": [
                    "str",
                    "Pattern",
                    "Dict[str,Any]"
                ]
            }
        },
        "tokenize_linearize": {
            "name": "tokenize_linearize",
            "location": 358,
            "return": [
                "Tuple[Union[str,list[str],tuple[Union[Any,list[Any]]],Type]]",
                "float",
                "Dict",
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "text": [
                    "int",
                    "str"
                ],
                "tree": [
                    "str",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]",
                    "Callable[[str],str]",
                    "Callable[str,str]"
                ],
                "tokenizer": [
                    "int",
                    "str"
                ],
                "full_tree": [
                    "str",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]",
                    "Callable[[str],str]",
                    "Callable[str,str]"
                ],
                "word_noise": [
                    "float",
                    "Type",
                    "Callable[[str],str]",
                    "List[Union[str,int]]"
                ]
            }
        },
        "caip_collate": {
            "name": "caip_collate",
            "location": 489,
            "return": [
                "Tuple[list[tuple]]",
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "batch": [
                    "Optional[numpy.ndarray]",
                    "float",
                    "Callable",
                    "raiden.utils.Callable"
                ],
                "tokenizer": [
                    "numpy.ndarray"
                ],
                "tree_to_text": [
                    "bool",
                    "List[str]"
                ]
            }
        },
        "CAIPDataset.__init__": {
            "name": "__init__",
            "location": 376,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tokenizer": [
                    "int",
                    "bool"
                ],
                "args": [],
                "prefix": [
                    "Text",
                    "bool",
                    "Sequence[str]",
                    "Iterable[Any]",
                    "Optional[List[str]]",
                    "List[str]",
                    "Optional[str]"
                ],
                "dtype": [
                    "Text",
                    "bool",
                    "List",
                    "Optional[str]",
                    "Optional[Dict[str,Any]]",
                    "raiden.utils.Address",
                    "List[str]"
                ],
                "sampling": [
                    "bool",
                    "int"
                ],
                "word_noise": [
                    "float",
                    "int",
                    "List[float]",
                    "Type"
                ],
                "full_tree_voc": [
                    "List[str]",
                    "None",
                    "Optional[Union[Any,Any]]",
                    "Optional[Callable[,Any]]",
                    "Any",
                    "Callable",
                    "Callable[,Any]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "CAIPDataset._contains_span_indices": {
            "name": "_contains_span_indices",
            "location": 439,
            "return": [
                "bool",
                "float",
                "hackathon.utils.utils.DataMessage",
                "Dict[str,Any]",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "token_idx_list": [
                    "List",
                    "List[str]",
                    "List[list[int]]",
                    "str",
                    "List[List[int]]",
                    "numpy.ndarray"
                ]
            }
        },
        "CAIPDataset.__len__": {
            "name": "__len__",
            "location": 442,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CAIPDataset.__getitem__": {
            "name": "__getitem__",
            "location": 445,
            "return": [
                "Tuple[Union[list[list],tuple]]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "int",
                    "List[deque]",
                    "Tuple[int,int]",
                    "List[Tuple[int,int]]"
                ]
            }
        },
        "CAIPDataset.add_hard_example": {
            "name": "add_hard_example",
            "location": 480,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exple": [
                    "Dict",
                    "float",
                    "torch.Tensor",
                    "numpy.ndarray"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/ttad_transformer_model/utils_parsing.py": {
        "my_xavier_init": {
            "name": "my_xavier_init",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "m": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Union[Literal[False], None, str]"
                ],
                "gain": [
                    "int",
                    "torch.Tensor",
                    "str",
                    "bool",
                    "Dict[str,Any]"
                ]
            }
        },
        "predict_tree": {
            "name": "predict_tree",
            "location": 261,
            "return": [
                "Optional[Callable[[bool], None]]",
                "Exception",
                "list",
                "Optional[AbstractSet[str]]"
            ],
            "arguments": {
                "txt": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "model": [
                    "int",
                    "Set[int]",
                    "bool"
                ],
                "tokenizer": [
                    "Sequence[str]",
                    "str",
                    "int"
                ],
                "dataset": [
                    "str",
                    "Dict[str,int]",
                    "Dict",
                    "List[str]"
                ],
                "ban_noop": [
                    "bool",
                    "Type",
                    "Set[str]",
                    "Optional[Dict[str,str]]"
                ],
                "noop_threshold": [
                    "float",
                    "Type",
                    "Set[str]",
                    "Optional[Dict[str,str]]"
                ]
            }
        },
        "beam_search": {
            "name": "beam_search",
            "location": 317,
            "return": [
                "str",
                "bytes",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "txt": [
                    "float",
                    "Optional[str]",
                    "str",
                    "List[Tuple[int,int]]",
                    "None",
                    "List[tuple[Union[int,int]]]"
                ],
                "model": [
                    "int",
                    "str",
                    "bool",
                    "Union[int,str]"
                ],
                "tokenizer": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "float",
                    "Optional[float]",
                    "int"
                ],
                "dataset": [
                    "str",
                    "Mapping",
                    "List[str]",
                    "Dict[str,str]",
                    "int",
                    "Dict"
                ],
                "beam_size": [
                    "int",
                    "bool",
                    "List[int]",
                    "Hashable"
                ],
                "well_formed_pen": [
                    "float",
                    "bool",
                    "Optional[bool]",
                    "torch.Tensor",
                    "Optional[int]",
                    "allennlp.nn.initializers.InitializerApplicator"
                ]
            }
        },
        "compute_accuracy": {
            "name": "compute_accuracy",
            "location": 457,
            "return": [
                "tuple[bool]",
                "bool"
            ],
            "arguments": {
                "outputs": [
                    "str",
                    "Tuple[Union[str,str]]",
                    "Optional[str]",
                    "T",
                    "int",
                    "Dict[str,List[Any]]",
                    "Tuple[str,str]"
                ],
                "y": [
                    "str",
                    "float"
                ]
            }
        },
        "HighwayLayer.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dim": [
                    "Callable",
                    "List[int]"
                ]
            }
        },
        "HighwayLayer.forward": {
            "name": "forward",
            "location": 31,
            "return": [
                "int",
                "List[int]",
                "float",
                "Iterable[str]",
                "Iterable[T]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "float"
                ]
            }
        },
        "DecoderWithLoss.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str,Any]"
                ],
                "args": [],
                "tokenizer": [
                    "Dict",
                    "str"
                ]
            }
        },
        "DecoderWithLoss.step": {
            "name": "step",
            "location": 71,
            "return": [
                "Dict[Text,]",
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "self": [],
                "y": [],
                "y_mask": [],
                "x_reps": [],
                "x_mask": []
            }
        },
        "DecoderWithLoss.forward": {
            "name": "forward",
            "location": 125,
            "return": [
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "self": [],
                "y": [],
                "y_mask": [],
                "x_reps": [],
                "x_mask": []
            }
        },
        "EncoderDecoderWithLoss.__init__": {
            "name": "__init__",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "encoder": [
                    "int",
                    "float",
                    "bool"
                ],
                "decoder": [
                    "int",
                    "float",
                    "bool"
                ],
                "args": []
            }
        },
        "EncoderDecoderWithLoss.forward": {
            "name": "forward",
            "location": 249,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "Pattern",
                "float",
                "List",
                "Tuple"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "List[str]"
                ],
                "x_mask": [
                    "float",
                    "int",
                    "torch.Tensor"
                ],
                "y": [
                    "float",
                    "bool"
                ],
                "y_mask": [
                    "float",
                    "bool"
                ],
                "x_reps": [
                    "Optional[int]",
                    "None",
                    "Union[int,str]",
                    "int",
                    "str"
                ]
            }
        },
        "OptimWarmupEncoderDecoder.__init__": {
            "name": "__init__",
            "location": 504,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "bool",
                    "int"
                ],
                "args": []
            }
        },
        "OptimWarmupEncoderDecoder._update_rate": {
            "name": "_update_rate",
            "location": 538,
            "return": [
                "float",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "OptimWarmupEncoderDecoder.zero_grad": {
            "name": "zero_grad",
            "location": 543,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OptimWarmupEncoderDecoder.step": {
            "name": "step",
            "location": 547,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelSmoothingLoss.__init__": {
            "name": "__init__",
            "location": 566,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label_smoothing": [
                    "int",
                    "List[str]"
                ],
                "tgt_vocab_size": [
                    "float",
                    "int",
                    "Optional[Union[int,float]]",
                    "bool"
                ],
                "ignore_index": [
                    "int",
                    "torch.LongTensor",
                    "Optional[Dict[str,Any]]",
                    "Optional[int]"
                ]
            }
        },
        "LabelSmoothingLoss.forward": {
            "name": "forward",
            "location": 577,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "output": [
                    "float",
                    "int",
                    "torch.Tensor"
                ],
                "target": [
                    "str",
                    "Iterator[Any]",
                    "Dict[str, str]",
                    "Callable"
                ]
            }
        }
    },
    "craftassist-master/python/base_agent/ttad/ttad_transformer_model/__init__.py": {},
    "craftassist-master/python/craftassist/adtt.py": {
        "adtt": {
            "name": "adtt",
            "location": 12,
            "return": [
                "DefaultDict[int, List[Any]]",
                "Dict[str, int]",
                "OrderedDict"
            ],
            "arguments": {
                "d": [
                    "T",
                    "AbstractSet[int]",
                    "Dict[str, str]"
                ]
            }
        },
        "replace_spans": {
            "name": "replace_spans",
            "location": 40,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int",
                    "Optional[Dict]",
                    "Dict",
                    "None"
                ],
                "gen_d": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "d": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "generate_from_template": {
            "name": "generate_from_template",
            "location": 65,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "action_type": [
                    "str",
                    "bool",
                    "int"
                ],
                "template": [
                    "str",
                    "List",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "dicts_match": {
            "name": "dicts_match",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "d": [
                    "Dict",
                    "Sequence[str]",
                    "Optional[List[str]]",
                    "List",
                    "str",
                    "BooleanArray",
                    "bool"
                ],
                "e": [
                    "Dict",
                    "Dict[str,str]",
                    "Sequence[str]",
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "Set[str]"
                ],
                "ignore_values_for_keys": [
                    "List[Text]",
                    "Sequence[str]",
                    "frozenset[str]",
                    "Dict[str,int]",
                    "List[str]",
                    "Set[str]",
                    "Dict[str,list]",
                    "str",
                    "Pattern"
                ],
                "ignore_keys": [
                    "List[Text]",
                    "Sequence[str]",
                    "Dict",
                    "Optional[List[str]]",
                    "List",
                    "Optional[str]"
                ]
            }
        },
        "recurse_remove_keys": {
            "name": "recurse_remove_keys",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "d": [
                    "Dict",
                    "str",
                    "int",
                    "float"
                ],
                "keys": [
                    "str",
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "replace_relative_direction": {
            "name": "replace_relative_direction",
            "location": 112,
            "return": [
                "str",
                "Exception",
                "int",
                "NamedTuple"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int",
                    "NamedTuple"
                ],
                "gen_d": [
                    "Dict",
                    "str",
                    "int",
                    "bool",
                    "Iterable[Tuple[str,str]]"
                ],
                "d": [
                    "str",
                    "List[bytes]",
                    "List[str]",
                    "int",
                    "BinaryIO"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/base_sql_mock_environment.py": {
        "BaseSQLMockEnvironment.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSQLMockEnvironment.handle_logical_form": {
            "name": "handle_logical_form",
            "location": 29,
            "return": [
                "int",
                "None",
                "str",
                "Callable",
                "Pattern"
            ],
            "arguments": {
                "self": [],
                "logical_form": [
                    "str",
                    "bool"
                ],
                "chatstr": [
                    "Text",
                    "str",
                    "bool"
                ]
            }
        },
        "BaseSQLMockEnvironment.flush": {
            "name": "flush",
            "location": 38,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/craftassist/block_data.py": {},
    "craftassist-master/python/craftassist/build_utils.py": {
        "read_shapenet_csv": {
            "name": "read_shapenet_csv",
            "location": 12,
            "return": [
                "Tuple[dict[,list]]",
                "int",
                "str",
                "Dict"
            ],
            "arguments": {
                "csvpath": [
                    "Text",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "to_relative_pos": {
            "name": "to_relative_pos",
            "location": 32,
            "return": [
                "Tuple[Union[list[tuple[tuple]],tuple[tuple[tuple]],set[tuple[tuple]]]]",
                "str",
                "int",
                "Tuple[str,str]"
            ],
            "arguments": {
                "block_list": [
                    "int"
                ]
            }
        },
        "blocks_list_to_npy": {
            "name": "blocks_list_to_npy",
            "location": 61,
            "return": [
                "Tuple[tuple]",
                "str",
                "float",
                "List[int]",
                "Dict"
            ],
            "arguments": {
                "blocks": [
                    "Tuple[Union[float,float]]",
                    "str",
                    "numpy.ndarray",
                    "int",
                    "Tuple[float,float]"
                ],
                "xyz": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "npy_to_blocks_list": {
            "name": "npy_to_blocks_list",
            "location": 81,
            "return": [
                "List[tuple[tuple[str]]]",
                "numpy.ndarray",
                "int",
                "bool",
                "Dict[str,Any]"
            ],
            "arguments": {
                "npy": [
                    "str",
                    "Iterable[T]",
                    "numpy.random.RandomState"
                ],
                "origin": [
                    "numpy.ndarray",
                    "Tuple[int]"
                ]
            }
        },
        "blocks_list_add_offset": {
            "name": "blocks_list_add_offset",
            "location": 96,
            "return": [
                "List[tuple[tuple]]",
                "Union[int,float]",
                "bool"
            ],
            "arguments": {
                "blocks": [
                    "List[T]",
                    "str",
                    "int",
                    "numpy.ndarray",
                    "Iterable[List[T]]"
                ],
                "origin": [
                    "str",
                    "numpy.array"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/craftassist_agent.py": {
        "CraftAssistAgent.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "opts": [
                    "Callable"
                ]
            }
        },
        "CraftAssistAgent.init_inventory": {
            "name": "init_inventory",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CraftAssistAgent.init_memory": {
            "name": "init_memory",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CraftAssistAgent.init_perception": {
            "name": "init_perception",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CraftAssistAgent.init_controller": {
            "name": "init_controller",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CraftAssistAgent.perceive": {
            "name": "perceive",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "force": [
                    "bool",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "CraftAssistAgent.controller_step": {
            "name": "controller_step",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CraftAssistAgent.maybe_run_slow_defaults": {
            "name": "maybe_run_slow_defaults",
            "location": 159,
            "return": [
                "None",
                "Dict[str,Any]",
                "Set[VT]",
                "numpy.ndarray",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CraftAssistAgent.get_time": {
            "name": "get_time",
            "location": 193,
            "return": [
                "Dict[str, Any]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "CraftAssistAgent.get_world_time": {
            "name": "get_world_time",
            "location": 198,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CraftAssistAgent.safe_get_changed_blocks": {
            "name": "safe_get_changed_blocks",
            "location": 205,
            "return": [
                "str",
                "List",
                "bool",
                "List[Text]",
                "int",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "CraftAssistAgent.point_at": {
            "name": "point_at",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "str",
                    "Dict[str,str]",
                    "logging.LogRecord"
                ],
                "sleep": [
                    "int",
                    "Callable",
                    "None",
                    "str"
                ]
            }
        },
        "CraftAssistAgent.relative_head_pitch": {
            "name": "relative_head_pitch",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "angle": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "CraftAssistAgent.send_chat": {
            "name": "send_chat",
            "location": 245,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "chat": [
                    "str",
                    "Dict",
                    "multiprocessing.Queue",
                    "logging.Logger"
                ]
            }
        },
        "CraftAssistAgent.init_physical_interfaces": {
            "name": "init_physical_interfaces",
            "location": 253,
            "return": [
                "None",
                "Dict[str,Dict[str,int]]",
                "str",
                "Dict[str,Any]",
                "Union[tuple,list]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CraftAssistAgent.add_self_memory_node": {
            "name": "add_self_memory_node",
            "location": 305,
            "return": [
                "Set",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CraftAssistAgent.maybe_run_slow_defaults.noop": {
            "name": "noop",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "craftassist-master/python/craftassist/dance.py": {
        "add_default_dances": {
            "name": "add_default_dances",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "memory": [
                    "Dict[str,Any]"
                ]
            }
        },
        "generate_sequential_move_fn": {
            "name": "generate_sequential_move_fn",
            "location": 70,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sequence": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "generate_sequential_move_fn.move_fn": {
            "name": "move_fn",
            "location": 71,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "danceObj": [
                    "Dict[str, Any]",
                    "tuple"
                ],
                "agent": [
                    "Dict[Hashable, Any]",
                    "int",
                    "dict"
                ]
            }
        },
        "Movement.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "bool",
                    "float",
                    "str",
                    "Callable",
                    "int"
                ],
                "move_fn": [
                    "bool",
                    "float",
                    "str",
                    "Callable",
                    "int"
                ],
                "dance_location": [
                    "bool",
                    "None",
                    "float",
                    "int",
                    "str",
                    "Callable"
                ]
            }
        },
        "Movement.get_move": {
            "name": "get_move",
            "location": 93,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RefObjMovement.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "str",
                    "int",
                    "List[str]",
                    "Callable",
                    "IO[str]",
                    "IO"
                ],
                "ref_object": [
                    "Callable[..., Awaitable]",
                    "str"
                ],
                "relative_direction": [
                    "Text",
                    "Optional[Collection[int]]",
                    "int",
                    "Optional[float]",
                    "bool",
                    "Dict[str,Any]"
                ]
            }
        },
        "RefObjMovement.get_move": {
            "name": "get_move",
            "location": 150,
            "return": [
                "None",
                "Optional[int]",
                "Optional[str]",
                "bool",
                "str",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/craftassist/default_behaviors.py": {
        "build_random_shape": {
            "name": "build_random_shape",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "agent": [
                    "Dict[str,Any]",
                    "bool",
                    "int"
                ],
                "rand_range": [
                    "Tuple[int]",
                    "int",
                    "numpy.ndarray",
                    "List[int]"
                ],
                "no_chat": [
                    "bool",
                    "Optional[numpy.ndarray]",
                    "str",
                    "Coroutine"
                ]
            }
        },
        "come_to_player": {
            "name": "come_to_player",
            "location": 55,
            "return": [
                "None",
                "str",
                "Dict",
                "Iterable[Hashable]"
            ],
            "arguments": {
                "agent": [
                    "list",
                    "List[Tuple[int, bytes]]",
                    "int"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/entities.py": {},
    "craftassist-master/python/craftassist/heuristic_perception.py": {
        "in_hull": {
            "name": "in_hull",
            "location": 39,
            "return": [
                "int",
                "Callable[[Mapping], T]",
                "Dict[str, str]"
            ],
            "arguments": {
                "points": [
                    "bool",
                    "str",
                    "int",
                    "Union[int, float]"
                ],
                "x": [
                    "Sequence[Any]",
                    "int"
                ]
            }
        },
        "all_nearby_objects": {
            "name": "all_nearby_objects",
            "location": 49,
            "return": [
                "List[list[tuple[tuple[Union[str,bytearray,bytes]]]]]",
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "get_blocks": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Union[int,str]]"
                ],
                "pos": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "max_radius": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Union[int,str]]"
                ]
            }
        },
        "closest_nearby_object": {
            "name": "closest_nearby_object",
            "location": 67,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "get_blocks": [
                    "str",
                    "None",
                    "numpy.ndarray",
                    "Optional[str]"
                ],
                "pos": [
                    "str",
                    "int"
                ]
            }
        },
        "all_close_interesting_blocks": {
            "name": "all_close_interesting_blocks",
            "location": 80,
            "return": [
                "Tuple[Union[bool,Pattern,tuple[Union[Type,Type,Type]],tuple[int],tuple,list]]",
                "Callable[[T],bool]",
                "Iterable[T]"
            ],
            "arguments": {
                "get_blocks": [
                    "str",
                    "bool"
                ],
                "pos": [
                    "Union[float, int]",
                    "float",
                    "int"
                ],
                "max_radius": [
                    "int",
                    "Union[float,int]",
                    "float"
                ]
            }
        },
        "accessible_interesting_blocks": {
            "name": "accessible_interesting_blocks",
            "location": 91,
            "return": [
                "Union[int, float]",
                "str",
                "Union[bool, List[bool]]",
                "Set[int]"
            ],
            "arguments": {
                "blocks": [
                    "Dict",
                    "str"
                ],
                "pos": [
                    "Dict",
                    "str"
                ]
            }
        },
        "find_closest_component": {
            "name": "find_closest_component",
            "location": 113,
            "return": [
                "None",
                "str",
                "Optional[int]",
                "bool",
                "Dict"
            ],
            "arguments": {
                "mask": [
                    "bool",
                    "str",
                    "Callable"
                ],
                "relpos": [
                    "int",
                    "AsyncGenerator",
                    "collections.abc.AsyncGenerator"
                ]
            }
        },
        "connected_components": {
            "name": "connected_components",
            "location": 130,
            "return": [
                "List[list]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "X": [
                    "List",
                    "List[str]",
                    "numpy.ndarray",
                    "int"
                ],
                "unique_idm": [
                    "bool",
                    "float",
                    "Tuple[cirq.Qid]"
                ]
            }
        },
        "check_between": {
            "name": "check_between",
            "location": 187,
            "return": [
                "bool"
            ],
            "arguments": {
                "entities": [
                    "List[dict[str,Any]]",
                    "Dict",
                    "List[Dict[str,Any]]",
                    "str",
                    "T",
                    "bool"
                ],
                "fat_scale": [
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "find_between": {
            "name": "find_between",
            "location": 225,
            "return": [
                "None",
                "str",
                "int",
                "Optional[int]",
                "bool",
                "Dict"
            ],
            "arguments": {
                "entities": [
                    "List",
                    "List[dict]",
                    "str",
                    "bool"
                ]
            }
        },
        "check_inside": {
            "name": "check_inside",
            "location": 240,
            "return": [
                "bool"
            ],
            "arguments": {
                "entities": [
                    "List[dict[str,Any]]",
                    "Dict",
                    "List[Dict[str,Any]]",
                    "str",
                    "T",
                    "bool"
                ]
            }
        },
        "find_inside": {
            "name": "find_inside",
            "location": 273,
            "return": [
                "List",
                "str",
                "List[tuple]",
                "Optional[Sequence[str]]",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "entity": [
                    "Type",
                    "search.domain.Document"
                ]
            }
        },
        "label_top_bottom_blocks": {
            "name": "label_top_bottom_blocks",
            "location": 298,
            "return": [
                "Dict[Text,]",
                "str",
                "Dict",
                "Dict[str,Any]",
                "Dict[str,str]",
                "Dict[str,int]"
            ],
            "arguments": {
                "block_list": [
                    "numpy.array",
                    "Dict[str, Any]",
                    "T",
                    "Tuple[Any, Any]"
                ],
                "top_heuristic": [
                    "int",
                    "Callable",
                    "Dict",
                    "numpy.ndarray",
                    "Optional[int]"
                ],
                "bottom_heuristic": [
                    "int",
                    "Callable",
                    "Dict",
                    "numpy.ndarray",
                    "Optional[int]"
                ]
            }
        },
        "ground_height": {
            "name": "ground_height",
            "location": 338,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "agent": [
                    "int",
                    "Tuple[float, float]",
                    "float",
                    "bool"
                ],
                "pos": [
                    "Tuple[Union[float,float]]",
                    "int",
                    "Tuple[float,float]",
                    "float",
                    "bool"
                ],
                "radius": [
                    "int",
                    "float",
                    "Tuple[float,float]",
                    "bool"
                ],
                "yfilt": [
                    "int",
                    "float",
                    "Iterable[List[str]]",
                    "Tuple[int]"
                ],
                "xzfilt": [
                    "int",
                    "Tuple[int,int]",
                    "List",
                    "numpy.ndarray",
                    "bool"
                ]
            }
        },
        "get_nearby_airtouching_blocks": {
            "name": "get_nearby_airtouching_blocks",
            "location": 359,
            "return": [
                "int",
                "Callable[[bytes], None]",
                "bool"
            ],
            "arguments": {
                "agent": [
                    "float",
                    "Optional[str]",
                    "str",
                    "int",
                    "list",
                    "List[str]"
                ],
                "location": [
                    "int",
                    "str",
                    "float",
                    "numpy.ndarray"
                ],
                "radius": [
                    "int",
                    "str",
                    "Optional[str]",
                    "numpy.ndarray"
                ]
            }
        },
        "get_all_nearby_holes": {
            "name": "get_all_nearby_holes",
            "location": 400,
            "return": [
                "str",
                "int",
                "Tuple[bytes]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "agent": [
                    "str",
                    "int"
                ],
                "location": [
                    "bool",
                    "int"
                ],
                "radius": [
                    "int",
                    "Callable",
                    "numpy.ndarray",
                    "float",
                    "bool"
                ],
                "store_inst_seg": [
                    "bool",
                    "int"
                ]
            }
        },
        "accessible_interesting_blocks._fn": {
            "name": "_fn",
            "location": 103,
            "return": [
                "bool"
            ],
            "arguments": {
                "p": []
            }
        },
        "connected_components.is_air": {
            "name": "is_air",
            "location": 146,
            "return": [
                "bool",
                "int",
                "float"
            ],
            "arguments": {
                "X": [
                    "numpy.ndarray",
                    "float",
                    "bool",
                    "numpy.array"
                ],
                "i": [
                    "bool",
                    "float",
                    "str",
                    "int"
                ],
                "j": [
                    "bool",
                    "float",
                    "str",
                    "int"
                ],
                "k": [
                    "bool",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "get_all_nearby_holes.get_block_info": {
            "name": "get_block_info",
            "location": 414,
            "return": [
                "Tuple[tuple]",
                "bytes",
                "int",
                "Dict[str,Any]",
                "Exception"
            ],
            "arguments": {
                "x": [
                    "int",
                    "Iterable[List[T]]",
                    "str",
                    "numpy.ndarray"
                ],
                "z": [
                    "int",
                    "Iterable[List[T]]",
                    "str",
                    "numpy.ndarray"
                ]
            }
        },
        "get_all_nearby_holes.dfs": {
            "name": "dfs",
            "location": 430,
            "return": [
                "int",
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "x": [
                    "int",
                    "numpy.ndarray",
                    "Union[numpy.ndarray, pandas.DataFrame]"
                ],
                "y": [
                    "numpy.ndarray",
                    "int",
                    "Union[numpy.ndarray, pandas.DataFrame]"
                ],
                "z": [
                    "int",
                    "numpy.ndarray",
                    "Union[numpy.ndarray, pandas.DataFrame]"
                ]
            }
        },
        "PerceptionWrapper.__init__": {
            "name": "__init__",
            "location": 505,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "int",
                    "float",
                    "bool"
                ],
                "perceive_freq": [
                    "int",
                    "bool",
                    "float"
                ],
                "slow_perceive_freq_mult": [
                    "int",
                    "Dict[str,Any]",
                    "Union[str,int]",
                    "bool"
                ]
            }
        },
        "PerceptionWrapper.perceive": {
            "name": "perceive",
            "location": 511,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "self": [],
                "force": [
                    "List[Tuple[int,bytes]]",
                    "bool"
                ]
            }
        },
        "connected_components._build_fn": {
            "name": "_build_fn",
            "location": 161,
            "return": [
                "bool"
            ],
            "arguments": {
                "X": [
                    "numpy.array",
                    "str",
                    "bool"
                ],
                "current_component": [
                    "numpy.array",
                    "str",
                    "bool"
                ],
                "idm": [
                    "numpy.array",
                    "str",
                    "bool"
                ]
            }
        },
        "connected_components._build_fn._fn": {
            "name": "_fn",
            "location": 162,
            "return": [
                "bool"
            ],
            "arguments": {
                "p": [
                    "List[Tuple[int, int]]",
                    "List[dict]",
                    "List[Dict]",
                    "Set[int]",
                    "list"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/inventory.py": {
        "Inventory.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Inventory.add_item_stack": {
            "name": "add_item_stack",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idm": [
                    "bool",
                    "Hashable",
                    "str",
                    "int"
                ],
                "item_stack_node": [
                    "List",
                    "int",
                    "deque"
                ]
            }
        },
        "Inventory.remove_item_stack": {
            "name": "remove_item_stack",
            "location": 20,
            "return": [
                "None",
                "Union[tuple,list]",
                "int"
            ],
            "arguments": {
                "self": [],
                "idm": [
                    "int"
                ],
                "memid": []
            }
        },
        "Inventory.get_idm_from_memid": {
            "name": "get_idm_from_memid",
            "location": 28,
            "return": [
                "Tuple[int]",
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": [],
                "memid": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "Inventory.get_item_stack_count_from_memid": {
            "name": "get_item_stack_count_from_memid",
            "location": 35,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "memid": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "Callable"
                ]
            }
        },
        "Inventory.sync_inventory": {
            "name": "sync_inventory",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inventory": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/low_level_perception.py": {
        "LowLevelMCPerception.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "int",
                    "float",
                    "bool"
                ],
                "perceive_freq": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "LowLevelMCPerception.perceive": {
            "name": "perceive",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "force": [
                    "bool",
                    "int",
                    "str",
                    "List[int]",
                    "List[float]"
                ]
            }
        },
        "LowLevelMCPerception.update_self_memory": {
            "name": "update_self_memory",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LowLevelMCPerception.update_other_players": {
            "name": "update_other_players",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "player_list": [
                    "List",
                    "List[list[str]]",
                    "Iterable[int]",
                    "List[list[Any]]",
                    "List[tuple[Union[str,str]]]",
                    "List[List[str]]",
                    "List[List[Any]]",
                    "bool",
                    "List[Tuple[str,str]]"
                ],
                "force": [
                    "bool",
                    "List",
                    "Iterable[int]",
                    "List[List[str]]",
                    "List[List[Any]]",
                    "List[Tuple[str,str]]"
                ]
            }
        },
        "LowLevelMCPerception.get_player_struct_by_name": {
            "name": "get_player_struct_by_name",
            "location": 106,
            "return": [
                "None",
                "Optional[bool]",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "LowLevelMCPerception.on_block_changed": {
            "name": "on_block_changed",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xyz": [
                    "Optional[str]",
                    "float",
                    "str",
                    "None"
                ],
                "idm": [
                    "bool",
                    "bytes",
                    "util.IDM"
                ]
            }
        },
        "LowLevelMCPerception.clear_air_surrounded_negatives": {
            "name": "clear_air_surrounded_negatives",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LowLevelMCPerception.maybe_remove_inst_seg": {
            "name": "maybe_remove_inst_seg",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xyz": [
                    "Dict[int,Any]",
                    "Optional[List[int]]",
                    "List[int]",
                    "None"
                ]
            }
        },
        "LowLevelMCPerception.maybe_add_block_to_memory": {
            "name": "maybe_add_block_to_memory",
            "location": 158,
            "return": [
                "None",
                "str",
                "Iterator[Tuple[str,str]]",
                "DGEList"
            ],
            "arguments": {
                "self": [],
                "xyz": [],
                "idm": [
                    "dict"
                ],
                "agent_placed": [
                    "Iterable[Any]",
                    "bool"
                ]
            }
        },
        "LowLevelMCPerception.maybe_remove_block_from_memory": {
            "name": "maybe_remove_block_from_memory",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xyz": [
                    "int",
                    "float"
                ],
                "idm": [
                    "str",
                    "int"
                ]
            }
        },
        "LowLevelMCPerception.is_placed_block_interesting": {
            "name": "is_placed_block_interesting",
            "location": 234,
            "return": [
                "str",
                "Tuple[bool]"
            ],
            "arguments": {
                "self": [],
                "xyz": [
                    "bool",
                    "Iterable[Any]",
                    "float",
                    "int"
                ],
                "bid": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/mc_memory.py": {
        "MCAgentMemory.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db_file": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "TextIO",
                    "List"
                ],
                "db_log_path": [
                    "str",
                    "None",
                    "TextIO",
                    "Optional[str]",
                    "List"
                ],
                "schema_paths": [
                    "List",
                    "str",
                    "Optional[str]",
                    "TextIO"
                ],
                "load_minecraft_specs": [
                    "bool",
                    "str",
                    "List[str]",
                    "float",
                    "Sequence",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "load_block_types": [
                    "bool",
                    "Optional[str]",
                    "Tuple",
                    "Type"
                ],
                "load_mob_types": [
                    "bool",
                    "Tuple[str,str]",
                    "str",
                    "Optional[Sequence[Any]]",
                    "IO[str]",
                    "int",
                    "Type"
                ],
                "preception_range": [
                    "int",
                    "str",
                    "List[str]",
                    "float",
                    "bool",
                    "Sequence",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "agent_time": [
                    "str",
                    "None",
                    "TextIO",
                    "Optional[str]",
                    "List"
                ]
            }
        },
        "MCAgentMemory.get_entity_by_eid": {
            "name": "get_entity_by_eid",
            "location": 98,
            "return": [
                "None",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "eid": [
                    "str",
                    "int",
                    "bytes",
                    "Iterator[T]",
                    "Iterator",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "MCAgentMemory.update_voxel_count": {
            "name": "update_voxel_count",
            "location": 112,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "Optional[bool]",
                "None",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "memid": [
                    "bytearray",
                    "str"
                ],
                "dn": [
                    "str",
                    "int",
                    "TextIO"
                ]
            }
        },
        "MCAgentMemory.update_voxel_mean": {
            "name": "update_voxel_mean",
            "location": 121,
            "return": [
                "Tuple[float]",
                "int",
                "Set",
                "Sequence[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "memid": [
                    "float"
                ],
                "count": [
                    "int",
                    "Tuple[bytes,bytes]",
                    "bool",
                    "str"
                ],
                "loc": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "Optional[List[str]]",
                    "int"
                ]
            }
        },
        "MCAgentMemory.remove_voxel": {
            "name": "remove_voxel",
            "location": 147,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "frozenset",
                    "bool",
                    "Tuple[float,float,float,float]",
                    "Tuple[Union[float,float,float,float]]"
                ],
                "y": [
                    "frozenset",
                    "bool",
                    "Tuple[float,float,float,float]",
                    "Tuple[Union[float,float,float,float]]"
                ],
                "z": [
                    "frozenset",
                    "bool",
                    "Tuple[float,float,float,float]",
                    "Tuple[Union[float,float,float,float]]"
                ],
                "ref_type": [
                    "Optional[Sequence[Any]]",
                    "List[int]",
                    "Sequence[Any]",
                    "Set",
                    "None"
                ]
            }
        },
        "MCAgentMemory.upsert_block": {
            "name": "upsert_block",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "str",
                    "int",
                    "None",
                    "Optional[Union[int,str]]",
                    "bool"
                ],
                "memid": [
                    "float",
                    "int",
                    "List"
                ],
                "ref_type": [
                    "Optional[Sequence[Any]]",
                    "List[int]",
                    "Sequence[Any]",
                    "None"
                ],
                "player_placed": [
                    "bool",
                    "int",
                    "Union[None,int]"
                ],
                "agent_placed": [
                    "bool",
                    "int",
                    "Union[None,int]"
                ],
                "update": [
                    "bool",
                    "Hashable"
                ]
            }
        },
        "MCAgentMemory.get_object_by_id": {
            "name": "get_object_by_id",
            "location": 210,
            "return": [
                "BlockObjectNode",
                "InstSegNode",
                "Callable",
                "Iterable[Any]",
                "int",
                "Dict[str,Any]",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "memid": [
                    "Iterable[str]",
                    "Type",
                    "T"
                ],
                "table": [
                    "Text",
                    "str",
                    "int",
                    "Type"
                ]
            }
        },
        "MCAgentMemory.get_object_info_by_xyz": {
            "name": "get_object_info_by_xyz",
            "location": 219,
            "return": [
                "List[str]",
                "List",
                "str",
                "Dict[str,Tuple[str,str]]",
                "List[Dict[str,str]]",
                "Dict[str,list[Any]]",
                "Tuple[Optional[Literal]]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "xyz": [
                    "str",
                    "bool",
                    "None",
                    "Optional[int]",
                    "int"
                ],
                "ref_type": [
                    "str",
                    "bool",
                    "None",
                    "Optional[int]",
                    "int"
                ],
                "just_memid": [
                    "bool",
                    "str"
                ]
            }
        },
        "MCAgentMemory.get_block_object_ids_by_xyz": {
            "name": "get_block_object_ids_by_xyz",
            "location": 232,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "Callable",
                "Dict[str, Union[str, Set]]"
            ],
            "arguments": {
                "self": [],
                "xyz": [
                    "str",
                    "Callable",
                    "OrderedDict[str,Any]",
                    "OrderedDict"
                ]
            }
        },
        "MCAgentMemory.get_block_object_by_xyz": {
            "name": "get_block_object_by_xyz",
            "location": 235,
            "return": [
                "None",
                "Optional[int]",
                "bool",
                "str",
                "Optional[str]",
                "Optional[Literal[only_clustered,include_clustered]]"
            ],
            "arguments": {
                "self": [],
                "xyz": [
                    "str",
                    "int",
                    "Dict"
                ]
            }
        },
        "MCAgentMemory.get_block_object_by_id": {
            "name": "get_block_object_by_id",
            "location": 241,
            "return": [
                "str",
                "List[str]",
                "Optional[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "self": [],
                "memid": [
                    "List[list[str]]",
                    "str",
                    "List[List[str]]",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        },
        "MCAgentMemory.tag_block_object_from_schematic": {
            "name": "tag_block_object_from_schematic",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block_object_memid": [
                    "str",
                    "Dict[str,Any]"
                ],
                "schematic_memid": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "MCAgentMemory.get_instseg_object_ids_by_xyz": {
            "name": "get_instseg_object_ids_by_xyz",
            "location": 251,
            "return": [
                "bool",
                "Set[str]",
                "List[Mapping[str,Any]]",
                "int",
                "MutableMapping[str,Any]",
                "range",
                "List[str]",
                "Dict[str,int]"
            ],
            "arguments": {
                "self": [],
                "xyz": [
                    "int",
                    "float",
                    "Dict",
                    "str"
                ]
            }
        },
        "MCAgentMemory.get_schematic_by_id": {
            "name": "get_schematic_by_id",
            "location": 262,
            "return": [
                "str",
                "SchematicNode"
            ],
            "arguments": {
                "self": [],
                "memid": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ]
            }
        },
        "MCAgentMemory.get_schematic_by_property_name": {
            "name": "get_schematic_by_property_name",
            "location": 265,
            "return": [
                "None",
                "bool",
                "Optional[Dict[str,Any]]",
                "int",
                "Dict",
                "Iterable[T]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "table_name": [
                    "str"
                ]
            }
        },
        "MCAgentMemory.get_mob_schematic_by_name": {
            "name": "get_mob_schematic_by_name",
            "location": 295,
            "return": [
                "Optional[str]",
                "str",
                "list",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "MCAgentMemory.get_schematic_by_name": {
            "name": "get_schematic_by_name",
            "location": 299,
            "return": [
                "int",
                "Optional[Iterable[int]]",
                "bool",
                "Optional[str]",
                "Optional[Exception]",
                "List[Dict]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "MCAgentMemory.convert_block_object_to_schematic": {
            "name": "convert_block_object_to_schematic",
            "location": 314,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "block_object_memid": [
                    "str",
                    "int"
                ]
            }
        },
        "MCAgentMemory._load_schematics": {
            "name": "_load_schematics",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "load_minecraft_specs": [
                    "bool",
                    "str",
                    "int",
                    "Iterable[Tuple[str,str]]"
                ]
            }
        },
        "MCAgentMemory._load_block_types": {
            "name": "_load_block_types",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "load_block_types": [
                    "bool",
                    "Optional[Tuple[str]]",
                    "Optional[List[str]]",
                    "float",
                    "Callable",
                    "Optional[bool]",
                    "List[str]",
                    "Optional[int]"
                ],
                "load_color": [
                    "bool",
                    "Optional[Tuple[str]]",
                    "Optional[List[str]]",
                    "float",
                    "Callable",
                    "Optional[bool]",
                    "List[str]",
                    "Optional[int]"
                ],
                "load_block_property": [
                    "bool",
                    "Optional[Tuple[str]]",
                    "Optional[List[str]]",
                    "float",
                    "Callable",
                    "Optional[bool]",
                    "List[str]",
                    "Optional[int]"
                ],
                "simple_color": [
                    "bool",
                    "Optional[Tuple[str]]",
                    "Optional[List[str]]",
                    "float",
                    "Callable",
                    "Optional[bool]",
                    "List[str]",
                    "Optional[int]"
                ],
                "load_material": [
                    "bool",
                    "Optional[Tuple[str]]",
                    "Optional[List[str]]",
                    "float",
                    "Callable",
                    "Optional[bool]",
                    "List[str]",
                    "Optional[int]"
                ]
            }
        },
        "MCAgentMemory._load_mob_types": {
            "name": "_load_mob_types",
            "location": 403,
            "return": [
                "None",
                "Iterator[Tuple[str,str]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "load_mob_types": [
                    "bool",
                    "List[Dict[str,Any]]",
                    "List",
                    "List[str]"
                ]
            }
        },
        "MCAgentMemory.set_mob_position": {
            "name": "set_mob_position",
            "location": 431,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "mob": [
                    "int",
                    "List",
                    "Iterable[Any]"
                ]
            }
        },
        "MCAgentMemory.update_item_stack_eid": {
            "name": "update_item_stack_eid",
            "location": 452,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "memid": [
                    "str"
                ],
                "eid": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "MCAgentMemory.set_item_stack_position": {
            "name": "set_item_stack_position",
            "location": 458,
            "return": [
                "Optional[bool]",
                "Sequence[str]",
                "Optional[List[str]]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "item_stack": [
                    "int",
                    "List[int]",
                    "List"
                ]
            }
        },
        "MCAgentMemory.get_all_item_stacks": {
            "name": "get_all_item_stacks",
            "location": 473,
            "return": [
                "int",
                "Set[str]",
                "Dict[Any,int]",
                "List[str]",
                "Dict[str,int]",
                "bool",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "MCAgentMemory.add_dance": {
            "name": "add_dance",
            "location": 481,
            "return": [],
            "arguments": {
                "self": [],
                "dance_fn": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "name": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "tags": [
                    "List",
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/mc_memory_nodes.py": {
        "VoxelObjectNode.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent_memory": [
                    "str",
                    "float",
                    "IO[str]",
                    "IO"
                ],
                "memid": [
                    "str",
                    "float",
                    "IO[str]",
                    "IO"
                ]
            }
        },
        "VoxelObjectNode.get_pos": {
            "name": "get_pos",
            "location": 51,
            "return": [
                "numpy.ndarray",
                "bytes",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VoxelObjectNode.get_point_at_target": {
            "name": "get_point_at_target",
            "location": 54,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VoxelObjectNode.get_bounds": {
            "name": "get_bounds",
            "location": 59,
            "return": [
                "Tuple",
                "Optional[str]",
                "List[List[int]]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VoxelObjectNode.snapshot": {
            "name": "snapshot",
            "location": 64,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "agent_memory": [
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "BlockObjectNode.create": {
            "name": "create",
            "location": 110,
            "return": [
                "int",
                "List[int]",
                "Dict[str, numpy.ndarray]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "List[Dict[str, Any]]",
                    "bool",
                    "Union[str, Iterable[str]]"
                ],
                "memory": [
                    "List[S]",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionSentence]",
                    "List[recidiviz.persistence.entity.state.entities.StateIncarcerationSentence]",
                    "recidiviz.persistence.entity.state.entities.StateSupervisionPeriod"
                ],
                "blocks": [
                    "int",
                    "float",
                    "Optional[bool]",
                    "Sequence",
                    "Optional[int]"
                ]
            }
        },
        "BlockObjectNode.__repr__": {
            "name": "__repr__",
            "location": 137,
            "return": [
                "str",
                "int",
                "float",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstSegNode.create": {
            "name": "create",
            "location": 151,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Union[int, str]",
                    "bool",
                    "dict",
                    "Hashable"
                ],
                "memory": [
                    "str",
                    "bool",
                    "int",
                    "dict"
                ],
                "locs": [
                    "str",
                    "bytes",
                    "Optional[int]",
                    "Set[tuple[Union[int,Any,Any]]]",
                    "List[D]",
                    "Set[Tuple[int,Any,Any]]",
                    "List[DeliveryItem]"
                ],
                "tags": [
                    "List",
                    "str",
                    "bool",
                    "Optional[str]",
                    "bytes",
                    "Iterable[str]"
                ]
            }
        },
        "InstSegNode.__init__": {
            "name": "__init__",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "memory": [
                    "str"
                ],
                "memid": [
                    "str"
                ]
            }
        },
        "InstSegNode.__repr__": {
            "name": "__repr__",
            "location": 198,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MobNode.__init__": {
            "name": "__init__",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent_memory": [
                    "str",
                    "int",
                    "float",
                    "Type",
                    "bool",
                    "Type[numpy.number]"
                ],
                "memid": [
                    "str",
                    "int",
                    "float",
                    "Type",
                    "bool",
                    "Type[numpy.number]"
                ]
            }
        },
        "MobNode.create": {
            "name": "create",
            "location": 232,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "dict"
                ],
                "memory": [
                    "Callable[[str], bool]",
                    "bytes",
                    "dict",
                    "int",
                    "List[recidiviz.persistence.entity.county.entities.Person]"
                ],
                "mob": [
                    "Dict",
                    "str",
                    "Dict[str,Any]"
                ],
                "player_placed": [
                    "bool",
                    "bytes",
                    "numpy.ndarray",
                    "str"
                ],
                "agent_placed": [
                    "bool",
                    "bytes",
                    "numpy.ndarray",
                    "str"
                ]
            }
        },
        "MobNode.get_pos": {
            "name": "get_pos",
            "location": 259,
            "return": [
                "Tuple[Union[int,float,list[float],str,list,list[tuple[Union[Any,Any]]],Pattern]]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MobNode.get_look": {
            "name": "get_look",
            "location": 266,
            "return": [
                "Tuple[Union[str,int,dict[str,list[str]],list[str],dict[str,int],Type]]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MobNode.get_point_at_target": {
            "name": "get_point_at_target",
            "location": 274,
            "return": [
                "bool",
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "MobNode.get_bounds": {
            "name": "get_bounds",
            "location": 281,
            "return": [
                "Tuple",
                "str",
                "Callable",
                "Optional[str]",
                "List[int]",
                "Type",
                "Hashable"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemStackNode.__init__": {
            "name": "__init__",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent_memory": [
                    "str",
                    "int",
                    "float",
                    "Type",
                    "bool",
                    "Type[numpy.number]"
                ],
                "memid": [
                    "str",
                    "int",
                    "float",
                    "Type",
                    "bool",
                    "Type[numpy.number]"
                ]
            }
        },
        "ItemStackNode.create": {
            "name": "create",
            "location": 301,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "str"
                ],
                "memory": [
                    "Dict[str, Any]",
                    "Optional[\"libkol.Item\"]"
                ],
                "item_stack": [
                    "Dict",
                    "Set",
                    "Type"
                ]
            }
        },
        "ItemStackNode.get_pos": {
            "name": "get_pos",
            "location": 324,
            "return": [
                "Tuple[Union[int,float,list[float],str,list,list[tuple[Union[Any,Any]]],Pattern]]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemStackNode.get_point_at_target": {
            "name": "get_point_at_target",
            "location": 332,
            "return": [
                "bool",
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemStackNode.get_bounds": {
            "name": "get_bounds",
            "location": 339,
            "return": [
                "Tuple",
                "str",
                "Callable",
                "Optional[str]",
                "List[int]",
                "Type",
                "Hashable"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchematicNode.__init__": {
            "name": "__init__",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent_memory": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "memid": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "SchematicNode.create": {
            "name": "create",
            "location": 359,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "List[Dict[str, Any]]",
                    "bool",
                    "Union[str, Iterable[str]]"
                ],
                "memory": [
                    "Callable[[numpy.ndarray,numpy.ndarray,bool],numpy.ndarray]",
                    "str",
                    "Callable[numpy.ndarray,numpy.ndarray,bool,numpy.ndarray]",
                    "float",
                    "int",
                    "Optional[float]",
                    "None"
                ],
                "blocks": [
                    "str",
                    "Iterable[numpy.ndarray]",
                    "List[Dict[str,str]]",
                    "bool",
                    "int"
                ]
            }
        },
        "BlockTypeNode.__init__": {
            "name": "__init__",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent_memory": [
                    "str"
                ],
                "memid": [
                    "str"
                ]
            }
        },
        "BlockTypeNode.create": {
            "name": "create",
            "location": 391,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]"
                ],
                "memory": [
                    "str",
                    "int",
                    "util.IDM"
                ],
                "type_name": [
                    "str",
                    "Callable[Any,bool]",
                    "util.IDM",
                    "Callable[[Any],bool]"
                ],
                "idm": [
                    "str",
                    "util.IDM",
                    "Callable[[Any],bool]"
                ]
            }
        },
        "MobTypeNode.__init__": {
            "name": "__init__",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent_memory": [
                    "str"
                ],
                "memid": [
                    "str"
                ]
            }
        },
        "MobTypeNode.create": {
            "name": "create",
            "location": 418,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]"
                ],
                "memory": [
                    "str",
                    "int",
                    "util.IDM"
                ],
                "type_name": [
                    "str",
                    "Callable[Any,bool]",
                    "util.IDM",
                    "Callable[[Any],bool]"
                ],
                "idm": [
                    "str",
                    "util.IDM",
                    "Callable[[Any],bool]"
                ]
            }
        },
        "DanceNode.__init__": {
            "name": "__init__",
            "location": 435,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent_memory": [
                    "bool",
                    "Dict[str,Any]",
                    "Callable[[Any,Any],bool]",
                    "Callable[Any,Any,bool]"
                ],
                "memid": [
                    "bool",
                    "Dict[str,Any]",
                    "Callable[[Any,Any],bool]",
                    "Callable[Any,Any,bool]"
                ]
            }
        },
        "DanceNode.create": {
            "name": "create",
            "location": 441,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "memory": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "None"
                ],
                "dance_fn": [
                    "str",
                    "int",
                    "None",
                    "Dict",
                    "Optional[str]",
                    "float",
                    "Union[bool,int,str]"
                ],
                "name": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[bool]",
                    "bool",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "tags": [
                    "str",
                    "List[str]",
                    "list"
                ]
            }
        },
        "RewardNode.__init__": {
            "name": "__init__",
            "location": 459,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent_memory": [
                    "str",
                    "float",
                    "numpy.ndarray",
                    "List[float]"
                ],
                "memid": [
                    "str",
                    "float",
                    "List[float]",
                    "numpy.ndarray"
                ]
            }
        },
        "RewardNode.create": {
            "name": "create",
            "location": 467,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "str",
                    "Union[int, str]",
                    "dict",
                    "int"
                ],
                "agent_memory": [
                    "Optional[str]",
                    "int",
                    "Optional[float]"
                ],
                "reward_value": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "bytes",
                    "Optional[Mapping[str,Any]]",
                    "Mapping"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/mc_stop_condition.py": {
        "AgentAdjacentStopCondition.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "agent": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "bid": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "AgentAdjacentStopCondition.check": {
            "name": "check",
            "location": 19,
            "return": [
                "bool",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/craftassist/mc_util.py": {
        "adjacent": {
            "name": "adjacent",
            "location": 33,
            "return": [
                "Tuple[tuple[Union[int,str]]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "p": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "build_safe_diag_adjacent": {
            "name": "build_safe_diag_adjacent",
            "location": 45,
            "return": [
                "Tuple[int, int]",
                "T"
            ],
            "arguments": {
                "bounds": [
                    "Dict",
                    "Callable",
                    "Optional[Exception]",
                    "List[dict]",
                    "Exception",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "capped_line_of_sight": {
            "name": "capped_line_of_sight",
            "location": 68,
            "return": [
                "bool",
                "str",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "Optional[List[str]]",
                "List[str]"
            ],
            "arguments": {
                "agent": [
                    "bool"
                ],
                "player_struct": [
                    "str",
                    "bool",
                    "float",
                    "Optional[bytes]",
                    "bytes",
                    "int",
                    "None"
                ],
                "cap": [
                    "int",
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[str]"
                ]
            }
        },
        "cluster_areas": {
            "name": "cluster_areas",
            "location": 79,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "areas": [
                    "Dict[str,Any]",
                    "BaseException",
                    "str"
                ]
            }
        },
        "diag_adjacent": {
            "name": "diag_adjacent",
            "location": 137,
            "return": [
                "List[tuple]",
                "List[str]",
                "List",
                "str",
                "Optional[dict]",
                "Dict[str,Dict[str,str]]",
                "List[float]",
                "int"
            ],
            "arguments": {
                "p": [
                    "int"
                ]
            }
        },
        "discrete_step_dir": {
            "name": "discrete_step_dir",
            "location": 148,
            "return": [
                "str",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "agent": [
                    "bool",
                    "str"
                ]
            }
        },
        "euclid_dist": {
            "name": "euclid_dist",
            "location": 159,
            "return": [
                "float",
                "str",
                "Union[bytes,bytearray]",
                "bytearray",
                "bytes"
            ],
            "arguments": {
                "a": [
                    "Optional[Union[int, float]]"
                ],
                "b": [
                    "Optional[Union[int, float]]"
                ]
            }
        },
        "fill_idmeta": {
            "name": "fill_idmeta",
            "location": 164,
            "return": [
                "List",
                "int",
                "List[tuple]",
                "bool",
                "str"
            ],
            "arguments": {
                "agent": [
                    "int",
                    "float",
                    "Union[int,float]",
                    "bool"
                ],
                "poss": [
                    "int",
                    "dict",
                    "Sequence['cirq.Qid']",
                    "Optional[int]",
                    "List[float]"
                ]
            }
        },
        "get_locs_from_entity": {
            "name": "get_locs_from_entity",
            "location": 178,
            "return": [
                "bool",
                "Tuple[tuple]",
                "Optional[str]",
                "None",
                "Tuple"
            ],
            "arguments": {
                "e": [
                    "str",
                    "Callable",
                    "AbstractSet[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "most_common_idm": {
            "name": "most_common_idm",
            "location": 202,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "idms": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "object_looked_at": {
            "name": "object_looked_at",
            "location": 214,
            "return": [
                "int",
                "List",
                "Tuple[int,int]",
                "List[tuple]"
            ],
            "arguments": {
                "agent": [
                    "Dict",
                    "bool",
                    "List[str]",
                    "List[list[Any]]",
                    "List[List[Any]]",
                    "int"
                ],
                "candidates": [
                    "str",
                    "int",
                    "Sequence[MutableSet[int]]"
                ],
                "player_struct": [
                    "float",
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]"
                ],
                "limit": [
                    "int",
                    "str"
                ],
                "max_distance": [
                    "int",
                    "bool",
                    "bytes",
                    "Optional[Dict[str,Any]]",
                    "List[str]"
                ],
                "loose": [
                    "List[Name]",
                    "bool"
                ]
            }
        },
        "strip_idmeta": {
            "name": "strip_idmeta",
            "location": 271,
            "return": [
                "List",
                "None",
                "List[str]",
                "str",
                "Tuple[int]",
                "int",
                "Dict[int,int]"
            ],
            "arguments": {
                "blockobj": [
                    "None",
                    "Optional[Sequence[float]]",
                    "Iterable",
                    "Optional[Outcome]",
                    "Optional[int]"
                ]
            }
        },
        "to_block_center": {
            "name": "to_block_center",
            "location": 282,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "array": [
                    "float"
                ]
            }
        },
        "to_block_pos": {
            "name": "to_block_pos",
            "location": 287,
            "return": [
                "Callable[[T], bool]",
                "Iterable[T]"
            ],
            "arguments": {
                "array": [
                    "float"
                ]
            }
        },
        "MCTime.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get_world_time": [
                    "int",
                    "str"
                ]
            }
        },
        "MCTime.get_world_hour": {
            "name": "get_world_hour",
            "location": 28,
            "return": [
                "int",
                "str",
                "Optional[List[str]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "build_safe_diag_adjacent.a": {
            "name": "a",
            "location": 49,
            "return": [
                "List[tuple]",
                "str",
                "List[str]",
                "int",
                "Tuple[int,int]"
            ],
            "arguments": {
                "p": [
                    "str",
                    "Union[complex, float, int]",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "cluster_areas.expand_xyzs": {
            "name": "expand_xyzs",
            "location": 86,
            "return": [
                "Tuple",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pos": [
                    "int",
                    "List[List[int]]",
                    "float"
                ],
                "radius": [
                    "int",
                    "List[List[int]]",
                    "float"
                ]
            }
        },
        "cluster_areas.is_intersecting": {
            "name": "is_intersecting",
            "location": 91,
            "return": [
                "bool",
                "int",
                "Tuple",
                "Dict"
            ],
            "arguments": {
                "area1": [
                    "str",
                    "int"
                ],
                "area2": [
                    "str",
                    "int"
                ]
            }
        },
        "cluster_areas.merge_area": {
            "name": "merge_area",
            "location": 100,
            "return": [
                "Tuple[Union[tuple[int],int]]",
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "area1": [
                    "int",
                    "Callable",
                    "str"
                ],
                "area2": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/minecraft_specs.py": {
        "get_block_data": {
            "name": "get_block_data",
            "location": 21,
            "return": [
                "Mapping",
                "List",
                "Dict[str,Any]",
                "Dict[str,Union[Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any]]",
                "bytes",
                "complex",
                "Dict[str,str]",
                "List[str]",
                "float",
                "Set[str]",
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "get_colour_data": {
            "name": "get_colour_data",
            "location": 31,
            "return": [
                "Dict",
                "str",
                "List[str]",
                "IO[bytes]",
                "int",
                "Set[str]",
                "List",
                "bytes",
                "Dict[str,str]",
                "List[dict[str,Any]]"
            ],
            "arguments": {}
        },
        "get_block_property_data": {
            "name": "get_block_property_data",
            "location": 41,
            "return": [
                "str",
                "Dict[str,Any]",
                "None",
                "bytes"
            ],
            "arguments": {}
        },
        "get_mob_property_data": {
            "name": "get_mob_property_data",
            "location": 51,
            "return": [
                "Mapping[str,Any]",
                "str",
                "Dict[str,None]",
                "Dict[str,dict[str,Any]]",
                "None"
            ],
            "arguments": {}
        },
        "get_bid_to_colours": {
            "name": "get_bid_to_colours",
            "location": 58,
            "return": [
                "Dict[,str]",
                "int",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "get_schematics": {
            "name": "get_schematics",
            "location": 70,
            "return": [
                "str",
                "List",
                "List[int]",
                "int",
                "Set[int]",
                "bytes"
            ],
            "arguments": {
                "limit": [
                    "int",
                    "Sequence[str]",
                    "numpy.ndarray",
                    "Optional[Period]"
                ]
            }
        },
        "_pickle_load": {
            "name": "_pickle_load",
            "location": 86,
            "return": [
                "bool",
                "Callable[[Any], bool]",
                "Callable"
            ],
            "arguments": {
                "relpath": [
                    "str",
                    "Iterable[str]",
                    "bytes",
                    "bool",
                    "List[str]",
                    "None",
                    "Optional[str]"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/rotation.py": {
        "transform": {
            "name": "transform",
            "location": 19,
            "return": [
                "List[Union[list[int],list[float],int,float]]",
                "bytes",
                "bytearray",
                "int"
            ],
            "arguments": {
                "coords": [
                    "int",
                    "List",
                    "str"
                ],
                "yaw": [
                    "int",
                    "Callable",
                    "str"
                ],
                "pitch": [
                    "int",
                    "Callable",
                    "str"
                ],
                "inverted": [
                    "bool",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict"
                ]
            }
        },
        "look_vec": {
            "name": "look_vec",
            "location": 56,
            "return": [
                "bool",
                "numpy.ndarray"
            ],
            "arguments": {
                "yaw": [
                    "Dict[str,tuple[Union[int,int]]]",
                    "Dict[str,Tuple[int,int]]",
                    "List",
                    "int",
                    "Tuple[str]",
                    "numpy.ndarray",
                    "Iterable[Any]"
                ],
                "pitch": [
                    "Tuple",
                    "float",
                    "numpy.ndarray"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/search.py": {
        "depth_first_search": {
            "name": "depth_first_search",
            "location": 14,
            "return": [],
            "arguments": {
                "blocks_shape": [],
                "pos": [],
                "fn": [],
                "adj_fn": []
            }
        },
        "astar": {
            "name": "astar",
            "location": 47,
            "return": [
                "None",
                "list[tuple[]]"
            ],
            "arguments": {
                "agent": [],
                "target": [],
                "approx": [
                    "int"
                ],
                "pos": [
                    "typing.Text"
                ]
            }
        },
        "_astar": {
            "name": "_astar",
            "location": 80,
            "return": [
                "list[tuple[]]",
                "None"
            ],
            "arguments": {
                "X": [],
                "start": [],
                "goal": [],
                "approx": [
                    "int"
                ]
            }
        },
        "PriorityQueue.__init__": {
            "name": "__init__",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PriorityQueue.push": {
            "name": "push",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "prio": []
            }
        },
        "PriorityQueue.pop": {
            "name": "pop",
            "location": 147,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PriorityQueue.contains": {
            "name": "contains",
            "location": 152,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "PriorityQueue.replace": {
            "name": "replace",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "newp": []
            }
        },
        "PriorityQueue.__len__": {
            "name": "__len__",
            "location": 164,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/craftassist/shapes.py": {
        "hollow_triangle": {
            "name": "hollow_triangle",
            "location": 23,
            "return": [
                "str",
                "List[tuple[tuple[int]]]",
                "Tuple[Union[list[tuple[tuple[int]]],dict]]"
            ],
            "arguments": {
                "size": [
                    "int",
                    "Tuple",
                    "float",
                    "Tuple[float,float]"
                ],
                "depth": [
                    "int",
                    "Tuple",
                    "float",
                    "Tuple[float,float]"
                ],
                "bid": [
                    "Tuple[int]",
                    "int",
                    "List[str]",
                    "List",
                    "Sequence"
                ],
                "orient": [
                    "Text",
                    "int",
                    "Optional[int]",
                    "str"
                ],
                "thickness": [
                    "int",
                    "List[int]",
                    "List[str]"
                ],
                "labelme": [
                    "bool",
                    "int",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "hollow_rectangle": {
            "name": "hollow_rectangle",
            "location": 60,
            "return": [
                "str",
                "List[Union[Text,int]]",
                "Tuple[Union[list[Union[Text,int]],dict]]"
            ],
            "arguments": {
                "size": [
                    "Tuple[int]",
                    "int",
                    "Optional[int]",
                    "str"
                ],
                "height": [
                    "int",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "length": [
                    "int",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "bid": [
                    "Tuple[int]",
                    "int",
                    "Optional[int]",
                    "str"
                ],
                "thickness": [
                    "int",
                    "Optional[int]",
                    "str"
                ],
                "orient": [
                    "Text",
                    "int",
                    "Optional[int]",
                    "str"
                ],
                "labelme": [
                    "bool",
                    "int",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "rectangle": {
            "name": "rectangle",
            "location": 89,
            "return": [
                "str",
                "bool",
                "List[str]",
                "int"
            ],
            "arguments": {
                "size": [
                    "Tuple[int]",
                    "int",
                    "str",
                    "Tuple[int,int]",
                    "numpy.random.RandomState"
                ],
                "height": [
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "length": [
                    "Optional[int]",
                    "int",
                    "None",
                    "Optional[float]",
                    "float",
                    "Optional[str]",
                    "str"
                ],
                "bid": [
                    "Tuple[int]",
                    "int",
                    "Union[int,float]",
                    "str",
                    "bool"
                ],
                "orient": [
                    "Text",
                    "int",
                    "Optional[int]",
                    "str"
                ],
                "labelme": [
                    "bool",
                    "int",
                    "Union[int,float]",
                    "str"
                ]
            }
        },
        "square": {
            "name": "square",
            "location": 115,
            "return": [
                "int",
                "Dict[str, List[str]]",
                "str",
                "Dict[str, int]",
                "List[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "size": [
                    "int",
                    "float",
                    "bytes"
                ],
                "bid": [
                    "int",
                    "Tuple[int]"
                ],
                "orient": [
                    "int",
                    "Text"
                ],
                "labelme": [
                    "int",
                    "bool"
                ]
            }
        },
        "triangle": {
            "name": "triangle",
            "location": 121,
            "return": [
                "str",
                "List[tuple[tuple[int]]]",
                "Tuple[Union[list[tuple[tuple[int]]],dict]]"
            ],
            "arguments": {
                "size": [
                    "int",
                    "Tuple",
                    "float",
                    "Tuple[float,float]"
                ],
                "bid": [
                    "Tuple[int]",
                    "int",
                    "List[str]",
                    "List",
                    "Sequence"
                ],
                "orient": [
                    "Text",
                    "int",
                    "Optional[int]",
                    "str"
                ],
                "thickness": [
                    "int",
                    "Tuple",
                    "float",
                    "Tuple[float,float]"
                ],
                "labelme": [
                    "bool",
                    "int",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "circle": {
            "name": "circle",
            "location": 150,
            "return": [
                "str",
                "List[tuple[tuple[int]]]",
                "Tuple[Union[list[tuple[tuple[int]]],dict]]"
            ],
            "arguments": {
                "radius": [
                    "int",
                    "float",
                    "Union[float,int]"
                ],
                "size": [
                    "None",
                    "int",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Callable]",
                    "bool",
                    "Optional[numpy.ndarray]"
                ],
                "bid": [
                    "Tuple[int]",
                    "int",
                    "List",
                    "bytes",
                    "Sequence[int]",
                    "numpy.ndarray"
                ],
                "orient": [
                    "Text",
                    "int",
                    "float",
                    "bool",
                    "str",
                    "Optional[List[str]]"
                ],
                "thickness": [
                    "int",
                    "bool",
                    "float"
                ],
                "labelme": [
                    "bool",
                    "int",
                    "float",
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "disk": {
            "name": "disk",
            "location": 183,
            "return": [
                "str",
                "List[tuple[tuple[int]]]",
                "Tuple[Union[list[tuple[tuple[int]]],dict]]"
            ],
            "arguments": {
                "radius": [
                    "int",
                    "float"
                ],
                "size": [
                    "None",
                    "int",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Callable]",
                    "bool",
                    "Optional[numpy.ndarray]"
                ],
                "bid": [
                    "Tuple[int]",
                    "int",
                    "List",
                    "bytes",
                    "Sequence[int]",
                    "numpy.ndarray"
                ],
                "orient": [
                    "Text",
                    "int",
                    "float",
                    "bool",
                    "str",
                    "Optional[List[str]]"
                ],
                "thickness": [
                    "int",
                    "Optional[int]",
                    "List",
                    "float"
                ],
                "labelme": [
                    "bool",
                    "int",
                    "float",
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "rectanguloid": {
            "name": "rectanguloid",
            "location": 210,
            "return": [
                "str",
                "List[tuple[tuple[int]]]",
                "Tuple[Union[list[tuple[tuple[int]]],dict[str,Union[Any,str]],str,float,list[int],int]]"
            ],
            "arguments": {
                "size": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ],
                "depth": [
                    "int",
                    "None",
                    "Optional[int]",
                    "Tuple",
                    "List[Issue]",
                    "List[I]"
                ],
                "height": [
                    "int",
                    "None",
                    "Tuple",
                    "List[Issue]",
                    "List[I]",
                    "Union[int,None]",
                    "Optional[int]"
                ],
                "width": [
                    "int",
                    "None",
                    "Tuple",
                    "Optional[int]",
                    "Union[int,None]",
                    "List[I]",
                    "List[Issue]"
                ],
                "bid": [
                    "Tuple[int]",
                    "int",
                    "List[int]",
                    "List[List[int]]",
                    "List",
                    "bytes",
                    "List[Dict[str,Any]]"
                ],
                "labelme": [
                    "bool",
                    "int",
                    "str",
                    "Optional[Dict[str,str]]",
                    "Optional[int]",
                    "List[int]"
                ]
            }
        },
        "near_extremes": {
            "name": "near_extremes",
            "location": 244,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "a": [
                    "int",
                    "float"
                ],
                "b": [
                    "int",
                    "float"
                ],
                "r": [
                    "int",
                    "float"
                ]
            }
        },
        "rectanguloid_frame": {
            "name": "rectanguloid_frame",
            "location": 253,
            "return": [
                "str",
                "List[tuple]",
                "Tuple[Union[list[tuple],dict]]"
            ],
            "arguments": {
                "size": [
                    "int",
                    "bool"
                ],
                "thickness": [
                    "int",
                    "Tuple[int,int]",
                    "str"
                ],
                "bid": [
                    "Tuple[int]",
                    "int",
                    "bool"
                ],
                "only_corners": [
                    "bool",
                    "int",
                    "Tuple",
                    "float",
                    "Tuple[float,float]"
                ],
                "labelme": [
                    "bool",
                    "int"
                ]
            }
        },
        "hollow_rectanguloid": {
            "name": "hollow_rectanguloid",
            "location": 270,
            "return": [
                "str"
            ],
            "arguments": {
                "size": [
                    "int",
                    "bool"
                ],
                "thickness": [
                    "int",
                    "float",
                    "bytes"
                ],
                "bid": [
                    "Tuple[int]",
                    "int",
                    "List",
                    "bytes",
                    "bool",
                    "List[int]"
                ],
                "labelme": [
                    "bool",
                    "int",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "cube": {
            "name": "cube",
            "location": 318,
            "return": [
                "int",
                "Dict[str, List[str]]",
                "str",
                "Dict[str, int]",
                "List[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "size": [
                    "int",
                    "float"
                ],
                "bid": [
                    "int",
                    "Tuple[int]"
                ],
                "labelme": [
                    "int",
                    "bool"
                ]
            }
        },
        "hollow_cube": {
            "name": "hollow_cube",
            "location": 324,
            "return": [
                "Dict[str, int]",
                "int",
                "str",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "size": [
                    "int"
                ],
                "thickness": [
                    "int"
                ],
                "bid": [
                    "int",
                    "Tuple[int]"
                ],
                "labelme": [
                    "int",
                    "bool"
                ]
            }
        },
        "sphere": {
            "name": "sphere",
            "location": 330,
            "return": [
                "str",
                "List[tuple[tuple[int]]]",
                "Tuple[Union[list[tuple[tuple[int]]],dict[tuple,list[Text]]]]"
            ],
            "arguments": {
                "radius": [
                    "int",
                    "float",
                    "Union[float,int]"
                ],
                "size": [
                    "None",
                    "int",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Callable]",
                    "bool",
                    "Optional[numpy.ndarray]"
                ],
                "bid": [
                    "Tuple[int]",
                    "int",
                    "List[List[int]]",
                    "bytes",
                    "List[int]",
                    "List[Dict[str,Any]]",
                    "List",
                    "bool"
                ],
                "labelme": [
                    "bool",
                    "int",
                    "float",
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "spherical_shell": {
            "name": "spherical_shell",
            "location": 355,
            "return": [
                "str",
                "List[tuple[tuple[int]]]",
                "Optional[str]",
                "Tuple[Union[list[tuple[tuple[int]]],dict[tuple,list[Text]],list[str]]]"
            ],
            "arguments": {
                "radius": [
                    "int",
                    "float",
                    "Union[float,int]"
                ],
                "size": [
                    "None",
                    "int",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Callable]",
                    "bool",
                    "Optional[numpy.ndarray]"
                ],
                "thickness": [
                    "int",
                    "float",
                    "List[numpy.array]"
                ],
                "bid": [
                    "Tuple[int]",
                    "int",
                    "List",
                    "List[Dict[str,Any]]"
                ],
                "labelme": [
                    "bool",
                    "float",
                    "List[numpy.array]",
                    "int"
                ]
            }
        },
        "square_pyramid": {
            "name": "square_pyramid",
            "location": 391,
            "return": [
                "str"
            ],
            "arguments": {
                "slope": [
                    "int",
                    "str",
                    "Optional[int]",
                    "bool"
                ],
                "radius": [
                    "int",
                    "List[int]",
                    "float",
                    "str"
                ],
                "size": [
                    "Optional[str]",
                    "int",
                    "None",
                    "Optional[float]",
                    "float"
                ],
                "height": [
                    "int",
                    "None",
                    "Optional[int]",
                    "bool"
                ],
                "bid": [
                    "Tuple[int]",
                    "int",
                    "Tuple",
                    "float"
                ],
                "labelme": [
                    "bool",
                    "Sequence[str]",
                    "float",
                    "int",
                    "List[T]"
                ]
            }
        },
        "tower": {
            "name": "tower",
            "location": 458,
            "return": [
                "List[tuple[tuple[int]]]",
                "Tuple[Union[list[tuple[tuple[int]]],dict]]",
                "int",
                "Dict[str,List[str]]",
                "str",
                "Dict[str,int]",
                "List[Dict[str,Any]]",
                "bool"
            ],
            "arguments": {
                "height": [
                    "int",
                    "Sequence[Any]"
                ],
                "size": [
                    "float",
                    "None",
                    "int",
                    "Optional[int]",
                    "str",
                    "Optional[str]",
                    "Dict",
                    "Optional[dict]",
                    "numpy.ndarray"
                ],
                "base": [
                    "int"
                ],
                "bid": [
                    "Tuple[int]",
                    "numpy.ndarray",
                    "float",
                    "List[int]"
                ],
                "labelme": [
                    "bool",
                    "int",
                    "Optional[dict]",
                    "bytes"
                ]
            }
        },
        "ellipsoid": {
            "name": "ellipsoid",
            "location": 489,
            "return": [
                "str",
                "List[tuple[tuple[int]]]",
                "Tuple[Union[list[tuple[tuple[int]]],dict]]"
            ],
            "arguments": {
                "size": [
                    "Tuple[int]",
                    "int",
                    "bool"
                ],
                "bid": [
                    "Tuple[int]",
                    "int",
                    "List",
                    "bytes",
                    "bool",
                    "List[int]"
                ],
                "labelme": [
                    "bool",
                    "int",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "dome": {
            "name": "dome",
            "location": 518,
            "return": [
                "str",
                "List[tuple[tuple[int]]]",
                "Tuple[Union[list[tuple[tuple[int]]],dict]]"
            ],
            "arguments": {
                "radius": [
                    "int",
                    "float"
                ],
                "size": [
                    "None",
                    "int",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Callable]",
                    "bool",
                    "Optional[numpy.ndarray]"
                ],
                "bid": [
                    "Tuple[int]",
                    "int",
                    "List[List[int]]",
                    "bytes",
                    "List[int]",
                    "List[Dict[str,Any]]",
                    "List",
                    "bool"
                ],
                "thickness": [
                    "int",
                    "str"
                ],
                "labelme": [
                    "bool",
                    "int",
                    "float",
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "arch": {
            "name": "arch",
            "location": 546,
            "return": [
                "str",
                "List[tuple[tuple[int]]]",
                "Tuple[Union[list[tuple[tuple[int]]],dict]]"
            ],
            "arguments": {
                "size": [
                    "int",
                    "Tuple",
                    "float",
                    "Tuple[float,float]"
                ],
                "distance": [
                    "int",
                    "Optional[int]",
                    "float",
                    "Optional[float]",
                    "Union[int,float]"
                ],
                "bid": [
                    "Tuple[int]",
                    "int",
                    "List[str]",
                    "List",
                    "Sequence"
                ],
                "orient": [
                    "Text",
                    "int",
                    "Optional[int]",
                    "str"
                ],
                "labelme": [
                    "bool",
                    "int",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "get_rect_instance_seg": {
            "name": "get_rect_instance_seg",
            "location": 603,
            "return": [
                "int",
                "Optional[int]",
                "list"
            ],
            "arguments": {
                "bx": [
                    "int"
                ],
                "by": [
                    "int"
                ],
                "bz": [
                    "int"
                ]
            }
        },
        "labels_from_instance_seg": {
            "name": "labels_from_instance_seg",
            "location": 641,
            "return": [
                "Set[str]",
                "None",
                "Dict[str,Any]",
                "List[Match]",
                "List[str]",
                "Callable",
                "Dict[str,str]",
                "Any",
                "bool",
                "MutableMapping",
                "Dict[Text,list[Text]]"
            ],
            "arguments": {
                "I": [
                    "bool",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "int",
                    "dict"
                ],
                "L": [
                    "Dict[str,Any]",
                    "None",
                    "Callable",
                    "MutableMapping",
                    "Optional[Any]",
                    "Any"
                ]
            }
        },
        "get_bounds": {
            "name": "get_bounds",
            "location": 655,
            "return": [
                "Tuple[Union[int,str,bytes]]",
                "int",
                "Type[T]",
                "List[int]",
                "bool",
                "Tuple"
            ],
            "arguments": {
                "S": [
                    "str",
                    "List[str]",
                    "List[Dict[str,str]]",
                    "List[dict[str,str]]"
                ]
            }
        },
        "mirror": {
            "name": "mirror",
            "location": 665,
            "return": [
                "List[Union[tuple[Union[Text,int,float]],Text]]",
                "str",
                "Optional[Union[str,Any]]",
                "Set[str]",
                "Dict"
            ],
            "arguments": {
                "S": [
                    "str",
                    "Dict[str,Any]",
                    "int"
                ],
                "axis": [
                    "int",
                    "str",
                    "Dict[str,str]"
                ]
            }
        },
        "arrange": {
            "name": "arrange",
            "location": 683,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "arrangement": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "schematic": [
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "str",
                    "Optional[float]",
                    "int",
                    "float"
                ],
                "shapeparams": [
                    "Dict",
                    "Dict[str,Any]",
                    "str"
                ]
            }
        },
        "hollow_rectangle.close_to_border": {
            "name": "close_to_border",
            "location": 75,
            "return": [
                "bool"
            ],
            "arguments": {
                "r": [
                    "numpy.ndarray",
                    "float"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/shape_helpers.py": {
        "bid": {
            "name": "bid",
            "location": 58,
            "return": [
                "Tuple",
                "bool",
                "str",
                "bytes"
            ],
            "arguments": {}
        },
        "bernoulli": {
            "name": "bernoulli",
            "location": 89,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "p": [
                    "float",
                    "int"
                ]
            }
        },
        "slope": {
            "name": "slope",
            "location": 93,
            "return": [
                "List[int]",
                "int",
                "float"
            ],
            "arguments": {
                "ranges": [
                    "int",
                    "float",
                    "Sequence[T]"
                ]
            }
        },
        "sizes1": {
            "name": "sizes1",
            "location": 97,
            "return": [
                "Dict[str, int]",
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "ranges": [
                    "Tuple[int]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "sizes2": {
            "name": "sizes2",
            "location": 103,
            "return": [
                "Tuple",
                "int",
                "Optional[int]",
                "str",
                "List[int]"
            ],
            "arguments": {
                "ranges": [
                    "Tuple[int]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "sizes3": {
            "name": "sizes3",
            "location": 110,
            "return": [
                "Tuple",
                "int",
                "Optional[int]",
                "str",
                "List[int]"
            ],
            "arguments": {
                "ranges": [
                    "int",
                    "Tuple[int]"
                ]
            }
        },
        "orientation2": {
            "name": "orientation2",
            "location": 121,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "orientation3": {
            "name": "orientation3",
            "location": 125,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "options_rectangle": {
            "name": "options_rectangle",
            "location": 129,
            "return": [
                "Dict[Text,]",
                "str",
                "int",
                "List[List[int]]",
                "Type",
                "bool"
            ],
            "arguments": {}
        },
        "options_square": {
            "name": "options_square",
            "location": 133,
            "return": [
                "Dict[Text,]",
                "str",
                "int",
                "List[List[int]]",
                "Type",
                "bool"
            ],
            "arguments": {}
        },
        "options_triangle": {
            "name": "options_triangle",
            "location": 137,
            "return": [
                "Dict[Text,]",
                "str",
                "int",
                "List[List[int]]",
                "Type",
                "bool"
            ],
            "arguments": {}
        },
        "options_circle": {
            "name": "options_circle",
            "location": 141,
            "return": [
                "Dict[Text,]",
                "bool",
                "Dict[str,str]",
                "Dict[str,Any]",
                "List[Dict]",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "options_disk": {
            "name": "options_disk",
            "location": 145,
            "return": [
                "Dict[Text,]",
                "bool",
                "Dict[str,str]",
                "Dict[str,Any]",
                "List[Dict]",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "options_cube": {
            "name": "options_cube",
            "location": 149,
            "return": [
                "Dict[Text,]",
                "bool",
                "Type",
                "int",
                "Optional[numpy.ndarray]"
            ],
            "arguments": {}
        },
        "options_hollow_cube": {
            "name": "options_hollow_cube",
            "location": 153,
            "return": [
                "Dict[Text,]",
                "str",
                "int",
                "List[List[int]]",
                "Type",
                "bool"
            ],
            "arguments": {}
        },
        "options_rectanguloid": {
            "name": "options_rectanguloid",
            "location": 157,
            "return": [
                "Dict[Text,]",
                "bool",
                "Type",
                "int",
                "Optional[numpy.ndarray]"
            ],
            "arguments": {}
        },
        "options_hollow_rectanguloid": {
            "name": "options_hollow_rectanguloid",
            "location": 161,
            "return": [
                "Dict[Text,]",
                "str",
                "int",
                "List[List[int]]",
                "Type",
                "bool"
            ],
            "arguments": {}
        },
        "options_sphere": {
            "name": "options_sphere",
            "location": 165,
            "return": [
                "Dict[Text,]",
                "List[int]",
                "Dict[str,Any]",
                "List[dict]",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "options_spherical_shell": {
            "name": "options_spherical_shell",
            "location": 169,
            "return": [
                "Dict[Text,]",
                "int",
                "bool",
                "Dict[str,str]",
                "str"
            ],
            "arguments": {}
        },
        "options_square_pyramid": {
            "name": "options_square_pyramid",
            "location": 173,
            "return": [
                "Dict[Text,]",
                "List[int]",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "options_tower": {
            "name": "options_tower",
            "location": 177,
            "return": [
                "str",
                "Dict[Text,]"
            ],
            "arguments": {}
        },
        "options_ellipsoid": {
            "name": "options_ellipsoid",
            "location": 181,
            "return": [
                "Dict[Text,]",
                "str",
                "int",
                "List[List[int]]",
                "Type",
                "bool"
            ],
            "arguments": {}
        },
        "options_dome": {
            "name": "options_dome",
            "location": 185,
            "return": [
                "Dict[Text,]",
                "bool",
                "Dict[str,str]",
                "Dict[str,Any]",
                "List[Dict]",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "options_arch": {
            "name": "options_arch",
            "location": 189,
            "return": [
                "Dict[Text,]",
                "bool",
                "int",
                "str",
                "float",
                "Optional[str]",
                "Optional[float]"
            ],
            "arguments": {}
        },
        "options_hollow_triangle": {
            "name": "options_hollow_triangle",
            "location": 193,
            "return": [
                "Dict[Text,]",
                "str",
                "int",
                "List[List[int]]",
                "Type",
                "bool"
            ],
            "arguments": {}
        },
        "options_hollow_rectangle": {
            "name": "options_hollow_rectangle",
            "location": 197,
            "return": [
                "Dict[Text,]",
                "str",
                "int",
                "List[List[int]]",
                "Type",
                "bool"
            ],
            "arguments": {}
        },
        "options_rectanguloid_frame": {
            "name": "options_rectanguloid_frame",
            "location": 201,
            "return": [
                "Dict[Text,]",
                "str",
                "int",
                "List[List[int]]",
                "Type",
                "bool"
            ],
            "arguments": {}
        },
        "shape_to_dicts": {
            "name": "shape_to_dicts",
            "location": 205,
            "return": [
                "List[dict[Text,Text]]",
                "numpy.ndarray",
                "bytes"
            ],
            "arguments": {
                "S": [
                    "str",
                    "frozenset",
                    "Optional[str]",
                    "FrozenSet[int]"
                ]
            }
        },
        "build_shape_scene": {
            "name": "build_shape_scene",
            "location": 212,
            "return": [
                "List",
                "int",
                "Dict[str,int]",
                "BaseException",
                "Exception",
                "List[str]"
            ],
            "arguments": {}
        }
    },
    "craftassist-master/python/craftassist/shape_transforms.py": {
        "maybe_convert_to_npy": {
            "name": "maybe_convert_to_npy",
            "location": 10,
            "return": [
                "str",
                "Type[T]",
                "int"
            ],
            "arguments": {
                "blocks": [
                    "numpy.ndarray",
                    "float",
                    "Sequence[numpy.ndarray]"
                ]
            }
        },
        "maybe_convert_to_list": {
            "name": "maybe_convert_to_list",
            "location": 20,
            "return": [
                "str",
                "List[int]",
                "List[tuple[tuple]]"
            ],
            "arguments": {
                "blocks": [
                    "List[int]",
                    "Optional[List[int]]",
                    "Dict[str,object]",
                    "Optional[str]"
                ]
            }
        },
        "flint": {
            "name": "flint",
            "location": 28,
            "return": [
                "int",
                "float",
                "numpy.ndarray",
                "torch.FloatTensor"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "str",
                    "T"
                ]
            }
        },
        "ceint": {
            "name": "ceint",
            "location": 32,
            "return": [
                "int",
                "float",
                "numpy.ndarray",
                "torch.FloatTensor"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "str",
                    "T"
                ]
            }
        },
        "check_boundary": {
            "name": "check_boundary",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "p": [
                    "List",
                    "float",
                    "bool",
                    "Iterable",
                    "numpy.ndarray"
                ],
                "m": [
                    "List",
                    "float",
                    "bool",
                    "Iterable",
                    "numpy.ndarray"
                ],
                "M": [
                    "List",
                    "float",
                    "bool",
                    "Iterable",
                    "numpy.ndarray"
                ]
            }
        },
        "reshift": {
            "name": "reshift",
            "location": 50,
            "return": [
                "List[tuple[Union[tuple,Text]]]",
                "int",
                "str",
                "Union[bytes,bytearray]",
                "bytearray"
            ],
            "arguments": {
                "shape": [
                    "str",
                    "Optional[str]",
                    "numpy.array"
                ]
            }
        },
        "moment_at_center": {
            "name": "moment_at_center",
            "location": 55,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "npy": [
                    "Tuple[Union[int,int]]",
                    "int",
                    "Tuple[int,int]",
                    "numpy.matrix",
                    "FrozenSet[int]"
                ],
                "sl": [
                    "int",
                    "numpy.ndarray",
                    "str",
                    "torch.ByteTensor"
                ]
            }
        },
        "thicker_blocks": {
            "name": "thicker_blocks",
            "location": 83,
            "return": [
                "List[list]",
                "str",
                "List[Dict]",
                "List[List[Any]]",
                "List[int]",
                "List"
            ],
            "arguments": {
                "blocks": [
                    "int"
                ],
                "delta": [
                    "int",
                    "float",
                    "SupportsFloat"
                ]
            }
        },
        "thicker": {
            "name": "thicker",
            "location": 94,
            "return": [
                "str",
                "int",
                "bool",
                "Callable"
            ],
            "arguments": {
                "blocks": [
                    "bool"
                ],
                "delta": [
                    "int",
                    "str",
                    "Exception"
                ]
            }
        },
        "get_loc_weight": {
            "name": "get_loc_weight",
            "location": 106,
            "return": [
                "Tuple[tuple[Union[int,float]]]",
                "str",
                "bool"
            ],
            "arguments": {
                "idx": [
                    "int",
                    "float",
                    "torch.Tensor",
                    "Tuple[int,int]",
                    "numpy.ndarray",
                    "str",
                    "bool"
                ],
                "cell_size": [
                    "int",
                    "Tuple[Union[int,int]]",
                    "float",
                    "str",
                    "torch.Tensor",
                    "Tuple[int,int]",
                    "numpy.ndarray",
                    "bool"
                ]
            }
        },
        "get_cell_weights": {
            "name": "get_cell_weights",
            "location": 123,
            "return": [
                "Tuple[Union[None,tuple[str],list[Union[tuple[Union[str,str,str]],str,dict[str,Union[int,str]]]],float]]",
                "str",
                "bool"
            ],
            "arguments": {
                "idxs": [
                    "str",
                    "int"
                ],
                "cell_szs": [
                    "str",
                    "int"
                ]
            }
        },
        "scale": {
            "name": "scale",
            "location": 149,
            "return": [
                "int",
                "str",
                "Callable",
                "Dict[str,Any]",
                "List[int]"
            ],
            "arguments": {
                "blocks": [
                    "int",
                    "float",
                    "str",
                    "List[str]",
                    "Iterator",
                    "Iterator[Any]",
                    "bool"
                ],
                "lams": [
                    "Tuple[float]",
                    "int",
                    "str"
                ]
            }
        },
        "scale_sparse": {
            "name": "scale_sparse",
            "location": 172,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "blocks": [
                    "Union[int,slice]",
                    "int"
                ],
                "lams": [
                    "Tuple[float]",
                    "Callable[[T,T],T]",
                    "T"
                ]
            }
        },
        "shrink_sample": {
            "name": "shrink_sample",
            "location": 204,
            "return": [
                "int",
                "str",
                "Callable",
                "Tuple",
                "List",
                "Tuple[Union[Literal,Literal,Literal,Literal]]",
                "Dict[str,Any]",
                "bytes"
            ],
            "arguments": {
                "blocks": [
                    "str",
                    "int"
                ],
                "lams": [
                    "Set"
                ]
            }
        },
        "rotate": {
            "name": "rotate",
            "location": 226,
            "return": [
                "numpy.ndarray",
                "List[dict]",
                "torch.FloatTensor",
                "str",
                "bytearray",
                "int",
                "bytes"
            ],
            "arguments": {
                "blocks": [
                    "int",
                    "float",
                    "str",
                    "List[str]",
                    "Iterator",
                    "Iterator[Any]",
                    "bool"
                ],
                "angle": [
                    "int",
                    "Type"
                ],
                "mirror": [
                    "int",
                    "str"
                ],
                "plane": [
                    "Text",
                    "int",
                    "str"
                ]
            }
        },
        "hash_idm": {
            "name": "hash_idm",
            "location": 248,
            "return": [
                "bytes",
                "Callable",
                "T",
                "int",
                "IO"
            ],
            "arguments": {
                "npy": [
                    "bytes",
                    "Callable",
                    "T",
                    "int",
                    "IO"
                ]
            }
        },
        "unhash_idm": {
            "name": "unhash_idm",
            "location": 252,
            "return": [
                "int",
                "bytes",
                "torch.BoolTensor",
                "str"
            ],
            "arguments": {
                "npy": [
                    "torch.Tensor",
                    "tuple",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "replace_by_blocktype": {
            "name": "replace_by_blocktype",
            "location": 260,
            "return": [
                "dict",
                "Callable",
                "List[str]",
                "int"
            ],
            "arguments": {
                "blocks": [
                    "int"
                ],
                "new_idm": [
                    "Tuple[int]",
                    "int",
                    "numpy.ndarray",
                    "Union[int,numpy.ndarray]",
                    "bool"
                ],
                "current_idm": [
                    "None",
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray"
                ],
                "every_n": [
                    "Tuple[int]",
                    "numpy.ndarray",
                    "int",
                    "Sequence[int]",
                    "Callable[,int]"
                ],
                "replace_every": [
                    "bool",
                    "int",
                    "str",
                    "numpy.random.RandomState"
                ]
            }
        },
        "replace_by_halfspace": {
            "name": "replace_by_halfspace",
            "location": 297,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "blocks": [
                    "bool"
                ],
                "new_idm": [
                    "Tuple[int]",
                    "int",
                    "str",
                    "bool"
                ],
                "geometry": [],
                "replace_every": [
                    "bool",
                    "numpy.ndarray",
                    "str",
                    "Type",
                    "Dict[str,Any]",
                    "Optional[ModelOrDc]"
                ]
            }
        },
        "maybe_update_extreme_loc": {
            "name": "maybe_update_extreme_loc",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "extremes": [
                    "int",
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ],
                "loc": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "axis": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "get_index_from_proj": {
            "name": "get_index_from_proj",
            "location": 352,
            "return": [
                "Tuple[Union[int,list[dict[str,Any]],list[str],frozenset,Sequence[float]]]",
                "str",
                "torch.Tensor",
                "bytes",
                "int"
            ],
            "arguments": {
                "proj": [
                    "Optional[int]",
                    "numpy.array",
                    "int"
                ],
                "proj_axes": [
                    "Tuple[Union[int,int]]",
                    "torch.Tensor",
                    "int",
                    "Tuple[int,int]"
                ],
                "i": [
                    "List[dict[str,Any]]",
                    "List[str]",
                    "List[Dict[str,Any]]",
                    "int",
                    "frozenset",
                    "Sequence[float]",
                    "torch.Tensor",
                    "frozenset[str]",
                    "numpy.ndarray"
                ]
            }
        },
        "maybe_fill_line": {
            "name": "maybe_fill_line",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "old_npy": [
                    "str",
                    "int",
                    "List[int]"
                ],
                "new_npy": [
                    "str",
                    "int",
                    "Dict"
                ],
                "proj": [
                    "str",
                    "int",
                    "List[int]"
                ],
                "extremes": [
                    "Optional[str]",
                    "List[str]",
                    "str"
                ],
                "proj_axes": [
                    "str",
                    "int",
                    "List[int]"
                ],
                "fill_material": [
                    "str",
                    "None",
                    "int",
                    "Iterable[str]",
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "fill_flat": {
            "name": "fill_flat",
            "location": 382,
            "return": [
                "bool",
                "str",
                "Hashable",
                "numpy.ndarray"
            ],
            "arguments": {
                "blocks": [
                    "str",
                    "Exception"
                ],
                "fill_material": [
                    "str",
                    "Exception",
                    "None"
                ]
            }
        },
        "hollow": {
            "name": "hollow",
            "location": 415,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "blocks": [
                    "float",
                    "str"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/size_words.py": {
        "size_str_to_int": {
            "name": "size_str_to_int",
            "location": 25,
            "return": [
                "str",
                "int",
                "float",
                "List[int]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int",
                    "Dict"
                ],
                "ranges": [
                    "Dict[Text,tuple[int]]",
                    "str",
                    "int",
                    "Dict"
                ]
            }
        },
        "size_str_to_range": {
            "name": "size_str_to_range",
            "location": 30,
            "return": [
                "List[tuple[int]]",
                "List",
                "List[Dict[str,Any]]",
                "Dict"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "ranges": [
                    "str",
                    "dict",
                    "List[Union[int, float]]",
                    "numpy.ndarray",
                    "list"
                ]
            }
        },
        "size_int_to_str": {
            "name": "size_int_to_str",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "int",
                    "Sequence",
                    "Type",
                    "SupportsFloat",
                    "numpy.array",
                    "T",
                    "Type[DataclassT]"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/sql_script.py": {
        "main": {
            "name": "main",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "SQLConverter.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLConverter.run": {
            "name": "run",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action_dict": [
                    "Dict[str,dict]",
                    "bool"
                ]
            }
        },
        "SQLConverter.convert_sql_query": {
            "name": "convert_sql_query",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action_dict": [
                    "Dict",
                    "Dict[str,Any]",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "SQLConverter.process_input_dataset": {
            "name": "process_input_dataset",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/craftassist/tasks.py": {
        "Dance.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [],
                "task_data": []
            }
        },
        "Dance.step": {
            "name": "step",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "DanceMove.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [],
                "task_data": []
            }
        },
        "DanceMove.step": {
            "name": "step",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "Point.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [],
                "task_data": []
            }
        },
        "Point.step": {
            "name": "step",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "Move.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [],
                "task_data": []
            }
        },
        "Move.step": {
            "name": "step",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "Move.handle_no_path": {
            "name": "handle_no_path",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "Move.__repr__": {
            "name": "__repr__",
            "location": 224,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Build.__init__": {
            "name": "__init__",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [],
                "task_data": []
            }
        },
        "Build.step": {
            "name": "step",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "Build.add_tags": {
            "name": "add_tags",
            "location": 446,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [],
                "block": []
            }
        },
        "Build.finish": {
            "name": "finish",
            "location": 470,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "Build.get_next_place_target": {
            "name": "get_next_place_target",
            "location": 484,
            "return": [],
            "arguments": {
                "self": [],
                "agent": [],
                "current": [],
                "diff": []
            }
        },
        "Build.get_next_destroy_target": {
            "name": "get_next_destroy_target",
            "location": 508,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [],
                "xyzs": []
            }
        },
        "Build.step_any_dir": {
            "name": "step_any_dir",
            "location": 520,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "Build.undo": {
            "name": "undo",
            "location": 540,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "Build.__repr__": {
            "name": "__repr__",
            "location": 570,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fill.__init__": {
            "name": "__init__",
            "location": 575,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [],
                "task_data": []
            }
        },
        "Fill.step": {
            "name": "step",
            "location": 582,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "Fill.undo": {
            "name": "undo",
            "location": 607,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "Destroy.__init__": {
            "name": "__init__",
            "location": 613,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [],
                "task_data": []
            }
        },
        "Destroy.step": {
            "name": "step",
            "location": 621,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "Destroy.undo": {
            "name": "undo",
            "location": 664,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "Undo.__init__": {
            "name": "__init__",
            "location": 670,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [],
                "task_data": []
            }
        },
        "Undo.step": {
            "name": "step",
            "location": 675,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "Undo.__repr__": {
            "name": "__repr__",
            "location": 684,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Spawn.__init__": {
            "name": "__init__",
            "location": 689,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [],
                "task_data": []
            }
        },
        "Spawn.find_nearby_new_mob": {
            "name": "find_nearby_new_mob",
            "location": 697,
            "return": [
                "tuple[typing.Optional[int]]"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "Spawn.step": {
            "name": "step",
            "location": 713,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "Dig.__init__": {
            "name": "__init__",
            "location": 756,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [],
                "task_data": []
            }
        },
        "Dig.undo": {
            "name": "undo",
            "location": 765,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "Dig.step": {
            "name": "step",
            "location": 769,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "Get.__init__": {
            "name": "__init__",
            "location": 804,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [],
                "task_data": []
            }
        },
        "Get.step": {
            "name": "step",
            "location": 814,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "Drop.__init__": {
            "name": "__init__",
            "location": 847,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [],
                "task_data": []
            }
        },
        "Drop.find_nearby_new_item_stack": {
            "name": "find_nearby_new_item_stack",
            "location": 853,
            "return": [
                "tuple[typing.Optional[int]]"
            ],
            "arguments": {
                "self": [],
                "agent": [],
                "id": [],
                "meta": []
            }
        },
        "Drop.step": {
            "name": "step",
            "location": 869,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "Loop.__init__": {
            "name": "__init__",
            "location": 900,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [],
                "task_data": []
            }
        },
        "Loop.step": {
            "name": "step",
            "location": 906,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "Destroy.step.to_destroy_schm": {
            "name": "to_destroy_schm",
            "location": 631,
            "return": [
                "list[tuple[tuple[int]]]"
            ],
            "arguments": {
                "block_list": []
            }
        }
    },
    "craftassist-master/python/craftassist/ttad_repl.py": {},
    "craftassist-master/python/craftassist/web_app_socket.py": {
        "convert": {
            "name": "convert",
            "location": 25,
            "return": [
                "Dict[str,str]",
                "Dict[str,Any]",
                "int",
                "bool",
                "str",
                "bytes"
            ],
            "arguments": {
                "dictionary": [
                    "Dict[str,str]",
                    "T"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/word_maps.py": {},
    "craftassist-master/python/craftassist/__init__.py": {},
    "craftassist-master/python/craftassist/dialogue_objects/block_helpers.py": {
        "get_block_type": {
            "name": "get_block_type",
            "location": 8,
            "return": [
                "Type[T]",
                "Tuple"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Optional[str]",
                    "Union[str,None]"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/dialogue_objects/condition_helper.py": {
        "MCConditionInterpreter.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MCConditionInterpreter.interpret_adjacent_block": {
            "name": "interpret_adjacent_block",
            "location": 11,
            "return": [
                "AgentAdjacentStopCondition",
                "Sequence",
                "Mapping"
            ],
            "arguments": {
                "self": [],
                "interpreter": [
                    "str",
                    "int",
                    "Collection",
                    "Collection[int]",
                    "bool"
                ],
                "speaker": [
                    "bool",
                    "float",
                    "Callable",
                    "int"
                ],
                "d": [
                    "int",
                    "set"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/dialogue_objects/get_memory_handler.py": {
        "GetMemoryHandler.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "speaker_name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "action_dict": [
                    "bool",
                    "Dict",
                    "str",
                    "Exception",
                    "Dict[str,str]"
                ]
            }
        },
        "GetMemoryHandler.step": {
            "name": "step",
            "location": 26,
            "return": [
                "Set[str]",
                "List[str]",
                "int",
                "bool",
                "range",
                "List[Mapping[str,Any]]",
                "Dict[str,int]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetMemoryHandler._step": {
            "name": "_step",
            "location": 31,
            "return": [
                "Optional[int]",
                "Optional[bool]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetMemoryHandler.handle_reference_object": {
            "name": "handle_reference_object",
            "location": 44,
            "return": [
                "bool",
                "int",
                "Hashable"
            ],
            "arguments": {
                "self": [],
                "voxels_only": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "GetMemoryHandler.handle_action": {
            "name": "handle_action",
            "location": 54,
            "return": [
                "bool",
                "Tuple[Optional[Text]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetMemoryHandler.handle_agent": {
            "name": "handle_agent",
            "location": 69,
            "return": [
                "Tuple[Optional[str]]",
                "str",
                "Dict",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetMemoryHandler.do_answer": {
            "name": "do_answer",
            "location": 74,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "mems": [
                    "int",
                    "Exception",
                    "bool"
                ]
            }
        },
        "GetMemoryHandler.handle_answer_type_tag": {
            "name": "handle_answer_type_tag",
            "location": 83,
            "return": [
                "Tuple[Optional[Text]]",
                "Union[int,float]",
                "Tuple[Optional[str]]",
                "int",
                "Tuple[None]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "mems": [
                    "bool",
                    "str"
                ]
            }
        },
        "GetMemoryHandler.handle_answer_type_exists": {
            "name": "handle_answer_type_exists",
            "location": 131,
            "return": [
                "Tuple[Optional[Text]]",
                "Optional[Callable[[bool],None]]",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": [],
                "mems": [
                    "list",
                    "bool"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/dialogue_objects/interpreter.py": {
        "Interpreter.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "speaker": [
                    "bool",
                    "str",
                    "bytes",
                    "int"
                ],
                "action_dict": [
                    "Mapping[str,Any]",
                    "Dict",
                    "Mapping",
                    "Dict[str,Any]"
                ]
            }
        },
        "Interpreter.step": {
            "name": "step",
            "location": 93,
            "return": [
                "Dict[str,str]",
                "Optional[str]",
                "Tuple[None]",
                "Optional[bool]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Interpreter.handle_modify": {
            "name": "handle_modify",
            "location": 118,
            "return": [
                "Tuple[None]",
                "Optional[str]",
                "Type",
                "Optional[List[Any]]",
                "List"
            ],
            "arguments": {
                "self": [],
                "speaker": [
                    "Dict",
                    "bytes"
                ],
                "d": [
                    "Dict",
                    "Iterable",
                    "Type",
                    "Collection[str]",
                    "Union[str,bytes]"
                ]
            }
        },
        "Interpreter.handle_undo": {
            "name": "handle_undo",
            "location": 157,
            "return": [
                "Tuple[None]",
                "Optional[str]",
                "Type",
                "Optional[List[Any]]",
                "List"
            ],
            "arguments": {
                "self": [],
                "speaker": [
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "int",
                    "numpy.ndarray"
                ],
                "d": [
                    "str",
                    "float"
                ]
            }
        },
        "Interpreter.handle_spawn": {
            "name": "handle_spawn",
            "location": 181,
            "return": [
                "Tuple[None]",
                "Optional[str]",
                "Type",
                "Optional[List[Any]]",
                "List"
            ],
            "arguments": {
                "self": [],
                "speaker": [
                    "str",
                    "numpy.ndarray",
                    "Tuple",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "d": [
                    "Dict",
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "Interpreter.handle_move": {
            "name": "handle_move",
            "location": 203,
            "return": [
                "Tuple[None]",
                "Optional[str]",
                "Type",
                "Optional[List[Any]]",
                "List"
            ],
            "arguments": {
                "self": [],
                "speaker": [
                    "int",
                    "float",
                    "Set[str]",
                    "numpy.ndarray"
                ],
                "d": [
                    "str",
                    "Dict",
                    "float"
                ]
            }
        },
        "Interpreter.handle_build": {
            "name": "handle_build",
            "location": 241,
            "return": [
                "Tuple[None]",
                "Optional[bool]",
                "Optional[str]",
                "Optional[float]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "speaker": [
                    "int",
                    "Callable"
                ],
                "d": [
                    "Dict[str,Any]",
                    "Dict",
                    "Type",
                    "Exception",
                    "str"
                ]
            }
        },
        "Interpreter.handle_freebuild": {
            "name": "handle_freebuild",
            "location": 308,
            "return": [
                "Tuple[None]",
                "Optional[str]",
                "Type",
                "Optional[List[Any]]",
                "List"
            ],
            "arguments": {
                "self": [],
                "speaker": [
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "int",
                    "numpy.ndarray"
                ],
                "d": [
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "Interpreter.handle_fill": {
            "name": "handle_fill",
            "location": 315,
            "return": [
                "Tuple[None]",
                "bool",
                "str",
                "Optional[int]",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "speaker": [
                    "str",
                    "numpy.ndarray",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "d": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "Interpreter.handle_destroy": {
            "name": "handle_destroy",
            "location": 354,
            "return": [
                "Tuple[None]",
                "Optional[str]",
                "Type",
                "Optional[List[Any]]",
                "List"
            ],
            "arguments": {
                "self": [],
                "speaker": [
                    "str"
                ],
                "d": [
                    "str",
                    "Exception",
                    "float",
                    "Mapping[Any, Any]"
                ]
            }
        },
        "Interpreter.handle_stop": {
            "name": "handle_stop",
            "location": 379,
            "return": [
                "Tuple[Optional[Text]]",
                "Optional[str]",
                "str",
                "float",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "speaker": [
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "int",
                    "numpy.ndarray"
                ],
                "d": [
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "Interpreter.handle_resume": {
            "name": "handle_resume",
            "location": 391,
            "return": [
                "Tuple[Optional[Text]]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "speaker": [
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "int",
                    "numpy.ndarray"
                ],
                "d": [
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "Interpreter.handle_dig": {
            "name": "handle_dig",
            "location": 402,
            "return": [
                "Tuple[None]",
                "Optional[str]",
                "Type",
                "Optional[List[Any]]",
                "List"
            ],
            "arguments": {
                "self": [],
                "speaker": [
                    "int",
                    "Sequence[T]",
                    "Callable[int,None]",
                    "numpy.ndarray",
                    "Callable[[int],None]"
                ],
                "d": [
                    "int",
                    "numpy.ndarray",
                    "Sequence[int]",
                    "Collection[int]",
                    "Optional[numpy.ndarray]"
                ]
            }
        },
        "Interpreter.handle_otheraction": {
            "name": "handle_otheraction",
            "location": 461,
            "return": [
                "Tuple[Optional[Text]]",
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "speaker": [
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "int",
                    "numpy.ndarray"
                ],
                "d": [
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "Interpreter.handle_dance": {
            "name": "handle_dance",
            "location": 465,
            "return": [
                "Tuple[None]",
                "Optional[str]",
                "Type",
                "Optional[List[Any]]",
                "List"
            ],
            "arguments": {
                "self": [],
                "speaker": [
                    "int",
                    "Sequence[T]",
                    "Callable[int,None]",
                    "numpy.ndarray",
                    "Callable[[int],None]"
                ],
                "d": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "Interpreter.handle_get": {
            "name": "handle_get",
            "location": 555,
            "return": [
                "Tuple[None]",
                "Optional[int]",
                "bool",
                "Optional[Literal[only_clustered,include_clustered]]",
                "str",
                "Dict",
                "Optional[List[Any]]",
                "Optional[List[str]]",
                "Optional[Union[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "speaker": [
                    "int",
                    "bytes",
                    "Dict"
                ],
                "d": [
                    "Dict",
                    "str",
                    "List[Dict[str,Any]]",
                    "Callable[[T],bool]",
                    "int",
                    "bytes"
                ]
            }
        },
        "Interpreter.handle_drop": {
            "name": "handle_drop",
            "location": 572,
            "return": [
                "Tuple[None]",
                "Optional[str]",
                "Type",
                "Optional[List[Any]]",
                "List"
            ],
            "arguments": {
                "self": [],
                "speaker": [
                    "str"
                ],
                "d": [
                    "Dict[str,Any]",
                    "str",
                    "Exception",
                    "float"
                ]
            }
        },
        "Interpreter.append_new_task": {
            "name": "append_new_task",
            "location": 590,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Dict",
                    "AnyStr",
                    "Union[HTMLSession,AsyncHTMLSession]",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "data": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "bytes",
                    "Dict",
                    "List[Dict]",
                    "List[dict]"
                ]
            }
        },
        "Interpreter.handle_move.new_tasks": {
            "name": "new_tasks",
            "location": 204,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "Interpreter.handle_dig.new_tasks": {
            "name": "new_tasks",
            "location": 403,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "Interpreter.handle_dance.new_tasks": {
            "name": "new_tasks",
            "location": 466,
            "return": [
                "List",
                "List[str]",
                "str",
                "Set",
                "Optional[List[str]]"
            ],
            "arguments": {}
        }
    },
    "craftassist-master/python/craftassist/dialogue_objects/interpreter_helper.py": {
        "get_special_reference_object": {
            "name": "get_special_reference_object",
            "location": 34,
            "return": [
                "str",
                "Callable",
                "List[str]"
            ],
            "arguments": {
                "interpreter": [
                    "int",
                    "str"
                ],
                "speaker": [
                    "str",
                    "int"
                ],
                "S": [
                    "numpy.ndarray",
                    "int",
                    "Callable[[int], None]",
                    "bool"
                ]
            }
        },
        "interpret_relative_direction": {
            "name": "interpret_relative_direction",
            "location": 67,
            "return": [
                "Tuple[Union[None,str,int]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "interpreter": [
                    "bool",
                    "float",
                    "Callable[,bool]",
                    "int"
                ],
                "location_d": [
                    "Dict[str,str]",
                    "Dict",
                    "Dict[str,int]",
                    "Dict[str,Any]",
                    "bool",
                    "str",
                    "Callable[[str],bool]"
                ]
            }
        },
        "interpret_reference_object": {
            "name": "interpret_reference_object",
            "location": 78,
            "return": [
                "List[Union[str,dict[str,int]]]",
                "List[str]",
                "List",
                "List[ReferenceObjectNode]",
                "str",
                "Union[List[str],str]"
            ],
            "arguments": {
                "interpreter": [
                    "int",
                    "List[str]",
                    "float",
                    "bool"
                ],
                "speaker": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ],
                "d": [
                    "Dict",
                    "Dict[int,dict[str,str]]",
                    "Optional[float]",
                    "Dict[str,str]",
                    "numpy.ndarray",
                    "bool",
                    "Optional[Dict]",
                    "Dict[int,Dict[str,str]]",
                    "Callable[[dict],None]"
                ],
                "only_voxels": [
                    "bool",
                    "str"
                ],
                "only_physical": [
                    "bool",
                    "str"
                ],
                "only_in_inventory": [
                    "bool",
                    "str"
                ],
                "only_on_ground": [
                    "bool",
                    "str"
                ],
                "only_destructible": [
                    "bool",
                    "str"
                ],
                "not_location": [
                    "bool",
                    "str"
                ],
                "limit": [
                    "int",
                    "Callable[[List],bool]",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "loose_speakerlook": [
                    "bool",
                    "Tuple[int,int]",
                    "int",
                    "float"
                ],
                "allow_clarification": [
                    "bool",
                    "str"
                ]
            }
        },
        "interpret_shape_schematic": {
            "name": "interpret_shape_schematic",
            "location": 173,
            "return": [
                "Tuple[list[tuple]]",
                "str",
                "int"
            ],
            "arguments": {
                "interpreter": [
                    "int",
                    "bytes",
                    "float",
                    "numpy.random.RandomState"
                ],
                "speaker": [
                    "bool",
                    "float",
                    "List[int]",
                    "int"
                ],
                "d": [
                    "Union[str, type]",
                    "bool",
                    "Iterable[T_co]",
                    "Union[int, float]",
                    "numpy.ndarray",
                    "Iterable[bytes]",
                    "Union[pandas.DataFrame, numpy.ndarray]",
                    "str",
                    "int"
                ],
                "shapename": [
                    "numpy.ndarray",
                    "bool",
                    "None",
                    "str"
                ]
            }
        },
        "interpret_size": {
            "name": "interpret_size",
            "location": 224,
            "return": [
                "List",
                "Dict",
                "Dict[int,dict]"
            ],
            "arguments": {
                "interpreter": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "interpret_named_schematic": {
            "name": "interpret_named_schematic",
            "location": 241,
            "return": [
                "tuple[None]",
                "tuple[list[tuple[]]]"
            ],
            "arguments": {
                "interpreter": [
                    "int",
                    "Tuple[int]",
                    "Type[object]",
                    "Type"
                ],
                "speaker": [
                    "int",
                    "Tuple[int]"
                ],
                "d": [
                    "bool",
                    "Callable",
                    "Set[Type]",
                    "Iterable['Notification']",
                    "str"
                ]
            }
        },
        "interpret_schematic": {
            "name": "interpret_schematic",
            "location": 282,
            "return": [
                "List[tuple[None]]",
                "List",
                "str",
                "Optional[BaseException]",
                "Optional[Iterable[Any]]",
                "Callable",
                "Optional[T]",
                "List[str]"
            ],
            "arguments": {
                "interpreter": [
                    "int",
                    "Dict[str,Any]",
                    "bool",
                    "None",
                    "Optional[int]",
                    "str",
                    "Optional[Union[str,Any]]",
                    "Any"
                ],
                "speaker": [
                    "int",
                    "Dict[str,Any]",
                    "bool",
                    "None",
                    "Optional[int]",
                    "str",
                    "Optional[Union[str,Any]]",
                    "Any"
                ],
                "d": [
                    "int",
                    "Optional[int]",
                    "bool"
                ],
                "repeat_dict": [
                    "Optional[int]",
                    "List[Issue]",
                    "None",
                    "int"
                ]
            }
        },
        "interpret_reference_location": {
            "name": "interpret_reference_location",
            "location": 303,
            "return": [
                "int",
                "List",
                "str"
            ],
            "arguments": {
                "interpreter": [],
                "speaker": [],
                "d": [
                    "Dict[str,Any]",
                    "str",
                    "Type",
                    "Type[T]"
                ]
            }
        },
        "interpret_point_target": {
            "name": "interpret_point_target",
            "location": 360,
            "return": [
                "Tuple",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "interpreter": [
                    "bool",
                    "numpy.ndarray"
                ],
                "speaker": [
                    "int"
                ],
                "d": [
                    "float",
                    "Union[int, float]",
                    "bool"
                ]
            }
        },
        "number_from_span": {
            "name": "number_from_span",
            "location": 372,
            "return": [
                "float",
                "int",
                "Sequence[float]",
                "Tuple[int,int]",
                "None",
                "Tuple",
                "Tuple[Type]",
                "Dict[str,Any]",
                "List[None]",
                "str"
            ],
            "arguments": {
                "span": [
                    "str",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "IO[str]"
                ]
            }
        },
        "interpret_facing": {
            "name": "interpret_facing",
            "location": 389,
            "return": [
                "int",
                "Dict[Text,tuple[int]]",
                "Callable",
                "Dict[Text,tuple]",
                "str",
                "Dict[Text,int]",
                "Dict[Text,]"
            ],
            "arguments": {
                "interpreter": [
                    "int"
                ],
                "speaker": [
                    "int"
                ],
                "d": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "get_reference_objects": {
            "name": "get_reference_objects",
            "location": 453,
            "return": [
                "List[tuple[str]]",
                "List[str]",
                "Optional[bool]",
                "List[Dict[str,str]]",
                "List[Tuple[str,Any]]",
                "bool",
                "Optional[List[str]]"
            ],
            "arguments": {
                "interpreter": [
                    "str",
                    "bool",
                    "Union[str,List[str],Tuple[str,...]]",
                    "List[str]",
                    "Tuple[Union[str,...]]"
                ]
            }
        },
        "filter_by_sublocation": {
            "name": "filter_by_sublocation",
            "location": 461,
            "return": [
                "List[tuple]",
                "numpy.ndarray",
                "List",
                "int",
                "float"
            ],
            "arguments": {
                "interpreter": [
                    "int",
                    "str"
                ],
                "speaker": [
                    "str",
                    "int",
                    "bool"
                ],
                "candidates": [
                    "bool",
                    "Callable[[numpy.ndarray], numpy.ndarray]",
                    "str"
                ],
                "d": [
                    "bool",
                    "Optional[int]",
                    "Optional[Callable[[Type, Dict], Any]]"
                ],
                "limit": [
                    "bool",
                    "int"
                ],
                "all_proximity": [
                    "int",
                    "str",
                    "float",
                    "Dict"
                ],
                "loose": [
                    "bool",
                    "int",
                    "float",
                    "Union[float,int]",
                    "str",
                    "Set[str]"
                ]
            }
        },
        "get_repeat_num": {
            "name": "get_repeat_num",
            "location": 554,
            "return": [
                "int",
                "str",
                "Text"
            ],
            "arguments": {
                "d": [
                    "bool",
                    "numpy.ndarray",
                    "Iterable[T_co]",
                    "Tuple[int, int, int]"
                ]
            }
        },
        "get_repeat_dir": {
            "name": "get_repeat_dir",
            "location": 567,
            "return": [
                "str",
                "int",
                "None",
                "Dict[str,str]",
                "Dict[int,str]",
                "List",
                "Dict"
            ],
            "arguments": {
                "d": [
                    "Dict",
                    "str",
                    "bytes",
                    "Sequence",
                    "Type[T]"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/dialogue_objects/modify_helpers.py": {
        "handle_rigidmotion": {
            "name": "handle_rigidmotion",
            "location": 27,
            "return": [
                "Tuple[None]",
                "Optional[dict]",
                "Tuple[dict[Text,Union[list,list[tuple[Union[Any,str]]],tuple]]]",
                "str",
                "bool"
            ],
            "arguments": {
                "interpreter": [
                    "int",
                    "Dict[str,int]",
                    "Tuple",
                    "Generator",
                    "numpy.ndarray"
                ],
                "speaker": [
                    "str",
                    "int",
                    "float",
                    "bool",
                    "numpy.ndarray"
                ],
                "modify_dict": [
                    "Dict",
                    "Dict[str,str]",
                    "Dict[int,Dict[str,Any]]",
                    "Dict[int,dict[str,Any]]"
                ],
                "obj": [
                    "Dict",
                    "str",
                    "bytes",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "handle_scale": {
            "name": "handle_scale",
            "location": 68,
            "return": [
                "dict",
                "bool",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "interpreter": [
                    "bool",
                    "int"
                ],
                "speaker": [
                    "bool",
                    "int"
                ],
                "modify_dict": [
                    "Dict[str,int]",
                    "Dict[str,str]",
                    "str",
                    "Dict",
                    "Dict[str,Any]"
                ],
                "obj": [
                    "\"TransactionModel\"",
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "handle_fill": {
            "name": "handle_fill",
            "location": 136,
            "return": [
                "Tuple[Optional[dict[Text,list[Union[int,list,float,list[float],Pattern,str]]]]]",
                "Dict",
                "bool",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "interpreter": [
                    "bool",
                    "int"
                ],
                "speaker": [
                    "bool",
                    "int"
                ],
                "modify_dict": [
                    "int",
                    "Dict[str, str]",
                    "dict",
                    "str",
                    "Exception"
                ],
                "obj": [
                    "\"TransactionModel\"",
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "handle_replace": {
            "name": "handle_replace",
            "location": 163,
            "return": [
                "Tuple[Optional[dict[Text,tuple[Union[int,list,float,list[float],Pattern,str]]]]]",
                "Dict",
                "bool",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "interpreter": [
                    "str",
                    "numpy.array"
                ],
                "speaker": [
                    "str",
                    "numpy.array"
                ],
                "modify_dict": [
                    "str"
                ],
                "obj": [
                    "\"TransactionModel\"",
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "handle_thicken": {
            "name": "handle_thicken",
            "location": 215,
            "return": [
                "Tuple[dict[Text,Union[tuple,list[Union[int,list,float,list[float],Pattern,str]]]]]",
                "Dict",
                "bool",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "interpreter": [
                    "bool",
                    "int"
                ],
                "speaker": [
                    "bool",
                    "int"
                ],
                "modify_dict": [
                    "Dict[str,str]",
                    "Dict",
                    "Dict[str,Tuple[Any,Any]]",
                    "Dict[str,tuple[Union[Any,Any]]]",
                    "Dict[str,Union[str,Set]]",
                    "Dict[str,Union[str,set]]",
                    "Dict[str,Dict[str,str]]",
                    "Dict[str,dict[str,str]]"
                ],
                "obj": [
                    "\"TransactionModel\"",
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/dialogue_objects/put_memory_handler.py": {
        "PutMemoryHandler.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "speaker_name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "action_dict": [
                    "bool",
                    "Dict",
                    "str",
                    "Exception",
                    "Dict[str,str]"
                ]
            }
        },
        "PutMemoryHandler.step": {
            "name": "step",
            "location": 23,
            "return": [
                "Set[str]",
                "List[str]",
                "int",
                "bool",
                "range",
                "List[Mapping[str,Any]]",
                "Dict[str,int]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PutMemoryHandler._step": {
            "name": "_step",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PutMemoryHandler.handle_reward": {
            "name": "handle_reward",
            "location": 38,
            "return": [
                "Tuple[Optional[Text]]",
                "str",
                "bool",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PutMemoryHandler.handle_triple": {
            "name": "handle_triple",
            "location": 47,
            "return": [
                "Tuple[Optional[Text]]",
                "Optional[int]",
                "Optional[str]",
                "Type",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/craftassist/dialogue_objects/reference_object_helpers.py": {
        "post_process_loc": {
            "name": "post_process_loc",
            "location": 13,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "loc": [
                    "numpy.ndarray",
                    "Type",
                    "Dict",
                    "Optional[Type]",
                    "None"
                ],
                "interpreter": [
                    "Dict",
                    "bool"
                ]
            }
        },
        "compute_locations": {
            "name": "compute_locations",
            "location": 17,
            "return": [
                "Tuple[Union[str,Counter,list]]",
                "Dict",
                "int",
                "Tuple[int,int,int,int]",
                "Optional[BaseException]",
                "str"
            ],
            "arguments": {
                "interpreter": [
                    "str",
                    "int"
                ],
                "speaker": [
                    "str",
                    "int",
                    "Mapping",
                    "Optional[Mapping[str,Any]]",
                    "None",
                    "Dict",
                    "Optional[Callable[...,Any]]",
                    "Callable[...,Any]",
                    "Optional[Callable[[Dict],bool]]",
                    "bool"
                ],
                "mems": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "int",
                    "None"
                ],
                "steps": [
                    "bool",
                    "str",
                    "Callable",
                    "None",
                    "Optional[AbstractPurpose]",
                    "Optional[str]"
                ],
                "reldir": [
                    "bool",
                    "str",
                    "Callable",
                    "None",
                    "Optional[AbstractPurpose]",
                    "Optional[str]"
                ],
                "repeat_num": [
                    "int",
                    "float",
                    "List",
                    "numpy.ndarray",
                    "str"
                ],
                "repeat_dir": [
                    "str",
                    "None",
                    "Iterable[str]",
                    "Optional[str]"
                ],
                "objects": [
                    "float",
                    "list",
                    "int"
                ],
                "padding": [
                    "Tuple[int]",
                    "str",
                    "Iterable[str]",
                    "Optional[str]"
                ],
                "enable_geoscorer": [
                    "bool",
                    "Optional[str]",
                    "Optional[float]",
                    "Optional[List[str]]",
                    "numpy.ndarray",
                    "Optional[Dict[str,Any]]",
                    "Callable[[Optional],None]"
                ]
            }
        },
        "compute_location_heuristic": {
            "name": "compute_location_heuristic",
            "location": 60,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "player_look": [
                    "str",
                    "bool",
                    "Dict"
                ],
                "player_pos": [
                    "Dict",
                    "int",
                    "str",
                    "Tuple[int,int,int,int]",
                    "Tuple[Union[int,int,int,int]]",
                    "Optional[BaseException]",
                    "BaseException",
                    "None"
                ],
                "mems": [
                    "Callable[..., bool]",
                    "float"
                ],
                "steps": [
                    "List",
                    "numpy.ndarray",
                    "float",
                    "int"
                ],
                "reldir": [
                    "Optional[int]",
                    "int",
                    "Optional[float]",
                    "None",
                    "Optional[str]",
                    "float",
                    "str"
                ]
            }
        },
        "get_repeat_arrangement": {
            "name": "get_repeat_arrangement",
            "location": 94,
            "return": [
                "List[tuple]",
                "str",
                "bool"
            ],
            "arguments": {
                "player_look": [
                    "str",
                    "bool",
                    "float",
                    "Optional[float]",
                    "None"
                ],
                "repeat_num": [
                    "str",
                    "bool",
                    "float",
                    "Dict[tuple[Union[str,str]],int]",
                    "Dict[Tuple[str,str],int]",
                    "int"
                ],
                "repeat_dir": [
                    "str",
                    "int"
                ],
                "ref_mems": [
                    "int",
                    "float"
                ],
                "schematic": [
                    "str",
                    "None",
                    "bool",
                    "float",
                    "Dict[Tuple[str,str],int]",
                    "int",
                    "Dict[tuple[Union[str,str]],int]"
                ],
                "padding": [
                    "int",
                    "Tuple[int]"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/dialogue_objects/__init__.py": {},
    "craftassist-master/python/craftassist/test/agent.py": {
        "Agent.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "bool",
                    "str",
                    "Dict",
                    "List",
                    "Optional[Hashable]",
                    "Hashable",
                    "None"
                ],
                "port": [
                    "bool",
                    "str",
                    "Dict",
                    "List",
                    "Optional[Hashable]",
                    "Hashable",
                    "None"
                ],
                "name": [
                    "bool",
                    "str",
                    "Dict",
                    "List",
                    "Optional[Hashable]",
                    "Hashable",
                    "None"
                ]
            }
        },
        "Agent.send_chat": {
            "name": "send_chat",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chat": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/test/all_test_commands.py": {
        "append_output": {
            "name": "append_output",
            "location": 435,
            "return": [
                "Callable",
                "str",
                "Iterable[str]",
                "int",
                "Sequence[str]"
            ],
            "arguments": {
                "filt": [
                    "str",
                    "float",
                    "T"
                ],
                "output": [
                    "str",
                    "float",
                    "T"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/test/base_craftassist_test_case.py": {
        "BaseCraftassistTestCase.setUp": {
            "name": "setUp",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent_opts": [
                    "bool",
                    "float",
                    "None"
                ]
            }
        },
        "BaseCraftassistTestCase.handle_logical_form": {
            "name": "handle_logical_form",
            "location": 41,
            "return": [
                "int",
                "str",
                "Callable",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "int",
                    "List[str]",
                    "Counter",
                    "str",
                    "float",
                    "Union[int,float]"
                ],
                "chatstr": [
                    "Text",
                    "bool",
                    "Sequence[str]",
                    "BaseException",
                    "int"
                ],
                "answer": [
                    "int",
                    "None",
                    "Optional[str]",
                    "float",
                    "Tuple[Optional[float],Optional[float]]",
                    "str",
                    "Tuple[Union[float,None,float,None]]"
                ],
                "stop_on_chat": [
                    "bool",
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "max_steps": [
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "BaseCraftassistTestCase.flush": {
            "name": "flush",
            "location": 60,
            "return": [
                "Dict[,tuple[int]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "max_steps": [
                    "int",
                    "float",
                    "str"
                ],
                "stop_on_chat": [
                    "bool",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BaseCraftassistTestCase.agent_should_stop": {
            "name": "agent_should_stop",
            "location": 83,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "stop_on_chat": [
                    "bool",
                    "float",
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "BaseCraftassistTestCase.set_looking_at": {
            "name": "set_looking_at",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xyz": [
                    "Iterable[str]",
                    "bool",
                    "int",
                    "raiden.utils.Locksroot"
                ]
            }
        },
        "BaseCraftassistTestCase.set_blocks": {
            "name": "set_blocks",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xyzbms": [
                    "str",
                    "Type",
                    "Callable[...,Awaitable]",
                    "Callable[...,collections.abc.Awaitable]"
                ],
                "origin": [
                    "Tuple[int]",
                    "str",
                    "Callable[...,Awaitable]",
                    "Type"
                ]
            }
        },
        "BaseCraftassistTestCase.add_object": {
            "name": "add_object",
            "location": 107,
            "return": [
                "bool",
                "Optional[miscelaneous.Pos]"
            ],
            "arguments": {
                "self": [],
                "xyzbms": [],
                "origin": [
                    "tuple[int]"
                ],
                "relations": [
                    "dict[, ]"
                ]
            }
        },
        "BaseCraftassistTestCase.add_incoming_chat": {
            "name": "add_incoming_chat",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chat": [
                    "str",
                    "Optional[str]",
                    "List[Tuple[str,int]]"
                ],
                "speaker_name": [
                    "str",
                    "Optional[str]",
                    "List[Tuple[str,int]]"
                ]
            }
        },
        "BaseCraftassistTestCase.assert_schematics_equal": {
            "name": "assert_schematics_equal",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [],
                "b": [
                    "Callable[[None],bool]",
                    "bool",
                    "Callable[None,bool]"
                ]
            }
        },
        "BaseCraftassistTestCase.get_idm_at_locs": {
            "name": "get_idm_at_locs",
            "location": 127,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "xyzs": [
                    "str",
                    "float"
                ]
            }
        },
        "BaseCraftassistTestCase.last_outgoing_chat": {
            "name": "last_outgoing_chat",
            "location": 130,
            "return": [
                "Optional[str]",
                "str",
                "Optional[List[str]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseCraftassistTestCase.get_speaker_pos": {
            "name": "get_speaker_pos",
            "location": 133,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/craftassist/test/fake_agent.py": {
        "FakeMCTime.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "world": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "FakeMCTime.get_world_hour": {
            "name": "get_world_hour",
            "location": 37,
            "return": [
                "float",
                "bool",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeMCTime.round_time": {
            "name": "round_time",
            "location": 41,
            "return": [
                "int",
                "Tuple[int,int]"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "int",
                    "float",
                    "Sequence[T]",
                    "Callable[int,None]",
                    "numpy.ndarray",
                    "Callable[[int],None]"
                ]
            }
        },
        "FakeMCTime.get_time": {
            "name": "get_time",
            "location": 44,
            "return": [
                "str",
                "int",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeMCTime.add_tick": {
            "name": "add_tick",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ticks": [
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "FakeCPPAction.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "FakeCPPAction.action": {
            "name": "action",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeCPPAction.__call__": {
            "name": "__call__",
            "location": 61,
            "return": [
                "int",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dig.action": {
            "name": "action",
            "location": 70,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "str",
                    "numpy.ndarray"
                ],
                "y": [
                    "int",
                    "str",
                    "numpy.ndarray"
                ],
                "z": [
                    "int",
                    "str",
                    "numpy.ndarray"
                ]
            }
        },
        "SendChat.action": {
            "name": "action",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chat": [
                    "str",
                    "int"
                ]
            }
        },
        "SetHeldItem.action": {
            "name": "action",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "str",
                    "float",
                    "bool",
                    "numpy.ndarray"
                ]
            }
        },
        "StepPosX.action": {
            "name": "action",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StepNegX.action": {
            "name": "action",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StepPosZ.action": {
            "name": "action",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StepNegZ.action": {
            "name": "action",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StepPosY.action": {
            "name": "action",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StepNegY.action": {
            "name": "action",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StepForward.action": {
            "name": "action",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TurnAngle.action": {
            "name": "action",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "angle": [
                    "str",
                    "int"
                ]
            }
        },
        "TurnLeft.action": {
            "name": "action",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TurnRight.action": {
            "name": "action",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlaceBlock.action": {
            "name": "action",
            "location": 198,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "Union[int,float]"
                ],
                "y": [
                    "int",
                    "float",
                    "Union[int,float]"
                ],
                "z": [
                    "int",
                    "float",
                    "Union[int,float]"
                ]
            }
        },
        "LookAt.action": {
            "name": "action",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "str",
                    "bytes",
                    "numpy.ndarray",
                    "List",
                    "T"
                ],
                "y": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "str",
                    "bytes",
                    "numpy.ndarray",
                    "List",
                    "T"
                ],
                "z": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "str",
                    "bytes",
                    "numpy.ndarray",
                    "List",
                    "T"
                ]
            }
        },
        "SetLook.action": {
            "name": "action",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "yaw": [
                    "bool",
                    "str",
                    "float",
                    "Sequence[int]",
                    "int"
                ],
                "pitch": [
                    "bool",
                    "str",
                    "float",
                    "Sequence[int]",
                    "int"
                ]
            }
        },
        "Craft.action": {
            "name": "action",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeAgent.__init__": {
            "name": "__init__",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "world": [
                    "str",
                    "int",
                    "Dict[int,Dict[int,Any]]",
                    "Dict[int,dict[int,Any]]",
                    "Optional[int]",
                    "None"
                ],
                "opts": [
                    "None",
                    "Optional[str]",
                    "str",
                    "int",
                    "bool"
                ],
                "do_heuristic_perception": [
                    "bool",
                    "int",
                    "str",
                    "Callable",
                    "Dict[str,Any]",
                    "Union[str,float]"
                ]
            }
        },
        "FakeAgent.init_perception": {
            "name": "init_perception",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeAgent.init_physical_interfaces": {
            "name": "init_physical_interfaces",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeAgent.init_memory": {
            "name": "init_memory",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeAgent.init_controller": {
            "name": "init_controller",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeAgent.set_logical_form": {
            "name": "set_logical_form",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lf": [
                    "bool",
                    "float"
                ],
                "chatstr": [
                    "bool",
                    "float"
                ],
                "speaker": [
                    "bool",
                    "float"
                ]
            }
        },
        "FakeAgent.step": {
            "name": "step",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeAgent.controller_step": {
            "name": "controller_step",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeAgent.setup_test": {
            "name": "setup_test",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeAgent.clear_outgoing_chats": {
            "name": "clear_outgoing_chats",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeAgent.get_last_outgoing_chat": {
            "name": "get_last_outgoing_chat",
            "location": 336,
            "return": [
                "None",
                "str",
                "Optional[Sequence[str]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeAgent.task_step": {
            "name": "task_step",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeAgent.point_at": {
            "name": "point_at",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FakeAgent.perceive": {
            "name": "perceive",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "force": [
                    "bool",
                    "str"
                ]
            }
        },
        "FakeAgent.get_blocks": {
            "name": "get_blocks",
            "location": 361,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "xa": [
                    "str",
                    "Callable",
                    "int",
                    "Dict",
                    "List[Node]",
                    "List[N]"
                ],
                "xb": [
                    "str",
                    "Callable",
                    "int",
                    "Dict",
                    "List[Node]",
                    "List[N]"
                ],
                "ya": [
                    "str",
                    "Callable",
                    "int",
                    "Dict",
                    "List[Node]",
                    "List[N]"
                ],
                "yb": [
                    "str",
                    "Callable",
                    "int",
                    "Dict",
                    "List[Node]",
                    "List[N]"
                ],
                "za": [
                    "str",
                    "Callable",
                    "int",
                    "Dict",
                    "List[Node]",
                    "List[N]"
                ],
                "zb": [
                    "str",
                    "Callable",
                    "int",
                    "Dict",
                    "List[Node]",
                    "List[N]"
                ]
            }
        },
        "FakeAgent.get_local_blocks": {
            "name": "get_local_blocks",
            "location": 364,
            "return": [
                "Optional[str]",
                "Type",
                "bool",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "Iterable[T]",
                    "bool",
                    "numpy.ndarray",
                    "Iterable[T_co]"
                ]
            }
        },
        "FakeAgent.get_incoming_chats": {
            "name": "get_incoming_chats",
            "location": 368,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeAgent.get_player": {
            "name": "get_player",
            "location": 373,
            "return": [
                "Player",
                "Optional[bool]",
                "Optional[int]",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeAgent.get_mobs": {
            "name": "get_mobs",
            "location": 376,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeAgent.get_item_stacks": {
            "name": "get_item_stacks",
            "location": 379,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeAgent.get_other_players": {
            "name": "get_other_players",
            "location": 382,
            "return": [
                "str",
                "List[List[int]]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeAgent.get_other_player_by_name": {
            "name": "get_other_player_by_name",
            "location": 385,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeAgent.get_vision": {
            "name": "get_vision",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeAgent.get_line_of_sight": {
            "name": "get_line_of_sight",
            "location": 391,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeAgent.get_look": {
            "name": "get_look",
            "location": 394,
            "return": [
                "Look",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeAgent.get_player_line_of_sight": {
            "name": "get_player_line_of_sight",
            "location": 399,
            "return": [
                "Pos",
                "int",
                "str",
                "Dict[str,Any]",
                "List"
            ],
            "arguments": {
                "self": [],
                "player_struct": [
                    "str",
                    "int",
                    "Dict[str,str]",
                    "numpy.ndarray"
                ]
            }
        },
        "FakeAgent.get_changed_blocks": {
            "name": "get_changed_blocks",
            "location": 410,
            "return": [
                "List",
                "Dict[str,Union[Any,Any]]",
                "bool",
                "str",
                "List[str]",
                "Set[str]",
                "List[Optional[str]]",
                "List[Mapping[str,Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeAgent.safe_get_changed_blocks": {
            "name": "safe_get_changed_blocks",
            "location": 416,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[List[str]]",
                "Optional[cmk.utils.diagnostics.DiagnosticsOptionalParameters]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeAgent.set_blocks": {
            "name": "set_blocks",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xyzbms": [
                    "List[util.Block]",
                    "List[Block]",
                    "Dict[str,Any]",
                    "List[str]",
                    "int"
                ],
                "origin": [
                    "Tuple[int]",
                    "Tuple",
                    "str",
                    "List[float]"
                ]
            }
        },
        "FakeAgent.add_object": {
            "name": "add_object",
            "location": 433,
            "return": [
                "Optional[bool]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "xyzbms": [
                    "int",
                    "Callable",
                    "bool",
                    "Iterator[T]"
                ],
                "origin": [
                    "Tuple[int]",
                    "int",
                    "Callable",
                    "bool",
                    "Iterator[T]"
                ],
                "relations": [
                    "Dict",
                    "Dict[str,float]",
                    "Mapping[str,Any]",
                    "Dict[str,str]",
                    "Dict[str,int]"
                ]
            }
        },
        "FakeAgent.draw_slice": {
            "name": "draw_slice",
            "location": 458,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "h": [
                    "str",
                    "None",
                    "Callable",
                    "int",
                    "List[int]",
                    "bool"
                ],
                "r": [
                    "int",
                    "str",
                    "Callable",
                    "bool",
                    "List[int]"
                ],
                "c": [
                    "str",
                    "List[int]",
                    "Callable",
                    "int",
                    "bool"
                ]
            }
        },
        "FakeAgent.draw_slice.xs": {
            "name": "xs",
            "location": 490,
            "return": [
                "int",
                "bool",
                "dict"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str"
                ]
            }
        },
        "FakeAgent.draw_slice.zs": {
            "name": "zs",
            "location": 493,
            "return": [
                "Dict[str, int]",
                "str",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "z": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/test/fake_mobs.py": {
        "make_mob_opts": {
            "name": "make_mob_opts",
            "location": 31,
            "return": [
                "Opt",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "mobname": [
                    "str",
                    "Callable"
                ]
            }
        },
        "check_bounds": {
            "name": "check_bounds",
            "location": 44,
            "return": [
                "int",
                "str",
                "Sequence[float]",
                "List[int]"
            ],
            "arguments": {
                "p": [
                    "int",
                    "str",
                    "Sequence[float]",
                    "List[int]"
                ],
                "sl": [
                    "int",
                    "str",
                    "Sequence[float]",
                    "List[int]"
                ]
            }
        },
        "SimpleMob.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "opts": [
                    "int",
                    "List[float]",
                    "bool"
                ],
                "start_pos": [
                    "str",
                    "None",
                    "int",
                    "Optional[int]"
                ],
                "start_look": [
                    "Tuple[float]",
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "SimpleMob.add_to_world": {
            "name": "add_to_world",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "world": [
                    "int",
                    "List[int]",
                    "str",
                    "float",
                    "IO[str]",
                    "IO",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "SimpleMob.get_info": {
            "name": "get_info",
            "location": 83,
            "return": [
                "MobInfo",
                "str",
                "Set[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleMob.new_direction": {
            "name": "new_direction",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleMob.step": {
            "name": "step",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoopMob.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "opts": [
                    "bool",
                    "Dict[str,Any]",
                    "Callable[[Any,Any],bool]",
                    "Callable[Any,Any,bool]"
                ],
                "move_sequence": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "LoopMob.step": {
            "name": "step",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/craftassist/test/interactive_memory_explorer.py": {
        "add_two_cubes": {
            "name": "add_two_cubes",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "test": [
                    "Dict"
                ]
            }
        },
        "MemoryExplorer.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/craftassist/test/recorder.py": {
        "Recorder.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "int",
                    "None",
                    "T"
                ],
                "filepath": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "Recorder.load_from_file": {
            "name": "load_from_file",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str"
                ]
            }
        },
        "Recorder.save_to_file": {
            "name": "save_to_file",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str"
                ]
            }
        },
        "Recorder.maybe_add_entry": {
            "name": "maybe_add_entry",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recorder.record_action": {
            "name": "record_action",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "Sequence[int]"
                ]
            }
        },
        "Recorder.record_mobs": {
            "name": "record_mobs",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recorder.record_players": {
            "name": "record_players",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recorder.record_agent": {
            "name": "record_agent",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recorder.record_block_changes": {
            "name": "record_block_changes",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recorder.record_world": {
            "name": "record_world",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recorder.get_last_record": {
            "name": "get_last_record",
            "location": 87,
            "return": [
                "Dict",
                "List[Union[int,Any]]",
                "List[Union[int,str]]",
                "str",
                "List[T]",
                "Tuple[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recorder.rewind": {
            "name": "rewind",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recorder.__iter__": {
            "name": "__iter__",
            "location": 97,
            "return": [
                "Recorder",
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recorder.__next__": {
            "name": "__next__",
            "location": 100,
            "return": [
                "Dict[Text,]",
                "str",
                "Dict",
                "List[Dict[str,Any]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/craftassist/test/test_agent.py": {
        "BaseAgentTest.test_init_agent": {
            "name": "test_init_agent",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/craftassist/test/test_conditions.py": {
        "add_sequence_mob": {
            "name": "add_sequence_mob",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "test": [
                    "Dict[str,int]",
                    "bool",
                    "str"
                ],
                "mobname": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "sequence": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "MoveDirectionUntilTest.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoveDirectionUntilTest.test_move_till_condition": {
            "name": "test_move_till_condition",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FollowUntilTest.setUp": {
            "name": "setUp",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FollowUntilTest.test_move_till_condition": {
            "name": "test_move_till_condition",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/craftassist/test/test_coref_resolve.py": {
        "CorefResolveTestCase.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CorefResolveTestCase.test_destroy_it": {
            "name": "test_destroy_it",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/craftassist/test/test_dialogue_manager.py": {
        "FakeAgent.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "opts": [
                    "str",
                    "bytes",
                    "Iterable[str]"
                ]
            }
        },
        "FakeAgent.init_memory": {
            "name": "init_memory",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeAgent.init_physical_interfaces": {
            "name": "init_physical_interfaces",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeAgent.init_perception": {
            "name": "init_perception",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeAgent.init_controller": {
            "name": "init_controller",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDialogueManager.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDialogueManager.test_parses": {
            "name": "test_parses",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDialogueManager.__init__.fix_path": {
            "name": "fix_path",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "opts": [
                    "Optional[str]",
                    "List[str]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/test/test_dialogue_objects.py": {
        "BotStackStatusTest.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotStackStatusTest.test_move": {
            "name": "test_move",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/craftassist/test/test_get_memory.py": {
        "GetMemoryTestCase.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetMemoryTestCase.test_get_name": {
            "name": "test_get_name",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetMemoryTestCase.test_what_are_you_doing": {
            "name": "test_what_are_you_doing",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetMemoryTestCase.test_what_are_you_building": {
            "name": "test_what_are_you_building",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetMemoryTestCase.test_where_are_you_going": {
            "name": "test_where_are_you_going",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetMemoryTestCase.test_where_are_you": {
            "name": "test_where_are_you",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/craftassist/test/test_greeting.py": {
        "GreetingTest.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GreetingTest.test_hello": {
            "name": "test_hello",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GreetingTest.test_goodbye": {
            "name": "test_goodbye",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/craftassist/test/test_interpreter.py": {
        "add_two_cubes": {
            "name": "add_two_cubes",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "test": [
                    "Dict"
                ]
            }
        },
        "TwoCubesInterpreterTest.setUp": {
            "name": "setUp",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwoCubesInterpreterTest.test_noop": {
            "name": "test_noop",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwoCubesInterpreterTest.test_destroy_that": {
            "name": "test_destroy_that",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwoCubesInterpreterTest.test_copy_that": {
            "name": "test_copy_that",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwoCubesInterpreterTest.test_build_small_sphere": {
            "name": "test_build_small_sphere",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwoCubesInterpreterTest.test_build_1x1x1_cube": {
            "name": "test_build_1x1x1_cube",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwoCubesInterpreterTest.test_move_coordinates": {
            "name": "test_move_coordinates",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwoCubesInterpreterTest.test_move_here": {
            "name": "test_move_here",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwoCubesInterpreterTest.test_build_diamond": {
            "name": "test_build_diamond",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwoCubesInterpreterTest.test_build_gold_cube": {
            "name": "test_build_gold_cube",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwoCubesInterpreterTest.test_fill_all_holes_no_holes": {
            "name": "test_fill_all_holes_no_holes",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwoCubesInterpreterTest.test_go_to_the_tree": {
            "name": "test_go_to_the_tree",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwoCubesInterpreterTest.test_build_has_base": {
            "name": "test_build_has_base",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwoCubesInterpreterTest.test_build_square_has_height": {
            "name": "test_build_square_has_height",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwoCubesInterpreterTest.test_action_sequence_order": {
            "name": "test_action_sequence_order",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwoCubesInterpreterTest.test_stop": {
            "name": "test_stop",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwoCubesInterpreterTest.test_build_sphere_move_here": {
            "name": "test_build_sphere_move_here",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwoCubesInterpreterTest.test_copy_that_and_build_cube": {
            "name": "test_copy_that_and_build_cube",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DanceTest.setUp": {
            "name": "setUp",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DanceTest.test_dance": {
            "name": "test_dance",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModifyTest.setUp": {
            "name": "setUp",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModifyTest.gen_modify": {
            "name": "gen_modify",
            "location": 186,
            "return": [
                "Dict[Text,Union[Text,list[dict[Text,Union[Text,dict[Text,dict[Text,]],int,dict,bytes,None]]]]]",
                "Dict",
                "Dict[str,bool]",
                "Union[Dict,str]",
                "Dict[str,Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "modify_dict": [
                    "int",
                    "Dict",
                    "bool",
                    "bytes",
                    "Optional[bytes]",
                    "None"
                ]
            }
        },
        "ModifyTest.test_modify": {
            "name": "test_modify",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpawnSheep.setUp": {
            "name": "setUp",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpawnSheep.test_spawn_5_sheep": {
            "name": "test_spawn_5_sheep",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CirclesLeftOfCircleTest.setUp": {
            "name": "setUp",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CirclesLeftOfCircleTest.test_build_other_circle": {
            "name": "test_build_other_circle",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoveBetweenTest.setUp": {
            "name": "setUp",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoveBetweenTest.test_between_cubes": {
            "name": "test_between_cubes",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DestroyRedCubeTest.setUp": {
            "name": "setUp",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DestroyRedCubeTest.test_destroy_red_cube": {
            "name": "test_destroy_red_cube",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DestroyEverythingTest.setUp": {
            "name": "setUp",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DestroyEverythingTest.test_destroy_everything": {
            "name": "test_destroy_everything",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FillTest.setUp": {
            "name": "setUp",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FillTest.test_fill_that": {
            "name": "test_fill_that",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FillTest.test_fill_with_block_type": {
            "name": "test_fill_with_block_type",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/craftassist/test/test_memory.py": {
        "ObjectsTest.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectsTest.test_merge_tags": {
            "name": "test_merge_tags",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TriggersTests.setUp": {
            "name": "setUp",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TriggersTests.test_workspace_cleared_on_object_delete": {
            "name": "test_workspace_cleared_on_object_delete",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MethodsTests.setUp": {
            "name": "setUp",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MethodsTests.test_peek_empty": {
            "name": "test_peek_empty",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MethodsTests.test_add_mob": {
            "name": "test_add_mob",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MethodsTests.test_add_guardian_mob": {
            "name": "test_add_guardian_mob",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/craftassist/test/test_put_memory.py": {
        "PutMemoryTestCase.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PutMemoryTestCase.test_good_job": {
            "name": "test_good_job",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PutMemoryTestCase.test_tag": {
            "name": "test_tag",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PutMemoryTestCase.test_tag_and_build": {
            "name": "test_tag_and_build",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/craftassist/test/test_safety.py": {
        "SafetyTest.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SafetyTest.test_unsafe_word": {
            "name": "test_unsafe_word",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SafetyTest.test_safe_word": {
            "name": "test_safe_word",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SafetyTest.test_dialogue_manager": {
            "name": "test_dialogue_manager",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/craftassist/test/test_size_words.py": {
        "TestSizeWords.assert_in_range": {
            "name": "assert_in_range",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ],
                "rng": [
                    "int"
                ]
            }
        },
        "TestSizeWords.test_str_to_int": {
            "name": "test_str_to_int",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSizeWords.test_str_to_int_mod": {
            "name": "test_str_to_int_mod",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/craftassist/test/test_undo.py": {
        "UndoTest.test_undo_destroy": {
            "name": "test_undo_destroy",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/craftassist/test/test_with_model.py": {
        "PutMemoryTestCase.setUp": {
            "name": "setUp",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PutMemoryTestCase.test_come_here": {
            "name": "test_come_here",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PutMemoryTestCase.test_stop": {
            "name": "test_stop",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/craftassist/test/utils.py": {
        "PickleMock.__reduce__": {
            "name": "__reduce__",
            "location": 19,
            "return": [
                "tuple[tuple[]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/craftassist/test/visualize_scenario.py": {},
    "craftassist-master/python/craftassist/test/world.py": {
        "flat_ground_generator_with_grass": {
            "name": "flat_ground_generator_with_grass",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "world": [
                    "int",
                    "Optional[int]",
                    "Callable",
                    "str",
                    "None",
                    "numpy.ndarray",
                    "Optional[str]"
                ]
            }
        },
        "flat_ground_generator": {
            "name": "flat_ground_generator",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "world": [],
                "grass": [
                    "bool",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict"
                ],
                "ground_depth": [
                    "int",
                    "numpy.ndarray",
                    "bool",
                    "Dict[str,numpy.ndarray]"
                ]
            }
        },
        "shift_coords": {
            "name": "shift_coords",
            "location": 30,
            "return": [
                "int",
                "Opt",
                "Callable",
                "Tuple",
                "str",
                "List"
            ],
            "arguments": {
                "p": [],
                "shift": [
                    "int"
                ]
            }
        },
        "build_coord_shifts": {
            "name": "build_coord_shifts",
            "location": 45,
            "return": [
                "Tuple",
                "int",
                "str"
            ],
            "arguments": {
                "coord_shift": [
                    "bool",
                    "List",
                    "Iterable[str]"
                ]
            }
        },
        "build_coord_shifts.to_world_coords": {
            "name": "to_world_coords",
            "location": 46,
            "return": [
                "numpy.ndarray",
                "float",
                "Dict[str, numpy.ndarray]",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "p": [
                    "numpy.ndarray",
                    "float",
                    "Dict[str, numpy.ndarray]",
                    "dict",
                    "str",
                    "int"
                ]
            }
        },
        "build_coord_shifts.from_world_coords": {
            "name": "from_world_coords",
            "location": 52,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]",
                "numpy.ndarray"
            ],
            "arguments": {
                "p": [
                    "str",
                    "Callable",
                    "Callable[[None, None], bool]",
                    "numpy.ndarray"
                ]
            }
        },
        "World.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "opts": [
                    "float",
                    "int",
                    "numpy.ndarray"
                ],
                "spec": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "World.step": {
            "name": "step",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.build_ground": {
            "name": "build_ground",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.place_block": {
            "name": "place_block",
            "location": 141,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "int",
                    "mypy.nodes.Block"
                ],
                "force": [
                    "bool",
                    "Optional[mypy.nodes.Block]",
                    "numpy.ndarray"
                ]
            }
        },
        "World.dig": {
            "name": "dig",
            "location": 174,
            "return": [
                "Sequence['cirq.Qid']",
                "str",
                "bool",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [],
                "loc": [
                    "IO"
                ]
            }
        },
        "World.blocks_to_dict": {
            "name": "blocks_to_dict",
            "location": 177,
            "return": [
                "Dict[,tuple]",
                "Dict",
                "Dict[str,Any]",
                "Exception",
                "Optional[Dict[str,str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.get_idm_at_locs": {
            "name": "get_idm_at_locs",
            "location": 185,
            "return": [
                "str",
                "Dict[tuple,tuple]"
            ],
            "arguments": {
                "self": [],
                "xyzs": [
                    "str",
                    "Dict",
                    "bool",
                    "T"
                ]
            }
        },
        "World.get_mobs": {
            "name": "get_mobs",
            "location": 193,
            "return": [
                "List",
                "Dict",
                "List[str]",
                "List[Dict[str,Any]]",
                "List[List[int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.get_item_stacks": {
            "name": "get_item_stacks",
            "location": 196,
            "return": [
                "List",
                "List[str]",
                "Optional[bool]",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.get_blocks": {
            "name": "get_blocks",
            "location": 199,
            "return": [
                "str",
                "int",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "xa": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "xb": [
                    "str",
                    "numpy.ndarray"
                ],
                "ya": [
                    "int",
                    "str",
                    "float",
                    "numpy.ndarray",
                    "None",
                    "Optional[str]"
                ],
                "yb": [
                    "str",
                    "numpy.ndarray"
                ],
                "za": [
                    "str",
                    "numpy.ndarray"
                ],
                "zb": [
                    "str",
                    "numpy.ndarray"
                ],
                "transpose": [
                    "bool",
                    "numpy.ndarray",
                    "float",
                    "str",
                    "Iterable[Any]"
                ]
            }
        },
        "World.get_line_of_sight": {
            "name": "get_line_of_sight",
            "location": 239,
            "return": [
                "Tuple",
                "None",
                "Optional[Dict]",
                "Mapping[str,Any]",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "str",
                    "bytes",
                    "Set[str]"
                ],
                "yaw": [
                    "int",
                    "str",
                    "Tuple[bytes]",
                    "Dict[str,Any]",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "pitch": [
                    "int",
                    "str",
                    "Tuple[bytes]",
                    "Dict[str,Any]",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "World.add_incoming_chat": {
            "name": "add_incoming_chat",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chat": [
                    "str",
                    "Dict[str,Any]"
                ],
                "speaker_name": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/test/world_visualizer.py": {
        "cube_vertices": {
            "name": "cube_vertices",
            "location": 27,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "x": [
                    "bool"
                ],
                "y": [
                    "bool"
                ],
                "z": [
                    "bool"
                ],
                "n": [
                    "bool"
                ]
            }
        },
        "tex_coord": {
            "name": "tex_coord",
            "location": 107,
            "return": [
                "Tuple[float]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "Tuple[float,float,float,float]"
                ],
                "y": [
                    "int",
                    "float",
                    "bool",
                    "Union[int,float]"
                ],
                "n": [
                    "int",
                    "bytes",
                    "Dict[str,Tuple[str,str]]"
                ]
            }
        },
        "tex_coords": {
            "name": "tex_coords",
            "location": 117,
            "return": [
                "List[Union[int,str]]",
                "bool",
                "Optional[Union[str,Any]]"
            ],
            "arguments": {
                "top": [
                    "str",
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "bottom": [
                    "Optional[Iterable[Any]]",
                    "bool",
                    "Iterable[Any]",
                    "None"
                ],
                "side": [
                    "Optional[Iterable[Any]]",
                    "bool",
                    "Iterable[Any]",
                    "None"
                ]
            }
        },
        "idm_to_tex_coords": {
            "name": "idm_to_tex_coords",
            "location": 131,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "idm": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ]
            }
        },
        "normalize": {
            "name": "normalize",
            "location": 143,
            "return": [
                "str",
                "Tuple[int]"
            ],
            "arguments": {
                "position": [
                    "int",
                    "List",
                    "str"
                ]
            }
        },
        "setup_fog": {
            "name": "setup_fog",
            "location": 925,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "setup": {
            "name": "setup",
            "location": 944,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 964,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Model.__init__": {
            "name": "__init__",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "recorder": [
                    "int",
                    "float",
                    "bool"
                ],
                "agent": [
                    "Optional[bool]",
                    "bool",
                    "None"
                ]
            }
        },
        "Model.hit_test": {
            "name": "hit_test",
            "location": 183,
            "return": [
                "Tuple[Union[list,str,int,bytes,None]]",
                "Tuple[None]",
                "Dict",
                "bool",
                "Optional[str]",
                "Dict[str,Any]",
                "Optional[Dict[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "Union[List,Dict]",
                    "List",
                    "str",
                    "bool",
                    "Dict",
                    "int"
                ],
                "vector": [
                    "int",
                    "str",
                    "Dict[str,int]"
                ],
                "max_distance": [
                    "int"
                ]
            }
        },
        "Model.exposed": {
            "name": "exposed",
            "location": 210,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "int",
                    "List",
                    "str"
                ]
            }
        },
        "Model.add_block": {
            "name": "add_block",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "texture": [
                    "float",
                    "bool",
                    "Tuple[str,int]",
                    "Tuple[Union[str,int]]"
                ],
                "immediate": [
                    "IO",
                    "bool"
                ]
            }
        },
        "Model.remove_block": {
            "name": "remove_block",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "str",
                    "Set[int]",
                    "int",
                    "bool"
                ],
                "immediate": [
                    "bool",
                    "List[Block]",
                    "int",
                    "str"
                ]
            }
        },
        "Model.check_neighbors": {
            "name": "check_neighbors",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "int",
                    "List",
                    "str"
                ]
            }
        },
        "Model.show_block": {
            "name": "show_block",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "float",
                    "bool",
                    "str",
                    "List"
                ],
                "immediate": [
                    "bool",
                    "List[Block]",
                    "int",
                    "str"
                ]
            }
        },
        "Model._show_block": {
            "name": "_show_block",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "str",
                    "SupportsInt",
                    "Sequence[T]",
                    "int",
                    "Callable[T,bool]",
                    "Callable[[T],bool]"
                ],
                "texture": [
                    "List[Union[str,str,str,str,str,str,str,str,str,str,str,str,str]]",
                    "str",
                    "List",
                    "List[int]",
                    "Sequence[T]"
                ]
            }
        },
        "Model.hide_block": {
            "name": "hide_block",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "int",
                    "str"
                ],
                "immediate": [
                    "bool",
                    "List[Block]",
                    "int",
                    "str"
                ]
            }
        },
        "Model._hide_block": {
            "name": "_hide_block",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "Mapping"
                ]
            }
        },
        "Model._enqueue": {
            "name": "_enqueue",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "int",
                    "T"
                ]
            }
        },
        "Model._dequeue": {
            "name": "_dequeue",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.process_queue": {
            "name": "process_queue",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.process_entire_queue": {
            "name": "process_entire_queue",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.clear_world": {
            "name": "clear_world",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.clone_agent_world": {
            "name": "clone_agent_world",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.show_world": {
            "name": "show_world",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.__init__": {
            "name": "__init__",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "width": [
                    "int",
                    "Dict[int,int]",
                    "float",
                    "Optional[int]",
                    "bool",
                    "str"
                ],
                "height": [
                    "int",
                    "str",
                    "Dict"
                ],
                "caption": [
                    "Text",
                    "Dict[int,int]",
                    "float",
                    "Optional[int]",
                    "int",
                    "bool",
                    "str"
                ],
                "resizable": [
                    "bool",
                    "Dict[int,int]",
                    "float",
                    "Optional[int]",
                    "int",
                    "str"
                ],
                "recorder": [
                    "int",
                    "None",
                    "bool"
                ],
                "agent": [
                    "int",
                    "None",
                    "bool"
                ]
            }
        },
        "Window.set_exclusive_mouse": {
            "name": "set_exclusive_mouse",
            "location": 500,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exclusive": [
                    "bool",
                    "str",
                    "Dict[str,Tuple[str,str]]",
                    "Dict",
                    "Dict[str,tuple[Union[str,str]]]"
                ]
            }
        },
        "Window.get_sight_vector": {
            "name": "get_sight_vector",
            "location": 508,
            "return": [
                "Tuple",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.get_motion_vector": {
            "name": "get_motion_vector",
            "location": 525,
            "return": [
                "Tuple[float]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.update": {
            "name": "update",
            "location": 546,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dt": [
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Dict",
                    "Dict[str,Dict[str,str]]",
                    "Dict[str,dict[str,str]]"
                ]
            }
        },
        "Window._update": {
            "name": "_update",
            "location": 599,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dt": [
                    "str",
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "Window.collide": {
            "name": "collide",
            "location": 623,
            "return": [
                "Tuple[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "Iterable[str]",
                    "Sequence[T]"
                ],
                "height": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Window.on_mouse_press": {
            "name": "on_mouse_press",
            "location": 669,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "int"
                ],
                "y": [
                    "bool",
                    "int"
                ],
                "button": [
                    "float",
                    "Callable",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "modifiers": [
                    "bool"
                ]
            }
        },
        "Window.on_mouse_motion": {
            "name": "on_mouse_motion",
            "location": 700,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "List[int]"
                ],
                "y": [],
                "dx": [
                    "T"
                ],
                "dy": [
                    "T"
                ]
            }
        },
        "Window.on_key_press": {
            "name": "on_key_press",
            "location": 719,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "symbol": [
                    "str",
                    "bool"
                ],
                "modifiers": [
                    "str",
                    "bool",
                    "Mapping[str,str]",
                    "Mapping"
                ]
            }
        },
        "Window.on_key_release": {
            "name": "on_key_release",
            "location": 760,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "symbol": [
                    "str",
                    "bool"
                ],
                "modifiers": [
                    "str",
                    "bool",
                    "Mapping[str,str]",
                    "Mapping"
                ]
            }
        },
        "Window.on_resize": {
            "name": "on_resize",
            "location": 785,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "width": [
                    "int",
                    "float",
                    "bool"
                ],
                "height": [
                    "int",
                    "float",
                    "Iterator[int]"
                ]
            }
        },
        "Window.set_2d": {
            "name": "set_2d",
            "location": 800,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.set_3d": {
            "name": "set_3d",
            "location": 814,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.on_draw": {
            "name": "on_draw",
            "location": 833,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.draw_characters": {
            "name": "draw_characters",
            "location": 849,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.draw_speaker_look": {
            "name": "draw_speaker_look",
            "location": 870,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.draw_focused_block": {
            "name": "draw_focused_block",
            "location": 881,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.draw_label": {
            "name": "draw_label",
            "location": 896,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.draw_reticle": {
            "name": "draw_reticle",
            "location": 917,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.draw_characters.draw_cube": {
            "name": "draw_cube",
            "location": 850,
            "return": [
                "None"
            ],
            "arguments": {
                "loc": [
                    "str"
                ],
                "color": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/test/__init__.py": {},
    "craftassist-master/python/craftassist/ttad-annotate/analyze_outputs.py": {
        "any_two": {
            "name": "any_two",
            "location": 8,
            "return": [
                "bool",
                "str",
                "bytearray",
                "Union[bytes,bytearray]",
                "bytes",
                "int"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float"
                ],
                "b": [
                    "int",
                    "float"
                ],
                "c": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/ttad-annotate/flows.py": {},
    "craftassist-master/python/craftassist/ttad-annotate/make_input_csv.py": {},
    "craftassist-master/python/craftassist/ttad-annotate/process_results.py": {
        "process_result": {
            "name": "process_result",
            "location": 14,
            "return": [
                "Optional[str]",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "full_d": [
                    "str",
                    "int"
                ]
            }
        },
        "process_dict": {
            "name": "process_dict",
            "location": 65,
            "return": [
                "Set[str]",
                "List[Match]",
                "List[str]",
                "Dict[str, str]",
                "bool",
                "dict"
            ],
            "arguments": {
                "d": [
                    "dict",
                    "Callable",
                    "List[dict]",
                    "Dict[str, Any]"
                ]
            }
        },
        "process_repeat_dict": {
            "name": "process_repeat_dict",
            "location": 116,
            "return": [
                "bool"
            ],
            "arguments": {
                "d": [
                    "str",
                    "int"
                ]
            }
        },
        "with_prefix": {
            "name": "with_prefix",
            "location": 129,
            "return": [
                "Set[str]",
                "Dict[str, Set[str]]",
                "int",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "d": [
                    "str",
                    "List[str]",
                    "T"
                ],
                "prefix": [
                    "str",
                    "List[str]",
                    "T"
                ]
            }
        },
        "snake_case": {
            "name": "snake_case",
            "location": 137,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "remove_key_prefixes": {
            "name": "remove_key_prefixes",
            "location": 141,
            "return": [
                "str"
            ],
            "arguments": {
                "d": [
                    "str",
                    "T",
                    "int",
                    "bool",
                    "Exception",
                    "dict",
                    "bytes",
                    "Sequence[T]"
                ],
                "ps": [
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        },
        "fix_spans_due_to_empty_words": {
            "name": "fix_spans_due_to_empty_words",
            "location": 157,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "Dict[str, float]",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "action_dict": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "words": [
                    "List[str]",
                    "Hashable",
                    "Dict[str, Any]"
                ]
            }
        },
        "fix_spans_due_to_empty_words.reduce_span_vals_gte": {
            "name": "reduce_span_vals_gte",
            "location": 160,
            "return": [],
            "arguments": {
                "d": [
                    "Iterable[str]",
                    "Exception",
                    "Optional[float]"
                ],
                "i": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/ttad-annotate/qualtest.py": {},
    "craftassist-master/python/craftassist/ttad-annotate/render_flows.py": {
        "render_q": {
            "name": "render_q",
            "location": 8,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "q": [
                    "str"
                ],
                "parent_id": [
                    "List",
                    "str",
                    "Set",
                    "int",
                    "IO[bytes]",
                    "IO"
                ],
                "show": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "render_span": {
            "name": "render_span",
            "location": 23,
            "return": [
                "Text",
                "List[str]",
                "bool",
                "List[Mapping[str,Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "parent_id": [
                    "str",
                    "Sequence[str]",
                    "bytes",
                    "int",
                    "float",
                    "Optional[int]",
                    "None"
                ],
                "optional": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "render_radios": {
            "name": "render_radios",
            "location": 53,
            "return": [
                "Text",
                "List[str]",
                "bool",
                "List[Mapping[str,Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "opts": [
                    "int",
                    "Union[str, int]",
                    "str",
                    "bool"
                ],
                "parent_id": [
                    "str"
                ],
                "add_other_opt": [
                    "bool",
                    "str",
                    "int",
                    "Sequence[str]",
                    "bytes"
                ]
            }
        },
        "label_tag": {
            "name": "label_tag",
            "location": 106,
            "return": [
                "str",
                "Dict[str,Any]",
                "Text"
            ],
            "arguments": {
                "tooltip": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "Optional[str]"
                ]
            }
        },
        "child_id": {
            "name": "child_id",
            "location": 113,
            "return": [
                "str",
                "bool",
                "type",
                "Dict[str, Any]"
            ],
            "arguments": {
                "parent_id": [
                    "str",
                    "bool",
                    "Dict[str,Any]"
                ],
                "text": [
                    "str",
                    "bool",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/ttad-annotate/ttad_annotate.py": {},
    "craftassist-master/python/craftassist/voxel_models/geoscorer.py": {
        "Geoscorer.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "merger_model_path": [
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "Geoscorer.use": {
            "name": "use",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "steps": [
                    "str",
                    "bool",
                    "Sequence[int]",
                    "Optional[str]",
                    "None"
                ],
                "repeat_num": [
                    "bool",
                    "str",
                    "Sequence[int]",
                    "Optional[str]"
                ],
                "rel_dir": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[List[SoftwareApplication]]",
                    "List[SoftwareApplication]"
                ]
            }
        },
        "Geoscorer.produce_segment_pos_in_context": {
            "name": "produce_segment_pos_in_context",
            "location": 44,
            "return": [
                "float",
                "Dict[str, str]",
                "List[str]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "segment": [
                    "int",
                    "bool"
                ],
                "context": [
                    "int",
                    "str",
                    "bool"
                ],
                "brc": [
                    "str",
                    "bool",
                    "float",
                    "Tuple"
                ]
            }
        },
        "Geoscorer._seg_context_processed_to_coord": {
            "name": "_seg_context_processed_to_coord",
            "location": 53,
            "return": [
                "List[bool]",
                "float",
                "str",
                "Tuple[int]"
            ],
            "arguments": {
                "self": [],
                "segment": [
                    "float",
                    "str",
                    "Tuple[int]"
                ],
                "context": [
                    "float",
                    "str",
                    "Tuple[int]"
                ],
                "context_off": [
                    "str",
                    "int",
                    "List[str]",
                    "float",
                    "[]"
                ]
            }
        },
        "Geoscorer._process_context": {
            "name": "_process_context",
            "location": 58,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]",
                "str",
                "Optional[int]",
                "set"
            ],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "Geoscorer._process_segment": {
            "name": "_process_segment",
            "location": 62,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "segment": [
                    "BaseException"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/make_seg_ds.py": {
        "open_house_schematic": {
            "name": "open_house_schematic",
            "location": 14,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "house_directory": [
                    "str",
                    "pathlib.Path",
                    "bytes",
                    "int",
                    "None",
                    "Optional[pathlib.Path]"
                ]
            }
        },
        "get_unique_pairs": {
            "name": "get_unique_pairs",
            "location": 19,
            "return": [
                "Set[tuple[int]]",
                "str",
                "Set",
                "Set[str]",
                "Mapping[str,int]"
            ],
            "arguments": {
                "house_dir": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "make_id_vocabulary": {
            "name": "make_id_vocabulary",
            "location": 39,
            "return": [
                "str",
                "Dict"
            ],
            "arguments": {
                "houses_data_path": [
                    "str",
                    "pathlib.Path",
                    "Union[str, os.PathLike]"
                ]
            }
        },
        "make_new_item": {
            "name": "make_new_item",
            "location": 53,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "house_data_path": [
                    "bool",
                    "pathlib.Path",
                    "str"
                ],
                "item": [
                    "str",
                    "List",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "vocabulary": [
                    "Tuple[Union[float,float,float,float]]",
                    "str",
                    "float",
                    "List[dict]",
                    "int",
                    "Tuple[float,float,float,float]"
                ]
            }
        },
        "create_new_seg_ds": {
            "name": "create_new_seg_ds",
            "location": 75,
            "return": [
                "List[Union[dict[str,Any],str,list[None]]]",
                "float",
                "Dict[str,Dict[str,int]]",
                "bool",
                "Sequence[str]"
            ],
            "arguments": {
                "house_data_path": [
                    "str",
                    "bool"
                ],
                "segmentation_data": [
                    "List",
                    "str",
                    "Tuple[str]",
                    "List[pathlib.Path]",
                    "bool",
                    "Optional[bool]"
                ],
                "vocabulary": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/plot_voxels.py": {
        "draw_color_hash": {
            "name": "draw_color_hash",
            "location": 23,
            "return": [
                "float",
                "str",
                "Tuple[str, int]"
            ],
            "arguments": {
                "schematic": [
                    "Tuple[numpy.array, numpy.array]",
                    "numpy.ndarray",
                    "Tuple[numpy.ndarray, numpy.ndarray]"
                ],
                "vis": [
                    "numpy.ndarray",
                    "str",
                    "Dict[str, Any]"
                ],
                "title": [
                    "Text",
                    "Union[numpy.dtype,numpy.ndarray]",
                    "Dict[str,str]",
                    "bool",
                    "List[str]"
                ],
                "threshold": [
                    "float",
                    "bool",
                    "List[str]"
                ],
                "win": [
                    "Union[numpy.dtype,numpy.ndarray]",
                    "Dict[str,str]",
                    "None",
                    "bool",
                    "List[str]"
                ],
                "bins": [
                    "int",
                    "str",
                    "numpy.ndarray",
                    "Dict[str,Any]"
                ]
            }
        },
        "draw_rgb": {
            "name": "draw_rgb",
            "location": 53,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "schematic": [
                    "Tuple[int, int]",
                    "Optional[str]",
                    "numpy.ndarray"
                ],
                "vis": [
                    "int",
                    "List[int]",
                    "Tuple[int]",
                    "str"
                ],
                "title": [
                    "Text",
                    "int",
                    "Tuple[int]",
                    "List[int]",
                    "Set",
                    "str"
                ],
                "threshold": [
                    "float",
                    "int",
                    "numpy.ndarray",
                    "Optional[str]",
                    "Optional[bool]",
                    "bool",
                    "List[str]",
                    "Tuple",
                    "torch.FloatTensor"
                ],
                "win": [
                    "int",
                    "None",
                    "Tuple[int]",
                    "List[int]",
                    "Set",
                    "str"
                ],
                "colorio": [
                    "int",
                    "bool",
                    "List[str]",
                    "Sequence[T]",
                    "List[List[float]]",
                    "Union[int,float]"
                ]
            }
        },
        "cuboid_data": {
            "name": "cuboid_data",
            "location": 81,
            "return": [
                "numpy.ndarray",
                "str",
                "List[str]",
                "bytes"
            ],
            "arguments": {
                "pos": [
                    "int",
                    "List[int]",
                    "numpy.ndarray",
                    "torch.utils.data.Dataset"
                ],
                "size": [
                    "Tuple[int]",
                    "numpy.ndarray",
                    "int",
                    "float",
                    "List[int]"
                ]
            }
        },
        "plotCubeAt": {
            "name": "plotCubeAt",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "pos": [
                    "Tuple[int]",
                    "str",
                    "bool"
                ],
                "color": [
                    "Tuple[int]",
                    "int",
                    "float",
                    "str",
                    "numpy.ndarray"
                ],
                "ax": [
                    "None",
                    "Optional[int]",
                    "int",
                    "float",
                    "torch.LongTensor",
                    "Optional[Any]"
                ]
            }
        },
        "visrotate": {
            "name": "visrotate",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "ax": [
                    "int"
                ],
                "viz": [
                    "int"
                ]
            }
        },
        "SchematicPlotter.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "viz": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "SchematicPlotter.drawMatplot": {
            "name": "drawMatplot",
            "location": 141,
            "return": [
                "Tuple",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "schematic": [
                    "List[str]",
                    "int",
                    "Optional[int]",
                    "Collection[int]",
                    "numpy.ndarray"
                ],
                "n": [
                    "int"
                ],
                "title": [
                    "Text",
                    "int",
                    "bool",
                    "Iterable[T]"
                ]
            }
        },
        "SchematicPlotter.drawGeoscorerPlotly": {
            "name": "drawGeoscorerPlotly",
            "location": 164,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "schematic": [
                    "int",
                    "Optional[Dict]"
                ]
            }
        },
        "SchematicPlotter.drawPlotly": {
            "name": "drawPlotly",
            "location": 219,
            "return": [
                "int",
                "List",
                "Callable",
                "str",
                "Dict[str,Any]",
                "List[list[Any]]",
                "List[str]",
                "List[tuple[Union[Any,Any,Any,Any]]]"
            ],
            "arguments": {
                "self": [],
                "schematic": [
                    "int",
                    "Optional[Dict]"
                ],
                "title": [
                    "Text",
                    "List",
                    "List[Tuple[int,int]]",
                    "str",
                    "Iterable[Any]"
                ],
                "ptype": [
                    "Text",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/subcomponent_classifier.py": {
        "SubcomponentClassifierWrapper.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "bool",
                    "str",
                    "MutableMapping[str,str]",
                    "Dict",
                    "MutableMapping",
                    "Dict[str,Any]"
                ],
                "model_path": [
                    "Optional[str]",
                    "str",
                    "Optional[TextIO]",
                    "None",
                    "TextIO"
                ],
                "vocab_path": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[Callable[[Any],None]]",
                    "Callable[Any,None]",
                    "Iterable[str]",
                    "None"
                ],
                "perceive_freq": [
                    "int",
                    "bool",
                    "MutableMapping[str,str]",
                    "str",
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "SubcomponentClassifierWrapper.perceive": {
            "name": "perceive",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "force": [
                    "bool",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict"
                ]
            }
        },
        "SubComponentClassifier.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "voxel_model_path": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Union[str,List[str]]",
                    "List[str]"
                ],
                "vocab_path": [
                    "str",
                    "None",
                    "bool",
                    "int"
                ]
            }
        },
        "SubComponentClassifier.run": {
            "name": "run",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubComponentClassifier._watch_single_object": {
            "name": "_watch_single_object",
            "location": 116,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, float]",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "tuple_blocks": [
                    "str",
                    "Set",
                    "Tuple"
                ]
            }
        },
        "SubComponentClassifier.recognize": {
            "name": "recognize",
            "location": 142,
            "return": [
                "Dict",
                "List[str]",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "list_of_tuple_blocks": [
                    "List",
                    "List[dict]",
                    "bool",
                    "bytes",
                    "List[Dict]",
                    "Exception",
                    "Callable[...,bool]",
                    "Callable[[int],None]"
                ]
            }
        },
        "SubComponentClassifier._watch_single_object.get_tags": {
            "name": "get_tags",
            "location": 123,
            "return": [
                "List",
                "Set[str]",
                "Dict[str,Set[str]]",
                "Optional[bool]",
                "Iterator[Tuple[str,str]]",
                "List[str]"
            ],
            "arguments": {
                "p": [
                    "str",
                    "int",
                    "dict",
                    "bool"
                ]
            }
        },
        "SubComponentClassifier._watch_single_object.apply_offsets": {
            "name": "apply_offsets",
            "location": 129,
            "return": [
                "Tuple",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cube_loc": [
                    "int",
                    "Callable",
                    "str"
                ],
                "offsets": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "SubcomponentClassifierWrapper.perceive.contaminated": {
            "name": "contaminated",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "blocks": [
                    "Sequence[Sequence[T]]",
                    "dict"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/detection-transformer/box_ops.py": {
        "box_area": {
            "name": "box_area",
            "location": 4,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "boxes": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "box_cxcywh_to_xyxy": {
            "name": "box_cxcywh_to_xyxy",
            "location": 17,
            "return": [
                "bytes",
                "Union[bytes, bytearray]",
                "bytearray",
                "str"
            ],
            "arguments": {
                "x": [
                    "Iterable[Any]"
                ]
            }
        },
        "box_xyxy_to_cxcywh": {
            "name": "box_xyxy_to_cxcywh",
            "location": 23,
            "return": [
                "bytes",
                "Union[bytes, bytearray]",
                "bytearray",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "Union[int, float]"
                ]
            }
        },
        "box_cxcyczwhd_to_xyzxyz": {
            "name": "box_cxcyczwhd_to_xyzxyz",
            "location": 29,
            "return": [
                "bytes",
                "Union[bytes, bytearray]",
                "bytearray",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "torch.Tensor"
                ]
            }
        },
        "box_xyzxyz_to_cxcyczwhd": {
            "name": "box_xyzxyz_to_cxcyczwhd",
            "location": 42,
            "return": [
                "bytes",
                "Union[bytes, bytearray]",
                "bytearray",
                "str"
            ],
            "arguments": {
                "x": [
                    "int"
                ]
            }
        },
        "box_iou": {
            "name": "box_iou",
            "location": 49,
            "return": [
                "Tuple",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "boxes1": [
                    "str"
                ],
                "boxes2": [
                    "str"
                ]
            }
        },
        "generalized_box_iou": {
            "name": "generalized_box_iou",
            "location": 65,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "boxes1": [
                    "Exception"
                ],
                "boxes2": [
                    "Exception"
                ]
            }
        },
        "masks_to_boxes": {
            "name": "masks_to_boxes",
            "location": 89,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "masks": [
                    "float"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/detection-transformer/coco_eval.py": {
        "convert_to_xyzwhd": {
            "name": "convert_to_xyzwhd",
            "location": 158,
            "return": [
                "Union[str, int, float]",
                "numpy.ndarray",
                "str",
                "torch.Tensor",
                "List[int]",
                "float",
                "Dict[str, numpy.ndarray]"
            ],
            "arguments": {
                "boxes": [
                    "Union[str, int, float]",
                    "numpy.ndarray",
                    "str",
                    "torch.Tensor",
                    "List[int]",
                    "float",
                    "Dict[str, numpy.ndarray]"
                ]
            }
        },
        "merge": {
            "name": "merge",
            "location": 163,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "img_ids": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Iterable[str]",
                    "Iterable[int]"
                ],
                "eval_imgs": [
                    "int",
                    "str",
                    "Set[str]"
                ]
            }
        },
        "create_common_coco_eval": {
            "name": "create_common_coco_eval",
            "location": 185,
            "return": [],
            "arguments": {
                "coco_eval": [
                    "str",
                    "int",
                    "raiden.utils.ChainID"
                ],
                "img_ids": [
                    "bool",
                    "Union[numpy.ndarray, pandas.DataFrame, None]"
                ],
                "eval_imgs": [
                    "Dict[str, Set[str]]",
                    "int"
                ]
            }
        },
        "createIndex": {
            "name": "createIndex",
            "location": 204,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "loadRes": {
            "name": "loadRes",
            "location": 239,
            "return": [
                "str",
                "Union[int, float, complex]",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "resFile": []
            }
        },
        "evaluate": {
            "name": "evaluate",
            "location": 304,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CocoEvaluator.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "coco_gt": [
                    "bool",
                    "Sequence[int]",
                    "list",
                    "Callable[..., None]",
                    "str"
                ],
                "iou_types": [
                    "bool",
                    "str"
                ]
            }
        },
        "CocoEvaluator.update": {
            "name": "update",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "predictions": [
                    "dict",
                    "Dict[Hashable, Any]",
                    "Dict[str, \"Outcome\"]",
                    "Dict[str, Set[str]]"
                ]
            }
        },
        "CocoEvaluator.synchronize_between_processes": {
            "name": "synchronize_between_processes",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CocoEvaluator.accumulate": {
            "name": "accumulate",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CocoEvaluator.summarize": {
            "name": "summarize",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CocoEvaluator.prepare": {
            "name": "prepare",
            "location": 62,
            "return": [
                "bool",
                "int",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "predictions": [
                    "str",
                    "int",
                    "bool"
                ],
                "iou_type": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "CocoEvaluator.prepare_for_coco_detection": {
            "name": "prepare_for_coco_detection",
            "location": 72,
            "return": [
                "int",
                "List[int]",
                "List[Dict]",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "predictions": [
                    "Mapping",
                    "Dict[str, int]",
                    "Dict[str, float]"
                ]
            }
        },
        "CocoEvaluator.prepare_for_coco_segmentation": {
            "name": "prepare_for_coco_segmentation",
            "location": 96,
            "return": [
                "int",
                "List[int]",
                "List[Dict]",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "predictions": [
                    "Mapping",
                    "Dict[str, int]",
                    "Dict[str, float]"
                ]
            }
        },
        "CocoEvaluator.prepare_for_coco_keypoint": {
            "name": "prepare_for_coco_keypoint",
            "location": 131,
            "return": [
                "int",
                "List[int]",
                "List[Dict]",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "predictions": [
                    "Mapping",
                    "Dict[str, int]",
                    "Dict[str, float]"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/detection-transformer/detection.py": {
        "get_args_parser": {
            "name": "get_args_parser",
            "location": 23,
            "return": [
                "argparse._SubParsersAction",
                "argparse.ArgumentParser",
                "argparse._MutuallyExclusiveGroup"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 101,
            "return": [
                "None",
                "bytes",
                "raiden.utils.Signature",
                "utils.Encoded",
                "raiden.utils.Optional[raiden.utils.Signature]"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/detection-transformer/engine.py": {
        "train_one_epoch": {
            "name": "train_one_epoch",
            "location": 13,
            "return": [
                "Dict",
                "str",
                "Optional[str]",
                "bool",
                "Optional[List[Any]]",
                "List[str]",
                "Optional[bool]",
                "T"
            ],
            "arguments": {
                "model": [
                    "int",
                    "bool",
                    "float",
                    "str"
                ],
                "criterion": [
                    "dict",
                    "bool",
                    "Sequence[float]"
                ],
                "data_loader": [
                    "Tuple[Union[float,float,float]]",
                    "str",
                    "Tuple[float,float,float]",
                    "Dict[str,Any]",
                    "bool",
                    "int"
                ],
                "optimizer": [
                    "bytes",
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "dict",
                    "List[List[str]]",
                    "Dict[str, Any]"
                ],
                "device": [
                    "Dict",
                    "List[str]",
                    "str",
                    "Dict[str,int]",
                    "Sequence[Dict[str,Any]]",
                    "Sequence[dict[str,Any]]"
                ],
                "epoch": [
                    "str",
                    "int",
                    "OrderedDict",
                    "Mapping[str,str]",
                    "Mapping"
                ],
                "max_norm": [
                    "int",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "evaluate": {
            "name": "evaluate",
            "location": 75,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "model": [
                    "Optional[float]",
                    "Optional[int]",
                    "float",
                    "bool"
                ],
                "criterion": [
                    "Sequence[int]",
                    "int",
                    "Dict[str, Dict[str, Any]]",
                    "float",
                    "bool"
                ],
                "postprocessor": [
                    "List",
                    "Dict[str,Any]",
                    "int",
                    "Type[T]",
                    "Type"
                ],
                "data_loader": [
                    "int",
                    "Dict",
                    "bytes"
                ],
                "base_ds": [
                    "float",
                    "int",
                    "raiden.utils.PaymentWithFeeAmount",
                    "raiden.utils.Balance"
                ],
                "device": [
                    "bool",
                    "str",
                    "Dict",
                    "int"
                ],
                "eval_bbox": [
                    "str",
                    "int"
                ],
                "eval_masks": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/detection-transformer/lvis_eval.py": {
        "convert_to_xywh": {
            "name": "convert_to_xywh",
            "location": 736,
            "return": [
                "Union[str, int, float]",
                "numpy.ndarray",
                "str",
                "torch.Tensor",
                "List[int]",
                "float",
                "Dict[str, numpy.ndarray]"
            ],
            "arguments": {
                "boxes": [
                    "Union[str, int, float]",
                    "numpy.ndarray",
                    "str",
                    "torch.Tensor",
                    "List[int]",
                    "float",
                    "Dict[str, numpy.ndarray]"
                ]
            }
        },
        "merge": {
            "name": "merge",
            "location": 741,
            "return": [
                "Tuple",
                "str",
                "int"
            ],
            "arguments": {
                "img_ids": [
                    "str",
                    "int",
                    "Iterable[str]",
                    "Iterable[int]",
                    "Optional[str]",
                    "None"
                ],
                "eval_imgs": [
                    "int",
                    "str",
                    "Set[str]"
                ]
            }
        },
        "create_common_lvis_eval": {
            "name": "create_common_lvis_eval",
            "location": 763,
            "return": [
                "None"
            ],
            "arguments": {
                "lvis_eval": [
                    "str",
                    "int",
                    "raiden.utils.ChainID"
                ],
                "img_ids": [
                    "bool",
                    "Union[numpy.ndarray,pandas.DataFrame,None]",
                    "None"
                ],
                "eval_imgs": [
                    "Dict[str,Set[str]]",
                    "int",
                    "Dict[str,set[str]]"
                ]
            }
        },
        "Params.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iou_type": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "LVISResults.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lvis_gt": [
                    "float",
                    "Optional[float]",
                    "int",
                    "None",
                    "Optional[numpy.ndarray]"
                ],
                "results": [
                    "str",
                    "Type",
                    "int",
                    "torch.Tensor",
                    "bool"
                ],
                "max_dets": [
                    "int",
                    "float",
                    "str",
                    "Tuple[int]"
                ]
            }
        },
        "LVISResults.limit_dets_per_image": {
            "name": "limit_dets_per_image",
            "location": 106,
            "return": [
                "List",
                "List[int]",
                "str",
                "int",
                "Set[str]",
                "Tuple[int,int]",
                "Tuple[List[int],List[int]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "anns": [
                    "str",
                    "Dict[str,str]",
                    "int",
                    "metrics_backend.utils.Address"
                ],
                "max_dets": [
                    "int",
                    "str"
                ]
            }
        },
        "LVISResults.get_top_results": {
            "name": "get_top_results",
            "location": 119,
            "return": [
                "List",
                "List[str]",
                "str",
                "List[Dict]",
                "List[int]",
                "Union[List,Tuple]"
            ],
            "arguments": {
                "self": [],
                "img_id": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "score_thrs": [
                    "int",
                    "str"
                ]
            }
        },
        "LVISEval.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lvis_gt": [
                    "int",
                    "str",
                    "bool",
                    "Tuple[Union[float,float]]",
                    "Tuple[float,float]"
                ],
                "lvis_dt": [
                    "Tuple[int,int]",
                    "None",
                    "int",
                    "Dict[str,int]",
                    "Tuple[Union[int,int]]",
                    "Optional[str]",
                    "str"
                ],
                "iou_type": [
                    "str",
                    "Text"
                ]
            }
        },
        "LVISEval._to_mask": {
            "name": "_to_mask",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "anns": [
                    "Dict",
                    "List[str]",
                    "IO",
                    "Iterable[numpy.ndarray]",
                    "int",
                    "Iterator[Dict[str,str]]",
                    "torch.device"
                ],
                "lvis": [
                    "numpy.ndarray",
                    "float",
                    "Dict[str, numpy.ndarray]",
                    "dict",
                    "str",
                    "int"
                ]
            }
        },
        "LVISEval._prepare": {
            "name": "_prepare",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LVISEval._prepare_freq_group": {
            "name": "_prepare_freq_group",
            "location": 218,
            "return": [
                "List[list]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LVISEval.evaluate": {
            "name": "evaluate",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LVISEval._get_gt_dt": {
            "name": "_get_gt_dt",
            "location": 255,
            "return": [
                "Tuple[list]",
                "str",
                "int",
                "raiden.utils.TokenAmount",
                "float",
                "raiden.utils.Locksroot",
                "raiden.utils.Nonce"
            ],
            "arguments": {
                "self": [],
                "img_id": [
                    "int",
                    "str"
                ],
                "cat_id": [
                    "int",
                    "str"
                ]
            }
        },
        "LVISEval.compute_iou": {
            "name": "compute_iou",
            "location": 268,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "img_id": [
                    "int",
                    "str"
                ],
                "cat_id": [
                    "int",
                    "str"
                ]
            }
        },
        "LVISEval.evaluate_img": {
            "name": "evaluate_img",
            "location": 294,
            "return": [
                "None",
                "Callable[...,None]",
                "bool",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "img_id": [
                    "int",
                    "str",
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "cat_id": [
                    "int",
                    "str",
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "area_rng": [
                    "str",
                    "int",
                    "List[dict[str,float]]",
                    "List[str]",
                    "float",
                    "List[Dict[str,float]]"
                ]
            }
        },
        "LVISEval.accumulate": {
            "name": "accumulate",
            "location": 394,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LVISEval._summarize": {
            "name": "_summarize",
            "location": 503,
            "return": [
                "int",
                "str",
                "torch.Tensor"
            ],
            "arguments": {
                "self": [],
                "summary_type": [
                    "bool",
                    "str",
                    "Union[float,Tuple[float,float]]",
                    "float",
                    "Tuple[Union[float,float]]"
                ],
                "iou_thr": [
                    "Optional[Union[int,float]]",
                    "None",
                    "Optional[str]",
                    "str",
                    "int",
                    "Optional[int]",
                    "float",
                    "Optional[Callable[[bool],None]]",
                    "Callable[bool,None]",
                    "Optional[Sequence[Any]]",
                    "Sequence[Any]"
                ],
                "area_rng": [
                    "Text",
                    "str",
                    "Mapping[str,Any]",
                    "utils.ResolveType",
                    "List[int]",
                    "int"
                ],
                "freq_group_idx": [
                    "None",
                    "Dict",
                    "Optional[numpy.array]",
                    "float",
                    "numpy.ndarray"
                ]
            }
        },
        "LVISEval.summarize": {
            "name": "summarize",
            "location": 530,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LVISEval.run": {
            "name": "run",
            "location": 566,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LVISEval.print_results": {
            "name": "print_results",
            "location": 572,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LVISEval.get_results": {
            "name": "get_results",
            "location": 604,
            "return": [
                "str",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LvisEvaluator.__init__": {
            "name": "__init__",
            "location": 616,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lvis_gt": [
                    "bool",
                    "datetime.date",
                    "str",
                    "Sequence[int]"
                ],
                "iou_types": [
                    "str",
                    "bool"
                ]
            }
        },
        "LvisEvaluator.update": {
            "name": "update",
            "location": 629,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "predictions": [
                    "Dict",
                    "Dict[Hashable,Any]",
                    "Dict[str,Outcome]",
                    "Dict[str,O]",
                    "Dict[str,Set[str]]",
                    "Dict[str,set[str]]"
                ]
            }
        },
        "LvisEvaluator.synchronize_between_processes": {
            "name": "synchronize_between_processes",
            "location": 650,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LvisEvaluator.accumulate": {
            "name": "accumulate",
            "location": 657,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LvisEvaluator.summarize": {
            "name": "summarize",
            "location": 661,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LvisEvaluator.prepare": {
            "name": "prepare",
            "location": 666,
            "return": [
                "bool",
                "int",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "predictions": [
                    "str",
                    "int",
                    "bool"
                ],
                "iou_type": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "LvisEvaluator.prepare_for_lvis_detection": {
            "name": "prepare_for_lvis_detection",
            "location": 676,
            "return": [
                "List[dict[Text,Union[tuple[Union[str,int]],tuple[Union[str,float]],str]]]",
                "int",
                "List[int]",
                "List[Dict]",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "predictions": [
                    "Dict[str,int]",
                    "Dict[str,float]",
                    "Mapping"
                ]
            }
        },
        "LvisEvaluator.prepare_for_lvis_segmentation": {
            "name": "prepare_for_lvis_segmentation",
            "location": 700,
            "return": [
                "List[dict[Text,Union[tuple[Union[str,int]],tuple[Union[str,float]],str,bytes,float]]]",
                "int",
                "List[int]",
                "List[Dict]",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "predictions": [
                    "Dict[str,int]",
                    "Dict[str,float]",
                    "Mapping"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/detection-transformer/plot_utils.py": {
        "plot_logs": {
            "name": "plot_logs",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "logs": [
                    "str",
                    "bool",
                    "Optional[tuple]",
                    "pandas.DataFrame",
                    "Union[bool, List, Tuple]"
                ],
                "fields": [
                    "bool",
                    "int",
                    "bytes",
                    "str"
                ],
                "ewm_col": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "plot_precision_recall": {
            "name": "plot_precision_recall",
            "location": 36,
            "return": [
                "Tuple",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "files": [
                    "pathlib.Path",
                    "List[str]",
                    "str",
                    "Union[str, List[str]]",
                    "List[Tuple[str, str]]",
                    "Type[Path]"
                ],
                "naming_scheme": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "Union[str,bytes]",
                    "List[Source]"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/detection-transformer/run_with_submitit.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 10,
            "return": [
                "argparse.Namespace",
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "get_shared_folder": {
            "name": "get_shared_folder",
            "location": 38,
            "return": [
                "Path",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "get_init_file": {
            "name": "get_init_file",
            "location": 47,
            "return": [
                "Optional[str]",
                "str",
                "Generator[pathlib.Path, None, None]",
                "list",
                "pathlib.Path",
                "bool"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Trainer.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "Trainer.__call__": {
            "name": "__call__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trainer.checkpoint": {
            "name": "checkpoint",
            "location": 66,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trainer._setup_gpu_args": {
            "name": "_setup_gpu_args",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/detection-transformer/test_box_ops.py": {
        "Tester.test_box_cxcywh_to_xyxy": {
            "name": "test_box_cxcywh_to_xyxy",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/detection-transformer/to_coco_api.py": {
        "convert_to_coco_api": {
            "name": "convert_to_coco_api",
            "location": 11,
            "return": [
                "COCO",
                "str",
                "Dict[str,Any]",
                "OrderedDict[str,Any]",
                "Dict"
            ],
            "arguments": {
                "ds": [
                    "int"
                ]
            }
        },
        "get_coco_api_from_dataset": {
            "name": "get_coco_api_from_dataset",
            "location": 68,
            "return": [],
            "arguments": {
                "dataset": [
                    "Dict[str,Any]",
                    "int"
                ]
            }
        },
        "PrepareInstance.__call__": {
            "name": "__call__",
            "location": 105,
            "return": [
                "Tuple[Union[str,float,int,dict[Text,list]]]",
                "Sequence[cirq.Qid]",
                "List[str]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "str",
                    "float",
                    "int",
                    "torch.Tensor"
                ],
                "target": [
                    "str",
                    "torch.Tensor",
                    "int"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/detection-transformer/transforms.py": {
        "crop": {
            "name": "crop",
            "location": 10,
            "return": [
                "Tuple",
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "image": [
                    "PIL.Image.Image",
                    "PIL.Image"
                ],
                "target": [
                    "TextIO",
                    "PIL.Image"
                ],
                "region": [
                    "torch.Tensor",
                    "PIL.Image"
                ]
            }
        },
        "hflip": {
            "name": "hflip",
            "location": 53,
            "return": [
                "Tuple",
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "image": [
                    "torch.Tensor",
                    "PIL.Image.Image"
                ],
                "target": [
                    "int",
                    "str"
                ]
            }
        },
        "resize": {
            "name": "resize",
            "location": 72,
            "return": [
                "Tuple[None]",
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "image": [
                    "int",
                    "Tuple[Union[int,int]]",
                    "torch.LongTensor",
                    "bool",
                    "Union[Tuple[int,int],int]"
                ],
                "target": [
                    "str",
                    "bytes",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "size": [
                    "int",
                    "Tuple[Union[int,int]]",
                    "torch.LongTensor",
                    "bool",
                    "Union[Tuple[int,int],int]"
                ],
                "max_size": [
                    "int",
                    "None",
                    "float",
                    "torch.Tensor",
                    "bool"
                ]
            }
        },
        "pad": {
            "name": "pad",
            "location": 133,
            "return": [
                "Tuple[None]",
                "str",
                "Tuple[Union[str,None,int,set]]",
                "int",
                "float"
            ],
            "arguments": {
                "image": [
                    "PIL.Image.Image",
                    "PIL.Image"
                ],
                "target": [
                    "Any",
                    "str",
                    "bool",
                    "bytes",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ],
                "padding": [
                    "torch.Tensor",
                    "int",
                    "PIL.Image.Image"
                ]
            }
        },
        "resize.get_size_with_aspect_ratio": {
            "name": "get_size_with_aspect_ratio",
            "location": 75,
            "return": [
                "Tuple",
                "str",
                "Tuple[int]",
                "float",
                "bool"
            ],
            "arguments": {
                "image_size": [
                    "int",
                    "float",
                    "torch.Tensor",
                    "Tuple[int, int]",
                    "str",
                    "Tuple[float, float]"
                ],
                "size": [
                    "int",
                    "Optional[int]",
                    "str"
                ],
                "max_size": [
                    "None",
                    "int",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "resize.get_size": {
            "name": "get_size",
            "location": 95,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "image_size": [
                    "int",
                    "bool",
                    "float",
                    "str"
                ],
                "size": [
                    "int"
                ],
                "max_size": [
                    "None",
                    "int",
                    "bool",
                    "float",
                    "str"
                ]
            }
        },
        "RandomCrop.__init__": {
            "name": "__init__",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "bytes"
                ]
            }
        },
        "RandomCrop.__call__": {
            "name": "__call__",
            "location": 150,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "img": [
                    "int",
                    "torch.LongTensor"
                ],
                "target": [
                    "Tuple[cirq.ops.raw_types.QubitId]",
                    "Tuple[cirq.ops.QubitId]"
                ]
            }
        },
        "RandomSizeCrop.__init__": {
            "name": "__init__",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "min_size": [
                    "int",
                    "float",
                    "Tuple[Union[int,int,int]]",
                    "bool",
                    "Tuple[int,int,int]"
                ],
                "max_size": [
                    "int",
                    "float",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]",
                    "Union[Tuple[int,int],int]"
                ]
            }
        },
        "RandomSizeCrop.__call__": {
            "name": "__call__",
            "location": 160,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "img": [
                    "int",
                    "List[float]",
                    "List[int]"
                ],
                "target": [
                    "Tuple[cirq.ops.raw_types.QubitId]",
                    "Tuple[cirq.ops.QubitId]"
                ]
            }
        },
        "CenterCrop.__init__": {
            "name": "__init__",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "bytes"
                ]
            }
        },
        "CenterCrop.__call__": {
            "name": "__call__",
            "location": 171,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "img": [
                    "int",
                    "torch.nn.utils.rnn.PackedSequence",
                    "ops.Gate"
                ],
                "target": [
                    "Tuple[cirq.ops.raw_types.QubitId]",
                    "Tuple[cirq.ops.QubitId]"
                ]
            }
        },
        "RandomHorizontalFlip.__init__": {
            "name": "__init__",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "float",
                    "int",
                    "bool"
                ]
            }
        },
        "RandomHorizontalFlip.__call__": {
            "name": "__call__",
            "location": 183,
            "return": [
                "Tuple[tuple[cirq.ops.raw_types.QubitId]]",
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "img": [
                    "Tuple[cirq.ops.raw_types.QubitId]",
                    "Tuple[cirq.ops.QubitId]"
                ],
                "target": [
                    "Tuple[cirq.ops.raw_types.QubitId]",
                    "Tuple[cirq.ops.QubitId]"
                ]
            }
        },
        "RandomResize.__init__": {
            "name": "__init__",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sizes": [
                    "int",
                    "List",
                    "List[List[int]]",
                    "List[int]",
                    "List[list[int]]",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "max_size": [
                    "int",
                    "None",
                    "Tuple[int,int,int]",
                    "Tuple[Union[int,int,int]]"
                ]
            }
        },
        "RandomResize.__call__": {
            "name": "__call__",
            "location": 195,
            "return": [
                "str",
                "Tuple[float, float]",
                "Tuple[Tuple[int, Any]]"
            ],
            "arguments": {
                "self": [],
                "img": [
                    "int",
                    "Sequence[cirq.Qid]"
                ],
                "target": [
                    "int",
                    "Sequence[cirq.Qid]",
                    "None"
                ]
            }
        },
        "RandomPad.__init__": {
            "name": "__init__",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_pad": [
                    "int",
                    "float",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "RandomPad.__call__": {
            "name": "__call__",
            "location": 204,
            "return": [
                "str",
                "Tuple[float, float]"
            ],
            "arguments": {
                "self": [],
                "img": [
                    "Tuple[cirq.ops.raw_types.QubitId]",
                    "Tuple[cirq.ops.QubitId]"
                ],
                "target": [
                    "Tuple[cirq.ops.raw_types.QubitId]",
                    "Tuple[cirq.ops.QubitId]"
                ]
            }
        },
        "RandomSelect.__init__": {
            "name": "__init__",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transforms1": [
                    "int",
                    "float",
                    "bool"
                ],
                "transforms2": [
                    "int",
                    "float",
                    "bool"
                ],
                "p": [
                    "float",
                    "int",
                    "bool"
                ]
            }
        },
        "RandomSelect.__call__": {
            "name": "__call__",
            "location": 221,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "img": [
                    "Tuple[cirq.ops.raw_types.QubitId]",
                    "Tuple[cirq.ops.QubitId]"
                ],
                "target": [
                    "Tuple[cirq.ops.raw_types.QubitId]",
                    "Tuple[cirq.ops.QubitId]"
                ]
            }
        },
        "ToTensor.__call__": {
            "name": "__call__",
            "location": 228,
            "return": [
                "Tuple[Union[Callable,int,float]]",
                "Dict",
                "torch.nn.Module",
                "Sequence[T]",
                "Callable[[T],bool]"
            ],
            "arguments": {
                "self": [],
                "img": [
                    "Callable",
                    "int",
                    "float"
                ],
                "target": [
                    "Callable",
                    "int",
                    "float"
                ]
            }
        },
        "RandomErasing.__init__": {
            "name": "__init__",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomErasing.__call__": {
            "name": "__call__",
            "location": 236,
            "return": [
                "Tuple[Union[Callable,int,float]]",
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "img": [
                    "Callable",
                    "int",
                    "float"
                ],
                "target": [
                    "Callable",
                    "int",
                    "float"
                ]
            }
        },
        "Normalize.__init__": {
            "name": "__init__",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mean": [
                    "int",
                    "float",
                    "bool"
                ],
                "std": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Normalize.__call__": {
            "name": "__call__",
            "location": 245,
            "return": [
                "Callable",
                "Tuple[None]",
                "bool",
                "Tuple"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "torch.Tensor",
                    "PIL.Image.Image"
                ],
                "target": [
                    "str",
                    "List[bytes]"
                ]
            }
        },
        "RemoveDifficult.__init__": {
            "name": "__init__",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "enabled": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "RemoveDifficult.__call__": {
            "name": "__call__",
            "location": 263,
            "return": [
                "Callable",
                "Tuple[Optional[str]]",
                "bool",
                "Tuple[Union[str,int,list]]"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "str"
                ],
                "target": [
                    "None",
                    "T",
                    "Iterable",
                    "str",
                    "Optional[T]"
                ]
            }
        },
        "Compose.__init__": {
            "name": "__init__",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transforms": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Compose.__call__": {
            "name": "__call__",
            "location": 279,
            "return": [
                "Tuple",
                "Sequence[cirq.Qid]",
                "List[str]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "torch.Tensor"
                ],
                "target": [
                    "torch.Tensor"
                ]
            }
        },
        "Compose.__repr__": {
            "name": "__repr__",
            "location": 284,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/detection-transformer/utils.py": {
        "all_gather": {
            "name": "all_gather",
            "location": 78,
            "return": [
                "List[Union[dict,dict[str,Any],str]]",
                "Dict",
                "List",
                "int",
                "Union[Dict,Tuple]"
            ],
            "arguments": {
                "data": [
                    "Dict",
                    "Dict[str,Any]",
                    "str"
                ]
            }
        },
        "reduce_dict": {
            "name": "reduce_dict",
            "location": 121,
            "return": [
                "Dict",
                "Dict[int,List[str]]",
                "int",
                "Dict[str,Dict]",
                "Mapping[str,Any]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "input_dict": [
                    "dict",
                    "Dict[str, str]"
                ],
                "average": [
                    "bool",
                    "Dict",
                    "int",
                    "str",
                    "Dict[str,Union[str,int]]"
                ]
            }
        },
        "get_sha": {
            "name": "get_sha",
            "location": 254,
            "return": [
                "Text",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "collate_fn": {
            "name": "collate_fn",
            "location": 275,
            "return": [
                "Tuple",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "batch": [
                    "str",
                    "bytes",
                    "int",
                    "Deque",
                    "Tuple[FrozenSet[int]]",
                    "Tuple[frozenset]"
                ]
            }
        },
        "setup_for_distributed": {
            "name": "setup_for_distributed",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "is_master": [
                    "bool",
                    "List[int]"
                ]
            }
        },
        "is_dist_avail_and_initialized": {
            "name": "is_dist_avail_and_initialized",
            "location": 348,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "get_world_size": {
            "name": "get_world_size",
            "location": 356,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "get_rank": {
            "name": "get_rank",
            "location": 362,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "is_main_process": {
            "name": "is_main_process",
            "location": 368,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "save_on_master": {
            "name": "save_on_master",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "init_distributed_mode": {
            "name": "init_distributed_mode",
            "location": 377,
            "return": [
                "Set",
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "accuracy": {
            "name": "accuracy",
            "location": 405,
            "return": [
                "List",
                "Dict[str,str]",
                "torch.Tensor",
                "str"
            ],
            "arguments": {
                "output": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "target": [
                    "str",
                    "dict",
                    "Iterable[str]",
                    "bytes",
                    "bool"
                ],
                "topk": [
                    "Tuple[int]",
                    "str",
                    "bool",
                    "Sequence[Sequence[T]]",
                    "int"
                ]
            }
        },
        "SmoothedValue.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "window_size": [
                    "int",
                    "torch.Tensor",
                    "Union[str,Dict[str,Any]]",
                    "List[int]",
                    "Optional[Dict]"
                ],
                "fmt": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "Optional[List[Any]]"
                ]
            }
        },
        "SmoothedValue.update": {
            "name": "update",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "List[bytes]",
                    "Sequence[T]",
                    "Type",
                    "Callable"
                ],
                "n": [
                    "int",
                    "Optional[bool]"
                ]
            }
        },
        "SmoothedValue.synchronize_between_processes": {
            "name": "synchronize_between_processes",
            "location": 33,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmoothedValue.median": {
            "name": "median",
            "location": 47,
            "return": [
                "int",
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmoothedValue.avg": {
            "name": "avg",
            "location": 52,
            "return": [
                "int",
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmoothedValue.global_avg": {
            "name": "global_avg",
            "location": 57,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmoothedValue.max": {
            "name": "max",
            "location": 61,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmoothedValue.value": {
            "name": "value",
            "location": 65,
            "return": [
                "Union[str, int, float]",
                "float",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmoothedValue.__str__": {
            "name": "__str__",
            "location": 68,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricLogger.__init__": {
            "name": "__init__",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delimiter": [
                    "Text",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "MetricLogger.update": {
            "name": "update",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricLogger.__getattr__": {
            "name": "__getattr__",
            "location": 160,
            "return": [
                "bool",
                "int",
                "bytes",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "str",
                    "None"
                ]
            }
        },
        "MetricLogger.__str__": {
            "name": "__str__",
            "location": 167,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricLogger.synchronize_between_processes": {
            "name": "synchronize_between_processes",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricLogger.add_meter": {
            "name": "add_meter",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "meter": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        },
        "MetricLogger.log_every": {
            "name": "log_every",
            "location": 180,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "iterable": [
                    "str",
                    "List[str]",
                    "Iterator[str]",
                    "bool"
                ],
                "print_freq": [
                    "int",
                    "str",
                    "List[str]",
                    "List[Dict]",
                    "Iterable",
                    "bool"
                ],
                "header": [
                    "str",
                    "None",
                    "bool",
                    "List[str]",
                    "Optional[str]",
                    "Type[Callable[...,Any]]",
                    "Type"
                ]
            }
        },
        "get_sha._run": {
            "name": "_run",
            "location": 257,
            "return": [
                "str"
            ],
            "arguments": {
                "command": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "NestedTensor.__init__": {
            "name": "__init__",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tensors": [
                    "int",
                    "float",
                    "bool"
                ],
                "mask": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "NestedTensor.to": {
            "name": "to",
            "location": 286,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NestedTensor.decompose": {
            "name": "decompose",
            "location": 291,
            "return": [
                "Tuple",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NestedTensor.from_tensor_list": {
            "name": "from_tensor_list",
            "location": 295,
            "return": [
                "str",
                "Type[T]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "Sequence[MutableSet]",
                    "slice",
                    "Sequence[MutableSet[int]]"
                ],
                "tensor_list": [
                    "Tuple[int, int]",
                    "List[Tuple[int, int]]",
                    "list",
                    "List[Union[int, float]]",
                    "Iterable[str]"
                ]
            }
        },
        "NestedTensor.__repr__": {
            "name": "__repr__",
            "location": 328,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "setup_for_distributed.print": {
            "name": "print",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "craftassist-master/python/craftassist/voxel_models/detection-transformer/datasets/coco.py": {
        "convert_coco_poly_to_mask": {
            "name": "convert_coco_poly_to_mask",
            "location": 30,
            "return": [
                "torch.Tensor",
                "List[int]",
                "Union[str, int, float]",
                "str",
                "Union[int, float]"
            ],
            "arguments": {
                "segmentations": [
                    "List",
                    "int"
                ],
                "height": [
                    "int",
                    "List[str]",
                    "Union[int,float]",
                    "float"
                ],
                "width": [
                    "int",
                    "List[str]",
                    "Union[int,float]",
                    "float"
                ]
            }
        },
        "make_coco_transforms": {
            "name": "make_coco_transforms",
            "location": 137,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "image_set": [
                    "List[str]",
                    "int"
                ]
            }
        },
        "build": {
            "name": "build",
            "location": 174,
            "return": [
                "bool",
                "CocoDetection"
            ],
            "arguments": {
                "image_set": [
                    "str",
                    "List[TextIO]",
                    "Iterable[TextIO]",
                    "TextIO",
                    "Iterable[T]"
                ],
                "args": []
            }
        },
        "FilterAndRemapCocoCategories.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "categories": [
                    "int",
                    "float",
                    "bool"
                ],
                "remap": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "FilterAndRemapCocoCategories.__call__": {
            "name": "__call__",
            "location": 17,
            "return": [
                "Tuple[int]",
                "Union[RangeSet[T],Iterable[Any]]",
                "List[str]",
                "Sequence[cirq.Qid]"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "int"
                ],
                "target": [
                    "torch.Tensor"
                ]
            }
        },
        "ConvertCocoPolysToMask.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "return_masks": [
                    "bool",
                    "Sequence[Dict[str,str]]",
                    "str",
                    "int"
                ]
            }
        },
        "ConvertCocoPolysToMask.__call__": {
            "name": "__call__",
            "location": 51,
            "return": [
                "Sequence['cirq.Qid']",
                "List[str]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "int",
                    "float"
                ],
                "target": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "CocoDetection.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "img_folder": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "ann_file": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "transforms": [
                    "str",
                    "Sequence[str]",
                    "Optional[str]",
                    "None"
                ],
                "return_masks": [
                    "str",
                    "int",
                    "None",
                    "Optional[bool]",
                    "Optional[str]"
                ]
            }
        },
        "CocoDetection.__getitem__": {
            "name": "__getitem__",
            "location": 118,
            "return": [
                "Tuple",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "bool",
                    "Sequence[str]"
                ]
            }
        },
        "CocoDetection.get_in_coco_format": {
            "name": "get_in_coco_format",
            "location": 127,
            "return": [
                "Tuple",
                "bool",
                "str",
                "Mapping[str,Any]",
                "Tuple[int,int,int]",
                "Dict[str,Any]",
                "List[Dict]",
                "Dict[int,Dict[str,Any]]",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "Sequence[str]",
                    "float",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/detection-transformer/datasets/coco_panoptic.py": {
        "make_coco_panoptic_transforms": {
            "name": "make_coco_panoptic_transforms",
            "location": 77,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "image_set": [
                    "List[str]",
                    "int",
                    "PIL.Image.Image"
                ]
            }
        },
        "build": {
            "name": "build",
            "location": 115,
            "return": [
                "bool",
                "CocoPanoptic"
            ],
            "arguments": {
                "image_set": [
                    "str",
                    "cmk.utils.type_defs.OptionalConfigSerial",
                    "List[TextIO]",
                    "Iterable[TextIO]",
                    "Iterable[T]"
                ],
                "args": []
            }
        },
        "CocoPanoptic.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "img_folder": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "ann_folder": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "ann_file": [
                    "str",
                    "Optional[str]"
                ],
                "transforms": [
                    "bool",
                    "None",
                    "Dict[int,bool]",
                    "str",
                    "int",
                    "Union[utils.CWLObjectType,List[utils.CWLObjectType]]",
                    "List[C]"
                ]
            }
        },
        "CocoPanoptic.__getitem__": {
            "name": "__getitem__",
            "location": 29,
            "return": [
                "Tuple[Union[str,dict,set[str],IO,dict[Text,],int]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "str"
                ]
            }
        },
        "CocoPanoptic.__len__": {
            "name": "__len__",
            "location": 67,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "CocoPanoptic.get_height_and_width": {
            "name": "get_height_and_width",
            "location": 70,
            "return": [
                "Tuple",
                "int",
                "str",
                "List[str]",
                "bool",
                "Tuple[int,int]"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None",
                    "Optional[cmk.utils.type_defs.SectionName]",
                    "cmk.utils.type_defs.CheckPluginName.Str"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/detection-transformer/datasets/house.py": {
        "underdirt": {
            "name": "underdirt",
            "location": 12,
            "return": [
                "Tuple[None]",
                "bool",
                "Optional[Any]",
                "int"
            ],
            "arguments": {
                "schematic": [
                    "int",
                    "numpy.ndarray",
                    "Optional[Union[int, slice]]",
                    "Dict[str, str]"
                ],
                "labels": [
                    "None",
                    "raiden.utils.List[raiden.utils.Keccak256]",
                    "numpy.ndarray",
                    "torch.Tensor",
                    "float",
                    "Dict[str,torch.LongTensor]",
                    "Optional[float]"
                ],
                "max_shift": [
                    "int",
                    "Tuple[int,int]",
                    "List[str]",
                    "bool"
                ],
                "nothing_id": [
                    "int",
                    "Sequence[Tuple[str,int]]",
                    "Set",
                    "decksite.data.models.person.Person",
                    "Dict"
                ]
            }
        },
        "flip_rotate": {
            "name": "flip_rotate",
            "location": 30,
            "return": [
                "Tuple[Optional[int]]",
                "int",
                "List[Tuple[str,str]]"
            ],
            "arguments": {
                "c": [
                    "int",
                    "vimiv.utils.trie.Trie",
                    "IO",
                    "tracim.models.data.Content",
                    "str"
                ],
                "l": [
                    "None",
                    "Optional[numpy.ndarray]",
                    "Optional[bytes]",
                    "Type[T]",
                    "List[allennlp.data.tokenizers.token.Token]",
                    "Sequence[str]",
                    "int"
                ],
                "idx": [
                    "int",
                    "None",
                    "Optional[int]",
                    "str",
                    "Optional[str]",
                    "Tuple[Union[int,int]]",
                    "Optional[Tuple[int,int]]",
                    "Callable[str,int]",
                    "Callable[[str],int]",
                    "raiden.utils.Secret"
                ]
            }
        },
        "pad_to_sidelength": {
            "name": "pad_to_sidelength",
            "location": 65,
            "return": [
                "Tuple[Union[list,dict[str,dict[str,Any]],int,str,dict[str,dict],None,list[int]]]",
                "str",
                "bool",
                "List[Dict]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "schematic": [
                    "List[str]",
                    "int",
                    "Optional[Any]",
                    "List[\"Issue\"]",
                    "numpy.ndarray",
                    "list",
                    "bytes"
                ],
                "labels": [
                    "int",
                    "None",
                    "qutebrowser.utils.usertypes.KeyMode"
                ],
                "nothing_id": [
                    "int",
                    "Optional[Sequence[int]]"
                ],
                "sidelength": [
                    "int",
                    "Union[List[str],List[Any]]",
                    "str"
                ]
            }
        },
        "fit_in_sidelength": {
            "name": "fit_in_sidelength",
            "location": 85,
            "return": [
                "Tuple[Optional[tuple[int]]]",
                "Sequence[str]",
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "schematic": [
                    "str",
                    "int",
                    "Dict[str,torch.LongTensor]",
                    "Optional[int]",
                    "None"
                ],
                "labels": [
                    "int",
                    "str",
                    "None"
                ],
                "nothing_id": [
                    "int",
                    "str"
                ],
                "sl": [
                    "int",
                    "Optional[int]",
                    "Dict[str,torch.LongTensor]",
                    "Optional[float]"
                ],
                "max_shift": [
                    "int",
                    "List[int]",
                    "List[List[int]]",
                    "List"
                ]
            }
        },
        "make_example_from_raw": {
            "name": "make_example_from_raw",
            "location": 106,
            "return": [
                "Tuple[int]",
                "str",
                "float"
            ],
            "arguments": {
                "schematic": [
                    "int",
                    "List[list[allennlp.data.fields.production_rule_field.ProductionRule]]",
                    "Dict[str,torch.LongTensor]",
                    "torch.Tensor",
                    "List[List[allennlp.data.fields.production_rule_field.ProductionRule]]",
                    "raiden.utils.TokenAmount"
                ],
                "labels": [
                    "None",
                    "int",
                    "torch.Tensor",
                    "Dict[str,torch.LongTensor]",
                    "float",
                    "List[list[allennlp.data.fields.production_rule_field.ProductionRule]]",
                    "raiden.utils.BlockNumber",
                    "List[List[allennlp.data.fields.production_rule_field.ProductionRule]]"
                ],
                "augment": [
                    "dict",
                    "Dict[str, Any]",
                    "int",
                    "Dict[str, float]"
                ],
                "nothing_id": [
                    "int",
                    "torch.Tensor",
                    "raiden.utils.BlockNumber",
                    "List[List[allennlp.data.fields.production_rule_field.ProductionRule]]",
                    "Dict[str,torch.LongTensor]",
                    "float"
                ],
                "sl": [
                    "int",
                    "str"
                ]
            }
        },
        "swallow_classes": {
            "name": "swallow_classes",
            "location": 124,
            "return": [
                "Tuple[tuple[Union[Any,Any]]]",
                "Optional[str]",
                "utils.CWLObjectType"
            ],
            "arguments": {
                "classes": [
                    "str",
                    "Dict",
                    "None",
                    "Dict[str,object]",
                    "Optional[str]",
                    "Type",
                    "torch.nn.Module"
                ],
                "predator": [
                    "Dict[str,Any]",
                    "Union[int,float]",
                    "int",
                    "bool",
                    "float"
                ],
                "prey_classes": [
                    "Type",
                    "AbstractSet[\"TemplateObjectVariable\"]",
                    "AbstractSet[\"TemplatePropertyVariable\"]",
                    "AbstractSet[\"TemplateActionTypeVariable\"]"
                ],
                "class_map": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ]
            }
        },
        "organize_classes": {
            "name": "organize_classes",
            "location": 138,
            "return": [
                "Tuple",
                "Optional[str]",
                "utils.CWLObjectType"
            ],
            "arguments": {
                "classes": [
                    "bool",
                    "Dict[str, Any]"
                ],
                "min_occurence": [
                    "Type",
                    "str",
                    "List[str]"
                ]
            }
        },
        "create_shape_dataset": {
            "name": "create_shape_dataset",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "build": {
            "name": "build",
            "location": 531,
            "return": [
                "SemSegHouseData",
                "Iterable[allennlp.data.instance.Instance]",
                "bool"
            ],
            "arguments": {
                "image_set": [
                    "int",
                    "bytes",
                    "List[list[dict]]",
                    "bool",
                    "List[List[dict]]"
                ],
                "args": []
            }
        },
        "SemSegData.__init__": {
            "name": "__init__",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "shape_data_path": [
                    "str",
                    "int",
                    "None",
                    "List[str]"
                ],
                "house_data_path": [
                    "int",
                    "str",
                    "None"
                ],
                "nexamples": [
                    "int",
                    "str",
                    "float",
                    "Dict[str,str]"
                ],
                "shape_pct": [
                    "float",
                    "str",
                    "int"
                ],
                "sidelength": [
                    "str",
                    "int"
                ],
                "min_size": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "max_size": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "classes": [
                    "str",
                    "int",
                    "None",
                    "List[str]"
                ],
                "augment": [
                    "str",
                    "Dict"
                ],
                "house_min_class_occurence": [
                    "int",
                    "str"
                ],
                "shape_min_class_occurence": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "useid": [
                    "str",
                    "bool"
                ],
                "shape_save_path": [
                    "str",
                    "int",
                    "None",
                    "List[str]"
                ]
            }
        },
        "SemSegData.get_classes": {
            "name": "get_classes",
            "location": 289,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SemSegData.set_classes": {
            "name": "set_classes",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "classes": [
                    "Type",
                    "str",
                    "int",
                    "Union[str,List[str]]",
                    "List[str]"
                ]
            }
        },
        "SemSegData.__getitem__": {
            "name": "__getitem__",
            "location": 295,
            "return": [
                "Tuple",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "bool",
                    "Tuple"
                ]
            }
        },
        "SemSegData.__len__": {
            "name": "__len__",
            "location": 302,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SemSegShapeData.__init__": {
            "name": "__init__",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_path": [
                    "str",
                    "None",
                    "Optional[str]",
                    "bool"
                ],
                "nexamples": [
                    "int",
                    "Optional[int]"
                ],
                "sidelength": [
                    "int",
                    "str",
                    "bool",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "min_size": [
                    "int",
                    "List[str]",
                    "Optional[int]",
                    "str"
                ],
                "max_size": [
                    "int",
                    "List[str]",
                    "Optional[int]",
                    "str"
                ],
                "classes": [
                    "Optional[bool]",
                    "None",
                    "Optional[List[str]]",
                    "bool",
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "Optional[Match]",
                    "Optional[Dict[str,str]]",
                    "Match",
                    "Dict[str,str]",
                    "Optional[List[dict]]",
                    "List[dict]"
                ],
                "augment": [
                    "Dict",
                    "int",
                    "str",
                    "bool",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "min_class_occurence": [
                    "int",
                    "str",
                    "bool",
                    "Callable[,int]"
                ],
                "useid": [
                    "bool",
                    "int",
                    "str",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "save_path": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Mapping[Any,str]"
                ]
            }
        },
        "SemSegShapeData.get_classes": {
            "name": "get_classes",
            "location": 389,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SemSegShapeData.set_classes": {
            "name": "set_classes",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "classes": [
                    "Type",
                    "str",
                    "int",
                    "Union[str,List[str]]",
                    "List[str]"
                ]
            }
        },
        "SemSegShapeData.__getitem__": {
            "name": "__getitem__",
            "location": 395,
            "return": [
                "Tuple",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "bool",
                    "Tuple"
                ]
            }
        },
        "SemSegShapeData.__len__": {
            "name": "__len__",
            "location": 402,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SemSegHouseData.__init__": {
            "name": "__init__",
            "location": 407,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_path": [
                    "str",
                    "Optional[str]",
                    "numpy.ndarray"
                ],
                "nexamples": [
                    "int",
                    "Dict",
                    "torch.Tensor",
                    "bool",
                    "Optional[str]",
                    "str"
                ],
                "sidelength": [
                    "int",
                    "bool",
                    "Optional[List[Any]]",
                    "Optional[Dict[str,Any]]",
                    "Optional[int]",
                    "str"
                ],
                "classes": [
                    "float",
                    "None",
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "str",
                    "cmk.utils.type_defs.HostName",
                    "List[Any]",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ],
                "augment": [
                    "Dict",
                    "bool",
                    "Optional[List[Any]]",
                    "Optional[Dict[str,Any]]",
                    "Optional[int]",
                    "str"
                ],
                "min_class_occurence": [
                    "int",
                    "bool",
                    "bytes",
                    "Type",
                    "List[Tuple[str,str]]",
                    "str"
                ],
                "useid": [
                    "bool",
                    "Optional[List[Any]]",
                    "Optional[Dict[str,Any]]",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "SemSegHouseData.get_classes": {
            "name": "get_classes",
            "location": 485,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SemSegHouseData.set_classes": {
            "name": "set_classes",
            "location": 488,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "classes": [
                    "Type",
                    "str",
                    "int",
                    "Union[str,List[str]]",
                    "List[str]"
                ]
            }
        },
        "SemSegHouseData.__getitem__": {
            "name": "__getitem__",
            "location": 491,
            "return": [
                "Tuple[dict[Text,]]",
                "bool",
                "str",
                "List[Dict[str,Any]]",
                "int",
                "Namespace",
                "Iterable[int]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "bool",
                    "List[list[int]]",
                    "torch.Tensor",
                    "List[List[int]]"
                ]
            }
        },
        "SemSegHouseData.__len__": {
            "name": "__len__",
            "location": 527,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/detection-transformer/datasets/lvis.py": {
        "_isArrayLike": {
            "name": "_isArrayLike",
            "location": 15,
            "return": [
                "IO",
                "bool"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "int"
                ]
            }
        },
        "make_lvis_transforms": {
            "name": "make_lvis_transforms",
            "location": 269,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "image_set": [
                    "List[str]",
                    "int",
                    "PIL.Image.Image"
                ]
            }
        },
        "build": {
            "name": "build",
            "location": 306,
            "return": [
                "bool",
                "LvisDetection"
            ],
            "arguments": {
                "image_set": [
                    "str",
                    "List[TextIO]",
                    "Iterable[TextIO]",
                    "TextIO",
                    "Iterable[T]"
                ],
                "args": []
            }
        },
        "LVIS.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "annotation_path": [
                    "Optional[str]",
                    "None",
                    "str"
                ]
            }
        },
        "LVIS._load_json": {
            "name": "_load_json",
            "location": 44,
            "return": [
                "str",
                "Callable",
                "Callable[[KT, VT], bool]",
                "dict",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "LVIS._create_index": {
            "name": "_create_index",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LVIS.get_ann_ids": {
            "name": "get_ann_ids",
            "location": 73,
            "return": [
                "bool",
                "List"
            ],
            "arguments": {
                "self": [],
                "img_ids": [
                    "int",
                    "None",
                    "List[Optional[int]]",
                    "str",
                    "bool"
                ],
                "cat_ids": [
                    "None",
                    "str",
                    "Optional[str]",
                    "int",
                    "List[Optional[int]]",
                    "Optional[int]",
                    "Optional[Union[str,int]]"
                ],
                "area_rng": [
                    "int",
                    "None",
                    "str",
                    "Optional[int]",
                    "List[int]"
                ]
            }
        },
        "LVIS.get_cat_ids": {
            "name": "get_cat_ids",
            "location": 111,
            "return": [
                "List",
                "List[str]",
                "bool",
                "List[Tuple[str,str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LVIS.get_img_ids": {
            "name": "get_img_ids",
            "location": 118,
            "return": [
                "List",
                "List[str]",
                "bool",
                "List[Tuple[str,str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LVIS._load_helper": {
            "name": "_load_helper",
            "location": 125,
            "return": [
                "List",
                "bool",
                "str",
                "int",
                "List[Dict]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "_dict": [
                    "str",
                    "Optional[int]",
                    "int",
                    "Callable[[str], int]"
                ],
                "ids": [
                    "str",
                    "Callable[[str],int]",
                    "int",
                    "Callable[str,int]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "LVIS.load_anns": {
            "name": "load_anns",
            "location": 133,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "None",
                    "Optional[int]",
                    "int",
                    "Iterable[int]",
                    "str",
                    "List[int]"
                ]
            }
        },
        "LVIS.load_cats": {
            "name": "load_cats",
            "location": 142,
            "return": [
                "int",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "int",
                    "Optional[int]",
                    "Iterable[int]",
                    "None",
                    "str",
                    "List[int]"
                ]
            }
        },
        "LVIS.load_imgs": {
            "name": "load_imgs",
            "location": 152,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "int",
                    "Optional[int]",
                    "Iterable[int]",
                    "None",
                    "str",
                    "List[int]"
                ]
            }
        },
        "LVIS.download": {
            "name": "download",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "save_dir": [
                    "str"
                ],
                "img_ids": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "LVIS.ann_to_rle": {
            "name": "ann_to_rle",
            "location": 179,
            "return": [
                "str",
                "bytes",
                "int",
                "IO",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "ann": [
                    "str",
                    "Callable"
                ]
            }
        },
        "LVIS.ann_to_mask": {
            "name": "ann_to_mask",
            "location": 202,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "ann": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ]
            }
        },
        "LvisDetectionBase.__init__": {
            "name": "__init__",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "str",
                    "TextIO",
                    "Sequence[str]",
                    "Optional[str]",
                    "None"
                ],
                "annFile": [
                    "str",
                    "int",
                    "bool",
                    "Dict[str,str]",
                    "Optional[Dict[str,str]]",
                    "None"
                ],
                "transform": [
                    "str",
                    "None",
                    "TextIO",
                    "Sequence[str]",
                    "Optional[str]"
                ],
                "target_transform": [
                    "str",
                    "None",
                    "TextIO",
                    "Sequence[str]",
                    "Optional[str]"
                ],
                "transforms": [
                    "str",
                    "None",
                    "TextIO",
                    "Sequence[str]",
                    "Optional[str]"
                ]
            }
        },
        "LvisDetectionBase.__getitem__": {
            "name": "__getitem__",
            "location": 220,
            "return": [
                "Tuple[Union[str,int]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "str",
                    "Type[Frame]",
                    "Type",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "LvisDetectionBase.__len__": {
            "name": "__len__",
            "location": 240,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LvisDetection.__init__": {
            "name": "__init__",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "img_folder": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "ann_file": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "transforms": [
                    "str",
                    "Sequence[str]",
                    "Optional[str]",
                    "None"
                ],
                "return_masks": [
                    "str",
                    "int",
                    "None",
                    "Optional[bool]",
                    "Optional[str]"
                ]
            }
        },
        "LvisDetection.__getitem__": {
            "name": "__getitem__",
            "location": 250,
            "return": [
                "Tuple",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "bool",
                    "Sequence[str]"
                ]
            }
        },
        "LvisDetection.get_in_coco_format": {
            "name": "get_in_coco_format",
            "location": 259,
            "return": [
                "Tuple",
                "bool",
                "str",
                "Mapping[str,Any]",
                "Tuple[int,int,int]",
                "Dict[str,Any]",
                "List[Dict]",
                "Dict[int,Dict[str,Any]]",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "Sequence[str]",
                    "float",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/detection-transformer/datasets/voc.py": {
        "make_voc_transforms": {
            "name": "make_voc_transforms",
            "location": 31,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "image_set": [
                    "List[str]",
                    "int"
                ],
                "remove_difficult": [
                    "List",
                    "List[int]",
                    "Dict",
                    "float"
                ]
            }
        },
        "build": {
            "name": "build",
            "location": 67,
            "return": [
                "VOCDetection",
                "str",
                "Callable",
                "int",
                "List[str]",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "image_set": [
                    "Set[str]",
                    "Dict"
                ],
                "args": []
            }
        },
        "VOCDetection.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_set": [
                    "Text",
                    "List[Union[str,SqlFile]]",
                    "Optional[str]",
                    "bool",
                    "str",
                    "Optional[List]"
                ],
                "transforms": [
                    "str",
                    "None",
                    "List[str]",
                    "Type",
                    "bool",
                    "Tuple"
                ]
            }
        },
        "VOCDetection.__getitem__": {
            "name": "__getitem__",
            "location": 16,
            "return": [
                "Tuple[Union[str,dict,int,dict[int,float],dict[str,str],bytes,list[int]]]",
                "str",
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "VOCDetection.get_in_coco_format": {
            "name": "get_in_coco_format",
            "location": 23,
            "return": [
                "Tuple[Union[str,dict,int,dict[int,float],dict[str,str],bytes,list[int]]]",
                "int",
                "Sequence[int]",
                "float"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "str",
                    "Dict",
                    "Type",
                    "Exception"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/detection-transformer/datasets/voc2007_2012.py": {
        "build": {
            "name": "build",
            "location": 31,
            "return": [
                "VOCDetection",
                "str",
                "ConcatDataset",
                "Dict[str,Any]",
                "Dict"
            ],
            "arguments": {
                "image_set": [
                    "Set[str]",
                    "List[str]",
                    "bytes"
                ],
                "args": []
            }
        },
        "ConcatDataset.get_idxs": {
            "name": "get_idxs",
            "location": 12,
            "return": [
                "str",
                "Tuple[Union[int,dict,list,list[list[int]],Callable]]"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "int",
                    "cmk.utils.type_defs.HostName",
                    "Dict",
                    "Callable",
                    "Union[Dict,List]",
                    "List",
                    "List[List[int]]",
                    "List[list[int]]"
                ]
            }
        },
        "ConcatDataset.get_in_coco_format": {
            "name": "get_in_coco_format",
            "location": 20,
            "return": [
                "str",
                "bytes",
                "bool",
                "cmk.utils.type_defs.HostName",
                "cmk.utils.type_defs.Item",
                "cmk.utils.type_defs.CheckPluginNameStr"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "Dict[str,Any]",
                    "List[int]",
                    "bool"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/detection-transformer/datasets/voc2012.py": {
        "build": {
            "name": "build",
            "location": 21,
            "return": [
                "VOCDetection2012",
                "str",
                "Callable",
                "int",
                "List[str]",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "image_set": [
                    "Set[str]",
                    "Dict"
                ],
                "args": []
            }
        },
        "VOCDetection2012.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_set": [
                    "str",
                    "Text"
                ],
                "transforms": [
                    "str",
                    "None",
                    "List[str]",
                    "Type",
                    "bool",
                    "Tuple"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/detection-transformer/datasets/__init__.py": {
        "build_dataset": {
            "name": "build_dataset",
            "location": 4,
            "return": [
                "str",
                "List[str]",
                "Optional[str]",
                "Callable",
                "bool"
            ],
            "arguments": {
                "image_set": [
                    "str",
                    "Dict[str,Any]",
                    "bytes"
                ],
                "args": []
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/detection-transformer/models/backbone.py": {
        "build_backbone": {
            "name": "build_backbone",
            "location": 169,
            "return": [
                "Joiner",
                "Pattern",
                "int",
                "str"
            ],
            "arguments": {
                "args": []
            }
        },
        "FrozenBatchNorm2d.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "FrozenBatchNorm2d._load_from_state_dict": {
            "name": "_load_from_state_dict",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state_dict": [
                    "Dict",
                    "DataFrame",
                    "OrderedDict"
                ],
                "prefix": [
                    "str",
                    "List[str]",
                    "List[tuple[Union[str,str]]]",
                    "List[Tuple[str,str]]",
                    "List[tuple[Union[int,int]]]",
                    "List[Tuple[int,int]]",
                    "Optional[str]"
                ],
                "local_metadata": [
                    "str",
                    "int"
                ],
                "strict": [
                    "str",
                    "int"
                ],
                "missing_keys": [
                    "str",
                    "int"
                ],
                "unexpected_keys": [
                    "str",
                    "int"
                ],
                "error_msgs": [
                    "str",
                    "int"
                ]
            }
        },
        "FrozenBatchNorm2d.forward": {
            "name": "forward",
            "location": 39,
            "return": [
                "str",
                "float",
                "utils.Node",
                "int"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "BackboneBase.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "backbone": [
                    "str"
                ],
                "train_backbone": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "num_channels": [
                    "int",
                    "float",
                    "Dict[int,int]"
                ],
                "return_interm_layers": [
                    "int",
                    "List",
                    "str",
                    "Tuple[str]",
                    "bool",
                    "torch.Tensor"
                ]
            }
        },
        "BackboneBase.forward": {
            "name": "forward",
            "location": 78,
            "return": [
                "OrderedDict",
                "str",
                "Optional[Union[str,Any]]",
                "Set[str]",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "tensor_list": [
                    "int"
                ]
            }
        },
        "Backbone.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict",
                    "None",
                    "bool",
                    "Optional[str]",
                    "django.utils.safestring.SafeString",
                    "Optional[Dict]"
                ],
                "train_backbone": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None",
                    "bool",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "List[str]",
                    "Optional[List[str]]"
                ],
                "return_interm_layers": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None",
                    "bool",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "List[str]",
                    "Optional[List[str]]"
                ],
                "dilation": [
                    "str",
                    "None",
                    "Dict",
                    "Optional[str]",
                    "django.utils.safestring.SafeString",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.Item",
                    "cmk.utils.type_defs.CheckPluginName.Str"
                ]
            }
        },
        "GroupNorm32.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_channels": [
                    "int",
                    "str",
                    "float"
                ],
                "num_groups": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "GroupNormBackbone.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[Dict[str, str]]",
                    "Dict[str, Any]",
                    "T"
                ],
                "train_backbone": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None",
                    "bool",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "List[str]",
                    "Optional[List[str]]"
                ],
                "return_interm_layers": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None",
                    "bool",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "List[str]",
                    "Optional[List[str]]"
                ],
                "dilation": [
                    "Dict[str,str]",
                    "Optional[Dict[str,str]]",
                    "None",
                    "Dict[str,Any]",
                    "T"
                ]
            }
        },
        "SemSegBackBone.__init__": {
            "name": "__init__",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SemSegBackBone.forward": {
            "name": "forward",
            "location": 139,
            "return": [
                "OrderedDict",
                "str",
                "Optional[Union[str,Any]]",
                "Set[str]",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "tensor_list": [
                    "List",
                    "int",
                    "str"
                ]
            }
        },
        "Joiner.__init__": {
            "name": "__init__",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "backbone": [
                    "bool",
                    "Dict[str,Any]",
                    "Callable[[Any,Any],bool]",
                    "Callable[Any,Any,bool]"
                ],
                "position_embedding": [
                    "bool",
                    "Dict[str,Any]",
                    "Callable[[Any,Any],bool]",
                    "Callable[Any,Any,bool]"
                ]
            }
        },
        "Joiner.forward": {
            "name": "forward",
            "location": 156,
            "return": [
                "Tuple[list]",
                "str",
                "Optional[Union[str,Any]]",
                "Set[str]",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "tensor_list": [
                    "int",
                    "List[Dict[str,torch.Tensor]]",
                    "float",
                    "List[dict[str,torch.Tensor]]",
                    "List[List[T]]",
                    "List[list[T]]"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/detection-transformer/models/common.py": {
        "MLP.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dim": [
                    "bool",
                    "str",
                    "float",
                    "bytearray",
                    "int"
                ],
                "hidden_dim": [
                    "int",
                    "str",
                    "List[str]",
                    "bytes"
                ],
                "output_dim": [
                    "Union[Dict[str,Any],List[Any]]",
                    "int",
                    "Dict[str,Any]",
                    "List[dict]",
                    "Optional[str]",
                    "List[Any]",
                    "str",
                    "None"
                ],
                "nb_layers": [
                    "int",
                    "bool",
                    "float",
                    "bytearray",
                    "str"
                ]
            }
        },
        "MLP.forward": {
            "name": "forward",
            "location": 32,
            "return": [
                "str",
                "int",
                "float",
                "List[list[int]]",
                "List[list[str]]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "torch.Tensor"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/detection-transformer/models/detr.py": {
        "_get_clones": {
            "name": "_get_clones",
            "location": 367,
            "return": [
                "bool"
            ],
            "arguments": {
                "module": [
                    "int",
                    "List[int]"
                ],
                "N": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "build_transformer": {
            "name": "build_transformer",
            "location": 371,
            "return": [
                "Transformer",
                "Dict",
                "str",
                "int",
                "List[dict]",
                "bool"
            ],
            "arguments": {
                "args": []
            }
        },
        "_get_activation_fn": {
            "name": "_get_activation_fn",
            "location": 385,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "activation": [
                    "int",
                    "str",
                    "Union[int,str]",
                    "bytes"
                ]
            }
        },
        "Transformer.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d_model": [
                    "int"
                ],
                "nhead": [
                    "int",
                    "str",
                    "float",
                    "Union[int,str]"
                ],
                "num_encoder_layers": [
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "num_decoder_layers": [
                    "int",
                    "bool",
                    "float",
                    "Optional[bool]",
                    "Optional[float]"
                ],
                "dim_feedforward": [
                    "int",
                    "str",
                    "float",
                    "Union[int,str]"
                ],
                "dropout": [
                    "float",
                    "int",
                    "str",
                    "Union[int,str]"
                ],
                "activation": [
                    "Text",
                    "int",
                    "str",
                    "float",
                    "Union[int,str]"
                ],
                "normalize_before": [
                    "int",
                    "bool"
                ],
                "return_intermediate_dec": [
                    "bool",
                    "float",
                    "Optional[bool]",
                    "Optional[float]"
                ],
                "pass_pos_and_query": [
                    "bool",
                    "int",
                    "Dict",
                    "Tuple[int,int]",
                    "Optional[Set[str]]"
                ]
            }
        },
        "Transformer._reset_parameters": {
            "name": "_reset_parameters",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transformer.forward": {
            "name": "forward",
            "location": 53,
            "return": [
                "Tuple",
                "Callable",
                "torch.Tensor",
                "Optional[torch.Tensor]",
                "float"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "Optional[int]",
                    "int",
                    "Optional[List[str]]",
                    "None",
                    "List[str]"
                ],
                "mask": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "query_embed": [
                    "int",
                    "Optional[int]",
                    "None",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "pos_embed": [
                    "List[List[int]]",
                    "List[list[int]]"
                ]
            }
        },
        "TransformerEncoder.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "encoder_layer": [
                    "int",
                    "None",
                    "Optional[int]",
                    "str",
                    "Optional[str]",
                    "Optional[torch.optim.lr_scheduler._LRScheduler]"
                ],
                "num_layers": [
                    "int",
                    "float"
                ],
                "norm": [
                    "int",
                    "None",
                    "Dict[str,Any]",
                    "float",
                    "bytes",
                    "pynn.nn.NeuralNetwork"
                ]
            }
        },
        "TransformerEncoder.forward": {
            "name": "forward",
            "location": 116,
            "return": [
                "str",
                "int",
                "TextIO",
                "Optional[str]",
                "Tuple"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "int",
                    "str",
                    "Iterable[Iterable[T]]"
                ],
                "mask": [
                    "int",
                    "None",
                    "str",
                    "List[str]",
                    "Sequence[Any]"
                ],
                "src_key_padding_mask": [
                    "int",
                    "None",
                    "str",
                    "List[str]",
                    "Sequence[Any]"
                ],
                "pos": [
                    "int",
                    "None",
                    "str",
                    "List[str]",
                    "Sequence[Any]"
                ]
            }
        },
        "TransformerDecoder.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "decoder_layer": [
                    "int",
                    "bool",
                    "str",
                    "Union[str,int,float]",
                    "float",
                    "Optional[int]",
                    "None"
                ],
                "num_layers": [
                    "int",
                    "float",
                    "List[str]",
                    "Optional[int]",
                    "None"
                ],
                "norm": [
                    "int",
                    "None",
                    "float",
                    "str",
                    "List[int]",
                    "bool"
                ],
                "return_intermediate": [
                    "bool",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "TransformerDecoder.forward": {
            "name": "forward",
            "location": 138,
            "return": [
                "int",
                "torch.Tensor",
                "str",
                "List[int]",
                "float",
                "List",
                "Dict",
                "bytes",
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "tgt": [
                    "bytes",
                    "bool",
                    "float",
                    "List[int]",
                    "int",
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[dict]",
                    "Dict"
                ],
                "memory": [
                    "bool",
                    "bytes"
                ],
                "tgt_mask": [
                    "bool",
                    "bytes",
                    "None"
                ],
                "memory_mask": [
                    "bool",
                    "bytes",
                    "None"
                ],
                "tgt_key_padding_mask": [
                    "bool",
                    "bytes",
                    "None"
                ],
                "memory_key_padding_mask": [
                    "bool",
                    "bytes",
                    "None"
                ],
                "pos": [
                    "bool",
                    "bytes",
                    "None"
                ],
                "query_pos": [
                    "bool",
                    "bytes",
                    "None"
                ]
            }
        },
        "TransformerEncoderLayer.__init__": {
            "name": "__init__",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d_model": [
                    "Set[int]",
                    "int",
                    "bool"
                ],
                "nhead": [
                    "int",
                    "float"
                ],
                "dim_feedforward": [
                    "int",
                    "Type[T]",
                    "str"
                ],
                "dropout": [
                    "float",
                    "int"
                ],
                "activation": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "normalize_before": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "TransformerEncoderLayer.with_pos_embed": {
            "name": "with_pos_embed",
            "location": 206,
            "return": [
                "int",
                "float",
                "Optional[bool]",
                "Iterable[Optional[Any]]",
                "torch.LongTensor",
                "torch.BoolTensor",
                "str"
            ],
            "arguments": {
                "tensor": [
                    "int",
                    "float",
                    "Iterable[Optional[Any]]",
                    "Optional[int]"
                ],
                "pos": [
                    "int",
                    "float",
                    "Iterable[Optional[Any]]",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "TransformerEncoderLayer.forward_post": {
            "name": "forward_post",
            "location": 209,
            "return": [
                "str",
                "Dict",
                "Dict[str,set]"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "str",
                    "List[str]",
                    "torch.device"
                ],
                "src_mask": [
                    "str",
                    "int",
                    "None"
                ],
                "src_key_padding_mask": [
                    "str",
                    "int",
                    "None"
                ],
                "pos": [
                    "str",
                    "None",
                    "int",
                    "bool"
                ]
            }
        },
        "TransformerEncoderLayer.forward_pre": {
            "name": "forward_pre",
            "location": 221,
            "return": [
                "bytes",
                "List",
                "str",
                "Optional"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "bool",
                    "List[str]",
                    "int"
                ],
                "src_mask": [
                    "str",
                    "bool",
                    "int",
                    "torch.Tensor"
                ],
                "src_key_padding_mask": [
                    "str",
                    "None",
                    "bool",
                    "int",
                    "torch.Tensor"
                ],
                "pos": [
                    "int",
                    "None",
                    "str",
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "TransformerEncoderLayer.forward": {
            "name": "forward",
            "location": 233,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "str"
                ],
                "src_mask": [
                    "str"
                ],
                "src_key_padding_mask": [
                    "str",
                    "None"
                ],
                "pos": [
                    "str",
                    "None"
                ]
            }
        },
        "TransformerDecoderLayer.__init__": {
            "name": "__init__",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d_model": [
                    "Set[int]",
                    "int"
                ],
                "nhead": [
                    "Set[int]",
                    "int"
                ],
                "dim_feedforward": [
                    "int",
                    "Type[T]",
                    "str"
                ],
                "dropout": [
                    "float",
                    "Set[int]",
                    "int"
                ],
                "activation": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "normalize_before": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "TransformerDecoderLayer.with_pos_embed": {
            "name": "with_pos_embed",
            "location": 268,
            "return": [
                "int",
                "float",
                "Optional[bool]",
                "Iterable[Optional[Any]]",
                "torch.LongTensor",
                "torch.BoolTensor",
                "str"
            ],
            "arguments": {
                "tensor": [
                    "int",
                    "float",
                    "Iterable[Optional[Any]]",
                    "Optional[int]"
                ],
                "pos": [
                    "int",
                    "float",
                    "Iterable[Optional[Any]]",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "TransformerDecoderLayer.forward_post": {
            "name": "forward_post",
            "location": 271,
            "return": [
                "str",
                "Optional[Type]",
                "Dict[str,list[str]]",
                "Dict",
                "List[str]",
                "float"
            ],
            "arguments": {
                "self": [],
                "tgt": [
                    "bool",
                    "float",
                    "Union[Callable,str]",
                    "Callable",
                    "str"
                ],
                "memory": [
                    "str",
                    "Dict",
                    "bytes",
                    "Optional[str]",
                    "None"
                ],
                "tgt_mask": [
                    "str",
                    "None",
                    "int",
                    "Dict[Tuple[int,int],int]",
                    "Dict[tuple[Union[int,int]],int]"
                ],
                "memory_mask": [
                    "str",
                    "None",
                    "Dict",
                    "bytes",
                    "Optional[str]"
                ],
                "tgt_key_padding_mask": [
                    "str",
                    "None",
                    "int",
                    "Dict[Tuple[int,int],int]",
                    "Dict[tuple[Union[int,int]],int]"
                ],
                "memory_key_padding_mask": [
                    "str",
                    "None",
                    "Dict",
                    "bytes",
                    "Optional[str]"
                ],
                "pos": [
                    "str",
                    "None",
                    "Dict",
                    "bytes",
                    "Optional[str]"
                ],
                "query_pos": [
                    "str",
                    "None",
                    "List[str]",
                    "bool",
                    "Dict[Tuple[int,int],int]",
                    "Dict[tuple[Union[int,int]],int]"
                ]
            }
        },
        "TransformerDecoderLayer.forward_pre": {
            "name": "forward_pre",
            "location": 302,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "tgt": [
                    "bytes",
                    "bool",
                    "float",
                    "List[int]",
                    "int",
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[dict]",
                    "Dict"
                ],
                "memory": [
                    "str",
                    "Dict[Any,list]",
                    "Union[float,None,int]",
                    "float",
                    "bool",
                    "None",
                    "Optional[float]",
                    "int"
                ],
                "tgt_mask": [
                    "str",
                    "None",
                    "int",
                    "Dict[Tuple[int,int],int]",
                    "Dict[tuple[Union[int,int]],int]",
                    "bool",
                    "Optional[int]"
                ],
                "memory_mask": [
                    "str",
                    "None",
                    "Dict[Any,list]",
                    "Union[float,None,int]",
                    "bool",
                    "float",
                    "Optional[float]",
                    "int"
                ],
                "tgt_key_padding_mask": [
                    "str",
                    "None",
                    "int",
                    "Dict[Tuple[int,int],int]",
                    "Dict[tuple[Union[int,int]],int]",
                    "bool",
                    "Optional[int]"
                ],
                "memory_key_padding_mask": [
                    "str",
                    "None",
                    "Dict[Any,list]",
                    "Union[float,None,int]",
                    "bool",
                    "float",
                    "Optional[float]",
                    "int"
                ],
                "pos": [
                    "str",
                    "None",
                    "Dict[Any,list]",
                    "Union[float,None,int]",
                    "bool",
                    "float",
                    "Optional[float]",
                    "int"
                ],
                "query_pos": [
                    "int",
                    "List",
                    "None",
                    "Dict[str,str]"
                ]
            }
        },
        "TransformerDecoderLayer.forward": {
            "name": "forward",
            "location": 333,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "tgt": [
                    "bytes",
                    "int",
                    "str",
                    "Sequence[str]",
                    "Optional[int]",
                    "None"
                ],
                "memory": [
                    "bytes",
                    "int",
                    "str",
                    "Sequence[str]",
                    "Optional[int]",
                    "None"
                ],
                "tgt_mask": [
                    "bytes",
                    "None",
                    "int",
                    "str",
                    "Sequence[str]",
                    "Optional[int]"
                ],
                "memory_mask": [
                    "bytes",
                    "None",
                    "int",
                    "str",
                    "Sequence[str]",
                    "Optional[int]"
                ],
                "tgt_key_padding_mask": [
                    "bytes",
                    "None",
                    "int",
                    "str",
                    "Sequence[str]",
                    "Optional[int]"
                ],
                "memory_key_padding_mask": [
                    "bytes",
                    "None",
                    "int",
                    "str",
                    "Sequence[str]",
                    "Optional[int]"
                ],
                "pos": [
                    "bytes",
                    "None",
                    "int",
                    "str",
                    "Sequence[str]",
                    "Optional[int]"
                ],
                "query_pos": [
                    "bytes",
                    "None",
                    "int",
                    "str",
                    "Sequence[str]",
                    "Optional[int]"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/detection-transformer/models/loss_utils.py": {
        "dice_loss": {
            "name": "dice_loss",
            "location": 7,
            "return": [
                "int",
                "float",
                "str",
                "T"
            ],
            "arguments": {
                "inputs": [
                    "int",
                    "float",
                    "bool"
                ],
                "targets": [
                    "int",
                    "float",
                    "Optional[bool]",
                    "None"
                ],
                "num_boxes": [
                    "int"
                ]
            }
        },
        "sigmoid_focal_loss": {
            "name": "sigmoid_focal_loss",
            "location": 25,
            "return": [
                "BaseException",
                "float"
            ],
            "arguments": {
                "inputs": [
                    "int",
                    "List[List[T]]",
                    "List[float]",
                    "float"
                ],
                "targets": [
                    "int",
                    "float",
                    "bytes",
                    "Dict[str,Dict[str,str]]",
                    "List[int]",
                    "Dict",
                    "str"
                ],
                "num_boxes": [
                    "int",
                    "float"
                ],
                "alpha": [
                    "float",
                    "str",
                    "int"
                ],
                "gamma": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Optional[Set[str]]",
                    "float"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/detection-transformer/models/mask_heads.py": {
        "DETRmask.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "detr": [],
                "mask_head": [
                    "Text",
                    "str",
                    "int",
                    "Union[int,str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "DETRmask.forward": {
            "name": "forward",
            "location": 30,
            "return": [
                "Dict[Text,Union[str,list[dict[Text,]]]]",
                "str",
                "Optional[Union[str,Any]]",
                "Set[str]",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "samples": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "MaskHeadSmallConv.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dim": [
                    "int",
                    "float",
                    "bool"
                ],
                "fpn_dims": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "Union[str,int]",
                    "bool"
                ],
                "context_dim": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "MaskHeadSmallConv.forward": {
            "name": "forward",
            "location": 95,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "torch.Tensor"
                ],
                "bbox_mask": [
                    "float"
                ],
                "fpns": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "str",
                    "bytes",
                    "List",
                    "T"
                ]
            }
        },
        "MaskHeadV2.__init__": {
            "name": "__init__",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dim": [
                    "int",
                    "float",
                    "bool"
                ],
                "fpn_dims": [
                    "float",
                    "int",
                    "List[str]"
                ],
                "context_dim": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "MaskHeadV2.forward": {
            "name": "forward",
            "location": 158,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "torch.Tensor"
                ],
                "bbox_mask": [
                    "int",
                    "float",
                    "Union[int, float, str]",
                    "Union[str, float]",
                    "List[float]"
                ],
                "fpns": [
                    "int",
                    "bool"
                ]
            }
        },
        "MHAttentionMap.__init__": {
            "name": "__init__",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query_dim": [
                    "bool",
                    "float",
                    "int"
                ],
                "hidden_dim": [
                    "bool",
                    "float",
                    "int"
                ],
                "num_heads": [
                    "int",
                    "float"
                ],
                "dropout": [
                    "int",
                    "bool",
                    "float"
                ],
                "bias": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "MHAttentionMap.forward": {
            "name": "forward",
            "location": 194,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "q": [
                    "int",
                    "str",
                    "torch.Tensor",
                    "T"
                ],
                "k": [
                    "int",
                    "float",
                    "List",
                    "Union[int,float]",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "mask": [
                    "allennlp.nn.InitializerApplicator",
                    "None",
                    "Optional[str]",
                    "bool",
                    "str",
                    "Optional[float]",
                    "float",
                    "Optional[Callable[...,Any]]",
                    "Callable[...,Any]"
                ]
            }
        },
        "MaskHeadSmallConv.forward.expand": {
            "name": "expand",
            "location": 96,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tensor": [
                    "int",
                    "float",
                    "List[list]",
                    "str"
                ],
                "length": [
                    "int",
                    "float",
                    "List[list]",
                    "str"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/detection-transformer/models/matcher.py": {
        "prepare_outputs": {
            "name": "prepare_outputs",
            "location": 10,
            "return": [
                "List",
                "int",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "outputs": [
                    "Dict",
                    "List[float]",
                    "Tuple[Union[int,slice],Union[int,slice]]",
                    "torch.nn.utils.rnn.PackedSequence",
                    "memoryview"
                ]
            }
        },
        "build_matcher": {
            "name": "build_matcher",
            "location": 86,
            "return": [
                "bool",
                "LexicographicalMatcher",
                "HungarianMatcher",
                "SequentialMatcher"
            ],
            "arguments": {
                "args": []
            }
        },
        "HungarianMatcher.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cost_class": [
                    "bool",
                    "Optional[Literal[only_clustered,include_clustered]]",
                    "None"
                ],
                "cost_bbox": [
                    "int",
                    "Dict[str,Dict]",
                    "Dict[str,dict]"
                ],
                "cost_giou": [
                    "int",
                    "Dict[str,Dict]",
                    "Dict[str,dict]"
                ]
            }
        },
        "HungarianMatcher.forward": {
            "name": "forward",
            "location": 27,
            "return": [
                "List[tuple[Union[str,int,list[int],Counter,Final,dict[str,Any],bytes]]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "outputs": [
                    "Iterator[bytes]",
                    "Callable"
                ],
                "targets": [
                    "str"
                ]
            }
        },
        "HungarianMatcher._get_cost_matrix": {
            "name": "_get_cost_matrix",
            "location": 39,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "out": [
                    "str",
                    "List[int]",
                    "List",
                    "Optional[str]"
                ],
                "tgt": [
                    "str",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "SequentialMatcher.forward": {
            "name": "forward",
            "location": 54,
            "return": [
                "List[tuple]",
                "Optional[int]",
                "int",
                "float",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "outputs": [
                    "bytes",
                    "Iterable[str]",
                    "torch.Tensor",
                    "List[str]"
                ],
                "targets": [
                    "str",
                    "List[Issue]",
                    "List[OrderedDict]",
                    "List",
                    "bool",
                    "int"
                ]
            }
        },
        "LexicographicalMatcher.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lexic": [
                    "Text",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "LexicographicalMatcher.forward": {
            "name": "forward",
            "location": 63,
            "return": [
                "List[tuple]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "outputs": [
                    "bytes",
                    "Iterable[str]",
                    "torch.Tensor",
                    "List[str]"
                ],
                "targets": [
                    "bytes",
                    "Iterable[str]",
                    "torch.Tensor",
                    "List[str]"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/detection-transformer/models/model_parallel.py": {
        "build": {
            "name": "build",
            "location": 282,
            "return": [
                "Tuple[Union[DETR,DETRmask,SetCriterion]]",
                "Pattern",
                "cirq.ops.Operation",
                "int",
                "str"
            ],
            "arguments": {
                "args": []
            }
        },
        "DETR.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "backbone": [
                    "int",
                    "float"
                ],
                "transformer": [
                    "bool",
                    "str",
                    "int",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.Locksroot"
                ],
                "num_classes": [
                    "int",
                    "float",
                    "str"
                ],
                "num_queries": [
                    "int"
                ],
                "aux_loss": [
                    "bool",
                    "int",
                    "raiden.utils.TokenAmount",
                    "str",
                    "raiden.utils.Locksroot"
                ]
            }
        },
        "DETR.forward": {
            "name": "forward",
            "location": 33,
            "return": [
                "Dict[Text,Union[str,list[dict[Text,]]]]",
                "str",
                "Optional[Union[str,Any]]",
                "Set[str]",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "samples": [
                    "str",
                    "int"
                ]
            }
        },
        "SetCriterion.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_classes": [
                    "float",
                    "int",
                    "str"
                ],
                "matcher": [
                    "int",
                    "float",
                    "Union[float,int]"
                ],
                "weight_dict": [
                    "Dict[str,Any]",
                    "float",
                    "T"
                ],
                "eos_coef": [
                    "int",
                    "float",
                    "Union[float,int]"
                ],
                "losses": [
                    "int",
                    "float",
                    "Union[float,int]"
                ]
            }
        },
        "SetCriterion.match": {
            "name": "match",
            "location": 67,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "outputs": [
                    "bool",
                    "bytes",
                    "Iterator[T]",
                    "Iterator"
                ],
                "targets": [
                    "bool",
                    "bytes",
                    "Iterator[T]",
                    "Iterator"
                ]
            }
        },
        "SetCriterion.loss_labels": {
            "name": "loss_labels",
            "location": 71,
            "return": [
                "Dict[Text,int]",
                "int",
                "Sequence[Tuple[float,float]]",
                "Dict[str,str]",
                "bytes",
                "Callable[[str],bool]"
            ],
            "arguments": {
                "self": [],
                "outputs": [
                    "str",
                    "bool"
                ],
                "targets": [
                    "bool",
                    "Iterable[Iterable]",
                    "str",
                    "int",
                    "None",
                    "Optional[str]"
                ],
                "indices": [
                    "str",
                    "bool",
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]",
                    "int"
                ],
                "num_boxes": [
                    "bool",
                    "List[dict]",
                    "str"
                ],
                "log": [
                    "bool",
                    "List[dict]",
                    "str"
                ]
            }
        },
        "SetCriterion.loss_cardinality": {
            "name": "loss_cardinality",
            "location": 102,
            "return": [
                "Dict[Text,]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "outputs": [
                    "str",
                    "float",
                    "int"
                ],
                "targets": [
                    "List[str]",
                    "bytes",
                    "int",
                    "Callable",
                    "bool"
                ],
                "indices": [
                    "bool",
                    "str"
                ],
                "num_boxes": [
                    "bool",
                    "str"
                ]
            }
        },
        "SetCriterion.loss_boxes": {
            "name": "loss_boxes",
            "location": 115,
            "return": [
                "Dict[Text,float]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "outputs": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "int"
                ],
                "targets": [
                    "int",
                    "bytes",
                    "List[str]",
                    "float",
                    "torch.Tensor",
                    "Iterable[T]"
                ],
                "indices": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "int"
                ],
                "num_boxes": [
                    "str",
                    "float",
                    "int",
                    "utils.times.Seconds",
                    "Tuple[Union[int,int,int]]",
                    "Tuple[int,int,int]"
                ]
            }
        },
        "SetCriterion.loss_masks": {
            "name": "loss_masks",
            "location": 138,
            "return": [
                "Dict[Text,]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "outputs": [
                    "str",
                    "Optional[str]"
                ],
                "targets": [
                    "int",
                    "str",
                    "float",
                    "Dict[str,torch.Tensor]",
                    "bool"
                ],
                "indices": [
                    "str",
                    "float",
                    "Optional[str]",
                    "None",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ],
                "num_boxes": [
                    "int",
                    "Optional[str]",
                    "str",
                    "float",
                    "bool",
                    "bytes",
                    "None",
                    "Dict[str,Any]",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        },
        "SetCriterion._get_src_permutation_idx": {
            "name": "_get_src_permutation_idx",
            "location": 172,
            "return": [
                "str",
                "Tuple"
            ],
            "arguments": {
                "self": [],
                "indices": [
                    "int",
                    "Callable[[], None]"
                ]
            }
        },
        "SetCriterion._get_tgt_permutation_idx": {
            "name": "_get_tgt_permutation_idx",
            "location": 180,
            "return": [
                "str",
                "Tuple"
            ],
            "arguments": {
                "self": [],
                "indices": [
                    "List[int]",
                    "int"
                ]
            }
        },
        "SetCriterion.get_loss": {
            "name": "get_loss",
            "location": 188,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "loss": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "outputs": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "None",
                    "Dict[int,object]",
                    "Optional[Any]",
                    "int",
                    "Any"
                ],
                "targets": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "None",
                    "Dict[int,object]",
                    "Optional[Any]",
                    "int",
                    "Any"
                ],
                "indices": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "None",
                    "Dict[int,object]",
                    "Optional[Any]",
                    "int",
                    "Any"
                ],
                "num_boxes": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "None",
                    "Dict[int,object]",
                    "Optional[Any]",
                    "int",
                    "Any"
                ]
            }
        },
        "SetCriterion.forward": {
            "name": "forward",
            "location": 198,
            "return": [
                "Dict",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "outputs": [
                    "int",
                    "str",
                    "Optional[ambassador.utils.SecretInfo]"
                ],
                "targets": [
                    "Dict",
                    "int",
                    "bytes",
                    "str",
                    "Tuple[Union[int,slice,int,slice]]",
                    "Tuple[Union[int,slice],Union[int,slice]]"
                ]
            }
        },
        "PostProcess.__init__": {
            "name": "__init__",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rescale_to_orig_size": [
                    "bool",
                    "int",
                    "Optional[Tuple[int,int]]",
                    "Tuple[int,int]",
                    "str"
                ],
                "threshold": [
                    "float",
                    "str",
                    "List[cirq.Circuit]",
                    "allennlp.nn.decoding.decoder_state.DecoderState",
                    "int",
                    "Callable",
                    "bool",
                    "Optional[List[str]]",
                    "Optional[dict]"
                ]
            }
        },
        "PostProcess.forward": {
            "name": "forward",
            "location": 238,
            "return": [
                "List[dict[Text,]]",
                "bool",
                "Optional[Union[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "outputs": [
                    "bytes",
                    "str",
                    "cmk.utils.type_defs.AgentRawData",
                    "int",
                    "torch.Tensor"
                ],
                "targets": [
                    "str",
                    "bytes",
                    "int",
                    "torch.Tensor"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/detection-transformer/models/position_encoding.py": {
        "build_position_encoding": {
            "name": "build_position_encoding",
            "location": 139,
            "return": [
                "bool",
                "PositionEmbeddingLearned",
                "PositionEmbedding"
            ],
            "arguments": {
                "args": []
            }
        },
        "PositionEmbedding.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_pos_feats": [
                    "int",
                    "str"
                ],
                "temperature": [
                    "int",
                    "Union[str,float]",
                    "float"
                ],
                "normalize": [
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "scale": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "int",
                    "Optional[float]",
                    "float",
                    "bool"
                ]
            }
        },
        "PositionEmbedding.forward": {
            "name": "forward",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str",
                "Dict",
                "List[int]",
                "List[list[int]]"
            ],
            "arguments": {
                "self": [],
                "tensor_list": [
                    "List",
                    "Union[Sequence[int],Sequence[dict]]",
                    "Sequence[int]",
                    "List[str]",
                    "Union[str,List[str]]",
                    "Sequence[dict]",
                    "Iterable[str]",
                    "str"
                ]
            }
        },
        "PositionEmbeddingLearned.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_pos_feats": [
                    "int",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "PositionEmbeddingLearned.reset_parameters": {
            "name": "reset_parameters",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PositionEmbeddingLearned.forward": {
            "name": "forward",
            "location": 121,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "tensor_list": [
                    "List[Union[int,float]]",
                    "List",
                    "List[dict]",
                    "List[str]",
                    "List[Tuple[str,int]]",
                    "int",
                    "List[tuple[Union[str,int]]]",
                    "List[List[Any]]",
                    "List[list[Any]]"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/detection-transformer/models/semseg.py": {
        "underdirt": {
            "name": "underdirt",
            "location": 10,
            "return": [
                "Tuple[None]",
                "bool",
                "Optional[Any]",
                "int"
            ],
            "arguments": {
                "schematic": [
                    "int",
                    "numpy.ndarray",
                    "Optional[Union[int, slice]]",
                    "Dict[str, str]"
                ],
                "labels": [
                    "None",
                    "numpy.ndarray",
                    "torch.Tensor",
                    "float",
                    "Dict[str,torch.LongTensor]",
                    "Optional[float]"
                ],
                "max_shift": [
                    "int",
                    "Tuple[int,int]",
                    "List[str]",
                    "bool"
                ],
                "nothing_id": [
                    "int",
                    "Sequence[Tuple[str,int]]",
                    "Set",
                    "Dict"
                ]
            }
        },
        "flip_rotate": {
            "name": "flip_rotate",
            "location": 28,
            "return": [
                "Tuple[Optional[int]]",
                "int",
                "List[Tuple[str,str]]"
            ],
            "arguments": {
                "c": [
                    "int",
                    "IO",
                    "str"
                ],
                "l": [
                    "None",
                    "Optional[numpy.ndarray]",
                    "Optional[bytes]",
                    "Type[T]",
                    "Sequence[str]",
                    "int"
                ],
                "idx": [
                    "int",
                    "None",
                    "Optional[int]",
                    "Optional[str]",
                    "str",
                    "Optional[Tuple[int,int]]",
                    "Tuple[Union[int,int]]",
                    "Callable[[str],int]",
                    "Callable[str,int]"
                ]
            }
        },
        "pad_to_sidelength": {
            "name": "pad_to_sidelength",
            "location": 63,
            "return": [
                "Tuple[Union[list,dict[str,dict[str,Any]],int,str,dict[str,dict],None,list[int]]]",
                "str",
                "bool",
                "List[Dict]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "schematic": [
                    "List[str]",
                    "int",
                    "Optional[Any]",
                    "List[\"Issue\"]",
                    "numpy.ndarray",
                    "list",
                    "bytes"
                ],
                "labels": [
                    "int",
                    "None"
                ],
                "nothing_id": [
                    "int",
                    "Optional[Sequence[int]]"
                ],
                "sidelength": [
                    "int",
                    "Union[List[str],List[Any]]",
                    "str"
                ]
            }
        },
        "fit_in_sidelength": {
            "name": "fit_in_sidelength",
            "location": 81,
            "return": [
                "Tuple[Optional[tuple[int]]]",
                "Sequence[str]",
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "schematic": [
                    "str",
                    "int",
                    "Dict[str,torch.LongTensor]",
                    "Optional[int]",
                    "None"
                ],
                "labels": [
                    "int",
                    "str",
                    "None"
                ],
                "nothing_id": [
                    "int",
                    "str"
                ],
                "sl": [
                    "int",
                    "Optional[int]",
                    "Dict[str,torch.LongTensor]",
                    "Optional[float]"
                ],
                "max_shift": [
                    "int",
                    "List[int]",
                    "List[List[int]]",
                    "List"
                ]
            }
        },
        "make_example_from_raw": {
            "name": "make_example_from_raw",
            "location": 102,
            "return": [
                "Tuple[int]",
                "str",
                "float"
            ],
            "arguments": {
                "schematic": [
                    "int",
                    "Dict[str,torch.LongTensor]",
                    "torch.Tensor"
                ],
                "labels": [
                    "torch.Tensor",
                    "int",
                    "None",
                    "Dict[str,torch.LongTensor]",
                    "float"
                ],
                "augment": [
                    "dict",
                    "Dict[str, Any]",
                    "int",
                    "Dict[str, float]"
                ],
                "nothing_id": [
                    "int",
                    "torch.Tensor",
                    "Dict[str,torch.LongTensor]",
                    "float"
                ],
                "sl": [
                    "int",
                    "str"
                ]
            }
        },
        "SemSegNet.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "classes": [
                    "str",
                    "None",
                    "Callable",
                    "Sequence",
                    "bool"
                ]
            }
        },
        "SemSegNet._build": {
            "name": "_build",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SemSegNet.forward": {
            "name": "forward",
            "location": 189,
            "return": [
                "int",
                "float",
                "Callable",
                "str",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "numpy.ndarray",
                    "torch.Tensor"
                ]
            }
        },
        "SemSegNet.save": {
            "name": "save",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "BinaryIO"
                ]
            }
        },
        "SemSegNet.load": {
            "name": "load",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "Dict",
                    "bytes",
                    "Callable",
                    "Dict[str,Any]"
                ]
            }
        },
        "SemSegWrapper.__init__": {
            "name": "__init__",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ],
                "threshold": [
                    "float",
                    "bool",
                    "int",
                    "Optional[float]",
                    "Optional[bool]",
                    "str"
                ],
                "blocks_only": [
                    "bool",
                    "int",
                    "Optional[float]",
                    "Optional[bool]",
                    "str"
                ],
                "cuda": [
                    "bool",
                    "int",
                    "Dict[str,int]"
                ]
            }
        },
        "SemSegWrapper.segment_object": {
            "name": "segment_object",
            "location": 263,
            "return": [
                "Dict[tuple,]",
                "Optional[int]",
                "Dict[str,int]",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "blocks": []
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/detection-transformer/models/__init__.py": {
        "build_model": {
            "name": "build_model",
            "location": 4,
            "return": [
                "Iterable[T]",
                "str",
                "int"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/geoscorer/autogen_dataset.py": {
        "get_glue_cubes_direction_target_coord": {
            "name": "get_glue_cubes_direction_target_coord",
            "location": 13,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "viewer_pos": [
                    "bool",
                    "Dict",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "None"
                ],
                "dir_vec": [
                    "bool",
                    "Dict",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "None"
                ],
                "cube_size": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "origin_cont": [
                    "bool",
                    "Dict",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "None"
                ],
                "c_sl": [
                    "bool",
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[bool]"
                ]
            }
        },
        "get_glue_cubes_cont_size_loc": {
            "name": "get_glue_cubes_cont_size_loc",
            "location": 22,
            "return": [
                "Tuple[Union[int,float,list[Union[int,float]]]]",
                "Callable[[T],List[T]]",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "c_sl": [
                    "int"
                ],
                "s_sl": [
                    "int",
                    "Optional[int]"
                ],
                "fixed_size": [
                    "int",
                    "torch.utils.data.Dataset",
                    "str",
                    "Tuple[int,int,int]",
                    "bool"
                ],
                "center": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "BinaryIO",
                    "Optional[int]"
                ]
            }
        },
        "get_sparse_cube_context_seg": {
            "name": "get_sparse_cube_context_seg",
            "location": 35,
            "return": [
                "Tuple[list[tuple[tuple[Union[None,Callable,str,bool]]]]]",
                "str",
                "bool"
            ],
            "arguments": {
                "cube_size": [
                    "int",
                    "float",
                    "None",
                    "bool",
                    "Optional[int]"
                ],
                "origin_cont": [
                    "int",
                    "List",
                    "Sequence[Sequence[float]]",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "origin_seg": [
                    "int",
                    "List",
                    "Sequence[Sequence[float]]",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "block_type": [
                    "Callable",
                    "None",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "glue_cubes": {
            "name": "glue_cubes",
            "location": 52,
            "return": [
                "Tuple[Union[int,float,dict[tuple[Union[str,str]],int]]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "c_sl": [
                    "int",
                    "List[bytes]",
                    "bytes"
                ],
                "s_sl": [
                    "int",
                    "List[bytes]",
                    "bytes"
                ],
                "dim": [
                    "bool",
                    "str"
                ],
                "direction": [
                    "str",
                    "bool"
                ]
            }
        },
        "directional_glue_cubes": {
            "name": "directional_glue_cubes",
            "location": 62,
            "return": [
                "Dict[Text,]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "c_sl": [
                    "int",
                    "float"
                ],
                "s_sl": [
                    "int",
                    "bytes",
                    "Optional[int]",
                    "None"
                ],
                "fixed_cube_size": [
                    "int",
                    "None",
                    "bytes",
                    "Optional[int]"
                ],
                "fixed_center": [
                    "bool",
                    "int",
                    "bytes",
                    "Optional[int]"
                ]
            }
        },
        "SegmentContextGlueCubesData.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nexamples": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "str",
                    "float"
                ],
                "context_side_length": [
                    "int",
                    "str",
                    "bool"
                ],
                "seg_side_length": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "str",
                    "float"
                ],
                "useid": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "int",
                    "float"
                ],
                "type_name": [
                    "Text",
                    "int",
                    "str",
                    "Iterable[str]",
                    "bool"
                ],
                "use_direction": [
                    "bool"
                ],
                "fixed_cube_size": [
                    "int",
                    "None",
                    "str",
                    "bool",
                    "List[float]",
                    "List[str]"
                ],
                "fixed_center": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "int",
                    "float"
                ],
                "ground_type": [
                    "int",
                    "None",
                    "bool"
                ]
            }
        },
        "SegmentContextGlueCubesData._get_example": {
            "name": "_get_example",
            "location": 107,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "SegmentContextGlueCubesData.__getitem__": {
            "name": "__getitem__",
            "location": 131,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "SegmentContextGlueCubesData.__len__": {
            "name": "__len__",
            "location": 134,
            "return": [
                "str",
                "List[int]",
                "Optional[str]",
                "List[str]",
                "Tuple[int, int]",
                "List[Tuple[int, int]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/geoscorer/combined_dataset.py": {
        "SegmentContextData.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nexamples": [
                    "int",
                    "bool",
                    "float"
                ],
                "context_side_length": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ],
                "seg_side_length": [
                    "int",
                    "bool",
                    "float"
                ],
                "useid": [
                    "bool",
                    "int",
                    "float"
                ],
                "ratios": [
                    "List[str]",
                    "list",
                    "Dict[str, str]",
                    "bool",
                    "bytes",
                    "str"
                ],
                "extra_params": [
                    "Dict",
                    "Optional[int]"
                ],
                "config": [
                    "List[str]",
                    "None",
                    "str",
                    "Mapping[str,str]",
                    "int",
                    "Mapping"
                ]
            }
        },
        "SegmentContextData._get_dataset": {
            "name": "_get_dataset",
            "location": 53,
            "return": [
                "bool",
                "str",
                "SegmentContextInstanceData",
                "SegmentContextShapeData",
                "SegmentContextShapeDirData",
                "SegmentContextGlueCubesData"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "extra_params": [
                    "Dict",
                    "str",
                    "Optional[Mapping[str,Any]]"
                ]
            }
        },
        "SegmentContextData._get_example": {
            "name": "_get_example",
            "location": 122,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SegmentContextData.__getitem__": {
            "name": "__getitem__",
            "location": 127,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "SegmentContextData.__len__": {
            "name": "__len__",
            "location": 130,
            "return": [
                "str",
                "List[int]",
                "Optional[str]",
                "List[str]",
                "Tuple[int, int]",
                "List[Tuple[int, int]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/geoscorer/config_maker.py": {},
    "craftassist-master/python/craftassist/voxel_models/geoscorer/directional_utils.py": {
        "get_viewer_look": {
            "name": "get_viewer_look",
            "location": 9,
            "return": [
                "bool",
                "int",
                "Tuple[str, int]",
                "List[str]",
                "Optional[int]"
            ],
            "arguments": {
                "c_sl": [
                    "str",
                    "numpy.ndarray"
                ]
            }
        },
        "get_random_viewer_info": {
            "name": "get_random_viewer_info",
            "location": 13,
            "return": [
                "Tuple[Union[tuple[Union[str,str,str,str]],list,dict[str,int]]]",
                "int",
                "str"
            ],
            "arguments": {
                "sl": [
                    "int",
                    "float",
                    "List[int]",
                    "Optional[int]",
                    "torch.Tensor",
                    "random.Random",
                    "Optional[torch.Tensor]"
                ]
            }
        },
        "get_vector": {
            "name": "get_vector",
            "location": 25,
            "return": [
                "int",
                "str",
                "List[int]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "start": [
                    "int",
                    "str"
                ],
                "end": [
                    "int",
                    "str"
                ]
            }
        },
        "dim_to_vec": {
            "name": "dim_to_vec",
            "location": 29,
            "return": [
                "List[int]",
                "int",
                "str",
                "Optional[Iterable[str]]",
                "Callable",
                "List[str]"
            ],
            "arguments": {
                "dim": [
                    "bool",
                    "str",
                    "Container[T]",
                    "Container"
                ]
            }
        },
        "dir_vec_to_dim": {
            "name": "dir_vec_to_dim",
            "location": 33,
            "return": [
                "Sequence[int]",
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "dir_vec": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "dr_to_vec": {
            "name": "dr_to_vec",
            "location": 40,
            "return": [
                "List[int]",
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "dr": [
                    "int",
                    "float",
                    "str",
                    "List[int]",
                    "List[List[str]]",
                    "List[list[str]]"
                ]
            }
        },
        "dir_vec_to_dr": {
            "name": "dir_vec_to_dr",
            "location": 44,
            "return": [
                "int",
                "str",
                "IO",
                "Dict[str,Any]",
                "bytes",
                "bool"
            ],
            "arguments": {
                "dir_vec": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "dim_dir_to_dir_tensor": {
            "name": "dim_dir_to_dir_tensor",
            "location": 53,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "dim": [
                    "str",
                    "List[str]"
                ],
                "dr": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "dir_vec_to_dim_dir": {
            "name": "dir_vec_to_dim_dir",
            "location": 59,
            "return": [
                "Tuple[Union[int,dict,list[int],list[list[int]],str]]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "dir_vec": [
                    "Dict",
                    "List[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "random_dir_vec_tensor": {
            "name": "random_dir_vec_tensor",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "normalize": {
            "name": "normalize",
            "location": 71,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "batched_vector": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "get_rotation_matrix": {
            "name": "get_rotation_matrix",
            "location": 80,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "viewer_pos": [
                    "Dict[str,Set[str]]",
                    "str",
                    "Dict[str,set[str]]",
                    "Dict",
                    "Optional[str]",
                    "None"
                ],
                "viewer_look": [
                    "Dict[str,Set[str]]",
                    "str",
                    "Dict[str,set[str]]",
                    "Dict",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "rotate_x_y": {
            "name": "rotate_x_y",
            "location": 104,
            "return": [
                "torch.Tensor",
                "numpy.ndarray"
            ],
            "arguments": {
                "coord": [
                    "torch.Tensor",
                    "numpy.ndarray"
                ],
                "rotation_matrix": [
                    "torch.Tensor",
                    "numpy.ndarray"
                ]
            }
        },
        "float_equals": {
            "name": "float_equals",
            "location": 108,
            "return": [
                "bool"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float",
                    "hypothesis.extra.numpy.Shape"
                ],
                "b": [
                    "int",
                    "float",
                    "hypothesis.extra.numpy.Shape"
                ],
                "epsilon": [
                    "int",
                    "float",
                    "hypothesis.extra.numpy.Shape"
                ]
            }
        },
        "get_argmax_list": {
            "name": "get_argmax_list",
            "location": 112,
            "return": [
                "List[tuple]",
                "str",
                "Callable",
                "List[str]",
                "List"
            ],
            "arguments": {
                "vals": [
                    "str",
                    "List[str]",
                    "List",
                    "Callable"
                ],
                "epsilon": [
                    "float",
                    "int",
                    "bool"
                ],
                "minlist": [
                    "bool",
                    "str",
                    "Callable",
                    "List[str]",
                    "List"
                ],
                "maxlen": [
                    "str",
                    "None",
                    "int",
                    "Sequence[str]",
                    "List",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "get_firstmax": {
            "name": "get_firstmax",
            "location": 125,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "vals": [
                    "int",
                    "float",
                    "str",
                    "Callable",
                    "numpy.ndarray"
                ],
                "epsilon": [
                    "float",
                    "int",
                    "str",
                    "numpy.ndarray",
                    "Callable"
                ],
                "minlist": [
                    "bool",
                    "int",
                    "float",
                    "str",
                    "numpy.ndarray",
                    "Callable"
                ]
            }
        },
        "get_xyz_viewer_look_coords_batched": {
            "name": "get_xyz_viewer_look_coords_batched",
            "location": 134,
            "return": [
                "Sequence[str]",
                "List[torch.Tensor]",
                "str"
            ],
            "arguments": {
                "viewer_pos": [
                    "int",
                    "List[List[int]]"
                ],
                "viewer_look": [
                    "int",
                    "List[List[int]]"
                ],
                "batched_target_coords": [
                    "Callable",
                    "List[List[int]]",
                    "float",
                    "dict",
                    "int"
                ]
            }
        },
        "get_dir_dist": {
            "name": "get_dir_dist",
            "location": 199,
            "return": [
                "str",
                "Tuple[Union[int,dict,list[int],list[list[int]],str]]"
            ],
            "arguments": {
                "viewer_pos": [
                    "str"
                ],
                "viewer_look": [
                    "str"
                ],
                "batched_target_coords": [
                    "int",
                    "str",
                    "float",
                    "Protocol"
                ]
            }
        },
        "get_sampled_direction_vec": {
            "name": "get_sampled_direction_vec",
            "location": 208,
            "return": [
                "str"
            ],
            "arguments": {
                "viewer_pos": [
                    "str",
                    "int"
                ],
                "viewer_look": [
                    "str",
                    "int"
                ],
                "target_coord": [
                    "str",
                    "int"
                ]
            }
        },
        "get_max_direction_vec": {
            "name": "get_max_direction_vec",
            "location": 218,
            "return": [
                "str"
            ],
            "arguments": {
                "viewer_pos": [
                    "str",
                    "int"
                ],
                "viewer_look": [
                    "str",
                    "int"
                ],
                "target_coord": [
                    "str",
                    "int"
                ]
            }
        },
        "convert_origin_to_center": {
            "name": "convert_origin_to_center",
            "location": 228,
            "return": [
                "List",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "origin": [
                    "int",
                    "List[str]",
                    "str",
                    "float"
                ],
                "sizes": [
                    "float",
                    "numpy.ndarray",
                    "str",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "convert_center_to_origin": {
            "name": "convert_center_to_origin",
            "location": 233,
            "return": [
                "List[int]",
                "int",
                "str",
                "List",
                "List[str]"
            ],
            "arguments": {
                "center": [
                    "int",
                    "List[str]",
                    "str",
                    "float"
                ],
                "sizes": [
                    "float",
                    "numpy.ndarray",
                    "str",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "get_rotated_context_to_seg_origin": {
            "name": "get_rotated_context_to_seg_origin",
            "location": 238,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "viewer_pos": [
                    "int",
                    "Tuple[int, int, int]",
                    "Optional[int]"
                ],
                "dir_vec": [
                    "str",
                    "bool",
                    "Callable[str,str,None]",
                    "Set[str]",
                    "Callable[[str,str],None]",
                    "int"
                ],
                "c_pos": [
                    "int",
                    "str",
                    "bool",
                    "None",
                    "Optional[int]"
                ],
                "c_sizes": [
                    "List[Tuple[Any,Any]]",
                    "List",
                    "List[tuple[Union[Any,Any]]]"
                ],
                "s_sizes": [
                    "Tuple",
                    "int",
                    "float"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/geoscorer/geoscorer_wrapper.py": {
        "ContextSegmentMergerWrapper.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "models_path": [
                    "str",
                    "Optional[str]",
                    "Optional[Callable[[str],str]]",
                    "None",
                    "Optional[IO[bytes]]",
                    "Callable[str,str]",
                    "IO"
                ]
            }
        },
        "ContextSegmentMergerWrapper.segment_context_to_pos": {
            "name": "segment_context_to_pos",
            "location": 33,
            "return": [
                "Tuple",
                "float",
                "int",
                "Union[bool,None]",
                "str"
            ],
            "arguments": {
                "self": [],
                "segment": [
                    "List",
                    "int",
                    "List[List[T]]",
                    "List[list[T]]"
                ],
                "context": []
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/geoscorer/inst_seg_dataset.py": {
        "parse_instance_data": {
            "name": "parse_instance_data",
            "location": 16,
            "return": [
                "bool",
                "IO[bytes]",
                "bytes",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "inst_data": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "parse_segments_into_file": {
            "name": "parse_segments_into_file",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "dpath": [
                    "str",
                    "int"
                ],
                "save_path": [
                    "str"
                ]
            }
        },
        "convert_tuple_to_block": {
            "name": "convert_tuple_to_block",
            "location": 65,
            "return": [
                "Tuple[tuple[Union[bytes,int]]]",
                "bytes",
                "bool",
                "BinaryIO"
            ],
            "arguments": {
                "b": [
                    "List",
                    "List[bytes]",
                    "bool"
                ]
            }
        },
        "get_seg_context_sparse": {
            "name": "get_seg_context_sparse",
            "location": 71,
            "return": [
                "Tuple[list]",
                "str",
                "bool"
            ],
            "arguments": {
                "seg_data": [
                    "int",
                    "List",
                    "bytes",
                    "Iterable[str]"
                ],
                "drop_perc": [
                    "int",
                    "float",
                    "List",
                    "bool",
                    "random.Random",
                    "List[int]"
                ],
                "rand_drop": [
                    "bool",
                    "List[Dict[str,Any]]",
                    "Optional[List[Dict]]",
                    "Dict",
                    "List[bytes]"
                ]
            }
        },
        "get_inst_seg_example": {
            "name": "get_inst_seg_example",
            "location": 105,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "seg_data": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "drop_perc": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "c_sl": [
                    "bool",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Tuple",
                    "bytes"
                ],
                "s_sl": [
                    "bool",
                    "str",
                    "Tuple",
                    "bytes",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ],
                "use_id": [
                    "str",
                    "float",
                    "int"
                ],
                "ground_type": [
                    "bool",
                    "None",
                    "List[str]",
                    "List",
                    "str",
                    "Optional[List[Any]]"
                ]
            }
        },
        "SegmentContextInstanceData.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_dir": [
                    "str",
                    "Text"
                ],
                "nexamples": [
                    "int",
                    "Sequence[str]",
                    "str",
                    "Type",
                    "bool",
                    "Optional[str]"
                ],
                "context_side_length": [
                    "int",
                    "float",
                    "str",
                    "Optional[str]"
                ],
                "seg_side_length": [
                    "int",
                    "Sequence[str]",
                    "str",
                    "Type",
                    "bool",
                    "Optional[str]"
                ],
                "useid": [
                    "bool",
                    "Sequence[str]",
                    "int",
                    "str",
                    "Type",
                    "Optional[str]"
                ],
                "use_direction": [
                    "bool",
                    "str",
                    "Union[bool,List,Tuple]"
                ],
                "drop_perc": [
                    "float",
                    "Sequence[str]",
                    "int",
                    "str",
                    "Type",
                    "bool",
                    "Optional[str]"
                ],
                "ground_type": [
                    "str",
                    "None",
                    "Sequence[Any]",
                    "int",
                    "bytes",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "SegmentContextInstanceData._get_example": {
            "name": "_get_example",
            "location": 158,
            "return": [
                "float",
                "Callable",
                "bool",
                "Dict[str, Any]",
                "Callable[[Dict], None]",
                "IO"
            ],
            "arguments": {
                "self": []
            }
        },
        "SegmentContextInstanceData.__getitem__": {
            "name": "__getitem__",
            "location": 175,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "SegmentContextInstanceData.__len__": {
            "name": "__len__",
            "location": 178,
            "return": [
                "int",
                "List[int]",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/geoscorer/models.py": {
        "conv3x3x3": {
            "name": "conv3x3x3",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "in_planes": [
                    "int",
                    "Callable[[int], bool]",
                    "Tuple[float, float]"
                ],
                "out_planes": [
                    "int",
                    "Callable[[int], bool]",
                    "Tuple[float, float]"
                ],
                "stride": [
                    "int",
                    "Callable[[int], bool]",
                    "Tuple[float, float]"
                ],
                "bias": [
                    "int",
                    "Callable[[int], bool]",
                    "Tuple[float, float]"
                ]
            }
        },
        "conv3x3x3up": {
            "name": "conv3x3x3up",
            "location": 16,
            "return": [
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "in_planes": [
                    "int",
                    "bool",
                    "str"
                ],
                "out_planes": [
                    "int",
                    "bool",
                    "str"
                ],
                "bias": [
                    "bool",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "convbn": {
            "name": "convbn",
            "location": 23,
            "return": [
                "int"
            ],
            "arguments": {
                "in_planes": [
                    "Tuple[int, int, int]",
                    "str",
                    "int"
                ],
                "out_planes": [
                    "Tuple[int, int, int]",
                    "str",
                    "int"
                ],
                "stride": [
                    "Tuple[int, int, int]",
                    "str",
                    "int"
                ],
                "bias": [
                    "Tuple[int, int, int]",
                    "str",
                    "int"
                ]
            }
        },
        "convbnup": {
            "name": "convbnup",
            "location": 31,
            "return": [
                "int"
            ],
            "arguments": {
                "in_planes": [
                    "bool",
                    "float",
                    "Tuple[int, int, int]"
                ],
                "out_planes": [
                    "bool",
                    "float",
                    "Tuple[int, int, int]"
                ],
                "bias": [
                    "bool",
                    "float",
                    "Tuple[int, int, int]"
                ]
            }
        },
        "create_xyz_tensor": {
            "name": "create_xyz_tensor",
            "location": 41,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "sl": [
                    "int",
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "get_optim": {
            "name": "get_optim",
            "location": 330,
            "return": [
                "list",
                "str",
                "Callable"
            ],
            "arguments": {
                "model_params": [
                    "int",
                    "str",
                    "List[Dict[str, Any]]",
                    "Callable"
                ],
                "opts": [
                    "str",
                    "dict",
                    "int",
                    "Exception",
                    "Mapping[str, Any]"
                ]
            }
        },
        "create_context_segment_modules": {
            "name": "create_context_segment_modules",
            "location": 346,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "opts": [
                    "Dict[str, Any]",
                    "dict",
                    "Optional[List[str]]"
                ]
            }
        },
        "ContextEmbeddingNet.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "opts": [
                    "Dict[str, Any]",
                    "dict",
                    "float"
                ],
                "blockid_embedding": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ContextEmbeddingNet.forward": {
            "name": "forward",
            "location": 101,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "b": [
                    "float",
                    "int",
                    "torch.Tensor",
                    "bytes"
                ]
            }
        },
        "SegmentEmbeddingNet.__init__": {
            "name": "__init__",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "opts": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "blockid_embedding": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "SegmentEmbeddingNet.forward": {
            "name": "forward",
            "location": 191,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "b": [
                    "int",
                    "bytes"
                ]
            }
        },
        "SegmentDirectionEmbeddingNet.__init__": {
            "name": "__init__",
            "location": 211,
            "return": [],
            "arguments": {
                "self": [],
                "opts": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "SegmentDirectionEmbeddingNet.forward": {
            "name": "forward",
            "location": 236,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "b": [
                    "int",
                    "dict",
                    "bytes"
                ]
            }
        },
        "ContextSegmentScoringModule.__init__": {
            "name": "__init__",
            "location": 254,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContextSegmentScoringModule.forward": {
            "name": "forward",
            "location": 257,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int",
                    "bytes"
                ]
            }
        },
        "spatial_emb_loss.__init__": {
            "name": "__init__",
            "location": 281,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "spatial_emb_loss.forward": {
            "name": "forward",
            "location": 287,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "inp": [
                    "torch.Tensor",
                    "str"
                ]
            }
        },
        "rank_loss.__init__": {
            "name": "__init__",
            "location": 296,
            "return": [],
            "arguments": {
                "self": [],
                "margin": [
                    "int",
                    "float",
                    "List[int]",
                    "Union[str, float]"
                ],
                "nneg": [
                    "int",
                    "float",
                    "List[int]",
                    "Union[str, float]"
                ]
            }
        },
        "rank_loss.forward": {
            "name": "forward",
            "location": 302,
            "return": [
                "str",
                "int",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "inp": [
                    "int",
                    "str"
                ]
            }
        },
        "reshape_nll.__init__": {
            "name": "__init__",
            "location": 314,
            "return": [],
            "arguments": {
                "self": [],
                "nneg": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "reshape_nll.forward": {
            "name": "forward",
            "location": 320,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "inp": [
                    "torch.Tensor"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/geoscorer/shape_dataset.py": {
        "get_shape": {
            "name": "get_shape",
            "location": 32,
            "return": [
                "str",
                "Tuple[Text]"
            ],
            "arguments": {
                "name": [
                    "Text",
                    "str",
                    "Optional[List[str]]",
                    "int",
                    "Exception"
                ],
                "max_size": [
                    "int",
                    "str"
                ],
                "opts": [
                    "int",
                    "str"
                ]
            }
        },
        "options_cube": {
            "name": "options_cube",
            "location": 46,
            "return": [
                "Dict[Text,]",
                "float",
                "torch.nn.modules.linear.Linear",
                "int",
                "List[List[int]]",
                "List"
            ],
            "arguments": {
                "max_size": [
                    "int",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "options_hollow_cube": {
            "name": "options_hollow_cube",
            "location": 50,
            "return": [
                "int",
                "str",
                "Tuple[Union[float,float]]",
                "numpy.ndarray",
                "bool"
            ],
            "arguments": {
                "max_size": [
                    "int",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "options_rectanguloid": {
            "name": "options_rectanguloid",
            "location": 60,
            "return": [
                "Dict[Text,]",
                "float",
                "torch.nn.modules.linear.Linear",
                "int",
                "List[List[int]]",
                "List"
            ],
            "arguments": {
                "max_size": [
                    "int",
                    "bool"
                ]
            }
        },
        "options_hollow_rectanguloid": {
            "name": "options_hollow_rectanguloid",
            "location": 64,
            "return": [
                "int",
                "str",
                "numpy.ndarray",
                "float",
                "bool"
            ],
            "arguments": {
                "max_size": [
                    "int",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "options_sphere": {
            "name": "options_sphere",
            "location": 72,
            "return": [
                "Dict[Text,]",
                "float",
                "str",
                "int",
                "Generator",
                "numpy.ndarray"
            ],
            "arguments": {
                "max_size": [
                    "int"
                ]
            }
        },
        "options_spherical_shell": {
            "name": "options_spherical_shell",
            "location": 78,
            "return": [
                "int",
                "float",
                "Iterable[Any]",
                "Dict[Text,int]",
                "str",
                "Dict[str,bool]"
            ],
            "arguments": {
                "max_size": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "options_square_pyramid": {
            "name": "options_square_pyramid",
            "location": 92,
            "return": [
                "int",
                "numpy.ndarray",
                "bool",
                "str"
            ],
            "arguments": {
                "max_size": [
                    "int"
                ]
            }
        },
        "options_square": {
            "name": "options_square",
            "location": 103,
            "return": [
                "Dict[Text,]",
                "float",
                "torch.nn.modules.linear.Linear",
                "int",
                "List[List[int]]",
                "List"
            ],
            "arguments": {
                "max_size": [
                    "int",
                    "bool"
                ]
            }
        },
        "options_rectangle": {
            "name": "options_rectangle",
            "location": 107,
            "return": [
                "Dict[Text,]",
                "float",
                "torch.nn.modules.linear.Linear",
                "int",
                "List[List[int]]",
                "List"
            ],
            "arguments": {
                "max_size": [
                    "int",
                    "List",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "options_circle": {
            "name": "options_circle",
            "location": 111,
            "return": [
                "Dict[Text,]",
                "float",
                "str",
                "int",
                "Generator",
                "numpy.ndarray"
            ],
            "arguments": {
                "max_size": [
                    "int"
                ]
            }
        },
        "options_disk": {
            "name": "options_disk",
            "location": 117,
            "return": [
                "Dict[Text,]",
                "float",
                "str",
                "int",
                "Generator",
                "numpy.ndarray"
            ],
            "arguments": {
                "max_size": [
                    "int"
                ]
            }
        },
        "options_triangle": {
            "name": "options_triangle",
            "location": 123,
            "return": [
                "Dict[Text,]",
                "float",
                "torch.nn.modules.linear.Linear",
                "int",
                "List[List[int]]",
                "List"
            ],
            "arguments": {
                "max_size": [
                    "int",
                    "bool"
                ]
            }
        },
        "options_dome": {
            "name": "options_dome",
            "location": 127,
            "return": [
                "Dict[Text,]",
                "float",
                "str",
                "int",
                "Generator",
                "numpy.ndarray"
            ],
            "arguments": {
                "max_size": [
                    "int"
                ]
            }
        },
        "options_arch": {
            "name": "options_arch",
            "location": 134,
            "return": [
                "Dict[Text,]",
                "float",
                "torch.nn.modules.linear.Linear",
                "int",
                "List[List[int]]",
                "List"
            ],
            "arguments": {
                "max_size": [
                    "int",
                    "torch.Tensor",
                    "bool",
                    "Tuple[int,int]",
                    "Tuple[int,int,int]"
                ]
            }
        },
        "options_ellipsoid": {
            "name": "options_ellipsoid",
            "location": 139,
            "return": [
                "Dict[Text,]",
                "float",
                "Callable",
                "torch.nn.modules.linear.Linear",
                "Dict[str,Any]",
                "int",
                "Tuple[int]"
            ],
            "arguments": {
                "max_size": [
                    "int"
                ]
            }
        },
        "options_tower": {
            "name": "options_tower",
            "location": 146,
            "return": [
                "Dict[Text,]",
                "torch.Tensor",
                "Optional[torch.Tensor]",
                "Dict[str,Any]",
                "int",
                "str"
            ],
            "arguments": {
                "max_size": [
                    "int"
                ]
            }
        },
        "options_empty": {
            "name": "options_empty",
            "location": 150,
            "return": [
                "Dict",
                "int",
                "numpy.ndarray",
                "bool",
                "str"
            ],
            "arguments": {
                "max_size": [
                    "float",
                    "int",
                    "Callable",
                    "Optional[Callable]",
                    "None",
                    "bool",
                    "Tuple[Union[int,int]]",
                    "Optional[int]",
                    "Union[int,Tuple[int,int]]"
                ]
            }
        },
        "empty": {
            "name": "empty",
            "location": 154,
            "return": [
                "Tuple[list[tuple[Union[list,Deque,list[str],dict[str,Union[Any,Any,bool,int,str]],Type,Pattern,str]]]]",
                "str",
                "float"
            ],
            "arguments": {
                "labelme": [
                    "bool",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict"
                ]
            }
        },
        "check_l1_dist": {
            "name": "check_l1_dist",
            "location": 195,
            "return": [
                "bool",
                "Callable",
                "str",
                "Union[IO[str],int]",
                "int",
                "BinaryIO",
                "bytes"
            ],
            "arguments": {
                "a": [
                    "int"
                ],
                "b": [
                    "int"
                ],
                "d": [
                    "int"
                ]
            }
        },
        "get_rectanguloid_subsegment": {
            "name": "get_rectanguloid_subsegment",
            "location": 199,
            "return": [
                "List",
                "str",
                "Callable",
                "torch.FloatTensor",
                "torch.Tensor",
                "Optional[torch.Tensor]"
            ],
            "arguments": {
                "S": [
                    "str",
                    "int",
                    "Type[object]"
                ],
                "c": [
                    "int",
                    "str",
                    "float",
                    "List[int]",
                    "Optional[Union[int,float]]",
                    "None"
                ],
                "max_chunk": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "get_random_shape_pt": {
            "name": "get_random_shape_pt",
            "location": 210,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "shape": [
                    "int",
                    "bool"
                ],
                "side_length": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "get_shape_segment": {
            "name": "get_shape_segment",
            "location": 223,
            "return": [
                "Tuple[Union[str,int,dict[str,Union[int,str]],dict[str,str],list,dict,tuple[Union[Any,str]]]]",
                "str",
                "bool"
            ],
            "arguments": {
                "max_chunk": [
                    "int",
                    "bool"
                ],
                "side_length": [
                    "str",
                    "int",
                    "None",
                    "List[int]"
                ]
            }
        },
        "shift_vector_gen": {
            "name": "shift_vector_gen",
            "location": 242,
            "return": [
                "typing.Generator[tuple[typing.Union[int,int,int]]]"
            ],
            "arguments": {
                "side_length": [
                    "int",
                    "torch.Tensor",
                    "torch.nn.utils.rnn.PackedSequence"
                ]
            }
        },
        "get_two_shape_sparse": {
            "name": "get_two_shape_sparse",
            "location": 275,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "c_sl": [
                    "int"
                ],
                "s_sl": [
                    "int",
                    "torch.Tensor",
                    "None",
                    "Tuple[Union[int,int,int]]",
                    "Optional[int]",
                    "numpy.ndarray",
                    "Tuple[int,int,int]"
                ]
            }
        },
        "get_shape_dir_target": {
            "name": "get_shape_dir_target",
            "location": 310,
            "return": [
                "Callable[[bytes], None]",
                "int",
                "float"
            ],
            "arguments": {
                "viewer_pos": [
                    "bool",
                    "Dict[str,tuple[Union[str,str,Any]]]",
                    "Dict[int,str]",
                    "Dict[str,Tuple[str,str,Any]]",
                    "Dict[str,tuple[Union[str,int,int]]]",
                    "torch.device",
                    "Dict[str,Tuple[str,int,int]]"
                ],
                "dir_vec": [
                    "bool",
                    "Dict[str,tuple[Union[str,str,Any]]]",
                    "Dict[int,str]",
                    "Dict[str,Tuple[str,str,Any]]",
                    "Dict[str,tuple[Union[str,int,int]]]",
                    "torch.device",
                    "Dict[str,Tuple[str,int,int]]"
                ],
                "c_sizes": [
                    "bytes",
                    "List[str]",
                    "Union[None,int]",
                    "str",
                    "bool",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "s_sizes": [
                    "bool",
                    "Dict[str,Tuple[str,str,Any]]",
                    "Dict[int,str]",
                    "Dict[str,tuple[Union[str,str,Any]]]",
                    "Dict[str,Tuple[str,int,int]]",
                    "Dict[str,tuple[Union[str,int,int]]]"
                ],
                "c_sl": [
                    "bool",
                    "float",
                    "numpy.array",
                    "Optional[float]"
                ],
                "max_shift": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "SegmentContextShapeData.__init__": {
            "name": "__init__",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nexamples": [
                    "int",
                    "bool",
                    "float"
                ],
                "context_side_length": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ],
                "seg_side_length": [
                    "int",
                    "bool",
                    "float"
                ],
                "useid": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "SegmentContextShapeData._get_example": {
            "name": "_get_example",
            "location": 259,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "SegmentContextShapeData.__getitem__": {
            "name": "__getitem__",
            "location": 268,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "SegmentContextShapeData.__len__": {
            "name": "__len__",
            "location": 271,
            "return": [
                "str",
                "List[int]",
                "Optional[str]",
                "List[str]",
                "Tuple[int, int]",
                "List[Tuple[int, int]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "SegmentContextShapeDirData.__init__": {
            "name": "__init__",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nexamples": [
                    "int",
                    "bool",
                    "float"
                ],
                "context_side_length": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ],
                "seg_side_length": [
                    "int",
                    "bool",
                    "float"
                ],
                "useid": [
                    "bool",
                    "int",
                    "float"
                ],
                "max_shift": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "ground_type": [
                    "int",
                    "None",
                    "Iterable[bytes]",
                    "str",
                    "bool",
                    "Iterable"
                ]
            }
        },
        "SegmentContextShapeDirData._get_example": {
            "name": "_get_example",
            "location": 348,
            "return": [
                "Dict[Text,]",
                "str",
                "int",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SegmentContextShapeDirData.__getitem__": {
            "name": "__getitem__",
            "location": 371,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "SegmentContextShapeDirData.__len__": {
            "name": "__len__",
            "location": 374,
            "return": [
                "str",
                "List[int]",
                "Optional[str]",
                "List[str]",
                "Tuple[int, int]",
                "List[Tuple[int, int]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/geoscorer/spatial_utils.py": {
        "get_bounds": {
            "name": "get_bounds",
            "location": 22,
            "return": [
                "List[int]",
                "Tuple[Union[int,str]]",
                "int",
                "Type[T]",
                "bool",
                "Tuple"
            ],
            "arguments": {
                "sparse_voxel": [
                    "str",
                    "list",
                    "numpy.ndarray",
                    "List[Dict[str, Any]]",
                    "List[int]",
                    "Union[List[float], List[int]]",
                    "int"
                ]
            }
        },
        "get_side_lengths": {
            "name": "get_side_lengths",
            "location": 42,
            "return": [
                "List",
                "List[str]",
                "Optional[dict]",
                "int",
                "str",
                "Counter"
            ],
            "arguments": {
                "bounds": [
                    "Mapping[str, float]",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "get_bounds_and_sizes": {
            "name": "get_bounds_and_sizes",
            "location": 50,
            "return": [
                "Tuple[Union[str,dict[str,int],list,tuple[Union[Literal,Literal,Literal]]]]",
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "sparse_voxel": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "coord_to_index": {
            "name": "coord_to_index",
            "location": 56,
            "return": [
                "bytes",
                "str",
                "int",
                "IO",
                "List[str]"
            ],
            "arguments": {
                "coord": [
                    "bytes",
                    "List[str]",
                    "str",
                    "int",
                    "IO"
                ],
                "sl": [
                    "int",
                    "bytes",
                    "IO",
                    "List[str]",
                    "str"
                ]
            }
        },
        "index_to_coord": {
            "name": "index_to_coord",
            "location": 64,
            "return": [
                "List[int]",
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "index": [
                    "list",
                    "torch.Tensor",
                    "str",
                    "Dict[str, object]",
                    "bytes",
                    "numpy.ndarray",
                    "int",
                    "List[tuple]"
                ],
                "sl": [
                    "int",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        },
        "shift_sparse_voxel_to_origin": {
            "name": "shift_sparse_voxel_to_origin",
            "location": 78,
            "return": [
                "Tuple[list[tuple[Union[tuple[bool],Text]]]]",
                "Iterable[str]",
                "int",
                "Callable"
            ],
            "arguments": {
                "sparse_voxel": [
                    "str",
                    "List",
                    "int"
                ]
            }
        },
        "densify": {
            "name": "densify",
            "location": 96,
            "return": [
                "Tuple[tuple[int]]",
                "str",
                "bool",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "blocks": [
                    "List",
                    "bool",
                    "float",
                    "int",
                    "Callable",
                    "Exception"
                ],
                "size": [
                    "str",
                    "int",
                    "bool"
                ],
                "center": [
                    "Tuple[int]",
                    "int",
                    "float",
                    "numpy.ndarray",
                    "numpy.array",
                    "torch.Tensor"
                ],
                "useid": [
                    "bool",
                    "float",
                    "List",
                    "int",
                    "Callable",
                    "Exception"
                ]
            }
        },
        "get_dense_array_from_sl": {
            "name": "get_dense_array_from_sl",
            "location": 114,
            "return": [
                "Dict[str,Any]",
                "float",
                "int",
                "frozenset",
                "List[str]",
                "List[int]"
            ],
            "arguments": {
                "sparse_shape": [
                    "int",
                    "bytes",
                    "List[str]",
                    "str"
                ],
                "sl": [
                    "int",
                    "bool",
                    "bytes",
                    "List[Tuple[int,int]]",
                    "numpy.random.RandomState"
                ],
                "useid": [
                    "int",
                    "bytes",
                    "List[str]",
                    "str"
                ]
            }
        },
        "combine_seg_context": {
            "name": "combine_seg_context",
            "location": 125,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "seg": [
                    "torch.Tensor",
                    "dict",
                    "Optional[torch.Tensor]"
                ],
                "context": [
                    "Optional[float]",
                    "bool",
                    "Optional[int]",
                    "float",
                    "str",
                    "int"
                ],
                "seg_shift": [
                    "numpy.ndarray",
                    "float",
                    "Sequence[numpy.ndarray]",
                    "int",
                    "Collection[int]"
                ],
                "seg_mult": [
                    "int",
                    "numpy.ndarray",
                    "Tuple[str,str]",
                    "str",
                    "slice"
                ]
            }
        },
        "convert_sparse_context_seg_to_target_coord_shifted_seg": {
            "name": "convert_sparse_context_seg_to_target_coord_shifted_seg",
            "location": 137,
            "return": [
                "Tuple[list]",
                "torch.Tensor",
                "List[int]",
                "str",
                "Union[int,float]",
                "Union[str,int,float]"
            ],
            "arguments": {
                "context_sparse": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "Literal"
                ],
                "seg_sparse": [
                    "Dict[str,Any]",
                    "int",
                    "str",
                    "bool",
                    "None",
                    "Optional[Dict[str,Any]]"
                ],
                "c_sl": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "Literal"
                ],
                "s_sl": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "Literal"
                ]
            }
        },
        "convert_sparse_context_seg_target_to_example": {
            "name": "convert_sparse_context_seg_target_to_example",
            "location": 143,
            "return": [
                "Dict[Text,]",
                "str",
                "torch.Tensor",
                "List[int]",
                "Optional[str]",
                "Union[int,float]",
                "int"
            ],
            "arguments": {
                "context_sparse": [
                    "int"
                ],
                "shifted_seg_sparse": [
                    "int",
                    "str",
                    "None",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "target_coord": [
                    "str",
                    "Tuple[Union[int,int]]",
                    "int",
                    "torch.Tensor",
                    "Tuple[Union[float,float]]",
                    "Tuple[int,int]",
                    "Tuple[float,float]"
                ],
                "c_sl": [
                    "int",
                    "str",
                    "Union[int,str]"
                ],
                "s_sl": [
                    "int",
                    "str",
                    "None",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "useid": [
                    "int",
                    "float",
                    "None",
                    "bool",
                    "Optional[float]"
                ],
                "schem_sparse": [
                    "int",
                    "None"
                ]
            }
        },
        "convert_sparse_context_seg_to_example": {
            "name": "convert_sparse_context_seg_to_example",
            "location": 160,
            "return": [
                "Dict[Text,]",
                "torch.Tensor",
                "List[int]",
                "str",
                "Union[int,float]",
                "Union[str,int,float]"
            ],
            "arguments": {
                "context_sparse": [
                    "int",
                    "float"
                ],
                "seg_sparse": [
                    "Dict[str,Any]",
                    "int",
                    "str",
                    "bool",
                    "None",
                    "Optional[Dict[str,Any]]"
                ],
                "c_sl": [
                    "int",
                    "str"
                ],
                "s_sl": [
                    "str",
                    "int",
                    "Dict[str,str]",
                    "None",
                    "bool",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "useid": [
                    "int",
                    "str",
                    "Tuple[Union[int,int]]",
                    "numpy.ndarray",
                    "Tuple[int,int]"
                ],
                "schem_sparse": [
                    "int",
                    "float",
                    "None"
                ]
            }
        },
        "add_ground_to_context": {
            "name": "add_ground_to_context",
            "location": 179,
            "return": [
                "None",
                "Dict[str,Any]",
                "Type",
                "Set[VT]",
                "Tuple"
            ],
            "arguments": {
                "context_sparse": [
                    "str",
                    "Iterable[Any]"
                ],
                "target_coord": [
                    "Tuple",
                    "int",
                    "bytes",
                    "str",
                    "Optional[str]"
                ],
                "flat": [
                    "bool",
                    "int",
                    "Tuple[bytes,bytes]"
                ],
                "random_height": [
                    "bool",
                    "int",
                    "str",
                    "List[str]",
                    "Type"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/geoscorer/training_utils.py": {
        "pretty_log": {
            "name": "pretty_log",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "log_string": [
                    "str",
                    "bool"
                ]
            }
        },
        "prepare_variables": {
            "name": "prepare_variables",
            "location": 36,
            "return": [
                "Tuple[float, float]",
                "mtg_ssm.scryfall.models.ScryObject"
            ],
            "arguments": {
                "b": [
                    "float",
                    "int",
                    "bytes"
                ],
                "opts": [
                    "str",
                    "bool"
                ]
            }
        },
        "set_modules": {
            "name": "set_modules",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "tms": [
                    "str",
                    "int",
                    "bool"
                ],
                "train": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "multitensor_collate_fxn": {
            "name": "multitensor_collate_fxn",
            "location": 53,
            "return": [
                "Dict",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "x": [
                    "Dict[str, Set[str]]"
                ]
            }
        },
        "get_dataloader": {
            "name": "get_dataloader",
            "location": 71,
            "return": [
                "int",
                "str",
                "bool",
                "dict",
                "djmoney.contrib.exchange.models.Rate"
            ],
            "arguments": {
                "dataset": [
                    "str",
                    "int",
                    "Iterable[str]"
                ],
                "opts": [
                    "str",
                    "int",
                    "Iterable[str]"
                ],
                "collate_fxn": [
                    "str",
                    "int",
                    "Iterable[str]"
                ]
            }
        },
        "setup_dataset_and_loader": {
            "name": "setup_dataset_and_loader",
            "location": 87,
            "return": [
                "Tuple",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "opts": [
                    "dict",
                    "jumeaux.models.Report",
                    "Dict[str, Union[Any, str]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_scores_from_datapoint": {
            "name": "get_scores_from_datapoint",
            "location": 111,
            "return": [
                "Tuple[Union[float,Type]]",
                "str",
                "torch.Tensor",
                "bytes",
                "int",
                "salon.models.Stylist"
            ],
            "arguments": {
                "tms": [
                    "str",
                    "torch.utils.data.DataLoader",
                    "int"
                ],
                "batch": [
                    "int",
                    "list"
                ],
                "opts": [
                    "List[list[int]]",
                    "torch.Tensor",
                    "torch.FloatTensor",
                    "List[List[int]]"
                ]
            }
        },
        "check_and_print_opts": {
            "name": "check_and_print_opts",
            "location": 134,
            "return": [
                "bool"
            ],
            "arguments": {
                "curr_opts": [
                    "Dict[str,Any]",
                    "Dict[str,float]",
                    "Dict",
                    "Dict[str,str]",
                    "Mapping[str,Mapping[str,Any]]",
                    "Dict[str,dict[str,float]]",
                    "dep_check.models.GlobalDependencies",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Dict[str,float]]"
                ],
                "old_opts": [
                    "numpy.ndarray",
                    "float"
                ]
            }
        },
        "load_context_segment_checkpoint": {
            "name": "load_context_segment_checkpoint",
            "location": 155,
            "return": [
                "Dict",
                "Optional[str]",
                "str",
                "app.models.GameMember",
                "app.models.course.Course",
                "List"
            ],
            "arguments": {
                "checkpoint_path": [
                    "str",
                    "bool",
                    "Dict"
                ],
                "opts": [
                    "bool",
                    "torch.optim.Optimizer",
                    "Optional[float]",
                    "List[int]",
                    "str"
                ],
                "backup": [
                    "bool",
                    "str",
                    "Iterable[str]"
                ],
                "verbose": [
                    "bool",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "get_context_segment_trainer_modules": {
            "name": "get_context_segment_trainer_modules",
            "location": 197,
            "return": [
                "bool",
                "Optional[str]",
                "List[dict]",
                "str",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "opts": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None"
                ],
                "checkpoint_path": [
                    "str",
                    "Dict[str,Any]",
                    "None",
                    "List[int]"
                ],
                "backup": [
                    "bool",
                    "str",
                    "Dict[str,Any]",
                    "List[int]"
                ],
                "verbose": [
                    "bool",
                    "str",
                    "Dict[str,Any]",
                    "List[int]"
                ]
            }
        },
        "save_checkpoint": {
            "name": "save_checkpoint",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "tms": [
                    "str",
                    "Dict",
                    "bool",
                    "int"
                ],
                "metadata": [
                    "str",
                    "List[int]",
                    "Optional[str]",
                    "None"
                ],
                "opts": [
                    "Dict",
                    "Dict[str,str]",
                    "str",
                    "Optional[int]",
                    "Dict[str,Any]",
                    "Type"
                ],
                "path": [
                    "str",
                    "List[int]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "get_train_parser": {
            "name": "get_train_parser",
            "location": 234,
            "return": [
                "argparse._SubParsersAction"
            ],
            "arguments": {}
        },
        "parse_dataset_ratios": {
            "name": "parse_dataset_ratios",
            "location": 307,
            "return": [
                "Dict[str,float]",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "opts": [
                    "str",
                    "List",
                    "mtg_ssm.scryfall.models.ScryCard"
                ]
            }
        },
        "get_dataloader.init_fn": {
            "name": "init_fn",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "wid": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "argparse.Namespace",
                    "bool"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/geoscorer/train_spatial_emb.py": {
        "train_epoch": {
            "name": "train_epoch",
            "location": 10,
            "return": [
                "Tuple[Union[float,int]]",
                "int",
                "str",
                "Sequence[Sequence[str]]"
            ],
            "arguments": {
                "tms": [
                    "str",
                    "float",
                    "Exception"
                ],
                "DL": [
                    "List[int]",
                    "List[str]",
                    "list",
                    "int"
                ],
                "opts": [
                    "Any",
                    "List[str]",
                    "Exception"
                ]
            }
        },
        "run_visualization": {
            "name": "run_visualization",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "vis": [
                    "bool"
                ],
                "tms": [
                    "bool",
                    "float",
                    "Optional[str]",
                    "str",
                    "None",
                    "int"
                ],
                "opts": [
                    "bool",
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "Set[str]",
                    "None",
                    "int",
                    "Optional[int]"
                ],
                "checkpoint_path": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "num_examples": [
                    "int",
                    "List[str]"
                ],
                "tsleep": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "float"
                ],
                "loadpath": [
                    "bool",
                    "Optional[Set[int]]",
                    "Optional[str]",
                    "str"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/geoscorer/visualization_utils.py": {
        "GeoscorerDatasetVisualizer.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "GeoscorerDatasetVisualizer.set_model": {
            "name": "set_model",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Union[Contributor,Coverage]",
                    "float",
                    "Optional[float]",
                    "None"
                ],
                "opts": [
                    "Union[Contributor,Coverage]",
                    "None",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "GeoscorerDatasetVisualizer.visualize": {
            "name": "visualize",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "use_model": [
                    "bool",
                    "int",
                    "slice",
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/instance_segmentation/data_loaders.py": {
        "get_rectanguloid_mask": {
            "name": "get_rectanguloid_mask",
            "location": 12,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "y": [
                    "float",
                    "Tuple",
                    "List[cirq.Qid]",
                    "List",
                    "torch.Tensor"
                ],
                "fat": [
                    "int",
                    "float",
                    "str",
                    "Iterable[list]"
                ]
            }
        },
        "underdirt": {
            "name": "underdirt",
            "location": 22,
            "return": [
                "Tuple[None]",
                "bool",
                "Optional[Any]",
                "int"
            ],
            "arguments": {
                "schematic": [
                    "int",
                    "numpy.ndarray",
                    "Optional[Union[int, slice]]",
                    "Dict[str, str]"
                ],
                "labels": [
                    "None",
                    "raiden.utils.List[raiden.utils.Keccak256]",
                    "numpy.ndarray",
                    "torch.Tensor",
                    "float",
                    "Dict[str,torch.LongTensor]",
                    "Optional[float]"
                ],
                "max_shift": [
                    "int",
                    "Tuple[int,int]",
                    "List[str]",
                    "bool"
                ],
                "nothing_id": [
                    "int",
                    "Sequence[Tuple[str,int]]",
                    "Set",
                    "decksite.data.models.person.Person",
                    "Dict"
                ]
            }
        },
        "flip_rotate": {
            "name": "flip_rotate",
            "location": 40,
            "return": [
                "Tuple[Optional[int]]",
                "int",
                "List[Tuple[str,str]]"
            ],
            "arguments": {
                "c": [
                    "int",
                    "vimiv.utils.trie.Trie",
                    "IO",
                    "tracim.models.data.Content",
                    "str"
                ],
                "l": [
                    "None",
                    "Optional[numpy.ndarray]",
                    "Optional[bytes]",
                    "Type[T]",
                    "List[allennlp.data.tokenizers.token.Token]",
                    "Sequence[str]",
                    "int"
                ],
                "idx": [
                    "int",
                    "None",
                    "Optional[int]",
                    "str",
                    "Optional[str]",
                    "Tuple[Union[int,int]]",
                    "Optional[Tuple[int,int]]",
                    "Callable[str,int]",
                    "Callable[[str],int]",
                    "raiden.utils.Secret"
                ]
            }
        },
        "pad_to_sidelength": {
            "name": "pad_to_sidelength",
            "location": 75,
            "return": [
                "Tuple[Union[list,dict[str,dict[str,Any]],int,str,dict[str,dict],None,list[int]]]",
                "str",
                "bool",
                "List[Dict]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "schematic": [
                    "List[str]",
                    "int",
                    "Optional[Any]",
                    "List[\"Issue\"]",
                    "numpy.ndarray",
                    "list",
                    "bytes"
                ],
                "labels": [
                    "int",
                    "None",
                    "qutebrowser.utils.usertypes.KeyMode"
                ],
                "nothing_id": [
                    "int",
                    "Optional[Sequence[int]]"
                ],
                "sidelength": [
                    "int",
                    "Union[List[str],List[Any]]",
                    "str"
                ]
            }
        },
        "fit_in_sidelength": {
            "name": "fit_in_sidelength",
            "location": 95,
            "return": [
                "Tuple[Optional[tuple[int]]]",
                "Sequence[str]",
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "schematic": [
                    "int",
                    "T",
                    "str",
                    "List[str]",
                    "None",
                    "raiden.utils.Secret",
                    "Optional[List[str]]"
                ],
                "center_on_labels": [
                    "bool",
                    "int",
                    "List[Dict[str,Any]]",
                    "List",
                    "List[str]",
                    "Dict[str,allennlp.data.token_indexers.TokenIndexer]",
                    "str"
                ],
                "labels": [
                    "None",
                    "str",
                    "T",
                    "int",
                    "List[str]",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "raiden.utils.Dict[str,raiden.utils.Any]",
                    "raiden.utils.Secret"
                ],
                "nothing_id": [
                    "int",
                    "T",
                    "str",
                    "float",
                    "Optional[List[str]]",
                    "raiden.utils.Secret",
                    "Optional[str]"
                ],
                "sl": [
                    "int",
                    "T",
                    "str",
                    "raiden.utils.Secret",
                    "float"
                ],
                "max_shift": [
                    "int",
                    "numpy.ndarray",
                    "Union[int,str]",
                    "List"
                ]
            }
        },
        "make_example_from_raw": {
            "name": "make_example_from_raw",
            "location": 121,
            "return": [
                "Tuple[int]",
                "str",
                "float"
            ],
            "arguments": {
                "schematic": [
                    "List[int]",
                    "torch.Tensor",
                    "Dict[str,torch.LongTensor]",
                    "List[list[allennlp.data.fields.production_rule_field.ProductionRule]]",
                    "int",
                    "List[List[allennlp.data.fields.production_rule_field.ProductionRule]]"
                ],
                "labels": [
                    "Optional[float]",
                    "None",
                    "List[int]",
                    "int",
                    "float",
                    "torch.Tensor",
                    "List[List[allennlp.data.fields.production_rule_field.ProductionRule]]",
                    "List[list[allennlp.data.fields.production_rule_field.ProductionRule]]"
                ],
                "center_on_labels": [
                    "bool",
                    "torch.Tensor",
                    "List[int]",
                    "List[List[allennlp.data.fields.production_rule_field.ProductionRule]]",
                    "Dict[str,torch.LongTensor]",
                    "int"
                ],
                "augment": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, int]",
                    "Dict[str, str]",
                    "Counter"
                ],
                "nothing_id": [
                    "int",
                    "Optional[float]",
                    "List[int]",
                    "torch.Tensor",
                    "List[List[allennlp.data.fields.production_rule_field.ProductionRule]]"
                ],
                "sl": [
                    "int",
                    "List",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "InstSegData.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_path": [
                    "str",
                    "int"
                ],
                "nexamples": [
                    "int",
                    "str",
                    "bytes"
                ],
                "sidelength": [
                    "int",
                    "bool",
                    "float",
                    "Optional[List[str]]",
                    "Optional[str]"
                ],
                "classes": [
                    "bool",
                    "str",
                    "None"
                ],
                "augment": [
                    "Dict",
                    "bool",
                    "float",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "int"
                ],
                "min_inst_size": [
                    "int",
                    "bool",
                    "str"
                ],
                "mask_fat": [
                    "int",
                    "bool",
                    "float",
                    "Optional[List[str]]",
                    "Optional[str]"
                ],
                "useid": [
                    "bool",
                    "float",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "InstSegData.__getitem__": {
            "name": "__getitem__",
            "location": 168,
            "return": [
                "str",
                "Tuple"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "bool",
                    "Tuple"
                ]
            }
        },
        "InstSegData.__len__": {
            "name": "__len__",
            "location": 187,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/instance_segmentation/instseg_models.py": {
        "conv3x3x3": {
            "name": "conv3x3x3",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "in_planes": [
                    "int",
                    "Callable[[int],bool]",
                    "Callable[int,bool]",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ],
                "out_planes": [
                    "int",
                    "Callable[[int],bool]",
                    "Callable[int,bool]",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ],
                "stride": [
                    "int",
                    "Callable[[int],bool]",
                    "Tuple[float,float]"
                ],
                "bias": [
                    "bool",
                    "int",
                    "Callable[[int],bool]",
                    "Tuple[float,float]"
                ]
            }
        },
        "conv3x3x3up": {
            "name": "conv3x3x3up",
            "location": 16,
            "return": [
                "numpy.ndarray",
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "in_planes": [
                    "int",
                    "str",
                    "bool"
                ],
                "out_planes": [
                    "int",
                    "str",
                    "bool"
                ],
                "bias": [
                    "bool",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "convbn": {
            "name": "convbn",
            "location": 23,
            "return": [
                "int"
            ],
            "arguments": {
                "in_planes": [
                    "Tuple[int,int,int]",
                    "str",
                    "Tuple[Union[int,int,int]]",
                    "int"
                ],
                "out_planes": [
                    "Tuple[int,int,int]",
                    "str",
                    "Tuple[Union[int,int,int]]",
                    "int"
                ],
                "stride": [
                    "int",
                    "Tuple[int,int,int]",
                    "str"
                ],
                "bias": [
                    "bool",
                    "Tuple[int,int,int]",
                    "str",
                    "int"
                ]
            }
        },
        "convbnup": {
            "name": "convbnup",
            "location": 31,
            "return": [
                "int",
                "Optional[numpy.ndarray]"
            ],
            "arguments": {
                "in_planes": [
                    "bool",
                    "float",
                    "Tuple[int,int,int]",
                    "Tuple[Union[int,int,int]]"
                ],
                "out_planes": [
                    "bool",
                    "float",
                    "Tuple[int,int,int]",
                    "Tuple[Union[int,int,int]]"
                ],
                "bias": [
                    "bool",
                    "float",
                    "Tuple[int,int,int]"
                ]
            }
        },
        "InstSegNet.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "opts": [
                    "MutableMapping",
                    "str",
                    "Dict",
                    "Sequence[str]",
                    "float",
                    "numpy.ndarray",
                    "Iterable[bytes]"
                ]
            }
        },
        "InstSegNet.forward": {
            "name": "forward",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "str",
                    "bytes",
                    "numpy.ndarray",
                    "List",
                    "T"
                ]
            }
        },
        "InstSegNet.save": {
            "name": "save",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "BinaryIO"
                ]
            }
        },
        "InstSegNet.load": {
            "name": "load",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "Dict",
                    "bytes",
                    "Callable",
                    "Dict[str,Any]"
                ]
            }
        },
        "FlatInstSegNet.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "opts": [
                    "Callable",
                    "bytes",
                    "Optional[Any]",
                    "Any",
                    "None"
                ]
            }
        },
        "FlatInstSegNet._build": {
            "name": "_build",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlatInstSegNet.forward": {
            "name": "forward",
            "location": 104,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "numpy.ndarray",
                    "torch.Tensor"
                ],
                "seed_oh": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "str",
                    "T"
                ]
            }
        },
        "MsInstSegNet.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "opts": [
                    "Callable"
                ]
            }
        },
        "MsInstSegNet._build": {
            "name": "_build",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MsInstSegNet.forward": {
            "name": "forward",
            "location": 173,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "numpy.ndarray",
                    "torch.Tensor"
                ],
                "seed_oh": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "nevergrad.common.Callable[[numpy.ndarray],numpy.ndarray]"
                ]
            }
        },
        "InstSegWrapper.__init__": {
            "name": "__init__",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "int",
                    "float",
                    "torch.nn.Module"
                ],
                "threshold": [
                    "float",
                    "bool",
                    "numpy.ndarray",
                    "int"
                ],
                "blocks_only": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "int"
                ],
                "cuda": [
                    "bool",
                    "int",
                    "Dict[str,int]"
                ]
            }
        },
        "InstSegWrapper.segment_object": {
            "name": "segment_object",
            "location": 228,
            "return": [
                "Dict[tuple,]",
                "Optional[int]",
                "Dict[str,int]",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "blocks": []
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/instance_segmentation/train_instance_segmentation.py": {
        "print_slices": {
            "name": "print_slices",
            "location": 20,
            "return": [],
            "arguments": {
                "model": [
                    "Union[tensorflow.keras.models.Model, 'keras.models.Model']",
                    "int",
                    "Iterable[T]",
                    "slice",
                    "bool"
                ],
                "H": [
                    "int",
                    "float",
                    "list",
                    "List[int]",
                    "dict"
                ],
                "r": [
                    "int",
                    "float",
                    "list",
                    "List[int]",
                    "dict"
                ],
                "c": [
                    "int",
                    "float",
                    "list",
                    "List[int]",
                    "dict"
                ],
                "n": [
                    "Any",
                    "int",
                    "dict",
                    "Dict[str, torch.Tensor]"
                ],
                "data": [
                    "Any",
                    "int",
                    "dict",
                    "Dict[str, torch.Tensor]"
                ]
            }
        },
        "blocks_from_data": {
            "name": "blocks_from_data",
            "location": 30,
            "return": [
                "int"
            ],
            "arguments": {
                "data": [
                    "T",
                    "str",
                    "int",
                    "Optional[bytes]"
                ],
                "n": [
                    "T",
                    "str",
                    "int",
                    "Optional[bytes]"
                ]
            }
        },
        "watcher_output": {
            "name": "watcher_output",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "S": [
                    "str",
                    "int",
                    "Mapping[str, Any]",
                    "Callable[[str], Any]",
                    "Union[bytes, str]"
                ],
                "n": [
                    "int",
                    "bytes",
                    "Optional[dict]",
                    "torch.Tensor"
                ],
                "data": [
                    "int",
                    "bytes",
                    "Optional[dict]",
                    "torch.Tensor"
                ]
            }
        },
        "validate": {
            "name": "validate",
            "location": 53,
            "return": [],
            "arguments": {
                "model": [
                    "bool",
                    "str"
                ],
                "validation_data": [
                    "bool",
                    "str"
                ]
            }
        },
        "train_epoch": {
            "name": "train_epoch",
            "location": 57,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "model": [
                    "Set[int]",
                    "int"
                ],
                "DL": [
                    "allennlp.models.model.Model",
                    "bool",
                    "str"
                ],
                "loss": [
                    "torch.Tensor",
                    "Callable[[int], None]",
                    "Sequence[T]",
                    "float"
                ],
                "optimizer": [
                    "Union['Contributor', 'Coverage']",
                    "Optional[float]",
                    "allennlp.models.model.Model",
                    "speedwagon.models.TabsModel"
                ],
                "args": []
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/modify/build_static_dataset.py": {},
    "craftassist-master/python/craftassist/voxel_models/modify/build_sweep_scripts.py": {},
    "craftassist-master/python/craftassist/voxel_models/modify/conv_models.py": {
        "model_filename_from_opts": {
            "name": "model_filename_from_opts",
            "location": 15,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "opts": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "savedir": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Optional[int]"
                ],
                "uid": [
                    "Optional[str]",
                    "Callable",
                    "Optional[Dict[str, Any]]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "get_colors": {
            "name": "get_colors",
            "location": 41,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "build_rgba_embed": {
            "name": "build_rgba_embed",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "max_meta": [
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "color_io": [
                    "bool"
                ]
            }
        },
        "fake_embedding_fwd": {
            "name": "fake_embedding_fwd",
            "location": 79,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "numpy.ndarray",
                    "torch.Tensor"
                ],
                "embedding_weights": [
                    "numpy.ndarray",
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "compressed_onehot_distribution": {
            "name": "compressed_onehot_distribution",
            "location": 90,
            "return": [
                "numpy.ndarray",
                "int",
                "str",
                "Dict[str, Any]",
                "List[int]",
                "torch.Tensor"
            ],
            "arguments": {
                "x": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "float",
                    "List[float]"
                ],
                "allowed_idxs": [],
                "pool": [
                    "int",
                    "float",
                    "str",
                    "dict",
                    "Set[str]"
                ]
            }
        },
        "color_hash": {
            "name": "color_hash",
            "location": 109,
            "return": [
                "bool",
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "x": [
                    "numpy.ndarray",
                    "int",
                    "str",
                    "Callable[[numpy.ndarray], numpy.ndarray]"
                ],
                "nbins": [
                    "numpy.ndarray",
                    "int",
                    "str",
                    "Callable[[numpy.ndarray], numpy.ndarray]"
                ]
            }
        },
        "ConvNLL.__init__": {
            "name": "__init__",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "max_meta": [
                    "int",
                    "str"
                ],
                "subsample_zeros": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ConvNLL.cuda": {
            "name": "cuda",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConvNLL.forward": {
            "name": "forward",
            "location": 129,
            "return": [
                "str",
                "DefaultDict[int, List[Any]]",
                "OrderedDict"
            ],
            "arguments": {
                "self": [],
                "gold": [
                    "int"
                ],
                "scores": [
                    "torch.Tensor",
                    "str",
                    "int"
                ],
                "nbins": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ConvDistributionMatch.__init__": {
            "name": "__init__",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "embedding": [
                    "int",
                    "str",
                    "float"
                ],
                "pool": [
                    "int",
                    "bool",
                    "float"
                ],
                "subsample_zeros": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ConvDistributionMatch.forward": {
            "name": "forward",
            "location": 163,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "gold": [
                    "bool",
                    "Tuple[int, int, int]",
                    "bytes",
                    "Dict[str, Any]"
                ],
                "z": [
                    "AsyncIterator"
                ],
                "allowed_idxs": [
                    "bool",
                    "Tuple[int, int, int]",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "SimpleWordEmbedder.__init__": {
            "name": "__init__",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "opts": [
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "SimpleWordEmbedder.forward": {
            "name": "forward",
            "location": 211,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "words": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "SimpleBase.__init__": {
            "name": "__init__",
            "location": 216,
            "return": [],
            "arguments": {
                "self": [],
                "opts": [
                    "str",
                    "bool",
                    "Union[str, IO[bytes]]"
                ],
                "filepath": [
                    "str",
                    "bool"
                ]
            }
        },
        "SimpleBase._build": {
            "name": "_build",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleBase.save": {
            "name": "save",
            "location": 242,
            "return": [],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "BinaryIO"
                ]
            }
        },
        "SimpleBase.load": {
            "name": "load",
            "location": 251,
            "return": [],
            "arguments": {
                "self": [],
                "filepath": [
                    "dict",
                    "bytes",
                    "Callable",
                    "Dict[str, Any]"
                ]
            }
        },
        "SimpleConv.__init__": {
            "name": "__init__",
            "location": 262,
            "return": [],
            "arguments": {
                "self": [],
                "opts": [
                    "str",
                    "bool",
                    "Dict[str, Callable]",
                    "Dict[str, Any]"
                ],
                "pool": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "SimpleConv._build": {
            "name": "_build",
            "location": 266,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleConv.forward": {
            "name": "forward",
            "location": 314,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "blocks_array": [
                    "int",
                    "str"
                ],
                "words": [
                    "bool",
                    "numpy.ndarray",
                    "List[int]"
                ],
                "lvars": [
                    "int",
                    "str"
                ]
            }
        },
        "AE.__init__": {
            "name": "__init__",
            "location": 342,
            "return": [],
            "arguments": {
                "self": [],
                "opts": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "filepath": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "AE._build": {
            "name": "_build",
            "location": 345,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AE.forward": {
            "name": "forward",
            "location": 397,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "blocks_array": [
                    "int",
                    "str"
                ]
            }
        },
        "ConvGenerator.__init__": {
            "name": "__init__",
            "location": 416,
            "return": [],
            "arguments": {
                "self": [],
                "opts": [
                    "float",
                    "Dict[str, Any]"
                ]
            }
        },
        "ConvGenerator.forward": {
            "name": "forward",
            "location": 447,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "z": [
                    "str",
                    "torch.Tensor",
                    "Dict[str, float]",
                    "slice"
                ],
                "c": [
                    "bool",
                    "list",
                    "List[str]",
                    "Optional",
                    "int"
                ]
            }
        },
        "ConvDiscriminator.__init__": {
            "name": "__init__",
            "location": 461,
            "return": [],
            "arguments": {
                "self": [],
                "opts": [
                    "int",
                    "Optional[int]",
                    "bytes",
                    "numpy.ndarray",
                    "dict"
                ]
            }
        },
        "ConvDiscriminator.forward": {
            "name": "forward",
            "location": 490,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "z": [
                    "numpy.ndarray",
                    "Dict[str, torch.Tensor]",
                    "torch.Tensor",
                    "os.stat_result"
                ],
                "c": [
                    "bool",
                    "list",
                    "List[str]",
                    "Optional",
                    "int"
                ]
            }
        },
        "GAN.__init__": {
            "name": "__init__",
            "location": 499,
            "return": [],
            "arguments": {
                "self": [],
                "opts": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "GAN._build": {
            "name": "_build",
            "location": 502,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GAN.forward": {
            "name": "forward",
            "location": 506,
            "return": [
                "dict",
                "Dict[str, Any]",
                "List[Dict[str, Any]]",
                "OrderedDict[str, Any]",
                "Dict[str, numpy.ndarray]",
                "Dict[str, int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int"
                ],
                "mode": [
                    "str",
                    "torch.Tensor",
                    "bool",
                    "Callable",
                    "T"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/modify/encode_many.py": {},
    "craftassist-master/python/craftassist/voxel_models/modify/gan_trainer.py": {
        "toggle_grad": {
            "name": "toggle_grad",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "Union['Contributor', 'Coverage']",
                    "Optional[float]"
                ],
                "requires_grad": [
                    "Union[Contributor,Coverage]",
                    "float",
                    "Optional[float]",
                    "None"
                ]
            }
        },
        "compute_grad2": {
            "name": "compute_grad2",
            "location": 129,
            "return": [
                "int",
                "List",
                "Callable",
                "str"
            ],
            "arguments": {
                "d_out": [
                    "float",
                    "List[int]",
                    "str",
                    "int"
                ],
                "x_in": [
                    "float",
                    "List[int]",
                    "List[float]",
                    "bool"
                ]
            }
        },
        "update_average": {
            "name": "update_average",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "model_tgt": [
                    "str",
                    "torch.LongTensor",
                    "List[str]",
                    "Sequence[Tuple[str, Any]]",
                    "Optional[torch.ByteTensor]",
                    "Tuple[type]"
                ],
                "model_src": [
                    "str",
                    "Callable",
                    "Dict[str, Any]"
                ],
                "beta": [
                    "int",
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Trainer.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "generator": [
                    "bool",
                    "int",
                    "Callable",
                    "str",
                    "Hashable",
                    "Optional[str]",
                    "None"
                ],
                "discriminator": [
                    "bool",
                    "int",
                    "Callable",
                    "str",
                    "Hashable",
                    "Optional[str]",
                    "None"
                ],
                "g_optimizer": [
                    "bool",
                    "int",
                    "Callable",
                    "str",
                    "Hashable",
                    "Optional[str]",
                    "None"
                ],
                "d_optimizer": [
                    "bool",
                    "int",
                    "Callable",
                    "str",
                    "Hashable",
                    "Optional[str]",
                    "None"
                ],
                "gan_type": [
                    "bool",
                    "str",
                    "int"
                ],
                "reg_type": [
                    "bool",
                    "str",
                    "int"
                ],
                "reg_param": [
                    "bool",
                    "int",
                    "Callable",
                    "str",
                    "Hashable",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Trainer.generator_trainstep": {
            "name": "generator_trainstep",
            "location": 27,
            "return": [
                "list",
                "List[T]",
                "List[float]",
                "int"
            ],
            "arguments": {
                "self": [],
                "y": [
                    "int",
                    "float"
                ],
                "z": [
                    "Iterable[List[T]]",
                    "bool",
                    "Iterable[list[T]]",
                    "Iterable[T]"
                ]
            }
        },
        "Trainer.discriminator_trainstep": {
            "name": "discriminator_trainstep",
            "location": 44,
            "return": [
                "Tuple",
                "bool",
                "int",
                "float",
                "Optional[bool]",
                "str"
            ],
            "arguments": {
                "self": [],
                "x_real": [
                    "str",
                    "Optional[List[str]]"
                ],
                "y": [
                    "int",
                    "float",
                    "torch.Tensor"
                ],
                "z": [
                    "int",
                    "List[str]",
                    "str",
                    "float"
                ]
            }
        },
        "Trainer.compute_loss": {
            "name": "compute_loss",
            "location": 98,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "d_out": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ],
                "target": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "Trainer.wgan_gp_reg": {
            "name": "wgan_gp_reg",
            "location": 110,
            "return": [
                "int",
                "str",
                "Callable",
                "Tuple[Union[Any,Any]]",
                "Pattern"
            ],
            "arguments": {
                "self": [],
                "x_real": [
                    "int",
                    "Sequence[float]",
                    "str",
                    "float"
                ],
                "x_fake": [
                    "int",
                    "Sequence[float]",
                    "str",
                    "float"
                ],
                "y": [
                    "torch.Tensor",
                    "int",
                    "float"
                ],
                "center": [
                    "float",
                    "int",
                    "torch.Tensor"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/modify/shape_transform_dataloader.py": {
        "rand": {
            "name": "rand",
            "location": 23,
            "return": [
                "utils.Node",
                "raiden.utils.Tuple[int, int]",
                "bytes",
                "int",
                "str",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "numpy.ndarray",
                "torch.FloatTensor"
            ],
            "arguments": {}
        },
        "thicker": {
            "name": "thicker",
            "location": 27,
            "return": [
                "T",
                "\"PerceptionGraphPattern\"",
                "Dict[str, numpy.ndarray]",
                "List[str]"
            ],
            "arguments": {
                "schematic": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "scale": {
            "name": "scale",
            "location": 42,
            "return": [
                "T",
                "\"PerceptionGraphPattern\"",
                "Dict[str, numpy.ndarray]",
                "List[str]"
            ],
            "arguments": {
                "schematic": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "rotate": {
            "name": "rotate",
            "location": 88,
            "return": [
                "T",
                "\"PerceptionGraphPattern\"",
                "Dict[str, numpy.ndarray]",
                "List[str]"
            ],
            "arguments": {
                "schematic": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "replace_by_block": {
            "name": "replace_by_block",
            "location": 102,
            "return": [
                "Sequence['cirq.Qid']",
                "str",
                "T"
            ],
            "arguments": {
                "schematic": [
                    "bool",
                    "Tuple[str]",
                    "Sequence['cirq.Qid']",
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "replace_by_halfspace": {
            "name": "replace_by_halfspace",
            "location": 139,
            "return": [
                "T",
                "\"PerceptionGraphPattern\"",
                "Dict[str, numpy.ndarray]",
                "List[str]"
            ],
            "arguments": {
                "schematic": [
                    "Union[numpy.ndarray, numpy.void]",
                    "numpy.ndarray",
                    "float",
                    "List[float]"
                ]
            }
        },
        "fill": {
            "name": "fill",
            "location": 183,
            "return": [
                "T",
                "\"PerceptionGraphPattern\"",
                "Dict[str, numpy.ndarray]",
                "List[str]"
            ],
            "arguments": {
                "schematic": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "get_schematic": {
            "name": "get_schematic",
            "location": 198,
            "return": [
                "str",
                "MutableMapping[str, Any]",
                "Iterable[int]"
            ],
            "arguments": {}
        },
        "ModifyData.__init__": {
            "name": "__init__",
            "location": 211,
            "return": [],
            "arguments": {
                "self": [],
                "opts": [
                    "bool",
                    "int"
                ],
                "dictionary": [
                    "Sequence[str]",
                    "Iterable[str]",
                    "str",
                    "AbstractSet[str]",
                    "list"
                ]
            }
        },
        "ModifyData.print_text": {
            "name": "print_text",
            "location": 242,
            "return": [
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "word_tensor": [
                    "int",
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Sequence['cirq.Qid']"
                ]
            }
        },
        "ModifyData.generate_task": {
            "name": "generate_task",
            "location": 254,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModifyData.maybe_words_to_tensor": {
            "name": "maybe_words_to_tensor",
            "location": 265,
            "return": [
                "float",
                "int",
                "Union[bool, None]",
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "ModifyData.maybe_hash_idm": {
            "name": "maybe_hash_idm",
            "location": 275,
            "return": [
                "int",
                "str",
                "List[int]",
                "numpy.ndarray",
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "str"
                ]
            }
        },
        "ModifyData.__getitem__": {
            "name": "__getitem__",
            "location": 281,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str"
                ]
            }
        },
        "ModifyData._generate_item": {
            "name": "_generate_item",
            "location": 290,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "dict",
                    "List[int]",
                    "Optional[dict]",
                    "str",
                    "Optional[str]",
                    "Dict[str, List]",
                    "Tuple[List, List]"
                ]
            }
        },
        "ModifyData.__len__": {
            "name": "__len__",
            "location": 315,
            "return": [
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "sample_and_draw": {
            "name": "sample_and_draw",
            "location": 362,
            "return": [
                "str",
                "List[str]",
                "Exception"
            ],
            "arguments": {}
        }
    },
    "craftassist-master/python/craftassist/voxel_models/modify/st_templates.py": {
        "build_lf": {
            "name": "build_lf",
            "location": 41,
            "return": [
                "bool",
                "Dict[Text,Union[Text,list[dict[Text,Union[Text,dict[str,Any],dict,list[dict[str,Any]],None,bool,dict[int,dict[str,str]]]]]]]"
            ],
            "arguments": {
                "ref_obj_dict": [
                    "bool",
                    "Dict[int,Dict[str,str]]",
                    "Dict[int,dict[str,str]]"
                ],
                "modify_dict": [
                    "Dict[str,Any]",
                    "Dict",
                    "bool",
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "RateLimitResult"
                ]
            }
        },
        "replace_with_span": {
            "name": "replace_with_span",
            "location": 49,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "d": [
                    "str",
                    "bytes",
                    "dict",
                    "VT",
                    "List[str]",
                    "list",
                    "Dict[str, str]"
                ],
                "split_text": [
                    "str",
                    "Iterable[str]",
                    "float"
                ]
            }
        },
        "get_target_object": {
            "name": "get_target_object",
            "location": 68,
            "return": [
                "Tuple[Union[dict[Text,dict[Text,str]],Text]]",
                "str",
                "Callable[[KT],VT]",
                "Sequence"
            ],
            "arguments": {}
        },
        "get_target_location": {
            "name": "get_target_location",
            "location": 78,
            "return": [
                "Tuple[Union[dict[Text,dict[Text,Text]],Text]]",
                "Dict[str,bool]",
                "int",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {}
        },
        "get_block": {
            "name": "get_block",
            "location": 84,
            "return": [
                "Tuple[Union[dict[Text,str],str]]",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ModifyTemplates.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModifyTemplates.generate": {
            "name": "generate",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThickenTemplates.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "opts": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "Union[str,int]",
                    "argparse.Namespace",
                    "bool"
                ]
            }
        },
        "ThickenTemplates.generate": {
            "name": "generate",
            "location": 115,
            "return": [
                "Tuple[Union[Text,dict[Text,Text],int]]",
                "Dict[str,Any]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScaleTemplates.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "opts": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "Union[str,int]",
                    "argparse.Namespace",
                    "bool"
                ]
            }
        },
        "ScaleTemplates.generate": {
            "name": "generate",
            "location": 131,
            "return": [
                "Tuple[Union[Text,dict[Text,Text],int]]",
                "Dict[str,Any]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RigidmotionTemplates.__init__": {
            "name": "__init__",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "opts": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "RigidmotionTemplates.generate": {
            "name": "generate",
            "location": 161,
            "return": [
                "Tuple[Union[dict[Text,Union[Text,bool]],dict[Text,Union[Text,dict,set,list[str],Mapping,dict[str,str],Type,OrderedDict]],int,str]]",
                "Dict[str,Any]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReplaceTemplates.__init__": {
            "name": "__init__",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "opts": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "ReplaceTemplates.generate": {
            "name": "generate",
            "location": 184,
            "return": [
                "Tuple[Union[str,dict[Text,Union[Text,dict[Text,],list,set,Match,None,dict[str,str]]],dict[Text,Union[Text,Type,Pattern,dict[str,str],tuple[Union[Any,Any]],list,set,Match,None]],Iterator,int,None]]",
                "Dict[str,Any]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FillTemplates.__init__": {
            "name": "__init__",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "opts": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "Union[str,int]",
                    "argparse.Namespace",
                    "bool"
                ]
            }
        },
        "FillTemplates.generate": {
            "name": "generate",
            "location": 240,
            "return": [
                "Tuple[Union[Text,dict[Text,Union[Text,list,set,Match,None,dict[str,str]]],int]]",
                "Dict[str,Any]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemplateHolder.__init__": {
            "name": "__init__",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "opts": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "TemplateHolder.generate": {
            "name": "generate",
            "location": 267,
            "return": [
                "Tuple[str]",
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/modify/train_conv_model.py": {
        "format_stats": {
            "name": "format_stats",
            "location": 22,
            "return": [
                "str",
                "List[Dict[str,Any]]",
                "django.db.models.query.QuerySet",
                "Dict",
                "int",
                "Optional[List[str]]"
            ],
            "arguments": {
                "stats_dict": [
                    "str",
                    "bytes",
                    "Dict[str,Any]",
                    "Dict",
                    "Dict[str,Dict[str,str]]"
                ]
            }
        },
        "get_optimizer": {
            "name": "get_optimizer",
            "location": 28,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "args": [],
                "model": [
                    "str",
                    "Optional[Callable]",
                    "bool",
                    "Type[BaseException]"
                ],
                "lr": [
                    "Optional[List[Any]]",
                    "None",
                    "bool",
                    "Type[T]",
                    "List[Any]",
                    "Type",
                    "int",
                    "Optional[Dict]",
                    "Dict"
                ],
                "allow_load": [
                    "bool",
                    "float",
                    "Type[BaseModel]",
                    "Optional[bool]",
                    "Optional[int]",
                    "Pattern"
                ]
            }
        },
        "lower_lr": {
            "name": "lower_lr",
            "location": 59,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str",
                "List[django.db.models.query.QuerySet]"
            ],
            "arguments": {
                "model": [
                    "Callable",
                    "str",
                    "tracim.models.data.Content",
                    "None",
                    "collections.abc.Awaitable[None]",
                    "Optional[str]",
                    "Optional[Awaitable[None]]"
                ],
                "args": [],
                "optimizer": [
                    "int",
                    "str",
                    "Optional[int]",
                    "bool",
                    "List[app.models.Question]",
                    "torch.Tensor"
                ],
                "new_lr": [
                    "Callable",
                    "str",
                    "tracim.models.data.Content",
                    "None",
                    "collections.abc.Awaitable[None]",
                    "Optional[str]",
                    "Optional[Awaitable[None]]"
                ]
            }
        },
        "save_optimizer": {
            "name": "save_optimizer",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "optimizer": [
                    "str",
                    "bool"
                ],
                "fpath": [
                    "str",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ]
            }
        },
        "draw_all": {
            "name": "draw_all",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "n": [
                    "int",
                    "Dict[str,int]",
                    "float",
                    "Union[int,float]",
                    "bool"
                ]
            }
        },
        "unhash_volume": {
            "name": "unhash_volume",
            "location": 84,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "torch.Tensor"
                ],
                "max_meta": [
                    "int",
                    "float",
                    "torch.Tensor"
                ]
            }
        },
        "get_im": {
            "name": "get_im",
            "location": 90,
            "return": [
                "str",
                "Dict",
                "List[str]",
                "django.db.models.QuerySet",
                "buza.models.Answer",
                "List",
                "Dict[str,int]"
            ],
            "arguments": {
                "z": [
                    "str",
                    "bool",
                    "Union[str,Path]",
                    "None",
                    "Optional[bool]",
                    "collections.abc.AsyncIterator",
                    "AsyncIterator"
                ],
                "embedding": [
                    "int",
                    "str",
                    "bool",
                    "None",
                    "List[dict]",
                    "Optional[str]",
                    "List[Dict]"
                ],
                "allowed_idxs": [
                    "str",
                    "List[dict]",
                    "int",
                    "bool",
                    "Optional[str]",
                    "List[Dict]"
                ]
            }
        },
        "f_get_im_and_draw": {
            "name": "f_get_im_and_draw",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "w": [
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Optional[str]"
                ],
                "z": [
                    "str",
                    "int",
                    "Sequence[int]",
                    "limbic.emotion.models.LexiconLimbicModel"
                ],
                "embedding": [
                    "str",
                    "int",
                    "Sequence[int]",
                    "limbic.emotion.models.LexiconLimbicModel"
                ],
                "allowed_idxs": [
                    "str",
                    "int",
                    "Sequence[int]",
                    "limbic.emotion.models.LexiconLimbicModel"
                ],
                "i": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]"
                ],
                "train_data": [
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "find_lvars": {
            "name": "find_lvars",
            "location": 118,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "model": [
                    "Dict",
                    "Dict[str,Any]",
                    "allennlp.models.model.Model"
                ],
                "x": [],
                "y": [
                    "Callable[...,None]",
                    "Type",
                    "float"
                ],
                "words": [
                    "Dict[str,Any]",
                    "bool",
                    "allennlp.models.model.Model"
                ],
                "loss_fn": [
                    "Callable[...,None]",
                    "Type",
                    "float"
                ],
                "args": []
            }
        },
        "validate": {
            "name": "validate",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "bool",
                    "str"
                ],
                "validation_data": [
                    "bool",
                    "str"
                ]
            }
        },
        "train_epoch": {
            "name": "train_epoch",
            "location": 137,
            "return": [
                "List",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "model": [
                    "models.base.Model",
                    "allennlp.models.model.Model"
                ],
                "DL": [
                    "str",
                    "allennlp.models.model.Model",
                    "bool"
                ],
                "loss_fn": [
                    "Callable[...,None]",
                    "float",
                    "int",
                    "List",
                    "Callable",
                    "bool"
                ],
                "optimizer": [
                    "Union['Contributor', 'Coverage']",
                    "Optional[float]",
                    "allennlp.models.model.Model",
                    "speedwagon.models.TabsModel"
                ],
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 168,
            "return": [
                "Tuple[Union[ModifyData,float,Iterator,str]]",
                "str",
                "bytes",
                "Dict",
                "bool"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/modify/train_gan_model.py": {
        "format_stats": {
            "name": "format_stats",
            "location": 20,
            "return": [
                "str",
                "List[Dict[str,Any]]",
                "django.db.models.query.QuerySet",
                "Dict",
                "int",
                "Optional[List[str]]"
            ],
            "arguments": {
                "stats_dict": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_optimizer": {
            "name": "get_optimizer",
            "location": 28,
            "return": [
                "str",
                "Tuple[Union[list[list],int,list[int],TextIO,float,tuple[Union[str,str,str,str,str,str,str]]]]"
            ],
            "arguments": {
                "args": [],
                "model": [
                    "Dict",
                    "bool",
                    "str"
                ]
            }
        },
        "save_optimizer": {
            "name": "save_optimizer",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "optimizer_d": [
                    "Tuple[int, int]",
                    "Dict[str, int]",
                    "Dict[str, Union[Any, str]]"
                ],
                "optimizer_g": [
                    "Tuple[int, int]",
                    "Dict[str, int]",
                    "Dict[str, Union[Any, str]]"
                ],
                "fpath": [
                    "str",
                    "int",
                    "bytes",
                    "Union[List,str]",
                    "List"
                ]
            }
        },
        "unhash_volume": {
            "name": "unhash_volume",
            "location": 78,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "torch.Tensor"
                ],
                "max_meta": [
                    "int",
                    "float",
                    "torch.Tensor"
                ]
            }
        },
        "get_im": {
            "name": "get_im",
            "location": 84,
            "return": [
                "str",
                "Dict",
                "List[str]",
                "django.db.models.QuerySet",
                "buza.models.Answer",
                "List",
                "Dict[str,int]"
            ],
            "arguments": {
                "z": [
                    "str",
                    "bool",
                    "Union[str,Path]",
                    "None",
                    "Optional[bool]",
                    "collections.abc.AsyncIterator",
                    "AsyncIterator"
                ],
                "embedding": [
                    "int",
                    "str",
                    "bool",
                    "None",
                    "List[dict]",
                    "Optional[str]",
                    "List[Dict]"
                ],
                "allowed_idxs": [
                    "str",
                    "List[dict]",
                    "int",
                    "bool",
                    "Optional[str]",
                    "List[Dict]"
                ]
            }
        },
        "f_get_im_and_draw": {
            "name": "f_get_im_and_draw",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "w": [
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Optional[str]"
                ],
                "z": [
                    "str",
                    "int",
                    "Sequence[int]",
                    "limbic.emotion.models.LexiconLimbicModel"
                ],
                "embedding": [
                    "str",
                    "int",
                    "Sequence[int]",
                    "limbic.emotion.models.LexiconLimbicModel"
                ],
                "allowed_idxs": [
                    "str",
                    "int",
                    "Sequence[int]",
                    "limbic.emotion.models.LexiconLimbicModel"
                ],
                "i": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]"
                ],
                "train_data": [
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "get_zdist": {
            "name": "get_zdist",
            "location": 112,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "dist_name": [
                    "str",
                    "List[str]"
                ],
                "dim": [
                    "str",
                    "bool",
                    "None",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "int"
                ],
                "device": [
                    "str",
                    "None",
                    "bool",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "validate": {
            "name": "validate",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "bool",
                    "str"
                ],
                "validation_data": [
                    "bool",
                    "str"
                ]
            }
        },
        "train_epoch": {
            "name": "train_epoch",
            "location": 135,
            "return": [
                "List",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "model": [
                    "Union['Contributor', 'Coverage']",
                    "Optional[float]",
                    "allennlp.models.model.Model",
                    "speedwagon.models.TabsModel"
                ],
                "DL": [
                    "str",
                    "allennlp.models.model.Model",
                    "bool"
                ],
                "trainer": [
                    "str",
                    "models.Membership",
                    "allennlp.models.model.Model"
                ],
                "args": []
            }
        },
        "get_data": {
            "name": "get_data",
            "location": 163,
            "return": [
                "Tuple[Union[float,Iterator,str,ModifyData]]",
                "Dict[str,str]",
                "str",
                "MutableMapping[str,Any]",
                "bool",
                "int",
                "Dict"
            ],
            "arguments": {
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 205,
            "return": [
                "Tuple",
                "str",
                "bytes",
                "Dict",
                "bool"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/semantic_segmentation/data_loaders.py": {
        "underdirt": {
            "name": "underdirt",
            "location": 12,
            "return": [
                "Tuple[None]",
                "bool",
                "Optional[Any]",
                "int"
            ],
            "arguments": {
                "schematic": [
                    "int",
                    "numpy.ndarray",
                    "Optional[Union[int, slice]]",
                    "Dict[str, str]"
                ],
                "labels": [
                    "None",
                    "raiden.utils.List[raiden.utils.Keccak256]",
                    "numpy.ndarray",
                    "torch.Tensor",
                    "float",
                    "Dict[str,torch.LongTensor]",
                    "Optional[float]"
                ],
                "max_shift": [
                    "int",
                    "Tuple[int,int]",
                    "List[str]",
                    "bool"
                ],
                "nothing_id": [
                    "int",
                    "Sequence[Tuple[str,int]]",
                    "Set",
                    "decksite.data.models.person.Person",
                    "Dict"
                ]
            }
        },
        "flip_rotate": {
            "name": "flip_rotate",
            "location": 30,
            "return": [
                "Tuple[Optional[int]]",
                "int",
                "List[Tuple[str,str]]"
            ],
            "arguments": {
                "c": [
                    "int",
                    "vimiv.utils.trie.Trie",
                    "IO",
                    "tracim.models.data.Content",
                    "str"
                ],
                "l": [
                    "None",
                    "Optional[numpy.ndarray]",
                    "Optional[bytes]",
                    "Type[T]",
                    "List[allennlp.data.tokenizers.token.Token]",
                    "Sequence[str]",
                    "int"
                ],
                "idx": [
                    "int",
                    "None",
                    "Optional[int]",
                    "str",
                    "Optional[str]",
                    "Tuple[Union[int,int]]",
                    "Optional[Tuple[int,int]]",
                    "Callable[str,int]",
                    "Callable[[str],int]",
                    "raiden.utils.Secret"
                ]
            }
        },
        "pad_to_sidelength": {
            "name": "pad_to_sidelength",
            "location": 65,
            "return": [
                "Tuple[Union[list,dict[str,dict[str,Any]],int,str,dict[str,dict],None,list[int]]]",
                "str",
                "bool",
                "List[Dict]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "schematic": [
                    "List[str]",
                    "int",
                    "Optional[Any]",
                    "List[\"Issue\"]",
                    "numpy.ndarray",
                    "list",
                    "bytes"
                ],
                "labels": [
                    "int",
                    "None",
                    "qutebrowser.utils.usertypes.KeyMode"
                ],
                "nothing_id": [
                    "int",
                    "Optional[Sequence[int]]"
                ],
                "sidelength": [
                    "int",
                    "Union[List[str],List[Any]]",
                    "str"
                ]
            }
        },
        "fit_in_sidelength": {
            "name": "fit_in_sidelength",
            "location": 85,
            "return": [
                "Tuple[Optional[tuple[int]]]",
                "Sequence[str]",
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "schematic": [
                    "str",
                    "int",
                    "Dict[str,torch.LongTensor]",
                    "Optional[int]",
                    "None"
                ],
                "labels": [
                    "int",
                    "str",
                    "None"
                ],
                "nothing_id": [
                    "int",
                    "str"
                ],
                "sl": [
                    "int",
                    "Optional[int]",
                    "Dict[str,torch.LongTensor]",
                    "Optional[float]"
                ],
                "max_shift": [
                    "int",
                    "List[int]",
                    "List[List[int]]",
                    "List"
                ]
            }
        },
        "make_example_from_raw": {
            "name": "make_example_from_raw",
            "location": 106,
            "return": [
                "Tuple[int]",
                "str",
                "float"
            ],
            "arguments": {
                "schematic": [
                    "int",
                    "List[list[allennlp.data.fields.production_rule_field.ProductionRule]]",
                    "Dict[str,torch.LongTensor]",
                    "torch.Tensor",
                    "List[List[allennlp.data.fields.production_rule_field.ProductionRule]]",
                    "raiden.utils.TokenAmount"
                ],
                "labels": [
                    "None",
                    "int",
                    "torch.Tensor",
                    "Dict[str,torch.LongTensor]",
                    "float",
                    "List[list[allennlp.data.fields.production_rule_field.ProductionRule]]",
                    "raiden.utils.BlockNumber",
                    "List[List[allennlp.data.fields.production_rule_field.ProductionRule]]"
                ],
                "augment": [
                    "dict",
                    "Dict[str, Any]",
                    "int",
                    "Dict[str, float]"
                ],
                "nothing_id": [
                    "int",
                    "torch.Tensor",
                    "raiden.utils.BlockNumber",
                    "List[List[allennlp.data.fields.production_rule_field.ProductionRule]]",
                    "Dict[str,torch.LongTensor]",
                    "float"
                ],
                "sl": [
                    "int",
                    "str"
                ]
            }
        },
        "swallow_classes": {
            "name": "swallow_classes",
            "location": 124,
            "return": [
                "Tuple[tuple[Union[Any,Any]]]",
                "Optional[str]",
                "utils.CWLObjectType"
            ],
            "arguments": {
                "classes": [
                    "str",
                    "Dict",
                    "None",
                    "Dict[str,object]",
                    "Optional[str]",
                    "Type",
                    "torch.nn.Module"
                ],
                "predator": [
                    "Dict[str,Any]",
                    "Union[int,float]",
                    "int",
                    "bool",
                    "float"
                ],
                "prey_classes": [
                    "Type",
                    "AbstractSet[\"TemplateObjectVariable\"]",
                    "AbstractSet[\"TemplatePropertyVariable\"]",
                    "AbstractSet[\"TemplateActionTypeVariable\"]"
                ],
                "class_map": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ]
            }
        },
        "organize_classes": {
            "name": "organize_classes",
            "location": 141,
            "return": [
                "Tuple",
                "Optional[str]",
                "utils.CWLObjectType"
            ],
            "arguments": {
                "classes": [
                    "bool",
                    "Dict[str, Any]"
                ],
                "min_occurence": [
                    "Type",
                    "str",
                    "List[str]"
                ]
            }
        },
        "reconcile_classes": {
            "name": "reconcile_classes",
            "location": 166,
            "return": [
                "Tuple[Union[list,list[str],tuple[Union[set[Any],set[Any]]],dict,str,None,tuple[Union[str,str]]]]",
                "Optional[str]",
                "utils.CWLObjectType"
            ],
            "arguments": {
                "classes": [
                    "int",
                    "Optional[int]",
                    "None",
                    "float",
                    "Iterable[str]",
                    "Callable",
                    "Optional[Callable]",
                    "Type",
                    "str",
                    "bool"
                ],
                "to_match": [
                    "int",
                    "str",
                    "None",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "SemSegData.__init__": {
            "name": "__init__",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_path": [
                    "str",
                    "int",
                    "bool"
                ],
                "nexamples": [
                    "int",
                    "Dict[str,int]",
                    "bytes",
                    "numpy.ndarray"
                ],
                "sidelength": [
                    "int",
                    "bool",
                    "Optional[List[Any]]",
                    "Callable[[str],Any]"
                ],
                "classes_to_match": [
                    "bool",
                    "None",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "str",
                    "Optional[AnyStr]",
                    "List[str]",
                    "Optional[int]",
                    "AnyStr"
                ],
                "augment": [
                    "Dict",
                    "bool",
                    "Optional[List[Any]]",
                    "Callable[[str],Any]"
                ],
                "min_class_occurence": [
                    "int",
                    "str",
                    "bool",
                    "Optional[str]",
                    "List[Tuple[str,str]]"
                ],
                "useid": [
                    "bool",
                    "Optional[List[Any]]",
                    "Callable[[str],Any]"
                ]
            }
        },
        "SemSegData.get_classes": {
            "name": "get_classes",
            "location": 237,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SemSegData.set_classes": {
            "name": "set_classes",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "classes": [
                    "Type",
                    "str",
                    "int",
                    "Union[str,List[str]]",
                    "List[str]"
                ]
            }
        },
        "SemSegData.__getitem__": {
            "name": "__getitem__",
            "location": 243,
            "return": [
                "Tuple",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "bool",
                    "Tuple"
                ]
            }
        },
        "SemSegData.__len__": {
            "name": "__len__",
            "location": 250,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/semantic_segmentation/semseg_models.py": {
        "SemSegNet.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "opts": [
                    "Callable[,None]",
                    "str",
                    "int",
                    "Dict[str,int]",
                    "numpy.ndarray",
                    "bool"
                ],
                "classes": [
                    "str",
                    "None",
                    "int",
                    "List[numpy.ndarray]",
                    "bool"
                ]
            }
        },
        "SemSegNet._build": {
            "name": "_build",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SemSegNet.forward": {
            "name": "forward",
            "location": 72,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "numpy.ndarray",
                    "torch.Tensor"
                ]
            }
        },
        "SemSegNet.save": {
            "name": "save",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "BinaryIO"
                ]
            }
        },
        "SemSegNet.load_vocab": {
            "name": "load_vocab",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab_path": [
                    "str"
                ]
            }
        },
        "SemSegNet.load": {
            "name": "load",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "Dict",
                    "bytes",
                    "Callable",
                    "Dict[str,Any]"
                ]
            }
        },
        "SemSegWrapper.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "int",
                    "float",
                    "Optional[float]",
                    "numpy.ndarray",
                    "List[List[float]]"
                ],
                "vocab_path": [
                    "str",
                    "float",
                    "bytes",
                    "bool",
                    "int"
                ],
                "threshold": [
                    "float",
                    "int",
                    "torch.utils.data.DataLoader",
                    "bool",
                    "Dict[str,Any]",
                    "List[int]"
                ],
                "blocks_only": [
                    "bool",
                    "int",
                    "torch.utils.data.DataLoader",
                    "Dict[str,Any]",
                    "List[int]"
                ],
                "cuda": [
                    "bool",
                    "int",
                    "str",
                    "Dict[str,int]"
                ]
            }
        },
        "SemSegWrapper.segment_object": {
            "name": "segment_object",
            "location": 141,
            "return": [
                "Optional[int]",
                "Dict[str, int]",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "blocks": [
                    "str"
                ]
            }
        }
    },
    "craftassist-master/python/craftassist/voxel_models/semantic_segmentation/train_semantic_segmentation.py": {
        "print_slices": {
            "name": "print_slices",
            "location": 24,
            "return": [],
            "arguments": {
                "model": [
                    "Union[tensorflow.keras.models.Model, 'keras.models.Model']",
                    "int",
                    "Iterable[T]",
                    "slice",
                    "bool"
                ],
                "H": [
                    "int",
                    "float",
                    "list",
                    "List[int]",
                    "dict"
                ],
                "r": [
                    "int",
                    "float",
                    "list",
                    "List[int]",
                    "dict"
                ],
                "c": [
                    "int",
                    "float",
                    "list",
                    "List[int]",
                    "dict"
                ],
                "n": [
                    "Any",
                    "int",
                    "dict",
                    "Dict[str, torch.Tensor]"
                ],
                "data": [
                    "Any",
                    "int",
                    "dict",
                    "Dict[str, torch.Tensor]"
                ]
            }
        },
        "blocks_from_data": {
            "name": "blocks_from_data",
            "location": 34,
            "return": [
                "int"
            ],
            "arguments": {
                "data": [
                    "T",
                    "str",
                    "int",
                    "Optional[bytes]"
                ],
                "n": [
                    "T",
                    "str",
                    "int",
                    "Optional[bytes]"
                ]
            }
        },
        "semseg_output": {
            "name": "semseg_output",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "S": [
                    "str",
                    "int",
                    "Mapping[str, Any]",
                    "Callable[[str], Any]",
                    "Union[bytes, str]"
                ],
                "n": [
                    "int",
                    "bytes",
                    "Optional[dict]",
                    "torch.Tensor"
                ],
                "data": [
                    "int",
                    "bytes",
                    "Optional[dict]",
                    "torch.Tensor"
                ]
            }
        },
        "get_loss": {
            "name": "get_loss",
            "location": 57,
            "return": [
                "Set[str]",
                "str",
                "bool",
                "Callable[[str, Any], Tuple[bytes, int]]",
                "MutableMapping[str, int]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "str"
                ],
                "yhat": [
                    "float",
                    "str",
                    "int"
                ],
                "loss": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "get_accuracy": {
            "name": "get_accuracy",
            "location": 71,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "y": [
                    "Optional[List[str]]",
                    "List[Tuple[int, int]]",
                    "str",
                    "int"
                ],
                "yhat": [
                    "str",
                    "bool"
                ]
            }
        },
        "validate": {
            "name": "validate",
            "location": 79,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "model": [
                    "str"
                ],
                "validation_data": [
                    "dict",
                    "str"
                ],
                "loss": [
                    "bytes",
                    "int"
                ],
                "args": []
            }
        },
        "train_epoch": {
            "name": "train_epoch",
            "location": 96,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "model": [
                    "Type[T]",
                    "str",
                    "allennlp.models.Model"
                ],
                "DL": [
                    "Union['Contributor', 'Coverage']",
                    "Optional[float]",
                    "allennlp.models.model.Model",
                    "speedwagon.models.TabsModel"
                ],
                "loss": [
                    "float",
                    "tuple",
                    "models.characters.states.AttributeType"
                ],
                "optimizer": [
                    "Union['Contributor', 'Coverage']",
                    "Optional[float]",
                    "allennlp.models.model.Model",
                    "speedwagon.models.TabsModel"
                ],
                "args": []
            }
        },
        "make_dataloader": {
            "name": "make_dataloader",
            "location": 184,
            "return": [
                "int",
                "str",
                "bool",
                "db.models.taxon.FillDataLevel",
                "Dict[str, Any]"
            ],
            "arguments": {
                "ds": [
                    "int",
                    "bool",
                    "Callable[[], Any]",
                    "Callable"
                ]
            }
        }
    },
    "craftassist-master/python/dashboard/__init__.py": {
        "_dashboard_thread": {
            "name": "_dashboard_thread",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "web_root": [
                    "str",
                    "bool",
                    "Dict[str,bool]",
                    "Tuple"
                ],
                "ip": [
                    "str",
                    "bool",
                    "Exception",
                    "int"
                ],
                "port": [
                    "bool",
                    "str"
                ]
            }
        },
        "start": {
            "name": "start",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "web_root": [
                    "Text",
                    "float",
                    "Callable",
                    "bool",
                    "str"
                ],
                "ip": [
                    "Text",
                    "float",
                    "Callable",
                    "bool",
                    "str"
                ],
                "port": [
                    "int",
                    "float",
                    "Callable",
                    "bool",
                    "str"
                ]
            }
        },
        "_dashboard_thread.index": {
            "name": "index",
            "location": 25,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        }
    },
    "craftassist-master/python/logging_plugin/base_log_reader.py": {
        "BaseLogReader.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logdir": [
                    "str"
                ]
            }
        },
        "BaseLogReader.start": {
            "name": "start",
            "location": 25,
            "return": [
                "None",
                "Union[tuple,list]",
                "Dict[str,Any]",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseLogReader.decode_and_handle_hook": {
            "name": "decode_and_handle_hook",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hook_id": [
                    "str",
                    "int"
                ],
                "world_tick": [
                    "str",
                    "int",
                    "Optional[Any]",
                    "Final",
                    "Any",
                    "None",
                    "Optional[IO[str]]",
                    "IO"
                ],
                "buf_start": [
                    "str",
                    "int",
                    "Optional[Any]",
                    "Final",
                    "Any",
                    "None",
                    "Optional[IO[str]]",
                    "IO"
                ]
            }
        }
    },
    "craftassist-master/python/logging_plugin/decoder.py": {
        "Decoder.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fp": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Decoder.readByte": {
            "name": "readByte",
            "location": 13,
            "return": [
                "bytes",
                "str",
                "bool",
                "Tuple[float, float]",
                "Sequence[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Decoder.readUByte": {
            "name": "readUByte",
            "location": 16,
            "return": [
                "bytes",
                "str",
                "Sequence[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Decoder.readShort": {
            "name": "readShort",
            "location": 19,
            "return": [
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Decoder.readUShort": {
            "name": "readUShort",
            "location": 22,
            "return": [
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Decoder.readInt": {
            "name": "readInt",
            "location": 25,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Optional[str]",
                "Mapping[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Decoder.readUInt": {
            "name": "readUInt",
            "location": 28,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Optional[str]",
                "Mapping[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Decoder.readLong": {
            "name": "readLong",
            "location": 31,
            "return": [
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Decoder.readULong": {
            "name": "readULong",
            "location": 34,
            "return": [
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Decoder.readFloat": {
            "name": "readFloat",
            "location": 37,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Decoder.readDouble": {
            "name": "readDouble",
            "location": 40,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Decoder.readRaw": {
            "name": "readRaw",
            "location": 43,
            "return": [
                "int",
                "List[int]",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "Decoder.readStructFmt": {
            "name": "readStructFmt",
            "location": 49,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "fmt": [
                    "str",
                    "float",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Decoder.readString": {
            "name": "readString",
            "location": 57,
            "return": [
                "int",
                "str",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Decoder.readIntPos": {
            "name": "readIntPos",
            "location": 63,
            "return": [
                "Tuple",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Decoder.readFloatPos": {
            "name": "readFloatPos",
            "location": 66,
            "return": [
                "Tuple",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Decoder.readLook": {
            "name": "readLook",
            "location": 69,
            "return": [
                "Tuple",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Decoder.readItem": {
            "name": "readItem",
            "location": 72,
            "return": [
                "Tuple",
                "bool",
                "str",
                "float",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Decoder.readBlock": {
            "name": "readBlock",
            "location": 75,
            "return": [
                "Tuple",
                "str",
                "bytearray",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/logging_plugin/discrete_move_log_reader.py": {
        "to_discrete": {
            "name": "to_discrete",
            "location": 10,
            "return": [
                "Tuple",
                "str",
                "List[str]",
                "int",
                "List",
                "float"
            ],
            "arguments": {
                "pos": [
                    "Dict",
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "PrintLogReader.on_player_spawned": {
            "name": "on_player_spawned",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tick": [
                    "str",
                    "int",
                    "Callable[,Any]"
                ],
                "buf_start": [
                    "bool",
                    "str",
                    "Callable",
                    "Callable[,object]",
                    "Any",
                    "Optional[Any]",
                    "None"
                ],
                "eid": [
                    "str",
                    "int",
                    "Callable[,Any]"
                ],
                "name": [
                    "str",
                    "int",
                    "Callable[,Any]"
                ],
                "pos": [
                    "str",
                    "int",
                    "Callable[,Any]"
                ],
                "look": [
                    "bool",
                    "str",
                    "Callable",
                    "Callable[,object]",
                    "Any",
                    "Optional[Any]",
                    "None"
                ]
            }
        },
        "PrintLogReader.on_player_destroyed": {
            "name": "on_player_destroyed",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tick": [
                    "int",
                    "float"
                ],
                "buf_start": [
                    "Callable",
                    "Literal",
                    "bool"
                ],
                "eid": [
                    "int",
                    "float"
                ]
            }
        },
        "PrintLogReader.on_player_moving": {
            "name": "on_player_moving",
            "location": 21,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "tick": [
                    "float",
                    "str",
                    "int",
                    "Union[str,int]"
                ],
                "buf_start": [
                    "Callable",
                    "Literal",
                    "bool"
                ],
                "eid": [
                    "float",
                    "str",
                    "int",
                    "Union[str,int]"
                ],
                "oldpos": [
                    "float",
                    "int",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ],
                "newpos": [
                    "float",
                    "int",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ]
            }
        }
    },
    "craftassist-master/python/logging_plugin/hooks.py": {},
    "craftassist-master/python/logging_plugin/plot_vision.py": {
        "plot": {
            "name": "plot",
            "location": 11,
            "return": [
                "Tuple",
                "bool",
                "str",
                "Hashable",
                "numpy.ndarray"
            ],
            "arguments": {
                "blockpath": [
                    "bool",
                    "str",
                    "float",
                    "Optional[str]",
                    "None",
                    "int"
                ],
                "plt": [
                    "bool",
                    "Optional[bool]",
                    "Dict[str, int]"
                ],
                "imgpath": [
                    "Optional[bool]",
                    "None",
                    "Optional[str]",
                    "bool",
                    "Optional[Union[str,Any]]",
                    "str",
                    "Optional[List[str]]",
                    "Any",
                    "numpy.ndarray",
                    "List[str]"
                ],
                "depthpath": [
                    "Optional[bool]",
                    "None",
                    "Optional[str]",
                    "bool",
                    "Optional[Union[str,Any]]",
                    "str",
                    "Optional[List[str]]",
                    "Any",
                    "numpy.ndarray",
                    "List[str]"
                ],
                "vis": [
                    "Optional[bool]",
                    "None",
                    "Optional[str]",
                    "bool",
                    "Optional[Union[str,Any]]",
                    "str",
                    "Optional[List[str]]",
                    "Any",
                    "numpy.ndarray",
                    "List[str]"
                ],
                "out_path": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "size": [
                    "None",
                    "Optional[int]",
                    "int",
                    "Callable[[int],None]",
                    "Callable[int,None]",
                    "bool"
                ]
            }
        }
    },
    "craftassist-master/python/logging_plugin/print_log_reader.py": {
        "PrintLogReader.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "craftassist-master/python/logging_plugin/recover_initial_blockmap.py": {
        "recover_initial_blockmap": {
            "name": "recover_initial_blockmap",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "old_workdir": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "int"
                ]
            }
        },
        "get_chunks_avail": {
            "name": "get_chunks_avail",
            "location": 69,
            "return": [
                "List",
                "str",
                "bool"
            ],
            "arguments": {
                "logdir": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "tuple_list_to_lua": {
            "name": "tuple_list_to_lua",
            "location": 80,
            "return": [
                "List[str]",
                "Set[str]",
                "Set[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "tuple_list": [
                    "List",
                    "List[str]"
                ]
            }
        },
        "tuple_list_to_lua.table": {
            "name": "table",
            "location": 83,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "it": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "get_chunks_avail.ChunkAvailLogReader.on_chunk_available": {
            "name": "on_chunk_available",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "buf_start": [
                    "bool",
                    "AsyncIterator[T]",
                    "AsyncIterable[T]"
                ],
                "hid": [
                    "bool",
                    "AsyncIterator[T]",
                    "AsyncIterable[T]"
                ],
                "cx": [
                    "list",
                    "int",
                    "List[int]",
                    "bool",
                    "str",
                    "List[Dict[str, Any]]"
                ],
                "cz": [
                    "list",
                    "int",
                    "List[int]",
                    "bool",
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        }
    },
    "craftassist-master/python/logging_plugin/util.py": {
        "get_hook_name": {
            "name": "get_hook_name",
            "location": 12,
            "return": [
                "str",
                "List[str]",
                "Callable"
            ],
            "arguments": {
                "hook_id": [
                    "int",
                    "str",
                    "Tuple[Union[str,None,str]]",
                    "Tuple[Optional[str],str]",
                    "Union[int,str]"
                ]
            }
        },
        "get_hashes": {
            "name": "get_hashes",
            "location": 16,
            "return": [
                "Tuple[Union[str,Type,list,dict[str,str],int,Pattern]]",
                "str",
                "List[str]",
                "Dict"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "craftassist-master/python/logging_plugin/video.py": {
        "render_video": {
            "name": "render_video",
            "location": 15,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "ob_dir": [
                    "str",
                    "bool"
                ],
                "outfile": [
                    "str"
                ],
                "dpi": [
                    "str",
                    "int"
                ],
                "max_depth": [
                    "int",
                    "numpy.ndarray",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "craftassist-master/python/logging_plugin/__init__.py": {},
    "craftassist-master/python/mcevent/dispatcher.py": {
        "_make_id": {
            "name": "_make_id",
            "location": 5,
            "return": [
                "Tuple[int]",
                "Optional[str]",
                "int",
                "str",
                "Dict"
            ],
            "arguments": {
                "target": [
                    "str",
                    "Iterable[int]"
                ]
            }
        },
        "receiver": {
            "name": "receiver",
            "location": 254,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "signal": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Signal.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "providing_args": [
                    "List[Tuple[str,str]]",
                    "None",
                    "Exception",
                    "Callable[...,bool]",
                    "bytes",
                    "List[tuple[Union[str,str]]]",
                    "bool"
                ],
                "use_caching": [
                    "bool",
                    "Dict[str,Any]",
                    "Optional[Callable]"
                ]
            }
        },
        "Signal.connect": {
            "name": "connect",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "receiver": [
                    "str",
                    "bool",
                    "List[str]",
                    "Dict",
                    "Dict[str,Any]",
                    "Optional[bool]",
                    "None"
                ],
                "sender": [
                    "int",
                    "None",
                    "str",
                    "Dict",
                    "Callable",
                    "bool"
                ],
                "weak": [
                    "bool",
                    "str",
                    "float",
                    "Callable",
                    "Dict"
                ],
                "dispatch_uid": [
                    "int",
                    "None",
                    "str",
                    "Optional[int]",
                    "Sequence[Sequence[int]]"
                ]
            }
        },
        "Signal.disconnect": {
            "name": "disconnect",
            "location": 96,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "receiver": [
                    "bool",
                    "None",
                    "Tuple",
                    "int",
                    "Callable",
                    "str"
                ],
                "sender": [
                    "str",
                    "int",
                    "None",
                    "float"
                ],
                "dispatch_uid": [
                    "int",
                    "None",
                    "Optional[int]"
                ]
            }
        },
        "Signal.has_listeners": {
            "name": "has_listeners",
            "location": 132,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "int",
                    "Callable",
                    "None",
                    "str"
                ]
            }
        },
        "Signal.send": {
            "name": "send",
            "location": 135,
            "return": [
                "str",
                "List",
                "Dict[str,Any]",
                "List[tuple]"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "str",
                    "Dict",
                    "Dict[str,Any]",
                    "Optional[Mapping[str,Any]]",
                    "Mapping",
                    "None"
                ]
            }
        },
        "Signal.send_robust": {
            "name": "send_robust",
            "location": 161,
            "return": [
                "bytes",
                "List",
                "Dict",
                "List[tuple[Union[dict,dict[str,Any],list[int],dict[str,str]]]]"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Signal._clear_dead_receivers": {
            "name": "_clear_dead_receivers",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Signal._live_receivers": {
            "name": "_live_receivers",
            "location": 205,
            "return": [
                "List",
                "str",
                "List[Union[dict[str,float],DefaultDict,Counter]]",
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "int",
                    "Dict",
                    "Optional[str]",
                    "float",
                    "str",
                    "None"
                ]
            }
        },
        "Signal._remove_receiver": {
            "name": "_remove_receiver",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "receiver": [
                    "int",
                    "None",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "receiver._decorator": {
            "name": "_decorator",
            "location": 268,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Optional[str]"
                ]
            }
        }
    },
    "craftassist-master/python/mcevent/__init__.py": {
        "SocketIOMock.on": {
            "name": "on",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str"
                ]
            }
        },
        "SocketIOMock.emit": {
            "name": "emit",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "SocketIOMock.on._decorator": {
            "name": "_decorator",
            "location": 18,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        }
    },
    "craftassist-master/python/minecraft_render/render.py": {
        "gen_scene_json": {
            "name": "gen_scene_json",
            "location": 33,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "name": [
                    "str"
                ]
            }
        }
    },
    "craftassist-master/python/render_vision_dataset/render_3x.py": {
        "to_unit_vec": {
            "name": "to_unit_vec",
            "location": 24,
            "return": [
                "numpy.ndarray",
                "float",
                "Dict[str, numpy.ndarray]",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "yaw": [
                    "float",
                    "Union[numpy.ndarray, numpy.void]",
                    "numpy.ndarray",
                    "int",
                    "List[numpy.array]"
                ],
                "pitch": [
                    "float",
                    "Union[numpy.ndarray, numpy.void]",
                    "numpy.ndarray",
                    "int",
                    "List[numpy.array]"
                ]
            }
        },
        "ground_height": {
            "name": "ground_height",
            "location": 32,
            "return": [
                "str",
                "Exception",
                "Optional[str]"
            ],
            "arguments": {
                "blocks": [
                    "str"
                ]
            }
        },
        "render": {
            "name": "render",
            "location": 39,
            "return": [],
            "arguments": {
                "npy_p2b": [
                    "int",
                    "float",
                    "bool",
                    "Callable[..., None]"
                ],
                "out_dir": [
                    "str",
                    "bool"
                ],
                "port": [
                    "int",
                    "str",
                    "bool"
                ],
                "spp": [
                    "str",
                    "List[str]",
                    "float"
                ],
                "img_size": [
                    "str",
                    "List[str]",
                    "float"
                ]
            }
        }
    },
    "craftassist-master/python/render_vision_dataset/render_one_block_change.py": {
        "to_unit_vec": {
            "name": "to_unit_vec",
            "location": 26,
            "return": [
                "numpy.ndarray",
                "float",
                "Dict[str, numpy.ndarray]",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "yaw": [
                    "float",
                    "Union[numpy.ndarray, numpy.void]",
                    "numpy.ndarray",
                    "int",
                    "List[numpy.array]"
                ],
                "pitch": [
                    "float",
                    "Union[numpy.ndarray, numpy.void]",
                    "numpy.ndarray",
                    "int",
                    "List[numpy.array]"
                ]
            }
        },
        "ground_height": {
            "name": "ground_height",
            "location": 34,
            "return": [
                "str",
                "Exception",
                "Optional[str]"
            ],
            "arguments": {
                "blocks": [
                    "str"
                ]
            }
        },
        "ray_intersect_triangle": {
            "name": "ray_intersect_triangle",
            "location": 41,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "p0": [
                    "Optional[int]",
                    "int",
                    "tuple"
                ],
                "p1": [
                    "bool",
                    "float"
                ],
                "triangle": [
                    "Iterable[Any]",
                    "Iterable",
                    "str",
                    "int",
                    "List[int]",
                    "Sequence[int]"
                ]
            }
        },
        "intersect_cube": {
            "name": "intersect_cube",
            "location": 103,
            "return": [
                "bool"
            ],
            "arguments": {
                "xyz": [
                    "int",
                    "list",
                    "str"
                ],
                "camera": [
                    "numpy.ndarray",
                    "float"
                ],
                "focus": [
                    "numpy.ndarray",
                    "float"
                ]
            }
        },
        "change_one_block": {
            "name": "change_one_block",
            "location": 138,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "Optional[float]"
            ],
            "arguments": {
                "schematic": [
                    "Dict[str, Tuple[int, int]]",
                    "int"
                ],
                "yaw": [
                    "Sequence",
                    "Mapping"
                ]
            }
        },
        "render": {
            "name": "render",
            "location": 182,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "npy_file": [
                    "str",
                    "bool",
                    "Union[None, str, List[str]]"
                ],
                "out_dir": [
                    "str",
                    "List[int]",
                    "List[str]"
                ],
                "no_chunky": [
                    "bool",
                    "List[str]",
                    "str",
                    "int",
                    "tuple",
                    "float"
                ],
                "no_vision": [
                    "bool",
                    "List[str]",
                    "str",
                    "int",
                    "tuple",
                    "float"
                ],
                "port": [
                    "int",
                    "List[str]"
                ],
                "yaw": [
                    "int",
                    "bool",
                    "List[int]",
                    "Optional[str]"
                ],
                "pitch": [
                    "str",
                    "int",
                    "float",
                    "List[Tuple[int, int]]"
                ],
                "camera": [
                    "str",
                    "int",
                    "float",
                    "List[Tuple[int, int]]"
                ],
                "pos": [
                    "bool",
                    "int"
                ],
                "spp": [
                    "str",
                    "List[str]",
                    "List[int]"
                ],
                "img_size": [
                    "str",
                    "List[str]",
                    "List[int]"
                ],
                "block_change": [
                    "str",
                    "List[str]",
                    "List[int]"
                ]
            }
        }
    },
    "craftassist-master/python/render_vision_dataset/render_schematic_with_pixel2block-color.py": {
        "rgb2hsv": {
            "name": "rgb2hsv",
            "location": 27,
            "return": [
                "str",
                "Tuple[int, int, str]",
                "MutableMapping[str, Any]"
            ],
            "arguments": {
                "r": [
                    "int",
                    "List[int]"
                ],
                "g": [
                    "int"
                ],
                "b": [
                    "int"
                ]
            }
        },
        "to_unit_vec": {
            "name": "to_unit_vec",
            "location": 54,
            "return": [
                "numpy.ndarray",
                "float",
                "Dict[str, numpy.ndarray]",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "yaw": [
                    "float",
                    "Union[numpy.ndarray, numpy.void]",
                    "numpy.ndarray",
                    "int",
                    "List[numpy.array]"
                ],
                "pitch": [
                    "float",
                    "Union[numpy.ndarray, numpy.void]",
                    "numpy.ndarray",
                    "int",
                    "List[numpy.array]"
                ]
            }
        },
        "ground_height": {
            "name": "ground_height",
            "location": 62,
            "return": [
                "str",
                "Exception",
                "Optional[str]"
            ],
            "arguments": {
                "blocks": [
                    "str"
                ]
            }
        },
        "randomly_change_blocks": {
            "name": "randomly_change_blocks",
            "location": 69,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "schematic": [
                    "List[str]"
                ]
            }
        },
        "add_new_schematic_hue": {
            "name": "add_new_schematic_hue",
            "location": 83,
            "return": [],
            "arguments": {
                "schematic_hue": [
                    "bool",
                    "float",
                    "str",
                    "Sequence[str]"
                ],
                "new_schematic": [
                    "list",
                    "float",
                    "Dict[str, Any]",
                    "set",
                    "int"
                ],
                "i": [
                    "bool",
                    "float",
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "render": {
            "name": "render",
            "location": 97,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "npy_file": [
                    "bool",
                    "List[str]",
                    "str",
                    "float"
                ],
                "out_dir": [
                    "str",
                    "List[str]",
                    "bool",
                    "Callable[..., None]",
                    "int",
                    "Optional[str]"
                ],
                "port": [
                    "int",
                    "List[str]",
                    "str",
                    "bool"
                ],
                "spp": [
                    "str",
                    "List[str]",
                    "bool",
                    "float"
                ],
                "img_size": [
                    "bool",
                    "Tuple[int, int]",
                    "str",
                    "int"
                ]
            }
        },
        "pixel2block": {
            "name": "pixel2block",
            "location": 212,
            "return": [
                "List[str]",
                "bool",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "random_images": [
                    "str"
                ],
                "schematic_hue": [
                    "bool",
                    "tuple",
                    "str",
                    "Optional[int]"
                ]
            }
        }
    },
    "craftassist-master/python/render_vision_dataset/render_schematic_with_pixel2block.py": {
        "to_unit_vec": {
            "name": "to_unit_vec",
            "location": 28,
            "return": [
                "numpy.ndarray",
                "float",
                "Dict[str, numpy.ndarray]",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "yaw": [
                    "float",
                    "Union[numpy.ndarray, numpy.void]",
                    "numpy.ndarray",
                    "int",
                    "List[numpy.array]"
                ],
                "pitch": [
                    "float",
                    "Union[numpy.ndarray, numpy.void]",
                    "numpy.ndarray",
                    "int",
                    "List[numpy.array]"
                ]
            }
        },
        "ground_height": {
            "name": "ground_height",
            "location": 36,
            "return": [
                "str",
                "Exception",
                "Optional[str]"
            ],
            "arguments": {
                "blocks": [
                    "str"
                ]
            }
        },
        "render": {
            "name": "render",
            "location": 43,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "npy_file": [
                    "int",
                    "str",
                    "Dict[str, str]",
                    "Dict[str, np.ndarray]",
                    "List[str]"
                ],
                "out_dir": [
                    "str",
                    "List[str]"
                ],
                "port": [
                    "int",
                    "str",
                    "bool"
                ],
                "spp": [
                    "str",
                    "List[str]",
                    "bool",
                    "float"
                ],
                "img_size": [
                    "int",
                    "str"
                ]
            }
        },
        "read_pixel2block": {
            "name": "read_pixel2block",
            "location": 176,
            "return": [
                "str",
                "bool",
                "Type"
            ],
            "arguments": {
                "blockpos_bin": [
                    "int",
                    "str"
                ],
                "X": [
                    "float",
                    "numpy.ndarray",
                    "str",
                    "Dict[int, Tuple[int, int]]",
                    "int"
                ],
                "Y": [
                    "float",
                    "numpy.ndarray",
                    "str",
                    "Dict[int, Tuple[int, int]]",
                    "int"
                ],
                "Z": [
                    "float",
                    "numpy.ndarray",
                    "str",
                    "Dict[int, Tuple[int, int]]",
                    "int"
                ],
                "width": [
                    "int",
                    "Tuple[int, int]",
                    "str",
                    "Mapping"
                ],
                "height": [
                    "int",
                    "Tuple[int, int]",
                    "str",
                    "Mapping"
                ]
            }
        }
    },
    "craftassist-master/python/render_vision_dataset/render_script.py": {},
    "craftassist-master/python/render_vision_dataset/render_verify_pixel2block.py": {
        "to_unit_vec": {
            "name": "to_unit_vec",
            "location": 26,
            "return": [
                "numpy.ndarray",
                "float",
                "Dict[str, numpy.ndarray]",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "yaw": [
                    "float",
                    "Union[numpy.ndarray, numpy.void]",
                    "numpy.ndarray",
                    "int",
                    "List[numpy.array]"
                ],
                "pitch": [
                    "float",
                    "Union[numpy.ndarray, numpy.void]",
                    "numpy.ndarray",
                    "int",
                    "List[numpy.array]"
                ]
            }
        },
        "ground_height": {
            "name": "ground_height",
            "location": 34,
            "return": [
                "str",
                "Exception",
                "Optional[str]"
            ],
            "arguments": {
                "blocks": [
                    "str"
                ]
            }
        },
        "change_block": {
            "name": "change_block",
            "location": 41,
            "return": [],
            "arguments": {
                "schematic": [
                    "bytes",
                    "Sequence[T]",
                    "Sequence[str]",
                    "numpy.ndarray"
                ],
                "b": [
                    "int",
                    "Iterable",
                    "bytes",
                    "float",
                    "Type[Any]"
                ]
            }
        },
        "render": {
            "name": "render",
            "location": 48,
            "return": [],
            "arguments": {
                "npy_p2b": [
                    "int",
                    "float",
                    "Tuple[int, int, int]",
                    "bool"
                ],
                "out_dir": [
                    "str",
                    "bool"
                ],
                "port": [
                    "int",
                    "str",
                    "bool"
                ],
                "spp": [
                    "str",
                    "List[str]",
                    "float"
                ],
                "img_size": [
                    "str",
                    "List[str]",
                    "float"
                ],
                "mn": [
                    "int",
                    "str",
                    "float"
                ]
            }
        }
    }
}
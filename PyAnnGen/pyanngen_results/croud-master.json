{
    "croud-master/setup.py": {},
    "croud-master/croud/api.py": {
        "noop": {
            "name": "noop",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Client.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "str"
                ]
            }
        },
        "Client.from_args": {
            "name": "from_args",
            "location": 96,
            "return": [
                "Client"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "Client.request": {
            "name": "request",
            "location": 105,
            "return": [
                "Tuple[(Optional[dict], Optional[dict])]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "RequestMethod"
                ],
                "endpoint": [
                    "str"
                ]
            }
        },
        "Client.delete": {
            "name": "delete",
            "location": 154,
            "return": [
                "Tuple[(Optional[dict], Optional[dict])]"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "str"
                ]
            }
        },
        "Client.get": {
            "name": "get",
            "location": 159,
            "return": [
                "Tuple[(Optional[dict], Optional[dict])]"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "str"
                ]
            }
        },
        "Client.patch": {
            "name": "patch",
            "location": 162,
            "return": [
                "Tuple[(Optional[dict], Optional[dict])]"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "str"
                ]
            }
        },
        "Client.post": {
            "name": "post",
            "location": 167,
            "return": [
                "Tuple[(Optional[dict], Optional[dict])]"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "str"
                ]
            }
        },
        "Client.put": {
            "name": "put",
            "location": 172,
            "return": [
                "Tuple[(Optional[dict], Optional[dict])]"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "str"
                ]
            }
        },
        "Client.decode_response": {
            "name": "decode_response",
            "location": 177,
            "return": [
                "Tuple[(Optional[dict], Optional[dict])]"
            ],
            "arguments": {
                "self": [],
                "resp": [
                    "requests.models.Response"
                ]
            }
        }
    },
    "croud-master/croud/login.py": {
        "login_path": {
            "name": "login_path",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "idp": [
                    "str"
                ]
            }
        },
        "get_org_id": {
            "name": "get_org_id",
            "location": 35,
            "return": [
                "Optional[str]"
            ],
            "arguments": {}
        },
        "login": {
            "name": "login",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        }
    },
    "croud-master/croud/logout.py": {
        "logout": {
            "name": "logout",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        }
    },
    "croud-master/croud/me.py": {
        "me": {
            "name": "me",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "me_edit": {
            "name": "me_edit",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        }
    },
    "croud-master/croud/parser.py": {
        "add_default_args": {
            "name": "add_default_args",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "argparse.ArgumentParser"
                ],
                "omit": [
                    "Set[str]"
                ]
            }
        },
        "help_print_factory": {
            "name": "help_print_factory",
            "location": 155,
            "return": [
                "Callable"
            ],
            "arguments": {
                "parser": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "add_subparser": {
            "name": "add_subparser",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "argparse.ArgumentParser"
                ],
                "tree": [
                    "str",
                    "Optional[Mapping[str, 'RuntimeConfig']]",
                    "list",
                    "Mapping[str, str]"
                ],
                "name": [
                    "typing.Text",
                    "str",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "create_parser": {
            "name": "create_parser",
            "location": 189,
            "return": [
                "CroudCliArgumentParser"
            ],
            "arguments": {
                "tree": [
                    "str",
                    "argparse.ArgumentParser",
                    "Callable[[str], bool]",
                    "argparse.Namespace",
                    "config.Project"
                ]
            }
        },
        "Argument.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Argument.add_to_parser": {
            "name": "add_to_parser",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "argparse._ActionsContainer"
                ]
            }
        },
        "Argument.required": {
            "name": "required",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Argument.positional": {
            "name": "positional",
            "location": 63,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CroudCliArgumentParser.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CroudCliArgumentParser.error": {
            "name": "error",
            "location": 88,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "CroudCliHelpFormatter._format_action": {
            "name": "_format_action",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "CroudCliHelpFormatter._format_action_invocation": {
            "name": "_format_action_invocation",
            "location": 102,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "argparse.ArgumentParser",
                    "argparse._SubParsersAction"
                ]
            }
        },
        "CroudCliHelpFormatter._iter_indented_subactions": {
            "name": "_iter_indented_subactions",
            "location": 108,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "list[str]",
                    "argparse.Action",
                    "List[str]"
                ]
            }
        },
        "CroudCliHelpFormatter.add_usage": {
            "name": "add_usage",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "usage": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "actions": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "groups": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "prefix": [
                    "Optional[int]",
                    "None",
                    "str",
                    "Type",
                    "int",
                    "typing.Type"
                ]
            }
        },
        "help_print_factory.print_help": {
            "name": "print_help",
            "location": 156,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "croud-master/croud/printer.py": {
        "print_format": {
            "name": "print_format",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "rows": [
                    "Union[(Dict[(str, Any)], List[Dict[(str, Any)]])]"
                ],
                "format": [
                    "str"
                ],
                "keys": [
                    "Optional[List[str]]"
                ],
                "transforms": [
                    "Optional[Dict[(str, Callable[([Any], Any)])]]"
                ]
            }
        },
        "print_response": {
            "name": "print_response",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "Optional[bytes]",
                    "Dict[str, Optional[str]]",
                    "Sequence[Hashable]"
                ],
                "errors": [
                    "str",
                    "bytes",
                    "Optional[Any]",
                    "Optional[str]"
                ],
                "output_fmt": [
                    "List[Optional[Any]]",
                    "List[str]",
                    "int",
                    "Optional[int]",
                    "Iterable[T_co]",
                    "Union[float, str]"
                ],
                "success_message": [
                    "str"
                ],
                "keys": [
                    "List[str]"
                ],
                "transforms": [
                    "Dict[(str, Callable[([Any], Any)])]"
                ]
            }
        },
        "print_raw": {
            "name": "print_raw",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [
                    "Union[(str, List[str])]"
                ]
            }
        },
        "print_error": {
            "name": "print_error",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "print_info": {
            "name": "print_info",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "print_warning": {
            "name": "print_warning",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "print_success": {
            "name": "print_success",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "FormatPrinter.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "Optional[List[str]]"
                ],
                "transforms": [
                    "Optional[Dict[(str, Callable[([Any], Any)])]]"
                ]
            }
        },
        "FormatPrinter.print_rows": {
            "name": "print_rows",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rows": [
                    "Union[(Dict[(str, Any)], List[Dict[(str, Any)]])]"
                ]
            }
        },
        "FormatPrinter.format_rows": {
            "name": "format_rows",
            "location": 121,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "rows": [
                    "Union[(Dict[(str, Any)], List[Dict[(str, Any)]])]"
                ]
            }
        },
        "JsonFormatPrinter.format_rows": {
            "name": "format_rows",
            "location": 126,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "rows": [
                    "Union[(Dict[(str, Any)], List[Dict[(str, Any)]])]"
                ]
            }
        },
        "TableFormatPrinter.format_rows": {
            "name": "format_rows",
            "location": 134,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "rows": [
                    "Union[(Dict[(str, Any)], List[Dict[(str, Any)]])]"
                ]
            }
        },
        "TableFormatPrinter._filter_record": {
            "name": "_filter_record",
            "location": 174,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict"
                ],
                "keys": [
                    "List[str]"
                ]
            }
        },
        "TableFormatPrinter._identity_transform": {
            "name": "_identity_transform",
            "location": 183,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "field": [
                    "_T0"
                ]
            }
        },
        "YamlFormatPrinter.format_rows": {
            "name": "format_rows",
            "location": 203,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "rows": [
                    "Union[(Dict[(str, Any)], List[Dict[(str, Any)]])]"
                ]
            }
        }
    },
    "croud-master/croud/server.py": {
        "SetTokenHTTPServer.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "on_token": [
                    "Callable[([str], None)]"
                ]
            }
        },
        "SetTokenHandler.do_GET": {
            "name": "do_GET",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetTokenHandler.log_request": {
            "name": "log_request",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "on_token": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "random_port": [
                    "bool"
                ]
            }
        },
        "Server.start_in_background": {
            "name": "start_in_background",
            "location": 85,
            "return": [
                "Server"
            ],
            "arguments": {
                "self": [
                    "_TServer"
                ]
            }
        },
        "Server.wait_for_shutdown": {
            "name": "wait_for_shutdown",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "str",
                    "None",
                    "int",
                    "float",
                    "Optional[float]",
                    "dict",
                    "dict[, ]",
                    "List[str]",
                    "list[str]",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "Server.port": {
            "name": "port",
            "location": 93,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "croud-master/croud/typing.py": {},
    "croud-master/croud/util.py": {
        "can_launch_browser": {
            "name": "can_launch_browser",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "is_wsl": {
            "name": "is_wsl",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "platform_name": [
                    "str"
                ],
                "release": [
                    "str"
                ]
            }
        },
        "get_platform_info": {
            "name": "get_platform_info",
            "location": 66,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {}
        },
        "open_page_in_browser": {
            "name": "open_page_in_browser",
            "location": 75,
            "return": [
                "int"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "confirm_prompt": {
            "name": "confirm_prompt",
            "location": 87,
            "return": [
                "bool"
            ],
            "arguments": {
                "msg": [
                    "dict"
                ]
            }
        },
        "require_confirmation": {
            "name": "require_confirmation",
            "location": 93,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "confirm_msg": [
                    "str"
                ],
                "cancel_msg": [
                    "str",
                    "typing.Text"
                ]
            }
        },
        "org_id_config_fallback": {
            "name": "org_id_config_fallback",
            "location": 114,
            "return": [
                "Callable[([argparse.Namespace], Any)]"
            ],
            "arguments": {
                "cmd": [
                    "bool",
                    "str",
                    "list",
                    "list[]"
                ]
            }
        },
        "require_confirmation._inner": {
            "name": "_inner",
            "location": 96,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cmd": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "org_id_config_fallback._wrapper": {
            "name": "_wrapper",
            "location": 116,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cmd_args": [
                    "argparse.Namespace",
                    "dict",
                    "tuple"
                ]
            }
        },
        "require_confirmation._inner._wrapper": {
            "name": "_wrapper",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd_args": []
            }
        }
    },
    "croud-master/croud/__init__.py": {},
    "croud-master/croud/__main__.py": {
        "get_parser": {
            "name": "get_parser",
            "location": 823,
            "return": [
                "croud.parser.CroudCliArgumentParser"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 831,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "croud-master/croud/clusters/commands.py": {
        "clusters_get": {
            "name": "clusters_get",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "clusters_list": {
            "name": "clusters_list",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "clusters_deploy": {
            "name": "clusters_deploy",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "clusters_scale": {
            "name": "clusters_scale",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "clusters_upgrade": {
            "name": "clusters_upgrade",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "clusters_delete": {
            "name": "clusters_delete",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "clusters_restart_node": {
            "name": "clusters_restart_node",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "clusters_set_deletion_protection": {
            "name": "clusters_set_deletion_protection",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "clusters_set_suspended": {
            "name": "clusters_set_suspended",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "clusters_set_ip_whitelist": {
            "name": "clusters_set_ip_whitelist",
            "location": 277,
            "return": [
                "bytes",
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "_disk_size_transform": {
            "name": "_disk_size_transform",
            "location": 322,
            "return": [
                "str"
            ],
            "arguments": {
                "field": [
                    "bytes",
                    "str",
                    "typing.AnyStr",
                    "memoryview",
                    "AnyStr",
                    "bool",
                    "allennlp.common.util.JsonDict",
                    "typing.TextIO",
                    "typing.Mapping",
                    "TextIO",
                    "Mapping"
                ]
            }
        },
        "clusters_expand_storage": {
            "name": "clusters_expand_storage",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "_handle_edge_params": {
            "name": "_handle_edge_params",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "body": [
                    "str",
                    "Type",
                    "Iterable[Any]",
                    "Iterable[str]",
                    "Dict[str, str]",
                    "List[str]",
                    "dict"
                ],
                "args": []
            }
        },
        "_get_operation_status": {
            "name": "_get_operation_status",
            "location": 387,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "client": [
                    "croud.api.Client"
                ],
                "cluster_id": [
                    "str"
                ],
                "request_params": [
                    "dict"
                ]
            }
        },
        "_wait_for_completed_operation": {
            "name": "_wait_for_completed_operation",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_lookup_organization_id_for_project": {
            "name": "_lookup_organization_id_for_project",
            "location": 438,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "client": [
                    "croud.api.Client"
                ],
                "args": [
                    "argparse.Namespace"
                ],
                "project_id": [
                    "str"
                ]
            }
        }
    },
    "croud-master/croud/clusters/exceptions.py": {},
    "croud-master/croud/clusters/__init__.py": {},
    "croud-master/croud/config/commands.py": {
        "config_add_profile": {
            "name": "config_add_profile",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "config_current_profile": {
            "name": "config_current_profile",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "config_remove_profile": {
            "name": "config_remove_profile",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "config_set_profile": {
            "name": "config_set_profile",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "config_show": {
            "name": "config_show",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        }
    },
    "croud-master/croud/config/configuration.py": {
        "Configuration.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "path": [
                    "Optional[pathlib.Path]"
                ]
            }
        },
        "Configuration.config": {
            "name": "config",
            "location": 71,
            "return": [
                "dict[, ]",
                "str",
                "dict[str, typing.Any]",
                "Optional[dict]",
                "typing.NamedTuple",
                "app.config.MQConfig",
                "dict[str, str]",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration.name": {
            "name": "name",
            "location": 77,
            "return": [
                "dict",
                "type",
                "str",
                "Set[str]",
                "Mapping[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration.endpoint": {
            "name": "endpoint",
            "location": 81,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration.format": {
            "name": "format",
            "location": 85,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration.token": {
            "name": "token",
            "location": 89,
            "return": [
                "int",
                "Dict[str, Any]",
                "List[str]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration.region": {
            "name": "region",
            "location": 93,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration.organization": {
            "name": "organization",
            "location": 97,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration.profile": {
            "name": "profile",
            "location": 101,
            "return": [
                "str",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration.profiles": {
            "name": "profiles",
            "location": 105,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "revlibs.connections.config.Config",
                "qutebrowser.config.config.Config"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration.load": {
            "name": "load",
            "location": 108,
            "return": [
                "Dict[(str, Union[(str, Dict[(str, Dict[(str, Optional[str])])])])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration.is_valid": {
            "name": "is_valid",
            "location": 124,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration.dump": {
            "name": "dump",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration._set_profile_option": {
            "name": "_set_profile_option",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "profile": [
                    "str"
                ],
                "attr": [
                    "str"
                ],
                "value": [
                    "str",
                    "int",
                    "Optional[Callable[[Any, Any], None]]",
                    "typing.Callable[Any,Any, None]",
                    "None"
                ]
            }
        },
        "Configuration.set_organization_id": {
            "name": "set_organization_id",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "profile": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "Configuration.set_current_organization_id": {
            "name": "set_current_organization_id",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "Configuration.set_auth_token": {
            "name": "set_auth_token",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "profile": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "Configuration.set_current_auth_token": {
            "name": "set_current_auth_token",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "Configuration.set_format": {
            "name": "set_format",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "profile": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "Configuration.set_current_format": {
            "name": "set_current_format",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "Configuration.add_profile": {
            "name": "add_profile",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "profile": [
                    "str"
                ]
            }
        },
        "Configuration.update_profile": {
            "name": "update_profile",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "profile": [
                    "str"
                ],
                "data": [
                    "dict"
                ]
            }
        },
        "Configuration.remove_profile": {
            "name": "remove_profile",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "profile": [
                    "str"
                ]
            }
        },
        "Configuration.use_profile": {
            "name": "use_profile",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "profile": [
                    "str"
                ]
            }
        }
    },
    "croud-master/croud/config/exceptions.py": {},
    "croud-master/croud/config/schemas.py": {
        "ConfigSchema.validate_current_profile": {
            "name": "validate_current_profile",
            "location": 61,
            "return": [
                "bytes",
                "str",
                "list[]",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "Dict[str, Any]",
                    "list[]",
                    "str",
                    "list",
                    "Optional[Dict[str, Any]]",
                    "dict"
                ]
            }
        }
    },
    "croud-master/croud/config/types.py": {},
    "croud-master/croud/config/util.py": {
        "clean_dict": {
            "name": "clean_dict",
            "location": 26,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "data": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "clean_dict.clean": {
            "name": "clean",
            "location": 37,
            "return": [
                "typing.Text",
                "str",
                "list[]",
                "Tuple[float, float]",
                "dict[, ]",
                "Dict[str, Any]",
                "Optional[int]"
            ],
            "arguments": {
                "k": [
                    "dict",
                    "bytes"
                ],
                "v": [
                    "List[List]",
                    "str"
                ]
            }
        }
    },
    "croud-master/croud/config/__init__.py": {
        "_get_config": {
            "name": "_get_config",
            "location": 32,
            "return": [
                "croud.config.configuration.Configuration"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "get_output_format": {
            "name": "get_output_format",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "WeakConfigProxy.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "getter": [
                    "str",
                    "Mapping",
                    "typing.Mapping"
                ]
            }
        },
        "WeakConfigProxy.__repr__": {
            "name": "__repr__",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WeakConfigProxy.__getattr__": {
            "name": "__getattr__",
            "location": 60,
            "return": [
                "Optional[str]",
                "str",
                "Optional[BaseException]",
                "Dict[str, Any]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "WeakConfigProxy.__setattr__": {
            "name": "__setattr__",
            "location": 63,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        }
    },
    "croud-master/croud/consumers/__init__.py": {},
    "croud-master/croud/organizations/commands.py": {
        "organizations_create": {
            "name": "organizations_create",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "organizations_edit": {
            "name": "organizations_edit",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "organizations_get": {
            "name": "organizations_get",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "organizations_list": {
            "name": "organizations_list",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "organizations_delete": {
            "name": "organizations_delete",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "croud-master/croud/organizations/__init__.py": {},
    "croud-master/croud/organizations/auditlogs/commands.py": {
        "actor_id_transform": {
            "name": "actor_id_transform",
            "location": 39,
            "return": [
                "typing.Text",
                "str",
                "int"
            ],
            "arguments": {
                "field": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "argparse.Namespace"
                ]
            }
        },
        "auditlogs_list": {
            "name": "auditlogs_list",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "croud-master/croud/organizations/auditlogs/__init__.py": {},
    "croud-master/croud/organizations/users/commands.py": {
        "org_users_add": {
            "name": "org_users_add",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "role_fqn_transform": {
            "name": "role_fqn_transform",
            "location": 52,
            "return": [
                "str",
                "List[str]",
                "Sequence[str]"
            ],
            "arguments": {
                "field": [
                    "str",
                    "bool",
                    "Iterable[Tuple[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "org_users_list": {
            "name": "org_users_list",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "org_users_remove": {
            "name": "org_users_remove",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "croud-master/croud/organizations/users/__init__.py": {},
    "croud-master/croud/products/commands.py": {
        "products_list": {
            "name": "products_list",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        }
    },
    "croud-master/croud/products/__init__.py": {},
    "croud-master/croud/projects/commands.py": {
        "project_create": {
            "name": "project_create",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "project_delete": {
            "name": "project_delete",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "project_edit": {
            "name": "project_edit",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "projects_get": {
            "name": "projects_get",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "projects_list": {
            "name": "projects_list",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "_handle_custom_backups": {
            "name": "_handle_custom_backups",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "body": [
                    "str",
                    "List[str]"
                ],
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "_transform_backup_location": {
            "name": "_transform_backup_location",
            "location": 122,
            "return": [
                "str"
            ],
            "arguments": {
                "field": [
                    "list[str]",
                    "str",
                    "List[str]",
                    "Container[str]",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        }
    },
    "croud-master/croud/projects/__init__.py": {},
    "croud-master/croud/projects/users/commands.py": {
        "project_users_add": {
            "name": "project_users_add",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "role_fqn_transform": {
            "name": "role_fqn_transform",
            "location": 48,
            "return": [
                "str",
                "List[str]",
                "Sequence[str]"
            ],
            "arguments": {
                "field": [
                    "str",
                    "bool",
                    "Iterable[Tuple[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "project_users_list": {
            "name": "project_users_list",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "project_users_remove": {
            "name": "project_users_remove",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        }
    },
    "croud-master/croud/projects/users/__init__.py": {},
    "croud-master/croud/regions/commands.py": {
        "regions_list": {
            "name": "regions_list",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "regions_create": {
            "name": "regions_create",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "regions_delete": {
            "name": "regions_delete",
            "location": 110,
            "return": [
                "set",
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "croud-master/croud/regions/__init__.py": {},
    "croud-master/croud/subscriptions/commands.py": {
        "subscriptions_get": {
            "name": "subscriptions_get",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "subscriptions_list": {
            "name": "subscriptions_list",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        }
    },
    "croud-master/croud/subscriptions/__init__.py": {},
    "croud-master/croud/tools/spinner.py": {},
    "croud-master/croud/tools/__init__.py": {},
    "croud-master/croud/users/commands.py": {
        "transform_roles_list": {
            "name": "transform_roles_list",
            "location": 27,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "bool"
                ]
            }
        },
        "users_list": {
            "name": "users_list",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "transform_roles_list._transform": {
            "name": "_transform",
            "location": 28,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "field": [
                    "dict",
                    "list",
                    "Sequence",
                    "Dict[str, str]",
                    "str"
                ]
            }
        }
    },
    "croud-master/croud/users/__init__.py": {},
    "croud-master/croud/users/roles/commands.py": {
        "roles_list": {
            "name": "roles_list",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        }
    },
    "croud-master/croud/users/roles/__init__.py": {},
    "croud-master/docs/conf.py": {},
    "croud-master/tests/conftest.py": {
        "fake_cratedb_cloud": {
            "name": "fake_cratedb_cloud",
            "location": 35,
            "return": [
                "",
                "typing.Generator[FakeCrateDBCloud]"
            ],
            "arguments": {}
        },
        "config": {
            "name": "config",
            "location": 41,
            "return": [
                "",
                "typing.Generator[Configuration]"
            ],
            "arguments": {
                "fake_cratedb_cloud": [
                    "str",
                    "float",
                    "dict[, ]",
                    "baseplate.lib.secrets.SecretsStore",
                    "dict"
                ],
                "tmp_path": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "client": {
            "name": "client",
            "location": 54,
            "return": [
                "",
                "typing.Generator[Client]"
            ],
            "arguments": {
                "fake_cratedb_cloud": [
                    "dict[str, typing.Any]",
                    "int",
                    "Dict[str, Any]",
                    "bool"
                ],
                "config": [
                    "dict[str, typing.Any]",
                    "config.Config",
                    "Dict[str, Any]",
                    "pyramid.config.Configurator"
                ]
            }
        }
    },
    "croud-master/tests/test_api.py": {
        "test_send_success_sets_data_with_key": {
            "name": "test_send_success_sets_data_with_key",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "croud.api.Client"
                ]
            }
        },
        "test_send_success_sets_data_without_key": {
            "name": "test_send_success_sets_data_without_key",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "croud.api.Client"
                ]
            }
        },
        "test_send_error_sets_error": {
            "name": "test_send_error_sets_error",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "croud.api.Client"
                ]
            }
        },
        "test_send_text_response": {
            "name": "test_send_text_response",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "croud.api.Client"
                ]
            }
        },
        "test_send_empty_response": {
            "name": "test_send_empty_response",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "croud.api.Client"
                ]
            }
        },
        "test_send_redirect_response": {
            "name": "test_send_redirect_response",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "croud.api.Client"
                ],
                "capsys": [
                    "str",
                    "bool",
                    "baseplate.lib.metrics.Client",
                    "raven.Client"
                ]
            }
        },
        "test_send_new_token_response": {
            "name": "test_send_new_token_response",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "croud.api.Client"
                ],
                "config": [
                    "neuromation.api.Client",
                    "croud.api.Client"
                ]
            }
        },
        "test_send_sudo_header": {
            "name": "test_send_sudo_header",
            "location": 74,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sudo": [
                    "neuromation.api.Client"
                ],
                "config": []
            }
        },
        "test_send_user_agent_header": {
            "name": "test_send_user_agent_header",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "neuromation.api.Config"
                ]
            }
        },
        "test_send_region_header": {
            "name": "test_send_region_header",
            "location": 90,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "argument": [],
                "is_header_present": [],
                "config": []
            }
        },
        "test_client_initialization": {
            "name": "test_client_initialization",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "bytes",
                    "dict[, ]",
                    "suitable.api.Api",
                    "typing.Mapping",
                    "dict",
                    "Mapping"
                ]
            }
        },
        "test_error_message_on_connection_error": {
            "name": "test_error_message_on_connection_error",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "suitable.api.Api"
                ]
            }
        }
    },
    "croud-master/tests/test_configuration.py": {
        "test_clean_dict": {
            "name": "test_clean_dict",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "source": [
                    "str",
                    "bytes",
                    "int",
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "None"
                ],
                "cleaned": [
                    "str",
                    "bytes",
                    "int",
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_config_proxy_calls_ref_with_args_kwargs": {
            "name": "test_config_proxy_calls_ref_with_args_kwargs",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_config_proxy_gets_ref_attributes": {
            "name": "test_config_proxy_gets_ref_attributes",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_config_proxy_cannot_set_attribute": {
            "name": "test_config_proxy_cannot_set_attribute",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_default_configuration_instance": {
            "name": "test_default_configuration_instance",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "test_load_dump_configuration": {
            "name": "test_load_dump_configuration",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir_factory": [
                    "pathlib.Path"
                ]
            }
        },
        "test_load_invalid_configuration": {
            "name": "test_load_invalid_configuration",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "test_use_profile": {
            "name": "test_use_profile",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "networkmonitor.src.configuration.IConfig",
                    "evtstrd.config.Config",
                    "dict",
                    "pymap.config.IMAPConfig",
                    "config.config_reader.CustomConfigParser",
                    "pyramid.config.Configurator",
                    "baseplate.lib.config.ConfigNamespace"
                ]
            }
        },
        "test_add_profile": {
            "name": "test_add_profile",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "pymap.config.IMAPConfig",
                    "dict",
                    "evtstrd.config.Config",
                    "Dict[str, Any]",
                    "pyramid.config.Configurator"
                ]
            }
        },
        "test_add_profile_duplicate": {
            "name": "test_add_profile_duplicate",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "pyramid.config.Configurator",
                    "Mapping[str, Any]",
                    "cmk.base.config.HostConfig"
                ]
            }
        },
        "test_remove_profile": {
            "name": "test_remove_profile",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "config.config_reader.CustomConfigParser",
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "baseplate.lib.config.ConfigNamespace",
                    "sphinx.config.Config"
                ]
            }
        },
        "test_remove_profile_does_not_exist": {
            "name": "test_remove_profile_does_not_exist",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "sphinx.config.Config",
                    "virgene.config.Config",
                    "dict"
                ]
            }
        },
        "test_remove_profile_current": {
            "name": "test_remove_profile_current",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "dict[str, typing.Any]",
                    "config.config_reader.CustomConfigParser",
                    "dict[, ]",
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "baseplate.lib.config.ConfigNamespace",
                    "sphinx.config.Config"
                ]
            }
        },
        "test_set_profile_options": {
            "name": "test_set_profile_options",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, str]",
                    "pyramid.config.Configurator",
                    "config.Config",
                    "lightbus.config.Config",
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "test_default_format": {
            "name": "test_default_format",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "pyramid.config.Configurator",
                    "dict",
                    "config.Config",
                    "pymap.config.IMAPConfig"
                ]
            }
        },
        "test_config_proxy_gets_ref_attributes.getter": {
            "name": "getter",
            "location": 63,
            "return": [],
            "arguments": {}
        },
        "test_config_proxy_cannot_set_attribute.getter": {
            "name": "getter",
            "location": 73,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "croud-master/tests/test_config_schemas.py": {
        "test_load_profile_schema_valid": {
            "name": "test_load_profile_schema_valid",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "list[str]",
                    "List[str]",
                    "dict[str, typing.Union[str,bool]]",
                    "Dict[str, Union[str, bool]]",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "test_load_profile_schema_invalid": {
            "name": "test_load_profile_schema_invalid",
            "location": 82,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "data": [
                    "werkzeug.exceptions.HTTPException",
                    "dict[, ]",
                    "Optional[Dict]",
                    "None",
                    "Optional[str]",
                    "bytes",
                    "str",
                    "Optional",
                    "typing.Optional[]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "errors": [
                    "str",
                    "bool",
                    "Mapping[configuration.Settings, str]",
                    "typing.Mapping"
                ]
            }
        },
        "test_load_config_schema_valid": {
            "name": "test_load_config_schema_valid",
            "location": 102,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "data": [
                    "dict[, ]",
                    "bytes",
                    "dict",
                    "str",
                    "dict[str, typing.Union[str,bool]]",
                    "Dict[str, Union[str, bool]]",
                    "list[list[str]]",
                    "List[List[str]]",
                    "\"HexpySession\""
                ]
            }
        },
        "test_load_config_schema_invalid": {
            "name": "test_load_config_schema_invalid",
            "location": 130,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "data": [
                    "Optional[Tuple[str]]",
                    "tuple[str]",
                    "dict",
                    "str",
                    "None",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "errors": [
                    "str",
                    "bool",
                    "Mapping[configuration.Settings, str]",
                    "bytes",
                    "typing.Mapping"
                ]
            }
        }
    },
    "croud-master/tests/test_parser.py": {
        "noop": {
            "name": "noop",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "TestParser.test_parser_instance_help": {
            "name": "test_parser_instance_help",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_parser_list_commands": {
            "name": "test_parser_list_commands",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_parser_argument_groups": {
            "name": "test_parser_argument_groups",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capsys": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "Optional[Any]"
                ]
            }
        },
        "TestParser.test_parser_version": {
            "name": "test_parser_version",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_help": {
            "name": "test_help",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_no_args": {
            "name": "test_no_args",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_commands_without_args": {
            "name": "test_commands_without_args",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_commands_with_args": {
            "name": "test_commands_with_args",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_commands_with_subcommands": {
            "name": "test_commands_with_subcommands",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_default_arguments": {
            "name": "test_default_arguments",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_default_sudo_argument": {
            "name": "test_default_sudo_argument",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "croud-master/tests/test_printer.py": {
        "test_json_format": {
            "name": "test_json_format",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "rows": [
                    "str",
                    "int"
                ],
                "expected": [
                    "float",
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "test_yaml_format": {
            "name": "test_yaml_format",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "rows": [
                    "str",
                    "int"
                ],
                "expected": [
                    "float",
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "test_tabular_format": {
            "name": "test_tabular_format",
            "location": 186,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "rows": [
                    "str"
                ],
                "keys": [
                    "str"
                ],
                "transforms": [
                    "str"
                ],
                "expected": [
                    "bool",
                    "str",
                    "None",
                    "int",
                    "Optional[bool]"
                ]
            }
        },
        "test_wide_format": {
            "name": "test_wide_format",
            "location": 222,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "rows": [
                    "str",
                    "typing.Callable[T, bool]",
                    "Callable[[T], bool]",
                    "Callable[[], bool]"
                ],
                "keys": [
                    "str",
                    "typing.Callable[T, bool]",
                    "Callable[[T], bool]",
                    "Callable[[], bool]"
                ],
                "transforms": [
                    "str",
                    "typing.Callable[T, bool]",
                    "Callable[[T], bool]",
                    "Callable[[], bool]"
                ],
                "expected": [
                    "bool",
                    "str",
                    "None",
                    "int",
                    "Optional[bool]"
                ]
            }
        },
        "test_print_response": {
            "name": "test_print_response",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [
                    "bool"
                ]
            }
        },
        "test_print_response_success_message": {
            "name": "test_print_response_success_message",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [
                    "int"
                ]
            }
        },
        "test_print_response_error": {
            "name": "test_print_response_error",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [
                    "int"
                ]
            }
        },
        "test_print_response_data_success": {
            "name": "test_print_response_data_success",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [
                    "Dict[str, Sequence[Any]]",
                    "str"
                ]
            }
        }
    },
    "croud-master/tests/test_server.py": {
        "test_token_handler_and_login": {
            "name": "test_token_handler_and_login",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "qs": [
                    "str"
                ],
                "status_code": [
                    "int"
                ],
                "message": [
                    "str",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]",
                    "None"
                ],
                "token_value": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "None",
                    "Optional[Dict[str, Any]]",
                    "str",
                    "Optional[object]",
                    "Optional[str]"
                ]
            }
        },
        "test_token_handler_and_login.on_token": {
            "name": "on_token",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "token": [
                    "str",
                    "Tuple[int, str]"
                ]
            }
        }
    },
    "croud-master/tests/test_util.py": {
        "test_open_page_in_browser": {
            "name": "test_open_page_in_browser",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "subprocess_call_mock": [],
                "webbrowser_open_mock": []
            }
        },
        "test_can_launch_browser": {
            "name": "test_can_launch_browser",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "webbrowser_get_mock": [
                    "mock.MagicMock"
                ],
                "get_platform_mock": []
            }
        },
        "test_confirm_prompt": {
            "name": "test_confirm_prompt",
            "location": 106,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "msg": [
                    "bool",
                    "List[List[int]]",
                    "list[list[int]]"
                ],
                "response": [],
                "is_confirmed": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_require_confirmation": {
            "name": "test_require_confirmation",
            "location": 120,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "confirm_msg": [
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "cancel_msg": [
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "args_yes_value": [
                    "list[str]",
                    "List[str]",
                    "argparse.ArgumentParser"
                ],
                "response": [
                    "int",
                    "str",
                    "None",
                    "static_frame.core.util.DtypeSpecifier",
                    "mock.MagicMock",
                    "Optional[str]"
                ],
                "output": [
                    "int",
                    "float"
                ],
                "capsys": [
                    "int"
                ]
            }
        },
        "test_org_id_config_fallback": {
            "name": "test_org_id_config_fallback",
            "location": 150,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "config_value": [
                    "dict",
                    "Exception",
                    "dict[, ]"
                ],
                "arg_value": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "expected": [
                    "str",
                    "int",
                    "List[Tuple[Any, Any]]",
                    "list[tuple[typing.Union[typing.Any,typing.Any]]]"
                ],
                "config": [
                    "dict",
                    "Exception",
                    "dict[, ]"
                ],
                "capsys": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "test_org_id_config_fallback_sudo": {
            "name": "test_org_id_config_fallback_sudo",
            "location": 167,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "config_value": [
                    "dict",
                    "Exception",
                    "dict[, ]"
                ],
                "arg_value": [
                    "type",
                    "typing.Type"
                ],
                "expected": [
                    "str"
                ],
                "config": [
                    "dict",
                    "Exception",
                    "dict[, ]"
                ],
                "capsys": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "test_require_confirmation.command": {
            "name": "command",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "test_org_id_config_fallback.command": {
            "name": "command",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "test_org_id_config_fallback_sudo.command": {
            "name": "command",
            "location": 171,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "croud-master/tests/__init__.py": {},
    "croud-master/tests/commands/test_clusters.py": {
        "test_clusers_list": {
            "name": "test_clusers_list",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": []
            }
        },
        "test_clusers_get": {
            "name": "test_clusers_get",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": []
            }
        },
        "test_clusers_list_with_project_id": {
            "name": "test_clusers_list_with_project_id",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": []
            }
        },
        "test_clusters_list_with_organization_id": {
            "name": "test_clusters_list_with_organization_id",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": [
                    "neuromation.api.Client"
                ]
            }
        },
        "test_clusters_deploy": {
            "name": "test_clusters_deploy",
            "location": 74,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "_mock_sleep": [
                    "list[T]",
                    "str",
                    "mock.MagicMock",
                    "mock.Mock",
                    "List[T]"
                ],
                "mock_request": [],
                "status": [
                    "list[T]",
                    "str",
                    "mock.MagicMock",
                    "mock.Mock",
                    "List[T]"
                ]
            }
        },
        "test_clusters_deploy_fails": {
            "name": "test_clusters_deploy_fails",
            "location": 150,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": [],
                "capsys": [
                    "Tuple[paradigm.models.Base, tests.utils.Args]"
                ]
            }
        },
        "test_clusters_edge": {
            "name": "test_clusters_edge",
            "location": 205,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "_mock_sleep": [
                    "mock.Mock"
                ],
                "mock_request": []
            }
        },
        "test_clusters_deploy_no_unit": {
            "name": "test_clusters_deploy_no_unit",
            "location": 300,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "_mock_sleep": [
                    "mock.Mock"
                ],
                "mock_request": [
                    "mock.Mock"
                ]
            }
        },
        "test_clusters_deploy_nightly": {
            "name": "test_clusters_deploy_nightly",
            "location": 375,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "_mock_sleep": [
                    "mock.Mock"
                ],
                "mock_request": []
            }
        },
        "test_clusters_scale": {
            "name": "test_clusters_scale",
            "location": 450,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "_mock_sleep": [
                    "list[T]",
                    "str",
                    "mock.MagicMock",
                    "mock.Mock",
                    "List[T]"
                ],
                "mock_request": [],
                "status": [
                    "list[T]",
                    "str",
                    "mock.MagicMock",
                    "mock.Mock",
                    "List[T]"
                ]
            }
        },
        "test_cluster_scale_fails": {
            "name": "test_cluster_scale_fails",
            "location": 493,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": [],
                "capsys": [
                    "Tuple[paradigm.models.Base, tests.utils.Args]"
                ]
            }
        },
        "test_clusters_upgrade": {
            "name": "test_clusters_upgrade",
            "location": 521,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "_mock_sleep": [
                    "list[T]",
                    "str",
                    "mock.MagicMock",
                    "mock.Mock",
                    "List[T]"
                ],
                "mock_request": [],
                "status": [
                    "list[T]",
                    "str",
                    "mock.MagicMock",
                    "mock.Mock",
                    "List[T]"
                ]
            }
        },
        "test_cluster_upgrade_fails": {
            "name": "test_cluster_upgrade_fails",
            "location": 563,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": [],
                "capsys": [
                    "Tuple[paradigm.models.Base, tests.utils.Args]"
                ]
            }
        },
        "test_clusters_delete": {
            "name": "test_clusters_delete",
            "location": 586,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": [
                    "neuromation.api.Client"
                ],
                "capsys": []
            }
        },
        "test_clusters_delete_flag": {
            "name": "test_clusters_delete_flag",
            "location": 601,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": [
                    "neuromation.api.Client"
                ],
                "capsys": []
            }
        },
        "test_clusters_delete_aborted": {
            "name": "test_clusters_delete_aborted",
            "location": 614,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": [],
                "capsys": []
            }
        },
        "test_clusters_restart_node": {
            "name": "test_clusters_restart_node",
            "location": 628,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "neuromation.api.Client"
                ]
            }
        },
        "test_clusters_set_deletion_protection": {
            "name": "test_clusters_set_deletion_protection",
            "location": 648,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": [
                    "neuromation.api.Client"
                ]
            }
        },
        "test_clusters_set_ip_whitelist": {
            "name": "test_clusters_set_ip_whitelist",
            "location": 674,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "_mock_sleep": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "mock_request": [
                    "str"
                ],
                "status": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_clusters_reset_ip_whitelist": {
            "name": "test_clusters_reset_ip_whitelist",
            "location": 733,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "_mock_sleep": [
                    "list[T]",
                    "str",
                    "mock.MagicMock",
                    "mock.Mock",
                    "List[T]"
                ],
                "mock_request": [],
                "status": [
                    "list[T]",
                    "str",
                    "mock.MagicMock",
                    "mock.Mock",
                    "List[T]"
                ]
            }
        },
        "test_clusters_reset_ip_whitelist_fails": {
            "name": "test_clusters_reset_ip_whitelist_fails",
            "location": 783,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": [],
                "capsys": [
                    "Tuple[paradigm.models.Base, tests.utils.Args]"
                ]
            }
        },
        "test_clusters_expand_storage": {
            "name": "test_clusters_expand_storage",
            "location": 818,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "_mock_sleep": [
                    "list[T]",
                    "str",
                    "mock.MagicMock",
                    "mock.Mock",
                    "List[T]"
                ],
                "mock_request": [],
                "status": [
                    "list[T]",
                    "str",
                    "mock.MagicMock",
                    "mock.Mock",
                    "List[T]"
                ]
            }
        },
        "test_cluster_expand_storage_fails": {
            "name": "test_cluster_expand_storage_fails",
            "location": 868,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": [],
                "capsys": [
                    "Tuple[paradigm.models.Base, tests.utils.Args]"
                ]
            }
        },
        "test_clusters_suspend": {
            "name": "test_clusters_suspend",
            "location": 902,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "_mock_sleep": [
                    "list[T]",
                    "str",
                    "mock.MagicMock",
                    "mock.Mock",
                    "List[T]"
                ],
                "mock_request": [],
                "status": [
                    "list[T]",
                    "str",
                    "mock.MagicMock",
                    "mock.Mock",
                    "List[T]"
                ]
            }
        },
        "test_cluster_suspended_fails": {
            "name": "test_cluster_suspended_fails",
            "location": 952,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": [],
                "capsys": [
                    "Tuple[paradigm.models.Base, tests.utils.Args]"
                ]
            }
        },
        "test_clusters_deploy.mock_call": {
            "name": "mock_call",
            "location": 78,
            "return": [
                "tuple[typing.Optional[dict[typing.Text, ]]]",
                "tuple[typing.Optional[dict[typing.Text, typing.Text]]]",
                "tuple[None]",
                "tuple[typing.Optional[dict[typing.Text, list[dict[typing.Text, typing.Text]]]]]",
                "tuple[typing.Optional[dict[typing.Text, list[dict[typing.Text, None]]]]]"
            ],
            "arguments": {}
        },
        "test_clusters_deploy_fails.mock_call": {
            "name": "mock_call",
            "location": 153,
            "return": [
                "tuple[typing.Optional[dict[typing.Text, ]]]",
                "tuple[typing.Optional[dict[typing.Text, typing.Text]]]",
                "tuple[None]",
                "tuple[typing.Optional[dict[typing.Text, list[dict[typing.Text, typing.Text]]]]]",
                "tuple[typing.Optional[dict[typing.Text, list[dict[typing.Text, None]]]]]"
            ],
            "arguments": {}
        },
        "test_clusters_edge.mock_call": {
            "name": "mock_call",
            "location": 209,
            "return": [
                "tuple[typing.Optional[dict[typing.Text, ]]]",
                "tuple[typing.Optional[dict[typing.Text, typing.Text]]]",
                "tuple[None]",
                "tuple[typing.Optional[dict[typing.Text, list[dict[typing.Text, typing.Text]]]]]",
                "tuple[typing.Optional[dict[typing.Text, list[dict[typing.Text, None]]]]]"
            ],
            "arguments": {}
        },
        "test_clusters_deploy_no_unit.mock_call": {
            "name": "mock_call",
            "location": 304,
            "return": [
                "tuple[typing.Optional[dict[typing.Text, ]]]",
                "tuple[typing.Optional[dict[typing.Text, typing.Text]]]",
                "tuple[None]",
                "tuple[typing.Optional[dict[typing.Text, list[dict[typing.Text, typing.Text]]]]]",
                "tuple[typing.Optional[dict[typing.Text, list[dict[typing.Text, None]]]]]"
            ],
            "arguments": {}
        },
        "test_clusters_deploy_nightly.mock_call": {
            "name": "mock_call",
            "location": 379,
            "return": [
                "tuple[typing.Optional[dict[typing.Text, ]]]",
                "tuple[typing.Optional[dict[typing.Text, typing.Text]]]",
                "tuple[None]",
                "tuple[typing.Optional[dict[typing.Text, list[dict[typing.Text, typing.Text]]]]]",
                "tuple[typing.Optional[dict[typing.Text, list[dict[typing.Text, None]]]]]"
            ],
            "arguments": {}
        },
        "test_clusters_scale.mock_call": {
            "name": "mock_call",
            "location": 454,
            "return": [
                "tuple[typing.Optional[dict[typing.Text, ]]]",
                "tuple[typing.Optional[dict[typing.Text, typing.Text]]]",
                "tuple[None]",
                "tuple[typing.Optional[dict[typing.Text, list[dict[typing.Text, typing.Text]]]]]",
                "tuple[typing.Optional[dict[typing.Text, list[dict[typing.Text, None]]]]]"
            ],
            "arguments": {}
        },
        "test_cluster_scale_fails.mock_call": {
            "name": "mock_call",
            "location": 497,
            "return": [
                "tuple[typing.Optional[dict[typing.Text, ]]]",
                "tuple[typing.Optional[dict[typing.Text, typing.Text]]]",
                "tuple[None]",
                "tuple[typing.Optional[dict[typing.Text, list[dict[typing.Text, typing.Text]]]]]",
                "tuple[typing.Optional[dict[typing.Text, list[dict[typing.Text, None]]]]]"
            ],
            "arguments": {}
        },
        "test_clusters_upgrade.mock_call": {
            "name": "mock_call",
            "location": 525,
            "return": [
                "tuple[typing.Optional[dict[typing.Text, ]]]",
                "tuple[typing.Optional[dict[typing.Text, typing.Text]]]",
                "tuple[None]",
                "tuple[typing.Optional[dict[typing.Text, list[dict[typing.Text, typing.Text]]]]]",
                "tuple[typing.Optional[dict[typing.Text, list[dict[typing.Text, None]]]]]"
            ],
            "arguments": {}
        },
        "test_cluster_upgrade_fails.mock_call": {
            "name": "mock_call",
            "location": 567,
            "return": [
                "tuple[typing.Optional[dict[typing.Text, ]]]",
                "tuple[typing.Optional[dict[typing.Text, typing.Text]]]",
                "tuple[None]",
                "tuple[typing.Optional[dict[typing.Text, list[dict[typing.Text, typing.Text]]]]]",
                "tuple[typing.Optional[dict[typing.Text, list[dict[typing.Text, None]]]]]"
            ],
            "arguments": {}
        },
        "test_clusters_set_ip_whitelist.mock_call": {
            "name": "mock_call",
            "location": 678,
            "return": [
                "tuple[typing.Optional[dict[typing.Text, ]]]",
                "tuple[typing.Optional[dict[typing.Text, typing.Text]]]",
                "tuple[None]",
                "tuple[typing.Optional[dict[typing.Text, list[dict[typing.Text, typing.Text]]]]]",
                "tuple[typing.Optional[dict[typing.Text, list[dict[typing.Text, None]]]]]"
            ],
            "arguments": {}
        },
        "test_clusters_reset_ip_whitelist.mock_call": {
            "name": "mock_call",
            "location": 737,
            "return": [
                "tuple[typing.Optional[dict[typing.Text, ]]]",
                "tuple[typing.Optional[dict[typing.Text, typing.Text]]]",
                "tuple[None]",
                "tuple[typing.Optional[dict[typing.Text, list[dict[typing.Text, typing.Text]]]]]",
                "tuple[typing.Optional[dict[typing.Text, list[dict[typing.Text, None]]]]]"
            ],
            "arguments": {}
        },
        "test_clusters_reset_ip_whitelist_fails.mock_call": {
            "name": "mock_call",
            "location": 787,
            "return": [
                "tuple[typing.Optional[dict[typing.Text, ]]]",
                "tuple[typing.Optional[dict[typing.Text, typing.Text]]]",
                "tuple[None]",
                "tuple[typing.Optional[dict[typing.Text, list[dict[typing.Text, typing.Text]]]]]",
                "tuple[typing.Optional[dict[typing.Text, list[dict[typing.Text, None]]]]]"
            ],
            "arguments": {}
        },
        "test_clusters_expand_storage.mock_call": {
            "name": "mock_call",
            "location": 822,
            "return": [
                "tuple[typing.Optional[dict[typing.Text, ]]]",
                "tuple[typing.Optional[dict[typing.Text, typing.Text]]]",
                "tuple[None]",
                "tuple[typing.Optional[dict[typing.Text, list[dict[typing.Text, typing.Text]]]]]",
                "tuple[typing.Optional[dict[typing.Text, list[dict[typing.Text, None]]]]]"
            ],
            "arguments": {}
        },
        "test_cluster_expand_storage_fails.mock_call": {
            "name": "mock_call",
            "location": 872,
            "return": [
                "tuple[typing.Optional[dict[typing.Text, ]]]",
                "tuple[typing.Optional[dict[typing.Text, typing.Text]]]",
                "tuple[None]",
                "tuple[typing.Optional[dict[typing.Text, list[dict[typing.Text, typing.Text]]]]]",
                "tuple[typing.Optional[dict[typing.Text, list[dict[typing.Text, None]]]]]"
            ],
            "arguments": {}
        },
        "test_clusters_suspend.mock_call": {
            "name": "mock_call",
            "location": 906,
            "return": [
                "tuple[typing.Optional[dict[typing.Text, ]]]",
                "tuple[typing.Optional[dict[typing.Text, typing.Text]]]",
                "tuple[None]",
                "tuple[typing.Optional[dict[typing.Text, list[dict[typing.Text, typing.Text]]]]]",
                "tuple[typing.Optional[dict[typing.Text, list[dict[typing.Text, None]]]]]"
            ],
            "arguments": {}
        },
        "test_cluster_suspended_fails.mock_call": {
            "name": "mock_call",
            "location": 956,
            "return": [
                "bool",
                "str",
                "tuple[typing.Optional[dict[typing.Text, ]]]",
                "tuple[typing.Optional[dict[typing.Text, typing.Text]]]",
                "tuple[None]",
                "tuple[typing.Optional[dict[typing.Text, list[dict[typing.Text, typing.Text]]]]]",
                "tuple[typing.Optional[dict[typing.Text, list[dict[typing.Text, None]]]]]"
            ],
            "arguments": {}
        }
    },
    "croud-master/tests/commands/test_config.py": {
        "test_config_add_profile": {
            "name": "test_config_add_profile",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "pyramid.config.Configurator",
                    "Dict[str, Any]"
                ],
                "capsys": [
                    "Dict[str, Dict[str, Any]]",
                    "Callable[[float], float]",
                    "Optional[type]"
                ]
            }
        },
        "test_config_add_duplicate_profile": {
            "name": "test_config_add_duplicate_profile",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Mapping[str, Any]",
                    "bool",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]"
                ],
                "capsys": [
                    "str"
                ]
            }
        },
        "test_config_current_profile": {
            "name": "test_config_current_profile",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "Optional[Dict]",
                    "config.ConfigStorage",
                    "dict"
                ],
                "capsys": [
                    "str",
                    "bool",
                    "int",
                    "Dict[str, Union[str, Any]]"
                ]
            }
        },
        "test_config_remove_profile": {
            "name": "test_config_remove_profile",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "sphinx.config.Config",
                    "virgene.config.Config",
                    "Dict[str, Any]"
                ],
                "capsys": [
                    "Optional[type]"
                ]
            }
        },
        "test_config_remove_current_profile": {
            "name": "test_config_remove_current_profile",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "config.Config",
                    "evtstrd.config.Config",
                    "sphinx.config.Config"
                ],
                "capsys": [
                    "Optional[type]"
                ]
            }
        },
        "test_config_set_profile": {
            "name": "test_config_set_profile",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "sphinx.config.Config",
                    "Optional[List[str]]",
                    "config.config_reader.CustomConfigParser"
                ],
                "capsys": [
                    "list",
                    "str",
                    "dict"
                ]
            }
        },
        "test_config_set_profile_does_not_exist": {
            "name": "test_config_set_profile_does_not_exist",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "bool",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "baseplate.lib.config.RawConfig"
                ],
                "capsys": [
                    "str"
                ]
            }
        },
        "test_config_show": {
            "name": "test_config_show",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "app.config.HealthCheckConfig",
                    "dict",
                    "Mapping[str, Any]",
                    "app.config.MQConfig",
                    "Dict[str, str]",
                    "config.Config",
                    "config.config_reader.CustomConfigParser"
                ],
                "capsys": [
                    "Optional[type]"
                ]
            }
        },
        "test_invalid_config": {
            "name": "test_invalid_config",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [
                    "str",
                    "Callable[[str], bool]"
                ],
                "tmp_path": [
                    "IO[bytes]"
                ]
            }
        }
    },
    "croud-master/tests/commands/test_login.py": {
        "test_login": {
            "name": "test_login",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_print_info": [
                    "mock.Mock"
                ],
                "mock_open_page_in_browser": [
                    "mock.Mock"
                ],
                "mock_can_launch_browser": [
                    "mock.Mock"
                ],
                "mock_start_in_background": [
                    "mock.Mock"
                ],
                "mock_wait_for_shutdown": [
                    "mock.Mock"
                ],
                "config": [
                    "mock.MagicMock"
                ]
            }
        },
        "test_login_no_valid_browser": {
            "name": "test_login_no_valid_browser",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_print_error": [],
                "mock_can_launch_browser": [
                    "typing.Generator[typing.Union[None,typing.Any,None]]",
                    "mock.MagicMock",
                    "mock.Mock",
                    "Generator[None, Any, None]",
                    "tests.async_mock.MagicMock"
                ],
                "config": [
                    "typing.Generator[typing.Union[None,typing.Any,None]]",
                    "mock.MagicMock",
                    "mock.Mock",
                    "Generator[None, Any, None]",
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_get_org_id": {
            "name": "test_get_org_id",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "org_id_param": [
                    "str",
                    "bool"
                ],
                "config": [
                    "str",
                    "list[str]",
                    "List[str]",
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_login_path": {
            "name": "test_login_path",
            "location": 80,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "idp": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "test_login_idp": {
            "name": "test_login_idp",
            "location": 99,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_can_launch_browser": [
                    "mock.Mock"
                ],
                "mock_start_in_background": [
                    "mock.Mock"
                ],
                "mock_wait_for_shutdown": [
                    "mock.Mock"
                ],
                "mock_print_info": [
                    "mock.Mock"
                ],
                "mock_get_org_id": [
                    "mock.Mock"
                ],
                "idp": [],
                "expected": [
                    "mock.Mock"
                ]
            }
        }
    },
    "croud-master/tests/commands/test_logout.py": {
        "test_logout": {
            "name": "test_logout",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_print_info": [],
                "config": [
                    "bool"
                ]
            }
        }
    },
    "croud-master/tests/commands/test_me.py": {
        "test_me": {
            "name": "test_me",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": []
            }
        },
        "test_me_edit_email": {
            "name": "test_me_edit_email",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": [
                    "neuromation.api.Client"
                ]
            }
        }
    },
    "croud-master/tests/commands/test_organizations.py": {
        "test_organizations_create": {
            "name": "test_organizations_create",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": []
            }
        },
        "test_organizations_create_plan_type": {
            "name": "test_organizations_create_plan_type",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": []
            }
        },
        "test_organizations_edit": {
            "name": "test_organizations_edit",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": [
                    "str",
                    "neuromation.api.Client"
                ]
            }
        },
        "test_organizations_edit_name": {
            "name": "test_organizations_edit_name",
            "location": 95,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": [
                    "str",
                    "neuromation.api.Client",
                    "mock.Mock"
                ]
            }
        },
        "test_organizations_edit_plan_type": {
            "name": "test_organizations_edit_plan_type",
            "location": 109,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": [
                    "neuromation.api.Client",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_organizations_edit_no_arguments": {
            "name": "test_organizations_edit_no_arguments",
            "location": 123,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": [
                    "mock.MagicMock",
                    "mock.Mock"
                ],
                "capsys": [
                    "List[Tuple[int, int, float]]"
                ]
            }
        },
        "test_organizations_list": {
            "name": "test_organizations_list",
            "location": 133,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": []
            }
        },
        "test_organizations_get": {
            "name": "test_organizations_get",
            "location": 139,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": []
            }
        },
        "test_organizations_delete": {
            "name": "test_organizations_delete",
            "location": 146,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": [
                    "neuromation.api.Client"
                ],
                "capsys": []
            }
        },
        "test_organizations_delete_failure_org_id_not_deleted_from_config": {
            "name": "test_organizations_delete_failure_org_id_not_deleted_from_config",
            "location": 160,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "capsys": [],
                "config": []
            }
        },
        "test_organizations_delete_org_id_from_local_config": {
            "name": "test_organizations_delete_org_id_from_local_config",
            "location": 181,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": [
                    "neuromation.api.Client",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "capsys": [
                    "typing.Generator[typing.Union[None,typing.Any,None]]",
                    "mock.Mock",
                    "mock.MagicMock",
                    "Generator[None, Any, None]",
                    "tests.async_mock.MagicMock"
                ],
                "config": []
            }
        },
        "test_organizations_delete_flag": {
            "name": "test_organizations_delete_flag",
            "location": 202,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": [
                    "neuromation.api.Client"
                ],
                "capsys": []
            }
        },
        "test_organizations_delete_aborted": {
            "name": "test_organizations_delete_aborted",
            "location": 215,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": [],
                "capsys": [],
                "input": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "mock.Mock"
                ]
            }
        },
        "test_organizations_delete_aborted_with_input": {
            "name": "test_organizations_delete_aborted_with_input",
            "location": 229,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": [],
                "capsys": []
            }
        },
        "test_organizations_auditlogs_list": {
            "name": "test_organizations_auditlogs_list",
            "location": 243,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": [
                    "neuromation.api.Client"
                ]
            }
        },
        "test_organizations_auditlogs_list_filtered": {
            "name": "test_organizations_auditlogs_list_filtered",
            "location": 256,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": [
                    "neuromation.api.Client"
                ]
            }
        },
        "test_organizations_auditlogs_list_pagination": {
            "name": "test_organizations_auditlogs_list_pagination",
            "location": 286,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": []
            }
        },
        "test_organizations_users_add": {
            "name": "test_organizations_users_add",
            "location": 308,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": [],
                "added": [],
                "message": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "capsys": [
                    "dict"
                ]
            }
        },
        "test_organizations_users_list": {
            "name": "test_organizations_users_list",
            "location": 340,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": []
            }
        },
        "test_organizations_users_remove": {
            "name": "test_organizations_users_remove",
            "location": 350,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_role_fqn_transform": {
            "name": "test_role_fqn_transform",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "croud-master/tests/commands/test_products.py": {
        "test_products_list": {
            "name": "test_products_list",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": []
            }
        },
        "test_products_list_kind": {
            "name": "test_products_list_kind",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": []
            }
        }
    },
    "croud-master/tests/commands/test_projects.py": {
        "test_projects_create": {
            "name": "test_projects_create",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": []
            }
        },
        "test_projects_create_with_custom_backup": {
            "name": "test_projects_create_with_custom_backup",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": []
            }
        },
        "test_projects_delete": {
            "name": "test_projects_delete",
            "location": 92,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": [
                    "mock.Mock"
                ],
                "capsys": []
            }
        },
        "test_projects_delete_flag": {
            "name": "test_projects_delete_flag",
            "location": 107,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": [
                    "mock.Mock"
                ],
                "capsys": [
                    "Tuple[paradigm.models.Base, tests.utils.Args]"
                ]
            }
        },
        "test_projects_delete_aborted": {
            "name": "test_projects_delete_aborted",
            "location": 120,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": [],
                "capsys": []
            }
        },
        "test_projects_list": {
            "name": "test_projects_list",
            "location": 156,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": []
            }
        },
        "test_projects_list_with_organization_id": {
            "name": "test_projects_list_with_organization_id",
            "location": 162,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": []
            }
        },
        "test_projects_get": {
            "name": "test_projects_get",
            "location": 171,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": []
            }
        },
        "test_projects_users_add": {
            "name": "test_projects_users_add",
            "location": 182,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": [],
                "added": [],
                "message": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "capsys": [
                    "Tuple[paradigm.models.Base, tests.utils.Args]"
                ]
            }
        },
        "test_projects_users_list": {
            "name": "test_projects_users_list",
            "location": 216,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": []
            }
        },
        "test_projects_users_remove": {
            "name": "test_projects_users_remove",
            "location": 226,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": [
                    "neuromation.api.Client",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_role_fqn_transform": {
            "name": "test_role_fqn_transform",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_projects_edit": {
            "name": "test_projects_edit",
            "location": 262,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "neuromation.api.Client"
                ],
                "capsys": [
                    "Tuple[paradigm.models.Base, tests.utils.Args]",
                    "dict"
                ]
            }
        },
        "test_projects_edit_no_argument": {
            "name": "test_projects_edit_no_argument",
            "location": 278,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": [
                    "mock.Mock",
                    "mock.MagicMock"
                ],
                "capsys": [
                    "Tuple[paradigm.models.Base, tests.utils.Args]"
                ]
            }
        }
    },
    "croud-master/tests/commands/test_regions.py": {
        "test_regions_list": {
            "name": "test_regions_list",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": []
            }
        },
        "test_regions_list_with_organization_id": {
            "name": "test_regions_list_with_organization_id",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": []
            }
        },
        "test_regions_create_all_params": {
            "name": "test_regions_create_all_params",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": []
            }
        },
        "test_regions_create_mandatory_params": {
            "name": "test_regions_create_mandatory_params",
            "location": 97,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": []
            }
        },
        "test_regions_create_install_command": {
            "name": "test_regions_create_install_command",
            "location": 126,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": [],
                "mock_raw_printer": [],
                "client": []
            }
        },
        "test_regions_create_missing_description": {
            "name": "test_regions_create_missing_description",
            "location": 156,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": [],
                "capsys": []
            }
        },
        "test_regions_create_aborted": {
            "name": "test_regions_create_aborted",
            "location": 172,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": [],
                "capsys": []
            }
        },
        "test_regions_delete": {
            "name": "test_regions_delete",
            "location": 197,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": [],
                "capsys": [
                    "mock.Mock"
                ]
            }
        },
        "test_regions_delete_with_projects_fails": {
            "name": "test_regions_delete_with_projects_fails",
            "location": 239,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": [],
                "capsys": [
                    "tests._TestServerFactory"
                ]
            }
        },
        "test_regions_delete_missing_name": {
            "name": "test_regions_delete_missing_name",
            "location": 271,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": [],
                "capsys": []
            }
        },
        "test_regions_delete_status_up": {
            "name": "test_regions_delete_status_up",
            "location": 305,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": [],
                "capsys": [
                    "bytes",
                    "tests._TestServerFactory"
                ],
                "client": []
            }
        },
        "test_regions_delete_status_down": {
            "name": "test_regions_delete_status_down",
            "location": 328,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": [],
                "capsys": [
                    "mock.MagicMock",
                    "mock.Mock"
                ]
            }
        },
        "test_regions_delete_bad_name": {
            "name": "test_regions_delete_bad_name",
            "location": 349,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "neuromation.api.Client"
                ],
                "capsys": []
            }
        }
    },
    "croud-master/tests/commands/test_subscriptions.py": {
        "test_subscriptions_list": {
            "name": "test_subscriptions_list",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": []
            }
        },
        "test_subscriptions_list_with_organization_id": {
            "name": "test_subscriptions_list_with_organization_id",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": []
            }
        },
        "test_subscriptions_get": {
            "name": "test_subscriptions_get",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": []
            }
        }
    },
    "croud-master/tests/commands/test_users.py": {
        "test_users_list": {
            "name": "test_users_list",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": []
            }
        },
        "test_users_list_no_org": {
            "name": "test_users_list_no_org",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": [],
                "capsys": [
                    "List[Tuple[int, int, float]]"
                ]
            }
        },
        "test_users_list_no_roles": {
            "name": "test_users_list_no_roles",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": []
            }
        },
        "test_users_list_no_org_no_roles": {
            "name": "test_users_list_no_org_no_roles",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": [],
                "capsys": [
                    "List[Tuple[int, int, float]]"
                ]
            }
        },
        "test_users_roles_list": {
            "name": "test_users_roles_list",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": []
            }
        },
        "test_transform_roles_list": {
            "name": "test_transform_roles_list",
            "location": 72,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_request": [
                    "mock.MagicMock",
                    "mock.Mock"
                ]
            }
        }
    },
    "croud-master/tests/commands/__init__.py": {},
    "croud-master/tests/util/fake_cloud.py": {
        "Response.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeCrateDBCloudServer.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeCrateDBCloudRequestHandler.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeCrateDBCloudRequestHandler.do_GET": {
            "name": "do_GET",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeCrateDBCloudRequestHandler.default_response": {
            "name": "default_response",
            "location": 108,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeCrateDBCloudRequestHandler.data_data_key": {
            "name": "data_data_key",
            "location": 120,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeCrateDBCloudRequestHandler.data_no_key": {
            "name": "data_no_key",
            "location": 125,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeCrateDBCloudRequestHandler.error_400": {
            "name": "error_400",
            "location": 130,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeCrateDBCloudRequestHandler.text_response": {
            "name": "text_response",
            "location": 142,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeCrateDBCloudRequestHandler.empty_response": {
            "name": "empty_response",
            "location": 147,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeCrateDBCloudRequestHandler.redirect": {
            "name": "redirect",
            "location": 152,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeCrateDBCloudRequestHandler.new_token": {
            "name": "new_token",
            "location": 155,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeCrateDBCloudRequestHandler.client_headers": {
            "name": "client_headers",
            "location": 160,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeCrateDBCloudRequestHandler.is_authorized": {
            "name": "is_authorized",
            "location": 164,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeCrateDBCloudRequestHandler.log_message": {
            "name": "log_message",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeCrateDBCloud.__init__": {
            "name": "__init__",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeCrateDBCloud.start_in_background": {
            "name": "start_in_background",
            "location": 182,
            "return": [
                "FakeCrateDBCloud"
            ],
            "arguments": {
                "self": [
                    "_TFakeCrateDBCloud"
                ]
            }
        },
        "FakeCrateDBCloud.wait_for_shutdown": {
            "name": "wait_for_shutdown",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeCrateDBCloud.port": {
            "name": "port",
            "location": 190,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeCrateDBCloud.__enter__": {
            "name": "__enter__",
            "location": 193,
            "return": [
                "FakeCrateDBCloud"
            ],
            "arguments": {
                "self": [
                    "_TFakeCrateDBCloud"
                ]
            }
        },
        "FakeCrateDBCloud.__exit__": {
            "name": "__exit__",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_value": [
                    "Optional[BaseException]"
                ],
                "traceback": [
                    "typing.Type",
                    "Optional[Type[BaseException]]",
                    "None",
                    "type",
                    "BaseException",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ]
            }
        }
    },
    "croud-master/tests/util/__init__.py": {
        "ndiff": {
            "name": "ndiff",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "actual": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "assert_ellipsis_match": {
            "name": "assert_ellipsis_match",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "actual": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "call_command": {
            "name": "call_command",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "assert_rest": {
            "name": "assert_rest",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_request": [
                    "mock.Mock"
                ],
                "method": [
                    "croud.api.RequestMethod"
                ],
                "endpoint": [
                    "int",
                    "typing.Iterable[]",
                    "str",
                    "Optional[Iterable]",
                    "None",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, list]"
                ]
            }
        },
        "gen_uuid": {
            "name": "gen_uuid",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    }
}
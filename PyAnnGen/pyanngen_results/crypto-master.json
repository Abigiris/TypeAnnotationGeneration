{
    "crypto-master/crypto.py": {
        "crypto_main": {
            "name": "crypto_main",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "arguments": [
                    "Dict",
                    "str"
                ]
            }
        },
        "choose_function": {
            "name": "choose_function",
            "location": 25,
            "return": [
                "Callable[([Any, Any, Any], str)]"
            ],
            "arguments": {
                "mode": [
                    "str"
                ]
            }
        }
    },
    "crypto-master/decryptors.py": {
        "DecryptorInterface.decrypt": {
            "name": "decrypt",
            "location": 6,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "input_value": [
                    "int",
                    "str",
                    "List",
                    "bool"
                ],
                "key": [
                    "int",
                    "str",
                    "List",
                    "bool"
                ]
            }
        },
        "ShiftUnicodeDecryptor.decrypt": {
            "name": "decrypt",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Sequence[Union[str,int]]",
                    "Optional[bool]",
                    "List",
                    "None",
                    "int"
                ],
                "input_value": [
                    "str",
                    "List",
                    "Optional[bool]",
                    "bool",
                    "int",
                    "Sequence[Union[str,int]]"
                ],
                "key": [
                    "int",
                    "str",
                    "bytes",
                    "Callable"
                ]
            }
        }
    },
    "crypto-master/encryptors.py": {
        "EncryptorInterface.encrypt": {
            "name": "encrypt",
            "location": 10,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "input_value": [
                    "int",
                    "str",
                    "List",
                    "bool"
                ],
                "key": [
                    "int",
                    "str",
                    "List",
                    "bool"
                ]
            }
        },
        "SwitchEncryptor.encrypt": {
            "name": "encrypt",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Sequence[Union[str,int]]",
                    "Optional[bool]",
                    "List",
                    "None",
                    "int"
                ],
                "input_value": [
                    "str",
                    "List",
                    "Optional[bool]",
                    "bool",
                    "int",
                    "Sequence[Union[str,int]]"
                ],
                "key": [
                    "str",
                    "None",
                    "bool",
                    "Sequence[Union[str,int]]",
                    "Optional[bool]",
                    "List",
                    "int"
                ]
            }
        },
        "ShiftEncryptor.encrypt": {
            "name": "encrypt",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bytes",
                    "Dict[str,Any]",
                    "Iterable"
                ],
                "input_value": [
                    "str",
                    "List",
                    "Optional[bool]",
                    "bool",
                    "int",
                    "Sequence[Union[str,int]]"
                ],
                "key": [
                    "str",
                    "bytes",
                    "Dict[str,Any]",
                    "Iterable"
                ]
            }
        },
        "ShiftEncryptor._calculate_new_letter_position": {
            "name": "_calculate_new_letter_position",
            "location": 41,
            "return": [
                "int",
                "Dict[str,Any]"
            ],
            "arguments": {
                "cls": [
                    "Iterable",
                    "Type",
                    "Dict",
                    "List[dict]",
                    "Type[T]",
                    "T"
                ],
                "letter_position": [
                    "int",
                    "Pattern"
                ],
                "number": [
                    "int",
                    "Pattern"
                ]
            }
        },
        "ShiftUnicodeEncryptor.encrypt": {
            "name": "encrypt",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Sequence[Union[str,int]]",
                    "Optional[bool]",
                    "List",
                    "None",
                    "int"
                ],
                "input_value": [
                    "str",
                    "List",
                    "Optional[bool]",
                    "bool",
                    "int",
                    "Sequence[Union[str,int]]"
                ],
                "key": [
                    "int",
                    "str",
                    "bytes",
                    "Callable"
                ]
            }
        }
    },
    "crypto-master/tests/test_crypto.py": {
        "TestCrypto.test_returns_valid_output_on_encryption": {
            "name": "test_returns_valid_output_on_encryption",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrypto.test_returns_valid_output_on_decryption": {
            "name": "test_returns_valid_output_on_decryption",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrypto.test_returns_message_on_invalid_target_operation_type": {
            "name": "test_returns_message_on_invalid_target_operation_type",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "crypto-master/tests/test_decryptors.py": {
        "TestShiftDecryptor.test_returns_valid_output": {
            "name": "test_returns_valid_output",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "crypto-master/tests/test_encryptors.py": {
        "TestSwitchEncryptor.test_returns_valid_output": {
            "name": "test_returns_valid_output",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShiftEncryptor.test_returns_valid_output": {
            "name": "test_returns_valid_output",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShiftUnicodeEncryptor.test_returns_valid_output": {
            "name": "test_returns_valid_output",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "crypto-master/tests/__init__.py": {},
    "crypto-master/tests/__main__.py": {}
}
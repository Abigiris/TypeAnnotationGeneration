{
    "crypy-master/bmx.py": {},
    "crypy-master/cc.py": {},
    "crypy-master/cli.py": {
        "StackableCmd.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prompt": [
                    "int",
                    "bool",
                    "float"
                ],
                "completekey": [
                    "typing.Text",
                    "str",
                    "IO[str]",
                    "float"
                ],
                "stdin": [
                    "str",
                    "None",
                    "float",
                    "IO[str]",
                    "typing.IO"
                ],
                "stdout": [
                    "str",
                    "None",
                    "float",
                    "IO[str]",
                    "typing.IO"
                ]
            }
        },
        "StackableCmd.precmd": {
            "name": "precmd",
            "location": 12,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "_T0"
                ]
            }
        },
        "StackableCmd.postcmd": {
            "name": "postcmd",
            "location": 15,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "stop": [
                    "_T0"
                ],
                "line": [
                    "str",
                    "bool",
                    "list[str]",
                    "list[]",
                    "List[str]",
                    "Union[List[str], str]",
                    "list",
                    "Iterable[str]"
                ]
            }
        },
        "StackableCmd.preloop": {
            "name": "preloop",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StackableCmd.postloop": {
            "name": "postloop",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StackableCmd.do_exit": {
            "name": "do_exit",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "bool",
                    "set[]",
                    "int",
                    "set"
                ]
            }
        },
        "StackableCmd.do_EOF": {
            "name": "do_EOF",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "bool",
                    "set[]",
                    "int",
                    "set"
                ]
            }
        },
        "Trader.preloop": {
            "name": "preloop",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trader.postloop": {
            "name": "postloop",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Holder.preloop": {
            "name": "preloop",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Holder.do_trade": {
            "name": "do_trade",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "typing.Text",
                    "bool",
                    "int",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "Desk.do_watch": {
            "name": "do_watch",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "typing.Text",
                    "str",
                    "int"
                ]
            }
        },
        "Desk.do_invest": {
            "name": "do_invest",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "asset": [
                    "str",
                    "typing.Text"
                ]
            }
        },
        "Desk.do_trade": {
            "name": "do_trade",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "typing.Text",
                    "int",
                    "float",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "crypy-master/krk.py": {
        "print_chart": {
            "name": "print_chart",
            "location": 32,
            "return": [],
            "arguments": {
                "exchange": [],
                "symbol": [],
                "timeframe": []
            }
        }
    },
    "crypy-master/crypy/config.py": {
        "locate": {
            "name": "locate",
            "location": 28,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {
                "filename": [
                    "None",
                    "str",
                    "pathlib.Path",
                    "Optional[str]",
                    "Union[pathlib.Path, str]",
                    "Optional[pathlib.Path]"
                ]
            }
        },
        "config": {
            "name": "config",
            "location": 48,
            "return": [
                "configparser.ConfigParser"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "None",
                    "pathlib.Path",
                    "Callable[[str], str]",
                    "typing.Callable[str, str]"
                ]
            }
        }
    },
    "crypy-master/crypy/currency.py": {
        "Currency.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "Currency",
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str"
                ]
            }
        },
        "Currency.__repr__": {
            "name": "__repr__",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Currency.__str__": {
            "name": "__str__",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "crypy-master/crypy/supervisor.py": {
        "Supervisor.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exchange": [
                    "Exchange"
                ]
            }
        },
        "Supervisor._adjust_time_sync": {
            "name": "_adjust_time_sync",
            "location": 38,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Supervisor.datetime": {
            "name": "datetime",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Supervisor.time": {
            "name": "time",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "crypy-master/crypy/trader.py": {
        "Trader.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "Trader",
                "None"
            ],
            "arguments": {
                "self": [],
                "currency_pair": [
                    "Tuple[Any]"
                ],
                "exchange": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "crypy-master/crypy/_version.py": {},
    "crypy-master/crypy/__init__.py": {},
    "crypy-master/crypy/__main__.py": {
        "bitmex": {
            "name": "bitmex",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [],
                "test": [
                    "bool",
                    "int",
                    "Callable"
                ]
            }
        },
        "bitmex_balance": {
            "name": "bitmex_balance",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "click.Context",
                    "click.core.Context"
                ]
            }
        },
        "kraken": {
            "name": "kraken",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "click.Context"
                ]
            }
        },
        "kraken_balance": {
            "name": "kraken_balance",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "click.Context",
                    "click.core.Context"
                ]
            }
        }
    },
    "crypy-master/crypy/euc/__init__.py": {
        "sys_path_ctx": {
            "name": "sys_path_ctx",
            "location": 28,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "list[pathlib.Path]",
                    "pathlib.Path",
                    "Union[str, pathlib.Path]",
                    "List[pathlib.Path]"
                ]
            }
        }
    },
    "crypy-master/crypy/exchange/bad.py": {
        "init_api": {
            "name": "init_api",
            "location": 34,
            "return": [
                "BadExchange"
            ],
            "arguments": {}
        },
        "BadExchange.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_delay": [
                    "int"
                ]
            }
        },
        "BadExchange.get_server_time": {
            "name": "get_server_time",
            "location": 22,
            "return": [
                "Tuple[(datetime.datetime, float)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "crypy-master/crypy/exchange/kraken.py": {
        "API.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "typing.Text",
                    "str",
                    "bool",
                    "Union[str, int]",
                    "dict"
                ],
                "secret": [
                    "typing.Text",
                    "List[str]",
                    "str",
                    "List[Tuple[Any, ...]]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "API.json_options": {
            "name": "json_options",
            "location": 57,
            "return": [
                "API"
            ],
            "arguments": {
                "self": [
                    "_TAPI"
                ]
            }
        },
        "API.close": {
            "name": "close",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "API.load_key": {
            "name": "load_key",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Union[str, bytes, int]",
                    "bytes"
                ]
            }
        },
        "API._query": {
            "name": "_query",
            "location": 91,
            "return": [
                "int",
                "List[str]",
                "Optional[str]",
                "dict",
                "Dict[str, str]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "urlpath": [
                    "str",
                    "int",
                    "Union[str, Dict[str, Any]]",
                    "dict[str, typing.Any]"
                ],
                "data": [
                    "Optional[Mapping[str, Any]]",
                    "typing.Mapping",
                    "Optional[str]",
                    "None",
                    "Optional[dict]",
                    "str",
                    "Mapping[str, str]",
                    "dict[, ]"
                ],
                "headers": [
                    "None",
                    "Optional[Mapping[str, Any]]",
                    "typing.Mapping",
                    "Optional[dict]",
                    "dict[, ]",
                    "dict",
                    "Optional[Mapping]"
                ],
                "timeout": [
                    "str",
                    "None",
                    "Optional[Mapping[str, Any]]",
                    "MutableMapping",
                    "typing.Mapping",
                    "Mapping[str, str]",
                    "typing.MutableMapping",
                    "Callable[..., Awaitable[dict]]",
                    "typing.Callable[..., collections.abc.Awaitable[dict[, ]]]"
                ]
            }
        },
        "API.query_public": {
            "name": "query_public",
            "location": 128,
            "return": [
                "Dict[str, bool]",
                "dict",
                "int",
                "Dict[str, Any]",
                "Dict[str, float]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "int",
                    "bool",
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "None"
                ],
                "data": [
                    "Optional[str]",
                    "None",
                    "str",
                    "Optional[float]",
                    "int",
                    "Optional[Sequence[Any]]",
                    "float",
                    "typing.Sequence[typing.Any]"
                ],
                "timeout": [
                    "int",
                    "None",
                    "str",
                    "float",
                    "bool",
                    "Optional[str]",
                    "typing.Callable[, ]",
                    "Callable"
                ]
            }
        },
        "API.query_private": {
            "name": "query_private",
            "location": 149,
            "return": [
                "bool",
                "int",
                "Dict[str, Any]",
                "bytes",
                "Dict[int, Any]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "int",
                    "bool",
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "None"
                ],
                "data": [
                    "dict",
                    "None",
                    "Optional[str]",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "str",
                    "Optional[Dict[str, str]]",
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ],
                "timeout": [
                    "str",
                    "bytes",
                    "None"
                ]
            }
        },
        "API._nonce": {
            "name": "_nonce",
            "location": 180,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "API._sign": {
            "name": "_sign",
            "location": 188,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "Dict[str, Any]"
                ],
                "urlpath": [
                    "str",
                    "bytes",
                    "Iterable[bytes]",
                    "list",
                    "Optional[Union[Dict, str, int, bytes]]"
                ]
            }
        }
    },
    "crypy-master/crypy/exchange/__init__.py": {
        "Exchange.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "implementation": [
                    "Exchange_Impl"
                ]
            }
        },
        "Exchange.server_time": {
            "name": "server_time",
            "location": 31,
            "return": [
                "Exchange"
            ],
            "arguments": {
                "self": [
                    "_TExchange"
                ]
            }
        }
    },
    "crypy-master/crypy/exchange/__main__.py": {
        "exchange_cli": {
            "name": "exchange_cli",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "click.Context"
                ],
                "exchange": [
                    "None",
                    "click.Context",
                    "click.core.Context"
                ],
                "verbose": [
                    "bool",
                    "click.Context",
                    "str",
                    "Optional[Tuple[str]]"
                ]
            }
        },
        "markets": {
            "name": "markets",
            "location": 78,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "dict[, ]",
                    "dict",
                    "Union[str, Dict]"
                ],
                "verbose": [
                    "bool",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict"
                ]
            }
        }
    },
    "crypy-master/crypy/graph/basic_term.py": {
        "plot": {
            "name": "plot",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "series": [],
                "cfg": []
            }
        }
    },
    "crypy-master/crypy/graph/__init__.py": {},
    "crypy-master/crypy/graph/mocks/__init__.py": {},
    "crypy-master/crypy/log/__init__.py": {},
    "crypy-master/crypy/log/mocks/__init__.py": {},
    "crypy-master/crypy/pair/chart.py": {
        "chart": {
            "name": "chart",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "series": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "crypy-master/crypy/pair/indicators.py": {
        "HA": {
            "name": "HA",
            "location": 5,
            "return": [
                "_T0"
            ],
            "arguments": {
                "df": [
                    "_T0"
                ],
                "ohlc": [
                    "int",
                    "None",
                    "float",
                    "Iterable[Optional[Any]]",
                    "Optional[int]",
                    "typing.Iterable[typing.Optional[typing.Any]]"
                ]
            }
        }
    },
    "crypy-master/crypy/pair/__init__.py": {},
    "crypy-master/crypy/pair/__main__.py": {
        "pair_cli": {
            "name": "pair_cli",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [],
                "pair": [
                    "None"
                ],
                "exchange": [
                    "None"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "ohlcv": {
            "name": "ohlcv",
            "location": 86,
            "return": [],
            "arguments": {
                "obj": [],
                "timeframe": [
                    "None"
                ],
                "aggregate": [
                    "None"
                ],
                "graph": [
                    "bool"
                ],
                "verbose": [
                    "bool"
                ]
            }
        }
    },
    "crypy-master/crypy/pair/tests/conftest.py": {
        "series": {
            "name": "series",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "crypy-master/crypy/pair/tests/test_indicators.py": {
        "test_indic": {
            "name": "test_indic",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "crypy-master/crypy/pair/tests/__init__.py": {},
    "crypy-master/crypy/storage/arctic.py": {},
    "crypy-master/crypy/storage/influx.py": {
        "main": {
            "name": "main",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "typing.Text",
                    "str",
                    "int",
                    "List[str]",
                    "List[Tuple[str, str, str, str, str]]",
                    "bytes"
                ],
                "port": [
                    "int",
                    "str",
                    "List[str]",
                    "List[Tuple[str, str, str, str, str]]",
                    "bytes"
                ]
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 45,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {}
        }
    },
    "crypy-master/crypy/storage/__init__.py": {
        "Storage.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "Storage",
                "None"
            ],
            "arguments": {
                "self": [],
                "implementation": [
                    "Storage_Impl"
                ]
            }
        }
    },
    "crypy-master/crypy/storage/mocks/__init__.py": {},
    "crypy-master/crypy/term/__init__.py": {},
    "crypy-master/crypy/term/mocks/__init__.py": {},
    "crypy-master/crypy/tests/conftest.py": {
        "exchange": {
            "name": "exchange",
            "location": 7,
            "return": [
                "Exchange",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "supervisor": {
            "name": "supervisor",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "exchange": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "crypy-master/crypy/tests/test_supervisor.py": {
        "test_server_time": {
            "name": "test_server_time",
            "location": 4,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        }
    },
    "crypy-master/crypy/tests/__init__.py": {}
}
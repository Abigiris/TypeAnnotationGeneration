{
    "cslbot-master/bot.py": {},
    "cslbot-master/setup.py": {},
    "cslbot-master/cslbot/__init__.py": {},
    "cslbot-master/cslbot/alembic/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cslbot-master/cslbot/alembic/versions/243c9cf0eb7d_use_datetime_not_float.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cslbot-master/cslbot/alembic/versions/2b048b055f82_server.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cslbot-master/cslbot/alembic/versions/2ee084539c59_no_timezones.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cslbot-master/cslbot/alembic/versions/3614b38ddf9_kick_logging_change.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cslbot-master/cslbot/alembic/versions/385c29e42d9_remove_nicks.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cslbot-master/cslbot/alembic/versions/4d165186b4ed_fix_nullable.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cslbot-master/cslbot/alembic/versions/55efdbb748c_merge_pending.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cslbot-master/cslbot/alembic/versions/7fde00129eb6_multi_babble.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cslbot-master/cslbot/alembic/versions/e7106eedcf8c_fix_stopwatch.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cslbot-master/cslbot/alembic/versions/ef7ccebeff_initial_commit.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cslbot-master/cslbot/commands/8ball.py": {
        "cmd": {
            "name": "cmd",
            "location": 23,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "str"
                ],
                "msg": [
                    "str"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/about.py": {
        "cmd": {
            "name": "cmd",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "Tuple",
                    "List[str]",
                    "str",
                    "List"
                ],
                "_": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/abuse.py": {
        "cmd": {
            "name": "cmd",
            "location": 23,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "str",
                    "int",
                    "List[str]",
                    "List[list[str]]",
                    "List[List[str]]",
                    "Type",
                    "Type[Any]",
                    "bool"
                ],
                "msg": [
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/acl.py": {
        "cmd": {
            "name": "cmd",
            "location": 23,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "bool",
                    "Iterable[int]"
                ],
                "msg": [
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/acronym.py": {
        "get_list": {
            "name": "get_list",
            "location": 25,
            "return": [
                "Dict[(Any, list)]"
            ],
            "arguments": {}
        },
        "cmd": {
            "name": "cmd",
            "location": 35,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "str",
                    "bool"
                ],
                "msg": [
                    "str",
                    "bytes",
                    "List[Dict[str,Any]]",
                    "int",
                    "bool"
                ],
                "_": [
                    "str"
                ]
            }
        }
    },
    "cslbot-master/cslbot/commands/active.py": {
        "cmd": {
            "name": "cmd",
            "location": 21,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "int",
                    "Callable",
                    "str"
                ],
                "_": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/admins.py": {
        "cmd": {
            "name": "cmd",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "str",
                    "int",
                    "List",
                    "List[List[str]]",
                    "List[list[str]]"
                ],
                "_": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/babble.py": {
        "weighted_next": {
            "name": "weighted_next",
            "location": 28,
            "return": [
                "Set[str]",
                "bool",
                "str",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "Dict",
                    "int",
                    "bool"
                ]
            }
        },
        "build_msg": {
            "name": "build_msg",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "cursor": [
                    "int",
                    "Optional[int]",
                    "None",
                    "float",
                    "Optional[float]",
                    "Callable[str,int]",
                    "Callable[[str],int]",
                    "Union[int,None]"
                ],
                "speaker": [
                    "str",
                    "bytes",
                    "int",
                    "Tuple[str]"
                ],
                "length": [
                    "int",
                    "float",
                    "Optional[int]",
                    "None"
                ],
                "start": [
                    "int",
                    "str",
                    "float",
                    "None",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "cmd": {
            "name": "cmd",
            "location": 84,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "str",
                    "Callable[,Any]",
                    "Dict[str,str]"
                ],
                "msg": [
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/bard.py": {
        "cmd": {
            "name": "cmd",
            "location": 22,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "str"
                ],
                "msg": [
                    "str"
                ],
                "_": [
                    "str"
                ]
            }
        }
    },
    "cslbot-master/cslbot/commands/bc.py": {
        "get_scores": {
            "name": "get_scores",
            "location": 23,
            "return": [
                "dict"
            ],
            "arguments": {
                "cursor": [
                    "str",
                    "int",
                    "Union[str,int]",
                    "None",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "cmd": {
            "name": "cmd",
            "location": 29,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "send": [
                    "str",
                    "int"
                ],
                "msg": [
                    "str"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/bike.py": {
        "cmd": {
            "name": "cmd",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "cslbot-master/cslbot/commands/blame.py": {
        "cmd": {
            "name": "cmd",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "str"
                ],
                "msg": [
                    "str",
                    "int"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/botsnack.py": {
        "cmd": {
            "name": "cmd",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "str"
                ],
                "msg": [
                    "str",
                    "List[Dict[str,str]]",
                    "Tuple",
                    "List[str]",
                    "List",
                    "List[Tuple[float,str]]"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/botspam.py": {
        "gen_fortune": {
            "name": "gen_fortune",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "str",
                    "int"
                ]
            }
        },
        "gen_urban": {
            "name": "gen_urban",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "str",
                    "Union[int,str,bool]",
                    "int"
                ],
                "session": [
                    "int",
                    "str",
                    "Dict[str,Any]"
                ],
                "key": [
                    "int",
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "cmd": {
            "name": "cmd",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "_": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "args": []
            }
        },
        "cmd.lenny_send": {
            "name": "lenny_send",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "List[str]",
                    "bytes"
                ]
            }
        }
    },
    "cslbot-master/cslbot/commands/cadmin.py": {
        "cmd": {
            "name": "cmd",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "str"
                ],
                "msg": [
                    "str"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/cancel.py": {
        "cmd": {
            "name": "cmd",
            "location": 21,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "send": [
                    "str"
                ],
                "msg": [
                    "int",
                    "bool"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/channels.py": {
        "cmd": {
            "name": "cmd",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "int",
                    "Callable",
                    "str"
                ],
                "_": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/choose.py": {
        "cmd": {
            "name": "cmd",
            "location": 23,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "bool",
                    "str",
                    "int"
                ],
                "msg": [
                    "str"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/cidr.py": {
        "cmd": {
            "name": "cmd",
            "location": 23,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "send": [
                    "str"
                ],
                "msg": [
                    "str"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/coin.py": {
        "cmd": {
            "name": "cmd",
            "location": 23,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "Tuple[float,float]",
                    "Callable",
                    "Tuple[Union[float,float]]",
                    "str"
                ],
                "msg": [
                    "int",
                    "bool",
                    "str",
                    "Sequence[int]"
                ],
                "_": [
                    "str"
                ]
            }
        }
    },
    "cslbot-master/cslbot/commands/cve.py": {
        "cmd": {
            "name": "cmd",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "str"
                ],
                "msg": [
                    "str"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/dc.py": {
        "cmd": {
            "name": "cmd",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "str",
                    "int"
                ],
                "msg": [
                    "str",
                    "Optional[int]",
                    "List[int]",
                    "Optional[List[int]]",
                    "int"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/ddate.py": {
        "cmd": {
            "name": "cmd",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "cslbot-master/cslbot/commands/defersay.py": {
        "cmd": {
            "name": "cmd",
            "location": 23,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "str",
                    "List[str]",
                    "Mapping",
                    "bytes",
                    "Union[int,str]",
                    "int"
                ],
                "msg": [
                    "Tuple[str]",
                    "str",
                    "Callable[,Any]",
                    "p2p.protocol.Command",
                    "T"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/define.py": {
        "cmd": {
            "name": "cmd",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "Dict",
                    "Optional[Tuple[str,...]]",
                    "Tuple[Union[str,...]]",
                    "None"
                ],
                "msg": [
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/demorse.py": {
        "cmd": {
            "name": "cmd",
            "location": 21,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "str"
                ],
                "msg": [
                    "Dict",
                    "int",
                    "float",
                    "str"
                ],
                "_": [
                    "str"
                ]
            }
        }
    },
    "cslbot-master/cslbot/commands/distro.py": {
        "cmd": {
            "name": "cmd",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "str",
                    "Dict"
                ]
            }
        }
    },
    "cslbot-master/cslbot/commands/dvorak.py": {
        "get_log": {
            "name": "get_log",
            "location": 22,
            "return": [
                "str",
                "Dict[str, str]",
                "Optional[Mapping[str, Any]]"
            ],
            "arguments": {
                "conn": [
                    "str",
                    "int"
                ],
                "user": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]"
                ],
                "target": [
                    "str",
                    "int"
                ]
            }
        },
        "translate": {
            "name": "translate",
            "location": 30,
            "return": [
                "bytes",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "bytes"
                ],
                "encode": [
                    "bool",
                    "str",
                    "bytes"
                ]
            }
        },
        "cmd": {
            "name": "cmd",
            "location": 39,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "Union[str,Sequence[str]]",
                    "bool",
                    "str",
                    "Dict[str,Any]",
                    "Sequence[str]"
                ],
                "msg": [
                    "str",
                    "Optional[str]",
                    "TextIO",
                    "None",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/ebay.py": {
        "get_categories": {
            "name": "get_categories",
            "location": 24,
            "return": [
                "list"
            ],
            "arguments": {
                "apikey": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_item": {
            "name": "get_item",
            "location": 34,
            "return": [
                "None",
                "Optional[str]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "category": [
                    "int",
                    "Tuple[bytes]",
                    "Dict[str,Any]",
                    "str"
                ],
                "apikey": [
                    "int",
                    "Tuple[bytes]",
                    "Dict[str,Any]",
                    "str"
                ]
            }
        },
        "cmd": {
            "name": "cmd",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "Dict[str,object]",
                    "Dict[str,dict[str,int]]",
                    "Dict[str,str]",
                    "Dict[str,Any]",
                    "None",
                    "Dict[str,Dict[str,int]]",
                    "Optional[Dict[str,Any]]"
                ],
                "_": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/eix.py": {
        "cmd": {
            "name": "cmd",
            "location": 25,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "send": [
                    "List",
                    "bool",
                    "Dict[str,Any]"
                ],
                "msg": [
                    "str",
                    "List",
                    "List[str]",
                    "Dict"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/errno.py": {
        "cmd": {
            "name": "cmd",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "str"
                ],
                "msg": [
                    "str"
                ],
                "_": [
                    "str"
                ]
            }
        }
    },
    "cslbot-master/cslbot/commands/filter.py": {
        "get_filters": {
            "name": "get_filters",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "handler": [
                    "str",
                    "List",
                    "Set[Optional[str]]"
                ],
                "target": [
                    "str",
                    "List",
                    "Set[Optional[str]]"
                ]
            }
        },
        "cmd": {
            "name": "cmd",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "Sequence[str]",
                    "Tuple",
                    "List[str]",
                    "str"
                ],
                "msg": [
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/fml.py": {
        "cmd": {
            "name": "cmd",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "str"
                ],
                "msg": [
                    "str"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/fortune.py": {
        "cmd": {
            "name": "cmd",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "List[str]",
                    "int",
                    "str"
                ],
                "msg": [
                    "str",
                    "Dict[str,str]",
                    "bool",
                    "Dict[str,Any]",
                    "int"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/fullwidth.py": {
        "cmd": {
            "name": "cmd",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "str"
                ],
                "msg": [
                    "str",
                    "List[str]"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/fweather.py": {
        "cmd": {
            "name": "cmd",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "str"
                ],
                "msg": [
                    "str"
                ],
                "_": [
                    "str"
                ]
            }
        }
    },
    "cslbot-master/cslbot/commands/gcc.py": {
        "cmd": {
            "name": "cmd",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "str",
                    "int",
                    "p2p.protocol.Command"
                ],
                "msg": [
                    "str",
                    "Optional[int]",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/gizoogle.py": {
        "cmd": {
            "name": "cmd",
            "location": 22,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "str"
                ],
                "msg": [
                    "str"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/google.py": {
        "cmd": {
            "name": "cmd",
            "location": 23,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "str"
                ],
                "msg": [
                    "str",
                    "Dict",
                    "int",
                    "Union[str,Dict]"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/grep.py": {
        "cmd": {
            "name": "cmd",
            "location": 24,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "send": [
                    "List",
                    "str",
                    "List[str]",
                    "bool",
                    "abjadexrmakers.Command",
                    "Iterable[float]"
                ],
                "msg": [
                    "List[str]",
                    "Callable",
                    "str"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/guarded.py": {
        "cmd": {
            "name": "cmd",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "str",
                    "int",
                    "List",
                    "List[str]",
                    "List[List[str]]",
                    "List[list[str]]"
                ],
                "_": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/help.py": {
        "cmd": {
            "name": "cmd",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "IO",
                    "bool"
                ],
                "msg": [
                    "str",
                    "Dict[str,str]"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/highlight.py": {
        "cmd": {
            "name": "cmd",
            "location": 23,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "send": [
                    "str"
                ],
                "msg": [
                    "Tuple",
                    "str",
                    "Callable"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/hooks.py": {
        "cmd": {
            "name": "cmd",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "cslbot-master/cslbot/commands/ignore.py": {
        "cmd": {
            "name": "cmd",
            "location": 23,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "str",
                    "Tuple[str]"
                ],
                "msg": [
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/imdb.py": {
        "cmd": {
            "name": "cmd",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "str",
                    "List[str]"
                ],
                "msg": [
                    "str"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/inspect.py": {
        "cmd": {
            "name": "cmd",
            "location": 21,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "send": [
                    "TextIO",
                    "bytes",
                    "str"
                ],
                "msg": [
                    "List[str]",
                    "str",
                    "Tuple",
                    "List[float]",
                    "Dict[str,Any]",
                    "Optional[List[Any]]",
                    "None"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/insult.py": {
        "cmd": {
            "name": "cmd",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "str"
                ],
                "msg": [
                    "str"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/intensify.py": {
        "cmd": {
            "name": "cmd",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "str"
                ],
                "msg": [
                    "List[str]",
                    "str"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/ipa.py": {
        "gen_nato": {
            "name": "gen_nato",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "bytes",
                    "Dict",
                    "Optional[str]"
                ]
            }
        },
        "cmd": {
            "name": "cmd",
            "location": 72,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "str"
                ],
                "msg": [
                    "str"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/issue.py": {
        "cmd": {
            "name": "cmd",
            "location": 28,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "str",
                    "bytes",
                    "Dict[str,Any]"
                ],
                "msg": [
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/isup.py": {
        "cmd": {
            "name": "cmd",
            "location": 23,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "str",
                    "Callable[T,bool]",
                    "p2p.protocol.Command",
                    "Callable[[T],bool]"
                ],
                "msg": [
                    "str",
                    "Dict[str,str]"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/jargon.py": {
        "cmd": {
            "name": "cmd",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "List",
                    "List[T]",
                    "List[float]",
                    "str",
                    "float"
                ]
            }
        }
    },
    "cslbot-master/cslbot/commands/join.py": {
        "cmd": {
            "name": "cmd",
            "location": 22,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "Callable",
                    "str"
                ],
                "msg": [
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/kill.py": {
        "cmd": {
            "name": "cmd",
            "location": 21,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "bool",
                    "str",
                    "Dict[str,Any]"
                ],
                "msg": [
                    "List[str]",
                    "List[Dict[str, str]]",
                    "tuple",
                    "List[Tuple[float, str]]"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/line.py": {
        "cmd": {
            "name": "cmd",
            "location": 25,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "Dict[str,Any]",
                    "str",
                    "Iterable[str]"
                ],
                "msg": [
                    "str",
                    "Callable",
                    "int"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/lmgtfy.py": {
        "cmd": {
            "name": "cmd",
            "location": 22,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "str",
                    "Callable",
                    "int"
                ],
                "msg": [
                    "dict",
                    "int"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/man.py": {
        "cmd": {
            "name": "cmd",
            "location": 25,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "send": [
                    "str",
                    "List[str]",
                    "bool",
                    "lxml.etree.ElementBase"
                ],
                "msg": [
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/metar.py": {
        "cmd": {
            "name": "cmd",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "Dict[str,Any]",
                    "str",
                    "Iterable[str]"
                ],
                "msg": [
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/metro.py": {
        "get_incidents": {
            "name": "get_incidents",
            "location": 24,
            "return": [
                "collections.defaultdict"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "get_type": {
            "name": "get_type",
            "location": 33,
            "return": [
                "Text",
                "str",
                "Dict",
                "Optional[str]"
            ],
            "arguments": {
                "t": [
                    "int"
                ]
            }
        },
        "cmd": {
            "name": "cmd",
            "location": 43,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "Optional[BaseException]",
                    "BaseException",
                    "None"
                ],
                "msg": [
                    "str"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/microwave.py": {
        "cmd": {
            "name": "cmd",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "Dict",
                    "int"
                ],
                "msg": [
                    "int",
                    "str",
                    "Tuple[cirq.Qid]"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/mission.py": {
        "cmd": {
            "name": "cmd",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "cslbot-master/cslbot/commands/mode.py": {
        "cmd": {
            "name": "cmd",
            "location": 22,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "List[str]",
                    "Dict",
                    "Callable",
                    "Tuple"
                ],
                "msg": [
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/morse.py": {
        "cmd": {
            "name": "cmd",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "str"
                ],
                "msg": [
                    "str",
                    "int",
                    "None",
                    "Optional[int]",
                    "bool",
                    "Optional[str]"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/msg.py": {
        "cmd": {
            "name": "cmd",
            "location": 22,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "str"
                ],
                "msg": [
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/next.py": {
        "cmd": {
            "name": "cmd",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "int",
                    "str",
                    "Callable",
                    "float",
                    "Dict"
                ],
                "_": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/nicks.py": {
        "cmd": {
            "name": "cmd",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "str",
                    "int",
                    "List[str]",
                    "List",
                    "List[List[str]]",
                    "bytes",
                    "List[list[str]]"
                ],
                "msg": [
                    "Dict[str,Callable[,None]]",
                    "siebenapp.domain.Command",
                    "str",
                    "int"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/note.py": {
        "cmd": {
            "name": "cmd",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "List[str]",
                    "Optional[List[str]]",
                    "str",
                    "Sequence[str]",
                    "None",
                    "Optional[bool]",
                    "bool"
                ],
                "msg": [
                    "str"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/nuke.py": {
        "cmd": {
            "name": "cmd",
            "location": 22,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "str"
                ],
                "msg": [
                    "bool"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/part.py": {
        "cmd": {
            "name": "cmd",
            "location": 22,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "str",
                    "List[str]",
                    "Callable",
                    "Sequence[str]"
                ],
                "msg": [
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/pester.py": {
        "cmd": {
            "name": "cmd",
            "location": 23,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "str",
                    "int",
                    "float",
                    "List[list]",
                    "Union[str,int]"
                ],
                "msg": [
                    "str",
                    "int",
                    "Dict[str,Any]",
                    "Dict",
                    "bool",
                    "Set[str]"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/ping.py": {
        "cmd": {
            "name": "cmd",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "Dict"
                ],
                "msg": [
                    "str"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/praise.py": {
        "cmd": {
            "name": "cmd",
            "location": 22,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "str"
                ],
                "msg": [
                    "str"
                ],
                "_": [
                    "str"
                ]
            }
        }
    },
    "cslbot-master/cslbot/commands/pull.py": {
        "cmd": {
            "name": "cmd",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "subprocess.Popen"
                ],
                "_": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/quit.py": {
        "cmd": {
            "name": "cmd",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "str"
                ],
                "msg": [
                    "str"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/quote.py": {
        "do_get_quote": {
            "name": "do_get_quote",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "session": [
                    "str",
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.scoping.scoped_session",
                    "sqlalchemy.orm.Session"
                ],
                "qid": [
                    "None",
                    "int",
                    "sqlalchemy.orm.Session",
                    "bool",
                    "Optional[Texte]"
                ]
            }
        },
        "get_quotes_nick": {
            "name": "get_quotes_nick",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "session": [
                    "str",
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.scoping.scoped_session"
                ],
                "nick": [
                    "int",
                    "str",
                    "sqlalchemy.orm.Session",
                    "None",
                    "Optional[str]",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "do_add_quote": {
            "name": "do_add_quote",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "nick": [
                    "str"
                ],
                "quote": [
                    "str"
                ],
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session"
                ],
                "isadmin": [
                    "Tuple[Union[float,float]]",
                    "List[str]",
                    "sqlalchemy.orm.Session",
                    "Tuple[float,float]"
                ],
                "approve": [
                    "Tuple[Union[float,float]]",
                    "List[str]",
                    "sqlalchemy.orm.Session",
                    "Tuple[float,float]"
                ],
                "send": [
                    "str",
                    "Callable[[Any],bool]",
                    "Callable[Any,bool]",
                    "Callable",
                    "List[Any]",
                    "Optional[List[Any]]",
                    "None"
                ],
                "args": []
            }
        },
        "do_update_quote": {
            "name": "do_update_quote",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "session": [
                    "str",
                    "sqlalchemy.orm.session.Session",
                    "None",
                    "Optional[str]",
                    "sqlalchemy.orm.Session"
                ],
                "qid": [
                    "str",
                    "sqlalchemy.orm.session.Session",
                    "None",
                    "Optional[str]",
                    "sqlalchemy.orm.Session"
                ],
                "nick": [
                    "str",
                    "Tuple[Union[int,int]]",
                    "sqlalchemy.orm.Session",
                    "List[int]",
                    "None",
                    "Tuple[int,int]",
                    "Any",
                    "Optional[Texte]",
                    "Optional[Any]"
                ],
                "quote": [
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[List[str]]",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "do_list_quotes": {
            "name": "do_list_quotes",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "session": [
                    "str",
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session"
                ],
                "quote_url": [
                    "str",
                    "int",
                    "Set[str]",
                    "Optional[bool]",
                    "None"
                ]
            }
        },
        "do_delete_quote": {
            "name": "do_delete_quote",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "session": [
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session"
                ],
                "qid": [
                    "Dict",
                    "sqlalchemy.orm.session.Session",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "search_quote": {
            "name": "search_quote",
            "location": 90,
            "return": [
                "str"
            ],
            "arguments": {
                "session": [
                    "str",
                    "sqlalchemy.orm.Session"
                ],
                "offset": [
                    "str",
                    "sqlalchemy.orm.Session"
                ],
                "search": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "cmd": {
            "name": "cmd",
            "location": 100,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "send": [
                    "Mapping",
                    "Mapping[str,Any]",
                    "int",
                    "Callable[Mapping,collections.abc.Awaitable]",
                    "Callable[[Mapping],Awaitable]",
                    "Callable[,Awaitable[Mapping]]"
                ],
                "msg": [],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/random.py": {
        "cmd": {
            "name": "cmd",
            "location": 24,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "send": [
                    "str"
                ],
                "msg": [
                    "str",
                    "bool",
                    "int"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/randtranslate.py": {
        "cmd": {
            "name": "cmd",
            "location": 22,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "str"
                ],
                "msg": [
                    "str"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/reddit.py": {
        "cmd": {
            "name": "cmd",
            "location": 22,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "bool",
                    "str"
                ],
                "msg": [
                    "Type",
                    "Tuple"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/repost.py": {
        "cmd": {
            "name": "cmd",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "str",
                    "int"
                ],
                "msg": [
                    "str"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/roman.py": {
        "gen_roman": {
            "name": "gen_roman",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "num": [
                    "bool",
                    "Dict[str,Any]",
                    "str"
                ]
            }
        },
        "cmd": {
            "name": "cmd",
            "location": 41,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "str",
                    "Sequence[int]",
                    "List[int]",
                    "Union[float,int]",
                    "float",
                    "int"
                ],
                "msg": [
                    "dict",
                    "str",
                    "float",
                    "list"
                ],
                "_": [
                    "str"
                ]
            }
        }
    },
    "cslbot-master/cslbot/commands/s.py": {
        "get_log": {
            "name": "get_log",
            "location": 29,
            "return": [
                "str",
                "Optional[Mapping[str, Any]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "conn": [
                    "int",
                    "Optional[int]",
                    "Dict[str,Any]",
                    "None"
                ],
                "target": [
                    "int",
                    "Optional[int]",
                    "Dict[str,Any]",
                    "None"
                ],
                "user": [
                    "Optional[List[str]]",
                    "List[str]",
                    "Optional[str]",
                    "None",
                    "str"
                ]
            }
        },
        "get_modifiers": {
            "name": "get_modifiers",
            "location": 38,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "msg": [
                    "str"
                ],
                "nick": [
                    "bool",
                    "str",
                    "Callable",
                    "int"
                ],
                "nickregex": [
                    "str",
                    "bytes"
                ]
            }
        },
        "do_replace": {
            "name": "do_replace",
            "location": 58,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "log": [
                    "str",
                    "List",
                    "bool",
                    "Callable[[str],str]"
                ],
                "config": [
                    "str"
                ],
                "char": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "regex": [
                    "str",
                    "Set"
                ],
                "replacement": [
                    "str",
                    "int",
                    "bytes",
                    "Dict[str,Union[Any,Any]]"
                ]
            }
        },
        "cmd": {
            "name": "cmd",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "Tuple",
                    "List[str]",
                    "str",
                    "List[Dict[str,str]]",
                    "List[dict[str,str]]"
                ],
                "msg": [
                    "str",
                    "bytes",
                    "List[str]"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/score.py": {
        "cmd": {
            "name": "cmd",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "List[str]",
                    "List",
                    "List[dict]",
                    "List[tuple[Union[float,str]]]",
                    "List[Tuple[float,str]]",
                    "Iterable[Any]"
                ],
                "msg": [
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/seen.py": {
        "get_last": {
            "name": "get_last",
            "location": 23,
            "return": [
                "str",
                "List[Callable]",
                "dict",
                "AnyStr"
            ],
            "arguments": {
                "cursor": [
                    "str",
                    "Dict[str,Any]",
                    "Union[str,int]",
                    "int"
                ],
                "cmdchar": [
                    "str"
                ],
                "ctrlchan": [
                    "str",
                    "Dict[str,Any]",
                    "Union[str,int]",
                    "int"
                ],
                "nick": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "cmd": {
            "name": "cmd",
            "location": 30,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "send": [
                    "bool",
                    "str",
                    "Dict[str,Any]"
                ],
                "msg": [
                    "str"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/sha512.py": {
        "cmd": {
            "name": "cmd",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "str"
                ],
                "msg": [
                    "bytes",
                    "tuple",
                    "Iterable",
                    "type",
                    "dict",
                    "Optional[List[Any]]"
                ],
                "_": [
                    "str"
                ]
            }
        }
    },
    "cslbot-master/cslbot/commands/shibe.py": {
        "cmd": {
            "name": "cmd",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "str"
                ],
                "msg": [
                    "str"
                ],
                "_": [
                    "str"
                ]
            }
        }
    },
    "cslbot-master/cslbot/commands/signal.py": {
        "cmd": {
            "name": "cmd",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "str"
                ],
                "msg": [
                    "str"
                ],
                "_": [
                    "str"
                ]
            }
        }
    },
    "cslbot-master/cslbot/commands/slap.py": {
        "cmd": {
            "name": "cmd",
            "location": 23,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "send": [
                    "int",
                    "float",
                    "random.Random",
                    "bool"
                ],
                "msg": [
                    "str",
                    "int",
                    "List[int]"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/slogan.py": {
        "cmd": {
            "name": "cmd",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "str"
                ],
                "msg": [
                    "str"
                ],
                "_": [
                    "str"
                ]
            }
        }
    },
    "cslbot-master/cslbot/commands/stats.py": {
        "get_command_totals": {
            "name": "get_command_totals",
            "location": 27,
            "return": [
                "dict"
            ],
            "arguments": {
                "session": [
                    "str"
                ]
            }
        },
        "get_nick_totals": {
            "name": "get_nick_totals",
            "location": 32,
            "return": [
                "dict"
            ],
            "arguments": {
                "session": [
                    "str",
                    "sqlalchemy.orm.session.Session"
                ],
                "command": [
                    "sqlalchemy.orm.session.Session",
                    "bool",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "get_nick": {
            "name": "get_nick",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "session": [
                    "str"
                ],
                "nick": [
                    "dict",
                    "Dict[str, float]"
                ]
            }
        },
        "get_command": {
            "name": "get_command",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "str"
                ],
                "command": [
                    "str",
                    "sqlalchemy.orm.session.Session"
                ],
                "totals": [
                    "str",
                    "bytes",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "cmd": {
            "name": "cmd",
            "location": 58,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "msg": [
                    "List[str]",
                    "Optional[List[str]]"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/stock.py": {
        "gen_stock": {
            "name": "gen_stock",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "Dict",
                    "Tuple[str,int]",
                    "int",
                    "Tuple[Union[str,int]]"
                ]
            }
        },
        "random_stock": {
            "name": "random_stock",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "cmd": {
            "name": "cmd",
            "location": 47,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "str",
                    "bytes",
                    "bool",
                    "Callable[[T],None]",
                    "Callable[T,None]"
                ],
                "msg": [
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/stopwatch.py": {
        "create_stopwatch": {
            "name": "create_stopwatch",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_elapsed": {
            "name": "get_elapsed",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "sw": [
                    "sqlalchemy.orm.session.Session",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "stop_stopwatch": {
            "name": "stop_stopwatch",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "args": []
            }
        },
        "delete_stopwatch": {
            "name": "delete_stopwatch",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "args": []
            }
        },
        "resume_stopwatch": {
            "name": "resume_stopwatch",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "args": []
            }
        },
        "list_stopwatch": {
            "name": "list_stopwatch",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_stopwatch": {
            "name": "get_stopwatch",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "args": []
            }
        },
        "cmd": {
            "name": "cmd",
            "location": 95,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "send": [
                    "List[str]"
                ],
                "msg": [
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/summon.py": {
        "cmd": {
            "name": "cmd",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "str"
                ],
                "msg": [
                    "str"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/threads.py": {
        "cmd": {
            "name": "cmd",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "cslbot-master/cslbot/commands/throw.py": {
        "cmd": {
            "name": "cmd",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "Dict[str,Any]",
                    "str"
                ],
                "msg": [
                    "str"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/time.py": {
        "cmd": {
            "name": "cmd",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "int",
                    "float",
                    "List[Tuple[str,float,int,float]]",
                    "List[tuple[Union[str,float,int,float]]]"
                ],
                "msg": [
                    "str",
                    "Exception"
                ],
                "_": [
                    "str"
                ]
            }
        }
    },
    "cslbot-master/cslbot/commands/timeout.py": {
        "cmd": {
            "name": "cmd",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "bool",
                    "str",
                    "Dict[str,Any]"
                ],
                "msg": [
                    "str"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/timeuntil.py": {
        "cmd": {
            "name": "cmd",
            "location": 27,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "send": [
                    "str",
                    "bytes",
                    "bool",
                    "Callable[[T],None]",
                    "Callable[T,None]"
                ],
                "msg": [
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/tjbash.py": {
        "cmd": {
            "name": "cmd",
            "location": 27,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "msg": [
                    "str"
                ],
                "_": [
                    "str"
                ]
            }
        }
    },
    "cslbot-master/cslbot/commands/translate.py": {
        "cmd": {
            "name": "cmd",
            "location": 23,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "str",
                    "List[str]",
                    "int",
                    "List[List[str]]",
                    "List[list[str]]"
                ],
                "msg": [
                    "Sequence[str]",
                    "bool",
                    "Tuple[str]",
                    "str",
                    "int"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/tumblr.py": {
        "cmd": {
            "name": "cmd",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "Dict",
                    "int",
                    "Callable",
                    "str"
                ],
                "msg": [
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/twitter.py": {
        "get_search_api": {
            "name": "get_search_api",
            "location": 27,
            "return": [
                "None",
                "List[List[int]]",
                "TwitterSearch",
                "str",
                "Callable"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "tweet_url": {
            "name": "tweet_url",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "user": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "tid": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "tweet_text": {
            "name": "tweet_text",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "obj": [
                    "str"
                ]
            }
        },
        "cmd": {
            "name": "cmd",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "List[int]",
                    "str",
                    "int",
                    "Dict",
                    "Tuple"
                ],
                "msg": [
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/uptime.py": {
        "cmd": {
            "name": "cmd",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "str",
                    "Exception",
                    "bytes"
                ],
                "_": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/urban.py": {
        "blacklist_word": {
            "name": "blacklist_word",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session",
                    "str",
                    "int"
                ],
                "msg": [
                    "str",
                    "int",
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "unblacklist_word": {
            "name": "unblacklist_word",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session",
                    "str",
                    "int"
                ],
                "msg": [
                    "str",
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "cmd": {
            "name": "cmd",
            "location": 39,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "str",
                    "Dict[str,str]",
                    "List[str]"
                ],
                "msg": [
                    "List[str]",
                    "str"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/urbit.py": {
        "cmd": {
            "name": "cmd",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "str",
                    "int",
                    "List",
                    "List[str]",
                    "List[List[str]]",
                    "List[list[str]]"
                ],
                "msg": [
                    "str"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/version.py": {
        "cmd": {
            "name": "cmd",
            "location": 24,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "send": [
                    "p2p.protocol.Command"
                ],
                "msg": [
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/vote.py": {
        "start_poll": {
            "name": "start_poll",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "args": []
            }
        },
        "delete_poll": {
            "name": "delete_poll",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_open_poll": {
            "name": "get_open_poll",
            "location": 62,
            "return": [
                "int",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "session": [
                    "int",
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session"
                ],
                "pid": [
                    "int",
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "edit_poll": {
            "name": "edit_poll",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "args": []
            }
        },
        "reopen": {
            "name": "reopen",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "args": []
            }
        },
        "end_poll": {
            "name": "end_poll",
            "location": 100,
            "return": [
                "str"
            ],
            "arguments": {
                "args": []
            }
        },
        "tally_poll": {
            "name": "tally_poll",
            "location": 117,
            "return": [
                "str"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_response": {
            "name": "get_response",
            "location": 151,
            "return": [
                "Dict[str, Union[int, str]]",
                "dict",
                "Dict[int, List[str]]"
            ],
            "arguments": {
                "session": [
                    "str",
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.scoping.scoped_session"
                ],
                "pid": [
                    "str",
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.scoping.scoped_session"
                ],
                "nick": [
                    "str",
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.scoping.scoped_session"
                ]
            }
        },
        "vote": {
            "name": "vote",
            "location": 155,
            "return": [
                "str"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session"
                ],
                "nick": [
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session"
                ],
                "pid": [
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session"
                ],
                "response": [
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "retract": {
            "name": "retract",
            "location": 179,
            "return": [
                "str"
            ],
            "arguments": {
                "args": []
            }
        },
        "list_polls": {
            "name": "list_polls",
            "location": 192,
            "return": [
                "str"
            ],
            "arguments": {
                "args": []
            }
        },
        "cmd": {
            "name": "cmd",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "Dict[str,Callable[,None]]",
                    "Dict",
                    "Optional[BaseException]",
                    "BaseException",
                    "None"
                ],
                "msg": [
                    "str",
                    "Command",
                    "Hashable"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/wai.py": {
        "cmd": {
            "name": "cmd",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "bool",
                    "str",
                    "List[str]",
                    "None",
                    "Optional[str]",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "cslbot-master/cslbot/commands/weather.py": {
        "get_default": {
            "name": "get_default",
            "location": 33,
            "return": [
                "str",
                "dict[, ]",
                "dict[str, int]",
                "dict[int, str]",
                "typing.Text"
            ],
            "arguments": {
                "nick": [
                    "int"
                ],
                "session": [
                    "dict[, ]",
                    "str"
                ],
                "send": [
                    "int",
                    "dict[str, typing.Any]"
                ],
                "config": [
                    "str"
                ],
                "source": [
                    "str"
                ]
            }
        },
        "valid_location": {
            "name": "valid_location",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "location": [
                    "str",
                    "int"
                ],
                "apikey": [
                    "str",
                    "int"
                ]
            }
        },
        "set_default": {
            "name": "set_default",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "nick": [
                    "list[typing.Any]",
                    "None",
                    "str"
                ],
                "location": [
                    "bool",
                    "tuple[typing.Union[float,float]]"
                ],
                "session": [],
                "send": [
                    "int",
                    "str",
                    "None",
                    "list[typing.Optional[C]]",
                    "list[]"
                ],
                "apikey": [
                    "int",
                    "None",
                    "str",
                    "dict[str, str]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "get_weather": {
            "name": "get_weather",
            "location": 85,
            "return": [
                "bool"
            ],
            "arguments": {
                "cmdargs": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "list[]"
                ],
                "send": [
                    "str",
                    "list[str]",
                    "dict[str, typing.Any]"
                ],
                "apikey": [
                    "dict[str, bool]",
                    "str"
                ]
            }
        },
        "get_forecast": {
            "name": "get_forecast",
            "location": 155,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "cmdargs": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "send": [
                    "int",
                    "str",
                    "tuple[typing.Union[int,str]]"
                ],
                "apikey": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[dict[str, typing.Any]]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "get_hourly": {
            "name": "get_hourly",
            "location": 173,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "cmdargs": [
                    "None",
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "send": [
                    "int",
                    "str"
                ],
                "apikey": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[dict[str, typing.Any]]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "cmd": {
            "name": "cmd",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "str",
                    "bool",
                    "typing.Callable[, ]"
                ],
                "msg": [
                    "list[str]",
                    "None"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/wiki.py": {
        "get_rand": {
            "name": "get_rand",
            "location": 22,
            "return": [
                "str",
                "Dict",
                "List[int]",
                "Callable"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Dict"
                ]
            }
        },
        "cmd": {
            "name": "cmd",
            "location": 29,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "Dict",
                    "Dict[str,Any]",
                    "Mapping[str,Any]",
                    "Mapping",
                    "str",
                    "MutableMapping[str,Any]",
                    "MutableMapping"
                ],
                "msg": [
                    "Dict",
                    "Dict[str,Any]"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/wikipath.py": {
        "gen_path": {
            "name": "gen_path",
            "location": 26,
            "return": [
                "Union[(bool, str)]"
            ],
            "arguments": {
                "cmdargs": [
                    "int",
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "get_article": {
            "name": "get_article",
            "location": 40,
            "return": [
                "str",
                "bytes",
                "Dict[str,Any]",
                "Callable",
                "Optional[str]",
                "Callable[[str],T]"
            ],
            "arguments": {}
        },
        "check_article": {
            "name": "check_article",
            "location": 47,
            "return": [
                "str",
                "OrderedDict",
                "Dict",
                "List[Dict[str,Any]]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "cmd": {
            "name": "cmd",
            "location": 54,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "str",
                    "bytes"
                ],
                "msg": [
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/wisdom.py": {
        "cmd": {
            "name": "cmd",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "str",
                    "bytes",
                    "bool",
                    "Callable[T,None]",
                    "Callable[[T],None]",
                    "lxml.etree.ElementBase"
                ],
                "msg": [
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/wolf.py": {
        "cmd": {
            "name": "cmd",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "Callable[T,None]",
                    "int",
                    "Callable[[T],None]",
                    "Dict[str,Any]",
                    "str",
                    "lxml.etree.ElementBase"
                ],
                "msg": [
                    "str",
                    "Callable",
                    "Tuple",
                    "List[str]"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/word.py": {
        "cmd": {
            "name": "cmd",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "cslbot-master/cslbot/commands/wtf.py": {
        "cmd": {
            "name": "cmd",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "float",
                    "bool",
                    "str"
                ],
                "msg": [
                    "str",
                    "Sequence[str]"
                ],
                "_": [
                    "str"
                ]
            }
        }
    },
    "cslbot-master/cslbot/commands/xkcd.py": {
        "get_latest": {
            "name": "get_latest",
            "location": 24,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "do_search": {
            "name": "do_search",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "bytes",
                    "int",
                    "Hashable"
                ],
                "key": [
                    "str",
                    "bytes",
                    "int",
                    "Hashable"
                ],
                "searchid": [
                    "str",
                    "bytes",
                    "int",
                    "Hashable"
                ]
            }
        },
        "cmd": {
            "name": "cmd",
            "location": 40,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "send": [
                    "Dict[str,Any]",
                    "List",
                    "str",
                    "Callable",
                    "Dict[str,Callable[,None]]"
                ],
                "msg": [
                    "dict"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/yoda.py": {
        "cmd": {
            "name": "cmd",
            "location": 22,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "str"
                ],
                "msg": [
                    "str"
                ],
                "_": [
                    "str"
                ]
            }
        }
    },
    "cslbot-master/cslbot/commands/zipcode.py": {
        "cmd": {
            "name": "cmd",
            "location": 25,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "str",
                    "bytes",
                    "bool",
                    "Callable[T,None]",
                    "Callable[[T],None]",
                    "lxml.etree.ElementBase"
                ],
                "msg": [
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/commands/__init__.py": {},
    "cslbot-master/cslbot/helpers/acl.py": {
        "set_admin": {
            "name": "set_admin",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "bytes",
                    "List[str]"
                ],
                "handler": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "cslbot-master/cslbot/helpers/arguments.py": {
        "NickParser.__call__": {
            "name": "__call__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "str",
                    "argparse.ArgumentParser",
                    "None",
                    "Optional[str]"
                ],
                "namespace": [
                    "Dict",
                    "str",
                    "Dict[str,Any]"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "None",
                    "Callable",
                    "Dict[str,str]",
                    "argparse.Namespace"
                ],
                "option_strings": [
                    "str",
                    "argparse.ArgumentParser",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "ChanParser.__call__": {
            "name": "__call__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "str",
                    "argparse.ArgumentParser",
                    "None",
                    "Optional[str]"
                ],
                "namespace": [
                    "str",
                    "List[str]",
                    "argparse.Namespace"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "Callable",
                    "None",
                    "Dict[str,Any]",
                    "Optional[Dict]",
                    "Dict"
                ],
                "option_strings": [
                    "str",
                    "argparse.ArgumentParser",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "DateParser.__call__": {
            "name": "__call__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "str",
                    "argparse.ArgumentParser",
                    "argparse.Namespace"
                ],
                "namespace": [
                    "str",
                    "argparse.ArgumentParser",
                    "argparse.Namespace"
                ],
                "value": [
                    "Optional[str]",
                    "str",
                    "argparse.Namespace",
                    "None"
                ],
                "option_strings": [
                    "str",
                    "argparse.ArgumentParser",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "TumblrParser.__call__": {
            "name": "__call__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "str",
                    "argparse.ArgumentParser",
                    "None",
                    "Optional[str]"
                ],
                "namespace": [
                    "Dict",
                    "Dict[str,Any]",
                    "str"
                ],
                "value": [
                    "Optional[Dict[str,Any]]",
                    "Dict",
                    "Dict[str,Any]",
                    "str"
                ],
                "option_strings": [
                    "str",
                    "argparse.ArgumentParser",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "ZipParser.__call__": {
            "name": "__call__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "str",
                    "argparse.ArgumentParser",
                    "None",
                    "Optional[str]"
                ],
                "namespace": [
                    "Tuple[int,int]",
                    "str",
                    "Tuple[Union[int,int]]"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "Callable",
                    "None",
                    "Dict",
                    "int",
                    "argparse.Namespace",
                    "Tuple[str]",
                    "Optional[Tuple[str]]"
                ],
                "option_strings": [
                    "str",
                    "argparse.ArgumentParser",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "ArgParser.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "ArgParser.error": {
            "name": "error",
            "location": 98,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "List[str]",
                    "Hashable"
                ]
            }
        },
        "ArgParser.exit": {
            "name": "exit",
            "location": 101,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "int",
                    "str"
                ],
                "message": [
                    "int",
                    "None",
                    "T",
                    "str",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "Optional[bool]"
                ]
            }
        },
        "ArgParser.parse_args": {
            "name": "parse_args",
            "location": 106,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "List[str]",
                    "float",
                    "int",
                    "Optional[List[str]]"
                ]
            }
        },
        "ArgParser.parse_known_args": {
            "name": "parse_known_args",
            "location": 109,
            "return": [
                "Tuple[(argparse.Namespace, List[str])]"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "None",
                    "Type",
                    "Tuple[float]",
                    "int",
                    "List[Union[PipeChain,str]]",
                    "List[Union[C,str]]"
                ],
                "namespace": [
                    "List[str]",
                    "None",
                    "Sequence[str]",
                    "Callable",
                    "int",
                    "str",
                    "argparse.Namespace"
                ]
            }
        }
    },
    "cslbot-master/cslbot/helpers/babble.py": {
        "get_messages": {
            "name": "get_messages",
            "location": 30,
            "return": [
                "Optional[str]",
                "bool",
                "Mapping[int, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cursor": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "cmdchar": [
                    "str",
                    "int",
                    "Optional[Exception]",
                    "Exception",
                    "Tuple[str,int]",
                    "None",
                    "Optional[str]",
                    "Tuple[Union[str,int]]"
                ],
                "ctrlchan": [
                    "str",
                    "int",
                    "Optional[Exception]",
                    "Exception",
                    "Tuple[str,int]",
                    "None",
                    "Optional[str]",
                    "Tuple[Union[str,int]]"
                ],
                "speaker": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[List[str]]",
                    "bool",
                    "int"
                ],
                "newer_than_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "clean_msg": {
            "name": "clean_msg",
            "location": 44,
            "return": [
                "list"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]"
                ]
            }
        },
        "get_markov": {
            "name": "get_markov",
            "location": 48,
            "return": [
                "collections.defaultdict"
            ],
            "arguments": {
                "cursor": [
                    "int",
                    "str",
                    "bool"
                ],
                "length": [
                    "int"
                ],
                "node": [
                    "str",
                    "bool",
                    "Type",
                    "Tuple[str]",
                    "Union[str,int]"
                ],
                "initial_run": [
                    "bool",
                    "Optional[List[str]]",
                    "List[str]",
                    "Dict[str,str]",
                    "Dict[str,Dict[str,Any]]",
                    "None",
                    "Optional[float]",
                    "Dict[str,dict[str,Any]]",
                    "float"
                ]
            }
        },
        "update_count": {
            "name": "update_count",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "cursor": [
                    "int",
                    "Tuple[int]",
                    "Callable",
                    "str",
                    "bool"
                ],
                "length": [
                    "int",
                    "Tuple[int]",
                    "Callable",
                    "str",
                    "bool"
                ],
                "source": [
                    "str"
                ],
                "target": [
                    "Exception",
                    "str",
                    "int"
                ]
            }
        },
        "generate_markov": {
            "name": "generate_markov",
            "location": 73,
            "return": [
                "Dict[(Tuple[(Any, Any, Any)], collections.defaultdict)]"
            ],
            "arguments": {
                "cursor": [
                    "Tuple[int,int]",
                    "Dict[str,Any]",
                    "Tuple[Union[int,int]]",
                    "bytes",
                    "List",
                    "Union[int,float]",
                    "int",
                    "float"
                ],
                "length": [
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]",
                    "List[int]",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ],
                "messages": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "initial_run": [
                    "Tuple[int,int]",
                    "Dict[str,Any]",
                    "Tuple[Union[int,int]]",
                    "bytes",
                    "List",
                    "Union[int,float]",
                    "int",
                    "float"
                ]
            }
        },
        "build_rows": {
            "name": "build_rows",
            "location": 89,
            "return": [
                "Tuple[(List[Tuple[(Any, Any, Any, Any, Any)]], List[Dict[(str, Any)]])]"
            ],
            "arguments": {
                "cursor": [
                    "str",
                    "bool",
                    "int"
                ],
                "length": [
                    "int",
                    "Optional[int]",
                    "str",
                    "Callable",
                    "None"
                ],
                "markov": [
                    "Dict[str,float]",
                    "Dict[str,dict[str,Any]]",
                    "Dict",
                    "bool",
                    "Dict[str,list[str]]",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,Any]",
                    "Dict[str,List[str]]",
                    "Optional[Dict[str,Any]]"
                ],
                "initial_run": [
                    "bool",
                    "int"
                ]
            }
        },
        "postgres_hack": {
            "name": "postgres_hack",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "cursor": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "length": [
                    "str",
                    "bool",
                    "Optional[Dict]",
                    "Dict",
                    "int",
                    "None"
                ],
                "data": [
                    "List[Union[int, float]]",
                    "bytes",
                    "float",
                    "str",
                    "Dict[str, Any]",
                    "Sequence"
                ]
            }
        },
        "delete_tables": {
            "name": "delete_tables",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "cursor": [
                    "Set[str]",
                    "list",
                    "set",
                    "List[str]",
                    "Pattern[str]",
                    "Pattern[bytes]",
                    "dict"
                ]
            }
        },
        "build_markov": {
            "name": "build_markov",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "cursor": [
                    "Sequence[str]",
                    "List[Optional[str]]",
                    "int",
                    "str",
                    "Dict[type, Any]"
                ],
                "cmdchar": [
                    "int",
                    "str",
                    "Callable",
                    "bool"
                ],
                "ctrlchan": [
                    "int",
                    "str",
                    "Callable",
                    "bool"
                ],
                "speaker": [
                    "int",
                    "None",
                    "str",
                    "Callable",
                    "bool"
                ],
                "initial_run": [
                    "bool",
                    "str",
                    "int",
                    "Dict",
                    "float"
                ],
                "debug": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "update_markov": {
            "name": "update_markov",
            "location": 208,
            "return": [
                "bool"
            ],
            "arguments": {
                "cursor": [
                    "Dict[str, Any]"
                ],
                "config": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        }
    },
    "cslbot-master/cslbot/helpers/backtrace.py": {
        "output_traceback": {
            "name": "output_traceback",
            "location": 27,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "ex": [
                    "Dict",
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "handle_traceback": {
            "name": "handle_traceback",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "ex": [
                    "bool",
                    "Dict",
                    "Set[str]",
                    "Dict[str,str]",
                    "str",
                    "Iterable[bytes]"
                ],
                "c": [
                    "str",
                    "int",
                    "bytes",
                    "List[str]"
                ],
                "target": [
                    "bool",
                    "str",
                    "List[str]",
                    "Dict[str,Any]"
                ],
                "config": [
                    "str",
                    "bool",
                    "Dict",
                    "Set[str]",
                    "Dict[str,str]",
                    "Iterable[bytes]"
                ],
                "source": [
                    "Text",
                    "str",
                    "Dict",
                    "int"
                ]
            }
        },
        "handle_traceback.send": {
            "name": "send",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "dict"
                ],
                "msg": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        }
    },
    "cslbot-master/cslbot/helpers/command.py": {
        "record_command": {
            "name": "record_command",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "cursor": [
                    "sqlalchemy.orm.Session",
                    "Tuple[int]",
                    "float",
                    "str"
                ],
                "nick": [
                    "str",
                    "int",
                    "bool"
                ],
                "command": [
                    "str",
                    "int",
                    "bool"
                ],
                "channel": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "check_command": {
            "name": "check_command",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "cursor": [
                    "int",
                    "Dict",
                    "str"
                ],
                "nick": [
                    "str",
                    "float",
                    "List"
                ],
                "msg": [
                    "str",
                    "float",
                    "List"
                ],
                "target": [
                    "int",
                    "Dict",
                    "str"
                ]
            }
        },
        "Command.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "names": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ],
                "args": [
                    "list[]"
                ],
                "limit": [
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "datetime.datetime",
                    "Optional[str]"
                ],
                "role": [
                    "int",
                    "None",
                    "str",
                    "Sequence",
                    "bool",
                    "datetime.datetime",
                    "Optional[str]"
                ]
            }
        },
        "Command.__call__": {
            "name": "__call__",
            "location": 57,
            "return": [
                "Callable[([Any, Any, Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "float",
                    "Callable[[T],bool]"
                ]
            }
        },
        "Command.__str__": {
            "name": "__str__",
            "location": 79,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.__repr__": {
            "name": "__repr__",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.run": {
            "name": "run",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "send": [
                    "int",
                    "str",
                    "Union"
                ],
                "msg": [
                    "int",
                    "str",
                    "Union"
                ],
                "args": [],
                "command": [
                    "Type"
                ],
                "nick": [
                    "Type"
                ],
                "target": [
                    "int",
                    "bool"
                ],
                "handler": []
            }
        },
        "Command.get_doc": {
            "name": "get_doc",
            "location": 95,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.is_limited": {
            "name": "is_limited",
            "location": 98,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.__call__.wrapper": {
            "name": "wrapper",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "str",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "msg": [
                    "str",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/helpers/config.py": {
        "migrate_config": {
            "name": "migrate_config",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "config_file": [
                    "str",
                    "path.Path"
                ],
                "config_obj": [
                    "configparser.ConfigParser",
                    "six.moves.configparser.ConfigParser"
                ],
                "send": [
                    "Callable[[str],None]",
                    "str",
                    "Callable[str,None]",
                    "Dict[str,Any]"
                ]
            }
        },
        "get_config": {
            "name": "get_config",
            "location": 61,
            "return": [
                "configparser.ConfigParser"
            ],
            "arguments": {}
        },
        "load_config": {
            "name": "load_config",
            "location": 70,
            "return": [
                "configparser.ConfigParser"
            ],
            "arguments": {
                "config_file": [
                    "str",
                    "bool",
                    "configparser.ConfigParser",
                    "os.PathLike"
                ],
                "send": [
                    "Callable[str,None]",
                    "str",
                    "Callable[[str],None]",
                    "configparser.RawConfigParser"
                ]
            }
        },
        "do_config": {
            "name": "do_config",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, Any]",
                    "configparser.ConfigParser"
                ]
            }
        },
        "do_setup": {
            "name": "do_setup",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "configfile": [
                    "str",
                    "List[str]",
                    "int",
                    "IO[Any]"
                ]
            }
        }
    },
    "cslbot-master/cslbot/helpers/control.py": {
        "handle_chanserv": {
            "name": "handle_chanserv",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "toggle_logging": {
            "name": "toggle_logging",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "level": [
                    "int",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "toggle_module": {
            "name": "toggle_module",
            "location": 35,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "type": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "enable": [
                    "bool"
                ]
            }
        },
        "handle_disable": {
            "name": "handle_disable",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "handle_enable": {
            "name": "handle_enable",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "handle_guard": {
            "name": "handle_guard",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "handle_unguard": {
            "name": "handle_unguard",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "handle_show_pending": {
            "name": "handle_show_pending",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "handle_show": {
            "name": "handle_show",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "show_pending_items": {
            "name": "show_pending_items",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "type": [
                    "typing.Type",
                    "dict[str, typing.Any]",
                    "typing.Callable[..., None]"
                ],
                "items": [
                    "dict[str, typing.Any]"
                ],
                "send": [
                    "str",
                    "typing.Any",
                    "None",
                    "list[dict[, ]]",
                    "list[]",
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "show_pending": {
            "name": "show_pending",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "str"
                ],
                "send": [
                    "str",
                    "Exception",
                    "typing.Type"
                ],
                "ping": [
                    "bool"
                ]
            }
        },
        "handle_accept": {
            "name": "handle_accept",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_accept_msg": {
            "name": "get_accept_msg",
            "location": 206,
            "return": [
                "Tuple[(Any, bool)]"
            ],
            "arguments": {
                "handler": [
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "pending": [
                    "bool",
                    "str",
                    "typing.Callable[..., collections.abc.Awaitable[typing.Any]]",
                    "None",
                    "float"
                ],
                "type": [
                    "str",
                    "None",
                    "int",
                    "typing.Type"
                ]
            }
        },
        "handle_reject": {
            "name": "handle_reject",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_reject_msg": {
            "name": "get_reject_msg",
            "location": 244,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "pending": [
                    "str",
                    "list[str]",
                    "None",
                    "typing.Type"
                ],
                "type": [
                    "str",
                    "typing.Type",
                    "None"
                ]
            }
        },
        "handle_quote": {
            "name": "handle_quote",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "handle_help": {
            "name": "handle_help",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "init_parser": {
            "name": "init_parser",
            "location": 274,
            "return": [
                "arguments.ArgParser"
            ],
            "arguments": {
                "send": [
                    "dict[, ]",
                    "bool",
                    "str",
                    "typing.Callable[, ]"
                ],
                "handler": [
                    "dict[, ]",
                    "None",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "typing.Sequence[]"
                ],
                "nick": [
                    "dict[, ]",
                    "bool",
                    "str",
                    "typing.Callable[, ]"
                ],
                "db": [
                    "dict[, ]",
                    "bool",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "handle_ctrlchan": {
            "name": "handle_ctrlchan",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "handler": [],
                "msg": [
                    "list[str]",
                    "None"
                ],
                "nick": [
                    "bool",
                    "str",
                    "collections.abc.Coroutine"
                ],
                "send": [
                    "str",
                    "bool",
                    "None",
                    "list[str]"
                ]
            }
        }
    },
    "cslbot-master/cslbot/helpers/core.py": {
        "init": {
            "name": "init",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "confdir": [
                    "typing.Text"
                ]
            }
        },
        "IrcBot.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "confdir": [
                    "bool"
                ],
                "config": [],
                "spec": [
                    "int",
                    "str"
                ],
                "idx": []
            }
        },
        "IrcBot.handle_event": {
            "name": "handle_event",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "str",
                    "int",
                    "bytes"
                ],
                "e": []
            }
        },
        "IrcBot.get_version": {
            "name": "get_version",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IrcBot.do_cap": {
            "name": "do_cap",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "bool",
                    "set[]"
                ]
            }
        },
        "IrcBot.start": {
            "name": "start",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IrcBot.get_target": {
            "name": "get_target",
            "location": 119,
            "return": [
                "Any"
            ],
            "arguments": {
                "e": [
                    "str",
                    "tuple[]",
                    "list[str]",
                    "None",
                    "typing.Callable[..., T]"
                ]
            }
        },
        "IrcBot.shutdown": {
            "name": "shutdown",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IrcBot.shutdown_mp": {
            "name": "shutdown_mp",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "clean": [
                    "bool"
                ]
            }
        },
        "IrcBot.handle_quit": {
            "name": "handle_quit",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "e": [
                    "str"
                ]
            }
        },
        "IrcBot.handle_msg": {
            "name": "handle_msg",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c": [],
                "e": []
            }
        },
        "IrcBot.is_reload": {
            "name": "is_reload",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "bool",
                    "dict[, ]",
                    "str",
                    "typing.Type"
                ]
            }
        },
        "IrcBot.reload_handler": {
            "name": "reload_handler",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "int",
                    "typing.Callable[, ]"
                ],
                "e": [
                    "typing.Callable[, ]",
                    "dict[, ]"
                ]
            }
        }
    },
    "cslbot-master/cslbot/helpers/exception.py": {},
    "cslbot-master/cslbot/helpers/geoip.py": {
        "get_zipcode": {
            "name": "get_zipcode",
            "location": 20,
            "return": [
                "Dict[str, Any]",
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "db": [
                    "Set[str]",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ],
                "ip": [
                    "Set[str]",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ]
            }
        }
    },
    "cslbot-master/cslbot/helpers/handler.py": {
        "BotHandler.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "connection": [],
                "channels": [],
                "confdir": [],
                "idx": []
            }
        },
        "BotHandler.get_data": {
            "name": "get_data",
            "location": 75,
            "return": [
                "Dict[(str, Union[(dict, List[nothing])])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotHandler.set_data": {
            "name": "set_data",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "BotHandler.update_authstatus": {
            "name": "update_authstatus",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nick": []
            }
        },
        "BotHandler.send_who": {
            "name": "send_who",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [],
                "tag": []
            }
        },
        "BotHandler.is_admin": {
            "name": "is_admin",
            "location": 108,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "send": [],
                "nick": [],
                "required_role": []
            }
        },
        "BotHandler.get_admins": {
            "name": "get_admins",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotHandler.abusecheck": {
            "name": "abusecheck",
            "location": 152,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "send": [],
                "nick": [],
                "target": [],
                "limit": [],
                "cmd": []
            }
        },
        "BotHandler.build_split_msg": {
            "name": "build_split_msg",
            "location": 179,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "msg": [],
                "max_len": []
            }
        },
        "BotHandler.send": {
            "name": "send",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [],
                "nick": [],
                "msg": [],
                "msgtype": [],
                "ignore_length": [],
                "filters": []
            }
        },
        "BotHandler.rate_limited_send": {
            "name": "rate_limited_send",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mtype": [],
                "target": [],
                "msg": []
            }
        },
        "BotHandler.do_log": {
            "name": "do_log",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [],
                "nick": [],
                "msg": [],
                "msgtype": []
            }
        },
        "BotHandler.do_part": {
            "name": "do_part",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cmdargs": [],
                "nick": [],
                "target": [],
                "msgtype": [],
                "send": [],
                "c": []
            }
        },
        "BotHandler.do_join": {
            "name": "do_join",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cmdargs": [],
                "nick": [],
                "msgtype": [],
                "send": [],
                "c": []
            }
        },
        "BotHandler.check_mode": {
            "name": "check_mode",
            "location": 311,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "mode": []
            }
        },
        "BotHandler.do_mode": {
            "name": "do_mode",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [],
                "msg": [],
                "nick": [],
                "send": []
            }
        },
        "BotHandler.do_kick": {
            "name": "do_kick",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "send": [],
                "target": [],
                "nick": [],
                "msg": [],
                "slogan": []
            }
        },
        "BotHandler.do_args": {
            "name": "do_args",
            "location": 378,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "modargs": [],
                "send": [],
                "nick": [],
                "target": [],
                "source": [],
                "name": [],
                "msgtype": []
            }
        },
        "BotHandler.do_welcome": {
            "name": "do_welcome",
            "location": 402,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotHandler.is_ignored": {
            "name": "is_ignored",
            "location": 418,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "nick": []
            }
        },
        "BotHandler.get_filtered_send": {
            "name": "get_filtered_send",
            "location": 422,
            "return": [
                "Tuple[(str, Optional[Union[(Callable, _T1)]])]"
            ],
            "arguments": {
                "self": [],
                "cmdargs": [],
                "send": [
                    "_T1@@"
                ],
                "target": []
            }
        },
        "BotHandler.do_rejoin": {
            "name": "do_rejoin",
            "location": 443,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c": [],
                "e": []
            }
        },
        "BotHandler.handle_event": {
            "name": "handle_event",
            "location": 448,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [],
                "send": [],
                "c": [],
                "e": []
            }
        },
        "BotHandler.serverpass": {
            "name": "serverpass",
            "location": 478,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotHandler.handle_authenticate": {
            "name": "handle_authenticate",
            "location": 481,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": []
            }
        },
        "BotHandler.handle_account": {
            "name": "handle_account",
            "location": 488,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": []
            }
        },
        "BotHandler.handle_welcome": {
            "name": "handle_welcome",
            "location": 498,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotHandler.handle_who": {
            "name": "handle_who",
            "location": 505,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": []
            }
        },
        "BotHandler.handle_cap": {
            "name": "handle_cap",
            "location": 521,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": []
            }
        },
        "BotHandler.handle_nick": {
            "name": "handle_nick",
            "location": 530,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "send": [],
                "e": []
            }
        },
        "BotHandler.handle_join": {
            "name": "handle_join",
            "location": 543,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c": [],
                "e": [],
                "target": [],
                "send": []
            }
        },
        "BotHandler.get_cmd": {
            "name": "get_cmd",
            "location": 564,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "BotHandler.run_cmd": {
            "name": "run_cmd",
            "location": 582,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "send": [],
                "nick": [],
                "target": [],
                "cmd_name": [],
                "cmdargs": [],
                "e": []
            }
        },
        "BotHandler.handle_kick": {
            "name": "handle_kick",
            "location": 597,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c": [],
                "e": [],
                "target": [],
                "send": []
            }
        },
        "BotHandler.handle_hooks": {
            "name": "handle_hooks",
            "location": 603,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "send": [],
                "nick": [],
                "target": [],
                "e": [],
                "msg": []
            }
        },
        "BotHandler.handle_msg": {
            "name": "handle_msg",
            "location": 609,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c": [],
                "e": []
            }
        },
        "BotHandler.get_filtered_send.filtersend": {
            "name": "filtersend",
            "location": 438,
            "return": [],
            "arguments": {
                "msg": [],
                "mtype": [],
                "target": [],
                "ignore_length": []
            }
        },
        "BotHandler.handle_msg.send": {
            "name": "send",
            "location": 625,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [],
                "mtype": [],
                "target": [],
                "ignore_length": []
            }
        }
    },
    "cslbot-master/cslbot/helpers/hook.py": {
        "Hook.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "Type[T]",
                    "Type",
                    "Optional[str]",
                    "None"
                ],
                "types": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ],
                "args": [
                    "list[]"
                ]
            }
        },
        "Hook.__call__": {
            "name": "__call__",
            "location": 34,
            "return": [
                "Callable[([Any, Any, Any, Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable"
                ]
            }
        },
        "Hook.__str__": {
            "name": "__str__",
            "location": 54,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hook.__repr__": {
            "name": "__repr__",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hook.run": {
            "name": "run",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "send": [
                    "bool"
                ],
                "msg": [
                    "bool"
                ],
                "msgtype": [
                    "bool"
                ],
                "handler": [
                    "int",
                    "Iterable[str]"
                ],
                "target": [
                    "str",
                    "int",
                    "List",
                    "bool"
                ],
                "args": []
            }
        },
        "Hook.__call__.wrapper": {
            "name": "wrapper",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "str",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "msg": [
                    "str",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "msgtype": [
                    "str"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/helpers/identity.py": {
        "handle_nick": {
            "name": "handle_nick",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "handler": [
                    "str",
                    "Callable[[T],bool]",
                    "Dict",
                    "Callable[T,bool]",
                    "Mapping[str,Any]",
                    "Mapping",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "e": [
                    "Type",
                    "str",
                    "Callable[...,None]",
                    "Callable"
                ]
            }
        },
        "get_chain": {
            "name": "get_chain",
            "location": 30,
            "return": [
                "list"
            ],
            "arguments": {
                "session": [
                    "str",
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session"
                ],
                "nick": [
                    "str",
                    "bool",
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.scoped_session"
                ],
                "limit": [
                    "str",
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "do_kick": {
            "name": "do_kick",
            "location": 49,
            "return": [
                "bool"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session"
                ],
                "nick": [
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session"
                ]
            }
        }
    },
    "cslbot-master/cslbot/helpers/misc.py": {
        "get_users": {
            "name": "get_users",
            "location": 33,
            "return": [
                "list"
            ],
            "arguments": {
                "args": []
            }
        },
        "parse_time": {
            "name": "parse_time",
            "location": 39,
            "return": [
                "Optional[Union[(float, int)]]"
            ],
            "arguments": {
                "time": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "do_pull": {
            "name": "do_pull",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "srcdir": [
                    "bool",
                    "None",
                    "str",
                    "Optional[str]"
                ],
                "repo": [
                    "Optional[Dict[str,str]]",
                    "str",
                    "None",
                    "Dict[str,str]"
                ]
            }
        },
        "do_nuke": {
            "name": "do_nuke",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "c": [
                    "float",
                    "int"
                ],
                "nick": [
                    "float",
                    "int"
                ],
                "target": [
                    "float",
                    "int"
                ],
                "channel": [
                    "float",
                    "int",
                    "List[str]",
                    "bool",
                    "None",
                    "Optional[List[str]]",
                    "datetime.datetime"
                ]
            }
        },
        "ping": {
            "name": "ping",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "ping_map": [
                    "bytes",
                    "Callable[[bytes], bytes]",
                    "int",
                    "bool"
                ],
                "c": [
                    "Iterable['cirq.Qid']",
                    "List['cirq.Qid']",
                    "list"
                ],
                "e": [],
                "pongtime": [
                    "str",
                    "int",
                    "datetime.datetime",
                    "None",
                    "datetime.timedelta",
                    "Optional[datetime.tzinfo]"
                ]
            }
        },
        "get_channels": {
            "name": "get_channels",
            "location": 135,
            "return": [
                "list"
            ],
            "arguments": {
                "chanlist": [
                    "Dict",
                    "Dict[str,Any]",
                    "Dict[str,float]",
                    "Dict[str,str]",
                    "Dict[str,bool]"
                ],
                "nick": [
                    "int",
                    "Tuple[bytes]",
                    "Dict[str,Any]",
                    "str"
                ]
            }
        },
        "get_cmdchar": {
            "name": "get_cmdchar",
            "location": 143,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "Sequence"
                ],
                "connection": [
                    "List[dict]",
                    "Set",
                    "Dict",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "msg": [
                    "str",
                    "Dict[str,str]",
                    "configparser.ConfigParser"
                ],
                "msgtype": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "parse_header": {
            "name": "parse_header",
            "location": 165,
            "return": [
                "str"
            ],
            "arguments": {
                "header": [
                    "Dict[str,str]",
                    "str",
                    "Optional[dict]",
                    "Dict",
                    "None"
                ],
                "msg": [
                    "List[dict]",
                    "Dict[str,Any]",
                    "Set",
                    "sqlalchemy.orm.Session",
                    "List",
                    "List[T]",
                    "Optional[List[T]]",
                    "None"
                ]
            }
        },
        "list_fortunes": {
            "name": "list_fortunes",
            "location": 198,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "offensive": [
                    "bool",
                    "str",
                    "int",
                    "List",
                    "Optional[str]"
                ]
            }
        },
        "get_fortune": {
            "name": "get_fortune",
            "location": 216,
            "return": [
                "str"
            ],
            "arguments": {
                "msg": [
                    "str"
                ],
                "name": [
                    "str",
                    "Text"
                ]
            }
        },
        "ignore": {
            "name": "ignore",
            "location": 234,
            "return": [
                "str"
            ],
            "arguments": {
                "session": [
                    "str",
                    "None",
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.scoping.scoped_session",
                    "sqlalchemy.orm.Session",
                    "Optional[str]"
                ],
                "nick": [
                    "str",
                    "None",
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.scoping.scoped_session",
                    "sqlalchemy.orm.Session",
                    "Optional[str]"
                ]
            }
        },
        "get_version": {
            "name": "get_version",
            "location": 244,
            "return": [
                "Tuple[(Optional[str], Optional[str])]"
            ],
            "arguments": {
                "srcdir": [
                    "str"
                ]
            }
        },
        "split_msg": {
            "name": "split_msg",
            "location": 256,
            "return": [
                "Tuple[(str, _T0)]"
            ],
            "arguments": {
                "msgs": [
                    "str",
                    "int"
                ],
                "max_len": [
                    "int",
                    "bytes",
                    "str",
                    "bool",
                    "Dict[str,Any]"
                ]
            }
        },
        "truncate_msg": {
            "name": "truncate_msg",
            "location": 270,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "int",
                    "bytes"
                ],
                "max_len": [
                    "int",
                    "str",
                    "bool",
                    "List[Tuple[int,int]]"
                ]
            }
        },
        "escape": {
            "name": "escape",
            "location": 278,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str,Any]]",
                "Dict[str,str]",
                "bool"
            ],
            "arguments": {
                "data": [
                    "str",
                    "List[PlotInfo]"
                ]
            }
        },
        "get_max_length": {
            "name": "get_max_length",
            "location": 283,
            "return": [
                "int"
            ],
            "arguments": {
                "target": [
                    "str",
                    "bool"
                ],
                "msgtype": [
                    "bool",
                    "str",
                    "Dict",
                    "T"
                ]
            }
        }
    },
    "cslbot-master/cslbot/helpers/modutils.py": {
        "init_aux": {
            "name": "init_aux",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Mapping[str, str]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "load_groups": {
            "name": "load_groups",
            "location": 49,
            "return": [
                "configparser.ConfigParser"
            ],
            "arguments": {
                "confdir": [
                    "str"
                ]
            }
        },
        "init_groups": {
            "name": "init_groups",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "groups": [
                    "Mapping",
                    "Mapping[str,str]",
                    "int",
                    "Dict[str,dict[str,Any]]",
                    "List[ValidatorRecord]",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,Any]"
                ],
                "confdir": [
                    "bool",
                    "List[str]",
                    "str",
                    "ark.types.DinoCharacterStatusComponent"
                ]
            }
        },
        "add_to_groups": {
            "name": "add_to_groups",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "str",
                    "logging.Logger"
                ],
                "groups": [
                    "str",
                    "Iterable[str]",
                    "Iterable[Any]",
                    "bool",
                    "Dict"
                ],
                "mod_type": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "loaded": {
            "name": "loaded",
            "location": 79,
            "return": [
                "bool"
            ],
            "arguments": {
                "mod_type": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "parse_group": {
            "name": "parse_group",
            "location": 83,
            "return": [
                "Dict[(Any, list)]"
            ],
            "arguments": {
                "cfg": [
                    "Mapping[str, str]",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "group_enabled": {
            "name": "group_enabled",
            "location": 90,
            "return": [
                "bool"
            ],
            "arguments": {
                "mod_type": [
                    "str",
                    "Dict[str,Sequence[str]]",
                    "Optional[Mapping[str,Any]]",
                    "Mapping",
                    "None"
                ],
                "name": [
                    "str",
                    "Dict[str,Sequence[str]]",
                    "Optional[Mapping[str,Any]]",
                    "Mapping",
                    "None"
                ]
            }
        },
        "group_disabled": {
            "name": "group_disabled",
            "location": 96,
            "return": [
                "bool"
            ],
            "arguments": {
                "mod_type": [
                    "str",
                    "Optional[Mapping[str,Any]]",
                    "Mapping",
                    "None"
                ],
                "name": [
                    "str",
                    "Optional[Mapping[str,Any]]",
                    "Mapping",
                    "None"
                ]
            }
        },
        "get_disabled": {
            "name": "get_disabled",
            "location": 100,
            "return": [
                "set"
            ],
            "arguments": {
                "mod_type": [
                    "str",
                    "Dict[str,Any]",
                    "Type"
                ]
            }
        },
        "get_enabled": {
            "name": "get_enabled",
            "location": 104,
            "return": [
                "Tuple[(List[str], List[str])]"
            ],
            "arguments": {
                "mod_type": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "package": [
                    "Text",
                    "str",
                    "Dict[str,str]",
                    "Type",
                    "Iterable"
                ]
            }
        },
        "get_modules": {
            "name": "get_modules",
            "location": 122,
            "return": [
                "Tuple[(List[str], List[str])]"
            ],
            "arguments": {
                "mod_type": [
                    "str",
                    "Type",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "safe_reload": {
            "name": "safe_reload",
            "location": 137,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "modname": [
                    "int",
                    "types.ModuleType"
                ]
            }
        },
        "safe_load": {
            "name": "safe_load",
            "location": 152,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "modname": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "scan_and_reimport": {
            "name": "scan_and_reimport",
            "location": 167,
            "return": [
                "List[Tuple[(Any, str)]]"
            ],
            "arguments": {
                "mod_type": [
                    "str"
                ]
            }
        },
        "ModuleData.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModuleData.reset": {
            "name": "reset",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cslbot-master/cslbot/helpers/orm.py": {
        "setup_db": {
            "name": "setup_db",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.Session"
                ],
                "botconfig": [
                    "Tuple[Union[float,float]]",
                    "sqlalchemy.orm.Session",
                    "abilian.core.sqlalchemy.SQLAlchemy",
                    "Tuple[float,float]",
                    "bool",
                    "Dict[str,Any]"
                ],
                "confdir": [
                    "Dict",
                    "bool",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "Base.__tablename__": {
            "name": "__tablename__",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cslbot-master/cslbot/helpers/reddit.py": {
        "check_exists": {
            "name": "check_exists",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "subreddit": [
                    "str",
                    "Dict",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "random_post": {
            "name": "random_post",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "subreddit": [
                    "Optional[int]",
                    "str",
                    "int",
                    "None"
                ],
                "apikey": [
                    "Dict",
                    "str",
                    "List[str]",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        }
    },
    "cslbot-master/cslbot/helpers/registry.py": {
        "Registry.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Registry.is_disabled": {
            "name": "is_disabled",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int"
                ]
            }
        },
        "Registry.register": {
            "name": "register",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str"
                ],
                "name": [
                    "Optional[str]",
                    "None",
                    "str",
                    "Optional[Set[str]]",
                    "Set[str]"
                ]
            }
        },
        "Registry.scan_for_objects": {
            "name": "scan_for_objects",
            "location": 37,
            "return": [
                "List[Tuple[(Any, str)]]"
            ],
            "arguments": {
                "self": [],
                "obj_type": [
                    "str"
                ]
            }
        },
        "Registry.disable_object": {
            "name": "disable_object",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj_type": [
                    "BinaryIO",
                    "BaseException",
                    "Exception",
                    "Type",
                    "Type[BaseException]"
                ],
                "obj": []
            }
        },
        "Registry.enable_object": {
            "name": "enable_object",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj_type": [
                    "str",
                    "Type"
                ],
                "obj": [
                    "bool"
                ]
            }
        },
        "HookRegistry.scan_for_hooks": {
            "name": "scan_for_hooks",
            "location": 67,
            "return": [
                "List[Tuple[(Any, str)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HookRegistry.get_known_hooks": {
            "name": "get_known_hooks",
            "location": 77,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HookRegistry.get_hook_objects": {
            "name": "get_hook_objects",
            "location": 80,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HookRegistry.get_enabled_hooks": {
            "name": "get_enabled_hooks",
            "location": 83,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HookRegistry.get_disabled_hooks": {
            "name": "get_disabled_hooks",
            "location": 86,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HookRegistry.disable_hook": {
            "name": "disable_hook",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "hook": [
                    "str",
                    "float",
                    "Optional[str]",
                    "List[str]",
                    "None"
                ]
            }
        },
        "HookRegistry.enable_hook": {
            "name": "enable_hook",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "hook": [
                    "str",
                    "float",
                    "Optional[str]",
                    "List[str]",
                    "None"
                ]
            }
        },
        "CommandRegistry.scan_for_commands": {
            "name": "scan_for_commands",
            "location": 103,
            "return": [
                "List[Tuple[(Any, str)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandRegistry.get_known_commands": {
            "name": "get_known_commands",
            "location": 112,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandRegistry.get_enabled_commands": {
            "name": "get_enabled_commands",
            "location": 115,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandRegistry.get_disabled_commands": {
            "name": "get_disabled_commands",
            "location": 118,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandRegistry.is_registered": {
            "name": "is_registered",
            "location": 121,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "command_name": [
                    "str"
                ]
            }
        },
        "CommandRegistry.get_command": {
            "name": "get_command",
            "location": 124,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "command_name": [
                    "str"
                ]
            }
        },
        "CommandRegistry.disable_command": {
            "name": "disable_command",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "float",
                    "Optional[str]",
                    "List[str]",
                    "None"
                ]
            }
        },
        "CommandRegistry.enable_command": {
            "name": "enable_command",
            "location": 131,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "float",
                    "Optional[str]",
                    "List[str]",
                    "None"
                ]
            }
        }
    },
    "cslbot-master/cslbot/helpers/reloader.py": {
        "do_log": {
            "name": "do_log",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "c": [
                    "Iterable[Any]",
                    "List[str]"
                ],
                "target": [
                    "Iterable[Any]",
                    "List[str]"
                ],
                "msg": [
                    "Dict",
                    "str"
                ]
            }
        },
        "load_modules": {
            "name": "load_modules",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "cfg": [
                    "str",
                    "configparser.ConfigParser",
                    "bool"
                ],
                "confdir": [
                    "str",
                    "bool",
                    "configparser.ConfigParser"
                ],
                "send": [
                    "Callable[[str], None]",
                    "str",
                    "int",
                    "Exception"
                ]
            }
        },
        "do_reload": {
            "name": "do_reload",
            "location": 50,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "bot": [
                    "Optional[str]"
                ],
                "target": [
                    "bool",
                    "str",
                    "List[int]"
                ],
                "cmdargs": [
                    "bool",
                    "Set",
                    "int"
                ],
                "server_send": [
                    "bool",
                    "None",
                    "Set",
                    "int"
                ]
            }
        },
        "do_reload.send": {
            "name": "send",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "cslbot-master/cslbot/helpers/server.py": {
        "init_server": {
            "name": "init_server",
            "location": 40,
            "return": [
                "BotNetServer"
            ],
            "arguments": {
                "bot": [
                    "str",
                    "int",
                    "float",
                    "Optional[str]"
                ]
            }
        },
        "BotNetHandler.get_data": {
            "name": "get_data",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotNetHandler.handle_cmd": {
            "name": "handle_cmd",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "list",
                    "str",
                    "int",
                    "bytes",
                    "List[str]"
                ],
                "bot": [
                    "bytes",
                    "str"
                ],
                "send": [
                    "Callable",
                    "Tuple"
                ]
            }
        },
        "BotNetHandler.handle": {
            "name": "handle",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotNetHandler.handle.send": {
            "name": "send",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "str"
                ]
            }
        }
    },
    "cslbot-master/cslbot/helpers/sql.py": {
        "get_session": {
            "name": "get_session",
            "location": 28,
            "return": [
                "sqlalchemy.orm.session.sessionmaker"
            ],
            "arguments": {
                "config": [
                    "str",
                    "Optional[Iterable[str]]",
                    "configparser.ConfigParser"
                ]
            }
        },
        "Sql.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict"
                ],
                "confdir": [
                    "str",
                    "Dict"
                ]
            }
        },
        "Sql.session_scope": {
            "name": "session_scope",
            "location": 43,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sql.log": {
            "name": "log",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "bool"
                ],
                "target": [
                    "str",
                    "bool"
                ],
                "flags": [
                    "str",
                    "bool"
                ],
                "msg": [
                    "str",
                    "bool"
                ],
                "mtype": [
                    "str",
                    "bool"
                ],
                "server": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "cslbot-master/cslbot/helpers/textutils.py": {
        "gen_removevowels": {
            "name": "gen_removevowels",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "msg": []
            }
        },
        "gen_word": {
            "name": "gen_word",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "gen_hashtag": {
            "name": "gen_hashtag",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "msg": []
            }
        },
        "gen_yoda": {
            "name": "gen_yoda",
            "location": 52,
            "return": [
                "Any"
            ],
            "arguments": {
                "msg": []
            }
        },
        "gen_gizoogle": {
            "name": "gen_gizoogle",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "msg": []
            }
        },
        "gen_shakespeare": {
            "name": "gen_shakespeare",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "msg": []
            }
        },
        "gen_praise": {
            "name": "gen_praise",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "msg": []
            }
        },
        "get_praise": {
            "name": "get_praise",
            "location": 82,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "gen_fwilson": {
            "name": "gen_fwilson",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [],
                "mode": [
                    "None"
                ]
            }
        },
        "gen_creffett": {
            "name": "gen_creffett",
            "location": 101,
            "return": [
                "str"
            ],
            "arguments": {
                "msg": []
            }
        },
        "gen_slogan": {
            "name": "gen_slogan",
            "location": 105,
            "return": [
                "Any"
            ],
            "arguments": {
                "msg": []
            }
        },
        "gen_jeffsessionstheyoungman": {
            "name": "gen_jeffsessionstheyoungman",
            "location": 114,
            "return": [
                "str"
            ],
            "arguments": {
                "msg": []
            }
        },
        "gen_morse": {
            "name": "gen_morse",
            "location": 120,
            "return": [
                "str"
            ],
            "arguments": {
                "msg": []
            }
        },
        "gen_insult": {
            "name": "gen_insult",
            "location": 187,
            "return": [
                "str"
            ],
            "arguments": {
                "user": []
            }
        },
        "char_to_bin": {
            "name": "char_to_bin",
            "location": 218,
            "return": [
                "str"
            ],
            "arguments": {
                "c": []
            }
        },
        "gen_binary": {
            "name": "gen_binary",
            "location": 233,
            "return": [
                "str"
            ],
            "arguments": {
                "text": []
            }
        },
        "gen_xkcd_sub": {
            "name": "gen_xkcd_sub",
            "location": 237,
            "return": [
                "Optional[Union[(str, _T0)]]"
            ],
            "arguments": {
                "msg": [
                    "_T0@@"
                ],
                "hook": [
                    "bool"
                ]
            }
        },
        "reverse": {
            "name": "reverse",
            "location": 272,
            "return": [
                "Any"
            ],
            "arguments": {
                "msg": []
            }
        },
        "gen_lenny": {
            "name": "gen_lenny",
            "location": 276,
            "return": [
                "str"
            ],
            "arguments": {
                "msg": []
            }
        },
        "gen_shibe": {
            "name": "gen_shibe",
            "location": 280,
            "return": [
                "str"
            ],
            "arguments": {
                "msg": []
            }
        },
        "gen_underscore": {
            "name": "gen_underscore",
            "location": 295,
            "return": [
                "Any"
            ],
            "arguments": {
                "msg": []
            }
        },
        "gen_translate": {
            "name": "gen_translate",
            "location": 299,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "msg": [],
                "fromlang": [
                    "None"
                ],
                "tolang": [
                    "typing.Text"
                ]
            }
        },
        "get_languages": {
            "name": "get_languages",
            "location": 314,
            "return": [
                "list"
            ],
            "arguments": {
                "key": []
            }
        },
        "gen_random_translate": {
            "name": "gen_random_translate",
            "location": 319,
            "return": [
                "str"
            ],
            "arguments": {
                "msg": []
            }
        },
        "gen_multi_translate": {
            "name": "gen_multi_translate",
            "location": 328,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "msg": [
                    "_T0@@"
                ]
            }
        },
        "gen_spacing": {
            "name": "gen_spacing",
            "location": 334,
            "return": [
                "str"
            ],
            "arguments": {
                "msg": []
            }
        },
        "gen_fullwidth": {
            "name": "gen_fullwidth",
            "location": 342,
            "return": [
                "Any"
            ],
            "arguments": {
                "msg": []
            }
        },
        "append_filters": {
            "name": "append_filters",
            "location": 350,
            "return": [
                "Tuple[(Optional[List[Callable]], str)]"
            ],
            "arguments": {
                "filters": []
            }
        },
        "gen_randfilter": {
            "name": "gen_randfilter",
            "location": 360,
            "return": [
                "Any"
            ],
            "arguments": {
                "msg": []
            }
        },
        "gen_sanitize": {
            "name": "gen_sanitize",
            "location": 365,
            "return": [
                "Any"
            ],
            "arguments": {
                "msg": []
            }
        },
        "gen_intensify": {
            "name": "gen_intensify",
            "location": 370,
            "return": [
                "str"
            ],
            "arguments": {
                "msg": []
            }
        },
        "gen_djones": {
            "name": "gen_djones",
            "location": 374,
            "return": [
                "str"
            ],
            "arguments": {
                "msg": []
            }
        }
    },
    "cslbot-master/cslbot/helpers/twitter.py": {
        "get_api": {
            "name": "get_api",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "config": [
                    "str",
                    "Dict[str,Any]",
                    "Mapping[str,Any]",
                    "int"
                ]
            }
        }
    },
    "cslbot-master/cslbot/helpers/urlutils.py": {
        "get_short": {
            "name": "get_short",
            "location": 31,
            "return": [
                "Text",
                "str",
                "bytes",
                "Optional[int]",
                "Dict"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "Dict[str, Any]",
                    "requests.models.Response",
                    "Optional[Union[Dict, str, int, bytes]]",
                    "dict"
                ],
                "key": [
                    "str",
                    "bytes",
                    "Dict[str,Any]"
                ]
            }
        },
        "parse_title": {
            "name": "parse_title",
            "location": 44,
            "return": [
                "bool",
                "Text",
                "int",
                "str",
                "Union[str,Dict[str,str]]",
                "None",
                "Dict[str,Any]",
                "Dict"
            ],
            "arguments": {
                "req": [
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "identify_image": {
            "name": "identify_image",
            "location": 65,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "req": [
                    "str",
                    "Optional[Union[Dict,str,int,bytes]]",
                    "Dict",
                    "int",
                    "bytes",
                    "None"
                ],
                "key": [
                    "str",
                    "Dict[str,str]",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "parse_mime": {
            "name": "parse_mime",
            "location": 94,
            "return": [
                "str",
                "int",
                "Text",
                "None"
            ],
            "arguments": {
                "req": [
                    "str",
                    "bytes"
                ],
                "key": [
                    "str",
                    "List[int]",
                    "bytes"
                ]
            }
        },
        "get_title": {
            "name": "get_title",
            "location": 119,
            "return": [
                "Text",
                "str",
                "Optional[str]",
                "Optional[Dict[str,Any]]",
                "Optional[float]",
                "TextIO"
            ],
            "arguments": {
                "url": [
                    "str"
                ],
                "key": [
                    "str",
                    "Dict",
                    "List[str]"
                ]
            }
        }
    },
    "cslbot-master/cslbot/helpers/web.py": {
        "get_rand_word": {
            "name": "get_rand_word",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "session": [
                    "float",
                    "int",
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.scoped_session"
                ]
            }
        },
        "get_urban": {
            "name": "get_urban",
            "location": 37,
            "return": [
                "Tuple[(str, Any)]"
            ],
            "arguments": {
                "msg": [
                    "int",
                    "Optional[Dict]",
                    "Dict",
                    "Optional",
                    "str",
                    "Dict[str,object]",
                    "Optional[str]",
                    "None"
                ],
                "session": [
                    "str",
                    "bool",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "get_urban_definition": {
            "name": "get_urban_definition",
            "location": 47,
            "return": [
                "Tuple[(str, Any)]"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "List[str]",
                    "Sequence[str]",
                    "Dict[str,Any]",
                    "Tuple[str,str,str]"
                ],
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "create_issue": {
            "name": "create_issue",
            "location": 74,
            "return": [
                "Tuple[(Any, bool)]"
            ],
            "arguments": {
                "title": [
                    "str",
                    "bool",
                    "Dict",
                    "Optional[Dict]",
                    "None"
                ],
                "desc": [
                    "str",
                    "bool",
                    "Dict",
                    "Optional[Dict]",
                    "None"
                ],
                "nick": [
                    "str",
                    "bool",
                    "Dict",
                    "Optional[Dict]",
                    "None"
                ],
                "repo": [
                    "str",
                    "List[dict]",
                    "Dict[str,Any]",
                    "Dict"
                ],
                "apikey": [
                    "str",
                    "bool",
                    "Dict",
                    "Optional[Dict]",
                    "None"
                ]
            }
        },
        "post_tumblr": {
            "name": "post_tumblr",
            "location": 87,
            "return": [
                "Tuple[(str, bool)]"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "blog": [
                    "Dict[str,Any]",
                    "str",
                    "int",
                    "bytes"
                ],
                "body": [
                    "str",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        }
    },
    "cslbot-master/cslbot/helpers/workers.py": {
        "Workers.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "str",
                    "bool",
                    "Dict"
                ]
            }
        },
        "Workers.start_thread": {
            "name": "start_thread",
            "location": 53,
            "return": [
                "concurrent.futures._base.Future"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Dict",
                    "List"
                ]
            }
        },
        "Workers.run_action": {
            "name": "run_action",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Dict",
                    "Type",
                    "Callable[...,T]",
                    "Callable"
                ],
                "args": []
            }
        },
        "Workers.defer": {
            "name": "defer",
            "location": 70,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "List[Union[PipeChain,str]]",
                    "List",
                    "List[Union[C,str]]"
                ],
                "run_on_cancel": [
                    "bool",
                    "Callable",
                    "None",
                    "Optional[int]",
                    "int"
                ],
                "func": [
                    "Dict",
                    "Mapping",
                    "Callable",
                    "List[Dict]",
                    "List[dict]",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "Workers.cancel": {
            "name": "cancel",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "eventid": [
                    "Optional[str]",
                    "Callable",
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "Workers.stop_workers": {
            "name": "stop_workers",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "clean": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Workers.handle_pending": {
            "name": "handle_pending",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "bool",
                    "Dict[str,str]",
                    "List[str]",
                    "str"
                ],
                "send": [
                    "str",
                    "Dict",
                    "Mapping"
                ]
            }
        },
        "Workers.send_quotes": {
            "name": "send_quotes",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "str",
                    "Callable",
                    "bool",
                    "nucypher.characters.control.emitters.StdoutEmitter"
                ],
                "send": [
                    "Hashable",
                    "Type",
                    "bool",
                    "Type[T]"
                ]
            }
        },
        "Workers.check_active": {
            "name": "check_active",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "Callable",
                    "bool",
                    "commands.CommandMessage"
                ],
                "send": [
                    "bool",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "Workers.update_babble": {
            "name": "update_babble",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "str"
                ],
                "send": [
                    "bool",
                    "str"
                ]
            }
        },
        "Workers.__init__.send": {
            "name": "send",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "Optional[int]",
                    "bool",
                    "Callable[[str], None]",
                    "str",
                    "Dict[str, List[str]]",
                    "Sequence[Sequence[T]]",
                    "List[str]",
                    "int"
                ],
                "target": [
                    "Optional[int]",
                    "bool",
                    "Callable[[str], None]",
                    "str",
                    "Dict[str, List[str]]",
                    "Sequence[Sequence[T]]",
                    "List[str]",
                    "int"
                ]
            }
        }
    },
    "cslbot-master/cslbot/helpers/__init__.py": {},
    "cslbot-master/cslbot/hooks/autodeop.py": {
        "handle": {
            "name": "handle",
            "location": 23,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "_": [
                    "str",
                    "bytes",
                    "Dict",
                    "Optional[str]",
                    "None"
                ],
                "msg": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/hooks/babble.py": {
        "hook": {
            "name": "hook",
            "location": 23,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "str"
                ],
                "msg": [
                    "str"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/hooks/band.py": {
        "handle": {
            "name": "handle",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "str"
                ],
                "msg": [
                    "str",
                    "Iterable[str]",
                    "bytes"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/hooks/bob.py": {
        "handle": {
            "name": "handle",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "str"
                ],
                "msg": [
                    "str"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/hooks/butt.py": {
        "handle": {
            "name": "handle",
            "location": 23,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "send": [
                    "str",
                    "bool",
                    "IO",
                    "Sequence[str]"
                ],
                "msg": [
                    "str",
                    "IO",
                    "Callable[...,Awaitable]"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/hooks/caps.py": {
        "handle": {
            "name": "handle",
            "location": 27,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "_": [
                    "str",
                    "bytes",
                    "Dict",
                    "Optional[str]",
                    "None"
                ],
                "msg": [
                    "list",
                    "str",
                    "Optional[Union[str, Any, Any, Any]]",
                    "List[int]",
                    "List[float]",
                    "int"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/hooks/ctf.py": {
        "handle": {
            "name": "handle",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "int",
                    "str",
                    "Callable",
                    "Tuple",
                    "List[str]",
                    "Sequence[str]"
                ],
                "msg": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/hooks/make.py": {
        "handle": {
            "name": "handle",
            "location": 23,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "str"
                ],
                "msg": [
                    "str",
                    "bytes",
                    "List[int]",
                    "List[Dict[str,Any]]",
                    "List",
                    "int"
                ],
                "_": [
                    "str"
                ]
            }
        }
    },
    "cslbot-master/cslbot/hooks/note.py": {
        "handle": {
            "name": "handle",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "int",
                    "float",
                    "Optional[int]",
                    "None"
                ],
                "_": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/hooks/reddit.py": {
        "handle": {
            "name": "handle",
            "location": 28,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "str"
                ],
                "msg": [
                    "bytes",
                    "Dict",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/hooks/scores.py": {
        "handle": {
            "name": "handle",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "int",
                    "str",
                    "Callable",
                    "Tuple",
                    "List[str]",
                    "Sequence[str]"
                ],
                "msg": [
                    "bool",
                    "Tuple",
                    "List[str]",
                    "Callable"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/hooks/shrek.py": {
        "get_list": {
            "name": "get_list",
            "location": 23,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "handle": {
            "name": "handle",
            "location": 28,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "List[Dict[str,str]]",
                    "List[str]",
                    "List[dict[str,str]]",
                    "List",
                    "str",
                    "Callable"
                ],
                "msg": [
                    "str"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/hooks/stallman.py": {
        "handle": {
            "name": "handle",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "int",
                    "str",
                    "Callable",
                    "Tuple",
                    "List[str]",
                    "Sequence[str]"
                ],
                "msg": [
                    "dict",
                    "BaseException"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/hooks/understanding.py": {
        "handle": {
            "name": "handle",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "str"
                ],
                "msg": [
                    "str",
                    "int",
                    "None",
                    "Optional[int]",
                    "bool",
                    "Optional[str]"
                ],
                "_": [
                    "str"
                ]
            }
        }
    },
    "cslbot-master/cslbot/hooks/url.py": {
        "get_urls": {
            "name": "get_urls",
            "location": 28,
            "return": [
                "list"
            ],
            "arguments": {
                "msg": [
                    "float",
                    "int",
                    "Iterable[int]",
                    "str"
                ]
            }
        },
        "handle": {
            "name": "handle",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [
                    "str",
                    "int",
                    "datetime.datetime"
                ],
                "msg": [
                    "str",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]",
                    "Union[int,slice]",
                    "int"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/hooks/voice.py": {
        "handle": {
            "name": "handle",
            "location": 21,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "_": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/hooks/xkcd.py": {
        "handle": {
            "name": "handle",
            "location": 22,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "send": [
                    "str",
                    "Sequence[str]",
                    "IO",
                    "int",
                    "Tuple",
                    "List[str]"
                ],
                "msg": [
                    "Optional[int]",
                    "int",
                    "Callable",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "args": []
            }
        }
    },
    "cslbot-master/cslbot/hooks/__init__.py": {},
    "cslbot-master/cslbot/static/__init__.py": {},
    "cslbot-master/doc/conf.py": {},
    "cslbot-master/scripts/client.py": {
        "main": {
            "name": "main",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "IrcClient.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nick": [
                    "Dict",
                    "str",
                    "List"
                ],
                "config": [
                    "Dict"
                ]
            }
        },
        "IrcClient.on_welcome": {
            "name": "on_welcome",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "str",
                    "List[str]",
                    "int",
                    "Set[str]"
                ],
                "_": [
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "IrcClient.on_mode": {
            "name": "on_mode",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "Dict",
                    "bool",
                    "Optional[str]",
                    "str",
                    "Type[Model]",
                    "None",
                    "Type"
                ],
                "e": [
                    "Callable[...,str]",
                    "str",
                    "irc.clienEvent",
                    "irc.clienServerConnection",
                    "Callable"
                ]
            }
        },
        "IrcClient.on_join": {
            "name": "on_join",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "int",
                    "str",
                    "Counter",
                    "Iterable[Tuple[int,int]]",
                    "Iterable[tuple[Union[int,int]]]"
                ],
                "_": [
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "IrcClient.on_channelmodeis": {
            "name": "on_channelmodeis",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "str",
                    "Dict",
                    "Exception",
                    "bool",
                    "Type"
                ],
                "e": [
                    "str",
                    "T",
                    "Dict[str,Any]",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "IrcClient.on_pubmsg": {
            "name": "on_pubmsg",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "int",
                    "Mapping[str, Any]",
                    "dict",
                    "Callable"
                ],
                "e": [
                    "Dict",
                    "bool",
                    "Exception",
                    "dbcontracts.connection.Connection",
                    "str",
                    "Type",
                    "Type[Any]"
                ]
            }
        }
    },
    "cslbot-master/scripts/entropy.py": {
        "main": {
            "name": "main",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "confdir": [
                    "str",
                    "Text"
                ]
            }
        }
    },
    "cslbot-master/scripts/gen_babble.py": {
        "real_main": {
            "name": "real_main",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": [
                    "str",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cslbot-master/scripts/migrate.py": {
        "main": {
            "name": "main",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "confdir": [
                    "Text",
                    "int",
                    "config.Config",
                    "List[str]"
                ]
            }
        }
    },
    "cslbot-master/scripts/parsedata.py": {
        "get_quotes": {
            "name": "get_quotes",
            "location": 42,
            "return": [
                "int",
                "Callable"
            ],
            "arguments": {
                "session": [
                    "str",
                    "Dict[str,Any]",
                    "sqlalchemy.orm.Session",
                    "None",
                    "sqlalchemy.orm.session.Session",
                    "Optional[str]"
                ]
            }
        },
        "get_scores": {
            "name": "get_scores",
            "location": 46,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session",
                    "fal.orm.Anime",
                    "fal.orm.Team"
                ]
            }
        },
        "get_urls": {
            "name": "get_urls",
            "location": 50,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "session": [
                    "str",
                    "Dict",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "get_polls": {
            "name": "get_polls",
            "location": 60,
            "return": [
                "collections.OrderedDict"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.scoping.scoped_session",
                    "grouper.models.base.session.Session"
                ]
            }
        },
        "get_responses": {
            "name": "get_responses",
            "location": 68,
            "return": [
                "Dict[(Any, collections.OrderedDict[(Any, list)])]"
            ],
            "arguments": {
                "session": [
                    "str",
                    "int",
                    "sqlalchemy.orm.Session",
                    "grouper.models.base.session.Session",
                    "labm8.py.sqlutil.Session",
                    "sqlalchemy.orm.scoping.scoped_session"
                ],
                "polls": [
                    "Dict[int,str]",
                    "Dict",
                    "Dict[str,Any]",
                    "Mapping[int,str]",
                    "List"
                ]
            }
        },
        "get_winners": {
            "name": "get_winners",
            "location": 78,
            "return": [
                "Dict[(Any, str)]"
            ],
            "arguments": {
                "polls": [
                    "Dict[int,str]",
                    "Dict[str,Any]",
                    "Dict",
                    "Mapping[int,str]",
                    "bool",
                    "T",
                    "str"
                ],
                "responses": [
                    "Dict[int, Dict[str, Any]]",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "output_quotes": {
            "name": "output_quotes",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "env": [
                    "str",
                    "bytes",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "session": [
                    "bool",
                    "Dict[str,Any]",
                    "List[dict]",
                    "List[Dict]",
                    "enums.Environment"
                ],
                "outdir": [
                    "str"
                ],
                "time": [
                    "bool",
                    "Dict[str,Any]",
                    "List[dict]",
                    "List[Dict]",
                    "enums.Environment"
                ]
            }
        },
        "output_scores": {
            "name": "output_scores",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "env": [
                    "str",
                    "bytes",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "session": [
                    "bool",
                    "Dict[str,Any]",
                    "List[dict]",
                    "List[Dict]",
                    "enums.Environment"
                ],
                "outdir": [
                    "str"
                ],
                "time": [
                    "bool",
                    "Dict[str,Any]",
                    "List[dict]",
                    "List[Dict]",
                    "enums.Environment"
                ]
            }
        },
        "output_polls": {
            "name": "output_polls",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "env": [
                    "str",
                    "bytes",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "session": [
                    "Dict",
                    "Dict[str,int]",
                    "Dict[str,str]",
                    "labm8.py.sqlutil.Session",
                    "Dict[str,Any]"
                ],
                "outdir": [
                    "str"
                ],
                "time": [
                    "str",
                    "Optional[Any]",
                    "Any",
                    "None"
                ]
            }
        },
        "output_urls": {
            "name": "output_urls",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "env": [
                    "str",
                    "Optional[Frame]",
                    "None"
                ],
                "session": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "None",
                    "int"
                ],
                "outdir": [
                    "str"
                ],
                "time": [
                    "Dict[str,Any]",
                    "Dict",
                    "bool",
                    "Set[str]",
                    "argparse.Namespace"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "confdir": [
                    "str",
                    "Text"
                ]
            }
        }
    },
    "cslbot-master/scripts/parselogs.py": {
        "get_id": {
            "name": "get_id",
            "location": 73,
            "return": [
                "int"
            ],
            "arguments": {
                "outdir": [
                    "str",
                    "Dict[str,str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "save_id": {
            "name": "save_id",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "outdir": [
                    "str",
                    "bool",
                    "List[int]"
                ],
                "new_id": [
                    "str",
                    "int"
                ]
            }
        },
        "gen_log": {
            "name": "gen_log",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "row": [
                    "Coroutine",
                    "int",
                    "collections.abc.Coroutine",
                    "Dict",
                    "List",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "confdir": [
                    "str",
                    "Text"
                ]
            }
        },
        "LogProcesser.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "outdir": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "LogProcesser.__del__": {
            "name": "__del__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogProcesser.get_path": {
            "name": "get_path",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "str",
                    "Mapping[str,str]",
                    "Mapping",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "LogProcesser.check_day": {
            "name": "check_day",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "bool",
                    "float",
                    "List[str]",
                    "slice"
                ]
            }
        },
        "LogProcesser.write_log": {
            "name": "write_log",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "List[Dict[str,float]]",
                    "List[dict[str,float]]"
                ],
                "msg": [
                    "str",
                    "List[Any]",
                    "bool",
                    "Optional[List[Any]]"
                ]
            }
        },
        "LogProcesser.process_line": {
            "name": "process_line",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "Callable[[T],List[T]]",
                    "str",
                    "Callable[T,list[T]]",
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "cslbot-master/scripts/reload.py": {
        "reload_server": {
            "name": "reload_server",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "port": [
                    "str",
                    "Iterable[int]",
                    "Optional[Union[float,str]]",
                    "int",
                    "float",
                    "None"
                ],
                "msg": [
                    "str",
                    "Dict[str,str]",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "confdir": [
                    "Text",
                    "str",
                    "bool",
                    "List[str]",
                    "Tuple[str]"
                ]
            }
        }
    },
    "cslbot-master/scripts/__init__.py": {},
    "cslbot-master/test/bot_test.py": {
        "start_thread": {
            "name": "start_thread",
            "location": 32,
            "return": [
                "Optional[concurrent.futures._base.Future[nothing]]"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Dict[str, Any]",
                    "list",
                    "Callable[..., None]",
                    "float"
                ]
            }
        },
        "rate_limited_send": {
            "name": "rate_limited_send",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mtype": [
                    "int",
                    "str"
                ],
                "target": [
                    "int",
                    "str"
                ],
                "msg": [
                    "int",
                    "str"
                ]
            }
        },
        "BotTest.setUpClass": {
            "name": "setUpClass",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "\"path\"",
                    "int"
                ]
            }
        },
        "BotTest.tearDownClass": {
            "name": "tearDownClass",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Set[str]",
                    "IO[bytes]",
                    "List[str]",
                    "Tuple[int, int]"
                ]
            }
        },
        "BotTest.join_mock": {
            "name": "join_mock",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "List[Tuple[int, int]]",
                    "int",
                    "bool",
                    "bytes",
                    "Iterable[Iterable[T]]"
                ],
                "key": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "BotTest.who_mock": {
            "name": "who_mock",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "int",
                    "Set[str]"
                ],
                "op": [
                    "str"
                ]
            }
        },
        "BotTest.cap_mock": {
            "name": "cap_mock",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "List[Callable]",
                    "tartare.core.models.DataSource",
                    "TextIO",
                    "dict",
                    "int"
                ],
                "arg": [
                    "List[Dict[str, str]]",
                    "list",
                    "bytes",
                    "Callable",
                    "str"
                ]
            }
        },
        "BotTest.user_mock": {
            "name": "user_mock",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "tests.basilisp.helpers.CompileFn",
                    "Dict[str, Any]"
                ],
                "realname": [
                    "tests.basilisp.helpers.CompileFn",
                    "Dict[str, Any]"
                ]
            }
        },
        "BotTest.raw_handler": {
            "name": "raw_handler",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "int",
                    "Tuple[str]"
                ]
            }
        },
        "BotTest.setUp": {
            "name": "setUp",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotTest.tearDown": {
            "name": "tearDown",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotTest.setup_handler": {
            "name": "setup_handler",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotTest.join_channel": {
            "name": "join_channel",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nick": [
                    "int",
                    "List[str]"
                ],
                "channel": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "BotTest.nick": {
            "name": "nick",
            "location": 148,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotTest.channel": {
            "name": "channel",
            "location": 152,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotTest.ctrlchan": {
            "name": "ctrlchan",
            "location": 156,
            "return": [
                "bool",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotTest.server": {
            "name": "server",
            "location": 160,
            "return": [
                "bool",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotTest.do_welcome": {
            "name": "do_welcome",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotTest.send_msg": {
            "name": "send_msg",
            "location": 188,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "mtype": [
                    "Optional[str]",
                    "path.Path",
                    "tensorhive.core.ssh.Hostname",
                    "str",
                    "lightbus.path.BusPath"
                ],
                "source": [
                    "str",
                    "bool",
                    "path.Path"
                ],
                "target": [
                    "str",
                    "bool",
                    "path.Path"
                ],
                "arguments": [
                    "str",
                    "bool",
                    "path.Path"
                ]
            }
        }
    },
    "cslbot-master/test/cslbot_test.py": {
        "CoreTest.test_handle_nick": {
            "name": "test_handle_nick",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTest.test_handle_mode_tracking": {
            "name": "test_handle_mode_tracking",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreTest.test_bot_reload": {
            "name": "test_bot_reload",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MorseTest.test_morse_encode": {
            "name": "test_morse_encode",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MorseTest.test_morse_noarg": {
            "name": "test_morse_noarg",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_gen_word": []
            }
        },
        "MorseTest.test_morse_too_long": {
            "name": "test_morse_too_long",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZipcodeTest.test_zipcode_valid": {
            "name": "test_zipcode_valid",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get": []
            }
        },
        "ZipcodeTest.test_zipcode_blank": {
            "name": "test_zipcode_blank",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZipcodeTest.test_zipcode_invalid": {
            "name": "test_zipcode_invalid",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WisdomTest.test_wisdom_valid": {
            "name": "test_wisdom_valid",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get": []
            }
        },
        "WisdomTest.test_wisdom_invalid": {
            "name": "test_wisdom_invalid",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get": []
            }
        },
        "WisdomTest.test_wisdom_author_nosearch": {
            "name": "test_wisdom_author_nosearch",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WisdomTest.test_wisdom_search_nosearch": {
            "name": "test_wisdom_search_nosearch",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WisdomTest.test_wisdom_search_author_invalid": {
            "name": "test_wisdom_search_author_invalid",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefinitionTest.test_definition_valid": {
            "name": "test_definition_valid",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get": []
            }
        },
        "DefinitionTest.test_definition_invalid": {
            "name": "test_definition_invalid",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get": []
            }
        },
        "DefinitionTest.test_definition_empty": {
            "name": "test_definition_empty",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get": []
            }
        },
        "DefinitionTest.test_definition_invalid_index": {
            "name": "test_definition_invalid_index",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get": []
            }
        },
        "ErrnoTest.test_errno_valid_no_input": {
            "name": "test_errno_valid_no_input",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_choice": []
            }
        },
        "ErrnoTest.test_errno_valid_number": {
            "name": "test_errno_valid_number",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ErrnoTest.test_errno_invalid_name": {
            "name": "test_errno_invalid_name",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ErrnoTest.test_errno_list": {
            "name": "test_errno_list",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignalTest.test_signal_valid": {
            "name": "test_signal_valid",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoinTest.test_coin_valid": {
            "name": "test_coin_valid",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_choice": []
            }
        },
        "CoinTest.test_coin_noninteger": {
            "name": "test_coin_noninteger",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoinTest.test_coin_negative": {
            "name": "test_coin_negative",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoinTest.test_coin_zero": {
            "name": "test_coin_zero",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotsnackTest.test_botsnack_valid_noargs": {
            "name": "test_botsnack_valid_noargs",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotsnackTest.test_botsnack_valid_args": {
            "name": "test_botsnack_valid_args",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotsnackTest.test_botsnack_invalid_cannibal": {
            "name": "test_botsnack_invalid_cannibal",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TranslateTest.test_translate_valid_args": {
            "name": "test_translate_valid_args",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TranslateTest.test_translate_valid_to_lang": {
            "name": "test_translate_valid_to_lang",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TranslateTest.test_translate_invalid_noargs": {
            "name": "test_translate_invalid_noargs",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_gen_translate": []
            }
        },
        "TranslateTest.test_translate_invalid_to_lang": {
            "name": "test_translate_invalid_to_lang",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FullwidthTest.test_fullwidth_ascii": {
            "name": "test_fullwidth_ascii",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FullwidthTest.test_fullwidth_nonascii": {
            "name": "test_fullwidth_nonascii",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FullwidthTest.test_fullwidth_noarg": {
            "name": "test_fullwidth_noarg",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_gen_word": []
            }
        },
        "GrepTest.test_grep_fwilson": {
            "name": "test_grep_fwilson",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cslbot-master/test/__init__.py": {}
}
{
    "cubers.io-main/app.py": {},
    "cubers.io-main/config.py": {},
    "cubers.io-main/queue_config.py": {},
    "cubers.io-main/cubersio/commands.py": {
        "set_all_events_flags": {
            "name": "set_all_events_flags",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "all_events": [
                    "Dict",
                    "Tuple",
                    "Dict[str,Any]",
                    "Set",
                    "models.GithubWebhookEvent",
                    "asgard.models.user.User"
                ]
            }
        },
        "set_title_override": {
            "name": "set_title_override",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "title": [
                    "Optional[float]",
                    "float",
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "str",
                    "faustypes.app.TaskArg",
                    "int"
                ]
            }
        },
        "score_and_generate_new_comp": {
            "name": "score_and_generate_new_comp",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "all_events": [
                    "Dict",
                    "Dict[str,Any]",
                    "aw_core.models.Event",
                    "models.GithubWebhookEvent",
                    "viewer.models.Archive"
                ],
                "title": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Optional[int]",
                    "List[dict]",
                    "bool",
                    "List[Dict]"
                ]
            }
        },
        "score_comp_only": {
            "name": "score_comp_only",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "comp_id": [
                    "str",
                    "transfer.models.TopicID",
                    "transfer.models.MatchCommentID"
                ],
                "rerun": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "generate_new_comp_only": {
            "name": "generate_new_comp_only",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "all_events": [
                    "Dict",
                    "aw_core.models.Event",
                    "Dict[str,list[Callable]]",
                    "Dict[str,list[dict]]",
                    "Dict[str,List[Callable]]",
                    "Dict[str,List[dict]]"
                ],
                "title": [
                    "int",
                    "Optional[int]",
                    "Optional[Dict[str,Any]]",
                    "None",
                    "List[Dict]",
                    "Dict[str,Any]",
                    "Type[SerializationDialect]",
                    "List[dict]",
                    "Type"
                ]
            }
        },
        "calculate_all_user_site_rankings": {
            "name": "calculate_all_user_site_rankings",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "top_off_scrambles": {
            "name": "top_off_scrambles",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "add_gift_codes": {
            "name": "add_gift_codes",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "codes": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "set_admin": {
            "name": "set_admin",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "username": [
                    "str",
                    "bool"
                ]
            }
        },
        "remove_admin": {
            "name": "remove_admin",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "username": [
                    "int",
                    "str"
                ]
            }
        },
        "list_admins": {
            "name": "list_admins",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "recalculate_pbs": {
            "name": "recalculate_pbs",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "calculate_latest_pbs": {
            "name": "calculate_latest_pbs",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "rerun_podiums_for_comp": {
            "name": "rerun_podiums_for_comp",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "comp_id": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "None",
                    "Optional[int]",
                    "Dict[int,dict[str,float]]",
                    "int",
                    "Dict[int,Dict[str,float]]"
                ]
            }
        },
        "backfill_results_medals": {
            "name": "backfill_results_medals",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "__build_solve": {
            "name": "__build_solve",
            "location": 216,
            "return": [
                "cubersio.persistence.models.UserSolve"
            ],
            "arguments": {
                "user_num": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "wr_average": [
                    "int",
                    "str",
                    "Set[int]"
                ],
                "event_name": [
                    "str",
                    "Optional[Union[int,Any]]"
                ],
                "scramble_id": [
                    "int",
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "generate_fake_comp_results": {
            "name": "generate_fake_comp_results",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/cubersio/__init__.py": {
        "static_from_root": {
            "name": "static_from_root",
            "location": 178,
            "return": [
                "Tuple[int, str]",
                "Dict[str, Any]",
                "Iterable[bytes]",
                "tuple"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/cubersio/business/rankings.py": {
        "calculate_user_site_rankings": {
            "name": "calculate_user_site_rankings",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_calculate_site_rankings_for_user": {
            "name": "_calculate_site_rankings_for_user",
            "location": 108,
            "return": [
                "cubersio.persistence.models.UserSiteRankings"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "datetime.datetime",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "event_singles_map": [
                    "str",
                    "Optional[Dict[str,str]]",
                    "List[str]",
                    "Dict[str,str]",
                    "Optional[str]",
                    "None"
                ],
                "event_singles_ix_map": [
                    "str",
                    "Optional[bool]",
                    "Dict",
                    "bool",
                    "int",
                    "None"
                ],
                "events_singles_len": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Optional[float]",
                    "float"
                ],
                "event_averages_map": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Optional[float]",
                    "float"
                ],
                "event_averages_ix_map": [
                    "str",
                    "Optional[bool]",
                    "Dict",
                    "bool",
                    "int",
                    "None"
                ],
                "events_averages_len": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Optional[float]",
                    "float"
                ],
                "wca_event_ids": [
                    "bool",
                    "str",
                    "Dict",
                    "Optional[Mapping[str,Any]]",
                    "Mapping",
                    "None"
                ],
                "all_events": [
                    "bool"
                ]
            }
        },
        "_build_personal_best_record": {
            "name": "_build_personal_best_record",
            "location": 264,
            "return": [
                "cubersio.persistence.models.PersonalBestRecord"
            ],
            "arguments": {
                "query_tuple": [
                    "Callable",
                    "str",
                    "Dict[str,List[str]]",
                    "Dict[str,list[str]]"
                ]
            }
        },
        "_determine_ranks": {
            "name": "_determine_ranks",
            "location": 273,
            "return": [
                "str",
                "int",
                "Callable",
                "models.Question"
            ],
            "arguments": {
                "personal_bests": [
                    "str",
                    "int",
                    "Callable",
                    "models.Question"
                ]
            }
        },
        "get_ordered_pb_singles_for_event": {
            "name": "get_ordered_pb_singles_for_event",
            "location": 312,
            "return": [
                "list"
            ],
            "arguments": {
                "event_id": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "get_ordered_pb_averages_for_event": {
            "name": "get_ordered_pb_averages_for_event",
            "location": 342,
            "return": [
                "list"
            ],
            "arguments": {
                "event_id": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        }
    },
    "cubers.io-main/cubersio/business/user_history.py": {
        "get_user_competition_history": {
            "name": "get_user_competition_history",
            "location": 12,
            "return": [
                "collections.OrderedDict[(Any, collections.OrderedDict)]"
            ],
            "arguments": {
                "user": [],
                "include_blacklisted": [
                    "bool",
                    "str",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
                ]
            }
        }
    },
    "cubers.io-main/cubersio/business/__init__.py": {},
    "cubers.io-main/cubersio/business/competition/generation.py": {
        "generate_new_competition": {
            "name": "generate_new_competition",
            "location": 31,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {}
        },
        "week_of_month": {
            "name": "week_of_month",
            "location": 69,
            "return": [
                "int"
            ],
            "arguments": {
                "datetime_timestamp": [
                    "str",
                    "Dict[str,T]",
                    "List[str]",
                    "Optional[List[str]]",
                    "int",
                    "None",
                    "Union[str,int]",
                    "bool"
                ]
            }
        },
        "get_comp_name_from_date": {
            "name": "get_comp_name_from_date",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_bonus_events": {
            "name": "get_bonus_events",
            "location": 86,
            "return": [
                "List[Union[(cubersio.util.events.resources.BonusEventDefinition, cubersio.util.events.resources.WCAEventDefinition, cubersio.util.events.resources.WeeklyEventDefinition)]]"
            ],
            "arguments": {
                "comp_gen_data": [
                    "Optional[Dict]",
                    "Dict",
                    "Dict[str,Any]",
                    "str",
                    "None",
                    "jumeaux.models.Reqs2ReqsAddOnPayload"
                ]
            }
        },
        "update_coll_info": {
            "name": "update_coll_info",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "comp_gen_data": [
                    "Dict",
                    "str",
                    "bytes"
                ]
            }
        },
        "get_events_data": {
            "name": "get_events_data",
            "location": 116,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "weekly_events": [
                    "str",
                    "bool",
                    "Dict"
                ],
                "bonus_events": [
                    "str",
                    "bool",
                    "Dict"
                ],
                "comp_gen_data": [
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]",
                    "int",
                    "List[List[int]]",
                    "List[list[int]]"
                ]
            }
        },
        "get_scrambles_for_event": {
            "name": "get_scrambles_for_event",
            "location": 145,
            "return": [
                "list"
            ],
            "arguments": {
                "event_id": [
                    "int",
                    "str",
                    "ajapaik.ajapaik_object_recognition.models.ObjectDetectionAnnotation",
                    "excars.models.locations.Location"
                ],
                "num_scrambles": [
                    "int",
                    "str",
                    "ajapaik.ajapaik_object_recognition.models.ObjectDetectionAnnotation",
                    "excars.models.locations.Location"
                ]
            }
        }
    },
    "cubers.io-main/cubersio/business/competition/scoring.py": {
        "post_results_thread": {
            "name": "post_results_thread",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "competition_id": [
                    "int",
                    "str"
                ],
                "is_rerun": [
                    "bool",
                    "Dict",
                    "int",
                    "Exception",
                    "str",
                    "List[int]"
                ]
            }
        },
        "__escape_username": {
            "name": "__escape_username",
            "location": 101,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "username": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "__profile_for": {
            "name": "__profile_for",
            "location": 109,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "username": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        }
    },
    "cubers.io-main/cubersio/business/competition/__init__.py": {},
    "cubers.io-main/cubersio/business/user_results/blacklisting.py": {
        "take_blacklist_action_if_necessary": {
            "name": "take_blacklist_action_if_necessary",
            "location": 87,
            "return": [
                "Tuple[(Any, bool)]"
            ],
            "arguments": {
                "results": [
                    "str",
                    "Dict[str,Any]",
                    "Callable",
                    "Optional[str]",
                    "None"
                ],
                "user": [
                    "Dict",
                    "List[str]",
                    "List[Dict]",
                    "bool",
                    "List[dict]",
                    "str"
                ]
            }
        },
        "__ensure_clean_unblacklisted": {
            "name": "__ensure_clean_unblacklisted",
            "location": 143,
            "return": [
                "deoplete.util.UserContext",
                "str",
                "bool",
                "int",
                "Optional[Union[str,Any]]",
                "None"
            ],
            "arguments": {
                "results": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "__perform_perma_blacklist_action": {
            "name": "__perform_perma_blacklist_action",
            "location": 151,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "results": [
                    "Dict[str,Any]",
                    "Type"
                ],
                "user": [
                    "str",
                    "Dict",
                    "bool"
                ]
            }
        },
        "__perform_single_results_blacklist_action": {
            "name": "__perform_single_results_blacklist_action",
            "location": 158,
            "return": [
                "bool"
            ],
            "arguments": {
                "results": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None",
                    "recidiviz.persistence.database.session.Session"
                ],
                "user": [
                    "str",
                    "Dict",
                    "List[dict]",
                    "bool",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]",
                    "Optional[bool]",
                    "None"
                ]
            }
        },
        "__perform_average_results_blacklist_action": {
            "name": "__perform_average_results_blacklist_action",
            "location": 165,
            "return": [
                "bool"
            ],
            "arguments": {
                "results": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None",
                    "recidiviz.persistence.database.session.Session"
                ],
                "user": [
                    "str",
                    "Dict",
                    "List[dict]",
                    "bool",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]",
                    "Optional[bool]",
                    "None"
                ]
            }
        },
        "__blacklist_results_with_note": {
            "name": "__blacklist_results_with_note",
            "location": 173,
            "return": [
                "str",
                "Tuple[int,Dict[str,Any]]",
                "bool"
            ],
            "arguments": {
                "results": [
                    "str"
                ],
                "note_template": [
                    "str",
                    "Type"
                ]
            }
        },
        "__get_event_thresholds": {
            "name": "__get_event_thresholds",
            "location": 184,
            "return": [
                "Optional[Union[(int, Generator[(Any, Any, None)], Tuple[(int, int)])]]"
            ],
            "arguments": {
                "comp_event_name": [
                    "str",
                    "Dict[str,Any]",
                    "Dict",
                    "Dict[str,str]"
                ]
            }
        },
        "__check_event_single_threshold_breached": {
            "name": "__check_event_single_threshold_breached",
            "location": 206,
            "return": [
                "bool"
            ],
            "arguments": {
                "results": [
                    "Dict",
                    "str",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,dict[str,Any]]"
                ],
                "single_threshold": [
                    "Dict",
                    "str",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,dict[str,Any]]"
                ]
            }
        },
        "__check_event_average_threshold_breached": {
            "name": "__check_event_average_threshold_breached",
            "location": 212,
            "return": [
                "bool"
            ],
            "arguments": {
                "results": [
                    "Dict",
                    "str",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,dict[str,Any]]"
                ],
                "average_threshold": [
                    "Dict",
                    "str",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,dict[str,Any]]"
                ]
            }
        },
        "__check_if_threshold_breached": {
            "name": "__check_if_threshold_breached",
            "location": 218,
            "return": [
                "bool"
            ],
            "arguments": {
                "results_value": [
                    "str",
                    "recidiviz.persistence.entity.state.entities.StatePerson",
                    "Tuple[int, int, int]",
                    "int"
                ],
                "threshold_value": [
                    "int",
                    "str",
                    "recidiviz.persistence.entity.state.entities.StatePerson",
                    "Tuple[int,int,int]"
                ]
            }
        }
    },
    "cubers.io-main/cubersio/business/user_results/creation.py": {
        "process_event_results": {
            "name": "process_event_results",
            "location": 26,
            "return": [
                "amundsen_application.models.user.User",
                "denite.util.UserContext",
                "str",
                "int",
                "Dict[str,Any]",
                "List[str]",
                "None",
                "List[dict[str,str]]",
                "Dict"
            ],
            "arguments": {
                "results": [
                    "str",
                    "int",
                    "Dict[str,Any]",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "comp_event": [
                    "Dict[str,Any]",
                    "str",
                    "None",
                    "asgard.models.accounAccount",
                    "asgard.models.user.User",
                    "tildes.models.user.User",
                    "Optional[str]"
                ],
                "user": [
                    "Dict[str,Any]",
                    "str",
                    "Dict",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "__set_is_complete": {
            "name": "__set_is_complete",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "user_event_results": [
                    "Dict[str,Any]",
                    "str",
                    "List",
                    "Dict",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "event_format": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "expected_num_solves": [
                    "int",
                    "List[str]",
                    "float",
                    "List[list[fonduer.candidates.models.Candidate]]",
                    "Iterable[Callable]",
                    "List[List[fonduer.candidates.models.Candidate]]"
                ]
            }
        },
        "__set_single_and_average": {
            "name": "__set_single_and_average",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "user_event_results": [
                    "str",
                    "bool",
                    "Dict"
                ],
                "expected_num_solves": [
                    "bool",
                    "str"
                ],
                "event_format": [
                    "bool",
                    "str",
                    "List",
                    "zerver.models.Client"
                ]
            }
        },
        "__build_times_string": {
            "name": "__build_times_string",
            "location": 105,
            "return": [
                "str",
                "bool",
                "Iterable[Iterable[str]]",
                "int"
            ],
            "arguments": {
                "results": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "List[cirq.Circuit]",
                    "None",
                    "int"
                ],
                "event_format": [
                    "str"
                ],
                "is_fmc": [
                    "bool",
                    "str",
                    "Callable[,None]",
                    "int"
                ],
                "is_blind": [
                    "bool",
                    "str",
                    "Callable[,None]",
                    "int"
                ],
                "is_mbld": [
                    "bool",
                    "str",
                    "Callable[,None]",
                    "int"
                ]
            }
        },
        "__determine_best_single": {
            "name": "__determine_best_single",
            "location": 199,
            "return": [
                "Optional[bytes]",
                "recidiviz.persistence.database.database_entity.DatabaseEntity",
                "Optional[Any]"
            ],
            "arguments": {
                "solves": [
                    "Dict",
                    "str",
                    "Optional[bool]",
                    "int"
                ]
            }
        },
        "__determine_event_result": {
            "name": "__determine_event_result",
            "location": 211,
            "return": [
                "Union[(_T0, _T1)]"
            ],
            "arguments": {
                "single": [
                    "str",
                    "zerver.models.Realm"
                ],
                "average": [
                    "str",
                    "zerver.models.Realm"
                ],
                "event_format": [
                    "int",
                    "str",
                    "bytes",
                    "models.Taxonomy.Id",
                    "Dict[str,Any]"
                ]
            }
        },
        "__determine_bests": {
            "name": "__determine_bests",
            "location": 227,
            "return": [
                "str"
            ],
            "arguments": {
                "solves": [
                    "int",
                    "str",
                    "Mapping[str,Any]",
                    "Mapping",
                    "Optional[str]",
                    "None"
                ],
                "event_format": [
                    "str",
                    "Dict[str,str]",
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "__determine_bests_bo1": {
            "name": "__determine_bests_bo1",
            "location": 244,
            "return": [
                "Tuple[(Any, str)]"
            ],
            "arguments": {
                "solves": [
                    "str",
                    "int",
                    "Callable",
                    "models.Question"
                ]
            }
        },
        "__determine_bests_bo3": {
            "name": "__determine_bests_bo3",
            "location": 255,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "solves": [
                    "int",
                    "Callable",
                    "str",
                    "models.Question"
                ]
            }
        },
        "__determine_bests_mo3": {
            "name": "__determine_bests_mo3",
            "location": 261,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "solves": [
                    "str"
                ]
            }
        },
        "__determine_bests_ao5": {
            "name": "__determine_bests_ao5",
            "location": 284,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "solves": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "cubers.io-main/cubersio/business/user_results/personal_bests.py": {
        "set_pb_flags": {
            "name": "set_pb_flags",
            "location": 20,
            "return": [
                "str",
                "int",
                "Callable",
                "Dict"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "event_result": [
                    "int",
                    "str",
                    "Dict"
                ],
                "event_id": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "event_format": [
                    "str",
                    "None",
                    "Optional[str]",
                    "transfer.models.SiteID"
                ]
            }
        },
        "recalculate_user_pbs_for_event": {
            "name": "recalculate_user_pbs_for_event",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int"
                ],
                "event_id": [
                    "str",
                    "int"
                ]
            }
        },
        "__pb_representation": {
            "name": "__pb_representation",
            "location": 132,
            "return": [
                "int"
            ],
            "arguments": {
                "time": [
                    "int",
                    "float"
                ]
            }
        },
        "__get_pbs_for_user_and_event_excluding_latest": {
            "name": "__get_pbs_for_user_and_event_excluding_latest",
            "location": 147,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int"
                ],
                "event_id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "cubers.io-main/cubersio/business/user_results/__init__.py": {
        "set_medals_on_best_event_results": {
            "name": "set_medals_on_best_event_results",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "comp_events": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "cubers.io-main/cubersio/integrations/reddit.py": {
        "__get_praw_instance": {
            "name": "__get_praw_instance",
            "location": 27,
            "return": [
                "Reddit",
                "str",
                "Dict"
            ],
            "arguments": {}
        },
        "__get_admin_praw_instance": {
            "name": "__get_admin_praw_instance",
            "location": 36,
            "return": [
                "Reddit",
                "str",
                "Dict"
            ],
            "arguments": {}
        },
        "send_pm_to_user": {
            "name": "send_pm_to_user",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "username": [
                    "str",
                    "int"
                ],
                "title": [
                    "str",
                    "int"
                ],
                "body": [
                    "str",
                    "int"
                ]
            }
        },
        "submit_post": {
            "name": "submit_post",
            "location": 52,
            "return": [
                "Mapping[str, Any]",
                "dict",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "title": [
                    "int",
                    "str"
                ],
                "post_body": [
                    "int",
                    "str"
                ]
            }
        },
        "update_post": {
            "name": "update_post",
            "location": 60,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "post_body": [
                    "Iterable",
                    "int",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "thread_id": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "get_username_and_refresh_token_from_code": {
            "name": "get_username_and_refresh_token_from_code",
            "location": 70,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "code": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "get_reddit_auth_url": {
            "name": "get_reddit_auth_url",
            "location": 80,
            "return": [
                "Dict[str, Any]",
                "Optional[int]",
                "str",
                "dict",
                "Optional[bool]",
                "Optional[str]"
            ],
            "arguments": {
                "state": [
                    "str",
                    "List[str]",
                    "Dict[str,str]",
                    "bytes"
                ]
            }
        },
        "get_app_account_auth_url": {
            "name": "get_app_account_auth_url",
            "location": 86,
            "return": [
                "str",
                "dict",
                "Dict[str, List[str]]",
                "int"
            ],
            "arguments": {
                "state": [
                    "Text",
                    "str",
                    "List[str]",
                    "Dict[str,Any]",
                    "bool",
                    "IO[bytes]"
                ]
            }
        }
    },
    "cubers.io-main/cubersio/integrations/wca.py": {
        "get_wca_auth_url": {
            "name": "get_wca_auth_url",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "state": [
                    "Text",
                    "Dict[str,Any]",
                    "bytes",
                    "Tuple",
                    "T",
                    "str"
                ]
            }
        },
        "get_wca_access_token_from_auth_code": {
            "name": "get_wca_access_token_from_auth_code",
            "location": 42,
            "return": [
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "auth_code": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "get_wca_id_from_access_token": {
            "name": "get_wca_id_from_access_token",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "access_token": [
                    "str"
                ]
            }
        }
    },
    "cubers.io-main/cubersio/integrations/__init__.py": {},
    "cubers.io-main/cubersio/persistence/comp_manager.py": {
        "get_competition": {
            "name": "get_competition",
            "location": 18,
            "return": [
                "str",
                "zerver.models.Realm",
                "Optional[str]",
                "Optional[int]",
                "bytes"
            ],
            "arguments": {
                "competition_id": [
                    "str",
                    "int",
                    "transfer.models.TopicID",
                    "transfer.models.OrderID",
                    "transfer.models.Order.ID",
                    "transfer.models.TicketID",
                    "transfer.models.SnippetID",
                    "transfer.models.MatchCommentID"
                ]
            }
        },
        "get_competition_by_reddit_id": {
            "name": "get_competition_by_reddit_id",
            "location": 25,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Exception",
                "tartare.core.models.Job",
                "int",
                "str"
            ],
            "arguments": {
                "reddit_id": [
                    "int",
                    "transfer.models.Catalog.ID"
                ]
            }
        },
        "get_active_competition": {
            "name": "get_active_competition",
            "location": 33,
            "return": [
                "Dict[str, bool]",
                "dict",
                "djmoney.contrib.exchange.models.Rate",
                "zerver.models.Realm",
                "int"
            ],
            "arguments": {}
        },
        "get_previous_competition": {
            "name": "get_previous_competition",
            "location": 41,
            "return": [
                "int",
                "bool",
                "recidiviz.persistence.entity.state.entities.StatePerson",
                "dict"
            ],
            "arguments": {}
        },
        "get_all_comp_events_for_comp": {
            "name": "get_all_comp_events_for_comp",
            "location": 50,
            "return": [
                "Callable[[Dict], None]",
                "Callable[[], str]",
                "str",
                "List[domain.models.User]"
            ],
            "arguments": {
                "comp_id": [
                    "int",
                    "None",
                    "str",
                    "transfer.models.Channel.ID",
                    "Optional[int]",
                    "transfer.models.BadgeID"
                ]
            }
        },
        "get_comp_event_name_by_id": {
            "name": "get_comp_event_name_by_id",
            "location": 62,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "comp_event_id": [
                    "int",
                    "str",
                    "shop.transfer.models.ShopID"
                ]
            }
        },
        "get_comp_event_by_id": {
            "name": "get_comp_event_by_id",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "comp_event_id": [
                    "int",
                    "str"
                ]
            }
        },
        "get_user_participated_competitions_count": {
            "name": "get_user_participated_competitions_count",
            "location": 80,
            "return": [
                "bool",
                "str",
                "Callable[[Dict], None]",
                "Callable[[], str]",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "get_participants_in_competition": {
            "name": "get_participants_in_competition",
            "location": 93,
            "return": [
                "list"
            ],
            "arguments": {
                "comp_id": [
                    "int",
                    "str",
                    "Dict",
                    "Generator[Any,None,None]",
                    "Generator[Union[Any,None,None]]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "get_reddit_participants_in_competition": {
            "name": "get_reddit_participants_in_competition",
            "location": 114,
            "return": [
                "list"
            ],
            "arguments": {
                "comp_id": [
                    "int",
                    "str",
                    "Dict",
                    "Generator[Any,None,None]",
                    "Generator[Union[Any,None,None]]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "get_random_reddit_participant_for_competition": {
            "name": "get_random_reddit_participant_for_competition",
            "location": 135,
            "return": [
                "str",
                "int",
                "Optional[Dict[str, Any]]",
                "Dict[str, Any]",
                "Optional[Any]",
                "Optional[str]",
                "Set[int]"
            ],
            "arguments": {
                "comp_id": [
                    "int"
                ]
            }
        },
        "get_complete_competitions": {
            "name": "get_complete_competitions",
            "location": 143,
            "return": [
                "Dict[str, bool]",
                "str",
                "djmoney.contrib.exchange.models.Rate",
                "zerver.models.Realm",
                "int",
                "dict"
            ],
            "arguments": {}
        },
        "get_all_competitions": {
            "name": "get_all_competitions",
            "location": 154,
            "return": [
                "bool",
                "str",
                "Callable[[Dict], None]",
                "Callable[[], str]",
                "zerver.models.UserProfile"
            ],
            "arguments": {}
        },
        "bulk_update_comps": {
            "name": "bulk_update_comps",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "comps": [
                    "Dict",
                    "List",
                    "float",
                    "Optional[datetime.datetime]",
                    "int",
                    "sqlalchemy.orm.Mapper",
                    "sqlalchemy.engine.base.Connection"
                ]
            }
        },
        "get_all_competitions_user_has_participated_in": {
            "name": "get_all_competitions_user_has_participated_in",
            "location": 172,
            "return": [
                "bool",
                "str",
                "Callable[[Dict], None]",
                "sqlalchemy.orm.session.Session",
                "Callable[[], str]",
                "zerver.models.UserProfile",
                "datetime.datetime"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int",
                    "None",
                    "Optional[datetime.datetime]",
                    "models.evenUserEventData",
                    "bool"
                ]
            }
        },
        "save_competition": {
            "name": "save_competition",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "competition": [
                    "str",
                    "app.models.Tweet",
                    "app.models.Position",
                    "sqlalchemy.orm.query.Query",
                    "app.models.Journey",
                    "app.models.Stage",
                    "app.models.GameMember",
                    "zerver.models.Recipient"
                ]
            }
        },
        "save_new_competition": {
            "name": "save_new_competition",
            "location": 194,
            "return": [
                "cubersio.persistence.models.Competition"
            ],
            "arguments": {
                "title": [
                    "int",
                    "Dict[str,Any]",
                    "Dict",
                    "Mapping"
                ],
                "event_data": [
                    "Dict",
                    "str",
                    "Dict[str,Any]",
                    "bool",
                    "Type[T]",
                    "Iterable",
                    "Optional[bool]",
                    "Optional[str]",
                    "Iterable[str]"
                ]
            }
        },
        "get_competition_gen_resources": {
            "name": "get_competition_gen_resources",
            "location": 228,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {}
        },
        "save_competition_gen_resources": {
            "name": "save_competition_gen_resources",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "comp_gen_resource": [
                    "str",
                    "app.models.Tweet",
                    "app.models.Position",
                    "sqlalchemy.orm.query.Query",
                    "app.models.Journey",
                    "app.models.Stage",
                    "app.models.GameMember",
                    "zerver.models.Recipient"
                ]
            }
        },
        "override_title_for_next_comp": {
            "name": "override_title_for_next_comp",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "title": [
                    "float",
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "set_all_events_flag_for_next_comp": {
            "name": "set_all_events_flag_for_next_comp",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "all_events": [
                    "Dict[str,Any]",
                    "Dict[str,List[Callable]]",
                    "Dict[str,list[Callable]]"
                ]
            }
        }
    },
    "cubers.io-main/cubersio/persistence/events_manager.py": {
        "get_event_by_name": {
            "name": "get_event_by_name",
            "location": 12,
            "return": [
                "str",
                "jumeaux.models.Reqs2ReqsAddOnPayload",
                "Dict[str, Any]",
                "events.board.BoardPostingCreated"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[Union[str,int]]",
                    "int",
                    "Optional[List[str]]",
                    "None",
                    "List[str]"
                ]
            }
        },
        "get_all_events": {
            "name": "get_all_events",
            "location": 20,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "get_event_format_for_event": {
            "name": "get_event_format_for_event",
            "location": 30,
            "return": [
                "core.models.User",
                "Dict[str, Any]",
                "tuple",
                "models.User",
                "django.contrib.auth.models.User",
                "dict"
            ],
            "arguments": {
                "event_id": [
                    "int",
                    "str",
                    "transfer.models.PostingID",
                    "transfer.models.MatchID"
                ]
            }
        },
        "get_all_WCA_events": {
            "name": "get_all_WCA_events",
            "location": 39,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "get_all_non_WCA_events": {
            "name": "get_all_non_WCA_events",
            "location": 46,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "get_all_bonus_events": {
            "name": "get_all_bonus_events",
            "location": 53,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "get_events_name_id_mapping": {
            "name": "get_events_name_id_mapping",
            "location": 60,
            "return": [
                "collections.OrderedDict"
            ],
            "arguments": {}
        },
        "get_all_events_user_has_participated_in": {
            "name": "get_all_events_user_has_participated_in",
            "location": 70,
            "return": [
                "List[domain.models.User]",
                "List[str]",
                "Callable[[Dict], None]"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "str",
                    "bytes",
                    "float",
                    "Optional[float]",
                    "None",
                    "Optional[bytes]",
                    "transfer.models.BadgeID"
                ]
            }
        },
        "retrieve_from_scramble_pool_for_event": {
            "name": "retrieve_from_scramble_pool_for_event",
            "location": 83,
            "return": [
                "bytes",
                "List[domain.models.User]",
                "List[str]",
                "bool",
                "int"
            ],
            "arguments": {
                "event_id": [
                    "str",
                    "int"
                ],
                "num_scrambles": [
                    "str",
                    "int"
                ]
            }
        },
        "delete_from_scramble_pool": {
            "name": "delete_from_scramble_pool",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "scrambles": [
                    "str",
                    "bool",
                    "List[L]",
                    "List[int]",
                    "int",
                    "Optional[str]",
                    "purplship.core.models.ShipmentRequest",
                    "List[manager.models.language.Language]"
                ]
            }
        },
        "add_scramble_to_scramble_pool": {
            "name": "add_scramble_to_scramble_pool",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "scramble": [
                    "str",
                    "Callable",
                    "Optional[str]",
                    "None"
                ],
                "event_id": [
                    "str",
                    "Callable",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "cubers.io-main/cubersio/persistence/gift_code_manager.py": {
        "bulk_add_gift_codes": {
            "name": "bulk_add_gift_codes",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "gift_codes": [
                    "str",
                    "List",
                    "bool",
                    "Union[str,Pattern[str]]"
                ]
            }
        },
        "get_gift_code_by_id": {
            "name": "get_gift_code_by_id",
            "location": 25,
            "return": [
                "bool",
                "Optional[str]",
                "float",
                "int",
                "bool or str",
                "Callable[[Dict], None]"
            ],
            "arguments": {
                "gift_code_id": [
                    "int",
                    "str"
                ]
            }
        },
        "get_unused_gift_code": {
            "name": "get_unused_gift_code",
            "location": 34,
            "return": [
                "bool",
                "dict",
                "Tuple[str, str, str]",
                "django.db.models.QuerySet"
            ],
            "arguments": {}
        },
        "get_unused_gift_code_count": {
            "name": "get_unused_gift_code_count",
            "location": 43,
            "return": [
                "bool",
                "dict",
                "Tuple[str, str, str]",
                "django.db.models.QuerySet"
            ],
            "arguments": {}
        },
        "mark_gift_code_used": {
            "name": "mark_gift_code_used",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "gift_code_id": [
                    "str",
                    "int",
                    "Dict",
                    "transfer.models.MatchCommentID"
                ]
            }
        },
        "create_confirm_deny_record": {
            "name": "create_confirm_deny_record",
            "location": 62,
            "return": [
                "cubersio.persistence.models.WeeklyCodeRecipientConfirmDeny"
            ],
            "arguments": {
                "gift_code_id": [
                    "str"
                ],
                "user_id": [
                    "str"
                ],
                "comp_id": [
                    "str"
                ]
            }
        },
        "update_confirm_deny_record": {
            "name": "update_confirm_deny_record",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "confirm_deny_record": [
                    "str",
                    "app.models.Tweet",
                    "app.models.Position",
                    "app.models.Journey",
                    "app.models.Stage",
                    "app.models.GameMember",
                    "zerver.models.Recipient"
                ]
            }
        },
        "get_pending_confirm_deny_record_by_deny_code": {
            "name": "get_pending_confirm_deny_record_by_deny_code",
            "location": 82,
            "return": [
                "bool",
                "Callable[[Dict], None]",
                "Optional[str]"
            ],
            "arguments": {
                "deny_code": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "get_pending_confirm_deny_record_by_confirm_code": {
            "name": "get_pending_confirm_deny_record_by_confirm_code",
            "location": 92,
            "return": [
                "bool",
                "Callable[[Dict], None]",
                "Optional[str]"
            ],
            "arguments": {
                "confirm_code": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "cubers.io-main/cubersio/persistence/models.py": {
        "load_user": {
            "name": "load_user",
            "location": 89,
            "return": [
                "int",
                "sqlalchemy.orm.session.Session",
                "List[dict]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "Dict[int, str]",
                    "Dict[str, Dict[int, int]]",
                    "bytes",
                    "str"
                ]
            }
        },
        "PersonalBestRecord.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Nobody.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "Nobody.__bool__": {
            "name": "__bool__",
            "location": 83,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scramble.to_front_end_consolidated_dict": {
            "name": "to_front_end_consolidated_dict",
            "location": 132,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserEventResults.init_on_load": {
            "name": "init_on_load",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserEventResults.set_solves": {
            "name": "set_solves",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "incoming_solves": [
                    "List",
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None",
                    "List[tuple[Union[bool,str]]]",
                    "Iterable[float]",
                    "List[Tuple[bool,str]]"
                ]
            }
        },
        "UserEventResults.friendly_result": {
            "name": "friendly_result",
            "location": 191,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserEventResults.friendly_single": {
            "name": "friendly_single",
            "location": 197,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserEventResults.friendly_average": {
            "name": "friendly_average",
            "location": 203,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserEventResults.__format_for_friendly": {
            "name": "__format_for_friendly",
            "location": 209,
            "return": [
                "int",
                "Text",
                "str",
                "Optional[List[CustomLineItemDraft]]",
                "bool",
                "Optional[Tuple[str]]",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Tuple[str]",
                    "Tuple[str, str]",
                    "Optional[str]",
                    "bool",
                    "Tuple[str, str, str]",
                    "int"
                ]
            }
        },
        "CompetitionEvent.to_front_end_consolidated_dict": {
            "name": "to_front_end_consolidated_dict",
            "location": 244,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserSiteRankings.__get_site_rankings_data_as_dict": {
            "name": "__get_site_rankings_data_as_dict",
            "location": 313,
            "return": [
                "Dict[str,Any]",
                "denite.util.UserContext",
                "Dict[str,str]",
                "Type",
                "str",
                "Dict[int,Union[Any,Any,Any,Any]]",
                "frozenset",
                "Dict[str,dict[str,Any]]",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserSiteRankings.get_site_rankings_and_pbs": {
            "name": "get_site_rankings_and_pbs",
            "location": 330,
            "return": [
                "Dict[(int, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserSiteRankings.get_combined_sum_of_ranks": {
            "name": "get_combined_sum_of_ranks",
            "location": 337,
            "return": [
                "SumOfRanks"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserSiteRankings.get_WCA_sum_of_ranks": {
            "name": "get_WCA_sum_of_ranks",
            "location": 344,
            "return": [
                "SumOfRanks"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserSiteRankings.get_non_WCA_sum_of_ranks": {
            "name": "get_non_WCA_sum_of_ranks",
            "location": 351,
            "return": [
                "SumOfRanks"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserSiteRankings.get_combined_kinchrank": {
            "name": "get_combined_kinchrank",
            "location": 358,
            "return": [
                "Kinchranks"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserSiteRankings.get_WCA_kinchrank": {
            "name": "get_WCA_kinchrank",
            "location": 365,
            "return": [
                "Kinchranks"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserSiteRankings.get_non_WCA_kinchrank": {
            "name": "get_non_WCA_kinchrank",
            "location": 372,
            "return": [
                "Kinchranks"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserSolve.get_total_time": {
            "name": "get_total_time",
            "location": 398,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserSolve.get_friendly_time": {
            "name": "get_friendly_time",
            "location": 403,
            "return": [
                "Optional[str]",
                "Text",
                "str",
                "Union[dict,list]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cubers.io-main/cubersio/persistence/settings_manager.py": {
        "boolean_validator": {
            "name": "boolean_validator",
            "location": 177,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Exception",
                    "Union[bool,str]",
                    "bool",
                    "Union[str,bytes]",
                    "bytes",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "hex_color_validator": {
            "name": "hex_color_validator",
            "location": 190,
            "return": [
                "str",
                "int",
                "Dict[str,Any]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "int_list_validator": {
            "name": "int_list_validator",
            "location": 204,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "__create_unset_setting": {
            "name": "__create_unset_setting",
            "location": 672,
            "return": [
                "cubersio.persistence.models.UserSetting"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "List[str]",
                    "Dict[str,Any]",
                    "int"
                ],
                "setting_code": [
                    "str",
                    "int",
                    "List[str]",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "get_default_values_for_settings": {
            "name": "get_default_values_for_settings",
            "location": 688,
            "return": [
                "dict"
            ],
            "arguments": {
                "setting_codes": [
                    "str"
                ]
            }
        },
        "get_setting_for_user": {
            "name": "get_setting_for_user",
            "location": 695,
            "return": [
                "str",
                "Optional[str]",
                "Mapping[str, T]",
                "Optional[int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int"
                ],
                "setting_code": [
                    "str",
                    "int"
                ]
            }
        },
        "get_boolean_setting_for_user": {
            "name": "get_boolean_setting_for_user",
            "location": 708,
            "return": [
                "bool",
                "Optional[str]",
                "Tuple[List[str],Optional[Any],Optional[Any]]",
                "Optional[dict]",
                "int",
                "Dict"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "models.evenUserEventData",
                    "transfer.models.SiteID"
                ],
                "setting_code": [
                    "str",
                    "models.evenUserEventData",
                    "transfer.models.SiteID"
                ]
            }
        },
        "get_all_user_ids_with_setting_value": {
            "name": "get_all_user_ids_with_setting_value",
            "location": 713,
            "return": [
                "list"
            ],
            "arguments": {
                "setting_code": [
                    "int",
                    "Dict",
                    "str",
                    "recidiviz.persistence.database.session.Session"
                ],
                "setting_value": [
                    "int",
                    "Dict",
                    "str",
                    "recidiviz.persistence.database.session.Session"
                ]
            }
        },
        "get_bulk_settings_for_user_as_dict": {
            "name": "get_bulk_settings_for_user_as_dict",
            "location": 725,
            "return": [
                "Dict",
                "List[Dict]",
                "List[str]",
                "Optional[int]",
                "amundsen_application.models.user.User",
                "float"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "transfer.models.ListID"
                ],
                "setting_codes": [
                    "str",
                    "transfer.models.ListID"
                ]
            }
        },
        "get_settings_for_user_for_edit": {
            "name": "get_settings_for_user_for_edit",
            "location": 744,
            "return": [
                "List[SettingsEditTuple]",
                "Set[str]",
                "List[List[str]]",
                "List[str]",
                "bool",
                "Set[int]",
                "Dict",
                "Dict[str,str]",
                "object"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "transfer.models.ListID"
                ],
                "setting_codes": [
                    "str",
                    "transfer.models.ListID"
                ]
            }
        },
        "set_new_settings_for_user": {
            "name": "set_new_settings_for_user",
            "location": 784,
            "return": [
                "None"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "str",
                    "transfer.models.TopicID"
                ],
                "settings_dict": [
                    "Dict[str,str]",
                    "str",
                    "Dict[str,dict[str,bool]]",
                    "Dict[str,int]",
                    "Dict[str,Dict[str,bool]]",
                    "Dict[str,Any]"
                ]
            }
        },
        "get_setting_type": {
            "name": "get_setting_type",
            "location": 806,
            "return": [
                "Type",
                "faustypes.models.FieldDescriptorT"
            ],
            "arguments": {
                "setting_code": [
                    "str"
                ]
            }
        },
        "get_color_defaults": {
            "name": "get_color_defaults",
            "location": 812,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "__ensure_all_settings_desired_exist": {
            "name": "__ensure_all_settings_desired_exist",
            "location": 822,
            "return": [
                "None"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "List[str]"
                ],
                "setting_codes": [
                    "str",
                    "Dict",
                    "Tuple",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "SettingInfo.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "int",
                    "List[str]",
                    "Sequence",
                    "Optional[List[str]]",
                    "float",
                    "None",
                    "Optional[bool]",
                    "bool"
                ],
                "validator": [
                    "int",
                    "List[str]",
                    "Sequence",
                    "Optional[List[str]]",
                    "float",
                    "None",
                    "Optional[bool]",
                    "bool"
                ],
                "setting_type": [
                    "bool",
                    "str",
                    "Type",
                    "int",
                    "Type[T]"
                ],
                "default_value": [
                    "bool",
                    "int",
                    "medtagger.database.models.Dataset",
                    "medtagger.database.models.User"
                ],
                "affects": [
                    "int",
                    "None",
                    "Sequence",
                    "Optional[List[str]]",
                    "float",
                    "List[str]",
                    "Optional[bool]",
                    "bool"
                ],
                "opposite_affects": [
                    "bool",
                    "int",
                    "Optional[List[str]]",
                    "Optional[bool]",
                    "Sequence",
                    "float"
                ]
            }
        }
    },
    "cubers.io-main/cubersio/persistence/user_manager.py": {
        "get_all_users": {
            "name": "get_all_users",
            "location": 22,
            "return": [
                "bool",
                "str",
                "models.User",
                "arxiv.users.domain.User",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "get_all_active_usernames": {
            "name": "get_all_active_usernames",
            "location": 28,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "get_user_count": {
            "name": "get_user_count",
            "location": 41,
            "return": [
                "str",
                "Dict[str, str]",
                "arxiv.users.domain.User",
                "zerver.models.UserProfile",
                "amundsen_application.models.user.User"
            ],
            "arguments": {}
        },
        "update_or_create_user_for_reddit": {
            "name": "update_or_create_user_for_reddit",
            "location": 47,
            "return": [
                "User",
                "lms.lmsdb.models.User",
                "str",
                "lms.lmsdb.models.Solution",
                "Dict[str,str]",
                "abilian.core.models.subjects.User",
                "Dict[int,str]",
                "discord.User",
                "zam_repondeur.models.Lecture"
            ],
            "arguments": {
                "reddit_id": [
                    "int",
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ],
                "token": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Union[server.models.Bike,int]",
                    "int"
                ]
            }
        },
        "update_or_create_user_for_wca": {
            "name": "update_or_create_user_for_wca",
            "location": 63,
            "return": [
                "User",
                "lms.lmsdb.models.User",
                "str",
                "lms.lmsdb.models.Solution",
                "Dict[str,str]",
                "abilian.core.models.subjects.User",
                "Dict[int,str]",
                "discord.User",
                "zam_repondeur.models.Lecture"
            ],
            "arguments": {
                "wca_id": [
                    "int",
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ],
                "token": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Union[server.models.Bike,int]",
                    "int"
                ]
            }
        },
        "add_wca_info_to_user": {
            "name": "add_wca_info_to_user",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "username": [
                    "str"
                ],
                "wca_id": [
                    "str",
                    "Set[int]",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "wca_token": [
                    "str",
                    "List[int]",
                    "bytes",
                    "bool",
                    "int"
                ]
            }
        },
        "add_reddit_info_to_user": {
            "name": "add_reddit_info_to_user",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "username": [
                    "str"
                ],
                "reddit_id": [
                    "str",
                    "Set[int]",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "reddit_token": [
                    "str",
                    "List[int]",
                    "bytes",
                    "bool",
                    "int"
                ]
            }
        },
        "get_user_by_username": {
            "name": "get_user_by_username",
            "location": 107,
            "return": [
                "bool",
                "models.User",
                "core.models.UserPreferences",
                "Dict[str, str]"
            ],
            "arguments": {
                "username": [
                    "str",
                    "bytes",
                    "Dict",
                    "models.Course"
                ]
            }
        },
        "get_user_by_username_case_insensitive": {
            "name": "get_user_by_username_case_insensitive",
            "location": 113,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "Dict[str,str]",
                "app.models.User",
                "Optional[app.models.User]",
                "bool",
                "server.models.User"
            ],
            "arguments": {
                "username": [
                    "str",
                    "None",
                    "zerver.models.Realm",
                    "article.transfer.models.ArticleNumber",
                    "Optional[str]",
                    "server.models.Bike"
                ]
            }
        },
        "get_user_by_reddit_id": {
            "name": "get_user_by_reddit_id",
            "location": 127,
            "return": [
                "bool",
                "zerver.models.Realm",
                "app.models.GameMember",
                "app.models.course.Course",
                "transfer.models.Scope"
            ],
            "arguments": {
                "reddit_id": [
                    "str",
                    "transfer.models.Catalog.ID",
                    "transfer.models.ShopID",
                    "transfer.models.StorefronID"
                ]
            }
        },
        "get_user_by_wca_id": {
            "name": "get_user_by_wca_id",
            "location": 133,
            "return": [
                "bool",
                "zerver.models.Realm",
                "app.models.GameMember",
                "app.models.course.Course",
                "transfer.models.Scope"
            ],
            "arguments": {
                "wca_id": [
                    "str",
                    "transfer.models.Catalog.ID",
                    "transfer.models.ShopID",
                    "transfer.models.StorefronID"
                ]
            }
        },
        "get_user_by_id": {
            "name": "get_user_by_id",
            "location": 139,
            "return": [
                "bool",
                "str",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "transfer.models.SubjectID"
                ]
            }
        },
        "set_user_as_admin": {
            "name": "set_user_as_admin",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "username": [
                    "str",
                    "int"
                ]
            }
        },
        "unset_user_as_admin": {
            "name": "unset_user_as_admin",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "username": [
                    "str",
                    "int",
                    "models.Telegram_Chat",
                    "server.models.Bike"
                ]
            }
        },
        "set_perma_blacklist_for_user": {
            "name": "set_perma_blacklist_for_user",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int",
                    "None",
                    "Optional[int]",
                    "transfer.models.MatchID"
                ]
            }
        },
        "unset_perma_blacklist_for_user": {
            "name": "unset_perma_blacklist_for_user",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "str",
                    "None",
                    "transfer.models.MatchID",
                    "Optional[int]"
                ]
            }
        },
        "verify_user": {
            "name": "verify_user",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "str",
                    "transfer.models.MatchID"
                ]
            }
        },
        "unverify_user": {
            "name": "unverify_user",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "str",
                    "transfer.models.MatchID"
                ]
            }
        },
        "get_all_admins": {
            "name": "get_all_admins",
            "location": 217,
            "return": [
                "Optional[app.models.User]",
                "models.User",
                "bool",
                "bytes"
            ],
            "arguments": {}
        },
        "get_username_id_map": {
            "name": "get_username_id_map",
            "location": 225,
            "return": [
                "dict"
            ],
            "arguments": {}
        },
        "UserDoesNotExistException.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "UserDoesNotExistException.__str__": {
            "name": "__str__",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cubers.io-main/cubersio/persistence/user_results_manager.py": {
        "blacklist_results": {
            "name": "blacklist_results",
            "location": 26,
            "return": [
                "Tuple[int, Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "results_id": [
                    "int",
                    "transfer.models.ItemID",
                    "List[int]"
                ],
                "note": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "unblacklist_results": {
            "name": "unblacklist_results",
            "location": 46,
            "return": [
                "Tuple[int, Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "results_id": [
                    "int",
                    "transfer.models.ItemID",
                    "List[int]"
                ]
            }
        },
        "get_user_event_results_by_id": {
            "name": "get_user_event_results_by_id",
            "location": 66,
            "return": [
                "sqlalchemy.orm.Session",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "user_event_results_id": [
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "get_user_completed_solves_count": {
            "name": "get_user_completed_solves_count",
            "location": 76,
            "return": [
                "sqlalchemy.orm.session.Session",
                "str",
                "Callable[[Dict], None]",
                "Callable[[], str]",
                "models.User",
                "bool",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "transfer.models.BadgeID",
                    "bool",
                    "int"
                ]
            }
        },
        "get_user_medals_count": {
            "name": "get_user_medals_count",
            "location": 88,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int"
                ]
            }
        },
        "get_user_solve_for_scramble_id": {
            "name": "get_user_solve_for_scramble_id",
            "location": 110,
            "return": [
                "str",
                "List[str]",
                "Callable[[Dict], None]",
                "Callable[[], str]",
                "sqlalchemy.orm.session.Session",
                "int",
                "Optional[List[topicdb.core.models.association.Association]]",
                "List[domain.models.User]"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "Optional[str]",
                    "transfer.models.Member.shipID",
                    "transfer.models.OrgaTeamID"
                ],
                "scramble_id": [
                    "int",
                    "Optional[str]",
                    "transfer.models.Member.shipID",
                    "transfer.models.OrgaTeamID"
                ]
            }
        },
        "get_event_results_for_user": {
            "name": "get_event_results_for_user",
            "location": 121,
            "return": [
                "amundsen_application.models.user.User",
                "Dict[str, Any]",
                "dict",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "comp_event_id": [
                    "str"
                ],
                "user": [
                    "str"
                ]
            }
        },
        "get_all_complete_event_results": {
            "name": "get_all_complete_event_results",
            "location": 130,
            "return": [
                "str",
                "zerver.models.Realm",
                "django.contrib.auth.models.User",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "get_results_for_comp_event": {
            "name": "get_results_for_comp_event",
            "location": 138,
            "return": [
                "List[str]",
                "List[domain.models.User]",
                "bool"
            ],
            "arguments": {
                "comp_event_id": [
                    "int",
                    "str",
                    "models.User",
                    "Tuple[int, str]"
                ]
            }
        },
        "get_pb_single_event_results_except_current_comp": {
            "name": "get_pb_single_event_results_except_current_comp",
            "location": 150,
            "return": [
                "List[str]",
                "List[domain.models.User]",
                "Callable[[Dict], None]",
                "bool"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int"
                ],
                "event_id": [
                    "str",
                    "int"
                ]
            }
        },
        "get_pb_average_event_results_except_current_comp": {
            "name": "get_pb_average_event_results_except_current_comp",
            "location": 171,
            "return": [
                "List[str]",
                "List[domain.models.User]",
                "Callable[[Dict], None]",
                "bool"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int"
                ],
                "event_id": [
                    "str",
                    "int"
                ]
            }
        },
        "get_all_complete_user_results_for_comp": {
            "name": "get_all_complete_user_results_for_comp",
            "location": 192,
            "return": [
                "zerver.models.UserProfile",
                "amundsen_application.models.user.User"
            ],
            "arguments": {
                "comp_id": [
                    "Optional[int]",
                    "transfer.models.ItemID",
                    "List[Optional[int]]",
                    "Set[int]",
                    "int",
                    "str"
                ],
                "omit_blacklisted": [
                    "str"
                ]
            }
        },
        "get_all_complete_user_results_for_comp_event": {
            "name": "get_all_complete_user_results_for_comp_event",
            "location": 210,
            "return": [
                "models.User",
                "amundsen_application.models.user.User",
                "bool",
                "Tuple[int, int]"
            ],
            "arguments": {
                "comp_event_id": [
                    "str",
                    "models.User",
                    "float",
                    "tracklater.models.Entry",
                    "List[int]"
                ],
                "omit_blacklisted": [
                    "str",
                    "models.CloudConfig",
                    "app.models.group.Group"
                ]
            }
        },
        "get_blacklisted_entries_for_comp": {
            "name": "get_blacklisted_entries_for_comp",
            "location": 231,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "comp_id": [
                    "Generator[Any, None, None]",
                    "int",
                    "dict"
                ]
            }
        },
        "get_all_complete_user_results_for_comp_and_user": {
            "name": "get_all_complete_user_results_for_comp_and_user",
            "location": 248,
            "return": [
                "arxiv.users.domain.User",
                "bool",
                "Type",
                "int"
            ],
            "arguments": {
                "comp_id": [
                    "str",
                    "Set[int]",
                    "Optional[str]"
                ],
                "user_id": [
                    "str",
                    "Set[int]",
                    "Optional[str]"
                ],
                "include_blacklisted": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "get_all_user_results_for_comp_and_user": {
            "name": "get_all_user_results_for_comp_and_user",
            "location": 272,
            "return": [
                "bool",
                "Callable[[Dict], None]",
                "Callable[[], str]",
                "str"
            ],
            "arguments": {
                "comp_id": [
                    "str",
                    "Iterable[str]",
                    "int"
                ],
                "user_id": [
                    "str",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "get_all_complete_user_results_for_user_and_event": {
            "name": "get_all_complete_user_results_for_user_and_event",
            "location": 285,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int",
                    "transfer.models.OrderID"
                ],
                "event_id": [
                    "str",
                    "int",
                    "transfer.models.OrderID"
                ]
            }
        },
        "get_all_user_results_for_user": {
            "name": "get_all_user_results_for_user",
            "location": 299,
            "return": [
                "bool",
                "Callable[[], str]",
                "models.User"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "transfer.models.OrderID",
                    "int"
                ]
            }
        },
        "save_event_results": {
            "name": "save_event_results",
            "location": 315,
            "return": [
                "str",
                "dict",
                "int",
                "List[Dict]",
                "Iterable[Type]"
            ],
            "arguments": {
                "new_results": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "str",
                    "tracklater.models.Entry",
                    "List[Dict[str, Any]]"
                ],
                "event_id": [
                    "zerver.models.UserProfile",
                    "int",
                    "List[dict]",
                    "sqlalchemy.orm.Session",
                    "str",
                    "tracim.models.auth.User"
                ]
            }
        },
        "calculate_latest_user_pbs_for_event": {
            "name": "calculate_latest_user_pbs_for_event",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "str"
                ],
                "event_id": [
                    "int",
                    "str"
                ]
            }
        },
        "delete_event_results": {
            "name": "delete_event_results",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "comp_event_results": [
                    "zerver.models.UserProfile",
                    "sqlalchemy.orm.session.Session",
                    "zerver.models.Attachment",
                    "Union[float, str]",
                    "float"
                ]
            }
        },
        "delete_user_solve": {
            "name": "delete_user_solve",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "user_solve": [
                    "zerver.models.UserProfile",
                    "str",
                    "django.contrib.auth.models.User",
                    "user.User",
                    "Optional[zerver.models.UserProfile]",
                    "Callable[[], str]",
                    "Optional[str]"
                ]
            }
        },
        "bulk_save_event_results": {
            "name": "bulk_save_event_results",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "results_list": [
                    "bool",
                    "int",
                    "List[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "UserEventResultsDoesNotExistException.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results_id": [
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "UserEventResultsDoesNotExistException.__str__": {
            "name": "__str__",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cubers.io-main/cubersio/persistence/user_site_rankings_manager.py": {
        "get_site_rankings_for_user": {
            "name": "get_site_rankings_for_user",
            "location": 12,
            "return": [
                "List[str]",
                "models.User",
                "Callable[[], str]",
                "sqlalchemy.orm.session.Session",
                "Callable[[Dict], None]"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "transfer.models.Channel.ID"
                ]
            }
        },
        "get_site_rankings_for_users": {
            "name": "get_site_rankings_for_users",
            "location": 21,
            "return": [
                "dict"
            ],
            "arguments": {
                "user_ids": [
                    "int",
                    "transfer.models.TopicID",
                    "transfer.models.Channel.ID",
                    "transfer.models.TicketID",
                    "transfer.models.BadgeID"
                ]
            }
        },
        "get_user_site_rankings_all_sorted_single": {
            "name": "get_user_site_rankings_all_sorted_single",
            "location": 32,
            "return": [
                "List[str]",
                "sqlalchemy.orm.session.Session",
                "Callable[[Dict], None]"
            ],
            "arguments": {}
        },
        "get_user_site_rankings_all_sorted_average": {
            "name": "get_user_site_rankings_all_sorted_average",
            "location": 49,
            "return": [
                "List[str]",
                "sqlalchemy.orm.session.Session",
                "Callable[[Dict], None]"
            ],
            "arguments": {}
        },
        "get_user_site_rankings_wca_sorted_single": {
            "name": "get_user_site_rankings_wca_sorted_single",
            "location": 66,
            "return": [
                "models.characters.character_base.Character",
                "Callable[[Dict], None]",
                "sqlalchemy.orm.session.Session",
                "Callable[[], str]",
                "str",
                "bool",
                "zerver.models.UserProfile"
            ],
            "arguments": {}
        },
        "get_user_site_rankings_wca_sorted_average": {
            "name": "get_user_site_rankings_wca_sorted_average",
            "location": 83,
            "return": [
                "models.characters.character_base.Character",
                "Callable[[Dict], None]",
                "sqlalchemy.orm.session.Session",
                "Callable[[], str]",
                "str",
                "bool",
                "zerver.models.UserProfile"
            ],
            "arguments": {}
        },
        "get_user_site_rankings_non_wca_sorted_single": {
            "name": "get_user_site_rankings_non_wca_sorted_single",
            "location": 100,
            "return": [
                "sqlalchemy.orm.session.Session",
                "List[str]",
                "Callable[[Dict], None]",
                "models.characters.character_base.Character"
            ],
            "arguments": {}
        },
        "get_user_site_rankings_non_wca_sorted_average": {
            "name": "get_user_site_rankings_non_wca_sorted_average",
            "location": 117,
            "return": [
                "sqlalchemy.orm.session.Session",
                "List[str]",
                "Callable[[Dict], None]",
                "models.characters.character_base.Character"
            ],
            "arguments": {}
        },
        "get_user_kinchranks_wca_sorted": {
            "name": "get_user_kinchranks_wca_sorted",
            "location": 134,
            "return": [
                "models.characters.character_base.Character",
                "Callable[[Dict], None]",
                "sqlalchemy.orm.session.Session",
                "Callable[[], str]",
                "str",
                "bool",
                "zerver.models.UserProfile"
            ],
            "arguments": {}
        },
        "get_user_kinchranks_non_wca_sorted": {
            "name": "get_user_kinchranks_non_wca_sorted",
            "location": 146,
            "return": [
                "sqlalchemy.orm.session.Session",
                "models.User",
                "Callable[[], str]",
                "List[str]",
                "str",
                "Callable[[Dict], None]",
                "bool"
            ],
            "arguments": {}
        },
        "get_user_kinchranks_all_sorted": {
            "name": "get_user_kinchranks_all_sorted",
            "location": 158,
            "return": [
                "Callable[[Dict], None]",
                "sqlalchemy.orm.session.Session",
                "str",
                "List[str]",
                "Callable[[], str]",
                "bool",
                "zerver.models.UserProfile"
            ],
            "arguments": {}
        },
        "bulk_update_site_rankings": {
            "name": "bulk_update_site_rankings",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "site_rankings": [
                    "Dict[int,dict]",
                    "str",
                    "models.Person.Person",
                    "zerver.models.Realm"
                ]
            }
        },
        "update_one_event_site_rankings_for_user": {
            "name": "update_one_event_site_rankings_for_user",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int",
                    "Dict",
                    "zerver.models.UserProfile",
                    "grouper.models.permission.Permission",
                    "grouper.models.service_accounServiceAccount",
                    "user.User"
                ],
                "new_site_rankings": [
                    "str",
                    "int",
                    "Mapping",
                    "Optional[int]",
                    "None",
                    "User",
                    "Optional[str]"
                ],
                "event": [
                    "str",
                    "int",
                    "Mapping",
                    "Optional[int]",
                    "None",
                    "User",
                    "Optional[str]"
                ]
            }
        }
    },
    "cubers.io-main/cubersio/persistence/__init__.py": {},
    "cubers.io-main/cubersio/routes/__init__.py": {
        "api_login_required": {
            "name": "api_login_required",
            "location": 8,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[...,None]"
                ]
            }
        },
        "api_login_required.decorated_function": {
            "name": "decorated_function",
            "location": 14,
            "return": [
                "dict",
                "Callable[[str], str]",
                "bool"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/cubersio/routes/admin/gift_codes.py": {
        "confirm_gift_code_recipient": {
            "name": "confirm_gift_code_recipient",
            "location": 19,
            "return": [
                "Text",
                "int",
                "bool",
                "str",
                "List[Dict[str,str]]"
            ],
            "arguments": {
                "confirm_code": [
                    "str",
                    "int",
                    "Iterable[str]"
                ]
            }
        },
        "deny_gift_code_recipient": {
            "name": "deny_gift_code_recipient",
            "location": 39,
            "return": [
                "Text",
                "int",
                "bool",
                "str",
                "List[Dict[str,str]]"
            ],
            "arguments": {
                "deny_code": [
                    "str",
                    "int",
                    "Iterable[str]"
                ]
            }
        },
        "add_gift_codes": {
            "name": "add_gift_codes",
            "location": 56,
            "return": [
                "Tuple[Union[Text,int]]",
                "Optional[str]",
                "List[str]",
                "Optional[Any]",
                "zerver.models.Realm",
                "zerver.models.UserProfile",
                "str",
                "allennlp.models.archival.Archive"
            ],
            "arguments": {}
        },
        "__handle_add_gift_codes": {
            "name": "__handle_add_gift_codes",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "form": [
                    "bytes",
                    "str",
                    "Dict[str,str]",
                    "OrderedDict",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "cubers.io-main/cubersio/routes/admin/__init__.py": {},
    "cubers.io-main/cubersio/routes/auth/reddit.py": {
        "__get_oauth_state_for_reddit_association": {
            "name": "__get_oauth_state_for_reddit_association",
            "location": 30,
            "return": [
                "bytes"
            ],
            "arguments": {
                "username": [
                    "str",
                    "Dict",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ]
            }
        },
        "__handle_login_state": {
            "name": "__handle_login_state",
            "location": 40,
            "return": [
                "dict",
                "str",
                "Dict[str, Any]",
                "Optional[Dict]",
                "int"
            ],
            "arguments": {
                "_": [
                    "str",
                    "List"
                ],
                "reddit_id": [
                    "str",
                    "int"
                ],
                "token": [
                    "str",
                    "int"
                ]
            }
        },
        "__handle_assoc_state": {
            "name": "__handle_assoc_state",
            "location": 49,
            "return": [
                "int",
                "Optional[Dict]",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "state_params": [
                    "bool",
                    "int"
                ],
                "reddit_id": [
                    "int"
                ],
                "token": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "reddit_login": {
            "name": "reddit_login",
            "location": 83,
            "return": [
                "int",
                "Optional[int]",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "reddit_assoc": {
            "name": "reddit_assoc",
            "location": 94,
            "return": [
                "Dict[str, Any]",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "reddit_authorize": {
            "name": "reddit_authorize",
            "location": 105,
            "return": [
                "int",
                "Dict[str, Any]",
                "recidiviz.persistence.entity.state.entities.StatePerson"
            ],
            "arguments": {}
        },
        "admin_login": {
            "name": "admin_login",
            "location": 130,
            "return": [
                "int",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Optional[int]"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/cubersio/routes/auth/wca.py": {
        "__get_oauth_state_for_WCA_association": {
            "name": "__get_oauth_state_for_WCA_association",
            "location": 36,
            "return": [
                "bytes"
            ],
            "arguments": {
                "username": [
                    "str",
                    "Dict",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ]
            }
        },
        "__handle_login_state": {
            "name": "__handle_login_state",
            "location": 46,
            "return": [
                "dict",
                "str",
                "Dict[str, Any]",
                "Optional[Dict]",
                "int"
            ],
            "arguments": {
                "_": [
                    "str",
                    "List"
                ],
                "wca_id": [
                    "str",
                    "int"
                ],
                "token": [
                    "str",
                    "int"
                ]
            }
        },
        "__handle_assoc_state": {
            "name": "__handle_assoc_state",
            "location": 55,
            "return": [
                "int",
                "Optional[Dict]",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "state_params": [
                    "bool",
                    "int"
                ],
                "wca_id": [
                    "int"
                ],
                "token": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "wca_login": {
            "name": "wca_login",
            "location": 89,
            "return": [
                "int",
                "Optional[int]",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "wca_assoc": {
            "name": "wca_assoc",
            "location": 100,
            "return": [
                "Dict[str, Any]",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "wca_authorize": {
            "name": "wca_authorize",
            "location": 111,
            "return": [
                "Dict[str, Any]",
                "str",
                "int",
                "Optional[bool]"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/cubersio/routes/auth/__init__.py": {
        "__encrypt_state": {
            "name": "__encrypt_state",
            "location": 26,
            "return": [
                "bytes"
            ],
            "arguments": {
                "state": [
                    "List[bytes]",
                    "str"
                ]
            }
        },
        "__decrypt_state": {
            "name": "__decrypt_state",
            "location": 33,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "state": [
                    "int",
                    "Tuple[int]"
                ]
            }
        },
        "logout": {
            "name": "logout",
            "location": 44,
            "return": [
                "str",
                "Dict[str, str]",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "denied": {
            "name": "denied",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/cubersio/routes/events/event_routes.py": {
        "event_results": {
            "name": "event_results",
            "location": 27,
            "return": [
                "str",
                "Tuple[Union[str,int]]"
            ],
            "arguments": {
                "event_name": [
                    "str",
                    "Dict[str,object]",
                    "Callable",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "event_results_export": {
            "name": "event_results_export",
            "location": 45,
            "return": [
                "str",
                "Tuple[Union[str,int]]"
            ],
            "arguments": {
                "event_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "__safe_get_event": {
            "name": "__safe_get_event",
            "location": 61,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "event_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "__scrub_pb_value": {
            "name": "__scrub_pb_value",
            "location": 70,
            "return": [
                "Union[(float, str)]"
            ],
            "arguments": {
                "value": [
                    "float",
                    "bool",
                    "int",
                    "str",
                    "Iterable[object]"
                ]
            }
        },
        "__build_user_pb_pairs": {
            "name": "__build_user_pb_pairs",
            "location": 76,
            "return": [
                "collections.OrderedDict[(Any, UserPBPair)]"
            ],
            "arguments": {
                "singles": [
                    "str",
                    "bool",
                    "Callable[[Any],bool]"
                ],
                "averages": [
                    "str",
                    "bool",
                    "Callable[[Any],bool]"
                ]
            }
        },
        "__build_csv_output": {
            "name": "__build_csv_output",
            "location": 100,
            "return": [
                "str",
                "Tuple[int]",
                "Optional[str]",
                "Set[str]"
            ],
            "arguments": {
                "event_name": [
                    "str"
                ],
                "user_pb_dict": [
                    "Dict",
                    "Dict[int,Any]",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "cubers.io-main/cubersio/routes/events/kinchranks_routes.py": {
        "kinchranks": {
            "name": "kinchranks",
            "location": 35,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "rank_type": []
            }
        }
    },
    "cubers.io-main/cubersio/routes/events/sum_of_ranks_routes.py": {
        "sum_of_ranks": {
            "name": "sum_of_ranks",
            "location": 20,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "sor_type": []
            }
        }
    },
    "cubers.io-main/cubersio/routes/events/__init__.py": {},
    "cubers.io-main/cubersio/routes/export/export_routes.py": {
        "export": {
            "name": "export",
            "location": 139,
            "return": [
                "Response",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]",
                "Dict"
            ],
            "arguments": {}
        },
        "TwistyTimerResultsExporter.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "bool",
                    "int"
                ],
                "event_name_results_map": [
                    "str"
                ]
            }
        },
        "TwistyTimerResultsExporter.get_filename": {
            "name": "get_filename",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwistyTimerResultsExporter.generate_results": {
            "name": "generate_results",
            "location": 76,
            "return": [
                "Generator[(str, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwistyTimerResultsExporter.generate_results.gen_results": {
            "name": "gen_results",
            "location": 80,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/cubersio/routes/export/__init__.py": {},
    "cubers.io-main/cubersio/routes/home/home_routes.py": {
        "index": {
            "name": "index",
            "location": 16,
            "return": [
                "Text",
                "int",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {}
        },
        "prompt_login": {
            "name": "prompt_login",
            "location": 63,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {}
        },
        "__build_is_incomplete_func": {
            "name": "__build_is_incomplete_func",
            "location": 70,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "complete_ids": [
                    "str",
                    "bool",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ]
            }
        },
        "__build_is_incomplete_func.__is_incomplete": {
            "name": "__is_incomplete",
            "location": 74,
            "return": [
                "bool",
                "Callable[...,None]"
            ],
            "arguments": {
                "result": [
                    "bool",
                    "\"ImmutableSet[T]\"",
                    "app.models.Question"
                ]
            }
        }
    },
    "cubers.io-main/cubersio/routes/home/__init__.py": {},
    "cubers.io-main/cubersio/routes/persistence/persistence_routes.py": {
        "post_solve": {
            "name": "post_solve",
            "location": 57,
            "return": [
                "Tuple[Text]",
                "Tuple[str]",
                "bool",
                "Iterable[str]",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {}
        },
        "toggle_prev_penalty": {
            "name": "toggle_prev_penalty",
            "location": 123,
            "return": [
                "Tuple[Text]",
                "str",
                "Tuple[str]",
                "esm.models.service_type.ServiceType",
                "bool"
            ],
            "arguments": {}
        },
        "delete_prev_solve": {
            "name": "delete_prev_solve",
            "location": 182,
            "return": [
                "int",
                "Tuple[Text]",
                "str",
                "Tuple[str]"
            ],
            "arguments": {}
        },
        "apply_comment": {
            "name": "apply_comment",
            "location": 231,
            "return": [
                "Tuple[Text]",
                "str",
                "Tuple[str]",
                "esm.models.service_type.ServiceType",
                "bool"
            ],
            "arguments": {}
        },
        "set_time": {
            "name": "set_time",
            "location": 270,
            "return": [
                "Tuple",
                "Tuple[Text]",
                "str",
                "Optional[Dict]",
                "models.Dashboard",
                "bytes",
                "int"
            ],
            "arguments": {}
        },
        "set_plus_two": {
            "name": "set_plus_two",
            "location": 311,
            "return": [
                "Tuple",
                "str",
                "Tuple[Text]",
                "salon.models.Stylist",
                "Dict[str,str]"
            ],
            "arguments": {}
        },
        "set_dnf": {
            "name": "set_dnf",
            "location": 337,
            "return": [
                "Tuple",
                "str",
                "Tuple[Text]",
                "salon.models.Stylist",
                "Dict[str,str]"
            ],
            "arguments": {}
        },
        "clear_penalty": {
            "name": "clear_penalty",
            "location": 363,
            "return": [
                "Tuple",
                "int",
                "Tuple[Text]",
                "salon.models.Stylist",
                "jumeaux.models.JudgementAddOnPayload",
                "List[str]"
            ],
            "arguments": {}
        },
        "delete_solve": {
            "name": "delete_solve",
            "location": 389,
            "return": [
                "Tuple",
                "Mapping[str,Any]",
                "str",
                "Optional[Dict]",
                "Dict"
            ],
            "arguments": {}
        },
        "__retrieve_target_solve": {
            "name": "__retrieve_target_solve",
            "location": 420,
            "return": [
                "tuple"
            ],
            "arguments": {
                "request_data": [
                    "Dict[str,str]",
                    "Dict[str,int]",
                    "Dict",
                    "bool",
                    "Dict[str,Any]"
                ],
                "user": [
                    "Dict",
                    "Optional[str]",
                    "str",
                    "Optional[dict]",
                    "None",
                    "Callable[[protoactor.persistence.messages.Event],None]",
                    "Callable[protoactor.persistence.messages.Event,None]",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "cubers.io-main/cubersio/routes/persistence/__init__.py": {},
    "cubers.io-main/cubersio/routes/results/results_routes.py": {
        "comp_results": {
            "name": "comp_results",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "comp_id": [
                    "int",
                    "str"
                ]
            }
        },
        "comp_event_results": {
            "name": "comp_event_results",
            "location": 54,
            "return": [
                "bool",
                "Text"
            ],
            "arguments": {
                "comp_event_id": [
                    "int",
                    "List[int]",
                    "bytes"
                ]
            }
        },
        "get_overall_performance_data": {
            "name": "get_overall_performance_data",
            "location": 107,
            "return": [
                "Text",
                "bool",
                "Union[str,Pattern]"
            ],
            "arguments": {
                "comp_id": [
                    "str",
                    "int"
                ]
            }
        },
        "curr_leaders": {
            "name": "curr_leaders",
            "location": 140,
            "return": [
                "str",
                "Optional[int]",
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "prev_leaders": {
            "name": "prev_leaders",
            "location": 148,
            "return": [
                "str",
                "Optional[int]",
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "results_list": {
            "name": "results_list",
            "location": 156,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "blacklist": {
            "name": "blacklist",
            "location": 166,
            "return": [
                "str",
                "Tuple[Union[Text,int]]",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]",
                "Tuple[Union[str,int]]"
            ],
            "arguments": {
                "results_id": [
                    "int",
                    "str",
                    "Dict",
                    "bool"
                ]
            }
        },
        "unblacklist": {
            "name": "unblacklist",
            "location": 196,
            "return": [
                "str",
                "Tuple[Union[Text,int]]",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]",
                "Tuple[Union[str,int]]"
            ],
            "arguments": {
                "results_id": [
                    "str"
                ]
            }
        },
        "filter_blacklisted_results": {
            "name": "filter_blacklisted_results",
            "location": 223,
            "return": [
                "Union[(list, _T0)]"
            ],
            "arguments": {
                "results": [
                    "str",
                    "Dict[str,Any]",
                    "Tuple[cirq.Qid]",
                    "Dict",
                    "int"
                ],
                "show_admin": [
                    "bool",
                    "str",
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "curr_user": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "cubers.io-main/cubersio/routes/results/__init__.py": {},
    "cubers.io-main/cubersio/routes/timer/timer_routes.py": {
        "timer_page": {
            "name": "timer_page",
            "location": 102,
            "return": [
                "tuple[typing.Union[str,int]]",
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "comp_event_id": [],
                "gather_info_for_live_refresh": [
                    "bool"
                ]
            }
        },
        "__build_user_solves_list": {
            "name": "__build_user_solves_list",
            "location": 210,
            "return": [
                "Tuple[(List[list], Any)]"
            ],
            "arguments": {
                "user_results": [],
                "event_total_solves": [],
                "scrambles": []
            }
        },
        "__determine_is_complete": {
            "name": "__determine_is_complete",
            "location": 235,
            "return": [
                "bool"
            ],
            "arguments": {
                "is_complete_flag": [],
                "event_format": [],
                "num_solves_completed": []
            }
        },
        "__determine_scramble_id_text_index": {
            "name": "__determine_scramble_id_text_index",
            "location": 246,
            "return": [
                "Tuple[(Any, Any, int)]"
            ],
            "arguments": {
                "user_results": [],
                "user_solves_list": [],
                "scrambles": [],
                "event_name": [],
                "event_format": []
            }
        },
        "__determine_button_states": {
            "name": "__determine_button_states",
            "location": 281,
            "return": [
                "Dict[(str, Dict[(str, Any)])]"
            ],
            "arguments": {
                "user_results": [],
                "scramble_index": [],
                "settings": []
            }
        },
        "__determine_page_subtype": {
            "name": "__determine_page_subtype",
            "location": 349,
            "return": [
                "str"
            ],
            "arguments": {
                "event_name": [],
                "settings": []
            }
        },
        "__build_done_message": {
            "name": "__build_done_message",
            "location": 362,
            "return": [
                "str"
            ],
            "arguments": {
                "user_results": [],
                "event_name": [],
                "event_format": []
            }
        },
        "__get_user_settings": {
            "name": "__get_user_settings",
            "location": 465,
            "return": [
                "Any"
            ],
            "arguments": {
                "user": []
            }
        }
    },
    "cubers.io-main/cubersio/routes/timer/__init__.py": {},
    "cubers.io-main/cubersio/routes/user/profile_routes.py": {
        "profile": {
            "name": "profile",
            "location": 28,
            "return": [
                "str",
                "Tuple"
            ],
            "arguments": {
                "username": [
                    "str",
                    "Dict[str,str]"
                ]
            }
        },
        "blacklist_user": {
            "name": "blacklist_user",
            "location": 110,
            "return": [
                "Tuple[Union[Text,int]]",
                "int",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "str",
                    "Sequence[int]"
                ]
            }
        },
        "unblacklist_user": {
            "name": "unblacklist_user",
            "location": 126,
            "return": [
                "Tuple[Union[Text,int]]",
                "int",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "str",
                    "Sequence[int]"
                ]
            }
        },
        "do_verify_user": {
            "name": "do_verify_user",
            "location": 142,
            "return": [
                "Tuple[Union[Text,int]]",
                "str",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]",
                "bool",
                "Optional[Any]"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "str"
                ]
            }
        },
        "do_unverify_user": {
            "name": "do_unverify_user",
            "location": 158,
            "return": [
                "Tuple[Union[Text,int]]",
                "str",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]",
                "bool",
                "Optional[Any]"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "str"
                ]
            }
        },
        "__should_show_blacklisted_results": {
            "name": "__should_show_blacklisted_results",
            "location": 174,
            "return": [
                "bool"
            ],
            "arguments": {
                "profile_username": [
                    "bool",
                    "str",
                    "List[str]"
                ],
                "is_admin_here": [
                    "float",
                    "bool",
                    "List",
                    "int"
                ]
            }
        }
    },
    "cubers.io-main/cubersio/routes/user/versus_routes.py": {
        "versus_search": {
            "name": "versus_search",
            "location": 24,
            "return": [
                "str",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "user_versus_user": {
            "name": "user_versus_user",
            "location": 32,
            "return": [],
            "arguments": {
                "username1": [
                    "str"
                ],
                "username2": [
                    "str"
                ],
                "errors": [
                    "str",
                    "None"
                ]
            }
        },
        "me_versus_other": {
            "name": "me_versus_other",
            "location": 55,
            "return": [
                "int",
                "Dict[str, str]",
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "username": [
                    "List",
                    "bool",
                    "Union[str,List[Any]]",
                    "str"
                ]
            }
        },
        "__render_versus_page_for_users": {
            "name": "__render_versus_page_for_users",
            "location": 61,
            "return": [
                "str",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "user1": [
                    "str"
                ],
                "user2": [
                    "str"
                ],
                "errors": []
            }
        },
        "usernames": {
            "name": "usernames",
            "location": 86,
            "return": [
                "bool",
                "dict",
                "app.domain.news.News",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "user_site_stats": {
            "name": "user_site_stats",
            "location": 93,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "username": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "user_site_rankings": {
            "name": "user_site_rankings",
            "location": 106,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "username": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "__get_versus_page_info_for_user": {
            "name": "__get_versus_page_info_for_user",
            "location": 127,
            "return": [
                "Tuple[(Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "user": [
                    "str",
                    "Optional[str]",
                    "Iterable[str]",
                    "None"
                ]
            }
        },
        "__get_user_site_rankings": {
            "name": "__get_user_site_rankings",
            "location": 134,
            "return": [
                "str",
                "Callable",
                "List[List[int]]"
            ],
            "arguments": {
                "user_id": [
                    "int"
                ]
            }
        },
        "__get_user_site_stats": {
            "name": "__get_user_site_stats",
            "location": 160,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "__remove_events_not_participated_in": {
            "name": "__remove_events_not_participated_in",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "event_id_name_map": [
                    "Dict[str,str]",
                    "str",
                    "Optional[Mapping[str,Any]]"
                ],
                "rankings1": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "rankings2": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        }
    },
    "cubers.io-main/cubersio/routes/user/__init__.py": {},
    "cubers.io-main/cubersio/routes/user/settings/custom_colors_settings_routes.py": {
        "colors_settings": {
            "name": "colors_settings",
            "location": 134,
            "return": [
                "Dict[str, Any]",
                "str",
                "int",
                "Optional[bool]"
            ],
            "arguments": {
                "event": [
                    "Dict"
                ]
            }
        },
        "save_colors_settings": {
            "name": "save_colors_settings",
            "location": 156,
            "return": [
                "Tuple[Text]",
                "str",
                "List[Dict[str,Any]]",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/cubersio/routes/user/settings/event_settings_routes.py": {
        "events_settings": {
            "name": "events_settings",
            "location": 19,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "save_events_settings": {
            "name": "save_events_settings",
            "location": 40,
            "return": [
                "Tuple[Text]",
                "str",
                "List[Dict[str,Any]]",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/cubersio/routes/user/settings/reddit_settings_routes.py": {
        "reddit_settings": {
            "name": "reddit_settings",
            "location": 21,
            "return": [
                "int",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/cubersio/routes/user/settings/timer_settings_routes.py": {
        "timer_settings": {
            "name": "timer_settings",
            "location": 26,
            "return": [
                "int",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/cubersio/routes/user/settings/wca_settings_routes.py": {
        "wca_settings": {
            "name": "wca_settings",
            "location": 20,
            "return": [
                "int",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/cubersio/routes/user/settings/__init__.py": {
        "__determine_disabled_settings": {
            "name": "__determine_disabled_settings",
            "location": 16,
            "return": [
                "list"
            ],
            "arguments": {
                "all_settings": [
                    "bool"
                ]
            }
        },
        "__handle_get": {
            "name": "__handle_get",
            "location": 33,
            "return": [
                "Mapping[str, Any]",
                "Dict[str, Any]",
                "Dict[str, str]",
                "str",
                "dict",
                "set"
            ],
            "arguments": {
                "user": [
                    "str",
                    "Dict",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]",
                    "Mapping[str,Any]",
                    "None",
                    "Mapping"
                ],
                "settings_list": [
                    "str",
                    "Dict",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]",
                    "Mapping[str,Any]",
                    "None",
                    "Mapping"
                ],
                "template_path": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "save_settings": {
            "name": "save_settings",
            "location": 46,
            "return": [
                "Tuple[Text]",
                "str",
                "List[Dict[str,Any]]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "toggle_settings": {
            "name": "toggle_settings",
            "location": 55,
            "return": [
                "Tuple[Text]",
                "str",
                "List[Dict[str,Any]]",
                "List[str]"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/cubersio/tasks/competition_management.py": {
        "run_weekly_site_rankings": {
            "name": "run_weekly_site_rankings",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_user_site_rankings": {
            "name": "run_user_site_rankings",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "wrap_weekly_competition": {
            "name": "wrap_weekly_competition",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "post_results_thread_task": {
            "name": "post_results_thread_task",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "comp_id": [
                    "str",
                    "bool",
                    "List[int]",
                    "int"
                ],
                "is_rerun": [
                    "bool",
                    "str",
                    "List[int]",
                    "int"
                ]
            }
        },
        "generate_new_competition_task": {
            "name": "generate_new_competition_task",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "update_pbs": {
            "name": "update_pbs",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/cubersio/tasks/gift_code_management.py": {
        "check_gift_code_pool": {
            "name": "check_gift_code_pool",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "send_gift_code_winner_approval_pm": {
            "name": "send_gift_code_winner_approval_pm",
            "location": 100,
            "return": [
                "app.models.Article",
                "None"
            ],
            "arguments": {
                "comp_id": [
                    "str",
                    "int",
                    "Tuple[Optional[str],str]",
                    "Tuple[Union[str,None,str]]"
                ]
            }
        },
        "send_gift_code_to_winner": {
            "name": "send_gift_code_to_winner",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "str"
                ],
                "gift_code_id": [
                    "str",
                    "int",
                    "None",
                    "Dict",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "comp_id": [
                    "str",
                    "int",
                    "None",
                    "Dict",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        }
    },
    "cubers.io-main/cubersio/tasks/reddit.py": {
        "naturally_join": {
            "name": "naturally_join",
            "location": 53,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "values": [
                    "str",
                    "int",
                    "List[str]",
                    "T",
                    "List[float]"
                ]
            }
        },
        "prepare_new_competition_notification": {
            "name": "prepare_new_competition_notification",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "comp_id": [
                    "Optional[Mapping[str,Any]]",
                    "Mapping",
                    "int",
                    "Optional[str]",
                    "None",
                    "str"
                ],
                "is_all_events": [
                    "bool"
                ]
            }
        },
        "send_competition_notification_pm": {
            "name": "send_competition_notification_pm",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "username": [
                    "int",
                    "Dict[str,str]",
                    "str",
                    "Dict",
                    "None",
                    "Optional[int]",
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]",
                    "Optional[str]"
                ],
                "message_body": [
                    "int",
                    "Dict[str,str]",
                    "str",
                    "Dict",
                    "None",
                    "Optional[int]",
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]",
                    "Optional[str]"
                ]
            }
        },
        "prepare_end_of_competition_info_notifications": {
            "name": "prepare_end_of_competition_info_notifications",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "comp_id": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "send_end_of_competition_message": {
            "name": "send_end_of_competition_message",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "user_id": [
                    "int"
                ],
                "comp_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "comp_title": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "cubers.io-main/cubersio/tasks/scramble_generation.py": {
        "check_scramble_pool": {
            "name": "check_scramble_pool",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "top_off_scramble_pool": {
            "name": "top_off_scramble_pool",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "top_off_info": [
                    "Dict"
                ]
            }
        }
    },
    "cubers.io-main/cubersio/tasks/__init__.py": {
        "__task_error_handler": {
            "name": "__task_error_handler",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "Callable",
                    "bool",
                    "Dict",
                    "Dict[str,Any]"
                ],
                "task": [
                    "Optional[List[Any]]",
                    "List[Any]",
                    "None"
                ],
                "exc": [
                    "Optional[List[Any]]",
                    "List[Any]",
                    "bool",
                    "None",
                    "int"
                ]
            }
        }
    },
    "cubers.io-main/cubersio/util/simplecrypt.py": {
        "encrypt": {
            "name": "encrypt",
            "location": 32,
            "return": [
                "bytes"
            ],
            "arguments": {
                "password": [
                    "Dict[str,str]",
                    "Optional[Exception]",
                    "str",
                    "Exception",
                    "Mapping",
                    "Optional[bool]",
                    "None",
                    "bool"
                ],
                "data": [
                    "int",
                    "bytes",
                    "bool"
                ]
            }
        },
        "decrypt": {
            "name": "decrypt",
            "location": 55,
            "return": [
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "password": [
                    "Dict[str,str]",
                    "Optional[Exception]",
                    "str",
                    "Exception",
                    "Mapping",
                    "Optional[bool]",
                    "None",
                    "bool"
                ],
                "data": [
                    "str",
                    "Dict"
                ]
            }
        },
        "_assert_not_unicode": {
            "name": "_assert_not_unicode",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "Dict",
                    "Dict[str,float]"
                ]
            }
        },
        "_assert_encrypt_length": {
            "name": "_assert_encrypt_length",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "Iterable[T]",
                    "Callable[[T], bool]",
                    "List[Dict[str, Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "_assert_decrypt_length": {
            "name": "_assert_decrypt_length",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "List[str]",
                    "T",
                    "dict",
                    "Sequence[str]",
                    "Optional[Any]"
                ],
                "version": [
                    "str",
                    "bytes",
                    "List[str]",
                    "T",
                    "dict",
                    "Sequence[str]",
                    "Optional[Any]"
                ]
            }
        },
        "_assert_header_prefix": {
            "name": "_assert_header_prefix",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "Iterable",
                    "type",
                    "dict"
                ]
            }
        },
        "_assert_header_version": {
            "name": "_assert_header_version",
            "location": 108,
            "return": [
                "int"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "_assert_hmac": {
            "name": "_assert_hmac",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "hmac": [
                    "str"
                ],
                "hmac2": [
                    "str"
                ]
            }
        },
        "_pbkdf2": {
            "name": "_pbkdf2",
            "location": 124,
            "return": [
                "PBKDF2",
                "Optional[str]",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "password": [
                    "int",
                    "float",
                    "List[int]",
                    "None",
                    "Union[None,float,int]",
                    "Optional[int]"
                ],
                "salt": [
                    "int",
                    "float",
                    "List[int]",
                    "None",
                    "Union[None,float,int]",
                    "Optional[int]"
                ],
                "n_bytes": [
                    "int",
                    "float",
                    "List[int]",
                    "None",
                    "Union[None,float,int]",
                    "Optional[int]"
                ],
                "count": [
                    "int",
                    "float",
                    "List[int]",
                    "None",
                    "Union[None,float,int]",
                    "Optional[int]"
                ]
            }
        },
        "_expand_keys": {
            "name": "_expand_keys",
            "location": 129,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "password": [
                    "int",
                    "str",
                    "bytes",
                    "Union[str,bytes]"
                ],
                "salt": [
                    "int",
                    "str",
                    "bytes",
                    "Union[str,bytes]"
                ],
                "expansion_count": [
                    "int",
                    "str",
                    "bytes",
                    "Union[str,bytes]"
                ]
            }
        },
        "_hide": {
            "name": "_hide",
            "location": 138,
            "return": [
                "bytearray"
            ],
            "arguments": {
                "ranbytes": [
                    "bool",
                    "int",
                    "str",
                    "bytes",
                    "Union[bytes, bytearray]"
                ]
            }
        },
        "_random_bytes": {
            "name": "_random_bytes",
            "location": 144,
            "return": [
                "bytearray"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "_hmac": {
            "name": "_hmac",
            "location": 147,
            "return": [
                "bool",
                "bytes"
            ],
            "arguments": {
                "key": [
                    "bytes",
                    "str",
                    "int",
                    "float"
                ],
                "data": [
                    "bytes",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "_str_to_bytes": {
            "name": "_str_to_bytes",
            "location": 150,
            "return": [
                "str",
                "Callable",
                "int",
                "bytes",
                "Iterable",
                "Type",
                "u_type"
            ],
            "arguments": {
                "data": [
                    "int",
                    "bytes",
                    "Iterable",
                    "Type",
                    "Dict"
                ]
            }
        }
    },
    "cubers.io-main/cubersio/util/sorting.py": {
        "sort_personal_best_records": {
            "name": "sort_personal_best_records",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "pb1": [
                    "int",
                    "Callable",
                    "str",
                    "models.Question"
                ],
                "pb2": [
                    "int",
                    "Callable",
                    "str",
                    "models.Question"
                ]
            }
        },
        "__sort_user_event_results_by_result": {
            "name": "__sort_user_event_results_by_result",
            "location": 30,
            "return": [
                "int",
                "bool",
                "Callable",
                "List[dict]",
                "str"
            ],
            "arguments": {
                "result1": [
                    "Iterable[Any]",
                    "Sequence[Any]",
                    "Dict"
                ],
                "result2": [
                    "Iterable[Any]",
                    "Sequence[Any]",
                    "Dict"
                ]
            }
        },
        "__sort_user_event_results_by_single": {
            "name": "__sort_user_event_results_by_single",
            "location": 48,
            "return": [
                "int",
                "bool",
                "List[dict]"
            ],
            "arguments": {
                "result1": [
                    "Iterable[Iterable[str]]",
                    "bool",
                    "Dict",
                    "dep_check.models.Rules"
                ],
                "result2": [
                    "Iterable[Iterable[str]]",
                    "bool",
                    "Dict",
                    "dep_check.models.Rules"
                ]
            }
        },
        "sort_user_results_with_rankings": {
            "name": "sort_user_results_with_rankings",
            "location": 65,
            "return": [
                "List[Tuple[(Any, str, Any)]]"
            ],
            "arguments": {
                "results": [
                    "bytes",
                    "List",
                    "str",
                    "Set[str]",
                    "Dict[str,set[int]]",
                    "Dict",
                    "Dict[str,Set[int]]",
                    "Pattern[str]"
                ],
                "event_format": [
                    "str"
                ]
            }
        }
    },
    "cubers.io-main/cubersio/util/template.py": {
        "link_to_algcubingnet": {
            "name": "link_to_algcubingnet",
            "location": 14,
            "return": [
                "Dict[str, str]",
                "Dict[str, Tuple[Any, Any]]",
                "Exception",
                "int",
                "Optional[Dict[str, Any]]",
                "dict"
            ],
            "arguments": {}
        },
        "slugify_filter": {
            "name": "slugify_filter",
            "location": 38,
            "return": [
                "int",
                "str",
                "Dict[str, int]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "List[str]",
                    "int",
                    "bytes",
                    "Callable[[object],Any]",
                    "Callable[object,Any]"
                ]
            }
        },
        "format_datetime": {
            "name": "format_datetime",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "bytes",
                    "str",
                    "Date"
                ]
            }
        },
        "friendly_time": {
            "name": "friendly_time",
            "location": 52,
            "return": [
                "int",
                "Text",
                "bool",
                "float",
                "str",
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "format_fmc_result": {
            "name": "format_fmc_result",
            "location": 66,
            "return": [
                "bool",
                "Text",
                "Tuple[str]",
                "str",
                "Optional[str]",
                "int",
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "format_mbld_result": {
            "name": "format_mbld_result",
            "location": 84,
            "return": [
                "str",
                "Text",
                "Tuple[Tuple[int,...]]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "float",
                    "bool",
                    "bytes",
                    "Union[int,float]"
                ]
            }
        },
        "link_to_algcubingnet.__link_to_algcubingnet": {
            "name": "__link_to_algcubingnet",
            "location": 17,
            "return": [
                "str",
                "Tuple[Tuple[int,...]]"
            ],
            "arguments": {
                "setup": [
                    "str",
                    "bool",
                    "Tuple[bytes]",
                    "float",
                    "IO[Any]"
                ],
                "alg": [
                    "str",
                    "bool",
                    "Tuple[bytes]",
                    "float",
                    "IO[Any]"
                ],
                "moves_count": [
                    "str",
                    "Callable",
                    "Optional[str]"
                ]
            }
        }
    },
    "cubers.io-main/cubersio/util/times.py": {
        "convert_centiseconds_to_friendly_time": {
            "name": "convert_centiseconds_to_friendly_time",
            "location": 4,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "centiseconds": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "cubers.io-main/cubersio/util/__init__.py": {},
    "cubers.io-main/cubersio/util/events/mbld.py": {
        "MbldSolve.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "coded_value": [
                    "int",
                    "float",
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "MbldSolve.__str__": {
            "name": "__str__",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cubers.io-main/cubersio/util/events/resources.py": {
        "sort_comp_events_by_global_sort_order": {
            "name": "sort_comp_events_by_global_sort_order",
            "location": 233,
            "return": [
                "list"
            ],
            "arguments": {
                "comp_events": [
                    "Dict",
                    "List[dict]"
                ]
            }
        },
        "sort_events_by_global_sort_order": {
            "name": "sort_events_by_global_sort_order",
            "location": 248,
            "return": [
                "list"
            ],
            "arguments": {
                "events": [
                    "Dict[str,Any]",
                    "edp.journal.Event"
                ]
            }
        },
        "get_bonus_events_rotation_starting_at": {
            "name": "get_bonus_events_rotation_starting_at",
            "location": 263,
            "return": [
                "List[Union[(BonusEventDefinition, WCAEventDefinition, WeeklyEventDefinition)]]"
            ],
            "arguments": {
                "starting_index": [
                    "int"
                ],
                "count": [
                    "int"
                ]
            }
        },
        "get_bonus_events_without_current": {
            "name": "get_bonus_events_without_current",
            "location": 272,
            "return": [
                "List[Union[(BonusEventDefinition, WCAEventDefinition, WeeklyEventDefinition)]]"
            ],
            "arguments": {
                "bonus_events": [
                    "List[Event]",
                    "bool",
                    "django.db.models.query.QuerySet",
                    "protoactor.persistence.messages.PersistedEvent"
                ]
            }
        },
        "get_event_definition_for_name": {
            "name": "get_event_definition_for_name",
            "location": 278,
            "return": [
                "Optional[Union[(BonusEventDefinition, WCAEventDefinition, WeeklyEventDefinition)]]"
            ],
            "arguments": {
                "event_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "EventDefinition.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Sequence[Any]]",
                    "Sequence[Any]"
                ],
                "scramble_func": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "None",
                    "Optional[zerver.models.Stream]",
                    "Container[str]",
                    "Container"
                ],
                "num_scrambles": [
                    "int",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "is_weekly": [
                    "bool",
                    "Optional[str]",
                    "Optional[zerver.models.Stream]",
                    "Container[str]"
                ],
                "is_wca": [
                    "bool",
                    "Optional[str]",
                    "Optional[zerver.models.Stream]",
                    "Container[str]"
                ],
                "is_rotating": [
                    "bool",
                    "Optional[str]",
                    "Optional[zerver.models.Stream]",
                    "Container[str]"
                ]
            }
        },
        "EventDefinition.get_scramble": {
            "name": "get_scramble",
            "location": 29,
            "return": [
                "str",
                "bool",
                "Callable[[KT], VT]",
                "Callable",
                "Sequence",
                "Mapping"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventDefinition.get_multiple_scrambles": {
            "name": "get_multiple_scrambles",
            "location": 33,
            "return": [
                "str",
                "bool",
                "Callable[[KT], VT]",
                "Callable",
                "Sequence",
                "Mapping"
            ],
            "arguments": {
                "self": []
            }
        },
        "WCAEventDefinition.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Callable",
                    "Optional[str]",
                    "None"
                ],
                "scramble_func": [
                    "str",
                    "Callable",
                    "Optional[str]",
                    "None"
                ],
                "num_scrambles": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "WeeklyEventDefinition.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict",
                    "None",
                    "int",
                    "Optional[str]",
                    "bool",
                    "Iterable[str]"
                ],
                "scramble_func": [
                    "str",
                    "Dict",
                    "None",
                    "int",
                    "Optional[str]",
                    "bool",
                    "Iterable[str]"
                ],
                "num_scrambles": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Dict",
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "BonusEventDefinition.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Dict",
                    "str",
                    "int",
                    "None",
                    "Iterable[str]",
                    "Optional[str]",
                    "bool"
                ],
                "scramble_func": [
                    "Dict",
                    "str",
                    "int",
                    "None",
                    "Iterable[str]",
                    "Optional[str]",
                    "bool"
                ],
                "num_scrambles": [
                    "int",
                    "Dict",
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "bool"
                ]
            }
        }
    },
    "cubers.io-main/cubersio/util/events/__init__.py": {},
    "cubers.io-main/cubersio/util/events/scramblers/coll.py": {
        "get_coll_scramble": {
            "name": "get_coll_scramble",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {
                "coll": [
                    "str"
                ]
            }
        },
        "__build_scramble": {
            "name": "__build_scramble",
            "location": 24,
            "return": [
                "int",
                "List[str]",
                "dict",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "coll": [
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "__inverse_scramble": {
            "name": "__inverse_scramble",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "int",
                    "Dict"
                ]
            }
        }
    },
    "cubers.io-main/cubersio/util/events/scramblers/internal.py": {
        "mbld_scrambler": {
            "name": "mbld_scrambler",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "attack_scrambler": {
            "name": "attack_scrambler",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "redi_scrambler": {
            "name": "redi_scrambler",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "total_faces": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "fifteen_puzzle_scrambler": {
            "name": "fifteen_puzzle_scrambler",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "fmc_scrambler": {
            "name": "fmc_scrambler",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "does_fmc_scramble_have_cancellations": {
            "name": "does_fmc_scramble_have_cancellations",
            "location": 81,
            "return": [
                "bool"
            ],
            "arguments": {
                "scramble": [
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "scrambler_234_relay": {
            "name": "scrambler_234_relay",
            "location": 113,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "scrambler_333_relay": {
            "name": "scrambler_333_relay",
            "location": 123,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/cubersio/util/events/scramblers/sliding_tile.py": {
        "get_random_moves_scramble": {
            "name": "get_random_moves_scramble",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "n": [
                    "int",
                    "Optional[int]"
                ],
                "total_moves": [
                    "int"
                ]
            }
        },
        "get_random_state_scramble": {
            "name": "get_random_state_scramble",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "n": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "__get_move_between": {
            "name": "__get_move_between",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {
                "state1": [
                    "str",
                    "int",
                    "Dict[str,int]",
                    "List[int]",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]"
                ],
                "state2": [
                    "str",
                    "List[int]",
                    "int",
                    "Tuple[Union[int,int]]",
                    "Dict[str,int]",
                    "Tuple[int,int]"
                ]
            }
        },
        "__convert_steps_to_scramble": {
            "name": "__convert_steps_to_scramble",
            "location": 120,
            "return": [
                "str"
            ],
            "arguments": {
                "steps": [
                    "str",
                    "float",
                    "Match",
                    "List[Optional[float]]"
                ]
            }
        },
        "__count_inversions": {
            "name": "__count_inversions",
            "location": 140,
            "return": [
                "int"
            ],
            "arguments": {
                "puzzle": [
                    "int",
                    "str"
                ],
                "solved": [
                    "int"
                ],
                "size": [
                    "int"
                ]
            }
        },
        "__is_solvable": {
            "name": "__is_solvable",
            "location": 158,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "puzzle": [
                    "str",
                    "int"
                ],
                "solved": [
                    "str",
                    "int"
                ],
                "size": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "__manhattan_distance": {
            "name": "__manhattan_distance",
            "location": 176,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "candidate": [
                    "int"
                ],
                "solved": [
                    "int"
                ],
                "size": [
                    "int"
                ]
            }
        },
        "__linear_conflicts": {
            "name": "__linear_conflicts",
            "location": 191,
            "return": [
                "str",
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "candidate": [
                    "int",
                    "Sequence[T]",
                    "Collection[int]",
                    "Dict",
                    "Collection",
                    "List"
                ],
                "solved": [
                    "int",
                    "Sequence[T]",
                    "Collection[int]",
                    "Dict",
                    "Collection",
                    "List"
                ],
                "size": [
                    "int",
                    "List[int]",
                    "Sequence[Mapping[str,Any]]",
                    "str",
                    "Sequence[Mapping]",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "__smart_reduce": {
            "name": "__smart_reduce",
            "location": 239,
            "return": [
                "Union[(int, str)]"
            ],
            "arguments": {
                "grouping": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "__clone_and_swap": {
            "name": "__clone_and_swap",
            "location": 246,
            "return": [
                "tuple"
            ],
            "arguments": {
                "data": [
                    "Dict",
                    "List[List[Any]]",
                    "List[list[Any]]",
                    "Union[Dict,List]",
                    "List"
                ],
                "ix1": [
                    "int",
                    "bool",
                    "str"
                ],
                "ix2": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "__possible_moves": {
            "name": "__possible_moves",
            "location": 254,
            "return": [
                "List[tuple]"
            ],
            "arguments": {
                "puzzle": [
                    "int"
                ],
                "size": [
                    "int",
                    "bytes"
                ]
            }
        },
        "__ida_star_search": {
            "name": "__ida_star_search",
            "location": 279,
            "return": [
                "Optional[Union[(collections.deque, List[nothing])]]"
            ],
            "arguments": {
                "puzzle": [
                    "int",
                    "str",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ],
                "solved": [
                    "int",
                    "Iterable[Union[int,str]]",
                    "bool",
                    "Iterable[str]"
                ],
                "size": [
                    "int",
                    "Iterable[Union[int,str]]",
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "get_random_moves_scramble.__get_possible_moves": {
            "name": "__get_possible_moves",
            "location": 31,
            "return": [
                "List[Text]",
                "str",
                "bool"
            ],
            "arguments": {
                "m": [
                    "int",
                    "List[int]"
                ],
                "x": [
                    "int",
                    "Tuple[float, float, float, float]",
                    "Sequence[T]",
                    "float"
                ],
                "y": [
                    "int",
                    "List[float]",
                    "float"
                ],
                "previous_move": [
                    "str",
                    "int",
                    "Dict[int, Tuple[int, int]]"
                ]
            }
        },
        "__linear_conflicts.__count_conflicts": {
            "name": "__count_conflicts",
            "location": 199,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "candidate_row": [
                    "int",
                    "List[int]"
                ],
                "solved_row": [
                    "int"
                ],
                "i_size": [
                    "int",
                    "float",
                    "Tuple[int]",
                    "bool"
                ],
                "ans": [
                    "int"
                ]
            }
        },
        "__ida_star_search.__search": {
            "name": "__search",
            "location": 284,
            "return": [
                "Tuple",
                "str",
                "Tuple[bool]",
                "bytes",
                "int",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Sequence[str]"
                ],
                "g": [
                    "int",
                    "Iterable[Union[Any, int]]",
                    "Optional[Union[Any, Any]]"
                ],
                "bound": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "evaluated": [
                    "str",
                    "Set[str]",
                    "Pattern"
                ]
            }
        }
    },
    "cubers.io-main/cubersio/util/events/scramblers/__init__.py": {},
    "cubers.io-main/migrations/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online.process_revision_directives": {
            "name": "process_revision_directives",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "bool",
                    "List[str]",
                    "int"
                ],
                "revision": [
                    "bool",
                    "List[str]",
                    "int"
                ],
                "directives": [
                    "Callable[[Mapping], T]",
                    "list",
                    "List[List[str]]",
                    "int",
                    "str",
                    "tuple"
                ]
            }
        }
    },
    "cubers.io-main/migrations/versions/001_011ec2822d26.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/002_ed46ff56f083_add_reddit_id_to_usereventresults.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/003_0a0980f7b6eb_add_comp_generation_resources_and_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/004_255c01bd1e49_add_results_thread_id_to_comp_model_and_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/005_a929c366aeef_change_comp_gen_resources_to_not_use_fks.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/006_aabbccddeeff_add_new_events.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/007_285503dad691_add_is_complete_and_result_field_to_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/008_5967a351c5f3_added_times_string_utility_field_to_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/009_71ad7fd5fb3a_added_a_few_indexs_to_commonly_queried_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/010_f4a53c1272e5_added_user_id_and_comp_id_to_blacklist_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/011_94c29a81f73a_removed_comp_event_id_from_blacklist_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/012_e3e42c7b6077_added_pb_flags_to_usereventresults.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/013_4519159d3019_adding_usersiterankings_model.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/014_dd535b1f37a1_add_admin_flag_to_user.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/015_3371f5156029_remove_blacklist_table_and_add_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/016_feb771f719c7_remove_usersiterankings_competition_fk_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/017_a55e8b8d40ca_added_sum_of_ranks_int_columns_to_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/018_efa99b5579e6_add_user_preferences.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/019_cf7c80b82dfd_add_gold_silver_bronze_medal_flags_to_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/020_c92b137ff8be_added_scramblepool_model.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/021_b2855e6c4438_scramblepool_only_has_raw_scramble.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/022_b466c9da106b_add_title_override_and_all_events_flag_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/023_d760c7a84ba3_add_weekly_metrics_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/024_c92d221771c4_add_bot_hit_count_to_metrics.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/025_ababcdcdefef_add_8x8_9x9.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/026_347361bd5358_added_weeklyblacklist_and_results_mod_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/027_acac00000000_add_mbld.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/028_adad00000000_update_fmc_bo3.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/030_aaaa0000ffff_add_event_descriptions.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/031_01c4eb2444b9_add_dnf_due_to_inspection_flag_to_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/032_bbeebbee1234_add_dino_cube.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/033_bbeebbee2345_add_223.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/034_bbeebbee3456_add_descs_for_recent_events.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/035_e74ccd606cdc_add_fmc_explanation.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/036_020203030404_add_fmc_event_description.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/037_2c5f898d5dd7_add_kinchranks.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/038_66f166a908a4_add_non_wca_only_kinchrank.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/039_5de7c9b4e68c_add_unique_constraint_to_solve_for_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/040_2b57bbba58cb_add_wca_to_user_model.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/041_0a8384c69050_remove_unused_results_moderator_user_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/042_9a8860e9294c_remove_weekly_blacklist.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/043_555566667777_update_mirror_blocks_event_desc.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/044_503d27d0a21a_update_dino_cube_and_fmc_events.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/045_74b025612a81_add_weekly_gift_code_confirmation_data_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/046_05923bad79cf_add_fifteen_puzzle.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/047_bdeb38c37fg1_add_desc_to_15_puzzle.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/048_9203bd471dg0_fix_15_puzzle_desc.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/049_9036ae93bb1c_make_15_puzzle_ao5.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/050_050050fe0fe0_add_fto_event.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/051_94da0303ef1f_add_rex_event.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/052_3a12bgd0012c_add_10x10.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/053_01d403b3c85d_add_latest_pb_flags_to_results.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/migrations/versions/archive/029_SKIPPED_50644721ac4e_lengthen_desc.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/tst/test_queue_config.py": {
        "test_devo_huey_uses_sqlite": {
            "name": "test_devo_huey_uses_sqlite",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_devo_huey_raises_runtime_if_no_peewee": {
            "name": "test_devo_huey_raises_runtime_if_no_peewee",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_prod_huey_uses_redis": {
            "name": "test_prod_huey_uses_redis",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/tst/__init__.py": {},
    "cubers.io-main/tst/tasks/test_scramble_generation.py": {
        "_setup_mock": {
            "name": "_setup_mock",
            "location": 16,
            "return": [
                "unittest.mock.Mock"
            ],
            "arguments": {}
        },
        "test_check_scramble_pool": {
            "name": "test_check_scramble_pool",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_top_off_scramble_pool": [
                    "unittesmock.Mock",
                    "mock.Mock"
                ],
                "mock_get_all_events": [
                    "mock.MagicMock",
                    "unittesmock.Mock"
                ]
            }
        },
        "test_top_off_scramble_pool_multi_scramble_puzzles": {
            "name": "test_top_off_scramble_pool_multi_scramble_puzzles",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_get_event_definition_for_name": [
                    "str"
                ],
                "mock_add_scramble_to_scramble_pool": [
                    "int",
                    "Type[Any]"
                ],
                "top_off_info": [
                    "mock.Mock"
                ]
            }
        },
        "test_top_off_scramble_pool_single_scramble_puzzles": {
            "name": "test_top_off_scramble_pool_single_scramble_puzzles",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_get_event_definition_for_name": [
                    "str"
                ],
                "mock_add_scramble_to_scramble_pool": [
                    "int",
                    "Type[Any]"
                ]
            }
        },
        "test_top_off_scramble_pool_raises_for_nonexistent_event": {
            "name": "test_top_off_scramble_pool_raises_for_nonexistent_event",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_get_event_definition_for_name": [
                    "mock.Mock"
                ]
            }
        }
    },
    "cubers.io-main/tst/tasks/__init__.py": {},
    "cubers.io-main/tst/util/test_sorting.py": {
        "test_sort_personal_best_records": {
            "name": "test_sort_personal_best_records",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "unsorted_pbs": [
                    "str"
                ]
            }
        },
        "test_sort_user_event_results_by_result": {
            "name": "test_sort_user_event_results_by_result",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "unsorted_results": [
                    "str",
                    "Dict",
                    "List[str]"
                ]
            }
        },
        "test_sort_user_event_results_by_single": {
            "name": "test_sort_user_event_results_by_single",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "unsorted_results": [
                    "Dict",
                    "List[str]",
                    "str"
                ]
            }
        },
        "test_sort_user_results_with_rankings_best_of_format": {
            "name": "test_sort_user_results_with_rankings_best_of_format",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "event_format": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_sort_user_results_with_rankings_mean_average_formats": {
            "name": "test_sort_user_results_with_rankings_mean_average_formats",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "event_format": [
                    "str"
                ]
            }
        }
    },
    "cubers.io-main/tst/util/test_template.py": {
        "test_link_to_algcubingnet_no_solution": {
            "name": "test_link_to_algcubingnet_no_solution",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "setup": [
                    "int",
                    "str"
                ],
                "alg": [
                    "int",
                    "str"
                ],
                "moves_count": [
                    "int",
                    "str"
                ]
            }
        },
        "test_link_to_algcubingnet": {
            "name": "test_link_to_algcubingnet",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_slugify": {
            "name": "test_slugify",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "input_value": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "None"
                ],
                "expected_slug": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_format_datetime": {
            "name": "test_format_datetime",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_friendly_time": {
            "name": "test_friendly_time",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "input_value": [
                    "List[int]",
                    "int",
                    "Tuple[int]",
                    "datetime.datetime"
                ],
                "expected_friendly_time": [
                    "List[int]",
                    "int",
                    "Tuple[int]",
                    "datetime.datetime"
                ]
            }
        },
        "test_format_fmc_result": {
            "name": "test_format_fmc_result",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "input_value": [
                    "bool",
                    "str",
                    "float",
                    "int"
                ],
                "expected_formatted_result": [
                    "bool",
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "test_format_mbld_result": {
            "name": "test_format_mbld_result",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "input_value": [
                    "bool",
                    "str",
                    "float",
                    "int"
                ],
                "expected_formatted_result": [
                    "bool",
                    "str",
                    "float",
                    "int"
                ]
            }
        }
    },
    "cubers.io-main/tst/util/test_times.py": {
        "test_convert_centiseconds_to_friendly_time": {
            "name": "test_convert_centiseconds_to_friendly_time",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "input_value": [
                    "str",
                    "float",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "expected_friendly_time": [
                    "str",
                    "float",
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        }
    },
    "cubers.io-main/tst/util/__init__.py": {},
    "cubers.io-main/tst/util/events/test_mbld.py": {
        "__build_coded_result": {
            "name": "__build_coded_result",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "successful": [
                    "int",
                    "str",
                    "Callable[[Any],None]",
                    "Optional[Pattern[str]]",
                    "Type",
                    "Union[str,List[Any]]",
                    "Union[str,Iterable[str]]"
                ],
                "attempted": [
                    "int",
                    "str",
                    "Callable[[Any],None]",
                    "Optional[Pattern[str]]",
                    "Type",
                    "Union[str,List[Any]]",
                    "Union[str,Iterable[str]]"
                ],
                "time_seconds": [
                    "int",
                    "Union[str, int]",
                    "Optional[int]"
                ]
            }
        },
        "test_mbld_solve_parses_correct_attempted": {
            "name": "test_mbld_solve_parses_correct_attempted",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "coded_value": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "expected_attempted": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_mbld_solve_parses_correct_successful": {
            "name": "test_mbld_solve_parses_correct_successful",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "coded_value": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "expected_successful": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_mbld_solve_calculates_correct_points": {
            "name": "test_mbld_solve_calculates_correct_points",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "coded_value": [
                    "float",
                    "str",
                    "List[str]"
                ],
                "expected_fractional_hour_remaining": [
                    "float",
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_mbld_solve_str": {
            "name": "test_mbld_solve_str",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int"
                ]
            }
        },
        "test_mbld_dnf": {
            "name": "test_mbld_dnf",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mbld_dnf_has_points_and_sort_value": {
            "name": "test_mbld_dnf_has_points_and_sort_value",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/tst/util/events/test_resources.py": {
        "__build_mock_comp_event": {
            "name": "__build_mock_comp_event",
            "location": 15,
            "return": [
                "unittest.mock.Mock"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Dict",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_sort_comp_events_by_global_sort_order": {
            "name": "test_sort_comp_events_by_global_sort_order",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sort_events_by_global_sort_order": {
            "name": "test_sort_events_by_global_sort_order",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_bonus_events_rotation_starting_at_correct_starting_index": {
            "name": "test_get_bonus_events_rotation_starting_at_correct_starting_index",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "starting_index": []
            }
        },
        "test_get_bonus_events_rotation_starting_at_wraps_around": {
            "name": "test_get_bonus_events_rotation_starting_at_wraps_around",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_bonus_events_without_current": {
            "name": "test_get_bonus_events_without_current",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_event_definition_for_name": {
            "name": "test_get_event_definition_for_name",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "event_name": [
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "None",
                    "Optional[int]",
                    "Optional[Dict[str,Any]]"
                ],
                "expected_event_definition": [
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "None",
                    "Optional[int]",
                    "Optional[Dict[str,Any]]"
                ]
            }
        },
        "test_event_definition_get_scramble": {
            "name": "test_event_definition_get_scramble",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/tst/util/events/__init__.py": {},
    "cubers.io-main/tst/util/events/scramblers/test_coll.py": {
        "mocked_build_scramble": {
            "name": "mocked_build_scramble",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "mocker": [
                    "Mapping[str, Any]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_get_coll_scramble_uses_generated_scramble": {
            "name": "test_get_coll_scramble_uses_generated_scramble",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "mocked_build_scramble": []
            }
        },
        "test_get_coll_scramble_has_links": {
            "name": "test_get_coll_scramble_has_links",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubers.io-main/tst/util/events/scramblers/test_internal.py": {
        "mock_cube_scramblers": {
            "name": "mock_cube_scramblers",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "util.XYZ",
                    "int",
                    "bool",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_internal_scramblers_return_string": {
            "name": "test_internal_scramblers_return_string",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "scramble_fn": []
            }
        },
        "test_relays_have_correct_numbers_of_parts": {
            "name": "test_relays_have_correct_numbers_of_parts",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "relay_fn": [
                    "int",
                    "Dict[str,str]",
                    "Tuple[Union[str,str]]",
                    "Tuple[str,str]",
                    "bool"
                ],
                "num_parts": [
                    "int",
                    "Dict[str,str]",
                    "Tuple[Union[str,str]]",
                    "Tuple[str,str]",
                    "bool"
                ]
            }
        },
        "test_333_relay_of_3": {
            "name": "test_333_relay_of_3",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_234_relay_of_3": {
            "name": "test_234_relay_of_3",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_redi_scrambler_rotations": {
            "name": "test_redi_scrambler_rotations",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "num_faces": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_fmc_scrambler_calls_wca_333_scrambler": {
            "name": "test_fmc_scrambler_calls_wca_333_scrambler",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fmc_scrambler_pads_wca_scramble": {
            "name": "test_fmc_scrambler_pads_wca_scramble",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_does_fmc_scramble_have_cancellations": {
            "name": "test_does_fmc_scramble_have_cancellations",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "scramble": [
                    "str",
                    "int",
                    "Dict[str,Any]"
                ],
                "expected_result": [
                    "str",
                    "int",
                    "Dict[str,Any]"
                ]
            }
        },
        "test_fmc_scramblers_runs_until_no_cancellations": {
            "name": "test_fmc_scramblers_runs_until_no_cancellations",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int"
                ]
            }
        },
        "mock_15_scramblers": {
            "name": "mock_15_scramblers",
            "location": 124,
            "return": [
                "Tuple",
                "Dict[str,Any]",
                "float",
                "int",
                "Optional[Callable[...,Any]]"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_fifteen_puzzle_scrambler_calls_correct_impl": {
            "name": "test_fifteen_puzzle_scrambler_calls_correct_impl",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "is_devo": [
                    "Dict",
                    "Set"
                ],
                "random_state_calls": [
                    "int",
                    "float",
                    "Callable"
                ],
                "random_moves_calls": [
                    "Callable",
                    "float",
                    "int"
                ],
                "mock_15_scramblers": [],
                "mocker": [
                    "Dict",
                    "Set"
                ]
            }
        }
    },
    "cubers.io-main/tst/util/events/scramblers/test_sliding_tile.py": {
        "test_sliding_tile_scramblers_return_string": {
            "name": "test_sliding_tile_scramblers_return_string",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "scramble_fn": []
            }
        },
        "test_get_random_moves_scramble_returns_correct_number_of_moves": {
            "name": "test_get_random_moves_scramble_returns_correct_number_of_moves",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "num_moves": [
                    "int",
                    "float"
                ]
            }
        },
        "test_get_random_state_scramble_success": {
            "name": "test_get_random_state_scramble_success",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_get_random_state_scramble_no_solution": {
            "name": "test_get_random_state_scramble_no_solution",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int"
                ]
            }
        },
        "test_get_random_state_scramble_reshuffles_if_unsolvable": {
            "name": "test_get_random_state_scramble_reshuffles_if_unsolvable",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int"
                ]
            }
        },
        "test_get_move_between_raises_exc_if_multiple_tiles_swapped": {
            "name": "test_get_move_between_raises_exc_if_multiple_tiles_swapped",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ida_star_returns_empty_for_inf_search": {
            "name": "test_ida_star_returns_empty_for_inf_search",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Optional[str]",
                    "Optional[dict]",
                    "denite.util.UserContext",
                    "Optional[int]"
                ]
            }
        },
        "test_get_random_state_scramble_reshuffles_if_unsolvable.side_effect": {
            "name": "side_effect",
            "location": 96,
            "return": [
                "bool"
            ],
            "arguments": {
                "shuffled_state": [
                    "T"
                ],
                "_": [
                    "dict"
                ],
                "__": [
                    "dict"
                ]
            }
        }
    },
    "cubers.io-main/tst/util/events/scramblers/__init__.py": {}
}
{
    "cyoa-story-master/cyoa-backend/load_csv.py": {},
    "cyoa-story-master/cyoa-backend/manage.py": {},
    "cyoa-story-master/cyoa-backend/api/schema.py": {},
    "cyoa-story-master/cyoa-backend/api/utils.py": {
        "to_global_id": {
            "name": "to_global_id",
            "location": 6,
            "return": [
                "Type",
                "Dict[str, Any]",
                "dict",
                "str"
            ],
            "arguments": {
                "type_": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "id_": [
                    "str",
                    "int",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "from_global_id": {
            "name": "from_global_id",
            "location": 14,
            "return": [
                "GlobalID"
            ],
            "arguments": {
                "global_id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "cyoa-story-master/cyoa-backend/api/views.py": {
        "GraphQLView.get_context": {
            "name": "get_context",
            "location": 7,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "_T0"
                ]
            }
        }
    },
    "cyoa-story-master/cyoa-backend/api/__init__.py": {},
    "cyoa-story-master/cyoa-backend/api/loaders/author.py": {
        "AuthorLoaders.author": {
            "name": "author",
            "location": 9,
            "return": [
                "DataLoader",
                "str",
                "bool",
                "Optional[float]",
                "bytes",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cyoa-story-master/cyoa-backend/api/loaders/base.py": {},
    "cyoa-story-master/cyoa-backend/api/loaders/character.py": {
        "CharacterLoaders.character": {
            "name": "character",
            "location": 9,
            "return": [
                "DataLoader",
                "str",
                "bool",
                "Optional[float]",
                "bytes",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cyoa-story-master/cyoa-backend/api/loaders/choice.py": {
        "ChoiceLoaders.choice": {
            "name": "choice",
            "location": 9,
            "return": [
                "DataLoader",
                "str",
                "bool",
                "Optional[float]",
                "bytes",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChoiceLoaders.choice_from_frompassage": {
            "name": "choice_from_frompassage",
            "location": 14,
            "return": [
                "DataLoader",
                "Dict[str, Any]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChoiceLoaders.choice_from_topassage": {
            "name": "choice_from_topassage",
            "location": 19,
            "return": [
                "DataLoader",
                "Dict[str, Any]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cyoa-story-master/cyoa-backend/api/loaders/passage.py": {
        "PassageLoaders.passage": {
            "name": "passage",
            "location": 9,
            "return": [
                "DataLoader",
                "str",
                "bool",
                "Optional[float]",
                "bytes",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassageLoaders.passage_from_story": {
            "name": "passage_from_story",
            "location": 14,
            "return": [
                "DataLoader",
                "Dict[str, Any]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassageLoaders.passage_from_pov_character": {
            "name": "passage_from_pov_character",
            "location": 19,
            "return": [
                "DataLoader",
                "bool",
                "str",
                "cmk.utils.type_defs.AgentRawData",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cyoa-story-master/cyoa-backend/api/loaders/story.py": {
        "StoryLoaders.story": {
            "name": "story",
            "location": 9,
            "return": [
                "DataLoader",
                "str",
                "bool",
                "Optional[float]",
                "bytes",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryLoaders.stories_from_author": {
            "name": "stories_from_author",
            "location": 14,
            "return": [
                "DataLoader",
                "Dict[str, Any]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cyoa-story-master/cyoa-backend/api/loaders/util.py": {
        "get_bulk_lookup": {
            "name": "get_bulk_lookup",
            "location": 8,
            "return": [
                "int",
                "dict",
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "values": [
                    "str",
                    "list[dict[, ]]",
                    "int",
                    "list[]",
                    "Sequence[int]",
                    "bool",
                    "List[dict]",
                    "Optional[int]",
                    "list"
                ],
                "key_fn": [
                    "str"
                ],
                "many": [
                    "Dict[str, str]",
                    "bytes",
                    "dict[str, str]",
                    "dict",
                    "dict[, ]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "batch_values": {
            "name": "batch_values",
            "location": 20,
            "return": [
                "list[]",
                "str",
                "int",
                "tuple",
                "List[int]",
                "Callable[[Mapping], T]",
                "dict"
            ],
            "arguments": {
                "bulk_lookup": [
                    "dict[, ]",
                    "dict",
                    "list",
                    "List[str]",
                    "str",
                    "Exception",
                    "Union[str, List[str]]"
                ],
                "batched_keys": [
                    "dict[, ]",
                    "dict",
                    "list[]",
                    "str",
                    "list",
                    "list[str]",
                    "List[str]",
                    "Exception",
                    "Union[str, List[str]]"
                ],
                "many": [
                    "list[str]",
                    "Optional[List[str]]",
                    "int",
                    "str",
                    "None",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "batch_load_model_by_field": {
            "name": "batch_load_model_by_field",
            "location": 26,
            "return": [
                "Optional[str]",
                "str",
                "int",
                "Optional[float]"
            ],
            "arguments": {
                "app_name": [
                    "str",
                    "list[str]",
                    "List[str]",
                    "Iterable[str]"
                ],
                "model_name": [
                    "str",
                    "list[str]",
                    "List[str]",
                    "Iterable[str]"
                ],
                "field_name": [
                    "str",
                    "list[str]",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        },
        "batch_load_primary_key": {
            "name": "batch_load_primary_key",
            "location": 43,
            "return": [
                "bytes",
                "dict",
                "OrderedDict",
                "Dict[str, Any]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "app_name": [
                    "str",
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]"
                ],
                "model_name": [
                    "str",
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        },
        "batch_load_foreign_key": {
            "name": "batch_load_foreign_key",
            "location": 57,
            "return": [
                "str",
                "Callable[[Any], bool]",
                "dict"
            ],
            "arguments": {
                "app_name": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "None"
                ],
                "model_name": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "None"
                ],
                "foreign_key_name": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "None"
                ]
            }
        },
        "batch_load_model_by_field.get_values": {
            "name": "get_values",
            "location": 31,
            "return": [
                "int",
                "dict"
            ],
            "arguments": {
                "batched_keys": [
                    "str",
                    "Mapping",
                    "List[str]"
                ]
            }
        },
        "batch_load_model_by_field.get_batched_values": {
            "name": "get_batched_values",
            "location": 35,
            "return": [
                "Type[T]",
                "str",
                "dict",
                "Dict[Tuple[str, str], Tuple[float, float]]",
                "int",
                "bool"
            ],
            "arguments": {
                "batched_keys": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "int"
                ]
            }
        },
        "batch_load_primary_key.load": {
            "name": "load",
            "location": 45,
            "return": [],
            "arguments": {
                "primary_keys": []
            }
        },
        "batch_load_primary_key.batch_load_fn": {
            "name": "batch_load_fn",
            "location": 48,
            "return": [],
            "arguments": {
                "model_ids": []
            }
        },
        "batch_load_foreign_key.load": {
            "name": "load",
            "location": 60,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "foreign_keys": [
                    "str",
                    "bytes",
                    "AnyStr"
                ]
            }
        },
        "batch_load_foreign_key.batch_load_fn": {
            "name": "batch_load_fn",
            "location": 64,
            "return": [
                "Callable",
                "dict",
                "Tuple[str]"
            ],
            "arguments": {
                "model_ids": [
                    "str",
                    "Dict[int, int]",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "DataLoader.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataLoader.batch_load_fn": {
            "name": "batch_load_fn",
            "location": 84,
            "return": [
                "str",
                "Tuple[str, str]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "bytes",
                    "dict",
                    "typing.Mapping",
                    "None",
                    "Mapping",
                    "Optional[str]",
                    "T",
                    "int"
                ]
            }
        }
    },
    "cyoa-story-master/cyoa-backend/api/loaders/__init__.py": {},
    "cyoa-story-master/cyoa-backend/api/mutation/author.py": {
        "CreateAuthor.mutate_and_get_payload": {
            "name": "mutate_and_get_payload",
            "location": 19,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[int]",
                    "list[int]",
                    "dict",
                    "dict[, ]"
                ],
                "root": [
                    "typing.Iterable[bool]",
                    "graphene.ResolveInfo",
                    "Iterable[bool]",
                    "raiden.utils.Dict"
                ],
                "info": [
                    "typing.Iterable[bool]",
                    "graphene.ResolveInfo",
                    "Iterable[bool]",
                    "raiden.utils.Dict"
                ]
            }
        },
        "UpdateAuthor.mutate_and_get_payload": {
            "name": "mutate_and_get_payload",
            "location": 41,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[int]",
                    "list[int]",
                    "dict",
                    "dict[, ]"
                ],
                "root": [
                    "typing.Iterable[bool]",
                    "graphene.ResolveInfo",
                    "Iterable[bool]",
                    "raiden.utils.Dict"
                ],
                "info": [
                    "typing.Iterable[bool]",
                    "graphene.ResolveInfo",
                    "Iterable[bool]",
                    "raiden.utils.Dict"
                ]
            }
        }
    },
    "cyoa-story-master/cyoa-backend/api/mutation/base.py": {},
    "cyoa-story-master/cyoa-backend/api/mutation/character.py": {
        "CreateCharacter.mutate_and_get_payload": {
            "name": "mutate_and_get_payload",
            "location": 17,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[int]",
                    "list[int]",
                    "dict",
                    "dict[, ]"
                ],
                "root": [
                    "typing.Iterable[bool]",
                    "graphene.ResolveInfo",
                    "Iterable[bool]",
                    "raiden.utils.Dict"
                ],
                "info": [
                    "typing.Iterable[bool]",
                    "graphene.ResolveInfo",
                    "Iterable[bool]",
                    "raiden.utils.Dict"
                ]
            }
        },
        "UpdateCharacter.mutate_and_get_payload": {
            "name": "mutate_and_get_payload",
            "location": 35,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[int]",
                    "list[int]",
                    "dict",
                    "dict[, ]"
                ],
                "root": [
                    "typing.Iterable[bool]",
                    "graphene.ResolveInfo",
                    "Iterable[bool]",
                    "raiden.utils.Dict"
                ],
                "info": [
                    "typing.Iterable[bool]",
                    "graphene.ResolveInfo",
                    "Iterable[bool]",
                    "raiden.utils.Dict"
                ]
            }
        }
    },
    "cyoa-story-master/cyoa-backend/api/mutation/choice.py": {
        "CreateChoice.mutate_and_get_payload": {
            "name": "mutate_and_get_payload",
            "location": 20,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[str]",
                    "list[str]",
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "Optional[int]",
                    "None"
                ],
                "root": [
                    "typing.Iterable[bool]",
                    "graphene.ResolveInfo",
                    "Iterable[bool]",
                    "raiden.utils.Dict"
                ],
                "info": [
                    "typing.Iterable[bool]",
                    "graphene.ResolveInfo",
                    "Iterable[bool]",
                    "raiden.utils.Dict"
                ]
            }
        },
        "UpdateChoice.mutate_and_get_payload": {
            "name": "mutate_and_get_payload",
            "location": 44,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[str]",
                    "list[str]",
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "Optional[int]",
                    "None"
                ],
                "root": [
                    "typing.Iterable[bool]",
                    "graphene.ResolveInfo",
                    "Iterable[bool]",
                    "raiden.utils.Dict"
                ],
                "info": [
                    "typing.Iterable[bool]",
                    "graphene.ResolveInfo",
                    "Iterable[bool]",
                    "raiden.utils.Dict"
                ]
            }
        }
    },
    "cyoa-story-master/cyoa-backend/api/mutation/passage.py": {
        "CreatePassage.mutate_and_get_payload": {
            "name": "mutate_and_get_payload",
            "location": 21,
            "return": [
                "List[str]",
                "Callable",
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[int]",
                    "list[int]",
                    "dict",
                    "dict[, ]"
                ],
                "root": [
                    "typing.Iterable[bool]",
                    "graphene.ResolveInfo",
                    "Iterable[bool]",
                    "raiden.utils.Dict"
                ],
                "info": [
                    "typing.Iterable[bool]",
                    "graphene.ResolveInfo",
                    "Iterable[bool]",
                    "raiden.utils.Dict"
                ]
            }
        },
        "UpdatePassage.mutate_and_get_payload": {
            "name": "mutate_and_get_payload",
            "location": 47,
            "return": [
                "List[str]",
                "Callable",
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[int]",
                    "list[int]",
                    "dict",
                    "dict[, ]"
                ],
                "root": [
                    "typing.Iterable[bool]",
                    "graphene.ResolveInfo",
                    "Iterable[bool]",
                    "raiden.utils.Dict"
                ],
                "info": [
                    "typing.Iterable[bool]",
                    "graphene.ResolveInfo",
                    "Iterable[bool]",
                    "raiden.utils.Dict"
                ]
            }
        }
    },
    "cyoa-story-master/cyoa-backend/api/mutation/story.py": {
        "CreateStory.mutate_and_get_payload": {
            "name": "mutate_and_get_payload",
            "location": 21,
            "return": [
                "List[str]",
                "Callable",
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[int]",
                    "list[int]",
                    "dict",
                    "dict[, ]"
                ],
                "root": [
                    "typing.Iterable[bool]",
                    "graphene.ResolveInfo",
                    "Iterable[bool]",
                    "raiden.utils.Dict"
                ],
                "info": [
                    "typing.Iterable[bool]",
                    "graphene.ResolveInfo",
                    "Iterable[bool]",
                    "raiden.utils.Dict"
                ]
            }
        },
        "UpdateStory.mutate_and_get_payload": {
            "name": "mutate_and_get_payload",
            "location": 47,
            "return": [
                "List[str]",
                "Callable",
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[int]",
                    "list[int]",
                    "dict",
                    "dict[, ]"
                ],
                "root": [
                    "typing.Iterable[bool]",
                    "graphene.ResolveInfo",
                    "Iterable[bool]",
                    "raiden.utils.Dict"
                ],
                "info": [
                    "typing.Iterable[bool]",
                    "graphene.ResolveInfo",
                    "Iterable[bool]",
                    "raiden.utils.Dict"
                ]
            }
        }
    },
    "cyoa-story-master/cyoa-backend/api/mutation/__init__.py": {},
    "cyoa-story-master/cyoa-backend/api/query/author.py": {
        "AuthorType.resolve_stories": {
            "name": "resolve_stories",
            "location": 35,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "root": [
                    "typing.Type",
                    "graphene.ResolveInfo",
                    "story.models.Story",
                    "story.models.Author",
                    "Type"
                ],
                "info": [
                    "typing.Type",
                    "graphene.ResolveInfo",
                    "story.models.Story",
                    "story.models.Author",
                    "Type"
                ]
            }
        },
        "AuthorType.is_type_of": {
            "name": "is_type_of",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "graphene.ResolveInfo",
                    "list[]",
                    "list"
                ],
                "root": [
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "dict",
                    "dict[, ]",
                    "Set[str]",
                    "set[str]"
                ],
                "_": [
                    "str",
                    "graphene.ResolveInfo",
                    "list[]",
                    "list"
                ]
            }
        },
        "AuthorType.get_node": {
            "name": "get_node",
            "location": 43,
            "return": [
                "str",
                "List[str]",
                "Dict[str, Any]",
                "dict",
                "Mapping[str, Any]",
                "Iterable[str]",
                "Optional[Match]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "dict[str, object]",
                    "Dict[str, object]",
                    "list[L]",
                    "List[manager.models.language.Language]",
                    "bool"
                ],
                "info": [
                    "str",
                    "graphene.ResolveInfo"
                ],
                "id_": [
                    "str",
                    "graphene.ResolveInfo"
                ]
            }
        },
        "AuthorType.resolve_full_name": {
            "name": "resolve_full_name",
            "location": 47,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "root": [
                    "story.models.Author",
                    "str",
                    "django.db.models.Field"
                ],
                "info": [
                    "bool",
                    "graphene.ResolveInfo",
                    "typing.Callable[, ]",
                    "list[T]",
                    "Callable",
                    "List[T]"
                ],
                "display": [
                    "str",
                    "story.models.Author",
                    "django.db.models.Field"
                ]
            }
        }
    },
    "cyoa-story-master/cyoa-backend/api/query/base.py": {},
    "cyoa-story-master/cyoa-backend/api/query/character.py": {
        "CharacterType.resolve_in_passages": {
            "name": "resolve_in_passages",
            "location": 18,
            "return": [
                "bool",
                "str",
                "int",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "root": [
                    "list",
                    "list[]"
                ],
                "info": [
                    "list",
                    "list[]"
                ]
            }
        },
        "CharacterType.is_type_of": {
            "name": "is_type_of",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "graphene.ResolveInfo",
                    "list[]",
                    "list"
                ],
                "root": [
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "dict",
                    "dict[, ]",
                    "Set[str]",
                    "set[str]"
                ],
                "_": [
                    "str",
                    "graphene.ResolveInfo",
                    "list[]",
                    "list"
                ]
            }
        },
        "CharacterType.get_node": {
            "name": "get_node",
            "location": 26,
            "return": [
                "str",
                "List[str]",
                "Dict[str, Any]",
                "dict",
                "Mapping[str, Any]",
                "Iterable[str]",
                "Optional[Match]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "dict[str, object]",
                    "Dict[str, object]",
                    "list[L]",
                    "List[manager.models.language.Language]",
                    "bool"
                ],
                "info": [
                    "str",
                    "graphene.ResolveInfo"
                ],
                "id_": [
                    "str",
                    "graphene.ResolveInfo"
                ]
            }
        }
    },
    "cyoa-story-master/cyoa-backend/api/query/choice.py": {
        "ChoiceType.resolve_from_passage": {
            "name": "resolve_from_passage",
            "location": 21,
            "return": [
                "str",
                "bool",
                "Callable",
                "Dict[str, Any]"
            ],
            "arguments": {
                "root": [
                    "graphene.ResolveInfo",
                    "story.models.Choice",
                    "story.models.Story"
                ],
                "info": [
                    "graphene.ResolveInfo",
                    "story.models.Choice",
                    "story.models.Story"
                ]
            }
        },
        "ChoiceType.resolve_to_passage": {
            "name": "resolve_to_passage",
            "location": 25,
            "return": [
                "Dict[str, Any]",
                "Sequence",
                "str",
                "dict"
            ],
            "arguments": {
                "root": [
                    "graphene.ResolveInfo",
                    "story.models.Choice",
                    "story.models.Story"
                ],
                "info": [
                    "graphene.ResolveInfo",
                    "story.models.Choice",
                    "story.models.Story"
                ]
            }
        },
        "ChoiceType.is_type_of": {
            "name": "is_type_of",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "graphene.ResolveInfo",
                    "list[]",
                    "list"
                ],
                "root": [
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "dict",
                    "dict[, ]",
                    "Set[str]",
                    "set[str]"
                ],
                "_": [
                    "str",
                    "graphene.ResolveInfo",
                    "list[]",
                    "list"
                ]
            }
        },
        "ChoiceType.get_node": {
            "name": "get_node",
            "location": 33,
            "return": [
                "str",
                "List[str]",
                "Dict[str, Any]",
                "dict",
                "Mapping[str, Any]",
                "Iterable[str]",
                "Optional[Match]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "dict[str, object]",
                    "Dict[str, object]",
                    "list[manager.models.language.Language]",
                    "List[manager.models.language.Language]",
                    "bool"
                ],
                "info": [
                    "str",
                    "graphene.ResolveInfo"
                ],
                "id_": [
                    "str",
                    "graphene.ResolveInfo"
                ]
            }
        }
    },
    "cyoa-story-master/cyoa-backend/api/query/passage.py": {
        "PassageType.resolve_story": {
            "name": "resolve_story",
            "location": 23,
            "return": [
                "bool",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "root": [
                    "graphene.ResolveInfo",
                    "story.models.Story",
                    "story.models.Choice"
                ],
                "info": [
                    "graphene.ResolveInfo",
                    "story.models.Story",
                    "story.models.Choice"
                ]
            }
        },
        "PassageType.resolve_character": {
            "name": "resolve_character",
            "location": 27,
            "return": [
                "bool",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "root": [
                    "graphene.ResolveInfo",
                    "story.models.Story",
                    "story.models.Choice"
                ],
                "info": [
                    "graphene.ResolveInfo",
                    "story.models.Story",
                    "story.models.Choice"
                ]
            }
        },
        "PassageType.resolve_all_choices": {
            "name": "resolve_all_choices",
            "location": 31,
            "return": [
                "str",
                "bool",
                "OrderedDict"
            ],
            "arguments": {
                "root": [
                    "str",
                    "graphene.ResolveInfo",
                    "story.models.Story",
                    "story.models.Author",
                    "zerver.models.UserProfile"
                ],
                "info": [
                    "str",
                    "graphene.ResolveInfo",
                    "story.models.Story",
                    "story.models.Author",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "PassageType.is_type_of": {
            "name": "is_type_of",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "graphene.ResolveInfo",
                    "list[]",
                    "list"
                ],
                "root": [
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "dict",
                    "dict[, ]",
                    "Set[str]",
                    "set[str]"
                ],
                "_": [
                    "str",
                    "graphene.ResolveInfo",
                    "list[]",
                    "list"
                ]
            }
        },
        "PassageType.get_node": {
            "name": "get_node",
            "location": 39,
            "return": [
                "str",
                "List[str]",
                "Dict[str, Any]",
                "dict",
                "Mapping[str, Any]",
                "Iterable[str]",
                "Optional[Match]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "dict[str, object]",
                    "Dict[str, object]",
                    "list[L]",
                    "List[manager.models.language.Language]",
                    "bool"
                ],
                "info": [
                    "str",
                    "graphene.ResolveInfo"
                ],
                "id_": [
                    "str",
                    "graphene.ResolveInfo"
                ]
            }
        }
    },
    "cyoa-story-master/cyoa-backend/api/query/story.py": {
        "StoryType.resolve_author_name": {
            "name": "resolve_author_name",
            "location": 34,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "root": [
                    "str",
                    "story.models.Story",
                    "list[int]",
                    "List[int]"
                ],
                "info": [
                    "bool",
                    "graphene.ResolveInfo",
                    "typing.Callable[, ]",
                    "list[T]",
                    "Callable",
                    "List[T]"
                ],
                "display": [
                    "str",
                    "story.models.Story",
                    "list[int]",
                    "List[int]"
                ]
            }
        },
        "StoryType.resolve_author": {
            "name": "resolve_author",
            "location": 38,
            "return": [
                "bool",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "root": [
                    "graphene.ResolveInfo",
                    "story.models.Story",
                    "story.models.Choice"
                ],
                "info": [
                    "graphene.ResolveInfo",
                    "story.models.Story",
                    "story.models.Choice"
                ]
            }
        },
        "StoryType.resolve_passages": {
            "name": "resolve_passages",
            "location": 42,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "root": [
                    "typing.Type",
                    "graphene.ResolveInfo",
                    "story.models.Story",
                    "story.models.Author",
                    "Type"
                ],
                "info": [
                    "typing.Type",
                    "graphene.ResolveInfo",
                    "story.models.Story",
                    "story.models.Author",
                    "Type"
                ]
            }
        },
        "StoryType.is_type_of": {
            "name": "is_type_of",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "graphene.ResolveInfo",
                    "list[]",
                    "list"
                ],
                "root": [
                    "typing.Sequence[str]",
                    "neuromation.api.JobDescription",
                    "dict[, ]",
                    "Sequence[str]",
                    "set[str]",
                    "dict",
                    "Set[str]"
                ],
                "_": [
                    "str",
                    "graphene.ResolveInfo",
                    "list[]",
                    "list"
                ]
            }
        },
        "StoryType.get_node": {
            "name": "get_node",
            "location": 50,
            "return": [
                "str",
                "List[str]",
                "Dict[str, Any]",
                "dict",
                "Mapping[str, Any]",
                "Iterable[str]",
                "Optional[Match]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "dict[str, object]",
                    "Dict[str, object]",
                    "list[L]",
                    "List[manager.models.language.Language]",
                    "bool"
                ],
                "info": [
                    "str",
                    "graphene.ResolveInfo"
                ],
                "id_": [
                    "str",
                    "graphene.ResolveInfo"
                ]
            }
        },
        "Query.resolve_stories": {
            "name": "resolve_stories",
            "location": 65,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "root": [
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "int",
                    "dict",
                    "dict[, ]"
                ],
                "_": [
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "int",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "cyoa-story-master/cyoa-backend/api/query/__init__.py": {},
    "cyoa-story-master/cyoa-backend/api/tests/test_utils.py": {
        "TestGlobalId.test_to_global_id__can_be_decoded_from_type_name": {
            "name": "test_to_global_id__can_be_decoded_from_type_name",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGlobalId.test_to_global_id__can_be_decoded_from_default_name": {
            "name": "test_to_global_id__can_be_decoded_from_default_name",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cyoa-story-master/cyoa-backend/api/tests/util.py": {
        "request_with_loaders": {
            "name": "request_with_loaders",
            "location": 6,
            "return": [
                "list[]",
                "int",
                "str",
                "List[Dict[str, Any]]",
                "bool",
                "list"
            ],
            "arguments": {}
        },
        "connection_to_list": {
            "name": "connection_to_list",
            "location": 13,
            "return": [
                "bool",
                "list[]"
            ],
            "arguments": {
                "connection": [
                    "str",
                    "float",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "cyoa-story-master/cyoa-backend/api/tests/__init__.py": {},
    "cyoa-story-master/cyoa-backend/api/tests/query/test_author.py": {
        "TestAuthorNodeQuery.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthorNodeQuery.build_query_with_fields": {
            "name": "build_query_with_fields",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthorNodeQuery.test_author_node_query__returns_empty_field_when_id_does_not_exist": {
            "name": "test_author_node_query__returns_empty_field_when_id_does_not_exist",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthorNodeQuery.test_author_node_query__returns_model_fields": {
            "name": "test_author_node_query__returns_model_fields",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthorNodeQuery.test_author_node_query__returns_related_stories": {
            "name": "test_author_node_query__returns_related_stories",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthorNodeQuery.test_author_full_name_field__without_required_parameter": {
            "name": "test_author_full_name_field__without_required_parameter",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cyoa-story-master/cyoa-backend/api/tests/query/test_character.py": {
        "TestCharacterNodeQuery.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCharacterNodeQuery.build_query_with_fields": {
            "name": "build_query_with_fields",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCharacterNodeQuery.test_character_node_query__returns_empty_field_when_id_does_not_exist": {
            "name": "test_character_node_query__returns_empty_field_when_id_does_not_exist",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCharacterNodeQuery.test_character_node_query__returns_model_fields": {
            "name": "test_character_node_query__returns_model_fields",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCharacterNodeQuery.test_character_node_query__returns_related_passages": {
            "name": "test_character_node_query__returns_related_passages",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cyoa-story-master/cyoa-backend/api/tests/query/test_choice.py": {
        "TestAuthorNodeQuery.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthorNodeQuery.build_query_with_fields": {
            "name": "build_query_with_fields",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthorNodeQuery.test_choice_node_query__returns_empty_field_when_id_does_not_exist": {
            "name": "test_choice_node_query__returns_empty_field_when_id_does_not_exist",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthorNodeQuery.test_choice_node_query__returns_model_fields": {
            "name": "test_choice_node_query__returns_model_fields",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthorNodeQuery.test_choice_node_query__returns_related_from_passage": {
            "name": "test_choice_node_query__returns_related_from_passage",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthorNodeQuery.test_choice_node_query__returns_related_to_passage": {
            "name": "test_choice_node_query__returns_related_to_passage",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cyoa-story-master/cyoa-backend/api/tests/query/test_passage.py": {
        "TestAuthorNodeQuery.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthorNodeQuery.build_query_with_fields": {
            "name": "build_query_with_fields",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthorNodeQuery.test_passage_node_query__returns_empty_field_when_id_does_not_exist": {
            "name": "test_passage_node_query__returns_empty_field_when_id_does_not_exist",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthorNodeQuery.test_passage_node_query__returns_model_fields": {
            "name": "test_passage_node_query__returns_model_fields",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthorNodeQuery.test_passage_node_query__returns_related_story": {
            "name": "test_passage_node_query__returns_related_story",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthorNodeQuery.test_passage_node_query__returns_related_character": {
            "name": "test_passage_node_query__returns_related_character",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthorNodeQuery.test_passage_node_query__returns_list_of_choices": {
            "name": "test_passage_node_query__returns_list_of_choices",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cyoa-story-master/cyoa-backend/api/tests/query/test_story.py": {
        "TestStoriesQuery.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStoriesQuery.build_query_with_fields": {
            "name": "build_query_with_fields",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStoriesQuery.test_stories_query__returns_list_of_stories": {
            "name": "test_stories_query__returns_list_of_stories",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStoryNodeQuery.setUp": {
            "name": "setUp",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStoryNodeQuery.build_query_with_fields": {
            "name": "build_query_with_fields",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStoryNodeQuery.test_story_node_query__returns_empty_field_when_id_does_not_exist": {
            "name": "test_story_node_query__returns_empty_field_when_id_does_not_exist",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStoryNodeQuery.test_story_node_query__returns_model_fields": {
            "name": "test_story_node_query__returns_model_fields",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStoryNodeQuery.test_story_node_query__returns_related_author": {
            "name": "test_story_node_query__returns_related_author",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStoryNodeQuery.test_story_node_query__returns_related_passages": {
            "name": "test_story_node_query__returns_related_passages",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cyoa-story-master/cyoa-backend/api/tests/query/__init__.py": {},
    "cyoa-story-master/cyoa-backend/cyoa/settings.py": {},
    "cyoa-story-master/cyoa-backend/cyoa/urls.py": {},
    "cyoa-story-master/cyoa-backend/cyoa/wsgi.py": {},
    "cyoa-story-master/cyoa-backend/cyoa/__init__.py": {},
    "cyoa-story-master/cyoa-backend/story/admin.py": {},
    "cyoa-story-master/cyoa-backend/story/apps.py": {},
    "cyoa-story-master/cyoa-backend/story/factories.py": {},
    "cyoa-story-master/cyoa-backend/story/models.py": {
        "Author.full_name": {
            "name": "full_name",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "display_format": [
                    "str"
                ]
            }
        },
        "Author.__str__": {
            "name": "__str__",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Story.__str__": {
            "name": "__str__",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Character.__str__": {
            "name": "__str__",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Passage.__str__": {
            "name": "__str__",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Choice.__str__": {
            "name": "__str__",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cyoa-story-master/cyoa-backend/story/tests.py": {},
    "cyoa-story-master/cyoa-backend/story/__init__.py": {},
    "cyoa-story-master/cyoa-backend/story/migrations/0001_initial.py": {},
    "cyoa-story-master/cyoa-backend/story/migrations/0002_auto_20180211_1701.py": {},
    "cyoa-story-master/cyoa-backend/story/migrations/0003_auto_20180211_1702.py": {},
    "cyoa-story-master/cyoa-backend/story/migrations/0004_auto_20180211_1808.py": {},
    "cyoa-story-master/cyoa-backend/story/migrations/0005_story_published_year.py": {},
    "cyoa-story-master/cyoa-backend/story/migrations/0006_auto_20180211_1842.py": {},
    "cyoa-story-master/cyoa-backend/story/migrations/0007_auto_20180224_2118.py": {},
    "cyoa-story-master/cyoa-backend/story/migrations/0008_auto_20181008_0502.py": {},
    "cyoa-story-master/cyoa-backend/story/migrations/0009_remove_story_date_published.py": {},
    "cyoa-story-master/cyoa-backend/story/migrations/__init__.py": {},
    "cyoa-story-master/cyoa-backend/story/services/author.py": {
        "AuthorService.create": {
            "name": "create",
            "location": 11,
            "return": [
                "int",
                "Dict[str, str]",
                "bool",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "validated_data": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "int",
                    "bytes"
                ]
            }
        },
        "AuthorService.update": {
            "name": "update",
            "location": 14,
            "return": [
                "float",
                "zam_repondeur.models.Amendement",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "story.models.Author",
                    "dict",
                    "Dict[str, Union[int, str]]",
                    "str",
                    "Optional[Dict[str, str]]",
                    "Dict[int, Dict[str, Any]]"
                ],
                "validated_data": [
                    "str",
                    "dict",
                    "story.models.Author",
                    "Dict[str, Any]",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "AuthorService.for_instance": {
            "name": "for_instance",
            "location": 22,
            "return": [
                "str",
                "int",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "dict[, ]"
                ],
                "instance_id": [
                    "str",
                    "int",
                    "models.Taxonomy.Id"
                ],
                "data": [
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "cyoa-story-master/cyoa-backend/story/services/character.py": {
        "CharacterService.create": {
            "name": "create",
            "location": 9,
            "return": [
                "int",
                "Dict[str, str]",
                "bool",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "validated_data": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "int",
                    "bytes"
                ]
            }
        },
        "CharacterService.update": {
            "name": "update",
            "location": 12,
            "return": [
                "float",
                "zam_repondeur.models.Amendement",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "story.models.Character",
                    "dict",
                    "bytes",
                    "Dict[str, Any]"
                ],
                "validated_data": [
                    "str",
                    "list[]",
                    "dict",
                    "Dict[str, Any]",
                    "story.models.Character",
                    "Optional[Dict[str, str]]",
                    "list"
                ]
            }
        },
        "CharacterService.for_instance": {
            "name": "for_instance",
            "location": 18,
            "return": [
                "str",
                "int",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "dict[, ]"
                ],
                "instance_id": [
                    "str",
                    "int",
                    "models.Taxonomy.Id"
                ],
                "data": [
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "cyoa-story-master/cyoa-backend/story/services/choice.py": {
        "ChoiceService.validate_from_passage_id": {
            "name": "validate_from_passage_id",
            "location": 17,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "from_passage_id": [
                    "int",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "ChoiceService.validate_to_passage_id": {
            "name": "validate_to_passage_id",
            "location": 24,
            "return": [
                "int",
                "str",
                "Union[int, float]"
            ],
            "arguments": {
                "self": [],
                "to_passage_id": [
                    "int"
                ]
            }
        },
        "ChoiceService.validate": {
            "name": "validate",
            "location": 31,
            "return": [
                "int",
                "str",
                "bytes",
                "dict[, ]",
                "Optional[float]",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "dict[, ]",
                    "bool",
                    "dict"
                ]
            }
        },
        "ChoiceService.create": {
            "name": "create",
            "location": 36,
            "return": [
                "int",
                "Dict[str, str]",
                "bool",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "validated_data": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "int",
                    "bytes"
                ]
            }
        },
        "ChoiceService.update": {
            "name": "update",
            "location": 39,
            "return": [
                "float",
                "zam_repondeur.models.Amendement",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "story.models.Choice",
                    "dict",
                    "story.models.Story"
                ],
                "validated_data": [
                    "dict",
                    "story.models.Choice",
                    "story.models.Story"
                ]
            }
        },
        "ChoiceService.for_instance": {
            "name": "for_instance",
            "location": 48,
            "return": [
                "str",
                "int",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "dict[, ]"
                ],
                "instance_id": [
                    "int",
                    "str",
                    "set[int]",
                    "Set[int]",
                    "bool"
                ],
                "data": [
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "cyoa-story-master/cyoa-backend/story/services/passage.py": {
        "PassageService.validate_story_id": {
            "name": "validate_story_id",
            "location": 13,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "story_id": [
                    "int",
                    "str",
                    "site.transfer.models.SiteID"
                ]
            }
        },
        "PassageService.validate_character_id": {
            "name": "validate_character_id",
            "location": 20,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "character_id": [
                    "int",
                    "str",
                    "site.transfer.models.SiteID"
                ]
            }
        },
        "PassageService.create": {
            "name": "create",
            "location": 27,
            "return": [
                "int",
                "Dict[str, str]",
                "bool",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "validated_data": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "int",
                    "bytes"
                ]
            }
        },
        "PassageService.update": {
            "name": "update",
            "location": 30,
            "return": [
                "float",
                "zam_repondeur.models.Amendement",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "dict",
                    "str",
                    "story.models.Character",
                    "story.models.Author",
                    "Dict[str, Any]",
                    "Optional[Dict[str, str]]"
                ],
                "validated_data": [
                    "str",
                    "dict",
                    "story.models.Character",
                    "story.models.Author",
                    "Dict[str, Any]",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "PassageService.for_instance": {
            "name": "for_instance",
            "location": 40,
            "return": [
                "int"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "dict[, ]"
                ],
                "instance_id": [
                    "str",
                    "int",
                    "models.Taxonomy.Id"
                ],
                "data": [
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "cyoa-story-master/cyoa-backend/story/services/story.py": {
        "StoryService.validate_author_id": {
            "name": "validate_author_id",
            "location": 13,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "author_id": [
                    "int",
                    "str",
                    "site.transfer.models.SiteID"
                ]
            }
        },
        "StoryService.create": {
            "name": "create",
            "location": 20,
            "return": [
                "int",
                "Dict[str, str]",
                "bool",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "validated_data": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "int",
                    "bytes"
                ]
            }
        },
        "StoryService.update": {
            "name": "update",
            "location": 23,
            "return": [
                "float",
                "zam_repondeur.models.Amendement",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "dict",
                    "story.models.Story",
                    "story.models.Choice"
                ],
                "validated_data": [
                    "dict",
                    "story.models.Story",
                    "story.models.Choice"
                ]
            }
        },
        "StoryService.for_instance": {
            "name": "for_instance",
            "location": 33,
            "return": [
                "int"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "dict[, ]"
                ],
                "instance_id": [
                    "str",
                    "int",
                    "models.Taxonomy.Id"
                ],
                "data": [
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "cyoa-story-master/cyoa-backend/story/services/__init__.py": {}
}
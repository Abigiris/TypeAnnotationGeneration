{
    "cyprety-rental-bot-master/app/adapters.py": {
        "SqliteDBAdapter.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database": [
                    "str"
                ]
            }
        },
        "SqliteDBAdapter.row_to_chat": {
            "name": "row_to_chat",
            "location": 41,
            "return": [
                "entities.Chat"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "list[]",
                    "bool",
                    "list[dict[str, typing.Any]]",
                    "list",
                    "list[list[str]]",
                    "List[Dict[str, Any]]",
                    "List[List[str]]"
                ],
                "row": [
                    "Mapping"
                ]
            }
        },
        "BotAdapter.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str"
                ]
            }
        }
    },
    "cyprety-rental-bot-master/app/bots.py": {
        "TelegramBot.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str"
                ],
                "chat_service": [
                    "services.ChatService"
                ]
            }
        },
        "TelegramBot.start_polling": {
            "name": "start_polling",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cyprety-rental-bot-master/app/client.py": {
        "Client.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cyprety-rental-bot-master/app/config.py": {
        "Config.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.bot_token": {
            "name": "bot_token",
            "location": 25,
            "return": [
                "str",
                "List[str]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.database": {
            "name": "database",
            "location": 29,
            "return": [
                "str",
                "float",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.sentry_dsn": {
            "name": "sentry_dsn",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.sentry_release_version": {
            "name": "sentry_release_version",
            "location": 37,
            "return": [
                "str",
                "IO",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cyprety-rental-bot-master/app/datatypes.py": {
        "Price.__new__": {
            "name": "__new__",
            "location": 7,
            "return": [
                "Price"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPrice]"
                ],
                "value": [
                    "Union[(int, str, decimal.Decimal)]"
                ]
            }
        },
        "Price.from_optional": {
            "name": "from_optional",
            "location": 14,
            "return": [
                "Optional[Price]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "T"
                ],
                "value": [
                    "Optional[decimal.Decimal]"
                ]
            }
        }
    },
    "cyprety-rental-bot-master/app/entities.py": {
        "Property.telegram_link": {
            "name": "telegram_link",
            "location": 22,
            "return": [
                "typing.Text",
                "str",
                "dict",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cyprety-rental-bot-master/app/executor.py": {
        "run": {
            "name": "run",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Application.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.provider_list": {
            "name": "provider_list",
            "location": 37,
            "return": [
                "list[Provider]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.run": {
            "name": "run",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loop": [
                    "asyncio.events.AbstractEventLoop"
                ]
            }
        }
    },
    "cyprety-rental-bot-master/app/parsers.py": {
        "Parser.get_base_url": {
            "name": "get_base_url",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.get_items": {
            "name": "get_items",
            "location": 20,
            "return": [
                "List[bs4.element.Tag]"
            ],
            "arguments": {
                "self": [],
                "soup": [
                    "bs4.BeautifulSoup"
                ]
            }
        },
        "Parser.get_item_title": {
            "name": "get_item_title",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "bs4.element.Tag"
                ]
            }
        },
        "Parser.get_item_price": {
            "name": "get_item_price",
            "location": 26,
            "return": [
                "datatypes.Price"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "bs4.element.Tag"
                ]
            }
        },
        "Parser.get_item_url": {
            "name": "get_item_url",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "bs4.element.Tag"
                ]
            }
        },
        "Parser.get_item_created_at": {
            "name": "get_item_created_at",
            "location": 32,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "bs4.element.Tag"
                ]
            }
        },
        "Parser.build_absolute_url": {
            "name": "build_absolute_url",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "Parser.build_property": {
            "name": "build_property",
            "location": 39,
            "return": [
                "entities.Property"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "bs4.element.Tag"
                ]
            }
        },
        "Parser.parse": {
            "name": "parse",
            "location": 47,
            "return": [
                "List[entities.Property]"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str"
                ]
            }
        },
        "BazarakiParser.get_base_url": {
            "name": "get_base_url",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BazarakiParser.get_items": {
            "name": "get_items",
            "location": 60,
            "return": [
                "List[bs4.element.Tag]"
            ],
            "arguments": {
                "self": [],
                "soup": [
                    "bs4.BeautifulSoup"
                ]
            }
        },
        "BazarakiParser.get_item_title": {
            "name": "get_item_title",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "bs4.element.Tag"
                ]
            }
        },
        "BazarakiParser.get_item_price": {
            "name": "get_item_price",
            "location": 68,
            "return": [
                "datatypes.Price"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "bs4.element.Tag"
                ]
            }
        },
        "BazarakiParser.get_item_url": {
            "name": "get_item_url",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "bs4.element.Tag"
                ]
            }
        },
        "BazarakiParser.get_item_created_at": {
            "name": "get_item_created_at",
            "location": 78,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "bs4.element.Tag"
                ]
            }
        }
    },
    "cyprety-rental-bot-master/app/protocols.py": {},
    "cyprety-rental-bot-master/app/providers.py": {
        "Provider.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "parser": [
                    "parsers.Parser"
                ],
                "webclient": [
                    "client.Client"
                ]
            }
        }
    },
    "cyprety-rental-bot-master/app/registry.py": {
        "add_parser": {
            "name": "add_parser",
            "location": 16,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "list_parsers": {
            "name": "list_parsers",
            "location": 20,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {}
        },
        "ParserRegistry.__init__": {
            "name": "__init__",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserRegistry.add": {
            "name": "add",
            "location": 6,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "ParserRegistry.add.wrapper": {
            "name": "wrapper",
            "location": 7,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "parser_class": [
                    "str",
                    "Callable"
                ]
            }
        }
    },
    "cyprety-rental-bot-master/app/services.py": {},
    "cyprety-rental-bot-master/app/__init__.py": {},
    "cyprety-rental-bot-master/app/__main__.py": {},
    "cyprety-rental-bot-master/tests/conftest.py": {
        "amocker": {
            "name": "amocker",
            "location": 7,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "fake_bot_token": {
            "name": "fake_bot_token",
            "location": 13,
            "return": [
                "typing.Text",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "conf_mock": {
            "name": "conf_mock",
            "location": 18,
            "return": [
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "amocker": [
                    "int"
                ],
                "fake_bot_token": [
                    "int"
                ]
            }
        },
        "property_factory": {
            "name": "property_factory",
            "location": 23,
            "return": [
                "float",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "faker": [
                    "bool",
                    "int"
                ]
            }
        },
        "chat_factory": {
            "name": "chat_factory",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "faker": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "parser_mock": {
            "name": "parser_mock",
            "location": 50,
            "return": [],
            "arguments": {
                "amocker": [
                    "bool",
                    "app.App"
                ]
            }
        },
        "client_mock": {
            "name": "client_mock",
            "location": 57,
            "return": [
                "str",
                "bool",
                "Callable",
                "bytes",
                "int"
            ],
            "arguments": {
                "amocker": []
            }
        },
        "db_adapter_mock": {
            "name": "db_adapter_mock",
            "location": 73,
            "return": [
                "str",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "amocker": [
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "bot_adapter_mock": {
            "name": "bot_adapter_mock",
            "location": 91,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "amocker": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "send_service": {
            "name": "send_service",
            "location": 98,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "amocker": [],
                "bot_adapter_mock": [],
                "db_adapter_mock": []
            }
        },
        "async_gen_mock": {
            "name": "async_gen_mock",
            "location": 109,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "chat_service": {
            "name": "chat_service",
            "location": 119,
            "return": [
                "Iterable[str]",
                "IO[str]"
            ],
            "arguments": {
                "db_adapter_mock": [
                    "Set[str]",
                    "str",
                    "set[str]",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "chat_service_mock": {
            "name": "chat_service_mock",
            "location": 125,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "amocker": []
            }
        },
        "telegram_bot": {
            "name": "telegram_bot",
            "location": 133,
            "return": [
                "str",
                "dict",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "amocker": [],
                "chat_service_mock": [
                    "str",
                    "bool",
                    "Sequence",
                    "typing.Sequence[]",
                    "Tuple[int, int, int]",
                    "tuple[typing.Union[int,int,int]]"
                ]
            }
        },
        "telegram_bot_mock": {
            "name": "telegram_bot_mock",
            "location": 144,
            "return": [
                "Dict[str, Sequence[str]]",
                "app.executor.Application"
            ],
            "arguments": {
                "amocker": [
                    "Iterable",
                    "typing.Iterable[]"
                ]
            }
        },
        "application_mock": {
            "name": "application_mock",
            "location": 164,
            "return": [
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "amocker": [
                    "typing.Iterable[]",
                    "int",
                    "app.services.ChatService",
                    "Iterable"
                ]
            }
        },
        "bazaraki_soup": {
            "name": "bazaraki_soup",
            "location": 170,
            "return": [
                "str",
                "int",
                "bytes",
                "bytearray"
            ],
            "arguments": {}
        },
        "bazaraki_item": {
            "name": "bazaraki_item",
            "location": 178,
            "return": [
                "str",
                "Type"
            ],
            "arguments": {
                "bazaraki_soup": [
                    "bool",
                    "str",
                    "float",
                    "List[str]"
                ]
            }
        },
        "bazaraki_full_date_item": {
            "name": "bazaraki_full_date_item",
            "location": 183,
            "return": [
                "str",
                "Type",
                "int"
            ],
            "arguments": {
                "bazaraki_soup": [
                    "float",
                    "app.models.Tweet",
                    "str",
                    "int"
                ]
            }
        },
        "bazaraki_today_date_item": {
            "name": "bazaraki_today_date_item",
            "location": 188,
            "return": [
                "str",
                "Type",
                "int"
            ],
            "arguments": {
                "bazaraki_soup": [
                    "float",
                    "app.models.Tweet",
                    "str",
                    "int"
                ]
            }
        },
        "bazaraki_end_of_today_date_item": {
            "name": "bazaraki_end_of_today_date_item",
            "location": 193,
            "return": [
                "str",
                "bool",
                "Type"
            ],
            "arguments": {
                "bazaraki_soup": [
                    "List[int]",
                    "int",
                    "bool",
                    "Sequence[int]"
                ]
            }
        },
        "bazaraki_yesterday_date_item": {
            "name": "bazaraki_yesterday_date_item",
            "location": 198,
            "return": [
                "str",
                "Type",
                "int"
            ],
            "arguments": {
                "bazaraki_soup": [
                    "float",
                    "app.models.Tweet",
                    "str",
                    "int"
                ]
            }
        },
        "property_factory.wrapper": {
            "name": "wrapper",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "chat_factory.wrapper": {
            "name": "wrapper",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "async_gen_mock.wrapper": {
            "name": "wrapper",
            "location": 110,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "return_value": [
                    "bool",
                    "Callable",
                    "List[dict]",
                    "bytes"
                ]
            }
        }
    },
    "cyprety-rental-bot-master/tests/test_adapters.py": {
        "test_bot_adapter_init": {
            "name": "test_bot_adapter_init",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "bot_adapter": [
                    "adapters.BotAdapter"
                ]
            }
        },
        "test_bot_adapter_broadcast_exc.raise_exc": {
            "name": "raise_exc",
            "location": 178,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "cyprety-rental-bot-master/tests/test_bots.py": {
        "test_telegram_bot_start_polling": {
            "name": "test_telegram_bot_start_polling",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "amocker": [],
                "telegram_bot": [
                    "bots.TelegramBot"
                ]
            }
        }
    },
    "cyprety-rental-bot-master/tests/test_client.py": {},
    "cyprety-rental-bot-master/tests/test_config.py": {
        "test_config_raises_improperly_configured": {
            "name": "test_config_raises_improperly_configured",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "amocker": [
                    "Callable",
                    "typing.Callable[, ]",
                    "Iterable[Any]",
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "test_bot_token": {
            "name": "test_bot_token",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "amocker": [
                    "str"
                ],
                "fake_bot_token": [
                    "str"
                ]
            }
        },
        "test_database_default_value": {
            "name": "test_database_default_value",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "amocker": [
                    "str"
                ],
                "fake_bot_token": [
                    "str"
                ]
            }
        },
        "test_database_env_value": {
            "name": "test_database_env_value",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "amocker": [
                    "str"
                ],
                "fake_bot_token": [
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "test_database_sentry_dsn_is_none": {
            "name": "test_database_sentry_dsn_is_none",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "amocker": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "fake_bot_token": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "int",
                    "None"
                ]
            }
        },
        "test_database_sentry_dsn": {
            "name": "test_database_sentry_dsn",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "amocker": [
                    "str",
                    "bool"
                ],
                "fake_bot_token": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "None",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_database_sentry_release_version_is_none": {
            "name": "test_database_sentry_release_version_is_none",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "amocker": [
                    "str",
                    "bool"
                ],
                "fake_bot_token": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "None",
                    "int",
                    "app.wikipedia.Wikipedia"
                ]
            }
        },
        "test_database_sentry_release_version": {
            "name": "test_database_sentry_release_version",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "amocker": [
                    "str",
                    "bool"
                ],
                "fake_bot_token": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "int",
                    "None"
                ]
            }
        }
    },
    "cyprety-rental-bot-master/tests/test_datatypes.py": {
        "test_price": {
            "name": "test_price",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_negative_price": {
            "name": "test_negative_price",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_price_from_optional": {
            "name": "test_price_from_optional",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "given": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]"
                ],
                "expected": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "cyprety-rental-bot-master/tests/test_entities.py": {
        "test_property_telegram_link": {
            "name": "test_property_telegram_link",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {
                "property_factory": [
                    "typing.Type",
                    "bool",
                    "type",
                    "\"Event\"",
                    "int"
                ]
            }
        }
    },
    "cyprety-rental-bot-master/tests/test_executor.py": {
        "test_run": {
            "name": "test_run",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "amocker": [],
                "application_mock": [
                    "executor.Application"
                ]
            }
        }
    },
    "cyprety-rental-bot-master/tests/test_main.py": {
        "test_executes__main__": {
            "name": "test_executes__main__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "amocker": [
                    "str"
                ]
            }
        },
        "test_imports__main__": {
            "name": "test_imports__main__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "amocker": [
                    "str"
                ]
            }
        }
    },
    "cyprety-rental-bot-master/tests/test_parsers.py": {
        "test_parser_parse": {
            "name": "test_parser_parse",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "amocker": [
                    "type",
                    "dict"
                ],
                "property_factory": [
                    "str",
                    "typing.Type",
                    "bool",
                    "type",
                    "dict[, ]",
                    "dict",
                    "int"
                ]
            }
        },
        "test_parser_get_base_url_raises_not_implemented": {
            "name": "test_parser_get_base_url_raises_not_implemented",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parser_get_items_raises_not_implemented": {
            "name": "test_parser_get_items_raises_not_implemented",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "amocker": [
                    "str",
                    "Dict[str, float]"
                ]
            }
        },
        "test_parser_get_item_title_raises_not_implemented": {
            "name": "test_parser_get_item_title_raises_not_implemented",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "amocker": [
                    "str",
                    "Dict[str, float]"
                ]
            }
        },
        "test_parser_get_item_price_raises_not_implemented": {
            "name": "test_parser_get_item_price_raises_not_implemented",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "amocker": [
                    "str",
                    "Dict[str, float]"
                ]
            }
        },
        "test_parser_get_item_url_raises_not_implemented": {
            "name": "test_parser_get_item_url_raises_not_implemented",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "amocker": [
                    "int",
                    "str"
                ]
            }
        },
        "test_parser_get_item_created_at_raises_not_implemented": {
            "name": "test_parser_get_item_created_at_raises_not_implemented",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "amocker": [
                    "int",
                    "str"
                ]
            }
        },
        "test_parser_build_property": {
            "name": "test_parser_build_property",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "amocker": [],
                "property_factory": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Mapping[str, str]",
                    "typing.Mapping",
                    "Dict[str, Union[str, Any]]",
                    "dict[str, typing.Union[str,typing.Any]]"
                ]
            }
        },
        "test_parser_build_absolute_url": {
            "name": "test_parser_build_absolute_url",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "amocker": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_bazaraki_parser_get_base_url": {
            "name": "test_bazaraki_parser_get_base_url",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bazaraki_parser_get_items_calls_find_all": {
            "name": "test_bazaraki_parser_get_items_calls_find_all",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "amocker": []
            }
        },
        "test_bazaraki_parser_get_items": {
            "name": "test_bazaraki_parser_get_items",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "bazaraki_soup": []
            }
        },
        "test_bazaraki_parser_get_item_title": {
            "name": "test_bazaraki_parser_get_item_title",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "bazaraki_item": []
            }
        },
        "test_bazaraki_parser_get_item_price": {
            "name": "test_bazaraki_parser_get_item_price",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "bazaraki_item": []
            }
        },
        "test_bazaraki_parser_get_item_url": {
            "name": "test_bazaraki_parser_get_item_url",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "bazaraki_item": [
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "test_bazaraki_parser_get_item_created_at": {
            "name": "test_bazaraki_parser_get_item_created_at",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "bazaraki_full_date_item": []
            }
        },
        "test_bazaraki_parser_get_item_created_at_today_date": {
            "name": "test_bazaraki_parser_get_item_created_at_today_date",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "bazaraki_today_date_item": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_bazaraki_parser_get_item_created_at_yesterday_date": {
            "name": "test_bazaraki_parser_get_item_created_at_yesterday_date",
            "location": 160,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "request": [],
                "item_fixture": []
            }
        }
    },
    "cyprety-rental-bot-master/tests/test_providers.py": {
        "test_provider_init": {
            "name": "test_provider_init",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "parser_mock": [],
                "client_mock": []
            }
        }
    },
    "cyprety-rental-bot-master/tests/test_registry.py": {
        "test_parser_registry": {
            "name": "test_parser_registry",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parser_registry_add": {
            "name": "test_parser_registry_add",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_parser": {
            "name": "test_add_parser",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "amocker": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_list_parsers": {
            "name": "test_list_parsers",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "amocker": [
                    "app.executor.Application",
                    "Dict[str, Sequence[str]]"
                ]
            }
        }
    },
    "cyprety-rental-bot-master/tests/test_services.py": {},
    "cyprety-rental-bot-master/tests/__init__.py": {},
    "cyprety-rental-bot-master/tests/data/__init__.py": {}
}
{
    "data-libs-master/connections/setup.py": {},
    "data-libs-master/connections/revlibs/__init__.py": {},
    "data-libs-master/connections/revlibs/connections/config.py": {
        "load": {
            "name": "load",
            "location": 17,
            "return": [
                "Config",
                "Optional[List[str]]",
                "str",
                "bool",
                "Dict[str,Any]"
            ],
            "arguments": {
                "database": [
                    "List",
                    "str",
                    "bool",
                    "Dict"
                ]
            }
        },
        "load_connection_settings": {
            "name": "load_connection_settings",
            "location": 85,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "Config.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict",
                    "int"
                ],
                "config": [
                    "Dict[str,Any]",
                    "str",
                    "int",
                    "Dict"
                ]
            }
        },
        "Config.__repr__": {
            "name": "__repr__",
            "location": 45,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "Dict",
                "revlibs.connections.config.Config"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.__contains__": {
            "name": "__contains__",
            "location": 51,
            "return": [
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "Exception"
                ]
            }
        },
        "Config.params": {
            "name": "params",
            "location": 56,
            "return": [
                "Dict",
                "bool",
                "revlibs.connections.config.Config",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.password": {
            "name": "password",
            "location": 61,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.__getattr__": {
            "name": "__getattr__",
            "location": 71,
            "return": [
                "bool",
                "Optional[Union[str,Any]]",
                "str",
                "List[tuple[Union[str,str]]]",
                "Dict",
                "Set[str]",
                "Counter",
                "List[str]",
                "Dict[str,Union[Any,Any]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        }
    },
    "data-libs-master/connections/revlibs/connections/connectors.py": {
        "BaseConnector.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "bool",
                    "List[str]",
                    "str"
                ]
            }
        },
        "BaseConnector._connect": {
            "name": "_connect",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str,Any]",
                    "bool",
                    "Config",
                    "core.Config",
                    "revlibs.connections.config.Config"
                ]
            }
        },
        "BaseConnector._is_connection_closed": {
            "name": "_is_connection_closed",
            "location": 27,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "connection": [
                    "str",
                    "int"
                ]
            }
        },
        "BaseConnector.is_connected": {
            "name": "is_connected",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConnector.get_connection": {
            "name": "get_connection",
            "location": 35,
            "return": [
                "str",
                "int",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConnector.close": {
            "name": "close",
            "location": 42,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExasolConnector._is_connection_closed": {
            "name": "_is_connection_closed",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "connection": [
                    "Iterable[str]",
                    "psycopg2.extensions.connection"
                ]
            }
        },
        "ExasolConnector._connect": {
            "name": "_connect",
            "location": 59,
            "return": [
                "str",
                "nucypher.config.characters.UrsulaConfiguration"
            ],
            "arguments": {
                "config": [
                    "Dict[str,Any]",
                    "Dict",
                    "revlibs.connections.config.Config",
                    "pyramid.config.Configurator",
                    "_pytesconfig.Config"
                ]
            }
        },
        "PostgresConnector._is_connection_closed": {
            "name": "_is_connection_closed",
            "location": 93,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "connection": [
                    "Iterable[str]",
                    "psycopg2.extensions.connection"
                ]
            }
        },
        "PostgresConnector._parse_dsn": {
            "name": "_parse_dsn",
            "location": 98,
            "return": [
                "Generator[str,None,None]",
                "Generator[Text]"
            ],
            "arguments": {
                "data_source_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "PostgresConnector._connect": {
            "name": "_connect",
            "location": 110,
            "return": [
                "None",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "config": [
                    "Dict",
                    "Dict[str,Any]",
                    "revlibs.connections.config.Config",
                    "cmk.base.config.ConfigCache",
                    "pyramid.config.Configurator",
                    "config.Config"
                ]
            }
        }
    },
    "data-libs-master/connections/revlibs/connections/exceptions.py": {
        "DatabaseConnectionError.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection_name": [
                    "str",
                    "int"
                ],
                "reason": [
                    "Text",
                    "str",
                    "int"
                ]
            }
        }
    },
    "data-libs-master/connections/revlibs/connections/interface.py": {
        "get_connector": {
            "name": "get_connector",
            "location": 15,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "get": {
            "name": "get",
            "location": 59,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "name": []
            }
        }
    },
    "data-libs-master/connections/revlibs/connections/__init__.py": {},
    "data-libs-master/connections/tests/config_test.py": {
        "test_raise_password": {
            "name": "test_raise_password",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_password_fetched": {
            "name": "test_password_fetched",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "data-libs-master/connections/tests/connectors_test.py": {
        "test_simple_postgres": {
            "name": "test_simple_postgres",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_multi_server_postgres": {
            "name": "test_multi_server_postgres",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_multi_server_exasol": {
            "name": "test_multi_server_exasol",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bad_dsn_exasol": {
            "name": "test_bad_dsn_exasol",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_disabled_connection": {
            "name": "test_disabled_connection",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_failed_connection_postgres": {
            "name": "test_failed_connection_postgres",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pyexasol_exceptions": {
            "name": "test_pyexasol_exceptions",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unknown_flavour": {
            "name": "test_unknown_flavour",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_connector_same_connection": {
            "name": "test_get_connector_same_connection",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_connector_closed_connection": {
            "name": "test_get_connector_closed_connection",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "data-libs-master/dicts/setup.py": {},
    "data-libs-master/dicts/tests.py": {
        "create_dir": {
            "name": "create_dir",
            "location": 25,
            "return": [
                "Path",
                "str",
                "int",
                "bool",
                "pathlib.PosixPath",
                "pathlib.Path"
            ],
            "arguments": {
                "num_files": [
                    "int",
                    "Dict",
                    "str",
                    "bool"
                ],
                "dict_generator": [
                    "str",
                    "int",
                    "Type[Optional[str]]",
                    "Type"
                ],
                "extensions": [
                    "List[str]",
                    "List[Callable]",
                    "Sequence[str]",
                    "IO[str]",
                    "Iterable[pathlib.Path]",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "test_load_dicts": {
            "name": "test_load_dicts",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "generator": [
                    "str",
                    "pathlib.Path",
                    "None",
                    "Optional[str]",
                    "Union[str,pathlib.Path]"
                ],
                "num_files": [
                    "Dict[pathlib.Path,ModuleSummary]",
                    "pathlib.Path",
                    "str",
                    "Union[str,pathlib.Path]"
                ],
                "expected_size": [
                    "bool",
                    "Type[Exception]",
                    "Type"
                ],
                "extensions": [
                    "str",
                    "pathlib.Path",
                    "None",
                    "Optional[str]",
                    "Union[str,pathlib.Path]"
                ]
            }
        },
        "test_to_dict_simple": {
            "name": "test_to_dict_simple",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_to_dict_transform": {
            "name": "test_to_dict_transform",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_group_by_unordered": {
            "name": "test_group_by_unordered",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_duplicate": {
            "name": "test_duplicate",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_filter": {
            "name": "test_filter",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cast_then_key": {
            "name": "test_cast_then_key",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_group_by_file": {
            "name": "test_group_by_file",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Animal.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict",
                    "Dict[str,Any]",
                    "Mapping[str,Any]"
                ]
            }
        },
        "Animal.__repr__": {
            "name": "__repr__",
            "location": 16,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Animal.__eq__": {
            "name": "__eq__",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Dict",
                    "float",
                    "int"
                ]
            }
        },
        "test_cast_then_key.animal_size": {
            "name": "animal_size",
            "location": 148,
            "return": [
                "str",
                "List[float]",
                "bool",
                "Set[str]",
                "float",
                "int"
            ],
            "arguments": {
                "animal": [
                    "dict",
                    "bool",
                    "Dict[str, int]"
                ]
            }
        }
    },
    "data-libs-master/dicts/revlibs/dicts.py": {
        "Dicts.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "pathlib.Path",
                    "str",
                    "Union[str, pathlib.Path]"
                ],
                "dicts": [
                    "bool",
                    "Optional[List[Any]]",
                    "Optional[str]",
                    "float",
                    "Optional[Dict[str, Any]]",
                    "int"
                ],
                "skip_errors": [
                    "bool",
                    "str",
                    "Callable[[float], None]",
                    "Optional[str]"
                ],
                "load_disabled": [
                    "bool",
                    "Optional[List[Any]]",
                    "Optional[str]",
                    "float",
                    "Optional[Dict[str, Any]]",
                    "int"
                ],
                "disabled_key": [
                    "List[float]",
                    "dict",
                    "bool",
                    "Set[str]",
                    "list",
                    "starfish.core.util.logging.Log"
                ]
            }
        },
        "Dicts.items": {
            "name": "items",
            "location": 50,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "Union[Sequence, 'SweepFixedValues']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dicts.__classify_path": {
            "name": "__classify_path",
            "location": 54,
            "return": [
                "str",
                "Path",
                "Union[str, pathlib.Path]",
                "bool",
                "pathlib.Path",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dicts.__load_items": {
            "name": "__load_items",
            "location": 62,
            "return": [
                "bool",
                "Tuple[int, int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dicts.remove_disabled_items": {
            "name": "remove_disabled_items",
            "location": 87,
            "return": [
                "typing.Iterable[typing.Dict]"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "Dicts.load_file": {
            "name": "load_file",
            "location": 105,
            "return": [
                "typing.Iterable[typing.Dict]"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "Union[pathlib.Path, str]",
                    "str"
                ]
            }
        },
        "Dicts.load_directory": {
            "name": "load_directory",
            "location": 134,
            "return": [
                "typing.Iterable[typing.Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dicts.items_as": {
            "name": "items_as",
            "location": 160,
            "return": [
                "Tuple[bytes]",
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "memoryview",
                    "Callable[[Dict], Any]"
                ]
            }
        },
        "Dicts.filter": {
            "name": "filter",
            "location": 165,
            "return": [
                "float",
                "logging.LogRecord",
                "Callable[[None], bool]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "predicate": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "Dicts.__make_callable": {
            "name": "__make_callable",
            "location": 170,
            "return": [
                "dict",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[Callable[[Dict], Hashable], str]",
                    "str",
                    "dict",
                    "Optional[str]"
                ],
                "default": [
                    "Hashable",
                    "str",
                    "Union[str, int]",
                    "Optional[int]"
                ]
            }
        },
        "Dicts.__key_by": {
            "name": "__key_by",
            "location": 188,
            "return": [
                "typing.Iterable[typing.Tuple[typing.Hashable, typing.List[typing.Any]]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "Hashable",
                    "str"
                ],
                "default": [
                    "str",
                    "dict",
                    "bytes"
                ],
                "map": [
                    "bool",
                    "str",
                    "Optional[Any]"
                ]
            }
        },
        "Dicts.key_by": {
            "name": "key_by",
            "location": 206,
            "return": [
                "int",
                "Dict[str, bool]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "List[str]",
                    "str",
                    "Mapping",
                    "bytes",
                    "Iterable[Hashable]",
                    "dict"
                ],
                "default": [
                    "List[str]",
                    "str",
                    "Mapping",
                    "bytes",
                    "Iterable[Hashable]",
                    "dict"
                ],
                "map": [
                    "List[str]",
                    "str",
                    "Mapping",
                    "bytes",
                    "Iterable[Hashable]",
                    "dict"
                ]
            }
        },
        "Dicts.key_by_file": {
            "name": "key_by_file",
            "location": 226,
            "return": [
                "Dict[str, str]",
                "Mapping[str, Any]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dicts.map_by": {
            "name": "map_by",
            "location": 231,
            "return": [
                "List[Tuple[str, str]]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[Callable[[Dict], Hashable], str]",
                    "Hashable",
                    "KT",
                    "str"
                ],
                "default": [
                    "Union[Callable[[Dict], Hashable], str]",
                    "Hashable",
                    "KT",
                    "str"
                ]
            }
        },
        "Dicts.from_path": {
            "name": "from_path",
            "location": 250,
            "return": [
                "str",
                "pathlib.Path",
                "pathlib.PurePosixPath"
            ],
            "arguments": {
                "path": [
                    "bool",
                    "str",
                    "pathlib.Path"
                ],
                "skip_errors": [
                    "bool",
                    "str",
                    "pathlib.Path"
                ],
                "load_disabled": [
                    "bool",
                    "str",
                    "pathlib.Path"
                ],
                "disabled_key": [
                    "bool",
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "Dicts.from_dicts": {
            "name": "from_dicts",
            "location": 264,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "dicts": [
                    "bool",
                    "str",
                    "List[Dict]",
                    "int"
                ],
                "skip_errors": [
                    "bool",
                    "str",
                    "List[Dict]",
                    "int"
                ],
                "load_disabled": [
                    "bool",
                    "str",
                    "List[Dict]",
                    "int"
                ],
                "disabled_key": [
                    "bool",
                    "str",
                    "List[Dict]",
                    "int"
                ]
            }
        }
    },
    "data-libs-master/dicts/revlibs/__init__.py": {},
    "data-libs-master/logger/setup.py": {},
    "data-libs-master/logger/tests.py": {
        "test_console_logging": {
            "name": "test_console_logging",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [
                    "str",
                    "float"
                ],
                "monkeypatch": []
            }
        }
    },
    "data-libs-master/logger/revlibs/__init__.py": {},
    "data-libs-master/logger/revlibs/logger/__init__.py": {
        "_load_logging_config_": {
            "name": "_load_logging_config_",
            "location": 28,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "params": [
                    "Dict",
                    "Dict[str,str]"
                ]
            }
        },
        "select_handlers": {
            "name": "select_handlers",
            "location": 44,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "names": [
                    "str",
                    "Dict",
                    "Optional[str]"
                ],
                "config": [
                    "str",
                    "Optional[Iterable[str]]",
                    "bool",
                    "Optional[type]",
                    "Type[BaseConfig]"
                ]
            }
        },
        "get_logger": {
            "name": "get_logger",
            "location": 57,
            "return": [
                "dict",
                "str",
                "Dict[str, str]",
                "int",
                "Callable",
                "Dict[str, Any]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "None"
                ],
                "params": [
                    "str",
                    "bytes",
                    "None",
                    "Dict[str,str]"
                ],
                "add_handlers": [
                    "List[Text]",
                    "str",
                    "Callable",
                    "int",
                    "bool",
                    "Optional[Exception]"
                ]
            }
        }
    },
    "data-libs-master/logger/revlibs/logger/formatters/color_formatter.py": {
        "ColoredFormatter.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "format": [
                    "str",
                    "bytes"
                ]
            }
        },
        "ColoredFormatter.format": {
            "name": "format",
            "location": 43,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "data-libs-master/logger/revlibs/logger/formatters/stackdriver_formatter.py": {
        "supported_keys": {
            "name": "supported_keys",
            "location": 12,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable",
                "Callable[[str], T]"
            ],
            "arguments": {}
        },
        "serialize": {
            "name": "serialize",
            "location": 52,
            "return": [
                "Dict[str,Any]",
                "Dict",
                "Dict[str,str]",
                "List",
                "Dict[int,Dict[int,Any]]",
                "str"
            ],
            "arguments": {
                "obj": [
                    "Dict[str,Any]"
                ]
            }
        },
        "add_stack_driver_support": {
            "name": "add_stack_driver_support",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "log": [
                    "logging.Logger",
                    "List[Dict[str, float]]",
                    "logging.FileHandler"
                ]
            }
        },
        "StackdriverJsonFormatter.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StackdriverJsonFormatter.environment_info": {
            "name": "environment_info",
            "location": 36,
            "return": [
                "Dict[Text,]",
                "Dict[str,Any]",
                "str",
                "bool",
                "Mapping"
            ],
            "arguments": {}
        },
        "StackdriverJsonFormatter.format": {
            "name": "format",
            "location": 39,
            "return": [
                "Dict[Text,Union[dict,dict[str,Any],dict[tuple[Union[str,Any]],]]]",
                "int",
                "bool",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "List[float]",
                    "str",
                    "float",
                    "Dict",
                    "bool",
                    "Sequence[cirq.Qid]",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        }
    },
    "data-libs-master/logger/revlibs/logger/formatters/__init__.py": {}
}
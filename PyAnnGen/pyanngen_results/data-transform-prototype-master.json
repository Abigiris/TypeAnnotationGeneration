{
    "data-transform-prototype-master/src/custom_fields.py": {
        "Related.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Callable[[recidiviz.persistence.database.session.Session], bool]",
                    "typing.Callable[recidiviz.persistence.database.session.Session, bool]",
                    "Optional[List[Any]]",
                    "list[typing.Any]"
                ]
            }
        },
        "Related.__repr__": {
            "name": "__repr__",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Related._deserialize": {
            "name": "_deserialize",
            "location": 16,
            "return": [
                "str",
                "list",
                "int",
                "Optional[int]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bytes",
                    "typing.Sequence[dict[str, typing.Any]]",
                    "typing.Iterable[str]",
                    "Sequence[Dict[str, Any]]",
                    "pyspark.sql.Row",
                    "Iterable[str]",
                    "List['Product']"
                ],
                "attr": [
                    "dict",
                    "str",
                    "dict[, ]"
                ],
                "data": [
                    "dict",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "RelatedMany.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "related": [
                    "sqlalchemy.sql.schema.Table"
                ],
                "bridge": [
                    "sqlalchemy.sql.schema.Table"
                ],
                "source_column": [
                    "str"
                ],
                "destination_column": [
                    "str"
                ]
            }
        },
        "RelatedMany.__repr__": {
            "name": "__repr__",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelatedMany._deserialize": {
            "name": "_deserialize",
            "location": 35,
            "return": [
                "RelatedJob"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Dict[Hashable, Any]",
                    "dict[typing.Hashable, typing.Any]",
                    "Optional[str]",
                    "None",
                    "Optional[bool]",
                    "bool"
                ],
                "attr": [
                    "dict",
                    "str",
                    "dict[, ]"
                ],
                "data": [
                    "dict",
                    "str",
                    "dict[, ]"
                ]
            }
        }
    },
    "data-transform-prototype-master/src/database.py": {
        "init_database": {
            "name": "init_database",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "data-transform-prototype-master/src/transformer.py": {
        "topological_sort_jobs": {
            "name": "topological_sort_jobs",
            "location": 15,
            "return": [
                "list"
            ],
            "arguments": {
                "job_graph": [
                    "dict[, ]",
                    "Awaitable",
                    "dict",
                    "int",
                    "T"
                ]
            }
        },
        "transformation": {
            "name": "transformation",
            "location": 48,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "source": [
                    "str"
                ],
                "destination": [
                    "sqlalchemy.sql.schema.Table"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "topological_sort_jobs.search_dependencies": {
            "name": "search_dependencies",
            "location": 28,
            "return": [
                "None",
                "Union[tuple, list]",
                "Set[str]",
                "Iterator[object]"
            ],
            "arguments": {
                "node": [],
                "job_graph": []
            }
        },
        "transformation._decorate": {
            "name": "_decorate",
            "location": 49,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "marshmallow.Schema",
                    "dict",
                    "Dict[str, str]",
                    "str"
                ]
            }
        }
    },
    "data-transform-prototype-master/src/transformer_test.py": {
        "test_topological_sort_jobs": {
            "name": "test_topological_sort_jobs",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_topological_sort_jobs_cycle": {
            "name": "test_topological_sort_jobs_cycle",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "data-transform-prototype-master/src/transform_quizzes.py": {
        "QuestionSchema.deserialize_subjects": {
            "name": "deserialize_subjects",
            "location": 26,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "dict",
                    "pyspark.sql.DataFrame",
                    "Dict[str, Any]",
                    "Dict[str, List[Any]]",
                    "Iterable[str]",
                    "\"ks.Series\""
                ]
            }
        },
        "QuestionSchema.set_data": {
            "name": "set_data",
            "location": 31,
            "return": [
                "Dict[str, List[int]]",
                "dict",
                "bytes",
                "str",
                "Optional[float]",
                "IO[bytes]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str"
                ]
            }
        },
        "QuizSchema.set_data": {
            "name": "set_data",
            "location": 45,
            "return": [
                "Dict[str, List[int]]",
                "dict",
                "bytes",
                "str",
                "Optional[float]",
                "IO[bytes]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "SubjectSchema.set_data": {
            "name": "set_data",
            "location": 61,
            "return": [
                "Dict[str, List[int]]",
                "dict",
                "bytes",
                "str",
                "Optional[float]",
                "IO[bytes]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str"
                ]
            }
        }
    },
    "data-transform-prototype-master/src/transform_quizzes_test.py": {
        "test_quiz_schema_load": {
            "name": "test_quiz_schema_load",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_transform_raw_data": {
            "name": "test_transform_raw_data",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "data-transform-prototype-master/src/__init__.py": {}
}
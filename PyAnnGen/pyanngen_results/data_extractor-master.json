{
    "data_extractor-master/noxfile.py": {
        "venv_setup_on_create": {
            "name": "venv_setup_on_create",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "str"
                ],
                "install": [
                    "str",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "coverage_test": {
            "name": "coverage_test",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "session": [
                    "str"
                ],
                "extractor_backend": [
                    "str"
                ]
            }
        },
        "coverage_report": {
            "name": "coverage_report",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "session": [
                    "str"
                ]
            }
        },
        "test_mypy_plugin": {
            "name": "test_mypy_plugin",
            "location": 79,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "session": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "build_readme": {
            "name": "build_readme",
            "location": 98,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "session": []
            }
        }
    },
    "data_extractor-master/data_extractor/core.py": {
        "_find_line_info_of_attr_in_source": {
            "name": "_find_line_info_of_attr_in_source",
            "location": 21,
            "return": [
                "_LineInfo"
            ],
            "arguments": {
                "frame": [
                    "Optional[types.FrameType]"
                ],
                "key": [
                    "str"
                ],
                "attr": [
                    "AbstractComplexExtractor"
                ]
            }
        },
        "_check_field_overwrites_bases_property": {
            "name": "_check_field_overwrites_bases_property",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "object"
                ],
                "name": [
                    "str"
                ],
                "bases": [
                    "Tuple[object]"
                ],
                "key": [
                    "str"
                ],
                "attr": [
                    "AbstractComplexExtractor"
                ]
            }
        },
        "_check_field_overwrites_bases_method": {
            "name": "_check_field_overwrites_bases_method",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "object"
                ],
                "name": [
                    "str"
                ],
                "bases": [
                    "Tuple[object]"
                ],
                "key": [
                    "str"
                ],
                "attr": [
                    "AbstractComplexExtractor"
                ]
            }
        },
        "_check_field_overwrites_method": {
            "name": "_check_field_overwrites_method",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "object"
                ]
            }
        },
        "ComplexExtractorMeta.__init__": {
            "name": "__init__",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "ComplexExtractorMeta"
                ],
                "name": [
                    "str"
                ],
                "bases": [
                    "Tuple[type]"
                ],
                "attr_dict": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "AbstractSimpleExtractor.__init__": {
            "name": "__init__",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "str"
                ]
            }
        },
        "AbstractSimpleExtractor.__repr__": {
            "name": "__repr__",
            "location": 236,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractSimpleExtractor.extract": {
            "name": "extract",
            "location": 240,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "Sequence[T]",
                    "tuple",
                    "List[int]",
                    "str"
                ]
            }
        },
        "AbstractSimpleExtractor.extract_first": {
            "name": "extract_first",
            "location": 254,
            "return": [
                "list",
                "bool",
                "types.Resolver",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "str",
                    "int",
                    "T"
                ],
                "default": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "AbstractComplexExtractor.extract": {
            "name": "extract",
            "location": 291,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "Sequence[T]",
                    "tuple",
                    "List[int]",
                    "str"
                ]
            }
        }
    },
    "data_extractor-master/data_extractor/exceptions.py": {
        "ExprError.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extractor": [
                    "data_extractor.core.AbstractSimpleExtractor"
                ],
                "exc": [
                    "Exception"
                ]
            }
        },
        "ExprError.__str__": {
            "name": "__str__",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExprError.__repr__": {
            "name": "__repr__",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtractError.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extractor": [
                    "Union[(data_extractor.core.AbstractComplexExtractor, data_extractor.core.AbstractSimpleExtractor)]"
                ],
                "element": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]",
                    "Dict[str, Tuple[str, str]]",
                    "dict[str, tuple[typing.Union[str,str]]]",
                    "int",
                    "list[]",
                    "Optional[List]",
                    "None"
                ]
            }
        },
        "ExtractError.__repr__": {
            "name": "__repr__",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtractError._append": {
            "name": "_append",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extractor": [
                    "Union[(data_extractor.core.AbstractComplexExtractor, data_extractor.core.AbstractSimpleExtractor)]"
                ]
            }
        },
        "ExtractError._trace_repr": {
            "name": "_trace_repr",
            "location": 63,
            "return": [
                "typing.Text",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "data_extractor-master/data_extractor/item.py": {
        "Field.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extractor": [
                    "data_extractor.core.AbstractSimpleExtractor"
                ],
                "name": [
                    "str"
                ],
                "default": [
                    "str",
                    "Optional[str]",
                    "Optional[Any]"
                ],
                "is_many": [
                    "bool"
                ],
                "type": [
                    "builtins.type[RV]"
                ],
                "convertor": [
                    "Callable[([Any], RV)]"
                ]
            }
        },
        "Field.__class_getitem__": {
            "name": "__class_getitem__",
            "location": 81,
            "return": [
                "set[str]",
                "str",
                "dict[, ]",
                "typing.Type",
                "Union[type, Tuple[type, ...]]",
                "Mapping[str, Any]",
                "Dict[str, Any]",
                "Union[int, bytes]",
                "type"
            ],
            "arguments": {
                "cls": [
                    "Field"
                ],
                "rv_type": [
                    "builtins.type[RV]"
                ]
            }
        },
        "Field.__repr__": {
            "name": "__repr__",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.extract": {
            "name": "extract",
            "location": 120,
            "return": [
                "Union[(List[RV], RV)]"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "List[int]",
                    "bytes",
                    "list[int]",
                    "str",
                    "Sequence[T]",
                    "typing.Sequence[T]"
                ]
            }
        },
        "Field._extract": {
            "name": "_extract",
            "location": 140,
            "return": [
                "RV"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "typing.Sequence[T]",
                    "Sequence[T]",
                    "typing.Type",
                    "Type[object]",
                    "Type",
                    "type"
                ]
            }
        },
        "Field.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 151,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "memo": [
                    "dict[, ]",
                    "dict",
                    "int",
                    "list[str]",
                    "List[str]",
                    "torch.nn.utils.rnn.PackedSequence"
                ]
            }
        },
        "Item.__init__": {
            "name": "__init__",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extractor": [
                    "str",
                    "None",
                    "Iterable",
                    "typing.Iterable[]",
                    "typing.Callable[typing.Any, str]",
                    "Dict[str, str]",
                    "List[str]",
                    "Callable[[Any], str]",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "None",
                    "Iterable",
                    "typing.Iterable[]",
                    "typing.Callable[typing.Any, str]",
                    "Dict[str, str]",
                    "List[str]",
                    "Callable[[Any], str]",
                    "Optional[str]"
                ],
                "default": [
                    "str",
                    "Iterable",
                    "Dict[str, str]",
                    "List[str]",
                    "Callable[[Any], str]",
                    "Optional[str]"
                ],
                "is_many": [
                    "bool",
                    "str",
                    "Iterable",
                    "Dict[str, str]",
                    "List[str]",
                    "Callable[[Any], str]",
                    "Optional[str]"
                ],
                "type": [
                    "str",
                    "None",
                    "Iterable",
                    "typing.Iterable[]",
                    "typing.Callable[typing.Any, str]",
                    "Dict[str, str]",
                    "List[str]",
                    "Callable[[Any], str]",
                    "Optional[str]"
                ],
                "convertor": [
                    "str",
                    "None",
                    "Iterable",
                    "typing.Iterable[]",
                    "typing.Callable[typing.Any, str]",
                    "Dict[str, str]",
                    "List[str]",
                    "Callable[[Any], str]",
                    "Optional[str]"
                ]
            }
        },
        "Item.default_convertor": {
            "name": "default_convertor",
            "location": 187,
            "return": [
                "RV"
            ],
            "arguments": {
                "self": [],
                "rv": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Item._extract": {
            "name": "_extract",
            "location": 195,
            "return": [
                "RV"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "Item.field_names": {
            "name": "field_names",
            "location": 211,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[Item]"
                ]
            }
        },
        "Item.simplify": {
            "name": "simplify",
            "location": 217,
            "return": [
                "data_extractor.core.AbstractSimpleExtractor"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.__class_getitem__.new_init": {
            "name": "new_init",
            "location": 82,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "extractor": [
                    "None",
                    "str",
                    "type",
                    "cmk.utils.tags.TagGroup",
                    "Optional[str]"
                ],
                "name": [
                    "None",
                    "str",
                    "type",
                    "cmk.utils.tags.TagGroup",
                    "Optional[str]"
                ],
                "default": [
                    "str",
                    "type",
                    "cmk.utils.tags.TagGroup",
                    "Optional[str]"
                ],
                "is_many": [
                    "bool",
                    "str",
                    "type",
                    "cmk.utils.tags.TagGroup",
                    "Optional[str]"
                ],
                "type": [
                    "None",
                    "str",
                    "type",
                    "cmk.utils.tags.TagGroup",
                    "Optional[str]"
                ],
                "convertor": [
                    "None",
                    "str",
                    "type",
                    "cmk.utils.tags.TagGroup",
                    "Optional[str]"
                ]
            }
        },
        "Item.simplify.extract": {
            "name": "extract",
            "location": 230,
            "return": [
                "Union[(List[RV], RV)]"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "str",
                    "list",
                    "List[Dict]"
                ]
            }
        },
        "Item.simplify.getter": {
            "name": "getter",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "tuple",
                    "Mapping[str, Any]",
                    "Optional[str]"
                ]
            }
        }
    },
    "data_extractor-master/data_extractor/json.py": {
        "JSONExtractor.__new__": {
            "name": "__new__",
            "location": 31,
            "return": [
                "JSONExtractor"
            ],
            "arguments": {
                "cls": [
                    "Type[_TJSONExtractor]"
                ]
            }
        },
        "JSONExtractor.extract": {
            "name": "extract",
            "location": 55,
            "return": [
                "typing.Any",
                "None"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "Sequence[T]",
                    "typing.Sequence[T]",
                    "tuple",
                    "str",
                    "tuple[]",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "JSONPathRWExtractor.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "str"
                ]
            }
        },
        "JSONPathRWExtractor.extract": {
            "name": "extract",
            "location": 98,
            "return": [
                "list[]",
                "int",
                "List[Dict[str, str]]",
                "list",
                "Tuple[int, int]",
                "Set[str]",
                "Optional[dict]",
                "Sequence[Any]",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "typing.Type",
                    "syntax.Expr",
                    "str",
                    "Type",
                    "dict[, ]",
                    "dict"
                ]
            }
        },
        "JSONPathRWExtExtractor.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "str"
                ]
            }
        },
        "JSONPathExtractor.__init__": {
            "name": "__init__",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "str"
                ]
            }
        },
        "JSONPathExtractor.extract": {
            "name": "extract",
            "location": 188,
            "return": [
                "str",
                "Iterable[T]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "str",
                    "list",
                    "list[]",
                    "List[Dict]",
                    "list[dict[, ]]"
                ]
            }
        }
    },
    "data_extractor-master/data_extractor/lxml.py": {
        "XPathExtractor.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "str"
                ]
            }
        },
        "XPathExtractor.extract": {
            "name": "extract",
            "location": 49,
            "return": [
                "int",
                "Callable",
                "list[typing.Union[int,float,list[],list[typing.Callable[[], bool]],tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal]],typing.Type]]",
                "str",
                "float",
                "list[]",
                "list[typing.Callable[[], bool]]",
                "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal]]",
                "typing.Type"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "str",
                    "list",
                    "list[]",
                    "List[Dict]",
                    "list[dict[, ]]"
                ]
            }
        },
        "CSSExtractor.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "str"
                ]
            }
        },
        "CSSExtractor.extract": {
            "name": "extract",
            "location": 115,
            "return": [
                "str",
                "Iterable[int]"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "str",
                    "list",
                    "list[]",
                    "List[Dict]",
                    "list[dict[, ]]"
                ]
            }
        },
        "TextCSSExtractor.extract": {
            "name": "extract",
            "location": 140,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "str",
                    "Element",
                    "typing.Callable[, ]",
                    "Callable"
                ]
            }
        },
        "AttrCSSExtractor.__init__": {
            "name": "__init__",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "str"
                ],
                "attr": [
                    "str"
                ]
            }
        },
        "AttrCSSExtractor.__repr__": {
            "name": "__repr__",
            "location": 174,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AttrCSSExtractor.extract": {
            "name": "extract",
            "location": 177,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "str",
                    "Element",
                    "dict[, ]",
                    "typing.Callable[[], None]",
                    "dict",
                    "dict[str, typing.Any]",
                    "Callable[[], None]",
                    "typing.Type",
                    "Dict[str, Any]",
                    "Type[T]"
                ]
            }
        }
    },
    "data_extractor-master/data_extractor/utils.py": {
        "is_extractor": {
            "name": "is_extractor",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "int"
                ]
            }
        },
        "is_simple_extractor": {
            "name": "is_simple_extractor",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "int"
                ]
            }
        },
        "is_complex_extractor": {
            "name": "is_complex_extractor",
            "location": 67,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "int"
                ]
            }
        },
        "getframe": {
            "name": "getframe",
            "location": 77,
            "return": [
                "Optional[types.FrameType]"
            ],
            "arguments": {
                "depth": [
                    "int"
                ]
            }
        },
        "_missing_dependency": {
            "name": "_missing_dependency",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "dependency": [
                    "str"
                ]
            }
        },
        "__Sentinel.__repr__": {
            "name": "__repr__",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LazyStr.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable[([], str)]"
                ]
            }
        },
        "LazyStr.__str__": {
            "name": "__str__",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Property.__set_name__": {
            "name": "__set_name__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "typing.Type",
                    "str",
                    "Type",
                    "Type['Signature']"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "Property.__get__": {
            "name": "__get__",
            "location": 121,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "dict",
                    "dict[, ]",
                    "Optional[tuple]",
                    "tuple[]",
                    "Optional[float]",
                    "None",
                    "float"
                ],
                "cls": [
                    "Type[Union[(data_extractor.core.AbstractComplexExtractor, data_extractor.core.AbstractSimpleExtractor)]]"
                ]
            }
        },
        "Property.__set__": {
            "name": "__set__",
            "location": 134,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int"
                ],
                "value": [
                    "T"
                ]
            }
        },
        "Property.change_internal_value": {
            "name": "change_internal_value",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "Union[(data_extractor.core.AbstractComplexExtractor, data_extractor.core.AbstractSimpleExtractor)]"
                ],
                "property_name": [
                    "str"
                ],
                "value": [
                    "T"
                ]
            }
        }
    },
    "data_extractor-master/data_extractor/__init__.py": {},
    "data_extractor-master/data_extractor/contrib/mypy/__init__.py": {
        "plugin": {
            "name": "plugin",
            "location": 429,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "version": [
                    "str"
                ]
            }
        },
        "RelationshipVisitor.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelationshipVisitor.is_data_extractor_cls": {
            "name": "is_data_extractor_cls",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Optional[int]",
                    "Optional[float]",
                    "str"
                ]
            }
        },
        "RelationshipVisitor.is_making_extractor_assignment_stmt": {
            "name": "is_making_extractor_assignment_stmt",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "stmt": [
                    "str",
                    "int"
                ]
            }
        },
        "RelationshipVisitor.locate_field_in_classdef": {
            "name": "locate_field_in_classdef",
            "location": 95,
            "return": [
                "bool",
                "Optional[str]",
                "str",
                "Optional[mypy.nodes.TypeInfo]",
                "mypy.errors.Errors",
                "Type"
            ],
            "arguments": {
                "self": [],
                "defn": [
                    "str",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "RelationshipVisitor.anal_assignment_stmt": {
            "name": "anal_assignment_stmt",
            "location": 108,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "stmt": [
                    "str",
                    "int",
                    "logging.Logger"
                ]
            }
        },
        "RelationshipVisitor.visit_assignment_stmt": {
            "name": "visit_assignment_stmt",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "mypy.visitor.ExpressionVisitor[T]",
                    "mypy.nodes.DelStmt"
                ]
            }
        },
        "DataExtractorPlugin.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "options": [
                    "mypy.options.Options",
                    "int"
                ]
            }
        },
        "DataExtractorPlugin.get_current_code": {
            "name": "get_current_code",
            "location": 150,
            "return": [
                "bool",
                "Optional[str]",
                "int",
                "Type"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "bool"
                ]
            }
        },
        "DataExtractorPlugin.anal_code": {
            "name": "anal_code",
            "location": 157,
            "return": [
                "Union[str, List[str]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str"
                ]
            }
        },
        "DataExtractorPlugin.check_field_generic_type": {
            "name": "check_field_generic_type",
            "location": 171,
            "return": [
                "mypy.types.Type"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "mypy.plugin.ClassDefContext",
                    "bool",
                    "mypy.plugin.FunctionContext",
                    "mypy.plugin.MethodContext"
                ]
            }
        },
        "DataExtractorPlugin.apply_any_generic": {
            "name": "apply_any_generic",
            "location": 184,
            "return": [
                "int",
                "Optional[Dict[str, str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Callable",
                    "Type",
                    "mypy.types.Instance",
                    "type",
                    "bool",
                    "Union",
                    "List[List[mypy.nodes.Expression]]"
                ]
            }
        },
        "DataExtractorPlugin.check_is_many": {
            "name": "check_is_many",
            "location": 189,
            "return": [
                "dict",
                "Optional[Dict[str, Any]]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "mypy.plugin.ClassDefContext",
                    "Dict[str, Any]",
                    "mypy.plugin.FunctionContext"
                ]
            }
        },
        "DataExtractorPlugin.prepare_type_annotations": {
            "name": "prepare_type_annotations",
            "location": 197,
            "return": [
                "mypy.types.Type"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "Dict[str, Any]",
                    "mypy.plugin.AnalyzeTypeContext",
                    "mypy.plugin.FunctionContext"
                ],
                "fullname": [
                    "bool",
                    "Exception",
                    "str",
                    "int"
                ]
            }
        },
        "DataExtractorPlugin.is_extractor_cls": {
            "name": "is_extractor_cls",
            "location": 241,
            "return": [
                "str",
                "List[str]",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "int",
                    "id3c.db.types.KitRecord",
                    "\"QuerySet[MODEL]\""
                ],
                "is_item_subcls": [
                    "exporwiki.types.MissionType",
                    "Dict[str, Any]"
                ]
            }
        },
        "DataExtractorPlugin.get_function_hook": {
            "name": "get_function_hook",
            "location": 253,
            "return": [
                "str",
                "Type",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "DataExtractorPlugin.apply_is_many_on_extract_method": {
            "name": "apply_is_many_on_extract_method",
            "location": 262,
            "return": [
                "mypy.types.Type",
                "str"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "bool",
                    "mypy.plugin.FunctionContext",
                    "mypy.plugin.ClassDefContext",
                    "Dict[str, Any]"
                ],
                "fullname": [
                    "str",
                    "int"
                ]
            }
        },
        "DataExtractorPlugin.is_extract_method": {
            "name": "is_extract_method",
            "location": 297,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "DataExtractorPlugin.apply_extract_method": {
            "name": "apply_extract_method",
            "location": 303,
            "return": [
                "int",
                "List[str]",
                "List[int]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "mypy.plugin.FunctionContext",
                    "mypy.plugin.ClassDefContext"
                ],
                "fullname": [
                    "mypy.plugin.MethodContext",
                    "mypy.plugin.FunctionContext",
                    "mypy.plugin.ClassDefContext"
                ]
            }
        },
        "DataExtractorPlugin.get_method_signature_hook": {
            "name": "get_method_signature_hook",
            "location": 339,
            "return": [
                "str",
                "Optional[Container[str]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str",
                    "int"
                ]
            }
        },
        "DataExtractorPlugin.get_name_arg": {
            "name": "get_name_arg",
            "location": 346,
            "return": [
                "str",
                "type"
            ],
            "arguments": {
                "self": [],
                "call": [
                    "str",
                    "Union[str, Pattern[str]]",
                    "Callable[..., Awaitable[None]]"
                ]
            }
        },
        "DataExtractorPlugin.prepare_typeddict": {
            "name": "prepare_typeddict",
            "location": 357,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "ctx": [],
                "fullname": [
                    "str",
                    "Exception",
                    "mypy.plugin.FunctionContext"
                ]
            }
        },
        "DataExtractorPlugin.get_dynamic_class_hook": {
            "name": "get_dynamic_class_hook",
            "location": 418,
            "return": [
                "str",
                "tuple",
                "int"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "data_extractor-master/docs/source/conf.py": {},
    "data_extractor-master/scripts/build_readme.py": {
        "build_readme": {
            "name": "build_readme",
            "location": 23,
            "return": [
                "str",
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]",
                "bytes"
            ],
            "arguments": {
                "source_file": [
                    "pathlib.Path",
                    "bool",
                    "Union[pathlib.Path, str]",
                    "path.Path",
                    "Optional[str]"
                ],
                "target_file": [
                    "str",
                    "pathlib.Path",
                    "bool"
                ]
            }
        },
        "build_readme.string2lines": {
            "name": "string2lines",
            "location": 29,
            "return": [
                "str",
                "float",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "build_readme.run": {
            "name": "run",
            "location": 40,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "data_extractor-master/scripts/export_requirements_txt.py": {
        "fix_end_of_file": {
            "name": "fix_end_of_file",
            "location": 11,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "pdm_export": {
            "name": "pdm_export",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "filename": [
                    "str"
                ],
                "format": [
                    "enum.Enum"
                ]
            }
        }
    },
    "data_extractor-master/tests/conftest.py": {
        "json_extractor_backend": {
            "name": "json_extractor_backend",
            "location": 30,
            "return": [
                "None",
                "bytes",
                "str"
            ],
            "arguments": {
                "request": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "None"
                ]
            }
        },
        "json0": {
            "name": "json0",
            "location": 41,
            "return": [
                "dict[typing.Text, typing.Union[dict[typing.Text, typing.Union[list[dict[typing.Text, typing.Union[int,typing.Text]]],int]],int]]",
                "str",
                "Tuple[str, str]",
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "stack_frame_support": {
            "name": "stack_frame_support",
            "location": 61,
            "return": [
                "",
                "typing.Generator[bool]"
            ],
            "arguments": {
                "request": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "data_extractor-master/tests/test_exceptions.py": {
        "test_no_needed_packages": {
            "name": "test_no_needed_packages",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_exception_trace": {
            "name": "test_exception_trace",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "json0": []
            }
        }
    },
    "data_extractor-master/tests/test_generic_item.py": {
        "test_field_with_type": {
            "name": "test_field_with_type",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_field_with_convertor": {
            "name": "test_field_with_convertor",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_item_with_type": {
            "name": "test_item_with_type",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "data_extractor-master/tests/test_item.py": {
        "element0": {
            "name": "element0",
            "location": 39,
            "return": [
                "str",
                "float"
            ],
            "arguments": {}
        },
        "item_property": {
            "name": "item_property",
            "location": 63,
            "return": [
                "bool",
                "int",
                "float",
                "Optional[Tuple[int, int]]",
                "str"
            ],
            "arguments": {
                "request": [
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "test_field_extract": {
            "name": "test_field_extract",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "element0": [
                    "list[T]",
                    "List[mypy.types.Type]",
                    "dict[, ]",
                    "dict",
                    "int",
                    "typing.Callable[, ]",
                    "Callable",
                    "list[]",
                    "list",
                    "vimiv.utils.customtypes.FuncT"
                ],
                "Extractor": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "str",
                    "Union[bool, str]",
                    "None",
                    "bool",
                    "Type[T]",
                    "type",
                    "typing.Type"
                ],
                "expr": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "str",
                    "Union[bool, str]",
                    "None",
                    "bool",
                    "Type[T]",
                    "type",
                    "typing.Type"
                ],
                "expect": [
                    "list[T]",
                    "List[mypy.types.Type]",
                    "dict[, ]",
                    "dict",
                    "int",
                    "typing.Callable[, ]",
                    "Callable",
                    "list[]",
                    "list",
                    "vimiv.utils.customtypes.FuncT"
                ]
            }
        },
        "test_field_extract_with_is_many": {
            "name": "test_field_extract_with_is_many",
            "location": 103,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "element0": [
                    "typing.Type",
                    "type",
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "types.FunctionType",
                    "types.MethodType",
                    "Callable",
                    "dict"
                ],
                "Extractor": [
                    "bool",
                    "str"
                ],
                "expr": [
                    "bool",
                    "str"
                ],
                "expect": [
                    "typing.Type",
                    "type",
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "types.FunctionType",
                    "types.MethodType",
                    "Callable",
                    "dict"
                ]
            }
        },
        "test_field_extract_with_default": {
            "name": "test_field_extract_with_default",
            "location": 116,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "element0": [
                    "typing.Callable[, ]",
                    "Callable",
                    "typing.Type",
                    "dict[, ]",
                    "type",
                    "types.FunctionType",
                    "types.MethodType",
                    "dict"
                ],
                "Extractor": [
                    "list[str]",
                    "mypy.types.Type",
                    "str",
                    "List[str]",
                    "typing.Mapping",
                    "Mapping[rflx.model.Field, rflx.model.Type]"
                ],
                "expr": [
                    "list[str]",
                    "mypy.types.Type",
                    "str",
                    "List[str]",
                    "typing.Mapping",
                    "Mapping[rflx.model.Field, rflx.model.Type]"
                ],
                "expect": [
                    "List[str]",
                    "list[str]",
                    "str",
                    "Mapping[rflx.model.Field, rflx.model.Type]",
                    "typing.Mapping",
                    "type",
                    "typing.Type",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]",
                    "None"
                ]
            }
        },
        "test_field_extract_without_default": {
            "name": "test_field_extract_without_default",
            "location": 129,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "element0": [
                    "int",
                    "bytes"
                ],
                "Extractor": [
                    "list[T]",
                    "int",
                    "List[mypy.types.Type]",
                    "types.GraphQLType"
                ],
                "expr": [
                    "list[T]",
                    "int",
                    "List[mypy.types.Type]",
                    "types.GraphQLType"
                ]
            }
        },
        "test_field_parameters_conflict": {
            "name": "test_field_parameters_conflict",
            "location": 141,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_field_xpath_extract_result_not_list": {
            "name": "test_field_xpath_extract_result_not_list",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "element0": [
                    "Callable",
                    "typing.Callable[, ]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "element1": {
            "name": "element1",
            "location": 153,
            "return": [
                "str",
                "float"
            ],
            "arguments": {}
        },
        "Article0": {
            "name": "Article0",
            "location": 177,
            "return": [
                "Article",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_item_extract": {
            "name": "test_item_extract",
            "location": 186,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "element1": [
                    "str",
                    "Set[str]",
                    "int",
                    "set[str]",
                    "Hashable",
                    "typing.Hashable"
                ],
                "Article0": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_item_extract_without_is_many": {
            "name": "test_item_extract_without_is_many",
            "location": 195,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "element1": [
                    "str",
                    "int"
                ],
                "Article0": [
                    "str",
                    "int"
                ]
            }
        },
        "element2": {
            "name": "element2",
            "location": 204,
            "return": [
                "str",
                "float"
            ],
            "arguments": {}
        },
        "test_item_extract_failure_when_last_field_missing": {
            "name": "test_item_extract_failure_when_last_field_missing",
            "location": 226,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "element2": [
                    "int",
                    "List[int]",
                    "list[int]"
                ],
                "Article0": [
                    "typing.Callable[list[], None]",
                    "int",
                    "Callable[[list], None]",
                    "cmk.utils.structured_data.StructuredDataTree"
                ]
            }
        },
        "test_item_extract_success_without_is_many_when_last_field_missing": {
            "name": "test_item_extract_success_without_is_many_when_last_field_missing",
            "location": 239,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "element2": [
                    "str",
                    "list[str]",
                    "server.types.RoundMetrics",
                    "List[str]"
                ],
                "Article0": [
                    "str",
                    "list[str]",
                    "server.types.RoundMetrics",
                    "List[str]"
                ]
            }
        },
        "test_complex_item_extract_xml_data": {
            "name": "test_complex_item_extract_xml_data",
            "location": 251,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_complex_item_extract_json_data": {
            "name": "test_complex_item_extract_json_data",
            "location": 356,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "json0": []
            }
        },
        "test_misplacing": {
            "name": "test_misplacing",
            "location": 395,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_field_overwrites_item_property_common": {
            "name": "test_field_overwrites_item_property_common",
            "location": 404,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stack_frame_support": [
                    "bool"
                ]
            }
        },
        "test_field_overwrites_item_property_oneline": {
            "name": "test_field_overwrites_item_property_oneline",
            "location": 427,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stack_frame_support": [
                    "bool"
                ]
            }
        },
        "test_type_creation": {
            "name": "test_type_creation",
            "location": 452,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_field_overwrites_item_parameter_type_creation": {
            "name": "test_field_overwrites_item_parameter_type_creation",
            "location": 457,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stack_frame_support": [],
                "item_property": [
                    "typing.Callable[A, typing.Any]",
                    "raiden.utils.Iterator[raiden.utils.Port]",
                    "raiden.utils.Callable",
                    "Callable[[Any, Any], Any]"
                ]
            }
        },
        "test_field_overwrites_item_property_in_repl_by_xpath": {
            "name": "test_field_overwrites_item_property_in_repl_by_xpath",
            "location": 507,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "template": [
                    "str",
                    "Dict[str, Any]"
                ],
                "text_template": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "None",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "item_property": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "stack_frame_support": [
                    "str",
                    "Set[str]",
                    "bool",
                    "set[str]",
                    "IO[bytes]",
                    "typing.IO"
                ]
            }
        },
        "test_field_overwrites_item_property_in_repl_by_jpath": {
            "name": "test_field_overwrites_item_property_in_repl_by_jpath",
            "location": 546,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "template": [
                    "str",
                    "Dict[str, Any]"
                ],
                "text_template": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "None",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "item_property": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "stack_frame_support": [
                    "str",
                    "Set[str]",
                    "bool",
                    "set[str]",
                    "IO[bytes]",
                    "typing.IO"
                ]
            }
        },
        "test_field_overwrites_item_property_oneline_in_script": {
            "name": "test_field_overwrites_item_property_oneline_in_script",
            "location": 568,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "Optional[str]",
                    "Path",
                    "Tuple[str, str, str]",
                    "pathlib.Path"
                ],
                "stack_frame_support": [
                    "bool",
                    "pathlib.Path",
                    "str",
                    "None",
                    "Optional[bool]",
                    "types.Params"
                ],
                "template": [
                    "str",
                    "bool",
                    "dict"
                ],
                "item_property": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        },
        "test_field_overwrites_item_property_common_in_script": {
            "name": "test_field_overwrites_item_property_common_in_script",
            "location": 597,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "path.Path",
                    "Optional[str]",
                    "pathlib.Path",
                    "str"
                ],
                "stack_frame_support": [
                    "bool",
                    "List[str]",
                    "list[str]"
                ],
                "item_property": [
                    "Optional[Exception]",
                    "Exception",
                    "TextIO",
                    "None",
                    "pathlib.Path",
                    "typing.TextIO"
                ]
            }
        },
        "test_avoid_field_overwriting_item_parameter": {
            "name": "test_avoid_field_overwriting_item_parameter",
            "location": 628,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "json0": [],
                "stack_frame_support": [
                    "str"
                ]
            }
        },
        "test_special_field_name": {
            "name": "test_special_field_name",
            "location": 646,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "json0": [
                    "pathlib.Path"
                ]
            }
        },
        "test_special_field_in_the_nested_class_definition": {
            "name": "test_special_field_in_the_nested_class_definition",
            "location": 658,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "json0": []
            }
        },
        "json1": {
            "name": "json1",
            "location": 678,
            "return": [
                "dict[typing.Text, typing.Union[int,typing.Text]]",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "is_many": {
            "name": "is_many",
            "location": 689,
            "return": [
                "str",
                "int",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "request": [
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "test_item_extractor_is_none": {
            "name": "test_item_extractor_is_none",
            "location": 694,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "json1": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "None",
                    "Optional[bytes]",
                    "bytes"
                ],
                "is_many": []
            }
        },
        "test_nested_item_extractor_is_none": {
            "name": "test_nested_item_extractor_is_none",
            "location": 709,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "json1": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "is_many": [
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "simplify_first": {
            "name": "simplify_first",
            "location": 740,
            "return": [
                "int",
                "list"
            ],
            "arguments": {
                "request": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_simplify": {
            "name": "test_simplify",
            "location": 745,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "json0": [],
                "simplify_first": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_simplified_item_extractor_is_none": {
            "name": "test_simplified_item_extractor_is_none",
            "location": 773,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "json0": [],
                "simplify_first": [
                    "pathlib.Path"
                ]
            }
        },
        "test_inheritance": {
            "name": "test_inheritance",
            "location": 799,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "json0": []
            }
        },
        "test_field_overwrites_bases_method_in_item": {
            "name": "test_field_overwrites_bases_method_in_item",
            "location": 813,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stack_frame_support": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_field_overwrites_method_in_item": {
            "name": "test_field_overwrites_method_in_item",
            "location": 838,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stack_frame_support": []
            }
        },
        "test_method_overwrites_field_in_item": {
            "name": "test_method_overwrites_field_in_item",
            "location": 864,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stack_frame_support": []
            }
        },
        "test_field_overwrites_method_in_item_in_repl": {
            "name": "test_field_overwrites_method_in_item_in_repl",
            "location": 913,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "source_code": [
                    "str",
                    "list[str]",
                    "bytes",
                    "List[str]",
                    "list[tuple[typing.Union[str,int]]]",
                    "pathlib.Path",
                    "List[Tuple[str, int]]"
                ],
                "stack_frame_support": [
                    "str"
                ]
            }
        },
        "test_field_overwrites_bases_method_in_item_in_repl": {
            "name": "test_field_overwrites_bases_method_in_item_in_repl",
            "location": 946,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "source_code": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "List[str]",
                    "list[str]"
                ],
                "text": [
                    "str"
                ],
                "stack_frame_support": [
                    "str",
                    "Type[Any]",
                    "typing.Type",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_field_overwrites_bases_method_in_item_in_script": {
            "name": "test_field_overwrites_bases_method_in_item_in_script",
            "location": 992,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "bool",
                    "str",
                    "edgar_code.types.PathLike"
                ],
                "source_code": [
                    "str",
                    "int",
                    "Exception",
                    "bool"
                ],
                "lineno": [
                    "str",
                    "Optional[Exception]",
                    "Exception",
                    "bool",
                    "FrozenSet[str]",
                    "None",
                    "dict",
                    "frozenset",
                    "dict[, ]"
                ],
                "offset": [
                    "str",
                    "Optional[Exception]",
                    "Exception",
                    "bool",
                    "FrozenSet[str]",
                    "None",
                    "dict",
                    "frozenset",
                    "dict[, ]"
                ],
                "text": [
                    "str"
                ],
                "stack_frame_support": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "typing.Iterable[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_field_overwrites_method_in_item_in_script": {
            "name": "test_field_overwrites_method_in_item_in_script",
            "location": 1063,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "bool",
                    "str",
                    "edgar_code.types.PathLike"
                ],
                "source_code": [
                    "str",
                    "int",
                    "Exception",
                    "bool"
                ],
                "lineno": [
                    "str",
                    "bool",
                    "dict[tuple[typing.Union[str,str]], int]",
                    "int",
                    "Dict[Tuple[str, str], int]"
                ],
                "offset": [
                    "str",
                    "bool",
                    "dict[tuple[typing.Union[str,str]], int]",
                    "int",
                    "Dict[Tuple[str, str], int]"
                ],
                "text": [
                    "str",
                    "int",
                    "list",
                    "list[]"
                ],
                "stack_frame_support": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "typing.Iterable[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_avoid_method_overwriting_field": {
            "name": "test_avoid_method_overwriting_field",
            "location": 1088,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stack_frame_support": []
            }
        },
        "test_avoid_field_overwriting_method": {
            "name": "test_avoid_field_overwriting_method",
            "location": 1120,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stack_frame_support": []
            }
        },
        "test_avoid_field_overwriting_bases_method": {
            "name": "test_avoid_field_overwriting_bases_method",
            "location": 1153,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stack_frame_support": [
                    "str"
                ]
            }
        },
        "test_simplified_item_extract_error": {
            "name": "test_simplified_item_extract_error",
            "location": 1181,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "len_extractors_stack": [
                    "dict",
                    "bytes",
                    "dict[, ]"
                ],
                "target": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "bool",
                    "list[]",
                    "list",
                    "dict[str, dict[, ]]",
                    "Dict[str, dict]",
                    "dict[int, int]",
                    "Dict[int, int]",
                    "Dict[str, Dict]"
                ]
            }
        },
        "test_simplified_item_with_default_extract_error": {
            "name": "test_simplified_item_with_default_extract_error",
            "location": 1209,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "str",
                    "dict[, ]"
                ],
                "len_extractors_stack": [
                    "dict",
                    "bytes",
                    "dict[, ]"
                ],
                "target": [
                    "bool",
                    "str",
                    "dict[, ]",
                    "dict",
                    "list[]",
                    "list",
                    "dict[str, dict[, ]]",
                    "Dict[str, dict]",
                    "dict[int, int]",
                    "Dict[int, int]",
                    "list[int]",
                    "Dict[str, Dict]",
                    "List[int]"
                ]
            }
        },
        "test_simplified_item_extract_first_error": {
            "name": "test_simplified_item_extract_first_error",
            "location": 1244,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "data": [
                    "float",
                    "bool"
                ],
                "len_extractors_stack": [
                    "int",
                    "tuple[str]",
                    "str",
                    "bool",
                    "torch.utils.data.DataLoader",
                    "Tuple[str]"
                ],
                "target": [
                    "float",
                    "int",
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ],
                "default": [
                    "float",
                    "bool"
                ]
            }
        },
        "test_simplified_item_extract_first_with_default": {
            "name": "test_simplified_item_extract_first_with_default",
            "location": 1265,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "list[str]",
                    "Optional[List[str]]",
                    "None",
                    "Optional[str]",
                    "Optional[List[Any]]"
                ],
                "expect": [
                    "str",
                    "list[str]",
                    "Optional[List[str]]",
                    "None",
                    "Optional[str]",
                    "Optional[List[Any]]"
                ]
            }
        },
        "test_simplified_nested_item_extract": {
            "name": "test_simplified_nested_item_extract",
            "location": 1275,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_item_remove_super_extractor": {
            "name": "test_item_remove_super_extractor",
            "location": 1289,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_avoid_method_overwriting_field.User.baz": {
            "name": "baz",
            "location": 1097,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_avoid_field_overwriting_method.User.baz": {
            "name": "baz",
            "location": 1128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_field_overwrites_method_in_item.User.baz": {
            "name": "baz",
            "location": 845,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_method_overwrites_field_in_item.User.baz": {
            "name": "baz",
            "location": 869,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "data_extractor-master/tests/test_json.py": {
        "text": {
            "name": "text",
            "location": 16,
            "return": [
                "typing.Text",
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {}
        },
        "element": {
            "name": "element",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Union[str, bytes]",
                    "bytes"
                ]
            }
        },
        "test_extract": {
            "name": "test_extract",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "element": [
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "bool",
                    "Callable",
                    "None"
                ],
                "expr": [
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "bool",
                    "Callable",
                    "None"
                ],
                "expect": [
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "bool",
                    "Callable",
                    "None"
                ]
            }
        },
        "test_extract_first": {
            "name": "test_extract_first",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "element": [
                    "Iterable[str]",
                    "typing.Iterable[str]",
                    "Type",
                    "typing.Type"
                ],
                "expr": [
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "bool",
                    "Callable",
                    "None"
                ],
                "expect": [
                    "Iterable[str]",
                    "typing.Iterable[str]",
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "test_extract_first_without_default": {
            "name": "test_extract_first_without_default",
            "location": 72,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "element": [
                    "int",
                    "str"
                ],
                "expr": [
                    "str"
                ]
            }
        },
        "test_invalid_jsonpath_expr": {
            "name": "test_invalid_jsonpath_expr",
            "location": 86,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "element": [
                    "str",
                    "bool"
                ],
                "expr": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "data_extractor-master/tests/test_lxml.py": {
        "text": {
            "name": "text",
            "location": 27,
            "return": [
                "typing.Text",
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "element": {
            "name": "element",
            "location": 52,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "test_extract": {
            "name": "test_extract",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "element": [
                    "str",
                    "int"
                ],
                "Extractor": [
                    "str",
                    "int"
                ],
                "expr": [
                    "str",
                    "int"
                ],
                "expect": [
                    "str",
                    "int"
                ]
            }
        },
        "test_extract_first": {
            "name": "test_extract_first",
            "location": 97,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "element": [
                    "float",
                    "str",
                    "Type",
                    "typing.Type"
                ],
                "Extractor": [
                    "str",
                    "int"
                ],
                "expr": [
                    "str",
                    "int"
                ],
                "expect": [
                    "float",
                    "str",
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "test_extract_first_without_default": {
            "name": "test_extract_first_without_default",
            "location": 110,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "element": [
                    "int",
                    "List[int]",
                    "list[int]",
                    "dict",
                    "dict[, ]"
                ],
                "Extractor": [
                    "List[int]",
                    "list[int]",
                    "List[T]",
                    "str",
                    "list[T]",
                    "list",
                    "list[]"
                ],
                "expr": [
                    "List[int]",
                    "list[int]",
                    "List[T]",
                    "str",
                    "list[T]",
                    "list",
                    "list[]"
                ]
            }
        },
        "test_attr_css_extract": {
            "name": "test_attr_css_extract",
            "location": 133,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "element": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]"
                ],
                "expr": [
                    "str",
                    "bool"
                ],
                "attr": [
                    "str",
                    "bool"
                ],
                "expect": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_attr_css_extract_first": {
            "name": "test_attr_css_extract_first",
            "location": 150,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "element": [
                    "float",
                    "str",
                    "Type",
                    "typing.Type",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ],
                "expr": [
                    "str",
                    "bool"
                ],
                "attr": [
                    "str",
                    "bool"
                ],
                "expect": [
                    "float",
                    "str",
                    "Type",
                    "typing.Type",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "test_attr_css_extract_first_without_default": {
            "name": "test_attr_css_extract_first_without_default",
            "location": 159,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "element": [
                    "List[int]",
                    "list[int]",
                    "dict",
                    "dict[, ]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "expr": [
                    "bool",
                    "str",
                    "BaseException"
                ],
                "attr": [
                    "bool",
                    "str",
                    "BaseException"
                ]
            }
        },
        "test_invalid_xpath_expr": {
            "name": "test_invalid_xpath_expr",
            "location": 172,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "expr": [
                    "List[Tuple[int]]",
                    "list[tuple[int]]",
                    "Tuple[List[int], int]",
                    "tuple[typing.Union[list[int],int]]",
                    "List[T]",
                    "list[T]",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "test_invalid_xpath_expr_by_XPathEvalError_from_extract": {
            "name": "test_invalid_xpath_expr_by_XPathEvalError_from_extract",
            "location": 185,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "element": [
                    "str",
                    "Dict[str, Any]",
                    "bytes",
                    "dict[str, typing.Any]",
                    "IO",
                    "typing.IO"
                ],
                "expr": [
                    "List[Tuple[int]]",
                    "list[tuple[int]]",
                    "Tuple[List[int], int]",
                    "tuple[typing.Union[list[int],int]]",
                    "List[T]",
                    "list[T]",
                    "List[int]",
                    "list[int]",
                    "list",
                    "list[]"
                ]
            }
        },
        "test_invalid_css_selector_expr": {
            "name": "test_invalid_css_selector_expr",
            "location": 201,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "element": [
                    "str",
                    "bool"
                ],
                "expr": [
                    "str"
                ]
            }
        },
        "test_xpath_result_not_list": {
            "name": "test_xpath_result_not_list",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "element": [
                    "Callable",
                    "typing.Callable[, ]",
                    "Hashable",
                    "typing.Hashable",
                    "Union[int, float]",
                    "int",
                    "float"
                ]
            }
        }
    },
    "data_extractor-master/tests/test_utils.py": {
        "test_lazy_str": {
            "name": "test_lazy_str",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "complex_extractor": {
            "name": "complex_extractor",
            "location": 53,
            "return": [
                "int",
                "list",
                "static_frame.core.util.DepthLevelSpecifier"
            ],
            "arguments": {
                "request": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "simple_extractor": {
            "name": "simple_extractor",
            "location": 83,
            "return": [
                "int",
                "list",
                "static_frame.core.util.DepthLevelSpecifier"
            ],
            "arguments": {
                "request": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_complex_extractor_is_extractor": {
            "name": "test_complex_extractor_is_extractor",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "complex_extractor": []
            }
        },
        "test_simple_extractor_is_extractor": {
            "name": "test_simple_extractor_is_extractor",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "simple_extractor": []
            }
        },
        "test_is_complex_extractor": {
            "name": "test_is_complex_extractor",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "complex_extractor": [
                    "str",
                    "bool",
                    "Dict[str, float]",
                    "dict[str, float]"
                ]
            }
        },
        "test_is_not_complex_extractor": {
            "name": "test_is_not_complex_extractor",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "simple_extractor": [
                    "str",
                    "bool",
                    "Dict[str, float]",
                    "dict[str, float]"
                ]
            }
        },
        "test_is_simple_extractor": {
            "name": "test_is_simple_extractor",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "simple_extractor": [
                    "str",
                    "bool",
                    "Dict[str, float]",
                    "dict[str, float]"
                ]
            }
        },
        "test_is_not_simple_extractor": {
            "name": "test_is_not_simple_extractor",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "complex_extractor": [
                    "str",
                    "bool",
                    "Dict[str, float]",
                    "dict[str, float]"
                ]
            }
        },
        "test_missing_cssselect": {
            "name": "test_missing_cssselect",
            "location": 115,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_missing_lxml": {
            "name": "test_missing_lxml",
            "location": 135,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_missing_jsonpath_extractor": {
            "name": "test_missing_jsonpath_extractor",
            "location": 146,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_missing_jsonpath_rw": {
            "name": "test_missing_jsonpath_rw",
            "location": 157,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_missing_jsonpath_rw_ext": {
            "name": "test_missing_jsonpath_rw_ext",
            "location": 176,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_getframe_value_error": {
            "name": "test_getframe_value_error",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_property_accessing_error": {
            "name": "test_property_accessing_error",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_property_re_set_error": {
            "name": "test_property_re_set_error",
            "location": 202,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_property_change_internal_value_success": {
            "name": "test_property_change_internal_value_success",
            "location": 217,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_property_change_internal_value_failure": {
            "name": "test_property_change_internal_value_failure",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_lazy_str.func": {
            "name": "func",
            "location": 41,
            "return": [
                "str",
                "float",
                "Tuple[str, str]"
            ],
            "arguments": {}
        },
        "test_property_accessing_error.Bar.extract": {
            "name": "extract",
            "location": 192,
            "return": [],
            "arguments": {
                "self": [],
                "element": []
            }
        },
        "test_property_re_set_error.Bar.extract": {
            "name": "extract",
            "location": 206,
            "return": [],
            "arguments": {
                "self": [],
                "element": []
            }
        },
        "test_property_change_internal_value_success.Bar.extract": {
            "name": "extract",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "element": []
            }
        },
        "test_property_change_internal_value_failure.Bar.extract": {
            "name": "extract",
            "location": 235,
            "return": [
                "str",
                "Iterable[int]"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "str",
                    "list",
                    "List[Dict]"
                ]
            }
        }
    },
    "data_extractor-master/tests/utils.py": {
        "DumyExtractor.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "typing.Text",
                    "str",
                    "int"
                ]
            }
        },
        "DumyExtractor.extract": {
            "name": "extract",
            "location": 9,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "Sequence[T]",
                    "typing.Sequence[T]",
                    "tuple",
                    "str",
                    "tuple[]",
                    "List[int]",
                    "list[int]"
                ]
            }
        }
    },
    "data_extractor-master/tests/__init__.py": {},
    "data_extractor-master/tests/typesafety/conftest.py": {
        "pytest_collection_modifyitems": {
            "name": "pytest_collection_modifyitems",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "config": [
                    "list",
                    "list[]",
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "items": [
                    "list",
                    "list[]",
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    }
}
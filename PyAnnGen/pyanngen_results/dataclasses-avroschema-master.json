{
    "dataclasses-avroschema-master/setup.py": {},
    "dataclasses-avroschema-master/dataclasses_avroschema/avrodantic.py": {
        "AvroBaseModel.json_schema": {
            "name": "json_schema",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "typing.Callable[..., T]",
                    "Callable[..., T]",
                    "dict[, ]",
                    "tuple[]",
                    "dict",
                    "Callable",
                    "tuple",
                    "Callable[..., str]"
                ]
            }
        },
        "AvroBaseModel.asdict": {
            "name": "asdict",
            "location": 18,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvroBaseModel.validate_avro": {
            "name": "validate_avro",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvroBaseModel.parse_obj": {
            "name": "parse_obj",
            "location": 36,
            "return": [
                "Union[(Dict[(str, Any)], CT)]"
            ],
            "arguments": {
                "cls": [
                    "JsonDict"
                ],
                "data": [
                    "dict"
                ]
            }
        }
    },
    "dataclasses-avroschema-master/dataclasses_avroschema/case.py": {
        "case_item": {
            "name": "case_item",
            "location": 46,
            "return": [
                "dict"
            ],
            "arguments": {
                "item": [
                    "dict"
                ],
                "case_type": [
                    "str"
                ]
            }
        },
        "case_record": {
            "name": "case_record",
            "location": 63,
            "return": [
                "dict"
            ],
            "arguments": {
                "avro_schema_dict": [
                    "dict"
                ],
                "case_type": [
                    "str"
                ]
            }
        }
    },
    "dataclasses-avroschema-master/dataclasses_avroschema/exceptions.py": {
        "NameSpaceRequiredException.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field_type": [
                    "str",
                    "type",
                    "typing.Type"
                ],
                "field_name": [
                    "str"
                ]
            }
        },
        "NameSpaceRequiredException.__repr__": {
            "name": "__repr__",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NameSpaceRequiredException.__str__": {
            "name": "__str__",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidMap.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field_name": [
                    "str"
                ],
                "key_type": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "InvalidMap.__repr__": {
            "name": "__repr__",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidMap.__str__": {
            "name": "__str__",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dataclasses-avroschema-master/dataclasses_avroschema/fields.py": {
        "field_factory": {
            "name": "field_factory",
            "location": 867,
            "return": [
                "str",
                "bool",
                "SelfReferenceField",
                "FixedField",
                "EnumField",
                "RecordField"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "native_type": [
                    "str",
                    "hypothesis.strategies.SearchStrategy[decimal.Decimal]",
                    "list[str]",
                    "Union[List[str], str]"
                ],
                "parent": [
                    "str",
                    "None",
                    "bool",
                    "Optional[datetime.datetime]",
                    "typing.Sequence[typing.Any]",
                    "Optional[str]",
                    "Sequence[Any]"
                ]
            }
        },
        "BaseField.__post_init__": {
            "name": "__post_init__",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseField._get_self_reference_type": {
            "name": "_get_self_reference_type",
            "location": 120,
            "return": [
                "str"
            ],
            "arguments": {
                "a_type": [
                    "int",
                    "bytes",
                    "type",
                    "str",
                    "typing.Type"
                ]
            }
        },
        "BaseField.get_singular_name": {
            "name": "get_singular_name",
            "location": 126,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "BaseField.get_metadata": {
            "name": "get_metadata",
            "location": 133,
            "return": [
                "List[Tuple[(str, str)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseField.render": {
            "name": "render",
            "location": 143,
            "return": [
                "collections.OrderedDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseField.get_default_value": {
            "name": "get_default_value",
            "location": 171,
            "return": [
                "bool",
                "Dict[str, Tuple[int, int]]",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseField.validate_default": {
            "name": "validate_default",
            "location": 178,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseField.to_json": {
            "name": "to_json",
            "location": 187,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseField.to_dict": {
            "name": "to_dict",
            "location": 190,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseField.get_avro_type": {
            "name": "get_avro_type",
            "location": 194,
            "return": [
                "typing.Any",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseField.fake": {
            "name": "fake",
            "location": 197,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableField.get_avro_type": {
            "name": "get_avro_type",
            "location": 202,
            "return": [
                "list[typing.Text]",
                "mypy.types.Type",
                "str",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringField.fake": {
            "name": "fake",
            "location": 212,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntField.fake": {
            "name": "fake",
            "location": 220,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LongField.fake": {
            "name": "fake",
            "location": 228,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BooleanField.fake": {
            "name": "fake",
            "location": 236,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DoubleField.fake": {
            "name": "fake",
            "location": 244,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "FloatField.fake": {
            "name": "fake",
            "location": 252,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "BytesField.get_default_value": {
            "name": "get_default_value",
            "location": 260,
            "return": [
                "List[str]",
                "int",
                "Set[enum.Enum]",
                "str",
                "dict",
                "T"
            ],
            "arguments": {
                "self": []
            }
        },
        "BytesField.to_avro": {
            "name": "to_avro",
            "location": 268,
            "return": [
                "str"
            ],
            "arguments": {
                "item": [
                    "bytes"
                ]
            }
        },
        "BytesField.fake": {
            "name": "fake",
            "location": 271,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContainerField.get_avro_type": {
            "name": "get_avro_type",
            "location": 284,
            "return": [
                "mypy.types.Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListField.avro_type": {
            "name": "avro_type",
            "location": 297,
            "return": [
                "dict[typing.Text, typing.Text]",
                "Mapping",
                "bool",
                "int",
                "Dict[str, type]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListField.get_default_value": {
            "name": "get_default_value",
            "location": 301,
            "return": [
                "Union[(list, dataclasses._MISSING_TYPE)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListField.generate_items_type": {
            "name": "generate_items_type",
            "location": 321,
            "return": [
                "typing.Any",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListField.fake": {
            "name": "fake",
            "location": 340,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictField.__post_init__": {
            "name": "__post_init__",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictField.avro_type": {
            "name": "avro_type",
            "location": 357,
            "return": [
                "dict[typing.Text, typing.Text]",
                "bool",
                "str",
                "mypy.types.Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictField.get_default_value": {
            "name": "get_default_value",
            "location": 361,
            "return": [
                "Union[(dataclasses._MISSING_TYPE, Dict[(str, Any)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictField.generate_values_type": {
            "name": "generate_values_type",
            "location": 381,
            "return": [
                "typing.Any",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictField.fake": {
            "name": "fake",
            "location": 390,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnionField.generate_unions_type": {
            "name": "generate_unions_type",
            "location": 401,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnionField.get_avro_type": {
            "name": "get_avro_type",
            "location": 440,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnionField.get_default_value": {
            "name": "get_default_value",
            "location": 444,
            "return": [
                "list[]",
                "list[tuple[]]",
                "Optional[Union[int, float, bool, str]]",
                "bool",
                "type",
                "str",
                "Mapping"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnionField.fake": {
            "name": "fake",
            "location": 461,
            "return": [
                "mypy.types.Type",
                "List[str]",
                "str",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixedField.get_avro_type": {
            "name": "get_avro_type",
            "location": 470,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixedField.get_default_value": {
            "name": "get_default_value",
            "location": 485,
            "return": [
                "dataclasses._MISSING_TYPE"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixedField.fake": {
            "name": "fake",
            "location": 488,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumField._get_meta_class_attributes": {
            "name": "_get_meta_class_attributes",
            "location": 494,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumField.get_symbols": {
            "name": "get_symbols",
            "location": 504,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumField.get_avro_type": {
            "name": "get_avro_type",
            "location": 507,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumField.get_default_value": {
            "name": "get_default_value",
            "location": 517,
            "return": [
                "Optional[Union[(str, dataclasses._MISSING_TYPE)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumField.fake": {
            "name": "fake",
            "location": 530,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelfReferenceField.get_avro_type": {
            "name": "get_avro_type",
            "location": 536,
            "return": [
                "Union[(str, List[str])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelfReferenceField.get_default_value": {
            "name": "get_default_value",
            "location": 544,
            "return": [
                "Optional[dataclasses._MISSING_TYPE]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogicalTypeField.get_default_value": {
            "name": "get_default_value",
            "location": 552,
            "return": [
                "Optional[Union[(float, int, str)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogicalTypeField.to_avro": {
            "name": "to_avro",
            "location": 561,
            "return": [
                "Union[(float, int, str)]"
            ],
            "arguments": {
                "value": [
                    "bytes",
                    "str",
                    "int",
                    "float",
                    "list",
                    "list[]"
                ]
            }
        },
        "DateField.to_avro": {
            "name": "to_avro",
            "location": 578,
            "return": [
                "int"
            ],
            "arguments": {
                "date": [
                    "datetime.date"
                ]
            }
        },
        "DateField.fake": {
            "name": "fake",
            "location": 595,
            "return": [
                "datetime.date"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeField.to_avro": {
            "name": "to_avro",
            "location": 613,
            "return": [
                "int"
            ],
            "arguments": {
                "time": [
                    "datetime.time"
                ]
            }
        },
        "TimeField.fake": {
            "name": "fake",
            "location": 633,
            "return": [
                "datetime.time"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeField.to_avro": {
            "name": "to_avro",
            "location": 651,
            "return": [
                "float"
            ],
            "arguments": {
                "date_time": [
                    "datetime.datetime"
                ]
            }
        },
        "DatetimeField.fake": {
            "name": "fake",
            "location": 669,
            "return": [
                "datetime.datetime"
            ],
            "arguments": {
                "self": []
            }
        },
        "UUIDField.validate_default": {
            "name": "validate_default",
            "location": 677,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UUIDField.to_avro": {
            "name": "to_avro",
            "location": 684,
            "return": [
                "str"
            ],
            "arguments": {
                "uuid": [
                    "uuid.UUID"
                ]
            }
        },
        "UUIDField.fake": {
            "name": "fake",
            "location": 687,
            "return": [
                "uuid.UUID"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecordField.get_avro_type": {
            "name": "get_avro_type",
            "location": 693,
            "return": [
                "Union[(dict, list)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecordField.fake": {
            "name": "fake",
            "location": 720,
            "return": [
                "mypy.types.Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecordField.exist_type": {
            "name": "exist_type",
            "location": 723,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecimalField.__post_init__": {
            "name": "__post_init__",
            "location": 742,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecimalField.set_precision_scale": {
            "name": "set_precision_scale",
            "location": 745,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecimalField.get_avro_type": {
            "name": "get_avro_type",
            "location": 783,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecimalField.get_default_value": {
            "name": "get_default_value",
            "location": 790,
            "return": [
                "Optional[Union[(str, dataclasses._MISSING_TYPE)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecimalField.fake": {
            "name": "fake",
            "location": 801,
            "return": [
                "decimal.Decimal"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dataclasses-avroschema-master/dataclasses_avroschema/schema_definition.py": {
        "BaseSchemaDefinition.get_rendered_fields": {
            "name": "get_rendered_fields",
            "location": 21,
            "return": [
                "List[collections.OrderedDict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSchemaDefinition.render": {
            "name": "render",
            "location": 25,
            "return": [
                "collections.OrderedDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSchemaDefinition.get_schema_name": {
            "name": "get_schema_name",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSchemaDefinition.generate_documentation": {
            "name": "generate_documentation",
            "location": 31,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvroSchemaDefinition.__post_init__": {
            "name": "__post_init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvroSchemaDefinition.parse_dataclasses_fields": {
            "name": "parse_dataclasses_fields",
            "location": 50,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvroSchemaDefinition.parse_fields": {
            "name": "parse_fields",
            "location": 57,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvroSchemaDefinition.parse_faust_fields": {
            "name": "parse_faust_fields",
            "location": 71,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvroSchemaDefinition.parse_pydantic_fields": {
            "name": "parse_pydantic_fields",
            "location": 100,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvroSchemaDefinition.get_rendered_fields": {
            "name": "get_rendered_fields",
            "location": 116,
            "return": [
                "List[collections.OrderedDict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvroSchemaDefinition.render": {
            "name": "render",
            "location": 119,
            "return": [
                "collections.OrderedDict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dataclasses-avroschema-master/dataclasses_avroschema/schema_generator.py": {
        "AvroModel.generate_dataclass": {
            "name": "generate_dataclass",
            "location": 34,
            "return": [
                "float",
                "str",
                "bool",
                "typing.Type",
                "T",
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "typing.Type",
                    "int",
                    "str",
                    "Type",
                    "None",
                    "T",
                    "Optional[str]"
                ]
            }
        },
        "AvroModel.generate_metadata": {
            "name": "generate_metadata",
            "location": 40,
            "return": [
                "dataclasses_avroschema.utils.SchemaMetadata"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "str",
                    "type",
                    "enum.Enum",
                    "Type[T]",
                    "T"
                ]
            }
        },
        "AvroModel.generate_schema": {
            "name": "generate_schema",
            "location": 46,
            "return": [
                "Optional[collections.OrderedDict]"
            ],
            "arguments": {
                "cls": [
                    "Type[CT]"
                ],
                "schema_type": [
                    "str"
                ]
            }
        },
        "AvroModel._generate_avro_schema": {
            "name": "_generate_avro_schema",
            "location": 64,
            "return": [
                "dataclasses_avroschema.schema_definition.AvroSchemaDefinition"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "AvroModel.avro_schema": {
            "name": "avro_schema",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int"
                ],
                "case_type": [
                    "Optional[str]"
                ]
            }
        },
        "AvroModel.avro_schema_to_python": {
            "name": "avro_schema_to_python",
            "location": 80,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Set[str]",
                    "Optional[\"Node\"]",
                    "Callable",
                    "Iterator[str]"
                ],
                "root": [
                    "Optional[str]",
                    "None",
                    "Callable",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "AvroModel.get_fields": {
            "name": "get_fields",
            "location": 87,
            "return": [
                "list"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "bool",
                    "Union[AsyncIterable[Any], Iterable[Any]]",
                    "Type[T]",
                    "List['OverloadPart']",
                    "Optional[Mapping]"
                ]
            }
        },
        "AvroModel._get_enum_type_map": {
            "name": "_get_enum_type_map",
            "location": 93,
            "return": [
                "Dict[(str, enum.Enum)]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "AvroModel._deserialize_complex_types": {
            "name": "_deserialize_complex_types",
            "location": 107,
            "return": [
                "str",
                "dict[, ]"
            ],
            "arguments": {
                "cls": [
                    "Type[Any]"
                ],
                "payload": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "AvroModel.standardize_custom_type": {
            "name": "standardize_custom_type",
            "location": 123,
            "return": [
                "str",
                "float",
                "dict[, ]",
                "Type[BaseException]",
                "bool",
                "Optional[List[float]]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Type"
                ]
            }
        },
        "AvroModel.asdict": {
            "name": "asdict",
            "location": 132,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvroModel.serialize": {
            "name": "serialize",
            "location": 139,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "serialization_type": [
                    "str"
                ]
            }
        },
        "AvroModel.deserialize": {
            "name": "deserialize",
            "location": 145,
            "return": [
                "Union[(Dict[(str, Any)], CT)]"
            ],
            "arguments": {
                "cls": [
                    "Type[CT]"
                ],
                "data": [
                    "bytes"
                ],
                "serialization_type": [
                    "str"
                ],
                "create_instance": [
                    "bool"
                ],
                "writer_schema": [
                    "Optional[Union[(Dict[(str, Any)], CT)]]"
                ]
            }
        },
        "AvroModel.parse_obj": {
            "name": "parse_obj",
            "location": 165,
            "return": [
                "Union[(Dict[(str, Any)], CT)]"
            ],
            "arguments": {
                "cls": [
                    "Exception",
                    "bytes",
                    "BaseException",
                    "Dict[str, Any]"
                ],
                "data": [
                    "dict"
                ]
            }
        },
        "AvroModel.validate": {
            "name": "validate",
            "location": 168,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvroModel.to_dict": {
            "name": "to_dict",
            "location": 172,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvroModel.to_json": {
            "name": "to_json",
            "location": 177,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvroModel.config": {
            "name": "config",
            "location": 182,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "int",
                    "Tuple[List[str], Optional[Any], Optional[Any]]"
                ]
            }
        },
        "AvroModel.fake": {
            "name": "fake",
            "location": 199,
            "return": [
                "CT"
            ],
            "arguments": {
                "cls": [
                    "Type[CT]"
                ]
            }
        }
    },
    "dataclasses-avroschema-master/dataclasses_avroschema/serialization.py": {
        "serialize": {
            "name": "serialize",
            "location": 14,
            "return": [
                "bytes"
            ],
            "arguments": {
                "payload": [
                    "dict"
                ],
                "schema": [
                    "dict"
                ],
                "serialization_type": [
                    "str"
                ]
            }
        },
        "deserialize": {
            "name": "deserialize",
            "location": 33,
            "return": [
                "dict"
            ],
            "arguments": {
                "data": [
                    "bytes"
                ],
                "schema": [
                    "dict"
                ],
                "serialization_type": [
                    "str"
                ],
                "writer_schema": [
                    "Optional[dict]"
                ]
            }
        },
        "datetime_to_str": {
            "name": "datetime_to_str",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "datetime.datetime"
                ]
            }
        },
        "date_to_str": {
            "name": "date_to_str",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "datetime.date"
                ]
            }
        },
        "time_to_str": {
            "name": "time_to_str",
            "location": 70,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "datetime.time"
                ]
            }
        },
        "decimal_to_str": {
            "name": "decimal_to_str",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "decimal.Decimal"
                ],
                "precision": [
                    "int"
                ],
                "scale": [
                    "int"
                ]
            }
        },
        "prepare_bytes_decimal": {
            "name": "prepare_bytes_decimal",
            "location": 82,
            "return": [
                "bytes"
            ],
            "arguments": {
                "data": [
                    "decimal.Decimal"
                ],
                "precision": [
                    "int"
                ],
                "scale": [
                    "int"
                ]
            }
        },
        "to_json": {
            "name": "to_json",
            "location": 109,
            "return": [
                "dict"
            ],
            "arguments": {
                "data": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "dataclasses-avroschema-master/dataclasses_avroschema/types.py": {
        "Fixed.__repr__": {
            "name": "__repr__",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Decimal.__repr__": {
            "name": "__repr__",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dataclasses-avroschema-master/dataclasses_avroschema/utils.py": {
        "is_pydantic_model": {
            "name": "is_pydantic_model",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "klass": [
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "is_faust_model": {
            "name": "is_faust_model",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "klass": [
                    "str",
                    "int"
                ]
            }
        },
        "is_union": {
            "name": "is_union",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "a_type": []
            }
        },
        "is_self_referenced": {
            "name": "is_self_referenced",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "a_type": [
                    "str",
                    "type",
                    "typing.Type",
                    "Tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str]",
                    "tuple[typing.Union[str,str,str,str,str,str,str,str,str,str,str,str,str,str]]"
                ]
            }
        },
        "is_custom_type": {
            "name": "is_custom_type",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "dict[, ]",
                    "Type",
                    "dataclasses.Field",
                    "dict",
                    "str",
                    "Mapping",
                    "T"
                ]
            }
        },
        "SchemaMetadata.create": {
            "name": "create",
            "location": 84,
            "return": [
                "str",
                "Optional[List[str]]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "klass": [
                    "type"
                ]
            }
        },
        "SchemaMetadata.get_alias_nested_items": {
            "name": "get_alias_nested_items",
            "location": 93,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "FieldMetadata.create": {
            "name": "create",
            "location": 104,
            "return": [
                "FieldMetadata"
            ],
            "arguments": {
                "cls": [
                    "Mapping",
                    "typing.Mapping"
                ],
                "klass": [
                    "type"
                ]
            }
        },
        "FieldMetadata.to_dict": {
            "name": "to_dict",
            "location": 111,
            "return": [
                "Dict[(str, Union[(str, List[str])])]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dataclasses-avroschema-master/dataclasses_avroschema/__init__.py": {},
    "dataclasses-avroschema-master/examples/kafka-examples/aiokafka_example.py": {},
    "dataclasses-avroschema-master/examples/kafka-examples/kafka_python_example.py": {
        "consume": {
            "name": "consume",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "send": {
            "name": "send",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "total_events": [
                    "int",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "str",
                    "List[int]"
                ]
            }
        }
    },
    "dataclasses-avroschema-master/examples/kafka-examples/schema_evolution_example.py": {
        "consume": {
            "name": "consume",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "send": {
            "name": "send",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "total_events": [
                    "int",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "str",
                    "List[int]"
                ]
            }
        }
    },
    "dataclasses-avroschema-master/examples/redis-examples/redis_gears_example.py": {
        "consume": {
            "name": "consume",
            "location": 35,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "conn": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "list",
                    "int",
                    "list[]",
                    "Optional[str]",
                    "None",
                    "Optional[Sequence[str]]",
                    "typing.Sequence[str]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "stream_name": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "list",
                    "int",
                    "list[]",
                    "Optional[str]",
                    "None",
                    "Optional[Sequence[str]]",
                    "typing.Sequence[str]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "produce": {
            "name": "produce",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [
                    "int",
                    "bool",
                    "str",
                    "Match"
                ]
            }
        }
    },
    "dataclasses-avroschema-master/examples/redis-examples/redis_stream_example.py": {
        "consume": {
            "name": "consume",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "consumer_group": [
                    "str",
                    "bool",
                    "Tuple[Union[int, slice], Union[int, slice]]",
                    "tuple[typing.Union[int,slice,int,slice]]"
                ]
            }
        },
        "produce": {
            "name": "produce",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "consumer_group": [
                    "bool",
                    "Sequence[T]",
                    "typing.Sequence[T]",
                    "Callable[[T], bool]",
                    "typing.Callable[T, bool]"
                ]
            }
        }
    },
    "dataclasses-avroschema-master/tests/conftest.py": {
        "color_enum": {
            "name": "color_enum",
            "location": 11,
            "return": [
                "FavoriteColor",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "user_type_enum": {
            "name": "user_type_enum",
            "location": 21,
            "return": [
                "UserType",
                "mypy.types.Type",
                "types.GraphQLType",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "user_dataclass": {
            "name": "user_dataclass",
            "location": 30,
            "return": [
                "User",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "user_dataclass_with_doc": {
            "name": "user_dataclass_with_doc",
            "location": 46,
            "return": [
                "User",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "user_dataclass_with_field_metadata": {
            "name": "user_dataclass_with_field_metadata",
            "location": 59,
            "return": [
                "Iterator[Tuple[hermes.types.UserType, hermes.types.EmailAddressType]]",
                "User"
            ],
            "arguments": {}
        },
        "user_v2_dataclass": {
            "name": "user_v2_dataclass",
            "location": 75,
            "return": [
                "UserV2"
            ],
            "arguments": {}
        },
        "user_extra_avro_atributes_dataclass": {
            "name": "user_extra_avro_atributes_dataclass",
            "location": 86,
            "return": [
                "UserAliasesNamespace",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "user_advance_dataclass": {
            "name": "user_advance_dataclass",
            "location": 102,
            "return": [
                "UserAdvance",
                "str",
                "int"
            ],
            "arguments": {
                "color_enum": [
                    "int",
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "user_advance_dataclass_with_enum": {
            "name": "user_advance_dataclass_with_enum",
            "location": 122,
            "return": [
                "UserAdvance",
                "str",
                "int"
            ],
            "arguments": {
                "color_enum": [
                    "str",
                    "bool",
                    "int"
                ],
                "user_type_enum": [
                    "Optional[str]",
                    "str",
                    "Callable",
                    "None",
                    "type",
                    "typing.Callable[, ]",
                    "typing.Type"
                ]
            }
        },
        "user_advance_dataclass_with_union_enum": {
            "name": "user_advance_dataclass_with_union_enum",
            "location": 143,
            "return": [
                "UserAdvance",
                "str",
                "int"
            ],
            "arguments": {
                "color_enum": [
                    "str",
                    "bool",
                    "int"
                ],
                "user_type_enum": [
                    "bool",
                    "Type[Any]",
                    "typing.Type",
                    "List[bool]",
                    "list[bool]"
                ]
            }
        },
        "user_advance_dataclass_with_sub_record_and_enum": {
            "name": "user_advance_dataclass_with_sub_record_and_enum",
            "location": 164,
            "return": [
                "UserWithSubRecordAndEnum",
                "str",
                "int"
            ],
            "arguments": {
                "color_enum": [
                    "str",
                    "bool",
                    "int"
                ],
                "user_type_enum": [
                    "bool",
                    "Type[Any]",
                    "typing.Type",
                    "List[bool]",
                    "list[bool]"
                ]
            }
        },
        "user_advance_with_defaults_dataclass": {
            "name": "user_advance_with_defaults_dataclass",
            "location": 184,
            "return": [
                "Iterator[Tuple[hermes.types.UserType, hermes.types.EmailAddressType]]",
                "UserAdvance"
            ],
            "arguments": {
                "color_enum": [
                    "str",
                    "int",
                    "dict[str, float]",
                    "Dict[str, float]",
                    "bool"
                ]
            }
        },
        "user_advance_with_defaults_dataclass_with_enum": {
            "name": "user_advance_with_defaults_dataclass_with_enum",
            "location": 203,
            "return": [
                "Iterator[Tuple[hermes.types.UserType, hermes.types.EmailAddressType]]",
                "UserAdvance"
            ],
            "arguments": {
                "color_enum": [],
                "user_type_enum": [
                    "Type",
                    "Exception",
                    "typing.Type",
                    "str"
                ]
            }
        },
        "user_extra_avro_atributes_dataclass.UserAliasesNamespace.extra_avro_attributes": {
            "name": "extra_avro_attributes",
            "location": 92,
            "return": [
                "bool",
                "dict[typing.Text, typing.Union[typing.Text,list[typing.Text]]]"
            ],
            "arguments": {}
        }
    },
    "dataclasses-avroschema-master/tests/__init__.py": {},
    "dataclasses-avroschema-master/tests/case/test_case_records.py": {
        "test_case_record": {
            "name": "test_case_record",
            "location": 181,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "case_type": [
                    "str"
                ],
                "schema": [
                    "str"
                ]
            }
        },
        "test_case_nested_records": {
            "name": "test_case_nested_records",
            "location": 192,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "case_type": [
                    "str"
                ],
                "schema": [
                    "str"
                ]
            }
        },
        "test_case_complex_fields": {
            "name": "test_case_complex_fields",
            "location": 210,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "case_type": [
                    "str"
                ],
                "schema": [
                    "str"
                ]
            }
        },
        "test_case_complex_fields_nested": {
            "name": "test_case_complex_fields_nested",
            "location": 234,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "case_type": [
                    "str"
                ],
                "schema": [
                    "str"
                ]
            }
        }
    },
    "dataclasses-avroschema-master/tests/fake/test_fake.py": {
        "test_fake_primitive_types": {
            "name": "test_fake_primitive_types",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "user_dataclass": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "test_fake_complex_types": {
            "name": "test_fake_complex_types",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "user_advance_dataclass": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "test_fake_with_logical_types": {
            "name": "test_fake_with_logical_types",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fake_union": {
            "name": "test_fake_union",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fake_one_to_one_relationship": {
            "name": "test_fake_one_to_one_relationship",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fake_one_to_many_relationship": {
            "name": "test_fake_one_to_many_relationship",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fake_one_to_many_map_relationship": {
            "name": "test_fake_one_to_many_map_relationship",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_self_one_to_one_relationship": {
            "name": "test_self_one_to_one_relationship",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_self_one_to_many_relationship": {
            "name": "test_self_one_to_many_relationship",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_self_one_to_many_map_relationship": {
            "name": "test_self_one_to_many_map_relationship",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_decimals": {
            "name": "test_decimals",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_int32": {
            "name": "test_int32",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_float32": {
            "name": "test_float32",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dataclasses-avroschema-master/tests/fields/consts.py": {
        "xfail_annotation": {
            "name": "xfail_annotation",
            "location": 137,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "typ": [
                    "list",
                    "str",
                    "list[]",
                    "int",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "dataclasses-avroschema-master/tests/fields/test_BaseField.py": {
        "test_render": {
            "name": "test_render",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_render_metadata": {
            "name": "test_render_metadata",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dataclasses-avroschema-master/tests/fields/test_complex_types.py": {
        "test_invalid_type_container_field": {
            "name": "test_invalid_type_container_field",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sequence_type": {
            "name": "test_sequence_type",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sequence": [
                    "str",
                    "Optional[str]",
                    "Type"
                ],
                "python_primitive_type": [
                    "Type[Any]",
                    "Type[BaseException]",
                    "Optional[Type[BaseException]]",
                    "str"
                ],
                "python_type_str": [
                    "str",
                    "typing.Type",
                    "Type[BaseException]",
                    "list[str]",
                    "List[str]",
                    "Type[Any]"
                ]
            }
        },
        "test_sequence_with_logical_type": {
            "name": "test_sequence_with_logical_type",
            "location": 72,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sequence": [
                    "str",
                    "Optional[str]",
                    "Type"
                ],
                "python_primitive_type": [
                    "str"
                ],
                "python_type_str": [
                    "tuple[typing.Union[str,str]]",
                    "Tuple[str, str]",
                    "str",
                    "Optional[str]",
                    "None",
                    "typing.Callable[..., collections.abc.Awaitable[]]",
                    "Callable[..., Awaitable]",
                    "Callable[[str], None]"
                ],
                "value": [
                    "str",
                    "mypy.types.Instance",
                    "None",
                    "typing.Any",
                    "types.ModuleType",
                    "Optional[str]",
                    "Any"
                ]
            }
        },
        "test_sequence_with_union_type": {
            "name": "test_sequence_with_union_type",
            "location": 111,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "union": [
                    "Dict[int, datetime.datetime]",
                    "int",
                    "dict[int, datetime.datetime]"
                ],
                "items": [
                    "dict[str, str]",
                    "Dict[str, str]",
                    "str",
                    "list[str]",
                    "List[str]",
                    "tuple[typing.Type]",
                    "Tuple[type]",
                    "list[tuple[typing.Union[str,str]]]",
                    "List[Tuple[str, str]]",
                    "Dict[str, Any]"
                ],
                "default": [
                    "Union[opentrons.types.Location, labware.Well]"
                ]
            }
        },
        "test_mapping_type": {
            "name": "test_mapping_type",
            "location": 141,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mapping": [
                    "str",
                    "Type[enum.Enum]",
                    "type"
                ],
                "python_primitive_type": [
                    "str",
                    "Any",
                    "bool",
                    "typing.Any",
                    "Optional[str]",
                    "None"
                ],
                "python_type_str": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_invalid_map": {
            "name": "test_invalid_map",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mapping_logical_type": {
            "name": "test_mapping_logical_type",
            "location": 195,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mapping": [
                    "str",
                    "bool",
                    "Any",
                    "Type[enum.Enum]"
                ],
                "python_primitive_type": [
                    "str",
                    "Optional[str]",
                    "None",
                    "bool",
                    "Any",
                    "typing.Any",
                    "Optional[Mapping[str, Any]]",
                    "typing.Mapping"
                ],
                "python_type_str": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "types.ModuleType"
                ],
                "value": [
                    "str",
                    "None",
                    "types.ModuleType",
                    "dict[str, str]",
                    "Optional[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "test_union_type": {
            "name": "test_union_type",
            "location": 236,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "primitive_types": [
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "Optional[Mapping[str, Any]]",
                    "None",
                    "Type[Any]",
                    "typing.Type",
                    "Optional[str]",
                    "str"
                ],
                "avro_types": [
                    "str",
                    "type",
                    "typing.Type"
                ],
                "default": [
                    "Type[Any]",
                    "bool",
                    "typing.Type",
                    "str"
                ]
            }
        },
        "test_union_type_with_default": {
            "name": "test_union_type_with_default",
            "location": 248,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "primitive_types": [
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "Optional[Mapping[str, Any]]",
                    "None",
                    "Type[Any]",
                    "typing.Type",
                    "Optional[str]",
                    "str"
                ],
                "avro_types": [
                    "str"
                ],
                "default": [
                    "list[str]",
                    "List[str]",
                    "typing.Type",
                    "typing.Callable[, ]",
                    "type",
                    "Type",
                    "Callable",
                    "Union[opentrons.types.Location, labware.Well]",
                    "mypy.types.Type"
                ]
            }
        },
        "test_union_with_arrays": {
            "name": "test_union_with_arrays",
            "location": 264,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "complex_type": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "avro_types": [
                    "Type[Any]"
                ]
            }
        },
        "test_union_with_maps": {
            "name": "test_union_with_maps",
            "location": 275,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "complex_type": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "avro_types": [
                    "Type[Any]"
                ]
            }
        },
        "test_union_as_optional_with_complex_types": {
            "name": "test_union_as_optional_with_complex_types",
            "location": 286,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "complex_type": [
                    "Optional[BaseException]",
                    "BaseException",
                    "None"
                ],
                "avro_type": [
                    "Type[Any]",
                    "typing.Type",
                    "List[str]",
                    "list[str]",
                    "str",
                    "Optional[Dict[Hashable, Any]]",
                    "dict[typing.Hashable, typing.Any]",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "test_union_as_optional_with_primitives": {
            "name": "test_union_as_optional_with_primitives",
            "location": 303,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "primitive_type": [
                    "mypy.types.Type"
                ],
                "avro_type": [
                    "type",
                    "typing.Type",
                    "int",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_union_type_with_records": {
            "name": "test_union_type_with_records",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_union_type_with_record_default": {
            "name": "test_union_type_with_record_default",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fixed_type": {
            "name": "test_fixed_type",
            "location": 416,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_enum_type": {
            "name": "test_enum_type",
            "location": 442,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_enum_field": {
            "name": "test_enum_field",
            "location": 544,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_enum_field_default": {
            "name": "test_enum_field_default",
            "location": 565,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dataclasses-avroschema-master/tests/fields/test_logical_types.py": {
        "test_logical_types": {
            "name": "test_logical_types",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "python_type": [
                    "typing.Type",
                    "Type[Any]",
                    "mypy.types.Type"
                ],
                "avro_type": [
                    "typing.Type",
                    "Type[Any]",
                    "type"
                ],
                "logical_type": [
                    "typing.Type",
                    "Type[Any]",
                    "type"
                ]
            }
        },
        "test_logical_types_with_null_as_default": {
            "name": "test_logical_types_with_null_as_default",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "python_type": [
                    "typing.Type",
                    "Type[Any]",
                    "Type['Payload']"
                ],
                "avro_type": [
                    "Type[Any]",
                    "str",
                    "typing.Type"
                ],
                "logical_type": [
                    "Type[Any]",
                    "str",
                    "typing.Type"
                ]
            }
        },
        "test_logical_type_date_with_default": {
            "name": "test_logical_type_date_with_default",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_logical_type_time_with_default": {
            "name": "test_logical_type_time_with_default",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_logical_type_datetime_with_default": {
            "name": "test_logical_type_datetime_with_default",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_logical_type_uuid_with_default": {
            "name": "test_logical_type_uuid_with_default",
            "location": 102,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "python_type": [
                    "str",
                    "Hashable",
                    "typing.Hashable",
                    "Type[Any]",
                    "typing.Type"
                ]
            }
        },
        "test_invalid_default_values": {
            "name": "test_invalid_default_values",
            "location": 117,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "logical_type": [
                    "list[str]",
                    "str",
                    "List[str]",
                    "typing.Type",
                    "Type",
                    "type"
                ],
                "invalid_default": [
                    "str"
                ],
                "msg": [
                    "str",
                    "Dict[str, str]",
                    "int",
                    "dict[str, str]",
                    "Dict[str, Union[int, str]]",
                    "bytes",
                    "dict[str, typing.Union[int,str]]",
                    "List[Tuple[str, str]]",
                    "list[tuple[typing.Union[str,str]]]"
                ]
            }
        },
        "test_decimal_type": {
            "name": "test_decimal_type",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dataclasses-avroschema-master/tests/fields/test_primitive_types.py": {
        "test_primitive_types": {
            "name": "test_primitive_types",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "primitive_type": [
                    "str",
                    "Type[Any]",
                    "typing.Type"
                ]
            }
        },
        "test_primitive_types_with_default_value_none": {
            "name": "test_primitive_types_with_default_value_none",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "primitive_type": [
                    "bool",
                    "str",
                    "typing.Type",
                    "Type[Any]",
                    "Type"
                ]
            }
        },
        "test_primitive_types_with_default_value": {
            "name": "test_primitive_types_with_default_value",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "primitive_type": [
                    "str"
                ],
                "default": [
                    "List[str]",
                    "str",
                    "type"
                ]
            }
        },
        "test_invalid_default_values": {
            "name": "test_invalid_default_values",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "primitive_type": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "type",
                    "typing.Type"
                ],
                "invalid_default": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_invalid_type": {
            "name": "test_invalid_type",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dataclasses-avroschema-master/tests/fields/__init__.py": {},
    "dataclasses-avroschema-master/tests/schemas/conftest.py": {
        "load": {
            "name": "load",
            "location": 16,
            "return": [
                "str",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "fp": [
                    "str",
                    "Union[int, str]"
                ]
            }
        },
        "load_json": {
            "name": "load_json",
            "location": 21,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ]
            }
        },
        "user_avro_json": {
            "name": "user_avro_json",
            "location": 28,
            "return": [
                "Union[str, IO]",
                "Dict[str, Any]",
                "str",
                "List[str]",
                "IO[str]"
            ],
            "arguments": {}
        },
        "user_with_field_metadata_avro_json": {
            "name": "user_with_field_metadata_avro_json",
            "location": 33,
            "return": [
                "Optional[str]"
            ],
            "arguments": {}
        },
        "user_v2_avro_json": {
            "name": "user_v2_avro_json",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "user_advance_avro_json": {
            "name": "user_advance_avro_json",
            "location": 43,
            "return": [
                "Union[str, IO]",
                "Dict[str, Any]",
                "str",
                "List[str]",
                "IO[str]"
            ],
            "arguments": {}
        },
        "user_advance_with_defaults_avro_json": {
            "name": "user_advance_with_defaults_avro_json",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "user_extra_avro_attributes": {
            "name": "user_extra_avro_attributes",
            "location": 53,
            "return": [
                "Union[str, IO]",
                "Dict[str, Any]",
                "str",
                "List[str]",
                "IO[str]"
            ],
            "arguments": {}
        },
        "user_one_address_schema": {
            "name": "user_one_address_schema",
            "location": 58,
            "return": [
                "Union[str, IO]",
                "Dict[str, Any]",
                "str",
                "List[str]",
                "IO[str]"
            ],
            "arguments": {}
        },
        "user_one_address_alias_item": {
            "name": "user_one_address_alias_item",
            "location": 63,
            "return": [
                "Callable"
            ],
            "arguments": {}
        },
        "user_array_address_alias": {
            "name": "user_array_address_alias",
            "location": 68,
            "return": [
                "Union[str, IO]",
                "Dict[str, Any]",
                "str",
                "List[str]",
                "IO[str]"
            ],
            "arguments": {}
        },
        "user_map_address_alias": {
            "name": "user_map_address_alias",
            "location": 73,
            "return": [
                "Union[str, IO]",
                "Dict[str, Any]",
                "str",
                "List[str]",
                "IO[str]"
            ],
            "arguments": {}
        },
        "user_one_address_schema_with_none_default": {
            "name": "user_one_address_schema_with_none_default",
            "location": 78,
            "return": [
                "Callable",
                "Optional[Iterable[Any]]"
            ],
            "arguments": {}
        },
        "user_many_address_schema": {
            "name": "user_many_address_schema",
            "location": 83,
            "return": [
                "Union[str, IO]",
                "Dict[str, Any]",
                "str",
                "List[str]",
                "IO[str]"
            ],
            "arguments": {}
        },
        "user_many_address_map_schema": {
            "name": "user_many_address_map_schema",
            "location": 88,
            "return": [
                "Union[str, IO]",
                "Dict[str, Any]",
                "str",
                "List[str]",
                "IO[str]"
            ],
            "arguments": {}
        },
        "user_many_address_map_schema_alias_item": {
            "name": "user_many_address_map_schema_alias_item",
            "location": 93,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "user_self_reference_one_to_one_schema": {
            "name": "user_self_reference_one_to_one_schema",
            "location": 98,
            "return": [],
            "arguments": {}
        },
        "user_self_reference_one_to_many_schema": {
            "name": "user_self_reference_one_to_many_schema",
            "location": 103,
            "return": [],
            "arguments": {}
        },
        "user_self_reference_one_to_many_map_schema": {
            "name": "user_self_reference_one_to_many_map_schema",
            "location": 108,
            "return": [],
            "arguments": {}
        },
        "logical_types_schema": {
            "name": "logical_types_schema",
            "location": 113,
            "return": [
                "str",
                "List['cirq.Qid']",
                "bool"
            ],
            "arguments": {}
        },
        "union_type_schema": {
            "name": "union_type_schema",
            "location": 118,
            "return": [
                "str",
                "List['cirq.Qid']",
                "bool"
            ],
            "arguments": {}
        },
        "default_union_schema": {
            "name": "default_union_schema",
            "location": 123,
            "return": [
                "List[str]",
                "int"
            ],
            "arguments": {}
        },
        "typing_optional_schema": {
            "name": "typing_optional_schema",
            "location": 128,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "decimal_types_schema": {
            "name": "decimal_types_schema",
            "location": 133,
            "return": [
                "int",
                "bool",
                "Sequence[str]",
                "List[int]",
                "dict"
            ],
            "arguments": {}
        },
        "AvroBaseModel_model": {
            "name": "AvroBaseModel_model",
            "location": 138,
            "return": [
                "UnionSchema",
                "float",
                "str",
                "int",
                "Tuple[int, int]"
            ],
            "arguments": {}
        }
    },
    "dataclasses-avroschema-master/tests/schemas/test_fastavro_paser_schema.py": {
        "test_minimal_schema": {
            "name": "test_minimal_schema",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "user_dataclass": [
                    "int"
                ]
            }
        },
        "test_schema_with_field_metadata": {
            "name": "test_schema_with_field_metadata",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "user_dataclass_with_field_metadata": [
                    "str"
                ]
            }
        },
        "test_schema_with_extra_avro_attrs": {
            "name": "test_schema_with_extra_avro_attrs",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "user_extra_avro_atributes_dataclass": [
                    "int"
                ]
            }
        },
        "test_advance_schema": {
            "name": "test_advance_schema",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "user_advance_dataclass": [
                    "bool",
                    "List[str]"
                ],
                "user_advance_dataclass_with_union_enum": [
                    "bool",
                    "List[str]"
                ]
            }
        },
        "test_advance_schema_with_defaults": {
            "name": "test_advance_schema_with_defaults",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "user_advance_with_defaults_dataclass": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_one_to_one_schema": {
            "name": "test_one_to_one_schema",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_one_to_one_repeated_schema": {
            "name": "test_one_to_one_repeated_schema",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_one_to_one_repeated_schema_in_array": {
            "name": "test_one_to_one_repeated_schema_in_array",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_one_to_one_repeated_schema_in_map": {
            "name": "test_one_to_one_repeated_schema_in_map",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_one_to_many_repeated_schema_in_array_and_map": {
            "name": "test_one_to_many_repeated_schema_in_array_and_map",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_one_to_many_schema": {
            "name": "test_one_to_many_schema",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_one_to_many_with_map_schema": {
            "name": "test_one_to_many_with_map_schema",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_one_to_one_self_relationship": {
            "name": "test_one_to_one_self_relationship",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_one_to_many_self_reference_schema": {
            "name": "test_one_to_many_self_reference_schema",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_one_to_many_self_reference_map_schema": {
            "name": "test_one_to_many_self_reference_map_schema",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_logical_types_schema": {
            "name": "test_logical_types_schema",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_schema_with_union_types": {
            "name": "test_schema_with_union_types",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_schema_with_union_record_types": {
            "name": "test_schema_with_union_record_types",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_schema_array_with_union_types": {
            "name": "test_schema_array_with_union_types",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_namespaces": {
            "name": "test_namespaces",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_use_of_same_type_in_nested_list": {
            "name": "test_use_of_same_type_in_nested_list",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_two_different_child_records": {
            "name": "test_two_different_child_records",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dataclasses-avroschema-master/tests/schemas/test_faust.py": {
        "test_faust_record_schema_primitive_types": {
            "name": "test_faust_record_schema_primitive_types",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "user_avro_json": [
                    "str"
                ]
            }
        },
        "test_faust_record_schema_complex_types": {
            "name": "test_faust_record_schema_complex_types",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "user_advance_avro_json": [
                    "Iterator[Tuple[hermes.types.UserType, hermes.types.EmailAddressType]]",
                    "str",
                    "typing.Iterator"
                ],
                "color_enum": []
            }
        },
        "test_faust_record_schema_complex_types_with_defaults": {
            "name": "test_faust_record_schema_complex_types_with_defaults",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "user_advance_with_defaults_avro_json": [
                    "Optional[str]",
                    "str",
                    "set",
                    "None",
                    "set[]"
                ],
                "color_enum": []
            }
        },
        "test_faust_record_schema_logical_types": {
            "name": "test_faust_record_schema_logical_types",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "logical_types_schema": [
                    "str"
                ]
            }
        },
        "test_faust_record_one_to_one_relationship": {
            "name": "test_faust_record_one_to_one_relationship",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "user_one_address_schema": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Iterator[Tuple[hermes.types.UserType, hermes.types.EmailAddressType]]",
                    "typing.Iterator"
                ]
            }
        },
        "test_faust_record_one_to_one_relationship_with_none_default": {
            "name": "test_faust_record_one_to_one_relationship_with_none_default",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "user_one_address_schema_with_none_default": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_faust_record_one_to_many_relationship": {
            "name": "test_faust_record_one_to_many_relationship",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "user_many_address_schema": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Iterator[Tuple[hermes.types.UserType, hermes.types.EmailAddressType]]",
                    "typing.Iterator"
                ]
            }
        },
        "test_faust_record_one_to_many_map_relationship": {
            "name": "test_faust_record_one_to_many_map_relationship",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "user_many_address_map_schema": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Iterator[Tuple[hermes.types.UserType, hermes.types.EmailAddressType]]",
                    "typing.Iterator"
                ]
            }
        },
        "test_faust_record_self_one_to_one_relationship": {
            "name": "test_faust_record_self_one_to_one_relationship",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "user_self_reference_one_to_one_schema": [
                    "starlette.types.Receive",
                    "starlette.types.Scope"
                ]
            }
        },
        "test_faust_record_self_one_to_many_relationship": {
            "name": "test_faust_record_self_one_to_many_relationship",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "user_self_reference_one_to_many_schema": [
                    "starlette.types.Receive",
                    "starlette.types.Scope"
                ]
            }
        },
        "test_faust_record_self_one_to_many_map_relationship": {
            "name": "test_faust_record_self_one_to_many_map_relationship",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "user_self_reference_one_to_many_map_schema": [
                    "starlette.types.Receive",
                    "starlette.types.Scope"
                ]
            }
        },
        "test_faust_record_schema_with_unions_type": {
            "name": "test_faust_record_schema_with_unions_type",
            "location": 204,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "union_type_schema": [
                    "int"
                ]
            }
        },
        "test_not_faust_not_installed": {
            "name": "test_not_faust_not_installed",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "List[cmk.utils.type_defs.HostName]",
                    "list[cmk.utils.type_defs.HostName]"
                ]
            }
        }
    },
    "dataclasses-avroschema-master/tests/schemas/test_nested_schemas.py": {
        "test_one_to_one_relationship": {
            "name": "test_one_to_one_relationship",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "user_one_address_schema": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_one_to_many_relationship": {
            "name": "test_one_to_many_relationship",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "user_many_address_schema": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_one_to_many_map_relationship": {
            "name": "test_one_to_many_map_relationship",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "user_many_address_map_schema": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_one_to_many_map_relationship_with_alias": {
            "name": "test_one_to_many_map_relationship_with_alias",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "user_many_address_map_schema_alias_item": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_alias_nested_item": {
            "name": "test_alias_nested_item",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "user_one_address_alias_item": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_alias_nested_item_with_array": {
            "name": "test_alias_nested_item_with_array",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "user_array_address_alias": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_alias_nested_item_with_map": {
            "name": "test_alias_nested_item_with_map",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "user_map_address_alias": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "dataclasses-avroschema-master/tests/schemas/test_pydantic.py": {
        "test_pydantic_record_schema_primitive_types": {
            "name": "test_pydantic_record_schema_primitive_types",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "user_avro_json": [
                    "str"
                ]
            }
        },
        "test_pydantic_record_schema_complex_types": {
            "name": "test_pydantic_record_schema_complex_types",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "user_advance_avro_json": [
                    "Iterator[Tuple[hermes.types.UserType, hermes.types.EmailAddressType]]",
                    "str",
                    "typing.Iterator"
                ],
                "color_enum": []
            }
        },
        "test_pydantic_record_schema_complex_types_with_defaults": {
            "name": "test_pydantic_record_schema_complex_types_with_defaults",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "user_advance_with_defaults_avro_json": [
                    "Optional[str]",
                    "str",
                    "set",
                    "None",
                    "set[]"
                ],
                "color_enum": []
            }
        },
        "test_pydantic_record_schema_logical_types": {
            "name": "test_pydantic_record_schema_logical_types",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "logical_types_schema": [
                    "str"
                ]
            }
        },
        "test_pydantic_record_one_to_one_relationship": {
            "name": "test_pydantic_record_one_to_one_relationship",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "user_one_address_schema": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Iterator[Tuple[hermes.types.UserType, hermes.types.EmailAddressType]]",
                    "typing.Iterator"
                ]
            }
        },
        "test_pydantic_record_one_to_one_relationship_with_none_default": {
            "name": "test_pydantic_record_one_to_one_relationship_with_none_default",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "user_one_address_schema_with_none_default": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_pydantic_record_one_to_many_relationship": {
            "name": "test_pydantic_record_one_to_many_relationship",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "user_many_address_schema": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Iterator[Tuple[hermes.types.UserType, hermes.types.EmailAddressType]]",
                    "typing.Iterator"
                ]
            }
        },
        "test_pydantic_record_one_to_many_map_relationship": {
            "name": "test_pydantic_record_one_to_many_map_relationship",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "user_many_address_map_schema": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Iterator[Tuple[hermes.types.UserType, hermes.types.EmailAddressType]]",
                    "typing.Iterator"
                ]
            }
        },
        "test_pydantic_record_self_one_to_one_relationship": {
            "name": "test_pydantic_record_self_one_to_one_relationship",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "user_self_reference_one_to_one_schema": [
                    "starlette.types.Receive",
                    "starlette.types.Scope"
                ]
            }
        },
        "test_pydantic_record_self_one_to_many_relationship": {
            "name": "test_pydantic_record_self_one_to_many_relationship",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "user_self_reference_one_to_many_schema": [
                    "starlette.types.Receive",
                    "starlette.types.Scope"
                ]
            }
        },
        "test_pydantic_record_self_one_to_many_map_relationship": {
            "name": "test_pydantic_record_self_one_to_many_map_relationship",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "user_self_reference_one_to_many_map_schema": [
                    "starlette.types.Receive",
                    "starlette.types.Scope"
                ]
            }
        },
        "test_pydantic_record_schema_with_unions_type": {
            "name": "test_pydantic_record_schema_with_unions_type",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "union_type_schema": [
                    "int"
                ]
            }
        },
        "test_create_instance": {
            "name": "test_create_instance",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate": {
            "name": "test_validate",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_json_schema": {
            "name": "test_json_schema",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "AvroBaseModel_model": [
                    "str",
                    "int"
                ]
            }
        },
        "test_to_dict": {
            "name": "test_to_dict",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "AvroBaseModel_model": [
                    "str"
                ]
            }
        },
        "test_to_json": {
            "name": "test_to_json",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "AvroBaseModel_model": [
                    "str",
                    "float",
                    "cmk.gui.utils.html.HTML"
                ]
            }
        },
        "test_to_json_logical_types": {
            "name": "test_to_json_logical_types",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_serialization": {
            "name": "test_serialization",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "color_enum": [
                    "str",
                    "float"
                ]
            }
        },
        "test_not_pydantic_not_installed": {
            "name": "test_not_pydantic_not_installed",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "List[cmk.utils.type_defs.HostName]",
                    "list[cmk.utils.type_defs.HostName]"
                ]
            }
        },
        "test_parse_obj": {
            "name": "test_parse_obj",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dataclasses-avroschema-master/tests/schemas/test_recursive_schemas.py": {
        "test_self_one_to_one_relationship": {
            "name": "test_self_one_to_one_relationship",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "user_self_reference_one_to_one_schema": []
            }
        },
        "test_self_one_to_many_relationship": {
            "name": "test_self_one_to_many_relationship",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "user_self_reference_one_to_many_schema": []
            }
        },
        "test_self_one_to_many_map_relationship": {
            "name": "test_self_one_to_many_map_relationship",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "user_self_reference_one_to_many_map_schema": []
            }
        }
    },
    "dataclasses-avroschema-master/tests/schemas/test_schema.py": {
        "test_total_schema_fields_from_class": {
            "name": "test_total_schema_fields_from_class",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "user_dataclass": []
            }
        },
        "test_total_schema_fields_from_instance": {
            "name": "test_total_schema_fields_from_instance",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "user_dataclass": []
            }
        },
        "test_schema_render_from_class_with_field_metadata": {
            "name": "test_schema_render_from_class_with_field_metadata",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "user_dataclass_with_field_metadata": [
                    "Optional[str]",
                    "str",
                    "dict",
                    "None",
                    "dict[, ]"
                ],
                "user_with_field_metadata_avro_json": [
                    "Optional[str]",
                    "str",
                    "dict",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "test_schema_render_from_class": {
            "name": "test_schema_render_from_class",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "user_dataclass": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "user_avro_json": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_schema_render_from_instance": {
            "name": "test_schema_render_from_instance",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "user_dataclass": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "user_avro_json": [
                    "str"
                ]
            }
        },
        "test_schema_render_from_class_with_doc": {
            "name": "test_schema_render_from_class_with_doc",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "user_dataclass_with_doc": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "dict",
                    "dict[, ]"
                ],
                "user_avro_json": [
                    "str",
                    "Optional[str]",
                    "Mapping[str, Any]",
                    "dict"
                ]
            }
        },
        "test_schema_render_from_instance_with_doc": {
            "name": "test_schema_render_from_instance_with_doc",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "user_dataclass_with_doc": [
                    "str"
                ],
                "user_avro_json": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "test_schema_doc_from_meta": {
            "name": "test_schema_doc_from_meta",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_schema_cached": {
            "name": "test_schema_cached",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "user_v2_dataclass": [
                    "str",
                    "List[str]",
                    "Mapping[str, Any]"
                ],
                "user_v2_avro_json": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None"
                ]
            }
        },
        "test_extra_avro_attributes": {
            "name": "test_extra_avro_attributes",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "user_extra_avro_attributes": []
            }
        },
        "test_class_empty_metaclass": {
            "name": "test_class_empty_metaclass",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_schema_type": {
            "name": "test_invalid_schema_type",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "user_dataclass": [
                    "Callable[[List, bool], None]"
                ]
            }
        },
        "test_not_implementd_methods": {
            "name": "test_not_implementd_methods",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_namespace_required": {
            "name": "test_namespace_required",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_inherit_dataclass_missing_docs": {
            "name": "test_inherit_dataclass_missing_docs",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_fields": {
            "name": "test_get_fields",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_schema_name_from_relationship": {
            "name": "test_schema_name_from_relationship",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_alias_from_relationship": {
            "name": "test_alias_from_relationship",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate": {
            "name": "test_validate",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_enum_type_map": {
            "name": "test_get_enum_type_map",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "user_advance_dataclass_with_enum": [
                    "str"
                ],
                "color_enum": [
                    "str"
                ],
                "user_type_enum": [
                    "str"
                ]
            }
        },
        "test_get_enum_type_map_with_unions": {
            "name": "test_get_enum_type_map_with_unions",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "user_advance_dataclass_with_union_enum": [
                    "str",
                    "bool"
                ],
                "color_enum": [
                    "str",
                    "bool"
                ],
                "user_type_enum": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_get_enum_type_map_with_sub_record": {
            "name": "test_get_enum_type_map_with_sub_record",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "user_advance_dataclass_with_sub_record_and_enum": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "color_enum": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "user_type_enum": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_deserialize_complex_types": {
            "name": "test_deserialize_complex_types",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "user_advance_dataclass_with_sub_record_and_enum": [
                    "float"
                ],
                "color_enum": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "user_type_enum": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "test_deserialize_complex_types_invalid_enum_instance": {
            "name": "test_deserialize_complex_types_invalid_enum_instance",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "user_advance_dataclass_with_sub_record_and_enum": [
                    "bool"
                ]
            }
        },
        "test_parse_obj": {
            "name": "test_parse_obj",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dataclasses-avroschema-master/tests/schemas/test_schema_with_complex_types.py": {
        "test_schema_with_complex_types": {
            "name": "test_schema_with_complex_types",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "user_advance_dataclass": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "user_advance_avro_json": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_schema_with_complex_types_and_defaults": {
            "name": "test_schema_with_complex_types_and_defaults",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "user_advance_with_defaults_dataclass": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "user_advance_with_defaults_avro_json": [
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "test_schema_with_unions_type": {
            "name": "test_schema_with_unions_type",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "union_type_schema": [
                    "Callable",
                    "typing.Callable[, ]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_schema_with_unions_defaults": {
            "name": "test_schema_with_unions_defaults",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "default_union_schema": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "list",
                    "list[]"
                ]
            }
        },
        "test_schema_typing_optional_behavior": {
            "name": "test_schema_typing_optional_behavior",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "typing_optional_schema": [
                    "str",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ]
            }
        }
    },
    "dataclasses-avroschema-master/tests/schemas/test_schema_with_logical_types.py": {
        "test_logical_types_schema": {
            "name": "test_logical_types_schema",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "logical_types_schema": [
                    "str"
                ]
            }
        },
        "test_decimal_types_schema": {
            "name": "test_decimal_types_schema",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "decimal_types_schema": [
                    "typing.Callable[, ]",
                    "Callable",
                    "typing.Type",
                    "Type[Any]",
                    "type"
                ]
            }
        }
    },
    "dataclasses-avroschema-master/tests/serialization/test_complex_types_serialization.py": {
        "test_complex_fields": {
            "name": "test_complex_fields",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "user_advance_dataclass": [],
                "color_enum": [
                    "bool",
                    "typing.Iterable[typing.Iterable[typing.Any]]",
                    "int",
                    "Iterable[Iterable[Any]]"
                ]
            }
        },
        "test_complex_fields_with_defaults": {
            "name": "test_complex_fields_with_defaults",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "user_advance_with_defaults_dataclass": [
                    "bool",
                    "str"
                ],
                "color_enum": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "Callable[[], str]",
                    "typing.Callable[[], str]"
                ]
            }
        },
        "test_complex_fields_with_enum": {
            "name": "test_complex_fields_with_enum",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "user_advance_dataclass_with_enum": [
                    "int"
                ],
                "color_enum": [
                    "Callable[[List, bool], None]",
                    "typing.Callable[List,bool, None]",
                    "Optional[Iterable[Any]]",
                    "typing.Iterable[typing.Any]",
                    "None"
                ]
            }
        },
        "test_complex_fields_with_defaults_with_enum": {
            "name": "test_complex_fields_with_defaults_with_enum",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "user_advance_with_defaults_dataclass_with_enum": [
                    "str"
                ],
                "color_enum": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "Optional[Dict[str, str]]",
                    "Optional[\"Page\"]"
                ]
            }
        },
        "test_enum_fields_with_inner_schema": {
            "name": "test_enum_fields_with_inner_schema",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dataclasses-avroschema-master/tests/serialization/test_logical_types_serialization.py": {
        "test_logical_types": {
            "name": "test_logical_types",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_logical_union": {
            "name": "test_logical_union",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_logical_types_with_defaults": {
            "name": "test_logical_types_with_defaults",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_decimals_defaults": {
            "name": "test_decimals_defaults",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dataclasses-avroschema-master/tests/serialization/test_nested_schema_serialization.py": {
        "test_one_to_one_relationship": {
            "name": "test_one_to_one_relationship",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_one_to_many_relationship": {
            "name": "test_one_to_many_relationship",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_one_to_many_map_relationship": {
            "name": "test_one_to_many_map_relationship",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dataclasses-avroschema-master/tests/serialization/test_primitive_types_serialization.py": {
        "test_primitive_types": {
            "name": "test_primitive_types",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "user_dataclass": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "solo.server.db.types.SQLEngine"
                ]
            }
        },
        "test_primitive_types_with_defaults": {
            "name": "test_primitive_types_with_defaults",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_primitive_types_with_nulls": {
            "name": "test_primitive_types_with_nulls",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_float32_primitive_type": {
            "name": "test_float32_primitive_type",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dataclasses-avroschema-master/tests/serialization/test_recursive_schema_serialization.py": {
        "test_self_one_to_one_relationship": {
            "name": "test_self_one_to_one_relationship",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_self_one_to_many_relationship": {
            "name": "test_self_one_to_many_relationship",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_self_one_to_many_map_relationship": {
            "name": "test_self_one_to_many_map_relationship",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dataclasses-avroschema-master/tests/serialization/test_serialization.py": {
        "test_serialization": {
            "name": "test_serialization",
            "location": 154,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "klass": [
                    "int",
                    "str",
                    "bytes",
                    "dict[, ]",
                    "dict",
                    "bool"
                ],
                "data": [
                    "int",
                    "str",
                    "bytes",
                    "dict[, ]",
                    "dict",
                    "bool"
                ],
                "avro_binary": [
                    "bytes",
                    "bool",
                    "float",
                    "Optional[dict]",
                    "dict[, ]",
                    "Union[float, Tuple[float, float]]",
                    "None",
                    "tuple[typing.Union[float,float]]"
                ],
                "avro_json": [
                    "str",
                    "bool"
                ],
                "instance_json": [
                    "bool"
                ],
                "python_dict": [
                    "bool"
                ]
            }
        },
        "test_deserialization": {
            "name": "test_deserialization",
            "location": 162,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "klass": [
                    "int",
                    "str",
                    "bytes",
                    "dict[, ]",
                    "dict",
                    "bool"
                ],
                "data": [
                    "int",
                    "str",
                    "bytes",
                    "dict[, ]",
                    "dict",
                    "bool"
                ],
                "avro_binary": [
                    "bool",
                    "datetime",
                    "int"
                ],
                "avro_json": [
                    "int",
                    "None",
                    "bool",
                    "Optional[int]"
                ],
                "instance_json": [
                    "bool"
                ],
                "python_dict": [
                    "bool",
                    "None",
                    "datetime",
                    "Optional[int]"
                ]
            }
        },
        "test_deserialization_with_class": {
            "name": "test_deserialization_with_class",
            "location": 173,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "klass": [
                    "bool",
                    "float",
                    "datetime"
                ],
                "data": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]",
                    "list[str]",
                    "int",
                    "List[str]"
                ],
                "avro_binary": [
                    "bool",
                    "str",
                    "typing.Iterable[str]",
                    "datetime",
                    "int",
                    "Iterable[str]"
                ],
                "avro_json": [
                    "int",
                    "None",
                    "Optional[int]",
                    "bool"
                ],
                "instance_json": [
                    "bool",
                    "None",
                    "int",
                    "tuple[typing.Union[str,int]]",
                    "Optional[bool]",
                    "Tuple[str, int]"
                ],
                "python_dict": [
                    "bool",
                    "None",
                    "datetime",
                    "Optional[int]"
                ]
            }
        },
        "test_to_dict": {
            "name": "test_to_dict",
            "location": 184,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "klass": [
                    "int",
                    "bytes",
                    "str",
                    "bool",
                    "dict[, ]",
                    "dict",
                    "list[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "data": [
                    "int",
                    "bytes",
                    "str",
                    "bool",
                    "dict[, ]",
                    "dict",
                    "list[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "avro_binary": [
                    "bool",
                    "str"
                ],
                "avro_json": [
                    "bool",
                    "str"
                ],
                "instance_json": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "None",
                    "Optional[str]"
                ],
                "python_dict": [
                    "int",
                    "dict[int, dict[str, str]]",
                    "bool",
                    "dict[, ]",
                    "Dict[int, Dict[str, str]]",
                    "dict"
                ]
            }
        },
        "test_invalid_serialization_deserialization_types": {
            "name": "test_invalid_serialization_deserialization_types",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_deserialization_with_writer_schema__dict": {
            "name": "test_deserialization_with_writer_schema__dict",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_deserialization_with_writer_schema__avro_model": {
            "name": "test_deserialization_with_writer_schema__avro_model",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
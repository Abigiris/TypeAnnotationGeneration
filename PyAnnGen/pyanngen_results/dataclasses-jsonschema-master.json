{
    "dataclasses-jsonschema-master/setup.py": {
        "read": {
            "name": "read",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "f": [
                    "str",
                    "bytes",
                    "memoryview",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "dataclasses-jsonschema-master/test_issue.py": {},
    "dataclasses-jsonschema-master/dataclasses_jsonschema/apispec.py": {
        "_schema_reference": {
            "name": "_schema_reference",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "schema_type": [
                    "dataclasses_jsonschema.type_defs.SchemaType"
                ]
            }
        },
        "DataclassesPlugin.init_spec": {
            "name": "init_spec",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spec": [
                    "int",
                    "str",
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "None"
                ]
            }
        },
        "DataclassesPlugin.resolve_schema_refs": {
            "name": "resolve_schema_refs",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "DataclassesPlugin._schema_type": {
            "name": "_schema_type",
            "location": 35,
            "return": [
                "str",
                "Callable[..., T]",
                "Type",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataclassesPlugin.schema_helper": {
            "name": "schema_helper",
            "location": 38,
            "return": [
                "str",
                "None",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "_": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ],
                "schema": [
                    "Optional[Union[(dict, Type[T])]]"
                ]
            }
        },
        "DataclassesPlugin.parameter_helper": {
            "name": "parameter_helper",
            "location": 52,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "parameter": [
                    "_T0"
                ]
            }
        },
        "DataclassesPlugin.response_helper": {
            "name": "response_helper",
            "location": 56,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "_T0"
                ]
            }
        },
        "DataclassesPlugin.operation_helper": {
            "name": "operation_helper",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "None"
                ],
                "operations": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "typing.BinaryIO",
                    "list[]",
                    "Optional[BinaryIO]",
                    "list"
                ]
            }
        }
    },
    "dataclasses-jsonschema-master/dataclasses_jsonschema/field_types.py": {
        "FieldEncoder.to_wire": {
            "name": "to_wire",
            "location": 19,
            "return": [
                "OutType"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T"
                ]
            }
        },
        "FieldEncoder.to_python": {
            "name": "to_python",
            "location": 22,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "OutType"
                ]
            }
        },
        "FieldEncoder.json_schema": {
            "name": "json_schema",
            "location": 26,
            "return": [
                "type_defs.JsonDict",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DateFieldEncoder.to_wire": {
            "name": "to_wire",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "_datetime.date"
                ]
            }
        },
        "DateFieldEncoder.to_python": {
            "name": "to_python",
            "location": 36,
            "return": [
                "_datetime.date"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "DateFieldEncoder.json_schema": {
            "name": "json_schema",
            "location": 40,
            "return": [
                "str",
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DateTimeFieldEncoder.to_wire": {
            "name": "to_wire",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "_datetime.datetime"
                ]
            }
        },
        "DateTimeFieldEncoder.to_python": {
            "name": "to_python",
            "location": 56,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "DateTimeFieldEncoder.json_schema": {
            "name": "json_schema",
            "location": 60,
            "return": [
                "str",
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UuidField.to_wire": {
            "name": "to_wire",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "uuid.UUID"
                ]
            }
        },
        "UuidField.to_python": {
            "name": "to_python",
            "location": 74,
            "return": [
                "uuid.UUID"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "UuidField.json_schema": {
            "name": "json_schema",
            "location": 78,
            "return": [
                "str",
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecimalField.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "precision": [
                    "Optional[int]"
                ]
            }
        },
        "DecimalField.to_wire": {
            "name": "to_wire",
            "location": 91,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "decimal.Decimal"
                ]
            }
        },
        "DecimalField.to_python": {
            "name": "to_python",
            "location": 94,
            "return": [
                "decimal.Decimal"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "DecimalField.json_schema": {
            "name": "json_schema",
            "location": 98,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,float]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IPv4AddressField.to_wire": {
            "name": "to_wire",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "ipaddress.IPv4Address"
                ]
            }
        },
        "IPv4AddressField.to_python": {
            "name": "to_python",
            "location": 110,
            "return": [
                "ipaddress.IPv4Address"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "IPv4AddressField.json_schema": {
            "name": "json_schema",
            "location": 114,
            "return": [
                "str",
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IPv6AddressField.to_wire": {
            "name": "to_wire",
            "location": 120,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "ipaddress.IPv6Address"
                ]
            }
        },
        "IPv6AddressField.to_python": {
            "name": "to_python",
            "location": 123,
            "return": [
                "ipaddress.IPv6Address"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "IPv6AddressField.json_schema": {
            "name": "json_schema",
            "location": 127,
            "return": [
                "str",
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dataclasses-jsonschema-master/dataclasses_jsonschema/type_defs.py": {
        "_NULL_TYPE.__bool__": {
            "name": "__bool__",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dataclasses-jsonschema-master/dataclasses_jsonschema/type_hints.py": {
        "get_elts": {
            "name": "get_elts",
            "location": 14,
            "return": [
                "Generator[(_ast.expr, Any, None)]"
            ],
            "arguments": {
                "op": [
                    "_ast.BinOp"
                ]
            }
        },
        "get_class_type_hints": {
            "name": "get_class_type_hints",
            "location": 69,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "klass": [
                    "type"
                ],
                "localns": [
                    "Type[T]",
                    "str",
                    "None",
                    "typing.Type",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "RewriteUnionTypes.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RewriteUnionTypes.visit_BinOp": {
            "name": "visit_BinOp",
            "location": 28,
            "return": [
                "Union[(_ast.BinOp, _ast.Subscript)]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "_ast.BinOp"
                ]
            }
        },
        "RewriteBuiltinGenerics.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RewriteBuiltinGenerics.visit_Name": {
            "name": "visit_Name",
            "location": 61,
            "return": [
                "_ast.Name"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "_ast.Name"
                ]
            }
        }
    },
    "dataclasses-jsonschema-master/dataclasses_jsonschema/__init__.py": {
        "get_field_args": {
            "name": "get_field_args",
            "location": 67,
            "return": [],
            "arguments": {
                "field_type": []
            }
        },
        "is_enum": {
            "name": "is_enum",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {
                "field_type": []
            }
        },
        "issubclass_safe": {
            "name": "issubclass_safe",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "klass": [],
                "base": [
                    "type"
                ]
            }
        },
        "is_optional": {
            "name": "is_optional",
            "location": 85,
            "return": [
                "bool"
            ],
            "arguments": {
                "field": []
            }
        },
        "is_final": {
            "name": "is_final",
            "location": 92,
            "return": [
                "bool"
            ],
            "arguments": {
                "field": []
            }
        },
        "is_literal": {
            "name": "is_literal",
            "location": 101,
            "return": [
                "bool"
            ],
            "arguments": {
                "field": []
            }
        },
        "is_nullable": {
            "name": "is_nullable",
            "location": 110,
            "return": [
                "bool"
            ],
            "arguments": {
                "field": []
            }
        },
        "unwrap_final": {
            "name": "unwrap_final",
            "location": 120,
            "return": [],
            "arguments": {
                "final_type": []
            }
        },
        "unwrap_optional": {
            "name": "unwrap_optional",
            "location": 124,
            "return": [],
            "arguments": {
                "optional_type": []
            }
        },
        "unwrap_nullable": {
            "name": "unwrap_nullable",
            "location": 129,
            "return": [],
            "arguments": {
                "nullable_type": []
            }
        },
        "schema_reference": {
            "name": "schema_reference",
            "location": 136,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "schema_type": [
                    "dataclasses_jsonschema.type_defs.SchemaType"
                ],
                "schema_name": [
                    "str"
                ]
            }
        },
        "_to_camel_case": {
            "name": "_to_camel_case",
            "location": 153,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "validate_func": {
            "name": "validate_func",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [],
                "schema": [
                    "Mapping[(str, Any)]"
                ]
            }
        },
        "FieldMeta.as_dict": {
            "name": "as_dict",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JsonSchemaMixin._discriminator": {
            "name": "_discriminator",
            "location": 230,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "JsonSchemaMixin.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "discriminator": [
                    "Union[(bool, str)]"
                ],
                "allow_additional_props": [
                    "bool"
                ],
                "serialise_properties": [
                    "Union[(bool, Tuple[(str, ...)])]"
                ]
            }
        },
        "JsonSchemaMixin.field_mapping": {
            "name": "field_mapping",
            "location": 273,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "JsonSchemaMixin.register_field_encoders": {
            "name": "register_field_encoders",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "field_encoders": [
                    "Dict[(type, dataclasses_jsonschema.field_types.FieldEncoder)]"
                ]
            }
        },
        "JsonSchemaMixin._encode_field": {
            "name": "_encode_field",
            "location": 292,
            "return": [],
            "arguments": {
                "cls": [],
                "field_type": [],
                "value": [],
                "omit_none": [
                    "bool"
                ]
            }
        },
        "JsonSchemaMixin._get_fields": {
            "name": "_get_fields",
            "location": 355,
            "return": [
                "List[JsonSchemaField]"
            ],
            "arguments": {
                "cls": [],
                "base_fields": []
            }
        },
        "JsonSchemaMixin.to_dict": {
            "name": "to_dict",
            "location": 397,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "omit_none": [
                    "bool"
                ],
                "validate": [
                    "bool"
                ],
                "validate_enums": [
                    "bool"
                ],
                "schema_type": [
                    "dataclasses_jsonschema.type_defs.SchemaType"
                ]
            }
        },
        "JsonSchemaMixin._decode_field": {
            "name": "_decode_field",
            "location": 430,
            "return": [],
            "arguments": {
                "cls": [],
                "field": [
                    "str"
                ],
                "field_type": [],
                "value": []
            }
        },
        "JsonSchemaMixin._validate": {
            "name": "_validate",
            "location": 496,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "data": [
                    "Dict[(str, Any)]"
                ],
                "validate_enums": [
                    "bool"
                ],
                "schema_type": [
                    "dataclasses_jsonschema.type_defs.SchemaType"
                ]
            }
        },
        "JsonSchemaMixin.from_dict": {
            "name": "from_dict",
            "location": 522,
            "return": [
                "T"
            ],
            "arguments": {
                "cls": [
                    "Type[T]"
                ],
                "data": [
                    "Dict[(str, Any)]"
                ],
                "validate": [
                    "bool"
                ],
                "validate_enums": [
                    "bool"
                ],
                "schema_type": [
                    "dataclasses_jsonschema.type_defs.SchemaType"
                ]
            }
        },
        "JsonSchemaMixin.from_object": {
            "name": "from_object",
            "location": 567,
            "return": [
                "T"
            ],
            "arguments": {
                "cls": [
                    "Type[T]"
                ],
                "obj": [],
                "exclude": [
                    "Tuple[(Union[(str, Tuple[(str, FieldExcludeList)])], ...)]"
                ]
            }
        },
        "JsonSchemaMixin._is_json_schema_subclass": {
            "name": "_is_json_schema_subclass",
            "location": 611,
            "return": [
                "bool"
            ],
            "arguments": {
                "field_type": []
            }
        },
        "JsonSchemaMixin._get_field_meta": {
            "name": "_get_field_meta",
            "location": 615,
            "return": [
                "Tuple[(FieldMeta, bool)]"
            ],
            "arguments": {
                "cls": [],
                "field": [
                    "dataclasses.Field"
                ],
                "schema_type": [
                    "dataclasses_jsonschema.type_defs.SchemaType"
                ]
            }
        },
        "JsonSchemaMixin._get_field_schema": {
            "name": "_get_field_schema",
            "location": 648,
            "return": [
                "Tuple[(Dict[(str, Any)], bool)]"
            ],
            "arguments": {
                "cls": [],
                "field": [
                    "Union[(type, dataclasses.Field)]"
                ],
                "schema_options": [
                    "SchemaOptions"
                ]
            }
        },
        "JsonSchemaMixin._get_field_definitions": {
            "name": "_get_field_definitions",
            "location": 739,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "field_type": [],
                "definitions": [
                    "Dict[(str, Any)]"
                ],
                "schema_options": [
                    "SchemaOptions"
                ]
            }
        },
        "JsonSchemaMixin.all_json_schemas": {
            "name": "all_json_schemas",
            "location": 766,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "cls": [
                    "Type[T]"
                ],
                "schema_type": [
                    "dataclasses_jsonschema.type_defs.SchemaType"
                ],
                "validate_enums": [
                    "bool"
                ]
            }
        },
        "JsonSchemaMixin.json_schema": {
            "name": "json_schema",
            "location": 781,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "cls": [],
                "embeddable": [
                    "bool"
                ],
                "schema_type": [
                    "dataclasses_jsonschema.type_defs.SchemaType"
                ],
                "validate_enums": [
                    "bool"
                ]
            }
        },
        "JsonSchemaMixin._get_field_type_name": {
            "name": "_get_field_type_name",
            "location": 887,
            "return": [
                "str"
            ],
            "arguments": {
                "field_type": []
            }
        },
        "JsonSchemaMixin.from_json": {
            "name": "from_json",
            "location": 896,
            "return": [
                "T"
            ],
            "arguments": {
                "cls": [
                    "Type[T]"
                ],
                "data": [
                    "Union[(bytes, str)]"
                ],
                "validate": [
                    "bool"
                ]
            }
        },
        "JsonSchemaMixin.to_json": {
            "name": "to_json",
            "location": 899,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "omit_none": [
                    "bool"
                ],
                "validate": [
                    "bool"
                ]
            }
        },
        "JsonSchemaMixin._get_fields._get_fields_uncached": {
            "name": "_get_fields_uncached",
            "location": 357,
            "return": [],
            "arguments": {}
        },
        "JsonSchemaMixin._encode_field.encoder": {
            "name": "encoder",
            "location": 350,
            "return": [],
            "arguments": {
                "_": [],
                "v": [],
                "__": []
            }
        },
        "JsonSchemaMixin._decode_field.decoder": {
            "name": "decoder",
            "location": 488,
            "return": [],
            "arguments": {
                "_": [],
                "__": [],
                "val": []
            }
        }
    },
    "dataclasses-jsonschema-master/tests/conftest.py": {
        "PostcodeField.json_schema": {
            "name": "json_schema",
            "location": 15,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Point.field_mapping": {
            "name": "field_mapping",
            "location": 40,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "typing.Type",
                    "bool",
                    "typing.Callable[typing.Any, T]",
                    "Type",
                    "list[str]",
                    "Type[T]",
                    "Callable[[Any], T]",
                    "List[str]"
                ]
            }
        },
        "ShoppingCart.cost": {
            "name": "cost",
            "location": 97,
            "return": [
                "bool",
                "list",
                "List[Dict[str, Any]]",
                "frozenset",
                "str",
                "Counter",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dataclasses-jsonschema-master/tests/nullable.py": {},
    "dataclasses-jsonschema-master/tests/test_apispec_plugin.py": {
        "random_pet": {
            "name": "random_pet",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_api_spec_schema": {
            "name": "test_api_spec_schema",
            "location": 145,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "dataclasses-jsonschema-master/tests/test_core.py": {
        "compose_schema": {
            "name": "compose_schema",
            "location": 157,
            "return": [
                "dict"
            ],
            "arguments": {
                "schema": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "definitions": [
                    "None",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "test_field_with_default_factory": {
            "name": "test_field_with_default_factory",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_field_with_default_dataclass": {
            "name": "test_field_with_default_dataclass",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_embeddable_json_schema": {
            "name": "test_embeddable_json_schema",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_json_schema": {
            "name": "test_json_schema",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_serialise_deserialise": {
            "name": "test_serialise_deserialise",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_from_json_to_json": {
            "name": "test_from_json_to_json",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_data": {
            "name": "test_invalid_data",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_newtype_field_validation": {
            "name": "test_newtype_field_validation",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_recursive_data": {
            "name": "test_recursive_data",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_recursive_validation": {
            "name": "test_recursive_validation",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_non_string_keys": {
            "name": "test_non_string_keys",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_type_union_schema": {
            "name": "test_type_union_schema",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_type_union_serialise": {
            "name": "test_type_union_serialise",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_type_union_deserialise": {
            "name": "test_type_union_deserialise",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_default_values": {
            "name": "test_default_values",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_default_factory": {
            "name": "test_default_factory",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_read_only_field": {
            "name": "test_read_only_field",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_read_only_field_no_default": {
            "name": "test_read_only_field_no_default",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_field_types": {
            "name": "test_field_types",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_field_metadata": {
            "name": "test_field_metadata",
            "location": 420,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_final_field": {
            "name": "test_final_field",
            "location": 459,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_literal_types": {
            "name": "test_literal_types",
            "location": 480,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_from_object": {
            "name": "test_from_object",
            "location": 500,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_serialise_deserialise_opaque_data": {
            "name": "test_serialise_deserialise_opaque_data",
            "location": 551,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_inherited_schema": {
            "name": "test_inherited_schema",
            "location": 558,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_optional_union": {
            "name": "test_optional_union",
            "location": 614,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_nullable_field": {
            "name": "test_nullable_field",
            "location": 630,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_underscore_fields": {
            "name": "test_underscore_fields",
            "location": 667,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_discriminators": {
            "name": "test_discriminators",
            "location": 690,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_decode_encode": {
            "name": "test_set_decode_encode",
            "location": 737,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_any_type_schema": {
            "name": "test_any_type_schema",
            "location": 767,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_additional_properties_allowed": {
            "name": "test_additional_properties_allowed",
            "location": 786,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_property_serialisation": {
            "name": "test_property_serialisation",
            "location": 806,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_property_serialisation_all_properties": {
            "name": "test_property_serialisation_all_properties",
            "location": 837,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_inherited_field_narrowing": {
            "name": "test_inherited_field_narrowing",
            "location": 866,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unrecognized_enum_value": {
            "name": "test_unrecognized_enum_value",
            "location": 909,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_inheritance_and_additional_properties_disallowed": {
            "name": "test_inheritance_and_additional_properties_disallowed",
            "location": 932,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_newtype_decoding": {
            "name": "test_newtype_decoding",
            "location": 945,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_module_name_extension": {
            "name": "test_module_name_extension",
            "location": 968,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_custom_format": {
            "name": "test_custom_format",
            "location": 983,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_untyped_dict": {
            "name": "test_untyped_dict",
            "location": 1007,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_integer_dict_keys": {
            "name": "test_integer_dict_keys",
            "location": 1019,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_union_with_discriminator": {
            "name": "test_union_with_discriminator",
            "location": 1033,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tuple_item_schema": {
            "name": "test_tuple_item_schema",
            "location": 1057,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_from_object.AuthorModel.__init__": {
            "name": "__init__",
            "location": 509,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "age": [],
                "books": []
            }
        },
        "test_from_object.BookModel.__init__": {
            "name": "__init__",
            "location": 516,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "first_print": [],
                "publisher": [],
                "genre": []
            }
        },
        "test_property_serialisation.Rectangle.area": {
            "name": "area",
            "location": 814,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_property_serialisation.Rectangle.perimeter": {
            "name": "perimeter",
            "location": 818,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_property_serialisation_all_properties.Rectangle.area": {
            "name": "area",
            "location": 845,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_property_serialisation_all_properties.Rectangle.perimeter": {
            "name": "perimeter",
            "location": 849,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_newtype_decoding.StrippedStringField.to_python": {
            "name": "to_python",
            "location": 950,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "test_newtype_decoding.StrippedStringField.json_schema": {
            "name": "json_schema",
            "location": 954,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_custom_format.SlugField.json_schema": {
            "name": "json_schema",
            "location": 989,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dataclasses-jsonschema-master/tests/test_peps.py": {
        "test_pep_604_types": {
            "name": "test_pep_604_types",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pep_585_types": {
            "name": "test_pep_585_types",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dataclasses-jsonschema-master/tests/__init__.py": {}
}
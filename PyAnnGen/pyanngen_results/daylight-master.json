{
    "daylight-master/setup.py": {},
    "daylight-master/daylight/default_settings.py": {},
    "daylight-master/daylight/routes.py": {
        "index": {
            "name": "index",
            "location": 5,
            "return": [
                "Text",
                "Dict",
                "bytes",
                "int"
            ],
            "arguments": {}
        }
    },
    "daylight-master/daylight/__init__.py": {
        "main": {
            "name": "main",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "daylight-master/daylight/config/dev.py": {},
    "daylight-master/daylight/config/test.py": {},
    "daylight-master/daylight/config/__init__.py": {
        "load": {
            "name": "load",
            "location": 12,
            "return": [
                "Dict[Text,]",
                "Dict",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "defaults": [
                    "None",
                    "bool",
                    "T",
                    "Optional[T]"
                ]
            }
        },
        "postgres_url": {
            "name": "postgres_url",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "config": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "daylight-master/daylight/db/__init__.py": {},
    "daylight-master/daylight/db/engine/database.py": {
        "DBError.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kind": [
                    "str",
                    "bool",
                    "int",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "msg": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "DaylightDB.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "postgres_url": [
                    "str",
                    "int",
                    "Mapping[str,List[str]]",
                    "Mapping"
                ]
            }
        },
        "DaylightDB.connect_to_backend": {
            "name": "connect_to_backend",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DaylightDB.disconnect": {
            "name": "disconnect",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DaylightDB.search": {
            "name": "search",
            "location": 97,
            "return": [
                "Union[(daylight.db.models.f_account_type.WomanFemmeAccountType, daylight.db.models.profile.Profile, daylight.db.models.user.User, List[Union[(daylight.db.models.like.Like, daylight.db.models.m_account_type.ManMascAccountType, daylight.db.models.match.Match, daylight.db.models.photo.Photo, daylight.db.models.tag.Tag)]])]"
            ],
            "arguments": {
                "self": [],
                "q": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "DaylightDB.execute": {
            "name": "execute",
            "location": 166,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "bool",
                    "str",
                    "Dict"
                ]
            }
        }
    },
    "daylight-master/daylight/db/engine/tables.py": {
        "create_tables": {
            "name": "create_tables",
            "location": 124,
            "return": [
                "bool"
            ],
            "arguments": {
                "db_conn": [
                    "id3c.db.session.DatabaseSession",
                    "zerver.models.Realm"
                ]
            }
        }
    },
    "daylight-master/daylight/db/engine/__init__.py": {},
    "daylight-master/daylight/db/engine/effects/likes.py": {
        "retrieve_likes": {
            "name": "retrieve_likes",
            "location": 7,
            "return": [
                "List[models.like.Like]"
            ],
            "arguments": {
                "cursor": [
                    "daylighdb.models.User",
                    "zerver.models.UserProfile",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                    "lms.lmsdb.models.User",
                    "lms.lmsdb.models.Solution",
                    "zerver.models.PreregistrationUser",
                    "bool"
                ],
                "user": [
                    "List[S]",
                    "bool",
                    "daylighdb.models.User",
                    "zerver.models.UserProfile",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                    "lms.lmsdb.models.User",
                    "lms.lmsdb.models.Solution",
                    "zerver.models.PreregistrationUser"
                ]
            }
        },
        "revoke_like": {
            "name": "revoke_like",
            "location": 22,
            "return": [
                "models.like.Like"
            ],
            "arguments": {
                "cursor": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ],
                "like": [
                    "int",
                    "Callable",
                    "str",
                    "models.Question"
                ]
            }
        },
        "send_like": {
            "name": "send_like",
            "location": 37,
            "return": [
                "models.like.Like"
            ],
            "arguments": {
                "cursor": [
                    "daylighdb.models.User",
                    "str",
                    "float",
                    "Optional[int]",
                    "int"
                ],
                "fr": [
                    "float",
                    "daylighdb.models.User",
                    "int",
                    "List",
                    "None",
                    "Optional[int]",
                    "Optional[abilian.core.models.Model]"
                ],
                "to": [
                    "float",
                    "daylighdb.models.User",
                    "int",
                    "List",
                    "None",
                    "Optional[int]",
                    "Optional[abilian.core.models.Model]"
                ]
            }
        }
    },
    "daylight-master/daylight/db/engine/effects/matches.py": {
        "establish_match": {
            "name": "establish_match",
            "location": 7,
            "return": [
                "models.match.Match"
            ],
            "arguments": {
                "cursor": [
                    "Optional[int]",
                    "str",
                    "int",
                    "float"
                ],
                "fr": [
                    "List[dict[str,Any]]",
                    "str",
                    "List[Dict[str,Any]]",
                    "Type",
                    "homeassistancomponents.media_source.models.MediaSourceItem",
                    "Type[T]"
                ],
                "to": [
                    "List[dict[str,Any]]",
                    "str",
                    "List[Dict[str,Any]]",
                    "Type",
                    "homeassistancomponents.media_source.models.MediaSourceItem",
                    "Type[T]"
                ]
            }
        },
        "retrieve_matches": {
            "name": "retrieve_matches",
            "location": 23,
            "return": [
                "List[models.match.Match]"
            ],
            "arguments": {
                "cursor": [
                    "daylighdb.models.User",
                    "zerver.models.UserProfile",
                    "daylighdb.models.Photo"
                ],
                "user": [
                    "daylighdb.models.User",
                    "zerver.models.UserProfile",
                    "daylighdb.models.Photo"
                ]
            }
        },
        "unmatch": {
            "name": "unmatch",
            "location": 38,
            "return": [
                "models.match.Match"
            ],
            "arguments": {
                "cursor": [
                    "str",
                    "Match"
                ],
                "match": [
                    "str",
                    "Match"
                ]
            }
        }
    },
    "daylight-master/daylight/db/engine/effects/photos.py": {
        "delete_photo": {
            "name": "delete_photo",
            "location": 9,
            "return": [
                "models.photo.Photo"
            ],
            "arguments": {
                "cursor": [
                    "daylighdb.models.Photo",
                    "str",
                    "zerver.models.Realm",
                    "viewer.models.Archive",
                    "models.Credentials"
                ],
                "photo": [
                    "str",
                    "daylighdb.models.Photo",
                    "zerver.models.Realm",
                    "viewer.models.Archive",
                    "models.Credentials"
                ]
            }
        },
        "retrieve_photos": {
            "name": "retrieve_photos",
            "location": 25,
            "return": [
                "List[models.photo.Photo]"
            ],
            "arguments": {
                "cursor": [
                    "daylighdb.models.User",
                    "zerver.models.Recipient",
                    "zerver.models.UserProfile",
                    "int"
                ],
                "user": [
                    "int",
                    "daylighdb.models.User",
                    "zerver.models.Recipient",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "set_profile_pic": {
            "name": "set_profile_pic",
            "location": 43,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "cursor": [
                    "daylighdb.models.User",
                    "daylighdb.models.Photo",
                    "zerver.models.Realm",
                    "datetime.datetime",
                    "models.User",
                    "zerver.models.UserProfile",
                    "django.contrib.auth.models.User",
                    "abilian.core.models.subjects.User"
                ],
                "user": [
                    "daylighdb.models.User",
                    "daylighdb.models.Photo",
                    "zerver.models.Realm",
                    "datetime.datetime",
                    "models.User",
                    "zerver.models.UserProfile",
                    "django.contrib.auth.models.User",
                    "abilian.core.models.subjects.User"
                ],
                "photo": [
                    "daylighdb.models.User",
                    "daylighdb.models.Photo",
                    "zerver.models.Realm",
                    "datetime.datetime",
                    "models.User",
                    "zerver.models.UserProfile",
                    "django.contrib.auth.models.User",
                    "abilian.core.models.subjects.User"
                ]
            }
        },
        "upload_photo": {
            "name": "upload_photo",
            "location": 58,
            "return": [
                "models.photo.Photo"
            ],
            "arguments": {
                "cursor": [
                    "str",
                    "Dict[str, mypy.build.State]",
                    "int"
                ],
                "user": [
                    "int",
                    "str",
                    "daylighdb.models.User"
                ],
                "byte_stream": [
                    "bool",
                    "str",
                    "io.BytesIO",
                    "List[tuple[Union[str,int]]]",
                    "app.models.user.User.InDB",
                    "List[Tuple[str,int]]"
                ]
            }
        }
    },
    "daylight-master/daylight/db/engine/effects/profiles.py": {
        "retrieve_profile": {
            "name": "retrieve_profile",
            "location": 5,
            "return": [
                "models.profile.Profile"
            ],
            "arguments": {
                "cursor": [
                    "zerver.models.UserProfile",
                    "django.contrib.auth.models.User",
                    "abilian.core.models.subjects.User",
                    "daylighdb.models.User"
                ],
                "user": [
                    "str",
                    "daylighdb.models.User",
                    "zerver.models.Stream",
                    "zerver.models.UserProfile",
                    "zerver.models.Recipient",
                    "lms.lmsdb.models.User",
                    "lms.lmsdb.models.Solution",
                    "core.models.my_user.MyUser"
                ]
            }
        },
        "retrieve_account_type": {
            "name": "retrieve_account_type",
            "location": 29,
            "return": [
                "Union[(models.f_account_type.WomanFemmeAccountType, List[models.m_account_type.ManMascAccountType])]"
            ],
            "arguments": {
                "cursor": [
                    "str",
                    "recidiviz.persistence.entity.state.entities.StateIncarcerationPeriod",
                    "int",
                    "bytes",
                    "gardnr.models.Driver"
                ],
                "profile": [
                    "List[S]",
                    "float",
                    "daylighdb.models.Profile",
                    "str",
                    "List[recidiviz.persistence.entity.state.entities.StateIncarcerationSentence]",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionSentence]",
                    "List[zerver.models.Stream]"
                ]
            }
        },
        "update_profile": {
            "name": "update_profile",
            "location": 55,
            "return": [
                "str",
                "bool",
                "float",
                "Dict",
                "zam_repondeur.models.Amendement",
                "int"
            ],
            "arguments": {
                "cursor": [
                    "daylighdb.models.Profile",
                    "str",
                    "bool",
                    "dict",
                    "zerver.models.Realm"
                ],
                "profile": [
                    "str",
                    "bool",
                    "daylighdb.models.Profile",
                    "Dict",
                    "zerver.models.Realm"
                ]
            }
        }
    },
    "daylight-master/daylight/db/engine/effects/state.py": {},
    "daylight-master/daylight/db/engine/effects/tags.py": {
        "retrieve_tags": {
            "name": "retrieve_tags",
            "location": 7,
            "return": [
                "List[models.tag.Tag]"
            ],
            "arguments": {
                "cursor": [
                    "str",
                    "app.models.User",
                    "abilian.services.security.models.Permission",
                    "abilian.services.security.models.Role",
                    "asgard.models.user.User"
                ],
                "user": [
                    "str",
                    "daylighdb.models.User",
                    "models.User",
                    "zerver.models.UserProfile",
                    "app.models.GameMember",
                    "app.models.course.Course",
                    "app.models.user.User",
                    "daylighdb.models.Photo"
                ]
            }
        },
        "set_tags": {
            "name": "set_tags",
            "location": 22,
            "return": [
                "str",
                "Dict[str,Any]",
                "List[str]",
                "List"
            ],
            "arguments": {
                "cursor": [
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "user": [
                    "str",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]",
                    "None"
                ],
                "tags": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "List",
                    "Optional[bool]",
                    "int"
                ]
            }
        }
    },
    "daylight-master/daylight/db/engine/effects/users.py": {
        "create_user": {
            "name": "create_user",
            "location": 8,
            "return": [
                "models.user.User"
            ],
            "arguments": {
                "cursor": [
                    "str",
                    "Optional[str]",
                    "models.User"
                ],
                "email": [
                    "str",
                    "int"
                ],
                "password_hash": [
                    "str",
                    "int"
                ],
                "account_type": [
                    "str",
                    "None",
                    "Optional[str]",
                    "zerver.models.Realm"
                ]
            }
        },
        "delete_user": {
            "name": "delete_user",
            "location": 67,
            "return": [
                "models.user.User"
            ],
            "arguments": {
                "cursor": [
                    "daylighdb.models.User",
                    "zerver.models.Realm",
                    "daylighdb.models.Photo",
                    "models.User",
                    "app.models.user.User"
                ],
                "user": [
                    "daylighdb.models.User",
                    "zerver.models.Realm",
                    "daylighdb.models.Photo",
                    "models.User",
                    "app.models.user.User"
                ]
            }
        },
        "reset_password": {
            "name": "reset_password",
            "location": 82,
            "return": [
                "str",
                "List[S]",
                "models.Credentials",
                "Dict[Tuple[int,int],str]"
            ],
            "arguments": {
                "cursor": [
                    "daylighdb.models.User",
                    "asgard.models.user.User",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                    "lms.lmsdb.models.User",
                    "lms.lmsdb.models.Solution",
                    "str"
                ],
                "new_user": [
                    "List[S]",
                    "str",
                    "daylighdb.models.User",
                    "asgard.models.user.User",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                    "lms.lmsdb.models.User",
                    "lms.lmsdb.models.Solution"
                ]
            }
        },
        "retrieve_user": {
            "name": "retrieve_user",
            "location": 97,
            "return": [
                "models.user.User"
            ],
            "arguments": {
                "cursor": [
                    "str",
                    "transfer.models.TicketCategoryID",
                    "Optional[shop.order.transfer.models.OrderNumber]",
                    "transfer.models.Channel.ID",
                    "int",
                    "Sequence[int]"
                ],
                "user_id": [
                    "int",
                    "str",
                    "ajapaik.ajapaik_object_recognition.models.ObjectDetectionAnnotation",
                    "excars.models.locations.Location"
                ]
            }
        }
    },
    "daylight-master/daylight/db/engine/effects/__init__.py": {},
    "daylight-master/daylight/db/engine/query/mutation.py": {
        "register_user": {
            "name": "register_user",
            "location": 46,
            "return": [
                "Mutation"
            ],
            "arguments": {
                "email": [
                    "str"
                ],
                "password": [
                    "str",
                    "Dict"
                ],
                "account_type": [
                    "str"
                ]
            }
        },
        "reset_password": {
            "name": "reset_password",
            "location": 58,
            "return": [
                "Mutation"
            ],
            "arguments": {
                "updated_user": [
                    "str",
                    "daylighdb.models.User",
                    "bytes",
                    "bool",
                    "List[dict[str,Any]]",
                    "Union[str,bytes]",
                    "List[Dict[str,Any]]"
                ]
            }
        },
        "delete_user_account": {
            "name": "delete_user_account",
            "location": 67,
            "return": [
                "Mutation"
            ],
            "arguments": {
                "user": [
                    "int",
                    "daylighdb.models.User",
                    "zerver.models.UserProfile",
                    "tildes.models.user.User"
                ]
            }
        },
        "establish_match": {
            "name": "establish_match",
            "location": 103,
            "return": [
                "Mutation"
            ],
            "arguments": {
                "fr": [
                    "daylighdb.models.User",
                    "Dict[str, Any]",
                    "bytes",
                    "str",
                    "models.User"
                ],
                "to": [
                    "daylighdb.models.User",
                    "Dict[str, Any]",
                    "bytes",
                    "str",
                    "models.User"
                ]
            }
        },
        "unmatch": {
            "name": "unmatch",
            "location": 110,
            "return": [
                "Mutation"
            ],
            "arguments": {
                "match": [
                    "int",
                    "Set[str]",
                    "models.characters.states.AttributeType"
                ]
            }
        },
        "revoke_like": {
            "name": "revoke_like",
            "location": 89,
            "return": [
                "Mutation"
            ],
            "arguments": {
                "like": [
                    "List[list[str]]",
                    "str",
                    "List[List[str]]",
                    "None",
                    "Optional[socialhome.users.models.Profile]",
                    "daylighdb.models.Profile",
                    "Iterable[str]"
                ]
            }
        },
        "send_like": {
            "name": "send_like",
            "location": 96,
            "return": [
                "Mutation"
            ],
            "arguments": {
                "fr": [
                    "bytes",
                    "Dict[str,Any]",
                    "daylighdb.models.User",
                    "models.User"
                ],
                "to": [
                    "bytes",
                    "Dict[str,Any]",
                    "daylighdb.models.User",
                    "models.User"
                ]
            }
        },
        "delete_photo": {
            "name": "delete_photo",
            "location": 117,
            "return": [
                "Mutation"
            ],
            "arguments": {
                "photo": [
                    "str",
                    "Iterable[str]",
                    "daylighdb.models.Photo",
                    "bool",
                    "Dict[str,Any]",
                    "List[str]"
                ]
            }
        },
        "upload_photo": {
            "name": "upload_photo",
            "location": 124,
            "return": [
                "Mutation"
            ],
            "arguments": {
                "user": [
                    "str",
                    "daylighdb.models.User",
                    "Dict[str,Any]",
                    "io.BytesIO",
                    "List[str]",
                    "bool",
                    "None",
                    "Type",
                    "Optional[List[str]]",
                    "Type[analytics.models.BaseCount]",
                    "int"
                ],
                "photo_b64": [
                    "str",
                    "daylighdb.models.User",
                    "Dict[str,Any]",
                    "io.BytesIO",
                    "List[str]",
                    "bool",
                    "None",
                    "Type",
                    "Optional[List[str]]",
                    "Type[analytics.models.BaseCount]",
                    "int"
                ]
            }
        },
        "update_profile": {
            "name": "update_profile",
            "location": 131,
            "return": [
                "Mutation"
            ],
            "arguments": {
                "profile": [
                    "str",
                    "Iterable[str]",
                    "daylighdb.models.Profile"
                ]
            }
        },
        "set_tags": {
            "name": "set_tags",
            "location": 138,
            "return": [
                "Mutation"
            ],
            "arguments": {
                "user": [
                    "Iterable[str]",
                    "bytes",
                    "daylighdb.models.User",
                    "Set[str]",
                    "List[str]"
                ],
                "tags": [
                    "Iterable[str]",
                    "bytes",
                    "daylighdb.models.User",
                    "Set[str]",
                    "List[str]"
                ]
            }
        }
    },
    "daylight-master/daylight/db/engine/query/query.py": {
        "retrieve_user": {
            "name": "retrieve_user",
            "location": 39,
            "return": [
                "Query"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "Dict[str,Any]"
                ]
            }
        },
        "retrieve_profile": {
            "name": "retrieve_profile",
            "location": 46,
            "return": [
                "Query"
            ],
            "arguments": {
                "user": [
                    "Dict[str,Any]",
                    "Dict[str,taskiapplication.models.task.Task]",
                    "daylighdb.models.User",
                    "medtagger.database.models.Task",
                    "medtagger.database.models.User"
                ]
            }
        },
        "retrieve_tags": {
            "name": "retrieve_tags",
            "location": 53,
            "return": [
                "Query"
            ],
            "arguments": {
                "user": [
                    "str",
                    "Dict[str,str]",
                    "daylighdb.models.User",
                    "None",
                    "zerver.models.UserProfile",
                    "tracim.models.User",
                    "tracim.models.auth.User",
                    "Optional[Dict[str,str]]",
                    "core.models.User"
                ]
            }
        },
        "retrieve_matches": {
            "name": "retrieve_matches",
            "location": 61,
            "return": [
                "Query"
            ],
            "arguments": {
                "user": [
                    "Dict[str,Any]",
                    "str",
                    "daylighdb.models.User",
                    "medtagger.database.models.Task",
                    "medtagger.database.models.User"
                ]
            }
        },
        "retrieve_photos": {
            "name": "retrieve_photos",
            "location": 68,
            "return": [
                "Query"
            ],
            "arguments": {
                "user": [
                    "Dict[str,Any]",
                    "Dict[str,taskiapplication.models.task.Task]",
                    "daylighdb.models.User",
                    "medtagger.database.models.Task",
                    "medtagger.database.models.User"
                ]
            }
        },
        "retrieve_account_type": {
            "name": "retrieve_account_type",
            "location": 76,
            "return": [
                "Query"
            ],
            "arguments": {
                "profile": [
                    "str",
                    "daylighdb.models.Profile",
                    "int",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "retrieve_likes": {
            "name": "retrieve_likes",
            "location": 84,
            "return": [
                "Query"
            ],
            "arguments": {
                "user": [
                    "Dict[str,Any]",
                    "Dict[str,taskiapplication.models.task.Task]",
                    "daylighdb.models.User",
                    "medtagger.database.models.Task",
                    "medtagger.database.models.User"
                ]
            }
        }
    },
    "daylight-master/daylight/db/engine/query/security.py": {
        "hash_password": {
            "name": "hash_password",
            "location": 9,
            "return": [
                "bytes"
            ],
            "arguments": {
                "password": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        }
    },
    "daylight-master/daylight/db/engine/query/__init__.py": {},
    "daylight-master/daylight/db/models/f_account_type.py": {
        "WomanFemmeAccountType.owner": {
            "name": "owner",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "daylight-master/daylight/db/models/like.py": {
        "Like.from_user": {
            "name": "from_user",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Like.to_user": {
            "name": "to_user",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "daylight-master/daylight/db/models/match.py": {
        "Match.users": {
            "name": "users",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "daylight-master/daylight/db/models/m_account_type.py": {
        "ManMascAccountType.owner": {
            "name": "owner",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "daylight-master/daylight/db/models/photo.py": {
        "Photo.owner": {
            "name": "owner",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "daylight-master/daylight/db/models/profile.py": {
        "Profile.owner": {
            "name": "owner",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.profile_photo": {
            "name": "profile_photo",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.account_type": {
            "name": "account_type",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "daylight-master/daylight/db/models/tag.py": {},
    "daylight-master/daylight/db/models/user.py": {},
    "daylight-master/daylight/db/models/__init__.py": {},
    "daylight-master/daylight/routes/complete_registration.py": {
        "complete_registration": {
            "name": "complete_registration",
            "location": 5,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "daylight-master/daylight/routes/delete_match.py": {
        "delete_match": {
            "name": "delete_match",
            "location": 5,
            "return": [
                "Text",
                "str",
                "bool"
            ],
            "arguments": {}
        }
    },
    "daylight-master/daylight/routes/delete_photo.py": {
        "delete_photo": {
            "name": "delete_photo",
            "location": 5,
            "return": [
                "Text",
                "str",
                "int"
            ],
            "arguments": {}
        }
    },
    "daylight-master/daylight/routes/like.py": {
        "like": {
            "name": "like",
            "location": 5,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "daylight-master/daylight/routes/login.py": {
        "login": {
            "name": "login",
            "location": 5,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "daylight-master/daylight/routes/logout.py": {
        "logout": {
            "name": "logout",
            "location": 5,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "daylight-master/daylight/routes/matches.py": {
        "matches": {
            "name": "matches",
            "location": 5,
            "return": [
                "Text",
                "IO[str]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {}
        }
    },
    "daylight-master/daylight/routes/profile.py": {
        "profile": {
            "name": "profile",
            "location": 5,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "daylight-master/daylight/routes/rate_match.py": {
        "rate_match": {
            "name": "rate_match",
            "location": 5,
            "return": [
                "Text",
                "Callable[[T],bool]",
                "Iterable[T]"
            ],
            "arguments": {}
        }
    },
    "daylight-master/daylight/routes/register.py": {
        "register": {
            "name": "register",
            "location": 26,
            "return": [
                "str",
                "bool",
                "bytes",
                "List[dict]",
                "int"
            ],
            "arguments": {}
        }
    },
    "daylight-master/daylight/routes/suggest.py": {
        "suggest": {
            "name": "suggest",
            "location": 5,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "daylight-master/daylight/routes/update_profile.py": {
        "update_profile": {
            "name": "update_profile",
            "location": 5,
            "return": [
                "Text",
                "float",
                "str",
                "int",
                "bool"
            ],
            "arguments": {}
        }
    },
    "daylight-master/daylight/routes/upload_photo.py": {
        "upload_photo": {
            "name": "upload_photo",
            "location": 5,
            "return": [
                "Text",
                "str",
                "Optional[str]",
                "int",
                "bool"
            ],
            "arguments": {}
        }
    },
    "daylight-master/daylight/routes/__init__.py": {},
    "daylight-master/tests/__init__.py": {},
    "daylight-master/tests/integration/test_effects.py": {
        "_random_email": {
            "name": "_random_email",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "TestEffects.setUp": {
            "name": "setUp",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEffects.tearDown": {
            "name": "tearDown",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEffects.test_user_lifecycle": {
            "name": "test_user_lifecycle",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEffects.test_match_lifecycle": {
            "name": "test_match_lifecycle",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEffects.test_like_lifecycle": {
            "name": "test_like_lifecycle",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEffects.test_photo_lifecycle": {
            "name": "test_photo_lifecycle",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "daylight-master/tests/integration/__init__.py": {},
    "daylight-master/tests/unit/__init__.py": {}
}
{
    "dbupgrade-master/dbupgrade/apply.py": {
        "apply_files": {
            "name": "apply_files",
            "location": 12,
            "return": [
                "Tuple[(list, Any)]"
            ],
            "arguments": {
                "db_url": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ],
                "files": [
                    "List[str]",
                    "str",
                    "List",
                    "List[bytearray]"
                ]
            }
        },
        "apply_file": {
            "name": "apply_file",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "db_url": [
                    "str",
                    "Dict"
                ],
                "file_info": [
                    "str",
                    "IO",
                    "dbupgrade.files.FileInfo",
                    "utils.FileInfo",
                    "logging.Handler",
                    "Union[str,IO]"
                ]
            }
        }
    },
    "dbupgrade-master/dbupgrade/args.py": {
        "arguments_from_args": {
            "name": "arguments_from_args",
            "location": 26,
            "return": [
                "Arguments"
            ],
            "arguments": {
                "args": []
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 39,
            "return": [
                "Arguments"
            ],
            "arguments": {
                "argv": [
                    "argparse._SubParsersAction",
                    "argparse.ArgumentParser",
                    "argparse.Action"
                ]
            }
        },
        "Arguments.__post_init__": {
            "name": "__post_init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dbupgrade-master/dbupgrade/db.py": {
        "_quote_char": {
            "name": "_quote_char",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "engine": [
                    "str",
                    "bytes"
                ]
            }
        },
        "_execute_sql_ignore_errors": {
            "name": "_execute_sql_ignore_errors",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "engine": [
                    "str",
                    "bool",
                    "sqlalchemy.engine.Engine"
                ],
                "query": [
                    "str",
                    "bool",
                    "sqlalchemy.engine.Engine"
                ]
            }
        },
        "_should_escape_percents": {
            "name": "_should_escape_percents",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "connection": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "fetch_current_db_versions": {
            "name": "fetch_current_db_versions",
            "location": 65,
            "return": [
                "type",
                "List[int]",
                "Callable",
                "bool"
            ],
            "arguments": {
                "db_url": [
                    "str",
                    "Dict[str,Any]",
                    "int"
                ],
                "schema": [
                    "str",
                    "bool"
                ]
            }
        },
        "_fetch_or_create_version_info": {
            "name": "_fetch_or_create_version_info",
            "location": 78,
            "return": [
                "str",
                "int",
                "List[list[str]]",
                "List[str]",
                "Tuple[int]"
            ],
            "arguments": {
                "engine": [
                    "Dict[str,Any]",
                    "Dict[int,dict]",
                    "Dict"
                ],
                "schema": [
                    "str",
                    "float",
                    "Sequence[int]"
                ]
            }
        },
        "_try_creating_db_config_table": {
            "name": "_try_creating_db_config_table",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "engine": [
                    "int",
                    "bytes",
                    "str",
                    "List",
                    "Tuple[float,float,float,float]",
                    "Tuple[Union[float,float,float,float]]"
                ]
            }
        },
        "_try_fetching_version_info_for_schema": {
            "name": "_try_fetching_version_info_for_schema",
            "location": 96,
            "return": [
                "None",
                "List[str]",
                "Optional[Exception]",
                "str",
                "Optional[bytes]",
                "float",
                "Iterable[T]"
            ],
            "arguments": {
                "engine": [
                    "str"
                ],
                "schema": [
                    "str",
                    "Dict"
                ]
            }
        },
        "_insert_default_version_info": {
            "name": "_insert_default_version_info",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "engine": [
                    "Dict[str, Any]",
                    "Optional[List[str]]",
                    "float"
                ],
                "schema": [
                    "str",
                    "bytes",
                    "sqlalchemy.orm.scoping.scoped_session"
                ]
            }
        },
        "update_sql": {
            "name": "update_sql",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "db_url": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "sql": [
                    "int",
                    "str",
                    "Dict[str,str]",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "schema": [
                    "int",
                    "str",
                    "Dict[str,str]",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "version": [
                    "int",
                    "str",
                    "Dict[str,str]",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "api_level": [
                    "int",
                    "str",
                    "Dict[str,str]",
                    "None",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "_update_sql_in_conn": {
            "name": "_update_sql_in_conn",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [
                    "str",
                    "List[int]",
                    "sqlalchemy.engine.Connection"
                ],
                "sql": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "schema": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "version": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "api_level": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "_execute_sql_stream": {
            "name": "_execute_sql_stream",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [
                    "int",
                    "Callable",
                    "str"
                ],
                "sql": [
                    "str",
                    "List[str]",
                    "List",
                    "None",
                    "Iterable[float]",
                    "Optional[str]"
                ]
            }
        },
        "_update_versions": {
            "name": "_update_versions",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [
                    "str",
                    "Dict[str, Any]"
                ],
                "schema": [
                    "int",
                    "str"
                ],
                "version": [
                    "int",
                    "str"
                ],
                "api_level": [
                    "int",
                    "str"
                ]
            }
        },
        "_EngineContext.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db_url": [
                    "str",
                    "Dict",
                    "Optional[Tuple[str]]",
                    "Tuple[str]",
                    "None"
                ]
            }
        },
        "_EngineContext.__enter__": {
            "name": "__enter__",
            "location": 51,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_EngineContext.__exit__": {
            "name": "__exit__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Optional[Type[BaseException]]"
                ],
                "__": [
                    "Optional[BaseException]"
                ],
                "___": [
                    "int",
                    "str",
                    "Iterable[_]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "dbupgrade-master/dbupgrade/files.py": {
        "collect_sql_files": {
            "name": "collect_sql_files",
            "location": 37,
            "return": [
                "list"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "Dict",
                    "int"
                ]
            }
        },
        "FileInfo.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "schema": [
                    "str",
                    "int",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "dialect": [
                    "str",
                    "int",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "version": [
                    "str",
                    "int",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "api_level": [
                    "str",
                    "int",
                    "None",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "FileInfo.__lt__": {
            "name": "__lt__",
            "location": 22,
            "return": [
                "bool",
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "FileInfo.__repr__": {
            "name": "__repr__",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dbupgrade-master/dbupgrade/filter.py": {
        "Filter.matches": {
            "name": "matches",
            "location": 14,
            "return": [
                "bool",
                "str",
                "int",
                "Dict[str,Dict[str,str]]",
                "defaultdict"
            ],
            "arguments": {
                "self": [],
                "file_info": [
                    "MutableMapping[str,Any]",
                    "Dict",
                    "MutableMapping",
                    "Optional[str]",
                    "str",
                    "MutableMapping[str,str]",
                    "None"
                ]
            }
        }
    },
    "dbupgrade-master/dbupgrade/main.py": {
        "main": {
            "name": "main",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_configure_logging": {
            "name": "_configure_logging",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "_print_json": {
            "name": "_print_json",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "result": [
                    "Dict[str,Any]",
                    "List[str]",
                    "int",
                    "str"
                ]
            }
        },
        "_json_script": {
            "name": "_json_script",
            "location": 62,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "script": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "dbupgrade-master/dbupgrade/result.py": {
        "UpgradeResult.success": {
            "name": "success",
            "location": 16,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dbupgrade-master/dbupgrade/sql.py": {
        "split_sql": {
            "name": "split_sql",
            "location": 12,
            "return": [
                "list"
            ],
            "arguments": {
                "sql": [
                    "Callable[[T],bool]",
                    "str",
                    "Callable[T,bool]",
                    "bool",
                    "List[Tuple]",
                    "List[tuple]"
                ]
            }
        },
        "_escape_delimiters": {
            "name": "_escape_delimiters",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "sql": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "_unescape_delimiters": {
            "name": "_unescape_delimiters",
            "location": 47,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "stmt": [
                    "str",
                    "Tuple[str,str]",
                    "float"
                ]
            }
        },
        "_process_statement": {
            "name": "_process_statement",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "stmt": [
                    "int",
                    "List[List[str]]",
                    "List[int]",
                    "Iterator[str]"
                ]
            }
        },
        "_remove_comment": {
            "name": "_remove_comment",
            "location": 57,
            "return": [
                "str",
                "float",
                "Tuple[str]",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "line": [
                    "str",
                    "Iterable[str]"
                ]
            }
        }
    },
    "dbupgrade-master/dbupgrade/sql_file.py": {
        "parse_sql_files": {
            "name": "parse_sql_files",
            "location": 13,
            "return": [
                "list"
            ],
            "arguments": {
                "files": [
                    "List[str]",
                    "Sequence[str]",
                    "IO[str]",
                    "IO[Any]"
                ]
            }
        },
        "_parse_sql_file": {
            "name": "_parse_sql_file",
            "location": 23,
            "return": [
                "dbupgrade.files.FileInfo"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bool"
                ]
            }
        },
        "parse_sql_stream": {
            "name": "parse_sql_stream",
            "location": 28,
            "return": [
                "dbupgrade.files.FileInfo"
            ],
            "arguments": {
                "stream": [
                    "str",
                    "bool",
                    "List[str]",
                    "Callable[str,bool]",
                    "Callable[[str],bool]",
                    "int"
                ],
                "filename": [
                    "str",
                    "List[str]",
                    "bool",
                    "Dict[str,str]",
                    "float"
                ]
            }
        },
        "_parse_sql_headers": {
            "name": "_parse_sql_headers",
            "location": 49,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "stream": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "Tuple"
                ]
            }
        },
        "_bool_header": {
            "name": "_bool_header",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "headers": [
                    "str",
                    "Dict[str,str]"
                ],
                "header_name": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "_int_header": {
            "name": "_int_header",
            "location": 70,
            "return": [
                "int"
            ],
            "arguments": {
                "headers": [
                    "str",
                    "Dict[str,str]"
                ],
                "header_name": [
                    "str"
                ]
            }
        }
    },
    "dbupgrade-master/dbupgrade/upgrade.py": {
        "db_upgrade": {
            "name": "db_upgrade",
            "location": 16,
            "return": [
                "dbupgrade.result.UpgradeResult"
            ],
            "arguments": {
                "schema": [
                    "str",
                    "int"
                ],
                "db_url": [
                    "str"
                ],
                "script_path": [
                    "str",
                    "int"
                ],
                "version_info": [
                    "str",
                    "int"
                ]
            }
        },
        "create_filter": {
            "name": "create_filter",
            "location": 41,
            "return": [
                "Tuple[(Any, Any, dbupgrade.filter.Filter)]"
            ],
            "arguments": {
                "schema": [
                    "bool",
                    "str",
                    "List"
                ],
                "db_url": [
                    "str"
                ],
                "version_info": [
                    "bool",
                    "Dict",
                    "Dict[str,Tuple[Any,Any,Any]]",
                    "Dict[str,tuple[Union[Any,Any,Any]]]"
                ]
            }
        },
        "read_files_to_apply": {
            "name": "read_files_to_apply",
            "location": 55,
            "return": [
                "bool",
                "List[str]"
            ],
            "arguments": {
                "script_path": [
                    "str",
                    "List[Union[Any,Any]]",
                    "List"
                ],
                "filter_": [
                    "str",
                    "dbupgrade.filter.Filter"
                ]
            }
        },
        "filter_files": {
            "name": "filter_files",
            "location": 60,
            "return": [
                "list"
            ],
            "arguments": {
                "files": [
                    "str",
                    "List",
                    "Tuple",
                    "Sequence[str]",
                    "Optional[Node]"
                ],
                "filter_": [
                    "str",
                    "Sequence[str]",
                    "list",
                    "Optional[\"Node\"]",
                    "tuple"
                ]
            }
        }
    },
    "dbupgrade-master/dbupgrade/url.py": {
        "dialect_from_url": {
            "name": "dialect_from_url",
            "location": 1,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        }
    },
    "dbupgrade-master/dbupgrade/version.py": {
        "version_info_from_args": {
            "name": "version_info_from_args",
            "location": 19,
            "return": [
                "VersionInfo"
            ],
            "arguments": {
                "args": []
            }
        },
        "create_version_matcher": {
            "name": "create_version_matcher",
            "location": 58,
            "return": [
                "VersionMatcher"
            ],
            "arguments": {
                "info": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Optional[bool]",
                    "Type",
                    "Optional[Type[Exception]]",
                    "float",
                    "Optional[float]"
                ],
                "min_version": [
                    "bool",
                    "str",
                    "Optional[Callable]",
                    "List[str]",
                    "Callable",
                    "None"
                ],
                "api_level": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Optional[bool]",
                    "Type",
                    "Optional[Type[Exception]]"
                ]
            }
        },
        "VersionMatcher.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "min_version": [
                    "int",
                    "float",
                    "Optional[float]"
                ],
                "max_version": [
                    "int",
                    "float"
                ],
                "target_api_level": [
                    "int",
                    "bytes",
                    "Dict[str,Any]",
                    "Tuple",
                    "Callable",
                    "bool"
                ]
            }
        },
        "VersionMatcher.__eq__": {
            "name": "__eq__",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]",
                    "T"
                ]
            }
        },
        "VersionMatcher.matches": {
            "name": "matches",
            "location": 51,
            "return": [
                "bool",
                "Tuple[int,int]"
            ],
            "arguments": {
                "self": [],
                "file_info": []
            }
        }
    },
    "dbupgrade-master/dbupgrade/__init__.py": {},
    "dbupgrade-master/dbupgrade/__main__.py": {},
    "dbupgrade-master/test_dbupgrade/apply.py": {
        "TestApplyFiles.apply": {
            "name": "apply",
            "location": 14,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestApplyFiles.test_apply_none": {
            "name": "test_apply_none",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "apply": []
            }
        },
        "TestApplyFiles.test_apply_multiple_success": {
            "name": "test_apply_multiple_success",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "apply": [
                    "pytest_mock.MockFixture"
                ]
            }
        },
        "TestApplyFiles.test_apply_multiple_fail": {
            "name": "test_apply_multiple_fail",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "apply": [
                    "unittesmock.Mock",
                    "float"
                ]
            }
        },
        "TestApplyFile.open": {
            "name": "open",
            "location": 49,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "TestApplyFile.logging": {
            "name": "logging",
            "location": 53,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "List[bytes]",
                    "Iterable[float]",
                    "int",
                    "float"
                ]
            }
        },
        "TestApplyFile.update_sql": {
            "name": "update_sql",
            "location": 57,
            "return": [
                "Callable",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "TestApplyFile.test_log": {
            "name": "test_log",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logging": [
                    "str",
                    "Dict"
                ]
            }
        },
        "TestApplyFile.test_execute__with_transaction": {
            "name": "test_execute__with_transaction",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "open": [
                    "str",
                    "Optional[str]"
                ],
                "update_sql": [
                    "pytest_mock.MockFixture",
                    "Callable"
                ]
            }
        },
        "TestApplyFile.test_execute__without_transaction": {
            "name": "test_execute__without_transaction",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "open": [
                    "str",
                    "Optional[str]"
                ],
                "update_sql": []
            }
        },
        "TestApplyFiles.test_apply_multiple_fail.apply_impl": {
            "name": "apply_impl",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "bool",
                    "BinaryIO",
                    "dict",
                    "Dict[str, Any]",
                    "Tuple[str]"
                ],
                "file_info": [
                    "str",
                    "bytes",
                    "Dict[str, str]",
                    "bool"
                ]
            }
        }
    },
    "dbupgrade-master/test_dbupgrade/args.py": {
        "TestParseArgs.test_help": {
            "name": "test_help",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseArgs.test_no_options": {
            "name": "test_no_options",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseArgs.test_simple_options": {
            "name": "test_simple_options",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseArgs.test_small_l_option": {
            "name": "test_small_l_option",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseArgs.test_small_l_option__no_argument": {
            "name": "test_small_l_option__no_argument",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseArgs.test_big_l_option": {
            "name": "test_big_l_option",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseArgs.test_big_and_small_l_option": {
            "name": "test_big_and_small_l_option",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseArgs.test_small_m_option": {
            "name": "test_small_m_option",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseArgs.test_small_m_option__without_version": {
            "name": "test_small_m_option__without_version",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseArgs.test_small_m_option__invalid_version": {
            "name": "test_small_m_option__invalid_version",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dbupgrade-master/test_dbupgrade/db.py": {
        "TestFetchCurrentDBVersions.create_engine": {
            "name": "create_engine",
            "location": 21,
            "return": [
                "bool",
                "int",
                "Iterable[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "unittesmock.Mock",
                    "Iterable[str]",
                    "str",
                    "int"
                ]
            }
        },
        "TestFetchCurrentDBVersions._assert_execute_any_call": {
            "name": "_assert_execute_any_call",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "create_engine": [
                    "int",
                    "bool"
                ],
                "expected_query": [
                    "str",
                    "int",
                    "bytearray",
                    "Union[bytes,bytearray]",
                    "bytes"
                ]
            }
        },
        "TestFetchCurrentDBVersions._assert_execute_has_calls": {
            "name": "_assert_execute_has_calls",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "create_engine": [
                    "int",
                    "bool"
                ],
                "expected_queries": [
                    "List",
                    "List[str]",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "TestFetchCurrentDBVersions.test_create_engine_called": {
            "name": "test_create_engine_called",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "create_engine": [
                    "unittesmock.Mock",
                    "int",
                    "bool"
                ]
            }
        },
        "TestFetchCurrentDBVersions.test_dispose_engine_on_error": {
            "name": "test_dispose_engine_on_error",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "create_engine": [
                    "int",
                    "Iterable[str]",
                    "Type",
                    "str",
                    "Type[Any]",
                    "unittesmock.Mock"
                ]
            }
        },
        "TestFetchCurrentDBVersions.test_table_does_not_exist": {
            "name": "test_table_does_not_exist",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "create_engine": [
                    "str",
                    "int",
                    "Dict[str,Any]"
                ]
            }
        },
        "TestFetchCurrentDBVersions.test_table_has_no_row_for_schema": {
            "name": "test_table_has_no_row_for_schema",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "create_engine": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock"
                ]
            }
        },
        "TestFetchCurrentDBVersions.test_table_has_row": {
            "name": "test_table_has_row",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "create_engine": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "TestFetchCurrentDBVersions.test_mysql_quote_char": {
            "name": "test_mysql_quote_char",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "create_engine": [
                    "str",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestUpdateSQL.create_engine": {
            "name": "create_engine",
            "location": 157,
            "return": [
                "bool",
                "int",
                "Iterable[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "unittesmock.Mock",
                    "Iterable[str]",
                    "str",
                    "int"
                ]
            }
        },
        "TestUpdateSQL.engine": {
            "name": "engine",
            "location": 164,
            "return": [
                "str",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "create_engine": [
                    "str",
                    "int",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        },
        "TestUpdateSQL.connection": {
            "name": "connection",
            "location": 168,
            "return": [
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "self": [],
                "engine": [
                    "Iterable[str]",
                    "int",
                    "List[str]",
                    "unittesmock.Mock"
                ]
            }
        },
        "TestUpdateSQL._set_paramstyle": {
            "name": "_set_paramstyle",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "create_engine": [
                    "Dict[str,Any]",
                    "int",
                    "bool",
                    "unittesmock.MagicMock"
                ],
                "paramstyle": [
                    "Dict[str,Any]",
                    "int",
                    "bool",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestUpdateSQL._assert_execute_has_calls": {
            "name": "_assert_execute_has_calls",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "execute_mock": [
                    "str",
                    "bytes",
                    "List[str]",
                    "Tuple[Union[str,M]]",
                    "pytest_mock.MockFixture",
                    "Tuple[str,mock.Mock]"
                ],
                "expected_queries": [
                    "str",
                    "bytes",
                    "List[str]",
                    "Tuple[Union[str,M]]",
                    "pytest_mock.MockFixture",
                    "Tuple[str,mock.Mock]"
                ]
            }
        },
        "TestUpdateSQL.test_create_engine_called": {
            "name": "test_create_engine_called",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "create_engine": [
                    "unittesmock.Mock",
                    "List[str]",
                    "Iterable[Tuple[int, int]]"
                ],
                "engine": [
                    "List[str]",
                    "unittesmock.Mock",
                    "Iterable[Tuple[int,int]]"
                ]
            }
        },
        "TestUpdateSQL.test_dispose_engine_on_error": {
            "name": "test_dispose_engine_on_error",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "engine": [
                    "unittesmock.MagicMock"
                ],
                "connection": [
                    "unittesmock.Mock"
                ]
            }
        },
        "TestUpdateSQL.test_execute_with_transaction": {
            "name": "test_execute_with_transaction",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "create_engine": [
                    "List[str]",
                    "unittesmock.Mock",
                    "Iterable[Tuple[int, int]]"
                ],
                "connection": [
                    "Union[int,float]",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "TestUpdateSQL.test_execute_without_transaction": {
            "name": "test_execute_without_transaction",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "create_engine": [
                    "List[str]",
                    "unittesmock.Mock",
                    "Iterable[Tuple[int, int]]"
                ]
            }
        },
        "TestUpdateSQL.test_escape_percent_signs__paramstyle_pyformat": {
            "name": "test_escape_percent_signs__paramstyle_pyformat",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "create_engine": [
                    "int",
                    "str",
                    "bytes"
                ],
                "connection": [
                    "str",
                    "Protocol",
                    "bytes",
                    "Coroutine",
                    "collections.abc.Coroutine"
                ]
            }
        },
        "TestUpdateSQL.test_escape_percent_signs__paramstyle_qmark": {
            "name": "test_escape_percent_signs__paramstyle_qmark",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "create_engine": [
                    "int",
                    "str",
                    "bytes"
                ],
                "connection": [
                    "str",
                    "Protocol",
                    "bytes",
                    "Coroutine",
                    "collections.abc.Coroutine"
                ]
            }
        },
        "TestFetchCurrentDBVersions.test_table_does_not_exist.execute": {
            "name": "execute",
            "location": 61,
            "return": [
                "Mock"
            ],
            "arguments": {
                "sql": []
            }
        },
        "TestFetchCurrentDBVersions.test_table_has_no_row_for_schema.execute": {
            "name": "execute",
            "location": 94,
            "return": [
                "Mock"
            ],
            "arguments": {
                "sql": []
            }
        },
        "TestFetchCurrentDBVersions.test_table_has_row.execute": {
            "name": "execute",
            "location": 126,
            "return": [
                "Mock"
            ],
            "arguments": {
                "sql": [
                    "str",
                    "float",
                    "Optional[str]",
                    "bool"
                ]
            }
        }
    },
    "dbupgrade-master/test_dbupgrade/files.py": {
        "TestFileInfo.test_lt": {
            "name": "test_lt",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileInfo.test_lt__non_matching_schemas": {
            "name": "test_lt__non_matching_schemas",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileInfo.test_lt__non_matching_dialects": {
            "name": "test_lt__non_matching_dialects",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileInfo.test_repr": {
            "name": "test_repr",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectSQLFiles.test_filter_sql_files": {
            "name": "test_filter_sql_files",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dbupgrade-master/test_dbupgrade/filter.py": {
        "TestFilter.test_init": {
            "name": "test_init",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFilter.test_matches__version_matches_lower": {
            "name": "test_matches__version_matches_lower",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFilter.test_matches__version_in_between": {
            "name": "test_matches__version_in_between",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFilter.test_matches__version_matches_upper": {
            "name": "test_matches__version_matches_upper",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFilter.test_matches__api_level_match": {
            "name": "test_matches__api_level_match",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFilter.test_matches__wrong_schema": {
            "name": "test_matches__wrong_schema",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFilter.test_matches__wrong_dialect": {
            "name": "test_matches__wrong_dialect",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFilter.test_matches__min_version_too_small": {
            "name": "test_matches__min_version_too_small",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFilter.test_matches__min_version_too_large": {
            "name": "test_matches__min_version_too_large",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFilter.test_matches__api_level_too_large": {
            "name": "test_matches__api_level_too_large",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dbupgrade-master/test_dbupgrade/main.py": {
        "TestMain.logging": {
            "name": "logging",
            "location": 18,
            "return": [
                "str",
                "list",
                "float",
                "Dict[str, Any]",
                "tuple",
                "Callable[..., None]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "float",
                    "List[str]"
                ]
            }
        },
        "TestMain.parse_args": {
            "name": "parse_args",
            "location": 25,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "unittesmock.Mock",
                    "List[str]",
                    "Iterable[str]",
                    "str",
                    "int"
                ]
            }
        },
        "TestMain.db_upgrade": {
            "name": "db_upgrade",
            "location": 30,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "mock.Mock",
                    "str"
                ]
            }
        },
        "TestMain.test_success": {
            "name": "test_success",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db_upgrade": [
                    "str"
                ]
            }
        },
        "TestMain.test_error": {
            "name": "test_error",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db_upgrade": [
                    "str"
                ]
            }
        },
        "TestMain.test_default_logging": {
            "name": "test_default_logging",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logging": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None"
                ],
                "parse_args": [
                    "str"
                ]
            }
        },
        "TestMain.test_quiet_logging": {
            "name": "test_quiet_logging",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logging": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "parse_args": [
                    "unittesmock.Mock"
                ]
            }
        },
        "TestMain.test_json_logging": {
            "name": "test_json_logging",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logging": [
                    "str",
                    "bool"
                ],
                "parse_args": []
            }
        },
        "TestMain.test_no_json_output": {
            "name": "test_no_json_output",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parse_args": [
                    "pytest_mock.MockFixture"
                ],
                "capsys": [
                    "Callable",
                    "_pytescapture.CaptureFixture",
                    "Tuple[Union[str,Any]]",
                    "Tuple[str,Any]"
                ]
            }
        },
        "TestMain.test_json_success": {
            "name": "test_json_success",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parse_args": [
                    "pytest_mock.MockFixture"
                ],
                "db_upgrade": [
                    "str"
                ],
                "capsys": [
                    "str",
                    "Callable",
                    "Dict",
                    "Optional[Game]",
                    "None"
                ]
            }
        },
        "TestMain.test_json_error": {
            "name": "test_json_error",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parse_args": [
                    "pytest_mock.MockFixture"
                ],
                "db_upgrade": [
                    "str"
                ],
                "capsys": [
                    "Callable",
                    "Dict"
                ]
            }
        }
    },
    "dbupgrade-master/test_dbupgrade/sql.py": {
        "TestSplitSQL._call_string": {
            "name": "_call_string",
            "location": 7,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ]
            }
        },
        "TestSplitSQL.test_empty_stream": {
            "name": "test_empty_stream",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSplitSQL.test_one_statement": {
            "name": "test_one_statement",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSplitSQL.test_multi_line_statement": {
            "name": "test_multi_line_statement",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSplitSQL.test_two_statements": {
            "name": "test_two_statements",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSplitSQL.test_two_statements__missing_semicolon": {
            "name": "test_two_statements__missing_semicolon",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSplitSQL.test_double_semicolon": {
            "name": "test_double_semicolon",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSplitSQL.test_full_line_comment": {
            "name": "test_full_line_comment",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSplitSQL.test_end_of_line_comment": {
            "name": "test_end_of_line_comment",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSplitSQL.test_semicolon_in_string": {
            "name": "test_semicolon_in_string",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSplitSQL.test_delimiter": {
            "name": "test_delimiter",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSplitSQL.test_delimiter_at_eol": {
            "name": "test_delimiter_at_eol",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSplitSQL.test_multi_char_delimiter": {
            "name": "test_multi_char_delimiter",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dbupgrade-master/test_dbupgrade/sql_file.py": {
        "TestParseSQLFiles._create_file_info": {
            "name": "_create_file_info",
            "location": 13,
            "return": [
                "dbupgrade.files.FileInfo"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseSQLFiles.test_no_files": {
            "name": "test_no_files",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseSQLFiles.test_parse": {
            "name": "test_parse",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseSQLFiles.test_skip_files_with_parse_errors": {
            "name": "test_skip_files_with_parse_errors",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseSQLStream.test_required_headers": {
            "name": "test_required_headers",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseSQLStream.test_transaction_yes": {
            "name": "test_transaction_yes",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseSQLStream.test_transaction_no": {
            "name": "test_transaction_no",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseSQLStream.test_schema_missing": {
            "name": "test_schema_missing",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseSQLStream.test_dialect_missing": {
            "name": "test_dialect_missing",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseSQLStream.test_version_missing": {
            "name": "test_version_missing",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseSQLStream.test_version_is_not_an_int": {
            "name": "test_version_is_not_an_int",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseSQLStream.test_api_level_missing": {
            "name": "test_api_level_missing",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseSQLStream.test_api_level_is_not_an_int": {
            "name": "test_api_level_is_not_an_int",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseSQLStream.test_transaction_invalid": {
            "name": "test_transaction_invalid",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseSQLStream.test_ignore_headers_after_break": {
            "name": "test_ignore_headers_after_break",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseSQLFiles.test_parse.my_parse_stream": {
            "name": "my_parse_stream",
            "location": 22,
            "return": [
                "bool",
                "str",
                "int",
                "IO[str]"
            ],
            "arguments": {
                "stream": [
                    "int"
                ],
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "dbupgrade-master/test_dbupgrade/upgrade.py": {
        "TestDBUpgrade.logging": {
            "name": "logging",
            "location": 16,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "List[bytes]",
                    "Iterable[float]",
                    "int",
                    "float"
                ]
            }
        },
        "TestDBUpgrade.fetch_current_db_versions": {
            "name": "fetch_current_db_versions",
            "location": 20,
            "return": [
                "bool",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "Sequence[Dict[str, str]]",
                    "int"
                ]
            }
        },
        "TestDBUpgrade.collect_sql_files": {
            "name": "collect_sql_files",
            "location": 27,
            "return": [
                "str",
                "bool",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str"
                ]
            }
        },
        "TestDBUpgrade.parse_sql_files": {
            "name": "parse_sql_files",
            "location": 34,
            "return": [
                "str",
                "bool",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str"
                ]
            }
        },
        "TestDBUpgrade.apply_files": {
            "name": "apply_files",
            "location": 41,
            "return": [
                "str",
                "Optional[Sequence[str]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "TestDBUpgrade.test_exercise": {
            "name": "test_exercise",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetch_current_db_versions": [
                    "Dict[str, str]",
                    "List[str]",
                    "int",
                    "Dict[str, Any]"
                ],
                "collect_sql_files": [
                    "str",
                    "Optional[str]"
                ],
                "parse_sql_files": [
                    "str",
                    "Optional[str]",
                    "bytes"
                ],
                "apply_files": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TestDBUpgrade.test_filter": {
            "name": "test_filter",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetch_current_db_versions": [
                    "bool",
                    "Sequence[str]",
                    "Dict"
                ],
                "parse_sql_files": [
                    "unittesmock.Mock"
                ],
                "apply_files": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TestDBUpgrade.test_order": {
            "name": "test_order",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parse_sql_files": [
                    "str",
                    "Dict[str,Sequence[str]]"
                ],
                "apply_files": [
                    "str"
                ]
            }
        },
        "TestDBUpgrade.test_log": {
            "name": "test_log",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logging": [
                    "str"
                ],
                "fetch_current_db_versions": [
                    "Callable[,str]",
                    "Optional[bool]",
                    "bool",
                    "None"
                ]
            }
        },
        "TestDBUpgrade.test_result_no_files": {
            "name": "test_result_no_files",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetch_current_db_versions": [
                    "bool",
                    "str"
                ],
                "apply_files": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "unittesmock.Mock"
                ]
            }
        },
        "TestDBUpgrade.test_result_success": {
            "name": "test_result_success",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetch_current_db_versions": [
                    "bool",
                    "str"
                ],
                "apply_files": [
                    "Callable",
                    "unittesmock.Mock"
                ]
            }
        },
        "TestDBUpgrade.test_result_error": {
            "name": "test_result_error",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetch_current_db_versions": [
                    "bool",
                    "str"
                ],
                "apply_files": [
                    "unittesmock.Mock"
                ]
            }
        }
    },
    "dbupgrade-master/test_dbupgrade/url.py": {
        "TestDialectFromURL.test_without_lib": {
            "name": "test_without_lib",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDialectFromURL.test_with_lib": {
            "name": "test_with_lib",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dbupgrade-master/test_dbupgrade/version.py": {
        "TestVersionMatcher.test_init__max_version_equals_min_version": {
            "name": "test_init__max_version_equals_min_version",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVersionMatcher.test_init__max_version_smaller_than_min_version": {
            "name": "test_init__max_version_smaller_than_min_version",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVersionMatcher.test_matches__version_matches_lower": {
            "name": "test_matches__version_matches_lower",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVersionMatcher.test_matches__version_in_between": {
            "name": "test_matches__version_in_between",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVersionMatcher.test_matches__version_matches_upper": {
            "name": "test_matches__version_matches_upper",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVersionMatcher.test_matches__api_level_match": {
            "name": "test_matches__api_level_match",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVersionMatcher.test_matches__min_version_too_small": {
            "name": "test_matches__min_version_too_small",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVersionMatcher.test_matches__min_version_too_large": {
            "name": "test_matches__min_version_too_large",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVersionMatcher.test_matches__api_level_too_large": {
            "name": "test_matches__api_level_too_large",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateVersionMatcher.test_min_version": {
            "name": "test_min_version",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateVersionMatcher.test_max_version_default": {
            "name": "test_max_version_default",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateVersionMatcher.test_max_version": {
            "name": "test_max_version",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateVersionMatcher.test_target_api_level_none": {
            "name": "test_target_api_level_none",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateVersionMatcher.test_target_api_level": {
            "name": "test_target_api_level",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dbupgrade-master/test_dbupgrade/__init__.py": {}
}
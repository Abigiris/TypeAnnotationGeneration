{
    "deepstep-master/generate.py": {
        "main": {
            "name": "main",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "deepstep-master/hyperflow.py": {
        "NeuralLayer.dense": {
            "name": "dense",
            "location": 34,
            "return": [
                "NeuralLayer"
            ],
            "arguments": {
                "neurons": [
                    "int"
                ]
            }
        },
        "NeuralLayer.lstm": {
            "name": "lstm",
            "location": 38,
            "return": [
                "NeuralLayer"
            ],
            "arguments": {
                "neurons": [
                    "int"
                ]
            }
        },
        "NeuralLayer.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layer_type": [
                    "NeuralLayerType"
                ],
                "neurons": [
                    "int"
                ]
            }
        },
        "NeuralLayer.layer_type": {
            "name": "layer_type",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NeuralLayer.neurons": {
            "name": "neurons",
            "location": 50,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NeuralLayer.__eq__": {
            "name": "__eq__",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "NeuralLayer.__hash__": {
            "name": "__hash__",
            "location": 58,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hyperparameters.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layers": [
                    "List[NeuralLayer]"
                ],
                "epochs": [
                    "int"
                ],
                "look_back": [
                    "int"
                ]
            }
        },
        "Hyperparameters.layers": {
            "name": "layers",
            "location": 69,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hyperparameters.epochs": {
            "name": "epochs",
            "location": 73,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hyperparameters.look_back": {
            "name": "look_back",
            "location": 77,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hyperparameters.__repr__": {
            "name": "__repr__",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hyperparameters.__eq__": {
            "name": "__eq__",
            "location": 83,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Hyperparameters.__hash__": {
            "name": "__hash__",
            "location": 88,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HyperparameterSpace.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lstm_layer_mins": [
                    "List[int]"
                ],
                "lstm_layer_maxs": [
                    "List[int]"
                ],
                "dense_layer_mins": [
                    "List[int]"
                ],
                "dense_layer_maxs": [
                    "List[int]"
                ],
                "min_epochs": [
                    "int"
                ],
                "max_epochs": [
                    "int"
                ],
                "min_look_back": [
                    "int"
                ],
                "max_look_back": [
                    "int"
                ]
            }
        },
        "HyperparameterSpace.sample": {
            "name": "sample",
            "location": 113,
            "return": [
                "Hyperparameters"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomWalk.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "space": [
                    "HyperparameterSpace"
                ]
            }
        },
        "RandomWalk.minimize": {
            "name": "minimize",
            "location": 128,
            "return": [
                "List[Tuple[(float, Optional[Hyperparameters])]]"
            ],
            "arguments": {
                "self": [],
                "objective": [
                    "Callable[([Hyperparameters], float)]"
                ],
                "budget_secs": [
                    "int"
                ],
                "results": [
                    "int"
                ]
            }
        }
    },
    "deepstep-master/index_training_data.py": {
        "main": {
            "name": "main",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "deepstep-master/optimize_hyperparameters.py": {
        "model_loss": {
            "name": "model_loss",
            "location": 32,
            "return": [
                "float"
            ],
            "arguments": {
                "training_tracks": [
                    "List[deepstep.midi.Track]"
                ],
                "validation_tracks": [
                    "List[deepstep.midi.Track]"
                ],
                "hyperparameters": [
                    "hyperflow.Hyperparameters"
                ],
                "notes": [
                    "Set[int]"
                ],
                "volume": [
                    "int"
                ]
            }
        },
        "create_objective": {
            "name": "create_objective",
            "location": 41,
            "return": [
                "Callable[([hyperflow.Hyperparameters], float)]"
            ],
            "arguments": {
                "training_tracks": [
                    "List[deepstep.midi.Track]"
                ],
                "validation_tracks": [
                    "List[deepstep.midi.Track]"
                ],
                "notes": [
                    "Set[int]"
                ],
                "volume": [
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "deepstep-master/deepstep/midi.py": {
        "midi_to_track": {
            "name": "midi_to_track",
            "location": 128,
            "return": [
                "Track"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "bpm_of_midi": {
            "name": "bpm_of_midi",
            "location": 197,
            "return": [
                "int"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "write_track_as_midi": {
            "name": "write_track_as_midi",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "track": [
                    "Track"
                ],
                "bpm": [
                    "int"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "midi_to_metadata": {
            "name": "midi_to_metadata",
            "location": 234,
            "return": [
                "List[TrackMetadata]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "Sound.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "volume": [
                    "int"
                ],
                "note": [
                    "int"
                ],
                "duration": [
                    "int"
                ]
            }
        },
        "Sound.volume": {
            "name": "volume",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sound.note": {
            "name": "note",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sound.duration": {
            "name": "duration",
            "location": 52,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sound.__repr__": {
            "name": "__repr__",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sound.__eq__": {
            "name": "__eq__",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "AbstractSet[T]",
                    "str",
                    "typing.AbstractSet",
                    "Optional[Union[Any, str]]",
                    "typing.Any",
                    "Optional[AbstractSet[str]]",
                    "None"
                ]
            }
        },
        "Sound.__hash__": {
            "name": "__hash__",
            "location": 64,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Track.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sounds": [
                    "Sequence[Tuple[(int, Sound)]]"
                ],
                "ticks_per_beat": [
                    "int"
                ],
                "duration": [
                    "int"
                ]
            }
        },
        "Track.__getitem__": {
            "name": "__getitem__",
            "location": 79,
            "return": [
                "Sequence[Tuple[(int, Sound)]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(int, slice)]"
                ]
            }
        },
        "Track.ticks_per_beat": {
            "name": "ticks_per_beat",
            "location": 103,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Track.duration": {
            "name": "duration",
            "location": 107,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Track.__iter__": {
            "name": "__iter__",
            "location": 110,
            "return": [
                "Iterator[Tuple[(int, Sound)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrackMetadata.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instrument": [
                    "str"
                ],
                "notes": [
                    "int"
                ]
            }
        },
        "TrackMetadata.instrument": {
            "name": "instrument",
            "location": 120,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrackMetadata.notes": {
            "name": "notes",
            "location": 124,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "deepstep-master/deepstep/model.py": {
        "next_power_of_2": {
            "name": "next_power_of_2",
            "location": 52,
            "return": [
                "int"
            ],
            "arguments": {
                "value": [
                    "int"
                ]
            }
        },
        "Model.train": {
            "name": "train",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tracks": [
                    "List[deepstep.midi.Track]"
                ],
                "epochs": [
                    "int"
                ]
            }
        },
        "Model.evaluate": {
            "name": "evaluate",
            "location": 44,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "tracks": [
                    "List[deepstep.midi.Track]"
                ]
            }
        },
        "Model.generate": {
            "name": "generate",
            "location": 48,
            "return": [
                "deepstep.midi.Track"
            ],
            "arguments": {
                "self": [],
                "seed_track": [
                    "deepstep.midi.Track"
                ],
                "measures": [
                    "int"
                ]
            }
        },
        "GAN.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "notes": [
                    "Set[int]"
                ],
                "sound_volume": [
                    "int"
                ]
            }
        },
        "GAN.train": {
            "name": "train",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tracks": [
                    "List[deepstep.midi.Track]"
                ],
                "epochs": [
                    "int"
                ]
            }
        },
        "GAN.evaluate": {
            "name": "evaluate",
            "location": 84,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "tracks": [
                    "List[deepstep.midi.Track]"
                ]
            }
        },
        "GAN.__scores_to_matrices": {
            "name": "__scores_to_matrices",
            "location": 87,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "tracks": [
                    "str",
                    "int",
                    "list[int]",
                    "list[list[str]]",
                    "float",
                    "List[int]",
                    "List[List[str]]"
                ]
            }
        },
        "GAN.generate": {
            "name": "generate",
            "location": 114,
            "return": [
                "deepstep.midi.Track"
            ],
            "arguments": {
                "self": [],
                "seed_track": [
                    "deepstep.midi.Track"
                ],
                "measures": [
                    "int"
                ]
            }
        },
        "DNN.__init__": {
            "name": "__init__",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hyperparameters": [
                    "hyperflow.Hyperparameters"
                ],
                "notes": [
                    "Set[int]"
                ],
                "look_back": [
                    "int"
                ],
                "sound_volume": [
                    "int"
                ]
            }
        },
        "DNN.train": {
            "name": "train",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tracks": [
                    "List[deepstep.midi.Track]"
                ],
                "epochs": [
                    "int"
                ]
            }
        },
        "DNN.evaluate": {
            "name": "evaluate",
            "location": 206,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "tracks": [
                    "List[deepstep.midi.Track]"
                ]
            }
        },
        "DNN.__scores_to_matrices": {
            "name": "__scores_to_matrices",
            "location": 210,
            "return": [
                "tuple[]",
                "str",
                "bool",
                "List[Dict]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "tracks": [
                    "str",
                    "int",
                    "list[int]",
                    "list[list[str]]",
                    "float",
                    "List[int]",
                    "List[List[str]]"
                ]
            }
        },
        "DNN.generate": {
            "name": "generate",
            "location": 235,
            "return": [
                "deepstep.midi.Track"
            ],
            "arguments": {
                "self": [],
                "seed_track": [
                    "deepstep.midi.Track"
                ],
                "measures": [
                    "int"
                ]
            }
        },
        "NormalizedTime.__init__": {
            "name": "__init__",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delegate": [
                    "Model"
                ]
            }
        },
        "NormalizedTime.train": {
            "name": "train",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tracks": [
                    "List[deepstep.midi.Track]"
                ],
                "epochs": [
                    "int"
                ]
            }
        },
        "NormalizedTime.evaluate": {
            "name": "evaluate",
            "location": 279,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "tracks": [
                    "List[deepstep.midi.Track]"
                ]
            }
        },
        "NormalizedTime.generate": {
            "name": "generate",
            "location": 282,
            "return": [
                "deepstep.midi.Track"
            ],
            "arguments": {
                "self": [],
                "seed_track": [
                    "deepstep.midi.Track"
                ],
                "measures": [
                    "int"
                ]
            }
        },
        "NormalizedTime.__normalize": {
            "name": "__normalize",
            "location": 287,
            "return": [
                "Track",
                "str",
                "bool"
            ],
            "arguments": {
                "track": [
                    "bool"
                ]
            }
        },
        "NormalizedTime.__unnormalize": {
            "name": "__unnormalize",
            "location": 299,
            "return": [
                "Track",
                "str",
                "bool"
            ],
            "arguments": {
                "track": [
                    "bool",
                    "AbstractSet[str]"
                ]
            }
        }
    },
    "deepstep-master/deepstep/__init__.py": {},
    "deepstep-master/libs/dcgan.py": {
        "inverse_transform": {
            "name": "inverse_transform",
            "location": 35,
            "return": [
                "float",
                "str",
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "images": [
                    "int",
                    "tuple[typing.Union[int,int,int]]",
                    "numpy.ndarray",
                    "str",
                    "numpy.array",
                    "Tuple[int, int, int]"
                ]
            }
        },
        "merge": {
            "name": "merge",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "images": [
                    "tuple[typing.Union[int,int]]",
                    "numpy.ndarray",
                    "Tuple[int, int]",
                    "float"
                ],
                "size": [
                    "int",
                    "float",
                    "numpy.random.RandomState"
                ]
            }
        },
        "imsave": {
            "name": "imsave",
            "location": 50,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "images": [
                    "str",
                    "int",
                    "bool"
                ],
                "size": [
                    "str",
                    "int",
                    "bool"
                ],
                "path": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "save_images": {
            "name": "save_images",
            "location": 54,
            "return": [
                "str",
                "List[str]",
                "Callable"
            ],
            "arguments": {
                "images": [
                    "str",
                    "bool"
                ],
                "size": [
                    "str",
                    "bool"
                ],
                "image_path": [
                    "str",
                    "bool"
                ]
            }
        },
        "conv_cond_concat": {
            "name": "conv_cond_concat",
            "location": 85,
            "return": [
                "bool",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "x": [
                    "bool"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "conv2d": {
            "name": "conv2d",
            "location": 93,
            "return": [
                "str",
                "float",
                "bool",
                "int"
            ],
            "arguments": {
                "input_": [
                    "int",
                    "str",
                    "bool",
                    "Tuple[int, int]"
                ],
                "output_dim": [
                    "int",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "bool",
                    "Tuple[int, int]"
                ],
                "k_h": [
                    "int",
                    "str",
                    "bool",
                    "Tuple[int, int]"
                ],
                "k_w": [
                    "int",
                    "str",
                    "bool",
                    "Tuple[int, int]"
                ],
                "d_h": [
                    "int",
                    "float",
                    "numpy.array"
                ],
                "d_w": [
                    "int",
                    "float",
                    "numpy.array"
                ],
                "stddev": [
                    "float",
                    "int",
                    "str",
                    "bool",
                    "Tuple[int, int]"
                ],
                "name": [
                    "typing.Text",
                    "str",
                    "bool",
                    "AsyncContextManager[None]",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "deconv2d": {
            "name": "deconv2d",
            "location": 107,
            "return": [
                "tuple[]",
                "float",
                "bool",
                "int"
            ],
            "arguments": {
                "input_": [
                    "str",
                    "Dict[int, dict]",
                    "int"
                ],
                "output_shape": [
                    "str",
                    "Dict[int, dict]",
                    "int"
                ],
                "k_h": [
                    "int",
                    "str",
                    "Dict[int, dict]"
                ],
                "k_w": [
                    "int",
                    "str",
                    "Dict[int, dict]"
                ],
                "d_h": [
                    "int",
                    "float",
                    "bool"
                ],
                "d_w": [
                    "int",
                    "float",
                    "bool"
                ],
                "stddev": [
                    "float",
                    "str",
                    "Dict[int, dict]",
                    "int"
                ],
                "name": [
                    "typing.Text",
                    "str",
                    "bool",
                    "AsyncContextManager[None]",
                    "Optional[int]",
                    "int"
                ],
                "with_w": [
                    "bool",
                    "int",
                    "str",
                    "Optional[bool]",
                    "Optional[int]"
                ]
            }
        },
        "lrelu": {
            "name": "lrelu",
            "location": 127,
            "return": [
                "str",
                "Optional[int]",
                "Optional[List[int]]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "numpy.ndarray",
                    "bytes"
                ],
                "leak": [
                    "float",
                    "int",
                    "numpy.ndarray",
                    "bytes"
                ]
            }
        },
        "linear": {
            "name": "linear",
            "location": 131,
            "return": [
                "tuple[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input_": [
                    "list[dict[, ]]",
                    "List[dict]",
                    "list[]",
                    "List[Dict]",
                    "list[dict[str, typing.Any]]",
                    "dict[str, typing.Any]",
                    "list",
                    "List[Dict[str, Any]]",
                    "numpy.ndarray",
                    "Dict[str, Any]"
                ],
                "output_size": [
                    "int",
                    "List[numpy.array]",
                    "list[numpy.array]",
                    "List[str]",
                    "list[str]"
                ],
                "scope": [
                    "int",
                    "float",
                    "None"
                ],
                "stddev": [
                    "float",
                    "int",
                    "List[Tuple[int, int]]",
                    "numpy.ndarray",
                    "Union[int, numpy.ndarray]"
                ],
                "bias_start": [
                    "float",
                    "int",
                    "Tuple[int, int]"
                ],
                "with_w": [
                    "bool",
                    "Dict[str, str]",
                    "int",
                    "str"
                ]
            }
        },
        "conv_out_size_same": {
            "name": "conv_out_size_same",
            "location": 150,
            "return": [
                "int"
            ],
            "arguments": {
                "size": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "numpy.ndarray",
                    "Tuple[int, int]",
                    "numpy.random.RandomState"
                ],
                "stride": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "numpy.ndarray",
                    "Tuple[int, int]",
                    "numpy.random.RandomState"
                ]
            }
        },
        "concat": {
            "name": "concat",
            "location": 64,
            "return": [
                "float",
                "List[int]",
                "int"
            ],
            "arguments": {
                "tensors": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "str",
                    "list",
                    "list[]",
                    "Callable",
                    "typing.Callable[, ]",
                    "Dict[str, Callable[[], None]]",
                    "dict[str, typing.Callable[[], None]]"
                ],
                "axis": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "str",
                    "list",
                    "list[]",
                    "Callable",
                    "typing.Callable[, ]",
                    "Dict[str, Callable[[], None]]",
                    "dict[str, typing.Callable[[], None]]"
                ]
            }
        },
        "batch_norm.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "epsilon": [
                    "float",
                    "int",
                    "str",
                    "bool"
                ],
                "momentum": [
                    "float",
                    "int",
                    "str",
                    "bool"
                ],
                "name": [
                    "typing.Text",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "batch_norm.__call__": {
            "name": "__call__",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "Hashable",
                    "typing.Hashable"
                ],
                "train": [
                    "bool",
                    "float",
                    "Hashable"
                ]
            }
        },
        "DCGAN.__init__": {
            "name": "__init__",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sess": [
                    "bool",
                    "str",
                    "Optional[dict]",
                    "dict[, ]",
                    "None"
                ],
                "input_height": [
                    "int",
                    "bool",
                    "str",
                    "Optional[dict]"
                ],
                "input_width": [
                    "int",
                    "float",
                    "Optional[int]",
                    "Union[int, str]"
                ],
                "crop": [
                    "bool",
                    "str",
                    "Optional[dict]"
                ],
                "batch_size": [
                    "int",
                    "bool",
                    "Tuple[int, int, int]",
                    "Callable[[int], bool]",
                    "List[List[int]]"
                ],
                "sample_num": [
                    "int",
                    "bool",
                    "str",
                    "Optional[dict]"
                ],
                "output_height": [
                    "int",
                    "List[str]",
                    "bool",
                    "Optional[Mapping[str, Any]]"
                ],
                "output_width": [
                    "int",
                    "numpy.ndarray"
                ],
                "z_dim": [
                    "int",
                    "bool",
                    "str",
                    "Optional[dict]"
                ],
                "gf_dim": [
                    "int",
                    "bool",
                    "str",
                    "Optional[dict]"
                ],
                "df_dim": [
                    "int",
                    "bool",
                    "str",
                    "Optional[dict]"
                ],
                "gfc_dim": [
                    "int",
                    "bool",
                    "str",
                    "Optional[dict]"
                ],
                "dfc_dim": [
                    "int",
                    "bool",
                    "str",
                    "Optional[dict]"
                ],
                "c_dim": [
                    "int",
                    "Callable[[float], None]",
                    "Tuple[int, int]",
                    "bool"
                ],
                "input_fname_pattern": [
                    "typing.Text",
                    "bool",
                    "str",
                    "Optional[dict]"
                ],
                "checkpoint_dir": [
                    "str",
                    "None",
                    "bool",
                    "Callable[[float], None]",
                    "typing.Callable[float, None]"
                ],
                "sample_dir": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "Callable",
                    "Optional[bool]"
                ],
                "data_dir": [
                    "typing.Text",
                    "str",
                    "Callable[[float], None]",
                    "bool"
                ]
            }
        },
        "DCGAN.build_model": {
            "name": "build_model",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DCGAN.train": {
            "name": "train",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "learning_rate": [
                    "Optional[numpy.ndarray]",
                    "float",
                    "None",
                    "str",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ],
                "beta1": [
                    "Optional[numpy.ndarray]",
                    "float",
                    "None",
                    "str",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ],
                "epochs": [
                    "int",
                    "float",
                    "Sequence",
                    "typing.Sequence[]"
                ],
                "data": [
                    "bool"
                ]
            }
        },
        "DCGAN.generate": {
            "name": "generate",
            "location": 338,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "seed": [
                    "typing.Type",
                    "int",
                    "Type[numpy.number]",
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "DCGAN.discriminator": {
            "name": "discriminator",
            "location": 347,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "int",
                    "numpy.ndarray"
                ],
                "reuse": [
                    "bool",
                    "numpy.ndarray",
                    "str",
                    "numpy.array",
                    "int",
                    "Tuple[int, int, int]"
                ]
            }
        },
        "DCGAN.generator": {
            "name": "generator",
            "location": 360,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "z": [
                    "str"
                ]
            }
        },
        "DCGAN.sampler": {
            "name": "sampler",
            "location": 393,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "z": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "DCGAN.build_model.sigmoid_cross_entropy_with_logits": {
            "name": "sigmoid_cross_entropy_with_logits",
            "location": 236,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        }
    },
    "deepstep-master/libs/__init__.py": {},
    "deepstep-master/tests/test_midi.py": {
        "TestMidi.setUp": {
            "name": "setUp",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMidi.tearDown": {
            "name": "tearDown",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMidi.test_bpm_parsing": {
            "name": "test_bpm_parsing",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMidi.test_metadata_parsing": {
            "name": "test_metadata_parsing",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMidi.test_read_write": {
            "name": "test_read_write",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTrack.test_indexing": {
            "name": "test_indexing",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTrack.test_slicing": {
            "name": "test_slicing",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTrack.test_duration": {
            "name": "test_duration",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "deepstep-master/tests/test_model.py": {
        "TestModel.test_dnn": {
            "name": "test_dnn",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModel.test_gan": {
            "name": "test_gan",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "deepstep-master/tests/test_resources/__init__.py": {}
}
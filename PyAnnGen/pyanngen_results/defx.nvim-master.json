{
    "defx.nvim-master/rplugin/python3/defx/action.py": {
        "do_action": {
            "name": "do_action",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "view": [
                    "dict",
                    "Optional[Set[str]]",
                    "Optional[str]",
                    "List[Tuple[str, str]]"
                ],
                "defx": [
                    "str",
                    "Optional[int]",
                    "int",
                    "Optional[list]",
                    "None",
                    "Optional[List[str]]",
                    "List",
                    "List[str]"
                ],
                "action_name": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "context": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "defx.nvim-master/rplugin/python3/defx/clipboard.py": {
        "default_paster": {
            "name": "default_paster",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "src": [
                    "Iterator[bytes]",
                    "List[int]",
                    "Iterator",
                    "str"
                ],
                "dest": [
                    "Iterator[bytes]",
                    "List[int]",
                    "Iterator",
                    "str"
                ]
            }
        },
        "Clipboard.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "Optional[str]",
                    "bool",
                    "int",
                    "str"
                ],
                "candidates": [
                    "List",
                    "Optional[str]",
                    "bool",
                    "int",
                    "str"
                ],
                "source_name": [
                    "Text",
                    "str",
                    "List[str]",
                    "Dict"
                ],
                "mode": [
                    "Text",
                    "Optional[str]",
                    "bool",
                    "int",
                    "str"
                ],
                "paster": [
                    "Optional[str]",
                    "bool",
                    "int",
                    "str"
                ]
            }
        }
    },
    "defx.nvim-master/rplugin/python3/defx/context.py": {},
    "defx.nvim-master/rplugin/python3/defx/defx.py": {
        "Defx.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "int",
                    "List[float]"
                ],
                "context": [
                    "int",
                    "str",
                    "pathlib.Path",
                    "bool",
                    "defx.contexContext"
                ],
                "source": [
                    "str",
                    "bool",
                    "Dict",
                    "None",
                    "int",
                    "Optional[int]"
                ],
                "cwd": [
                    "int",
                    "List[float]"
                ],
                "index": [
                    "int",
                    "List[float]"
                ]
            }
        },
        "Defx._init_source": {
            "name": "_init_source",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Defx.debug": {
            "name": "debug",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "str",
                    "int"
                ]
            }
        },
        "Defx.cd": {
            "name": "cd",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "pathlib.Path",
                    "pathlib.PurePosixPath"
                ]
            }
        },
        "Defx.get_root_candidate": {
            "name": "get_root_candidate",
            "location": 60,
            "return": [
                "Dict",
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Defx.tree_candidates": {
            "name": "tree_candidates",
            "location": 78,
            "return": [
                "List",
                "bytes",
                "Dict[str,Any]",
                "Dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "List"
                ],
                "base_level": [
                    "List[str]",
                    "bool",
                    "str",
                    "Optional[pathlib.PurePosixPath]",
                    "fs.base.FS"
                ],
                "max_level": [
                    "str",
                    "bool",
                    "None",
                    "Union[pathlib.Path,str]",
                    "Optional[str]",
                    "pathlib.Path"
                ]
            }
        },
        "Defx.gather_candidates_recursive": {
            "name": "gather_candidates_recursive",
            "location": 106,
            "return": [
                "List",
                "str",
                "bool",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "pathlib.Path"
                ],
                "base_level": [
                    "Optional[pathlib.Path]",
                    "str",
                    "pathlib.Path",
                    "Optional[Dict]"
                ],
                "max_level": [
                    "str",
                    "IO",
                    "Optional[str]",
                    "Union[str,pathlib.Path]",
                    "pathlib.Path"
                ]
            }
        },
        "Defx._gather_candidates": {
            "name": "_gather_candidates",
            "location": 126,
            "return": [
                "List",
                "str",
                "util.photolib.contentfiles.Contentfile"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "None"
                ],
                "base_level": [
                    "int",
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        }
    },
    "defx.nvim-master/rplugin/python3/defx/preview_image.py": {},
    "defx.nvim-master/rplugin/python3/defx/rplugin.py": {
        "_candidate": {
            "name": "_candidate",
            "location": 16,
            "return": [
                "Dict[Text,Union[bytes,str]]",
                "Iterable[str]",
                "IO[str]",
                "str"
            ],
            "arguments": {
                "candidate": [
                    "bytes",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "Rplugin.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Rplugin.init_channel": {
            "name": "init_channel",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rplugin.start": {
            "name": "start",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "Rplugin._current_views": {
            "name": "_current_views",
            "location": 41,
            "return": [
                "List",
                "Set[str]",
                "List[str]",
                "Dict[int,int]",
                "str",
                "Optional[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rplugin.do_action": {
            "name": "do_action",
            "location": 45,
            "return": [
                "None",
                "int",
                "Union[tuple,list]",
                "List[int]",
                "Union[int,slice]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "Rplugin.get_candidate": {
            "name": "get_candidate",
            "location": 60,
            "return": [
                "Dict",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rplugin.get_candidates": {
            "name": "get_candidates",
            "location": 66,
            "return": [
                "List",
                "Set[str]",
                "Dict[str,str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rplugin.get_selected_candidates": {
            "name": "get_selected_candidates",
            "location": 71,
            "return": [
                "List",
                "List[str]",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rplugin.get_context": {
            "name": "get_context",
            "location": 78,
            "return": [
                "Dict",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rplugin.get_view": {
            "name": "get_view",
            "location": 83,
            "return": [
                "View",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "Dict"
                ]
            }
        },
        "Rplugin.redraw": {
            "name": "redraw",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "views": [
                    "bytes",
                    "List",
                    "Dict"
                ]
            }
        }
    },
    "defx.nvim-master/rplugin/python3/defx/session.py": {},
    "defx.nvim-master/rplugin/python3/defx/sort.py": {
        "sort": {
            "name": "sort",
            "location": 28,
            "return": [
                "List[str]",
                "str",
                "Callable"
            ],
            "arguments": {
                "method": [
                    "int",
                    "str",
                    "Dict"
                ],
                "candidates": [
                    "Dict[str,Any]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "_make_key_func": {
            "name": "_make_key_func",
            "location": 39,
            "return": [
                "Callable",
                "List[int]",
                "List[List[int]]",
                "str",
                "Optional[dict]",
                "List[GridQubit]"
            ],
            "arguments": {
                "methods": [
                    "str"
                ]
            }
        },
        "_make_reversed_key": {
            "name": "_make_reversed_key",
            "location": 56,
            "return": [
                "Callable",
                "bytes",
                "str"
            ],
            "arguments": {
                "key_method": [
                    "bytes",
                    "Optional[bytes]",
                    "str",
                    "None",
                    "int",
                    "Union[str,bytes]"
                ]
            }
        },
        "_extension": {
            "name": "_extension",
            "location": 62,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "candidate": [
                    "str",
                    "int",
                    "Type[SerializationDialect]",
                    "float"
                ]
            }
        },
        "_filename": {
            "name": "_filename",
            "location": 68,
            "return": [
                "str",
                "List[str]",
                "bool",
                "T"
            ],
            "arguments": {
                "candidate": [
                    "str",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "_size": {
            "name": "_size",
            "location": 80,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "candidate": [
                    "int",
                    "float"
                ]
            }
        },
        "_time": {
            "name": "_time",
            "location": 87,
            "return": [
                "int",
                "str",
                "Dict[str,Any]",
                "List[str]"
            ],
            "arguments": {
                "candidate": [
                    "bytes",
                    "int",
                    "bool"
                ]
            }
        },
        "_Reversed.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "_Reversed.__lt__": {
            "name": "__lt__",
            "location": 19,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str,Date]",
                    "str",
                    "Type",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ]
            }
        },
        "_Reversed.__eq__": {
            "name": "__eq__",
            "location": 22,
            "return": [
                "bool",
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int,BitVec]",
                    "int"
                ]
            }
        },
        "_filename.numeric_key": {
            "name": "numeric_key",
            "location": 72,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "v": [
                    "str",
                    "int",
                    "ImportError"
                ]
            }
        }
    },
    "defx.nvim-master/rplugin/python3/defx/util.py": {
        "cd": {
            "name": "cd",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "vim": [
                    "str",
                    "pynvim.Nvim",
                    "pathlib.Path",
                    "Union[str, pathlib.Path]"
                ],
                "path": [
                    "str",
                    "pynvim.Nvim",
                    "pathlib.Path",
                    "Union[str,pathlib.Path]"
                ]
            }
        },
        "cwd_input": {
            "name": "cwd_input",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "vim": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "cwd": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "prompt": [
                    "str",
                    "int"
                ],
                "text": [
                    "Text",
                    "str",
                    "int"
                ],
                "completion": [
                    "Text",
                    "str",
                    "int"
                ]
            }
        },
        "error": {
            "name": "error",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "vim": [
                    "pynvim.Nvim",
                    "str",
                    "int",
                    "bool"
                ],
                "expr": [
                    "str",
                    "Tuple[int]",
                    "Dict",
                    "Pattern",
                    "int"
                ]
            }
        },
        "confirm": {
            "name": "confirm",
            "location": 49,
            "return": [
                "bool",
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "vim": [
                    "str",
                    "pynvim.Nvim",
                    "int",
                    "Tuple[int]"
                ],
                "question": [
                    "str",
                    "int",
                    "Tuple[int]",
                    "pynvim.Nvim"
                ]
            }
        },
        "import_plugin": {
            "name": "import_plugin",
            "location": 58,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "None",
                "Optional[float]",
                "str",
                "Dict",
                "Set",
                "Generator[Union[int,None,None]]",
                "Dict[str,Type]"
            ],
            "arguments": {
                "path": [
                    "bool",
                    "pathlib.Path"
                ],
                "source": [
                    "str",
                    "int",
                    "pathlib.Path",
                    "cerulean.path.Path",
                    "Union[str,pathlib.Path]"
                ],
                "classname": [
                    "str",
                    "List[Union[str,Any]]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "readable": {
            "name": "readable",
            "location": 75,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "str",
                    "List[pathlib.Path]",
                    "List[int]"
                ]
            }
        },
        "safe_call": {
            "name": "safe_call",
            "location": 88,
            "return": [
                "str",
                "None",
                "Callable",
                "bool",
                "Exception"
            ],
            "arguments": {
                "fn": [
                    "Callable",
                    "bool",
                    "Optional[bool]",
                    "Exception",
                    "None"
                ],
                "fallback": [
                    "Callable",
                    "None",
                    "bool",
                    "Optional[bool]",
                    "Exception"
                ]
            }
        },
        "get_python_exe": {
            "name": "get_python_exe",
            "location": 99,
            "return": [
                "str",
                "List[str]",
                "int",
                "List[float]"
            ],
            "arguments": {}
        },
        "strwidth": {
            "name": "strwidth",
            "location": 120,
            "return": [
                "int",
                "Optional[int]",
                "Dict[str,int]",
                "str"
            ],
            "arguments": {
                "vim": [
                    "str",
                    "pynvim.Nvim",
                    "bytes",
                    "bool",
                    "Union[bytes, bytearray]"
                ],
                "word": [
                    "str",
                    "pynvim.Nvim",
                    "bytes",
                    "bool",
                    "Union[bytes, bytearray]"
                ]
            }
        },
        "len_bytes": {
            "name": "len_bytes",
            "location": 126,
            "return": [
                "int",
                "str",
                "bytearray",
                "Dict[str,str]"
            ],
            "arguments": {
                "word": [
                    "str",
                    "int",
                    "bool",
                    "bytes"
                ]
            }
        },
        "fnamemodify": {
            "name": "fnamemodify",
            "location": 130,
            "return": [
                "str"
            ],
            "arguments": {
                "vim": [
                    "str",
                    "pynvim.Nvim",
                    "float",
                    "int",
                    "List[int]"
                ],
                "word": [
                    "str",
                    "float",
                    "int",
                    "List[int]",
                    "pynvim.Nvim"
                ],
                "mod": [
                    "str",
                    "float",
                    "int",
                    "List[int]",
                    "pynvim.Nvim"
                ]
            }
        }
    },
    "defx.nvim-master/rplugin/python3/defx/view.py": {
        "View.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "int",
                    "float",
                    "bool"
                ],
                "index": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "View.init": {
            "name": "init",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str"
                ]
            }
        },
        "View.init_paths": {
            "name": "init_paths",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "paths": [
                    "str",
                    "pathlib.Path",
                    "paradigm.catalog.Path",
                    "pathman.path.Path"
                ],
                "context": [
                    "int",
                    "str",
                    "Dict[str,Any]",
                    "Set[str]",
                    "bool",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "clipboard": [
                    "int",
                    "str",
                    "Dict[str,Any]",
                    "Set[str]",
                    "bool",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        },
        "View.do_action": {
            "name": "do_action",
            "location": 105,
            "return": [
                "None",
                "int",
                "Union[tuple,list]",
                "List[int]",
                "Union[int,slice]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "action_name": [
                    "str",
                    "Callable[[Any],str]",
                    "bool",
                    "Optional[str]",
                    "Optional[Dict[str,str]]",
                    "Iterable[str]"
                ],
                "action_args": [
                    "List[str]",
                    "bool",
                    "str",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]",
                    "None"
                ],
                "new_context": [
                    "str",
                    "Tuple[Type]",
                    "bool",
                    "Dict",
                    "Hashable",
                    "static_frame.core.util.DtypesSpecifier",
                    "Optional[Sequence[str]]",
                    "Tuple[type]"
                ]
            }
        },
        "View.debug": {
            "name": "debug",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "str",
                    "int"
                ]
            }
        },
        "View.print_msg": {
            "name": "print_msg",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "str"
                ]
            }
        },
        "View.close_preview": {
            "name": "close_preview",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "View.quit": {
            "name": "quit",
            "location": 160,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "View.redraw": {
            "name": "redraw",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_force": [
                    "bool",
                    "str"
                ]
            }
        },
        "View.get_cursor_candidate": {
            "name": "get_cursor_candidate",
            "location": 250,
            "return": [
                "Dict",
                "bytes",
                "OrderedDict",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "cursor": [
                    "str"
                ]
            }
        },
        "View.get_selected_candidates": {
            "name": "get_selected_candidates",
            "location": 257,
            "return": [
                "List",
                "List[str]",
                "List[dict]",
                "Dict[str,Dict[str,str]]"
            ],
            "arguments": {
                "self": [],
                "cursor": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "index": [
                    "int",
                    "str",
                    "bool",
                    "Union[int,float,complex]",
                    "Dict[str,int]",
                    "Dict[str,Any]",
                    "Callable[[str],T]"
                ]
            }
        },
        "View.get_candidate_pos": {
            "name": "get_candidate_pos",
            "location": 269,
            "return": [
                "int",
                "str",
                "pathlib.Path",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "int",
                    "str",
                    "pathlib.Path"
                ],
                "index": [
                    "int",
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "View.cd": {
            "name": "cd",
            "location": 276,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "self": [],
                "defx": [
                    "str",
                    "Optional[str]",
                    "Mapping[str, Any]"
                ],
                "source_name": [
                    "str",
                    "Optional[str]",
                    "Union[str,None]",
                    "Type"
                ],
                "path": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "cursor": [
                    "str"
                ],
                "save_history": [
                    "bool",
                    "Union[pathlib.Path,str]",
                    "Literal",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "View.search_file": {
            "name": "search_file",
            "location": 316,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "IO",
                    "str",
                    "pathlib.Path",
                    "IO[bytes]"
                ],
                "index": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "norfs.fs.base.Path"
                ]
            }
        },
        "View.search_recursive": {
            "name": "search_recursive",
            "location": 327,
            "return": [
                "str",
                "pathlib.Path",
                "dict"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "int",
                    "pathlib.Path",
                    "pathlib.PurePath"
                ],
                "index": [
                    "str",
                    "pathlib.Path",
                    "norfs.fs.base.Path"
                ]
            }
        },
        "View.update_candidates": {
            "name": "update_candidates",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "View.open_tree": {
            "name": "open_tree",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Dict",
                    "bool",
                    "None",
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "index": [
                    "str",
                    "None",
                    "Union[str,pathlib.Path]",
                    "Optional[str]",
                    "Optional[Directory]"
                ],
                "enable_nested": [
                    "bytes",
                    "str",
                    "pathlib.Path"
                ],
                "max_level": [
                    "int",
                    "str",
                    "pathlib.PurePath",
                    "bool",
                    "TextIO"
                ]
            }
        },
        "View.close_tree": {
            "name": "close_tree",
            "location": 394,
            "return": [
                "None",
                "Set[VT]",
                "Iterator[Dict[str,str]]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "norfs.fs.base.Path",
                    "List[str]",
                    "pathlib.Path",
                    "catalog.Path"
                ],
                "index": [
                    "str",
                    "bool",
                    "path.Path",
                    "pathlib.Path"
                ]
            }
        },
        "View.restore_previous_buffer": {
            "name": "restore_previous_buffer",
            "location": 421,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "self": [],
                "bufnr": [
                    "float",
                    "str",
                    "denite.util.Nvim"
                ]
            }
        },
        "View._remove_nested_path": {
            "name": "_remove_nested_path",
            "location": 438,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "defx": [
                    "str",
                    "pathlib.Path",
                    "Sequence[str]",
                    "Dict[str,pathlib.Path]"
                ],
                "path": [
                    "str",
                    "pathlib.Path",
                    "Sequence[str]",
                    "Dict[str,pathlib.Path]"
                ]
            }
        },
        "View._init_context": {
            "name": "_init_context",
            "location": 442,
            "return": [
                "Context",
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Dict[str,Any]",
                    "str",
                    "Dict[str,set[str]]",
                    "Dict[str,Set[str]]",
                    "Iterable"
                ]
            }
        },
        "View._init_window": {
            "name": "_init_window",
            "location": 451,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "View._check_session": {
            "name": "_check_session",
            "location": 465,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ],
                "path": [
                    "str",
                    "None",
                    "bytes",
                    "sqlalchemy.orm.session.Session",
                    "Optional[str]",
                    "duniterpy.api.clienClient"
                ]
            }
        },
        "View._init_defx": {
            "name": "_init_defx",
            "location": 476,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "clipboard": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "View._switch_buffer": {
            "name": "_switch_buffer",
            "location": 540,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "View._init_all_sources": {
            "name": "_init_all_sources",
            "location": 617,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "View._init_all_columns": {
            "name": "_init_all_columns",
            "location": 630,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "View._init_columns": {
            "name": "_init_columns",
            "location": 643,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "columns": [
                    "List[str]",
                    "str",
                    "Dict[str,Any]",
                    "List[Dict]",
                    "List[dict]"
                ]
            }
        },
        "View._init_column_length": {
            "name": "_init_column_length",
            "location": 655,
            "return": [
                "None",
                "Union[tuple,list]",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "View._init_column_syntax": {
            "name": "_init_column_syntax",
            "location": 703,
            "return": [
                "None",
                "Union[tuple,list]",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "View._execute_commands": {
            "name": "_execute_commands",
            "location": 736,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "commands": [
                    "List[List[Any]]",
                    "int",
                    "Buffer",
                    "Tuple[int]",
                    "list",
                    "List[str]",
                    "str"
                ]
            }
        },
        "View._init_candidates": {
            "name": "_init_candidates",
            "location": 744,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "View._get_columns_text": {
            "name": "_get_columns_text",
            "location": 760,
            "return": [
                "str",
                "Tuple[Union[str,list]]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Dict",
                    "Dict[str,Any]",
                    "defx.contexContext"
                ],
                "candidate": [
                    "Dict",
                    "Dict[str,Any]",
                    "defx.contexContext"
                ]
            }
        },
        "View._update_paths": {
            "name": "_update_paths",
            "location": 796,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "str",
                    "bool",
                    "Mapping"
                ],
                "path": [
                    "str",
                    "List",
                    "List[str]"
                ]
            }
        },
        "View._init_cursor": {
            "name": "_init_cursor",
            "location": 804,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "defx": [
                    "str",
                    "float",
                    "int",
                    "Dict[str,Callable]",
                    "Optional[pathlib.Path]",
                    "None"
                ]
            }
        },
        "View._get_wininfo": {
            "name": "_get_wininfo",
            "location": 810,
            "return": [
                "bool",
                "List"
            ],
            "arguments": {
                "self": []
            }
        },
        "View._load_custom_sources": {
            "name": "_load_custom_sources",
            "location": 816,
            "return": [
                "List[Path]",
                "List[str]",
                "bool",
                "Set[str]",
                "Set[Tuple[str,...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "View._load_custom_columns": {
            "name": "_load_custom_columns",
            "location": 826,
            "return": [
                "List[Path]",
                "Set[str]",
                "bool",
                "List[str]",
                "Set[Tuple[str,...]]",
                "Optional[bool]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "View._update_defx_paths": {
            "name": "_update_defx_paths",
            "location": 833,
            "return": [
                "None",
                "Iterator[object]",
                "Generator",
                "Dict[str,Any]",
                "Tuple[int,str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "paths": [
                    "List[str]",
                    "Sequence[str]",
                    "List[Tuple[int, int]]",
                    "Sequence[Any]",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "View._check_bufnr": {
            "name": "_check_bufnr",
            "location": 852,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "bufnr": [
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "View._clear_prop_types": {
            "name": "_clear_prop_types",
            "location": 857,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "View._update_highlights": {
            "name": "_update_highlights",
            "location": 864,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "columns_highlights": [
                    "Dict[str,Any]",
                    "str",
                    "int"
                ]
            }
        }
    },
    "defx.nvim-master/rplugin/python3/defx/__init__.py": {
        "_defx_init": {
            "name": "_defx_init",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_defx_start": {
            "name": "_defx_start",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "_defx_do_action": {
            "name": "_defx_do_action",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "_defx_async_action": {
            "name": "_defx_async_action",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "_defx_get_candidate": {
            "name": "_defx_get_candidate",
            "location": 84,
            "return": [
                "str",
                "bool",
                "dict",
                "int"
            ],
            "arguments": {
                "args": []
            }
        },
        "_defx_get_candidates": {
            "name": "_defx_get_candidates",
            "location": 87,
            "return": [
                "str",
                "bool",
                "dict",
                "int"
            ],
            "arguments": {
                "args": []
            }
        },
        "_defx_get_selected_candidates": {
            "name": "_defx_get_selected_candidates",
            "location": 90,
            "return": [
                "Optional[str]",
                "Callable",
                "dict",
                "int",
                "str"
            ],
            "arguments": {
                "args": []
            }
        },
        "_defx_get_context": {
            "name": "_defx_get_context",
            "location": 93,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "args": []
            }
        },
        "_defx_redraw": {
            "name": "_defx_redraw",
            "location": 96,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": []
            }
        },
        "DefxHandlers.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "DefxHandlers.init_channel": {
            "name": "init_channel",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "DefxHandlers.start": {
            "name": "start",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "DefxHandlers.do_action": {
            "name": "do_action",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "DefxHandlers.async_action": {
            "name": "async_action",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "DefxHandlers.get_candidate": {
            "name": "get_candidate",
            "location": 47,
            "return": [
                "str",
                "int",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "DefxHandlers.get_candidates": {
            "name": "get_candidates",
            "location": 51,
            "return": [
                "str",
                "int",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "DefxHandlers.get_selected_candidates": {
            "name": "get_selected_candidates",
            "location": 56,
            "return": [
                "str",
                "bool",
                "Tuple[List[int], List[int], List[int]]"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "DefxHandlers.get_context": {
            "name": "get_context",
            "location": 61,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "DefxHandlers.redraw": {
            "name": "redraw",
            "location": 65,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        }
    },
    "defx.nvim-master/rplugin/python3/defx/base/column.py": {
        "Base.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Base.on_init": {
            "name": "on_init",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "bool",
                    "defx.contexContext",
                    "defx.view.View",
                    "denite.util.UserContext",
                    "defx.util.UserContext"
                ],
                "context": [
                    "bool",
                    "defx.contexContext",
                    "defx.view.View",
                    "denite.util.UserContext",
                    "defx.util.UserContext"
                ]
            }
        },
        "Base.on_redraw": {
            "name": "on_redraw",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "context": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Base.get": {
            "name": "get",
            "location": 40,
            "return": [
                "Text",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Dict[str,Any]",
                    "defx.contexContext",
                    "defx.util.Candidate"
                ],
                "candidate": [
                    "Dict[str,Any]",
                    "defx.contexContext",
                    "defx.util.Candidate"
                ]
            }
        },
        "Base.get_with_variable_text": {
            "name": "get_with_variable_text",
            "location": 43,
            "return": [
                "Tuple[Union[Text,list]]",
                "float",
                "str",
                "Dict",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "Dict[str,Any]",
                    "defx.contexContext",
                    "bool",
                    "List[dict[str,Any]]",
                    "defx.util.Candidate",
                    "List[Dict[str,Any]]"
                ],
                "variable_text": [
                    "str",
                    "Dict[str,Any]",
                    "defx.contexContext",
                    "bool",
                    "List[dict[str,Any]]",
                    "defx.util.Candidate",
                    "List[Dict[str,Any]]"
                ],
                "candidate": [
                    "str",
                    "Dict[str,Any]",
                    "defx.contexContext",
                    "bool",
                    "List[dict[str,Any]]",
                    "defx.util.Candidate",
                    "List[Dict[str,Any]]"
                ]
            }
        },
        "Base.get_with_highlights": {
            "name": "get_with_highlights",
            "location": 48,
            "return": [
                "Tuple[Union[Text,list]]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Dict[str,Any]",
                    "defx.contexContext",
                    "defx.util.Candidate"
                ],
                "candidate": [
                    "Dict[str,Any]",
                    "defx.contexContext",
                    "defx.util.Candidate"
                ]
            }
        },
        "Base.length": {
            "name": "length",
            "location": 54,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Base.syntaxes": {
            "name": "syntaxes",
            "location": 57,
            "return": [
                "List",
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.highlight_commands": {
            "name": "highlight_commands",
            "location": 60,
            "return": [
                "List",
                "defx.view.View",
                "defx.contexContext",
                "sublime.View",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.debug": {
            "name": "debug",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "defx.nvim-master/rplugin/python3/defx/base/kind.py": {
        "action": {
            "name": "action",
            "location": 40,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Callable",
                    "bool",
                    "Iterable[Sequence[str]]"
                ],
                "attr": [
                    "str",
                    "Callable",
                    "bool",
                    "Iterable[Sequence[str]]"
                ]
            }
        },
        "ActionFunc.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "OrderedDict",
                    "str",
                    "bool",
                    "Optional[Sequence[Any]]",
                    "Sequence[Any]",
                    "None",
                    "Optional[str]"
                ],
                "attr": [
                    "bool",
                    "str",
                    "Dict[str,Any]",
                    "Hashable",
                    "int",
                    "List",
                    "Optional[list]",
                    "None"
                ],
                "func": [
                    "Optional[List[str]]",
                    "List[str]",
                    "int",
                    "Callable",
                    "None",
                    "bool",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "ActionFunc.__call__": {
            "name": "__call__",
            "location": 35,
            "return": [
                "int",
                "Union[int, slice]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "kind": [
                    "IO",
                    "int",
                    "defx.view.View",
                    "defx.defx.Defx",
                    "defx.contexContext"
                ],
                "view": [
                    "IO",
                    "int",
                    "defx.view.View",
                    "defx.defx.Defx",
                    "defx.contexContext"
                ],
                "defx": [
                    "IO",
                    "int",
                    "defx.view.View",
                    "defx.defx.Defx",
                    "defx.contexContext"
                ],
                "context": [
                    "IO",
                    "int",
                    "defx.view.View",
                    "defx.defx.Defx",
                    "defx.contexContext"
                ]
            }
        },
        "action.wrapper": {
            "name": "wrapper",
            "location": 42,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "Base.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Base.get_actions": {
            "name": "get_actions",
            "location": 59,
            "return": [
                "Dict[,ActionTable]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base._add_session": {
            "name": "_add_session",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "defx": [
                    "Sequence[str]"
                ],
                "context": [
                    "Sequence[str]",
                    "defx.contexContext",
                    "List",
                    "Dict[str,Any]"
                ]
            }
        },
        "Base._call": {
            "name": "_call",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "int",
                    "str",
                    "bool"
                ],
                "defx": [
                    "Callable"
                ],
                "context": [
                    "bool",
                    "Type",
                    "Iterable[int]",
                    "tuple",
                    "List[str]"
                ]
            }
        },
        "Base._change_filtered_files": {
            "name": "_change_filtered_files",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "Sequence[str]",
                    "str",
                    "TextIO",
                    "List[str]",
                    "IO",
                    "Dict[str,Any]"
                ],
                "defx": [
                    "Sequence[str]",
                    "List[str]",
                    "str",
                    "TextIO",
                    "IO",
                    "Union[pathlib.Path,str]"
                ],
                "context": [
                    "Sequence[str]",
                    "str",
                    "TextIO",
                    "List[str]",
                    "IO",
                    "Dict[str,Any]"
                ]
            }
        },
        "Base._change_ignored_files": {
            "name": "_change_ignored_files",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "IO",
                    "pathlib.Path",
                    "TextIO",
                    "str",
                    "List[str]",
                    "bool"
                ],
                "defx": [
                    "IO",
                    "pathlib.Path",
                    "TextIO",
                    "bool",
                    "List[str]"
                ],
                "context": [
                    "IO",
                    "pathlib.Path",
                    "TextIO",
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "Base._clear_clipboard": {
            "name": "_clear_clipboard",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "bool",
                    "str",
                    "Union[List,str]",
                    "List"
                ],
                "defx": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "context": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Base._clear_select_all": {
            "name": "_clear_select_all",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "int",
                    "bool"
                ],
                "defx": [
                    "int",
                    "bool"
                ],
                "context": [
                    "str",
                    "Dict",
                    "Optional[Dict]",
                    "Dict[str,Any]",
                    "BaseException",
                    "bool",
                    "None"
                ]
            }
        },
        "Base._close_tree": {
            "name": "_close_tree",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [],
                "defx": [],
                "context": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "Base._delete_session": {
            "name": "_delete_session",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "Dict",
                    "Dict[str,Any]",
                    "Mapping[str,Any]",
                    "Mapping"
                ],
                "defx": [
                    "sublime.View"
                ],
                "context": [
                    "str",
                    "Dict",
                    "List",
                    "bytes"
                ]
            }
        },
        "Base._load_session": {
            "name": "_load_session",
            "location": 167,
            "return": [
                "None",
                "Iterator[Dict[str,str]]",
                "Mapping[str,Any]",
                "Type",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "Dict[Hashable,Any]",
                    "int"
                ],
                "defx": [
                    "int",
                    "str",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]",
                    "bool"
                ],
                "context": [
                    "str",
                    "List[str]",
                    "bool",
                    "Dict"
                ]
            }
        },
        "Base._multi": {
            "name": "_multi",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "List[str]",
                    "Callable",
                    "Sequence[str]",
                    "defx.contexContext",
                    "Dict[str,Any]",
                    "Tuple",
                    "str"
                ],
                "defx": [
                    "List[str]",
                    "Callable",
                    "Sequence[str]",
                    "defx.contexContext",
                    "Dict[str,Any]",
                    "Tuple",
                    "str"
                ],
                "context": [
                    "str",
                    "List[str]",
                    "int",
                    "List[Dict[str, str]]",
                    "List[Tuple[float, str]]"
                ]
            }
        },
        "Base._nop": {
            "name": "_nop",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "defx": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "context": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Base._open_tree": {
            "name": "_open_tree",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "int",
                    "List"
                ],
                "defx": [
                    "int",
                    "List"
                ],
                "context": [
                    "Optional[int]",
                    "defx.contexContext",
                    "set"
                ]
            }
        },
        "Base._open_tree_recursive": {
            "name": "_open_tree_recursive",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "str",
                    "Exception",
                    "List[str]"
                ],
                "defx": [
                    "str",
                    "Exception",
                    "List[str]"
                ],
                "context": [
                    "Sequence[str]",
                    "Callable",
                    "str"
                ]
            }
        },
        "Base._open_or_close_tree": {
            "name": "_open_or_close_tree",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "str",
                    "Dict[str,int]"
                ],
                "defx": [
                    "str",
                    "Dict[str,int]"
                ],
                "context": [
                    "str",
                    "Dict[str,int]"
                ]
            }
        },
        "Base._print": {
            "name": "_print",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "int",
                    "str",
                    "Union[int, List[int]]"
                ],
                "defx": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "context": [
                    "int",
                    "Callable",
                    "str",
                    "sublime.View"
                ]
            }
        },
        "Base._quit": {
            "name": "_quit",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "int",
                    "sublime.View",
                    "Callable",
                    "str"
                ],
                "defx": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "context": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Base._redraw": {
            "name": "_redraw",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "bool",
                    "defx.view.View",
                    "Optional[bool]",
                    "str"
                ],
                "defx": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "context": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Base._repeat": {
            "name": "_repeat",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "defx": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "context": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Base._resize": {
            "name": "_resize",
            "location": 258,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "defx.view.View",
                    "int",
                    "sublime.View"
                ],
                "defx": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "context": [
                    "int",
                    "bool"
                ]
            }
        },
        "Base._save_session": {
            "name": "_save_session",
            "location": 267,
            "return": [
                "None",
                "Dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "List[Dict]",
                    "List[dict]"
                ],
                "defx": [
                    "str",
                    "Sequence[int]",
                    "bool",
                    "Session",
                    "ashpy.contexts.Context"
                ],
                "context": [
                    "str",
                    "Dict[str,Any]",
                    "bytes",
                    "BinaryIO",
                    "pathlib.Path"
                ]
            }
        },
        "Base._search": {
            "name": "_search",
            "location": 282,
            "return": [
                "None",
                "Union[tuple,list]",
                "Set[str]",
                "Iterator[object]"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "str"
                ],
                "defx": [
                    "str"
                ],
                "context": [
                    "Dict[str,Any]",
                    "Sequence[str]",
                    "Exception",
                    "List"
                ]
            }
        },
        "Base._search_recursive": {
            "name": "_search_recursive",
            "location": 294,
            "return": [
                "None",
                "Union[tuple,list]",
                "Set[str]",
                "Iterator[object]"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "int",
                    "defx.contexContext"
                ],
                "defx": [
                    "str",
                    "defx.contexContext"
                ],
                "context": [
                    "Dict[str,Any]",
                    "Sequence[str]",
                    "Exception",
                    "bytes"
                ]
            }
        },
        "Base._toggle_columns": {
            "name": "_toggle_columns",
            "location": 312,
            "return": [
                "None",
                "Union[tuple,list]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "behave.runner.Context",
                    "int",
                    "dict",
                    "bool",
                    "Dict[str, Any]"
                ],
                "defx": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "Callable[,None]",
                    "List[dict[int,float]]",
                    "View",
                    "List[Dict[int,float]]",
                    "int"
                ],
                "context": [
                    "List[str]",
                    "Tuple",
                    "Type"
                ]
            }
        },
        "Base._toggle_ignored_files": {
            "name": "_toggle_ignored_files",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "bool",
                    "Set[pathlib.Path]",
                    "Callable",
                    "pathlib.Path"
                ],
                "defx": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "context": [
                    "bool",
                    "Set[pathlib.Path]",
                    "Callable",
                    "pathlib.Path"
                ]
            }
        },
        "Base._toggle_select": {
            "name": "_toggle_select",
            "location": 332,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "Any",
                    "bytes"
                ],
                "defx": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "context": [
                    "Any",
                    "bytes"
                ]
            }
        },
        "Base._toggle_select_all": {
            "name": "_toggle_select_all",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "Callable[[int],bool]",
                    "List[float]",
                    "Callable[int,bool]",
                    "int",
                    "List[List[int]]",
                    "List[list[int]]"
                ],
                "defx": [
                    "Callable[[int],bool]",
                    "List[float]",
                    "Callable[int,bool]",
                    "int",
                    "List[List[int]]",
                    "List[list[int]]"
                ],
                "context": [
                    "str",
                    "Dict",
                    "Optional[Dict]",
                    "Dict[str,Any]",
                    "BaseException",
                    "bool",
                    "None"
                ]
            }
        },
        "Base._toggle_select_visual": {
            "name": "_toggle_select_visual",
            "location": 350,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "int",
                    "float"
                ],
                "defx": [
                    "Iterable[Any]",
                    "int",
                    "Tuple",
                    "List[float]",
                    "List"
                ],
                "context": [
                    "int",
                    "behave.runner.Context"
                ]
            }
        },
        "Base._toggle_sort": {
            "name": "_toggle_sort",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "defx": [
                    "str",
                    "bytes",
                    "int",
                    "bool"
                ],
                "context": [
                    "str"
                ]
            }
        },
        "Base._yank_path": {
            "name": "_yank_path",
            "location": 376,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "str",
                    "dict",
                    "pathlib.Path",
                    "Dict[str, Any]"
                ],
                "defx": [
                    "str",
                    "pathlib.Path",
                    "bool",
                    "Callable",
                    "Set[pathlib.Path]"
                ],
                "context": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "action.wrapper.inner_wrapper": {
            "name": "inner_wrapper",
            "location": 46,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "kind": [
                    "defx.view.View",
                    "defx.defx.Defx",
                    "int",
                    "defx.contexContext"
                ],
                "view": [
                    "defx.view.View",
                    "defx.defx.Defx",
                    "int",
                    "defx.contexContext"
                ],
                "defx": [
                    "defx.view.View",
                    "defx.defx.Defx",
                    "int",
                    "defx.contexContext"
                ],
                "context": [
                    "defx.view.View",
                    "defx.defx.Defx",
                    "int",
                    "defx.contexContext"
                ]
            }
        },
        "Base.get_actions.predicate": {
            "name": "predicate",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "o": [
                    "str",
                    "Iterator",
                    "Callable",
                    "Iterator[T]",
                    "bool"
                ]
            }
        }
    },
    "defx.nvim-master/rplugin/python3/defx/base/source.py": {
        "Base.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Base.get_root_candidate": {
            "name": "get_root_candidate",
            "location": 28,
            "return": [
                "Dict[str,Any]",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "bool",
                    "defx.contexContext",
                    "pathlib.Path"
                ],
                "path": [
                    "str",
                    "bool",
                    "defx.contexContext",
                    "pathlib.Path"
                ]
            }
        },
        "Base.gather_candidates": {
            "name": "gather_candidates",
            "location": 34,
            "return": [
                "List[Dict[str,Any]]",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "bool",
                    "Iterable[pathlib.Path]",
                    "defx.contexContext",
                    "str",
                    "None",
                    "pathlib.Path",
                    "Optional[Tuple[str,...]]",
                    "path.Path"
                ],
                "path": [
                    "bool",
                    "Iterable[pathlib.Path]",
                    "defx.contexContext",
                    "str",
                    "None",
                    "pathlib.Path",
                    "Optional[Tuple[str,...]]",
                    "path.Path"
                ]
            }
        },
        "Base.debug": {
            "name": "debug",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "defx.nvim-master/rplugin/python3/defx/base/__init__.py": {},
    "defx.nvim-master/rplugin/python3/defx/column/filename.py": {
        "Column.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "Dict[str,Any]",
                    "denite.util.Nvim",
                    "Callable[Any,Any,bool]",
                    "deoplete.util.Nvim",
                    "Callable[[Any,Any],bool]"
                ]
            }
        },
        "Column.on_init": {
            "name": "on_init",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "bool",
                    "defx.contexContext",
                    "defx.view.View",
                    "denite.util.UserContext",
                    "defx.util.UserContext"
                ],
                "context": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "Column.get_with_variable_text": {
            "name": "get_with_variable_text",
            "location": 45,
            "return": [
                "str",
                "Tuple[list[tuple[Union[Text,tuple]]]]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "Dict[str,Any]",
                    "defx.contexContext",
                    "bool",
                    "List[dict[str,Any]]",
                    "defx.util.Candidate",
                    "List[Dict[str,Any]]"
                ],
                "variable_text": [
                    "List[list[int]]",
                    "int",
                    "bytes",
                    "List[List[int]]",
                    "float"
                ],
                "candidate": [
                    "str",
                    "Optional[Dict]"
                ]
            }
        },
        "Column.length": {
            "name": "length",
            "location": 68,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "float",
                    "Union[int,float]",
                    "bool"
                ]
            }
        },
        "Column.syntaxes": {
            "name": "syntaxes",
            "location": 86,
            "return": [
                "List",
                "List[str]",
                "deoplete.util.Candidates",
                "denite.util.Candidates",
                "List[List[Any]]",
                "str",
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Column.highlight_commands": {
            "name": "highlight_commands",
            "location": 89,
            "return": [
                "List[str]",
                "defx.view.View",
                "defx.contexContext",
                "List",
                "sublime.View",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Column._truncate": {
            "name": "_truncate",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "bool",
                    "int",
                    "str",
                    "pynvim.Nvim",
                    "bytes"
                ]
            }
        }
    },
    "defx.nvim-master/rplugin/python3/defx/column/icon.py": {
        "Column.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "Dict[str,Any]",
                    "denite.util.Nvim",
                    "Callable[Any,Any,bool]",
                    "deoplete.util.Nvim",
                    "Callable[[Any,Any],bool]"
                ]
            }
        },
        "Column.get_with_highlights": {
            "name": "get_with_highlights",
            "location": 42,
            "return": [
                "str",
                "Tuple[list[tuple[Text]]]",
                "List",
                "Tuple[list]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Dict[str,Any]",
                    "defx.contexContext",
                    "defx.util.Candidate"
                ],
                "candidate": [
                    "defx.contexContext",
                    "defx.util.Candidate",
                    "Dict[str, Any]"
                ]
            }
        },
        "Column.length": {
            "name": "length",
            "location": 60,
            "return": [
                "int",
                "List[Dict[str, Any]]",
                "Type[Any]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Column.syntaxes": {
            "name": "syntaxes",
            "location": 63,
            "return": [
                "List",
                "List[str]",
                "deoplete.util.Candidates",
                "denite.util.Candidates",
                "List[List[Any]]",
                "str",
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Column.highlight_commands": {
            "name": "highlight_commands",
            "location": 66,
            "return": [
                "List[str]",
                "defx.view.View",
                "defx.contexContext",
                "List",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "defx.nvim-master/rplugin/python3/defx/column/indent.py": {
        "Column.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "Dict[str,Any]",
                    "denite.util.Nvim",
                    "Callable[Any,Any,bool]",
                    "deoplete.util.Nvim",
                    "Callable[[Any,Any],bool]"
                ]
            }
        },
        "Column.get": {
            "name": "get",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Dict[str,Any]",
                    "defx.contexContext",
                    "defx.util.Candidate"
                ],
                "candidate": [
                    "str",
                    "List",
                    "int",
                    "float"
                ]
            }
        },
        "Column.length": {
            "name": "length",
            "location": 30,
            "return": [
                "int",
                "List",
                "List[T]",
                "List[float]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "List[str]",
                    "str",
                    "defx.contexContext",
                    "[]"
                ]
            }
        }
    },
    "defx.nvim-master/rplugin/python3/defx/column/mark.py": {
        "Column.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "Dict[str,Any]",
                    "denite.util.Nvim",
                    "Callable[Any,Any,bool]",
                    "deoplete.util.Nvim",
                    "Callable[[Any,Any],bool]"
                ]
            }
        },
        "Column.get_with_highlights": {
            "name": "get_with_highlights",
            "location": 40,
            "return": [
                "str",
                "Tuple[Union[str,list[tuple[Text]]]]",
                "Tuple[list]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Dict[str,Any]",
                    "defx.contexContext",
                    "defx.util.Candidate"
                ],
                "candidate": [
                    "IO[bytes]"
                ]
            }
        },
        "Column.length": {
            "name": "length",
            "location": 55,
            "return": [
                "int",
                "List[Dict[str, Any]]",
                "Type[Any]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Column.syntaxes": {
            "name": "syntaxes",
            "location": 58,
            "return": [
                "List",
                "List[str]",
                "deoplete.util.Candidates",
                "denite.util.Candidates",
                "List[List[Any]]",
                "str",
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Column.highlight_commands": {
            "name": "highlight_commands",
            "location": 61,
            "return": [
                "List[str]",
                "defx.view.View",
                "defx.contexContext",
                "List",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "defx.nvim-master/rplugin/python3/defx/column/size.py": {
        "Column.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "Dict[str,Any]",
                    "denite.util.Nvim",
                    "Callable[Any,Any,bool]",
                    "deoplete.util.Nvim",
                    "Callable[[Any,Any],bool]"
                ]
            }
        },
        "Column.get_with_highlights": {
            "name": "get_with_highlights",
            "location": 32,
            "return": [
                "Tuple[list]",
                "str",
                "Tuple[Union[str,list[tuple[Text]]]]",
                "int",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Dict[str,Any]",
                    "defx.contexContext",
                    "defx.util.Candidate"
                ],
                "candidate": [
                    "str"
                ]
            }
        },
        "Column._get_size": {
            "name": "_get_size",
            "location": 43,
            "return": [
                "str",
                "Tuple[str]",
                "Tuple[Text]"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "float",
                    "bytes"
                ]
            }
        },
        "Column.length": {
            "name": "length",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Column.highlight_commands": {
            "name": "highlight_commands",
            "location": 57,
            "return": [
                "List[str]",
                "defx.view.View",
                "defx.contexContext",
                "List",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "defx.nvim-master/rplugin/python3/defx/column/space.py": {
        "Column.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "Dict[str,Any]",
                    "denite.util.Nvim",
                    "Callable[Any,Any,bool]",
                    "deoplete.util.Nvim",
                    "Callable[[Any,Any],bool]"
                ]
            }
        },
        "Column.get": {
            "name": "get",
            "location": 21,
            "return": [
                "Text",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Dict[str,Any]",
                    "defx.contexContext",
                    "defx.util.Candidate"
                ],
                "candidate": [
                    "Dict[str,Any]",
                    "defx.contexContext",
                    "defx.util.Candidate"
                ]
            }
        },
        "Column.length": {
            "name": "length",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "defx.nvim-master/rplugin/python3/defx/column/time.py": {
        "Column.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "Dict[str,Any]",
                    "denite.util.Nvim",
                    "Callable[Any,Any,bool]",
                    "deoplete.util.Nvim",
                    "Callable[[Any,Any],bool]"
                ]
            }
        },
        "Column.on_init": {
            "name": "on_init",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "bool",
                    "defx.contexContext",
                    "defx.view.View",
                    "denite.util.UserContext",
                    "defx.util.UserContext"
                ],
                "context": [
                    "bool",
                    "defx.contexContext",
                    "defx.view.View",
                    "denite.util.UserContext",
                    "defx.util.UserContext"
                ]
            }
        },
        "Column.get_with_highlights": {
            "name": "get_with_highlights",
            "location": 34,
            "return": [
                "Tuple[Union[str,list]]",
                "Tuple[list[tuple]]",
                "str",
                "Optional[str]",
                "bool",
                "Optional[List[str]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Dict[str,Any]",
                    "defx.contexContext",
                    "defx.util.Candidate"
                ],
                "candidate": [
                    "str"
                ]
            }
        },
        "Column.length": {
            "name": "length",
            "location": 44,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Column.highlight_commands": {
            "name": "highlight_commands",
            "location": 47,
            "return": [
                "List[Text]",
                "defx.view.View",
                "defx.contexContext",
                "List",
                "sublime.View",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "defx.nvim-master/rplugin/python3/defx/column/type.py": {
        "Column.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "Dict[str,Any]",
                    "denite.util.Nvim",
                    "Callable[Any,Any,bool]",
                    "deoplete.util.Nvim",
                    "Callable[[Any,Any],bool]"
                ]
            }
        },
        "Column.on_init": {
            "name": "on_init",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "bool",
                    "defx.contexContext",
                    "defx.view.View",
                    "denite.util.UserContext",
                    "defx.util.UserContext"
                ],
                "context": [
                    "bool",
                    "defx.contexContext",
                    "defx.view.View",
                    "denite.util.UserContext",
                    "defx.util.UserContext"
                ]
            }
        },
        "Column.get_with_highlights": {
            "name": "get_with_highlights",
            "location": 51,
            "return": [
                "str",
                "Tuple[Union[str,list[tuple[Text]]]]",
                "Tuple[list]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Dict[str,Any]",
                    "defx.contexContext",
                    "defx.util.Candidate"
                ],
                "candidate": [
                    "str",
                    "List[dict]",
                    "defx.util.Candidate",
                    "Dict[str,Any]",
                    "Match[str]",
                    "List[Dict]"
                ]
            }
        },
        "Column.length": {
            "name": "length",
            "location": 65,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Column.syntaxes": {
            "name": "syntaxes",
            "location": 68,
            "return": [
                "List",
                "List[str]",
                "Iterable[str]",
                "Union[List[str],str]",
                "Generator[str,None,None]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Column.highlight_commands": {
            "name": "highlight_commands",
            "location": 72,
            "return": [
                "List[str]",
                "defx.view.View",
                "defx.contexContext",
                "List",
                "sublime.View",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "defx.nvim-master/rplugin/python3/defx/column/__init__.py": {},
    "defx.nvim-master/rplugin/python3/defx/kind/file.py": {
        "Kind.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Kind.is_readable": {
            "name": "is_readable",
            "location": 33,
            "return": [
                "str",
                "pathlib.Path",
                "deoplete.util.UserContext"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "List[pathlib.Path]",
                    "pathlib.Path"
                ]
            }
        },
        "Kind.get_home": {
            "name": "get_home",
            "location": 36,
            "return": [
                "pathlib.Path",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Kind.path_maker": {
            "name": "path_maker",
            "location": 39,
            "return": [
                "Path",
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int",
                    "pathlib.Path",
                    "norfs.fs.base.Path"
                ]
            }
        },
        "Kind.rmtree": {
            "name": "rmtree",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "pathlib.Path",
                    "os.PathLike"
                ]
            }
        },
        "Kind.get_buffer_name": {
            "name": "get_buffer_name",
            "location": 45,
            "return": [
                "pathlib.Path",
                "str",
                "Iterable[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Iterable[str]",
                    "str",
                    "bool",
                    "pathlib.Path"
                ]
            }
        },
        "Kind.preview_file": {
            "name": "preview_file",
            "location": 48,
            "return": [
                "None",
                "Set[str]",
                "str",
                "Tuple[int,str]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "int",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "defx": [
                    "int",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "context": [
                    "int",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "candidate": [
                    "str",
                    "List[str]",
                    "bool",
                    "Callable"
                ]
            }
        },
        "Kind.paste": {
            "name": "paste",
            "location": 59,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "IO",
                    "None"
                ],
                "src": [
                    "pathlib.Path",
                    "str",
                    "pathlib.PurePath",
                    "path.Path",
                    "IO[str]",
                    "Union[pathlib.Path, str]"
                ],
                "dest": [
                    "str",
                    "Dict[str,Any]",
                    "pathlib.Path",
                    "Callable[Any,None]",
                    "Optional[Callable[[Any],None]]",
                    "None"
                ],
                "cwd": [
                    "str",
                    "pathlib.Path",
                    "path.Path",
                    "Union[pathlib.Path,str]"
                ]
            }
        },
        "Kind.check_output": {
            "name": "check_output",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "str",
                    "Tuple[int]",
                    "List[bytes]",
                    "int",
                    "Iterable[float]"
                ],
                "cwd": [
                    "str",
                    "defx.defx.Defx",
                    "allennlp.common.util.JsonDict"
                ],
                "args": []
            }
        },
        "Kind._change_vim_cwd": {
            "name": "_change_vim_cwd",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "int",
                    "defx.view.View",
                    "defx.defx.Defx",
                    "defx.contexContext"
                ],
                "defx": [
                    "int",
                    "defx.view.View",
                    "defx.defx.Defx",
                    "defx.contexContext"
                ],
                "context": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Kind._execute_system": {
            "name": "_execute_system",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "int",
                    "str",
                    "defx.view.View",
                    "List",
                    "slice"
                ],
                "defx": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "context": [
                    "int",
                    "Callable",
                    "str",
                    "sublime.View"
                ]
            }
        },
        "Kind._preview": {
            "name": "_preview",
            "location": 116,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "defx.view.View",
                    "defx.contexContext"
                ],
                "defx": [
                    "Dict[str,Any]",
                    "defx.defx.Defx",
                    "cmk.base.events.EventContext"
                ],
                "context": [
                    "defx.view.View",
                    "defx.contexContext"
                ]
            }
        },
        "Kind._preview_image": {
            "name": "_preview_image",
            "location": 130,
            "return": [
                "None",
                "int",
                "Union[tuple,list]",
                "Set[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "sublime.View",
                    "View"
                ],
                "defx": [
                    "bool",
                    "defx.defx.Defx",
                    "str",
                    "Callable"
                ],
                "context": [
                    "collections.abc.Awaitable[T]",
                    "bool",
                    "Awaitable[T]",
                    "Dict[str,Any]",
                    "str",
                    "int"
                ],
                "candidate": [
                    "str",
                    "int"
                ]
            }
        },
        "Kind._remove_trash": {
            "name": "_remove_trash",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "sublime.View"
                ],
                "defx": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "context": [
                    "str",
                    "bool",
                    "List[Tuple[float,str]]",
                    "Dict[str,Any]",
                    "List[tuple[Union[float,str]]]",
                    "List[Dict[str,str]]",
                    "List[dict[str,str]]",
                    "List[Tuple[bool,str]]",
                    "List[tuple[Union[bool,str]]]"
                ]
            }
        }
    },
    "defx.nvim-master/rplugin/python3/defx/kind/filelike.py": {
        "Kind.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Kind.is_readable": {
            "name": "is_readable",
            "location": 40,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "pathlib.Path"
                ]
            }
        },
        "Kind.get_home": {
            "name": "get_home",
            "location": 43,
            "return": [
                "PathLike",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Kind.path_maker": {
            "name": "path_maker",
            "location": 46,
            "return": [
                "PathLike",
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Iterable[pathlib.Path]",
                    "int",
                    "List[Tuple[pathlib.PurePosixPath,parso.python.tree.Scope]]",
                    "List[str]"
                ]
            }
        },
        "Kind.rmtree": {
            "name": "rmtree",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "Path",
                    "pathlib2.Path"
                ]
            }
        },
        "Kind.get_buffer_name": {
            "name": "get_buffer_name",
            "location": 55,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Iterable[str]",
                    "str",
                    "bool",
                    "pathlib.Path"
                ]
            }
        },
        "Kind.paste": {
            "name": "paste",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "bool",
                    "Dict",
                    "str",
                    "List[str]"
                ],
                "src": [
                    "bool",
                    "Dict",
                    "str",
                    "List[str]"
                ],
                "dest": [
                    "bool",
                    "Dict",
                    "str",
                    "List[str]"
                ],
                "cwd": [
                    "bool",
                    "Dict",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Kind.preview_file": {
            "name": "preview_file",
            "location": 68,
            "return": [
                "None",
                "Set[str]",
                "str",
                "Tuple[int,str]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "sublime.View",
                    "defx.view.View"
                ],
                "defx": [
                    "float",
                    "defx.defx.Defx",
                    "List[str]",
                    "bool",
                    "Callable"
                ],
                "context": [
                    "str",
                    "Union[str,List[str],Tuple[str,...]]",
                    "List[str]",
                    "Tuple[Union[str,...]]"
                ],
                "candidate": [
                    "str",
                    "sublime.View",
                    "int",
                    "Any",
                    "View"
                ]
            }
        },
        "Kind.input": {
            "name": "input",
            "location": 96,
            "return": [
                "str",
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "str",
                    "Optional[str]",
                    "None",
                    "pynvim.Nvim"
                ],
                "defx": [
                    "str",
                    "Dict[str,Any]"
                ],
                "cwd": [
                    "str",
                    "bool",
                    "Set[str]",
                    "int"
                ],
                "prompt": [
                    "str",
                    "Optional[str]",
                    "None",
                    "pynvim.Nvim"
                ],
                "text": [
                    "str",
                    "Optional[str]",
                    "None",
                    "pynvim.Nvim"
                ],
                "completion": [
                    "str",
                    "Optional[str]",
                    "None",
                    "pynvim.Nvim"
                ]
            }
        },
        "Kind.check_output": {
            "name": "check_output",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "str",
                    "Tuple[int]",
                    "List[bytes]",
                    "int",
                    "Iterable[float]"
                ],
                "cwd": [
                    "str",
                    "defx.defx.Defx",
                    "allennlp.common.util.JsonDict"
                ],
                "args": []
            }
        },
        "Kind.check_overwrite": {
            "name": "check_overwrite",
            "location": 114,
            "return": [
                "str",
                "pathlib.Path",
                "Counter",
                "int",
                "List[str]",
                "Dict[str,dict[str,float]]"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "defx.view.View",
                    "float",
                    "int"
                ],
                "dest": [
                    "int",
                    "BinaryIO",
                    "str",
                    "Sequence[int]",
                    "denite.util.UserContext"
                ],
                "src": [
                    "Dict[str, str]"
                ]
            }
        },
        "Kind.execute_job": {
            "name": "execute_job",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "sublime.View"
                ],
                "args": []
            }
        },
        "Kind.switch": {
            "name": "switch",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "sublime.View"
                ]
            }
        },
        "Kind.create_open": {
            "name": "create_open",
            "location": 172,
            "return": [
                "None",
                "str",
                "bool",
                "Sequence[str]",
                "Set[VT]",
                "Dict[str,Tuple[int,int]]"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "Callable[[str], str]",
                    "str",
                    "paradigm.models.Base"
                ],
                "defx": [
                    "str",
                    "Sequence[str]",
                    "int",
                    "pathlib.Path"
                ],
                "context": [
                    "str"
                ],
                "path": [
                    "str",
                    "pathlib.Path"
                ],
                "command": [
                    "str",
                    "bool",
                    "Optional[IO[str]]",
                    "IO",
                    "pathlib.Path",
                    "None"
                ],
                "isdir": [
                    "bool",
                    "str",
                    "Callable[[float],None]",
                    "Callable[float,None]"
                ],
                "isopen": [
                    "bool",
                    "str",
                    "Callable[[float],None]",
                    "Callable[float,None]"
                ]
            }
        },
        "Kind._cd": {
            "name": "_cd",
            "location": 205,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "defx.view.View"
                ],
                "defx": [
                    "Dict"
                ],
                "context": [
                    "str",
                    "Tuple",
                    "denite.util.UserContext",
                    "List[str]",
                    "defx.contexContext"
                ]
            }
        },
        "Kind._check_redraw": {
            "name": "_check_redraw",
            "location": 244,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "bool",
                    "defx.view.View",
                    "Optional[bool]",
                    "str"
                ],
                "defx": [
                    "str",
                    "int"
                ],
                "context": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Kind._copy": {
            "name": "_copy",
            "location": 253,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "defx.view.View"
                ],
                "defx": [
                    "Optional[int]",
                    "int",
                    "str",
                    "None",
                    "sqlalchemy.util.KeyedTuple",
                    "Optional[Iterable[int]]",
                    "Iterable[int]"
                ],
                "context": [
                    "int",
                    "bytes",
                    "defx.contexContext"
                ]
            }
        },
        "Kind._drop": {
            "name": "_drop",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "Dict[str, Any]",
                    "dict",
                    "defx.defx.Defx",
                    "cmk.base.events.EventContext",
                    "Mapping[str, Any]"
                ],
                "defx": [
                    "bool",
                    "defx.defx.Defx"
                ],
                "context": [
                    "deoplete.util.UserContext",
                    "defx.contexContext",
                    "denite.util.UserContext"
                ]
            }
        },
        "Kind._execute_command": {
            "name": "_execute_command",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "Dict[str,Any]",
                    "Dict",
                    "deoplete.util.UserContext",
                    "denite.util.UserContext"
                ],
                "defx": [
                    "bool",
                    "str",
                    "List[pathlib.Path]",
                    "Callable",
                    "List",
                    "Optional[List[Dict]]",
                    "List[dict]",
                    "None"
                ],
                "context": [
                    "List",
                    "int",
                    "defx.view.View",
                    "str",
                    "defx.contexContext",
                    "sublime.View"
                ]
            }
        },
        "Kind._link": {
            "name": "_link",
            "location": 364,
            "return": [
                "None",
                "Union[tuple,list]",
                "Set[str]",
                "Dict[str,Any]",
                "base.ConfigOptions"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "defx.view.View",
                    "View"
                ],
                "defx": [
                    "Optional[int]",
                    "str",
                    "int",
                    "None"
                ],
                "context": [
                    "List[str]",
                    "List[Tuple[float,str]]",
                    "List[tuple[Union[float,str]]]",
                    "List",
                    "List[Dict[str,str]]",
                    "List[dict[str,str]]",
                    "Sequence[Tuple[str,Any]]",
                    "Sequence[tuple[Union[str,Any]]]"
                ]
            }
        },
        "Kind._move": {
            "name": "_move",
            "location": 381,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "defx.view.View",
                    "View",
                    "sublime.View"
                ],
                "defx": [
                    "Optional[int]",
                    "int",
                    "str",
                    "None",
                    "sqlalchemy.util.KeyedTuple",
                    "Optional[Iterable[int]]",
                    "Iterable[int]"
                ],
                "context": [
                    "int",
                    "bytes",
                    "defx.contexContext"
                ]
            }
        },
        "Kind._new_directory": {
            "name": "_new_directory",
            "location": 396,
            "return": [
                "Dict[str,Any]",
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "defx.view.View",
                    "View",
                    "cmk.base.events.EventContext"
                ],
                "defx": [
                    "List[int]",
                    "Dict[str,Any]"
                ],
                "context": [
                    "bool",
                    "denite.util.UserContext",
                    "str",
                    "Callable",
                    "Tuple",
                    "List[str]"
                ]
            }
        },
        "Kind._new_file": {
            "name": "_new_file",
            "location": 426,
            "return": [
                "None",
                "List[type]",
                "str",
                "int",
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "List[int]",
                    "Dict[str,Any]",
                    "Mapping",
                    "defx.view.View",
                    "Mapping[str,Any]"
                ],
                "defx": [
                    "bool",
                    "str",
                    "None",
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "context": [
                    "str",
                    "Callable",
                    "Optional[bool]",
                    "bool",
                    "List[Dict[str,Any]]",
                    "None",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "Kind._new_multiple_files": {
            "name": "_new_multiple_files",
            "location": 457,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "defx.view.View",
                    "defx.contexContext"
                ],
                "defx": [
                    "str",
                    "bool",
                    "pathlib.Path"
                ],
                "context": [
                    "Type",
                    "denite.util.UserContext",
                    "django.template.Context"
                ]
            }
        },
        "Kind._open": {
            "name": "_open",
            "location": 493,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "sublime.View"
                ],
                "defx": [
                    "int",
                    "defx.defx.Defx",
                    "None",
                    "bool",
                    "Optional[CustomerResourceIdentifier]"
                ],
                "context": [
                    "defx.contexContext",
                    "denite.util.UserContext",
                    "deoplete.util.UserContext"
                ]
            }
        },
        "Kind._open_directory": {
            "name": "_open_directory",
            "location": 534,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "str",
                    "defx.view.View",
                    "None",
                    "Type",
                    "defx.defx.Defx",
                    "IO",
                    "Optional[str]",
                    "pathlib.Path",
                    "Union[str,IO[bytes]]"
                ],
                "defx": [
                    "str",
                    "defx.view.View",
                    "None",
                    "Type",
                    "defx.defx.Defx",
                    "IO",
                    "Optional[str]",
                    "pathlib.Path",
                    "Union[str,IO[bytes]]"
                ],
                "context": [
                    "Dict[str,Any]",
                    "defx.contexContext",
                    "Callable",
                    "str"
                ]
            }
        },
        "Kind._paste": {
            "name": "_paste",
            "location": 549,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "defx.view.View",
                    "sublime.View",
                    "View",
                    "model.View"
                ],
                "defx": [
                    "List",
                    "defx.defx.Defx",
                    "bytes",
                    "Dict",
                    "str",
                    "Callable",
                    "None",
                    "Optional[str]"
                ],
                "context": [
                    "Any",
                    "bytes"
                ]
            }
        },
        "Kind._preview": {
            "name": "_preview",
            "location": 598,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "ContextManager"
                ],
                "defx": [
                    "str",
                    "int",
                    "Callable[T,T]",
                    "Callable[[T],T]",
                    "T"
                ],
                "context": [
                    "ContextManager"
                ]
            }
        },
        "Kind._remove": {
            "name": "_remove",
            "location": 606,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "defx.view.View"
                ],
                "defx": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "context": [
                    "str",
                    "bool",
                    "List[Tuple[float,str]]",
                    "Dict[str,Any]",
                    "List[tuple[Union[float,str]]]",
                    "List[Dict[str,str]]",
                    "List[dict[str,str]]",
                    "List[Tuple[bool,str]]",
                    "List[tuple[Union[bool,str]]]"
                ]
            }
        },
        "Kind._rename": {
            "name": "_rename",
            "location": 634,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "str",
                    "int",
                    "bytes"
                ],
                "defx": [
                    "None",
                    "sublime.View",
                    "Optional[sublime.View]"
                ],
                "context": [
                    "Callable",
                    "str",
                    "Dict"
                ]
            }
        },
        "Kind._execute_command.parse_argument": {
            "name": "parse_argument",
            "location": 345,
            "return": [
                "str",
                "List[int]",
                "int",
                "defx.defx.Defx"
            ],
            "arguments": {
                "arg": [
                    "str",
                    "list",
                    "List[str]",
                    "dict"
                ]
            }
        }
    },
    "defx.nvim-master/rplugin/python3/defx/kind/__init__.py": {},
    "defx.nvim-master/rplugin/python3/defx/source/__init__.py": {},
    "defx.nvim-master/rplugin/python3/defx/source/file/list.py": {
        "Source.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "str",
                    "base.BaseVimClient",
                    "nevergrad.common.Union[pathlib.Path, str]",
                    "Callable"
                ]
            }
        },
        "Source.get_root_candidate": {
            "name": "get_root_candidate",
            "location": 31,
            "return": [
                "str",
                "bool",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "defx.contexContext",
                    "pathlib.Path",
                    "str",
                    "bool"
                ],
                "path": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "Source.gather_candidates": {
            "name": "gather_candidates",
            "location": 49,
            "return": [
                "str",
                "Optional[str]",
                "defx.defx.Defx",
                "bool"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "pathlib.Path"
                ],
                "path": [
                    "pathlib.Path",
                    "str"
                ]
            }
        }
    },
    "defx.nvim-master/rplugin/python3/defx/source/file/__init__.py": {
        "Source.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "str",
                    "Callable",
                    "base.BaseVimClient",
                    "nevergrad.common.Union[pathlib.Path,str]"
                ]
            }
        },
        "Source.get_root_candidate": {
            "name": "get_root_candidate",
            "location": 30,
            "return": [
                "Dict[Text,Union[str,bool]]",
                "Optional[str]",
                "bool",
                "str",
                "Any"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "bool",
                    "defx.contexContext",
                    "pathlib.Path"
                ],
                "path": [
                    "pathlib.Path",
                    "src.signatory.path.Path",
                    "cerulean.path.Path"
                ]
            }
        },
        "Source.gather_candidates": {
            "name": "gather_candidates",
            "location": 48,
            "return": [
                "List",
                "str",
                "List[dict[Text,]]",
                "bool",
                "OrderedDict",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "bool",
                    "List[str]",
                    "List[dict[str,Any]]",
                    "int",
                    "List[Dict[str,Any]]"
                ],
                "path": [
                    "pathlib.Path"
                ]
            }
        }
    },
    "defx.nvim-master/rplugin/python3/denite/source/defx/drive.py": {
        "Source.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "Dict[str,Any]",
                    "denite.util.Nvim",
                    "Callable[Any,Any,bool]",
                    "deoplete.util.Nvim",
                    "Callable[[Any,Any],bool]"
                ]
            }
        },
        "Source.on_init": {
            "name": "on_init",
            "location": 23,
            "return": [
                "None",
                "Dict[str,Dict[str,int]]",
                "str",
                "Dict[str,Any]",
                "base.ConfigOptions",
                "Union[tuple,list]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "bool",
                    "defx.contexContext",
                    "defx.view.View",
                    "denite.util.UserContext",
                    "defx.util.UserContext"
                ]
            }
        },
        "Source.gather_candidates": {
            "name": "gather_candidates",
            "location": 30,
            "return": [
                "List[dict[Text,Text]]",
                "int",
                "Optional[int]",
                "List[int]",
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "denite.util.UserContext",
                    "defx.util.UserContext",
                    "deoplete.util.UserContext"
                ]
            }
        }
    },
    "defx.nvim-master/rplugin/python3/denite/source/defx/history.py": {
        "Source.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "Dict[str,Any]",
                    "denite.util.Nvim",
                    "Callable[Any,Any,bool]",
                    "deoplete.util.Nvim",
                    "Callable[[Any,Any],bool]"
                ]
            }
        },
        "Source.on_init": {
            "name": "on_init",
            "location": 22,
            "return": [
                "None",
                "Dict[str,Dict[str,int]]",
                "str",
                "Dict[str,Any]",
                "base.ConfigOptions",
                "Union[tuple,list]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "bool",
                    "defx.contexContext",
                    "defx.view.View",
                    "denite.util.UserContext",
                    "defx.util.UserContext"
                ]
            }
        },
        "Source.gather_candidates": {
            "name": "gather_candidates",
            "location": 29,
            "return": [
                "List[dict[Text,Text]]",
                "Optional[str]",
                "bool",
                "str",
                "Callable[[str],str]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "denite.util.UserContext",
                    "defx.util.UserContext",
                    "deoplete.util.UserContext"
                ]
            }
        }
    },
    "defx.nvim-master/rplugin/python3/denite/source/defx/session.py": {
        "Source.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "Dict[str,Any]",
                    "denite.util.Nvim",
                    "Callable[Any,Any,bool]",
                    "deoplete.util.Nvim",
                    "Callable[[Any,Any],bool]"
                ]
            }
        },
        "Source.on_init": {
            "name": "on_init",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "bool",
                    "defx.contexContext",
                    "defx.view.View",
                    "denite.util.UserContext",
                    "defx.util.UserContext"
                ]
            }
        },
        "Source.gather_candidates": {
            "name": "gather_candidates",
            "location": 24,
            "return": [
                "List",
                "str",
                "List[dict[Text,str]]",
                "Tuple[Tuple[int,...]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "denite.util.UserContext",
                    "defx.util.UserContext",
                    "deoplete.util.UserContext"
                ]
            }
        },
        "Kind.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "Dict[str,Any]",
                    "denite.util.Nvim",
                    "Callable[Any,Any,bool]",
                    "deoplete.util.Nvim",
                    "Callable[[Any,Any],bool]"
                ]
            }
        },
        "Kind.action_delete": {
            "name": "action_delete",
            "location": 50,
            "return": [
                "defx.util.Candidates",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "List",
                    "denite.util.UserContext",
                    "defx.util.UserContext",
                    "sqlalchemy.engine.base.Connection",
                    "bool",
                    "IO[str]"
                ]
            }
        }
    },
    "defx.nvim-master/rplugin/python3/denite/source/defx/__init__.py": {},
    "defx.nvim-master/test/conftest.py": {},
    "defx.nvim-master/test/rplugin/python3/defx/test_defx.py": {
        "test_view": {
            "name": "test_view",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
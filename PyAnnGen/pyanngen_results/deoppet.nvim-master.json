{
    "deoppet.nvim-master/rplugin/python3/deoplete/source/deoppet.py": {
        "Source.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "deoplete.util.Nvim",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Source.gather_candidates": {
            "name": "gather_candidates",
            "location": 20,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "Dict[str, Any]",
                    "Iterable[Sequence[str]]",
                    "dict",
                    "List[int]"
                ]
            }
        }
    },
    "deoppet.nvim-master/rplugin/python3/deoppet/deoppet.py": {
        "Deoppet.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Deoppet.debug": {
            "name": "debug",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "str",
                    "int"
                ]
            }
        },
        "Deoppet.mapping": {
            "name": "mapping",
            "location": 37,
            "return": [
                "Exception",
                "List[str]",
                "Type",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "int",
                    "Callable"
                ],
                "cur_text": [
                    "str",
                    "bool",
                    "int",
                    "Callable"
                ],
                "col": [
                    "str",
                    "bool",
                    "int",
                    "Callable"
                ]
            }
        },
        "Deoppet.expand": {
            "name": "expand",
            "location": 40,
            "return": [
                "Dict[str, Any]",
                "Dict[str, int]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "trigger": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Deoppet.event": {
            "name": "event",
            "location": 44,
            "return": [
                "List[dict]",
                "List[List[int]]",
                "float",
                "Union[Dict, List]",
                "int",
                "Optional[Callable]",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "tuple",
                    "int",
                    "Union[List[str], Tuple[str], None]"
                ]
            }
        },
        "Deoppet._load_snippets": {
            "name": "_load_snippets",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "deoppet.nvim-master/rplugin/python3/deoppet/mapping.py": {
        "Mapping.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Mapping.debug": {
            "name": "debug",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "str",
                    "int"
                ]
            }
        },
        "Mapping.clear": {
            "name": "clear",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mapping.mapping": {
            "name": "mapping",
            "location": 51,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Iterable[Sequence[str]]",
                    "tuple",
                    "bool"
                ],
                "cur_text": [
                    "str"
                ],
                "col": [
                    "str"
                ]
            }
        },
        "Mapping.expand_current_trigger": {
            "name": "expand_current_trigger",
            "location": 68,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "self": [],
                "cur_text": [
                    "int",
                    "float"
                ],
                "col": [
                    "int",
                    "bool"
                ]
            }
        },
        "Mapping.expand": {
            "name": "expand",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trigger": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "prev_text": [
                    "str"
                ]
            }
        },
        "Mapping.expand_eval": {
            "name": "expand_eval",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ev": [
                    "int",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "Mapping.jump": {
            "name": "jump",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_forward": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "Mapping.cursor": {
            "name": "cursor",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "linenr": [
                    "int",
                    "bool",
                    "str",
                    "Dict[Tuple[str, str], int]"
                ],
                "col": [
                    "int",
                    "bool",
                    "str",
                    "Dict[Tuple[str, str], int]"
                ],
                "next_text": [
                    "bool",
                    "List[str]",
                    "str",
                    "int"
                ]
            }
        }
    },
    "deoppet.nvim-master/rplugin/python3/deoppet/parser.py": {
        "Parser.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "str",
                    "int",
                    "bool"
                ],
                "filename": [
                    "str"
                ],
                "snippets_dirs": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "Parser.debug": {
            "name": "debug",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "str",
                    "int"
                ]
            }
        },
        "Parser.error": {
            "name": "error",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "int",
                    "T",
                    "pynvim.Nvim"
                ]
            }
        },
        "Parser.parse": {
            "name": "parse",
            "location": 36,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "bool"
                ]
            }
        },
        "Parser.include_snippets": {
            "name": "include_snippets",
            "location": 98,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "base": [
                    "str",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "Parser.parse_one_snippet": {
            "name": "parse_one_snippet",
            "location": 110,
            "return": [
                "Dict[(str, Union[(list, str, Dict[(str, bool)])])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_text": {
            "name": "parse_text",
            "location": 161,
            "return": [
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "snippet": [
                    "list",
                    "Iterable[str]",
                    "Dict[str, Any]",
                    "List[List[Any]]",
                    "int"
                ],
                "base_indent": [
                    "str"
                ]
            }
        },
        "Parser.parse_tabstop": {
            "name": "parse_tabstop",
            "location": 203,
            "return": [
                "List[Union[(str, Dict[(str, Union[(int, str, _T1)])], _T0)]]"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str",
                    "int"
                ],
                "text_linenr": [
                    "int",
                    "str",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "Parser.parse_eval": {
            "name": "parse_eval",
            "location": 222,
            "return": [
                "List[Union[(str, Dict[(str, Union[(int, str, _T1)])], _T0)]]"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str",
                    "int"
                ],
                "text_linenr": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "deoppet.nvim-master/rplugin/python3/deoppet/util.py": {
        "globruntime": {
            "name": "globruntime",
            "location": 14,
            "return": [
                "list"
            ],
            "arguments": {
                "runtimepath": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "debug": {
            "name": "debug",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "vim": [
                    "pynvim.Nvim",
                    "neovim.Nvim",
                    "str",
                    "bool"
                ],
                "expr": [
                    "str"
                ]
            }
        },
        "len_bytes": {
            "name": "len_bytes",
            "location": 29,
            "return": [
                "int"
            ],
            "arguments": {
                "word": [
                    "str",
                    "int",
                    "bool",
                    "bytes"
                ]
            }
        }
    },
    "deoppet.nvim-master/rplugin/python3/deoppet/__init__.py": {
        "DeoppetHandlers.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "DeoppetHandlers.init_channel": {
            "name": "init_channel",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "DeoppetHandlers.expand": {
            "name": "expand",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "DeoppetHandlers.mapping": {
            "name": "mapping",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "DeoppetHandlers.event": {
            "name": "event",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        }
    },
    "deoppet.nvim-master/test/conftest.py": {},
    "deoppet.nvim-master/test/rplugin/python3/deoppet/test_parser.py": {
        "test_parse_success": {
            "name": "test_parse_success",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_error": {
            "name": "test_parse_error",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
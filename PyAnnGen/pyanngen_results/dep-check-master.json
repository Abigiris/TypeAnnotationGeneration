{
    "dep-check-master/setup.py": {},
    "dep-check-master/dep_check/checker.py": {
        "check_dependency": {
            "name": "check_dependency",
            "location": 26,
            "return": [
                "Set[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "parser": [
                    "Optional[\"Game\"]",
                    "models.Project",
                    "models.User",
                    "str"
                ],
                "dependency": [
                    "str",
                    "dict",
                    "models.Project",
                    "models.User"
                ],
                "rules": [
                    "dep_check.models.Rules",
                    "docker.models.networks.Network",
                    "app.models.Game"
                ]
            }
        },
        "check_import_from_dependency": {
            "name": "check_import_from_dependency",
            "location": 43,
            "return": [
                "Set[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "parser": [
                    "str"
                ],
                "dependency": [
                    "dict"
                ],
                "rules": [
                    "dep_check.models.Rules",
                    "ddionrails.data.models.Variable"
                ]
            }
        },
        "NotAllowedDependencyException.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dependency": [
                    "str",
                    "Sequence[str]",
                    "bool"
                ],
                "authorized_modules": [
                    "str",
                    "Sequence[str]"
                ]
            }
        }
    },
    "dep-check-master/dep_check/dependency_finder.py": {
        "get_dependencies": {
            "name": "get_dependencies",
            "location": 30,
            "return": [
                "List[str]",
                "str",
                "Tuple[Any, Any, Any]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "source_file": [
                    "dep_check.models.SourceFile",
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "Optional[type]"
                ],
                "parser": [
                    "dep_check.models.SourceFile",
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "Optional[type]"
                ]
            }
        },
        "get_import_from_dependencies": {
            "name": "get_import_from_dependencies",
            "location": 34,
            "return": [
                "list",
                "str",
                "float",
                "List[Dict]"
            ],
            "arguments": {
                "source_file": [
                    "dep_check.models.SourceFile",
                    "Optional[str]",
                    "str"
                ],
                "parser": [
                    "dep_check.models.SourceFile",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "IParser.wildcard_to_regex": {
            "name": "wildcard_to_regex",
            "location": 12,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "dep_check.models.ModuleWildcard",
                    "int",
                    "Callable"
                ]
            }
        },
        "IParser.find_dependencies": {
            "name": "find_dependencies",
            "location": 18,
            "return": [
                "dep_check.models.Dependencies",
                "None"
            ],
            "arguments": {
                "self": [],
                "source_file": [
                    "dep_check.models.SourceFile",
                    "List[str]",
                    "BinaryIO",
                    "Iterable[Optional[Any]]",
                    "bool"
                ]
            }
        },
        "IParser.find_import_from_dependencies": {
            "name": "find_import_from_dependencies",
            "location": 24,
            "return": [
                "dep_check.models.Dependencies",
                "None"
            ],
            "arguments": {
                "self": [],
                "source_file": [
                    "dep_check.models.SourceFile",
                    "List[str]",
                    "str",
                    "BinaryIO"
                ]
            }
        }
    },
    "dep-check-master/dep_check/main.py": {
        "main": {
            "name": "main",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "MainApp.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainApp.main": {
            "name": "main",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainApp.create_app_configuration": {
            "name": "create_app_configuration",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "MainApp.create_build_use_case": {
            "name": "create_build_use_case",
            "location": 134,
            "return": [
                "dep_check.use_cases.build.BuildConfigurationUC"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainApp.create_check_use_case": {
            "name": "create_check_use_case",
            "location": 143,
            "return": [
                "dep_check.use_cases.check.CheckDependenciesUC"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainApp.create_graph_use_case": {
            "name": "create_graph_use_case",
            "location": 155,
            "return": [
                "dep_check.use_cases.draw_graph.DrawGraphUC"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dep-check-master/dep_check/models.py": {
        "get_parent": {
            "name": "get_parent",
            "location": 38,
            "return": [
                "Module"
            ],
            "arguments": {
                "module": [
                    "str"
                ]
            }
        },
        "iter_all_modules": {
            "name": "iter_all_modules",
            "location": 45,
            "return": [
                "setiterator"
            ],
            "arguments": {
                "global_dep": [
                    "List[int]",
                    "list",
                    "Dict[str, Dict[str, int]]",
                    "str"
                ]
            }
        },
        "iter_all_modules.iter_": {
            "name": "iter_",
            "location": 46,
            "return": [
                "Iterator[Module]",
                "Generator",
                "Generator[Generator]"
            ],
            "arguments": {
                "global_dep": [
                    "dict",
                    "Dict[int, Dict[int, int]]",
                    "Dict[Tuple[int, ...], float]"
                ]
            }
        }
    },
    "dep-check-master/dep_check/__init__.py": {},
    "dep-check-master/dep_check/infra/file_system.py": {
        "_get_module_from_file_path": {
            "name": "_get_module_from_file_path",
            "location": 12,
            "return": [
                "dep_check.models.Module"
            ],
            "arguments": {
                "path": [
                    "str",
                    "List[str]",
                    "Sequence[str]",
                    "pathlib.Path",
                    "os.PathLike",
                    "norfs.fs.base.Path",
                    "path.Path"
                ],
                "separator": [
                    "str",
                    "norfs.fs.base.Path"
                ]
            }
        },
        "_change_dir": {
            "name": "_change_dir",
            "location": 21,
            "return": [
                "Iterator[None]",
                "Generator"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "pathlib2.Path",
                    "int"
                ]
            }
        },
        "_get_python_project_root": {
            "name": "_get_python_project_root",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "root_dir": [
                    "str",
                    "Union[str, pathlib.Path]",
                    "IO[Any]"
                ]
            }
        },
        "source_file_iterator": {
            "name": "source_file_iterator",
            "location": 50,
            "return": [
                "Generator[(dep_check.models.SourceFile, Any, None)]"
            ],
            "arguments": {
                "root_dir": [
                    "str"
                ]
            }
        }
    },
    "dep-check-master/dep_check/infra/io.py": {
        "read_graph_config": {
            "name": "read_graph_config",
            "location": 152,
            "return": [
                "int"
            ],
            "arguments": {
                "conf_path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "YamlConfigurationIO.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_path": [
                    "str",
                    "pathlib.Path",
                    "path.Path",
                    "pathlib2.Path"
                ]
            }
        },
        "YamlConfigurationIO.write": {
            "name": "write",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "configuration": [
                    "dep_check.use_cases.interfaces.Configuration",
                    "dict",
                    "Optional[int]",
                    "type"
                ]
            }
        },
        "YamlConfigurationIO.read": {
            "name": "read",
            "location": 48,
            "return": [
                "dep_check.use_cases.interfaces.Configuration"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportPrinter._error": {
            "name": "_error",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dep_errors": [
                    "str",
                    "bool",
                    "Exception"
                ]
            }
        },
        "ReportPrinter._warning": {
            "name": "_warning",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unused_rules": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "ReportPrinter.print_report": {
            "name": "print_report",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "errors": [
                    "str",
                    "T",
                    "Optional[str]",
                    "bool"
                ],
                "unused_rules": [
                    "List[Tuple[Any, int, int, str, str]]",
                    "str"
                ],
                "nb_files": [
                    "int",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Graph.__init__": {
            "name": "__init__",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "svg_file_name": [
                    "str"
                ],
                "graph_config": [
                    "None",
                    "str",
                    "Optional[Dict]",
                    "Dict[str,str]"
                ]
            }
        },
        "GraphDrawer.__init__": {
            "name": "__init__",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "str",
                    "int"
                ]
            }
        },
        "GraphDrawer._iter_layer_modules": {
            "name": "_iter_layer_modules",
            "location": 201,
            "return": [
                "Generator[(Tuple[(Any, list)], Any, None)]"
            ],
            "arguments": {
                "self": [],
                "global_dep": [
                    "dict",
                    "str",
                    "bool",
                    "audio_profiling.models.AudioPage",
                    "Callable[..., Awaitable]"
                ]
            }
        },
        "GraphDrawer._write_dot": {
            "name": "_write_dot",
            "location": 212,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "global_dep": [
                    "str"
                ]
            }
        },
        "GraphDrawer._write_svg": {
            "name": "_write_svg",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphDrawer.write": {
            "name": "write",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "global_dep": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        }
    },
    "dep-check-master/dep_check/infra/python_parser.py": {
        "_ImportVisitor.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "current_module": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "_ImportVisitor.dependencies": {
            "name": "dependencies",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ImportVisitor.visit": {
            "name": "visit",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "_ImportFromVisitor.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "current_module": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "_ImportFromVisitor.dependencies": {
            "name": "dependencies",
            "location": 55,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ImportFromVisitor.visit": {
            "name": "visit",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "PythonParser.wildcard_to_regex": {
            "name": "wildcard_to_regex",
            "location": 86,
            "return": [
                "bool",
                "int",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "dep_check.models.ModuleWildcard",
                    "str",
                    "Union[int, str]",
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "PythonParser.find_dependencies": {
            "name": "find_dependencies",
            "location": 97,
            "return": [
                "set"
            ],
            "arguments": {
                "self": [],
                "source_file": [
                    "Tuple[int, int]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "PythonParser.find_import_from_dependencies": {
            "name": "find_import_from_dependencies",
            "location": 106,
            "return": [
                "set"
            ],
            "arguments": {
                "self": [],
                "source_file": [
                    "Tuple[int, int]",
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "dep-check-master/dep_check/infra/std_lib_filter.py": {
        "StdLibSimpleFilter.filter": {
            "name": "filter",
            "location": 334,
            "return": [
                "str",
                "Tuple[int, int]",
                "bool",
                "Sequence['cirq.Qid']",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "dependencies": [
                    "dep_check.models.Dependencies",
                    "str"
                ]
            }
        }
    },
    "dep-check-master/dep_check/infra/__init__.py": {},
    "dep-check-master/dep_check/use_cases/app_configuration.py": {
        "AppConfigurationSingleton.define_app_configuration": {
            "name": "define_app_configuration",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bytes",
                    "List[str]",
                    "T"
                ],
                "configuration": [
                    "List[int]",
                    "int",
                    "dict",
                    "str"
                ]
            }
        },
        "AppConfigurationSingleton.get_instance": {
            "name": "get_instance",
            "location": 46,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[int]",
                    "Type['DataclassT']",
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "dep-check-master/dep_check/use_cases/build.py": {
        "IConfigurationWriter.write": {
            "name": "write",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "configuration": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "BuildConfigurationUC.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "printer": [
                    "dict",
                    "str",
                    "Sequence[str]"
                ],
                "parser": [
                    "str",
                    "Dict[str, str]",
                    "Iterator[dep_check.models.SourceFile]"
                ],
                "source_files": [
                    "str",
                    "Optional[str]",
                    "Iterator[dep_check.models.SourceFile]",
                    "Dict[str, str]"
                ]
            }
        },
        "BuildConfigurationUC.run": {
            "name": "run",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dep-check-master/dep_check/use_cases/check.py": {
        "IReportPrinter._error": {
            "name": "_error",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dep_errors": [
                    "bool"
                ]
            }
        },
        "IReportPrinter._warning": {
            "name": "_warning",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unused_rules": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "IReportPrinter.print_report": {
            "name": "print_report",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "errors": [
                    "int",
                    "dep_check.models.Rules",
                    "bool",
                    "List[Tuple[bytes, bytes]]",
                    "list"
                ],
                "unused_rules": [
                    "int",
                    "dep_check.models.Rules",
                    "bool",
                    "List[Tuple[bytes, bytes]]",
                    "list"
                ],
                "nb_files": [
                    "int",
                    "dep_check.models.Rules",
                    "bool",
                    "List[Tuple[bytes, bytes]]",
                    "list"
                ]
            }
        },
        "CheckDependenciesUC.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "configuration": [
                    "bool",
                    "List[float]",
                    "int"
                ],
                "report_printer": [
                    "bool",
                    "List[float]",
                    "int"
                ],
                "parser": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "source_files": [
                    "Optional[str]",
                    "IO"
                ]
            }
        },
        "CheckDependenciesUC._get_rules": {
            "name": "_get_rules",
            "location": 91,
            "return": [
                "Set[Tuple[(dep_check.models.ModuleWildcard, Any)]]"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "str"
                ]
            }
        },
        "CheckDependenciesUC._iter_error": {
            "name": "_iter_error",
            "location": 107,
            "return": [
                "Generator[(DependencyError, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "source_file": [
                    "str",
                    "list"
                ]
            }
        },
        "CheckDependenciesUC.run": {
            "name": "run",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dep-check-master/dep_check/use_cases/draw_graph.py": {
        "_fold_dep": {
            "name": "_fold_dep",
            "location": 32,
            "return": [
                "collections.defaultdict"
            ],
            "arguments": {
                "global_dep": [
                    "dep_check.models.GlobalDependencies",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, float]]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Dict[str, Any]]"
                ],
                "fold_module": [
                    "str",
                    "int",
                    "List[int]"
                ]
            }
        },
        "IGraphDrawer.write": {
            "name": "write",
            "location": 26,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "global_dep": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "DrawGraphUC.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "drawer": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "parser": [
                    "str",
                    "Dict[str, str]"
                ],
                "source_files": [
                    "str",
                    "Iterator[dep_check.models.SourceFile]"
                ],
                "config": [
                    "None",
                    "Callable",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "DrawGraphUC._hide": {
            "name": "_hide",
            "location": 66,
            "return": [
                "Union[(Dict[(Any, set)], _T0)]"
            ],
            "arguments": {
                "self": [],
                "global_dep": [
                    "dict",
                    "Dict[Tuple[int, ...], float]",
                    "dep_check.models.GlobalDependencies"
                ]
            }
        },
        "DrawGraphUC.run": {
            "name": "run",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dep-check-master/dep_check/use_cases/interfaces.py": {
        "IStdLibFilter.filter": {
            "name": "filter",
            "location": 27,
            "return": [
                "dep_check.models.Dependencies",
                "None"
            ],
            "arguments": {
                "self": [],
                "dependencies": [
                    "str",
                    "bool",
                    "list"
                ]
            }
        }
    },
    "dep-check-master/dep_check/use_cases/__init__.py": {},
    "dep-check-master/tests/conftest.py": {
        "setup_application_config": {
            "name": "setup_application_config",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "source_files": {
            "name": "source_files",
            "location": 25,
            "return": [
                "Tuple",
                "str",
                "Dict[str,Dict[str,Any]]"
            ],
            "arguments": {}
        }
    },
    "dep-check-master/tests/fakefile.py": {},
    "dep-check-master/tests/test_app_config.py": {
        "test_app_configuration_already_set": {
            "name": "test_app_configuration_already_set",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dep-check-master/tests/test_build.py": {
        "test_empty": {
            "name": "test_empty",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_nominal": {
            "name": "test_nominal",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "source_files": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "dep-check-master/tests/test_check.py": {
        "test_empty_rules": {
            "name": "test_empty_rules",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "source_files": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_passing_rules": {
            "name": "test_passing_rules",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "source_files": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_error_on_unused": {
            "name": "test_error_on_unused",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "source_files": [
                    "str"
                ]
            }
        },
        "test_not_passing_rules": {
            "name": "test_not_passing_rules",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "source_files": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_passing_rules_with_import_from": {
            "name": "test_passing_rules_with_import_from",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_not_passing_rules_with_import_from": {
            "name": "test_not_passing_rules_with_import_from",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dep-check-master/tests/test_checker.py": {
        "test_empty": {
            "name": "test_empty",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_passing_case": {
            "name": "test_passing_case",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_not_passing_case": {
            "name": "test_not_passing_case",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dep-check-master/tests/test_draw_graph.py": {
        "test_empty_source_files": {
            "name": "test_empty_source_files",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_nominal": {
            "name": "test_nominal",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "source_files": []
            }
        },
        "test_dot": {
            "name": "test_dot",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_not_svg_with_dot": {
            "name": "test_not_svg_with_dot",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_method": [
                    "unittesmock.Mock"
                ]
            }
        },
        "test_fold_dep_empty_dict": {
            "name": "test_fold_dep_empty_dict",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fold_dep_empty_module": {
            "name": "test_fold_dep_empty_module",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fold_dep": {
            "name": "test_fold_dep",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fold_module": {
            "name": "test_fold_module",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "source_files": [
                    "str",
                    "list"
                ]
            }
        },
        "test_hide_empty_config": {
            "name": "test_hide_empty_config",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_method": [
                    "unittesmock.Mock",
                    "str"
                ],
                "source_files": []
            }
        },
        "test_hide_empty_dict": {
            "name": "test_hide_empty_dict",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_method": [
                    "unittesmock.Mock"
                ]
            }
        },
        "test_hide_nominal": {
            "name": "test_hide_nominal",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "source_files": [
                    "str"
                ]
            }
        },
        "test_pop_empty_module_from_dependencies": {
            "name": "test_pop_empty_module_from_dependencies",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "source_files": [
                    "str",
                    "list"
                ]
            }
        }
    },
    "dep-check-master/tests/test_models.py": {
        "TestGetParent.test_empty": {
            "name": "test_empty",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestGetParent.test_simple_module": {
            "name": "test_simple_module",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestGetParent.test_nested_module": {
            "name": "test_nested_module",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestGetParent.test_long_nested_module": {
            "name": "test_long_nested_module",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestIterAllModules.test_empty": {
            "name": "test_empty",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestIterAllModules.test_nominal": {
            "name": "test_nominal",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dep-check-master/tests/test_parser.py": {
        "TestGetDependencies.test_empty": {
            "name": "test_empty",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestGetDependencies.test_simple_case": {
            "name": "test_simple_case",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestGetDependencies.test_local_import_case": {
            "name": "test_local_import_case",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestGetImportFromDependencies.test_empty": {
            "name": "test_empty",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestGetImportFromDependencies.test_simple_case": {
            "name": "test_simple_case",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestGetImportFromDependencies.test_local_import_case": {
            "name": "test_local_import_case",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestGetImportFromDependencies.test_multi_imports_after_from": {
            "name": "test_multi_imports_after_from",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestRegexToWildcard.test_empty": {
            "name": "test_empty",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestRegexToWildcard.test_simple_module": {
            "name": "test_simple_module",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestRegexToWildcard.test_nested_module": {
            "name": "test_nested_module",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestRegexToWildcard.test_quesiton_mark": {
            "name": "test_quesiton_mark",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestRegexToWildcard.test_asterisk": {
            "name": "test_asterisk",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestRegexToWildcard.test_percentage": {
            "name": "test_percentage",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dep-check-master/tests/__init__.py": {}
}
{
    "devCenter-master/index.py": {},
    "devCenter-master/setup.py": {},
    "devCenter-master/devcenter/aes_cipher.py": {
        "AESCipher.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "AESCipher._unpad": {
            "name": "_unpad",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "AESCipher._pad": {
            "name": "_pad",
            "location": 21,
            "return": [
                "str",
                "bytes",
                "IO"
            ],
            "arguments": {
                "s": [
                    "bytes",
                    "int",
                    "str",
                    "Union[str, bytes]"
                ]
            }
        },
        "AESCipher.encrypt": {
            "name": "encrypt",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "str",
                    "bytearray"
                ]
            }
        },
        "AESCipher.decrypt": {
            "name": "decrypt",
            "location": 32,
            "return": [
                "bool",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "enc": [
                    "int",
                    "float",
                    "Optional[int]",
                    "None"
                ]
            }
        }
    },
    "devCenter-master/devcenter/automation_bot.py": {
        "AutomationBot.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutomationBot.update_jira": {
            "name": "update_jira",
            "location": 37,
            "return": [
                "Dict[Text,Union[bool,Text]]",
                "Dict[str,Any]",
                "str",
                "Dict[Text,Union[bool,str]]",
                "Dict",
                "Dict[str,str]",
                "int",
                "Dict[str,Dict[str,Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutomationBot.beta_week_stats": {
            "name": "beta_week_stats",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutomationBot.check_for_pings": {
            "name": "check_for_pings",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jira_ticket": [
                    "Tuple",
                    "str",
                    "Dict[str,List[str]]"
                ]
            }
        },
        "AutomationBot.ping_new_ticket": {
            "name": "ping_new_ticket",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jira_ticket": [
                    "FrozenSet[int]",
                    "int",
                    "dict"
                ]
            }
        },
        "AutomationBot.ping_dev_center": {
            "name": "ping_dev_center",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "float",
                    "Union[int,float]",
                    "bool"
                ],
                "summary": [
                    "str",
                    "int",
                    "float",
                    "Union[int,float]",
                    "bool"
                ],
                "username": [
                    "str",
                    "int",
                    "float",
                    "Union[int,float]",
                    "bool"
                ],
                "pingType": [
                    "str",
                    "int",
                    "float",
                    "Union[int,float]",
                    "bool"
                ]
            }
        },
        "AutomationBot.check_for_status_pings": {
            "name": "check_for_status_pings",
            "location": 182,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "jira_ticket": [
                    "Optional[List[str]]",
                    "List[str]",
                    "List[Dict]",
                    "List[dict]"
                ]
            }
        },
        "AutomationBot.ping_jira_status": {
            "name": "ping_jira_status",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msrp": [
                    "Callable[,None]",
                    "bool",
                    "str",
                    "int"
                ],
                "ping_type": [
                    "str",
                    "Dict[str,str]",
                    "Dict"
                ],
                "username": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "None"
                ],
                "key": [
                    "str",
                    "int"
                ],
                "summary": [
                    "Callable[,None]",
                    "bool",
                    "str",
                    "int"
                ],
                "ping_message": [
                    "Callable[,None]",
                    "bool",
                    "str",
                    "int"
                ],
                "sprint": [
                    "Text",
                    "Callable[,None]",
                    "bool",
                    "int",
                    "str"
                ],
                "epic_link": [
                    "Text",
                    "Callable[,None]",
                    "bool",
                    "int",
                    "str"
                ]
            }
        }
    },
    "devCenter-master/devcenter/const.py": {},
    "devCenter-master/devcenter/devcenter_routes.py": {
        "define_routes": {
            "name": "define_routes",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ],
                "socketio": [
                    "flask.Flask"
                ]
            }
        },
        "define_routes.socket_tickets": {
            "name": "socket_tickets",
            "location": 36,
            "return": [
                "Response",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "define_routes.encrypt_token": {
            "name": "encrypt_token",
            "location": 43,
            "return": [
                "Response",
                "Dict",
                "int",
                "bytes",
                "List[str]",
                "Optional[Dict[str,Any]]",
                "Dict[str,str]"
            ],
            "arguments": {}
        },
        "define_routes.get_cred_hash": {
            "name": "get_cred_hash",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "define_routes.check_status": {
            "name": "check_status",
            "location": 74,
            "return": [
                "Response",
                "bool",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                "str"
            ],
            "arguments": {
                "response": [
                    "requests.Response",
                    "flask.Response",
                    "requests.models.Response",
                    "Optional[dict]",
                    "requests.PreparedRequest",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "devCenter-master/devcenter/devcenter_server.py": {
        "start_server": {
            "name": "start_server",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "devCenter-master/devcenter/reminders.py": {
        "reminders.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "reminders.get_now": {
            "name": "get_now",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "reminders.is_friday": {
            "name": "is_friday",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "reminders.is_weekday": {
            "name": "is_weekday",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "reminders.is_nine": {
            "name": "is_nine",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "reminders.is_four": {
            "name": "is_four",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "reminders.is_midnight": {
            "name": "is_midnight",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "reminders._is_hour": {
            "name": "_is_hour",
            "location": 49,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "hour": [
                    "int",
                    "str",
                    "List[float]",
                    "Union[int,float]",
                    "float"
                ],
                "minute": [
                    "float"
                ]
            }
        },
        "reminders.is_timesheet_four": {
            "name": "is_timesheet_four",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "reminders.is_timesheet_nine": {
            "name": "is_timesheet_nine",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "reminders.calc_messages": {
            "name": "calc_messages",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devCenter-master/devcenter/server_utils.py": {
        "generate_cred_hash": {
            "name": "generate_cred_hash",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "username": [
                    "Text",
                    "str",
                    "Optional[str]"
                ],
                "password": [
                    "str",
                    "Text"
                ]
            }
        },
        "row2dict": {
            "name": "row2dict",
            "location": 19,
            "return": [
                "Dict[(Any, str)]"
            ],
            "arguments": {
                "row": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[int]"
                ]
            }
        },
        "get_branch_name": {
            "name": "get_branch_name",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "username": [
                    "Text",
                    "bool",
                    "List[str]",
                    "str",
                    "Dict",
                    "Iterable[str]",
                    "int"
                ],
                "msrp": [
                    "Text",
                    "str",
                    "List"
                ],
                "summary": [
                    "Text",
                    "bool",
                    "str",
                    "Dict[str,int]",
                    "int"
                ]
            }
        },
        "build_commit_message": {
            "name": "build_commit_message",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "key": [
                    "Text",
                    "str",
                    "Iterable",
                    "int"
                ],
                "msrp": [
                    "Text",
                    "str",
                    "Iterable",
                    "int"
                ],
                "summary": [
                    "Text",
                    "str",
                    "KT",
                    "T"
                ],
                "epic_link": [
                    "Text",
                    "bytes",
                    "str",
                    "int",
                    "bool",
                    "Optional[str]",
                    "Dict"
                ]
            }
        },
        "verify_parameters": {
            "name": "verify_parameters",
            "location": 66,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "required": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "missing_parameters": {
            "name": "missing_parameters",
            "location": 80,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "params": [
                    "Dict",
                    "None",
                    "Type",
                    "bool",
                    "Optional[str]",
                    "str"
                ],
                "required": [
                    "Dict[str,Any]",
                    "str",
                    "None",
                    "Dict"
                ]
            }
        },
        "verify_parameters.decorator": {
            "name": "decorator",
            "location": 69,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "function": [
                    "Callable",
                    "bool",
                    "Callable[[T], Any]"
                ]
            }
        },
        "verify_parameters.decorator.wrapper": {
            "name": "wrapper",
            "location": 70,
            "return": [
                "Dict[Text,Union[Text,bool]]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "List[str]"
                ]
            }
        }
    },
    "devCenter-master/devcenter/__init__.py": {},
    "devCenter-master/devcenter/__main__.py": {
        "start_cron": {
            "name": "start_cron",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "devCenter-master/devcenter/apis/order.py": {
        "Order.get_orders": {
            "name": "get_orders",
            "location": 10,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Order.get_atx": {
            "name": "get_atx",
            "location": 14,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Order.get_json": {
            "name": "get_json",
            "location": 18,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "str"
                ],
                "file_type": [
                    "str"
                ]
            }
        }
    },
    "devCenter-master/devcenter/apis/__init__.py": {},
    "devCenter-master/devcenter/atlassian/api.py": {
        "AtlassianApi.get": {
            "name": "get",
            "location": 11,
            "return": [
                "str",
                "int",
                "Dict[Text,Union[bool,Text]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Dict[str,str]",
                    "Optional[dict]",
                    "Dict",
                    "requests.Session",
                    "None"
                ],
                "cred_hash": [
                    "str",
                    "Text"
                ],
                "cookies": [
                    "str",
                    "Dict",
                    "None",
                    "Dict[str,Any]"
                ]
            }
        },
        "AtlassianApi.post": {
            "name": "post",
            "location": 23,
            "return": [
                "str",
                "Dict[str,str]",
                "Dict[Text,Union[bool,Text]]",
                "int",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "Dict",
                    "str",
                    "Dict[str,Any]",
                    "bool",
                    "bytes",
                    "Optional[requests.Response]",
                    "None"
                ],
                "data": [
                    "Text",
                    "str",
                    "int"
                ],
                "cred_hash": [
                    "Text",
                    "Optional[bytes]",
                    "Set[int]",
                    "int",
                    "Dict[int,dict]",
                    "str"
                ]
            }
        },
        "AtlassianApi.put": {
            "name": "put",
            "location": 37,
            "return": [
                "str",
                "Dict[Text,Union[bool,Text]]",
                "bool",
                "Callable",
                "Dict",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "Dict[str,Any]",
                    "Dict",
                    "List[str]",
                    "List[list[str]]",
                    "List[List[str]]",
                    "Task"
                ],
                "data": [
                    "Text",
                    "str",
                    "Dict[str,str]",
                    "Callable[[dict],None]",
                    "Optional[float]",
                    "Dict",
                    "int"
                ],
                "cred_hash": [
                    "Text",
                    "str",
                    "int",
                    "Dict[int,dict]",
                    "bool",
                    "Optional[float]",
                    "Set[int]"
                ]
            }
        },
        "AtlassianApi.delete": {
            "name": "delete",
            "location": 51,
            "return": [
                "str",
                "Dict[Text,Union[bool,Text]]",
                "int",
                "Optional[str]",
                "Tuple"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "Optional[bool]",
                    "bool",
                    "Sized",
                    "str",
                    "None",
                    "T"
                ],
                "cred_hash": [
                    "Text",
                    "str",
                    "Dict"
                ]
            }
        },
        "AtlassianApi.post_json": {
            "name": "post_json",
            "location": 62,
            "return": [
                "str",
                "Dict[str,str]",
                "Dict[Text,Union[bool,Text]]",
                "int",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Dict[str,object]",
                    "Dict",
                    "bytes",
                    "requests.models.Response",
                    "None",
                    "Optional[bytes]",
                    "Optional[str]"
                ],
                "json_data": [
                    "str",
                    "Dict[str,object]",
                    "Dict",
                    "bytes",
                    "requests.models.Response",
                    "None",
                    "Optional[bytes]",
                    "Optional[str]"
                ],
                "cred_hash": [
                    "Text",
                    "str",
                    "bytes"
                ]
            }
        },
        "AtlassianApi.put_json": {
            "name": "put_json",
            "location": 74,
            "return": [
                "str",
                "Dict[Text,Union[bool,Text]]",
                "bool",
                "Callable",
                "Dict",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Sequence[str]",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "json_data": [
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Sequence[str]",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "cred_hash": [
                    "Text",
                    "str",
                    "bytes",
                    "Dict",
                    "int",
                    "bool"
                ]
            }
        },
        "AtlassianApi.process_json": {
            "name": "process_json",
            "location": 87,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "cls": [
                    "Dict",
                    "Optional[dict]",
                    "int",
                    "None"
                ],
                "response": [
                    "bytes",
                    "float",
                    "requests.Response"
                ]
            }
        },
        "AtlassianApi.process_response": {
            "name": "process_response",
            "location": 98,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Dict[str, Any]",
                    "Dict[str, float]",
                    "str"
                ],
                "response": [
                    "Dict",
                    "requests.Response"
                ]
            }
        }
    },
    "devCenter-master/devcenter/atlassian/__init__.py": {},
    "devCenter-master/devcenter/chat/api.py": {
        "ChatAPI.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChatAPI.send_message": {
            "name": "send_message",
            "location": 32,
            "return": [
                "Dict[(str, Union[(bool, str)])]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Dict[str,Any]",
                    "bytes",
                    "Dict"
                ],
                "username": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "ChatAPI.send_meeting_message": {
            "name": "send_meeting_message",
            "location": 46,
            "return": [
                "Dict[(str, Union[(bool, str)])]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Dict[str,Any]",
                    "bytes",
                    "Dict"
                ],
                "chatroom": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ChatAPI._process_response": {
            "name": "_process_response",
            "location": 59,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "Dict",
                    "Dict[str,Any]",
                    "Dict[str,Union[str,Any]]"
                ]
            }
        }
    },
    "devCenter-master/devcenter/chat/chat.py": {
        "Chat.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Chat.send_dev_center_ticket_info": {
            "name": "send_dev_center_ticket_info",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "List[int]",
                    "Callable"
                ],
                "summary": [
                    "str",
                    "bytes",
                    "List[int]",
                    "Callable"
                ],
                "username": [
                    "str",
                    "bytes",
                    "List[int]",
                    "Callable"
                ],
                "ping_message": [
                    "str",
                    "bytes",
                    "List[int]",
                    "Callable"
                ]
            }
        }
    },
    "devCenter-master/devcenter/chat/misc.py": {
        "ChatMisc.get_estimate_string": {
            "name": "get_estimate_string",
            "location": 16,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "story_point": [
                    "int",
                    "bytes",
                    "Optional[BaseException]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "ChatMisc.build_message": {
            "name": "build_message",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "Dict[str,Any]",
                    "Dict"
                ],
                "commit_message": [
                    "Dict",
                    "bool"
                ],
                "jira_message": [
                    "bool",
                    "bytes",
                    "str",
                    "List[List[Any]]"
                ],
                "branch_message": [
                    "bool",
                    "bytes",
                    "str",
                    "List[List[Any]]"
                ],
                "sprint_message": [
                    "bool",
                    "bytes",
                    "str",
                    "List[List[Any]]"
                ],
                "msrp_message": [
                    "bool",
                    "bytes",
                    "str",
                    "List[List[Any]]"
                ],
                "summary_message": [
                    "bool",
                    "bytes",
                    "str",
                    "List[List[Any]]"
                ],
                "crucible_title_message": [
                    "bool",
                    "bytes",
                    "str",
                    "List[List[Any]]"
                ],
                "estimate_message": [
                    "bool",
                    "bytes",
                    "str",
                    "List[List[Any]]"
                ]
            }
        },
        "ChatMisc.send_new_ticket": {
            "name": "send_new_ticket",
            "location": 193,
            "return": [
                "str",
                "Iterable[T]",
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Dict[str,Any]",
                    "bool",
                    "Mapping[str,Any]",
                    "Mapping",
                    "str",
                    "List[Dict[str,str]]",
                    "List[dict[str,str]]",
                    "Union[int,float]",
                    "float"
                ],
                "msrp": [
                    "str",
                    "Callable",
                    "bytes",
                    "bool"
                ],
                "summary": [
                    "str",
                    "Callable",
                    "bytes",
                    "bool"
                ],
                "username": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Dict",
                    "Set[str]",
                    "None",
                    "Optional[bool]",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]"
                ],
                "story_point": [
                    "float",
                    "str",
                    "int",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "pcr_estimate": [
                    "Dict[str,Any]",
                    "bool",
                    "Mapping[str,Any]",
                    "Mapping",
                    "str",
                    "List[Dict[str,str]]",
                    "List[dict[str,str]]",
                    "Union[int,float]",
                    "float"
                ],
                "epic_link": [
                    "Dict[str,Any]",
                    "bool",
                    "Mapping[str,Any]",
                    "Mapping",
                    "str",
                    "List[Dict[str,str]]",
                    "List[dict[str,str]]",
                    "Union[int,float]",
                    "float"
                ]
            }
        },
        "ChatMisc.send_merge_needed": {
            "name": "send_merge_needed",
            "location": 219,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "bytes"
                ],
                "msrp": [
                    "str",
                    "Sequence[Any]",
                    "bool",
                    "List[Dict[str,str]]",
                    "List[dict[str,str]]",
                    "Optional[int]",
                    "None"
                ],
                "summary": [
                    "str",
                    "Sequence[Any]",
                    "bool",
                    "List[Dict[str,str]]",
                    "List[dict[str,str]]",
                    "Optional[int]",
                    "None"
                ],
                "username": [
                    "str",
                    "bool"
                ],
                "sprint": [
                    "str",
                    "bytes",
                    "Tuple[str,str]",
                    "AnyStr",
                    "Optional[Callable]",
                    "int",
                    "Tuple[int,int]"
                ],
                "epic_link": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "ChatMisc.send_merge_alert": {
            "name": "send_merge_alert",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "int",
                    "Callable[[bytes],bytes]",
                    "Callable[bytes,bytes]"
                ],
                "msrp": [
                    "str",
                    "Union[float,int]",
                    "float",
                    "int"
                ],
                "sprint": [
                    "str",
                    "bytes"
                ],
                "username": [
                    "str",
                    "int",
                    "List[int]",
                    "bytes",
                    "None",
                    "bool",
                    "Callable[bytes,bytes]",
                    "Optional[int]",
                    "Callable[[bytes],bytes]"
                ],
                "repos_merged": [
                    "bytes",
                    "int",
                    "bool",
                    "Callable[[T], T]",
                    "Tuple[bool]"
                ],
                "summary": [
                    "str",
                    "bytes",
                    "int",
                    "Callable[[bytes],bytes]",
                    "Callable[bytes,bytes]"
                ]
            }
        },
        "ChatMisc.beta_statistics": {
            "name": "beta_statistics",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uct": [
                    "bool",
                    "str",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "pcr": [
                    "bool",
                    "str",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "qa": [
                    "bool",
                    "str",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "cr": [
                    "bool",
                    "str",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "beta": [
                    "bool",
                    "str",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "ChatMisc.send_jira_update": {
            "name": "send_jira_update",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[float,None,int]",
                    "float",
                    "bool",
                    "None",
                    "Optional[float]",
                    "int",
                    "Union[str,dict]",
                    "Dict"
                ],
                "msrp": [
                    "str",
                    "Union[float,None,int]",
                    "float",
                    "bool",
                    "None",
                    "Optional[float]",
                    "int",
                    "Union[str,dict]",
                    "Dict"
                ],
                "summary": [
                    "str",
                    "Union[float,None,int]",
                    "float",
                    "bool",
                    "None",
                    "Optional[float]",
                    "int",
                    "Union[str,dict]",
                    "Dict"
                ],
                "username": [
                    "str",
                    "Union[float,None,int]",
                    "float",
                    "bool",
                    "None",
                    "Optional[float]",
                    "int",
                    "Union[str,dict]",
                    "Dict"
                ],
                "ping_message": [
                    "str",
                    "Callable",
                    "Union[float,None,int]",
                    "float",
                    "bool",
                    "None",
                    "Optional[float]",
                    "int"
                ],
                "sprint": [
                    "str",
                    "Union[float,None,int]",
                    "float",
                    "bool",
                    "None",
                    "Optional[float]",
                    "int"
                ],
                "epic_link": [
                    "str",
                    "Union[float,None,int]",
                    "float",
                    "bool",
                    "None",
                    "Optional[float]",
                    "int"
                ]
            }
        },
        "ChatMisc._send_fail": {
            "name": "_send_fail",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ],
                "msrp": [
                    "str",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]",
                    "Optional[str]",
                    "None"
                ],
                "summary": [
                    "str",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]",
                    "Optional[str]",
                    "None"
                ],
                "username": [
                    "str",
                    "Callable",
                    "Optional[str]",
                    "None"
                ],
                "type_comp": [
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "ChatMisc.send_pcr_comments": {
            "name": "send_pcr_comments",
            "location": 316,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "fromName": [
                    "str",
                    "bool",
                    "List[dict]"
                ],
                "toUsername": [
                    "str",
                    "List[str]",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "pullLinks": [
                    "str",
                    "int",
                    "bool"
                ],
                "key": [
                    "str",
                    "bool",
                    "List[dict]"
                ]
            }
        }
    },
    "devCenter-master/devcenter/chat/pcr_qa.py": {
        "ChatPcrQa.send_pcr_needed": {
            "name": "send_pcr_needed",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "pcr_estimate": [
                    "int",
                    "Dict",
                    "Mapping",
                    "Mapping[str,Any]",
                    "bool"
                ],
                "key": [
                    "bytes",
                    "str",
                    "Union[bytes,str]"
                ],
                "msrp": [
                    "bytes",
                    "str",
                    "Union[bytes,str]"
                ],
                "sprint": [
                    "bytes",
                    "str",
                    "Union[bytes,str]"
                ],
                "label": [
                    "bytes",
                    "str",
                    "Union[bytes,str]"
                ],
                "summary": [
                    "bytes",
                    "str",
                    "Union[bytes,str]"
                ],
                "override": [
                    "bool",
                    "bytes",
                    "Union[bytes,str]",
                    "str"
                ]
            }
        },
        "ChatPcrQa.send_qa_needed": {
            "name": "send_qa_needed",
            "location": 18,
            "return": [
                "Dict[Text,bool]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int"
                ],
                "sprint": [
                    "str",
                    "int"
                ],
                "msrp": [
                    "str",
                    "int"
                ],
                "label": [
                    "str",
                    "int"
                ],
                "summary": [
                    "str",
                    "int"
                ],
                "override": [
                    "bool",
                    "bytes",
                    "List[Optional[str]]",
                    "str",
                    "Optional[List[Any]]"
                ]
            }
        },
        "ChatPcrQa.send_action_needed_ping": {
            "name": "send_action_needed_ping",
            "location": 27,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Dict"
                ],
                "sprint": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "bool"
                ],
                "key": [
                    "str",
                    "int"
                ],
                "msrp": [
                    "int",
                    "str",
                    "Dict",
                    "bool",
                    "bytes",
                    "Union[str,bytes]"
                ],
                "override": [
                    "int",
                    "Dict",
                    "Mapping",
                    "Mapping[str,Any]",
                    "bool"
                ],
                "label": [
                    "str",
                    "bytes",
                    "int",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "bool",
                    "Optional[int]",
                    "float"
                ],
                "summary": [
                    "Text",
                    "int",
                    "Dict",
                    "Mapping[str,Any]",
                    "bool"
                ]
            }
        }
    },
    "devCenter-master/devcenter/chat/__init__.py": {},
    "devCenter-master/devcenter/codecloud/api.py": {
        "CodeCloudApi.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodeCloudApi.get_session": {
            "name": "get_session",
            "location": 26,
            "return": [
                "Dict[(str, Union[(bool, requests.sessions.Session)])]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "cred_hash": [
                    "Text",
                    "str",
                    "requests.Session",
                    "Union[str,Iterable[str]]"
                ]
            }
        }
    },
    "devCenter-master/devcenter/codecloud/codecloud.py": {},
    "devCenter-master/devcenter/codecloud/comments.py": {
        "Comments.add_comment_to_pull_request": {
            "name": "add_comment_to_pull_request",
            "location": 7,
            "return": [
                "dict",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "repo_name": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "Optional[Dict[str,str]]",
                    "None",
                    "Dict[str,str]"
                ],
                "pull_request_id": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "None",
                    "Dict[str,Any]"
                ],
                "comment": [
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "None"
                ],
                "cred_hash": [
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Comments.get_activities": {
            "name": "get_activities",
            "location": 14,
            "return": [
                "int",
                "Dict[str,str]",
                "List[str]",
                "str",
                "Dict[str,dict[str,Any]]",
                "Dict",
                "Dict[str,None]"
            ],
            "arguments": {
                "self": [],
                "repo_name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[List[str]]",
                    "List[str]",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]"
                ],
                "pull_request_id": [
                    "str",
                    "bool",
                    "None",
                    "List[str]",
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[List[str]]",
                    "int"
                ],
                "cred_hash": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "None",
                    "Optional[str]"
                ]
            }
        }
    },
    "devCenter-master/devcenter/codecloud/git.py": {
        "Git.get_repos": {
            "name": "get_repos",
            "location": 9,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "Type[T]",
                    "Type"
                ]
            }
        },
        "Git.find_branch": {
            "name": "find_branch",
            "location": 15,
            "return": [
                "str",
                "bool",
                "Dict[Text,Union[bool,str]]",
                "Dict[Text,Union[bool,Text]]"
            ],
            "arguments": {
                "self": [],
                "repo_name": [
                    "str",
                    "bool",
                    "None",
                    "Union[Optional[str],Literal[Literal]]",
                    "int"
                ],
                "msrp": [
                    "str",
                    "Sequence[str]",
                    "Optional[str]",
                    "bool",
                    "None"
                ],
                "cred_hash": [
                    "str",
                    "bool",
                    "None",
                    "Union[Optional[str],Literal[Literal]]",
                    "int"
                ]
            }
        },
        "Git.ticket_branches": {
            "name": "ticket_branches",
            "location": 31,
            "return": [
                "Dict[(str, Union[(bool, str, List[Dict[(str, Any)]])])]"
            ],
            "arguments": {
                "self": [],
                "msrp": [
                    "str"
                ],
                "cred_hash": [
                    "str"
                ]
            }
        },
        "Git.get_branches": {
            "name": "get_branches",
            "location": 48,
            "return": [
                "Dict[Text,Union[bool,list]]",
                "bool",
                "Optional[int]",
                "Optional[Iterable[str]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "repo_name": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ],
                "cred_hash": [
                    "str",
                    "int",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Git.get_commit_ids": {
            "name": "get_commit_ids",
            "location": 62,
            "return": [
                "Dict[(str, Union[(bool, List[Dict[(str, Any)]])])]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bool",
                    "Dict[str,str]",
                    "float",
                    "Dict",
                    "Union[int,float]",
                    "str",
                    "int"
                ],
                "pull_requests": [
                    "str",
                    "Dict",
                    "bool",
                    "List[str]",
                    "Iterable[str]",
                    "float"
                ],
                "master_branch": [
                    "bool",
                    "str",
                    "None",
                    "Dict",
                    "Optional[int]",
                    "Optional[Dict]"
                ],
                "cred_hash": [
                    "bool",
                    "Dict[str,str]",
                    "float",
                    "Dict",
                    "Union[int,float]",
                    "str",
                    "int"
                ]
            }
        },
        "Git._get_commit_id": {
            "name": "_get_commit_id",
            "location": 87,
            "return": [
                "Dict[Text,Union[bool,Text]]",
                "str",
                "Dict[str,Any]",
                "Dict",
                "bool",
                "Union[str,dict]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "repo_name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Tuple[str,int]",
                    "Tuple[Union[str,int]]"
                ],
                "key": [
                    "str",
                    "List[str]",
                    "FrozenSet[str]",
                    "bool",
                    "frozenset"
                ],
                "master_branch": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Tuple[str,int]",
                    "Tuple[Union[str,int]]"
                ],
                "cred_hash": [
                    "bool",
                    "str",
                    "None",
                    "Optional[bool]",
                    "Optional[str]"
                ]
            }
        },
        "Git.create_pull_requests": {
            "name": "create_pull_requests",
            "location": 104,
            "return": [
                "Dict[(str, Union[(bool, List[Dict[(str, Any)]])])]"
            ],
            "arguments": {
                "self": [],
                "repos": [
                    "List[str]",
                    "str",
                    "bool"
                ],
                "key": [
                    "bool",
                    "List[str]",
                    "str"
                ],
                "msrp": [
                    "bool",
                    "List[str]",
                    "str"
                ],
                "summary": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "cred_hash": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Dict",
                    "None"
                ],
                "qa_title": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "devCenter-master/devcenter/codecloud/pull_requests.py": {
        "PullRequests._create_qa_td": {
            "name": "_create_qa_td",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Tuple[type]",
                    "Tuple[Type]"
                ],
                "repository_name": [
                    "str",
                    "List[str]",
                    "List[Tuple[str,int]]",
                    "List[tuple[Union[str,int]]]",
                    "Optional[str]",
                    "None"
                ],
                "links": [
                    "str",
                    "List[str]",
                    "List[tuple[Union[str,int]]]",
                    "List[Tuple[str,int]]",
                    "Optional[str]"
                ]
            }
        },
        "PullRequests.get_pull_request_link": {
            "name": "get_pull_request_link",
            "location": 20,
            "return": [
                "Text",
                "bool",
                "Dict[str,str]",
                "Dict",
                "Dict[str,Any]",
                "List",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "int",
                    "List[Dict[str,str]]",
                    "List[dict[str,str]]"
                ],
                "pull_response": [
                    "Dict",
                    "Dict[str,str]",
                    "Optional[str]",
                    "str"
                ],
                "repository_name": [
                    "str",
                    "Dict",
                    "Dict[str,str]"
                ]
            }
        },
        "PullRequests.generate_qa_template": {
            "name": "generate_qa_template",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "qa_steps": [
                    "str",
                    "Callable"
                ],
                "repos": [
                    "Dict[str,Any]",
                    "str"
                ],
                "pull_response": [
                    "Dict[str,Any]",
                    "str"
                ]
            }
        },
        "PullRequests.generate_repo_table": {
            "name": "generate_repo_table",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "repos": [
                    "Dict[str,Iterable[Any]]",
                    "List[str]",
                    "str",
                    "Optional[List[str]]",
                    "bool",
                    "int"
                ],
                "pull_response": [
                    "int",
                    "bytes"
                ]
            }
        },
        "PullRequests.create_qa_table_row": {
            "name": "create_qa_table_row",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "repo": [
                    "Dict",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "str"
                ],
                "pull_response": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        }
    },
    "devCenter-master/devcenter/codecloud/reviewers.py": {
        "Reviewers.add_reviewer_to_pull_request": {
            "name": "add_reviewer_to_pull_request",
            "location": 7,
            "return": [
                "Dict[str, str]",
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "repo_name": [
                    "str"
                ],
                "pull_request_id": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "cred_hash": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Reviewers.pass_pull_request_review": {
            "name": "pass_pull_request_review",
            "location": 22,
            "return": [
                "Dict",
                "str",
                "List[str]",
                "Dict[str,str]",
                "List[bool]",
                "Dict[str,dict[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "repo_name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "pull_request_id": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "cred_hash": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Reviewers.fail_pull_request_review": {
            "name": "fail_pull_request_review",
            "location": 35,
            "return": [
                "Dict",
                "str",
                "List[str]",
                "Dict[str,str]",
                "List[bool]",
                "Dict[str,dict[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "repo_name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "pull_request_id": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "cred_hash": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Reviewers._change_pull_request_status": {
            "name": "_change_pull_request_status",
            "location": 48,
            "return": [
                "bytes",
                "Dict[str,Any]",
                "List[bool]",
                "Dict[str,str]",
                "bool",
                "List",
                "Dict",
                "int",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "List[str]"
                ],
                "repo_name": [
                    "str"
                ],
                "pull_request_id": [
                    "str",
                    "List[str]"
                ],
                "cred_hash": [
                    "str",
                    "bytes",
                    "Dict",
                    "bool",
                    "Callable"
                ],
                "status": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "int",
                    "None"
                ]
            }
        }
    },
    "devCenter-master/devcenter/codecloud/__init__.py": {},
    "devCenter-master/devcenter/jira/api.py": {
        "JiraApi.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraApi.get_session": {
            "name": "get_session",
            "location": 36,
            "return": [
                "Dict[(str, Union[(bool, str, requests.sessions.Session)])]"
            ],
            "arguments": {
                "self": [],
                "cred_hash": [
                    "str",
                    "float",
                    "Optional[int]"
                ]
            }
        },
        "JiraApi.process_response": {
            "name": "process_response",
            "location": 70,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "Dict[str,Any]",
                    "requests.Response"
                ]
            }
        }
    },
    "devCenter-master/devcenter/jira/comments.py": {
        "JiraComments.add_comment": {
            "name": "add_comment",
            "location": 11,
            "return": [
                "str",
                "Dict",
                "bool",
                "Dict[str,str]",
                "List[str]",
                "Dict[str,int]",
                "Dict[Text,bool]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "str",
                    "Dict[str,Any]",
                    "Dict[str,str]"
                ],
                "cred_hash": [
                    "str",
                    "Type",
                    "Optional[str]",
                    "None"
                ],
                "private_comment": [
                    "str"
                ],
                "comment": [
                    "str",
                    "Text"
                ]
            }
        },
        "JiraComments.edit_comment": {
            "name": "edit_comment",
            "location": 25,
            "return": [
                "bool",
                "Dict",
                "Dict[str,str]",
                "Dict[str,int]",
                "Dict[Text,bool]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "comment_id": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "None"
                ],
                "cred_hash": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "private_comment": [
                    "str",
                    "bool",
                    "int"
                ],
                "comment": [
                    "Text",
                    "str",
                    "bytes",
                    "Optional[bool]",
                    "Optional[int]"
                ]
            }
        },
        "JiraComments.delete_comment": {
            "name": "delete_comment",
            "location": 39,
            "return": [
                "str",
                "int",
                "Dict[str, str]",
                "Exception",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Dict[str,Any]"
                ],
                "comment_id": [
                    "str",
                    "Dict[str,Any]"
                ],
                "cred_hash": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "JiraComments._set_json": {
            "name": "_set_json",
            "location": 45,
            "return": [
                "Dict[(str, Union[(Dict[(str, str)], _T0)])]"
            ],
            "arguments": {
                "self": [],
                "comment": [
                    "Callable[[T],List[T]]",
                    "str",
                    "Callable[T,list[T]]"
                ],
                "private_comment": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "JiraComments.parse_comment": {
            "name": "parse_comment",
            "location": 55,
            "return": [
                "int",
                "str",
                "datetime.datetime",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "cred_hash": [
                    "str",
                    "Dict[str,Any]",
                    "Dict",
                    "bytes",
                    "Optional[str]",
                    "None"
                ],
                "comment": [
                    "bool",
                    "Callable",
                    "str",
                    "Dict",
                    "int",
                    "None",
                    "Optional[Dict]"
                ],
                "key": [
                    "bool",
                    "Callable",
                    "str",
                    "Dict",
                    "int",
                    "None",
                    "Optional[Dict]"
                ]
            }
        }
    },
    "devCenter-master/devcenter/jira/component.py": {
        "JiraComponent.set_component": {
            "name": "set_component",
            "location": 7,
            "return": [
                "int",
                "bool",
                "List[str]",
                "\"DataFrame\"",
                "float"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[int]",
                    "None"
                ],
                "key": [
                    "str",
                    "bool"
                ],
                "cred_hash": [
                    "str",
                    "bool"
                ]
            }
        },
        "JiraComponent.set_component_by_id": {
            "name": "set_component_by_id",
            "location": 16,
            "return": [
                "int",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "Mapping[Any,str]",
                    "Dict[str,str]",
                    "Mapping"
                ],
                "key": [
                    "int",
                    "str",
                    "Iterable[dict]",
                    "Dict"
                ],
                "cred_hash": [
                    "int",
                    "str",
                    "Iterable[dict]",
                    "Dict"
                ]
            }
        },
        "JiraComponent.set_components": {
            "name": "set_components",
            "location": 25,
            "return": [
                "int",
                "bool",
                "List[str]",
                "\"DataFrame\"",
                "float"
            ],
            "arguments": {
                "self": [],
                "names": [
                    "str",
                    "List[str]",
                    "bool",
                    "Callable",
                    "Callable[,float]"
                ],
                "key": [
                    "str",
                    "bool"
                ],
                "cred_hash": [
                    "str",
                    "bool"
                ]
            }
        },
        "JiraComponent.remove_component": {
            "name": "remove_component",
            "location": 38,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "bytes",
                    "Dict[str,str]",
                    "List[str]"
                ],
                "key": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "cred_hash": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "JiraComponent.remove_component_by_id": {
            "name": "remove_component_by_id",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "bool",
                    "List[int]",
                    "List",
                    "Tuple[str]"
                ],
                "key": [
                    "str",
                    "List[Dict[str,str]]",
                    "List[dict[str,str]]",
                    "Dict[str,Any]",
                    "Union[str,bytes]",
                    "bytes",
                    "Any",
                    "Optional[str]",
                    "None",
                    "Optional[bool]",
                    "bool"
                ],
                "cred_hash": [
                    "str",
                    "List[Dict[str,str]]",
                    "List[dict[str,str]]",
                    "Dict[str,Any]",
                    "Union[str,bytes]",
                    "bytes",
                    "Any",
                    "Optional[str]",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "JiraComponent.remove_components": {
            "name": "remove_components",
            "location": 48,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "names": [
                    "str",
                    "bool",
                    "Callable",
                    "Callable[,float]",
                    "Optional[str]",
                    "Iterable[Tuple[str,str,str]]"
                ],
                "key": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "cred_hash": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "devCenter-master/devcenter/jira/config.py": {},
    "devCenter-master/devcenter/jira/fields.py": {
        "get_key": {
            "name": "get_key",
            "location": 11,
            "return": [
                "Dict[str,Any]",
                "bool",
                "Optional[List[str]]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "issue": [
                    "Dict[str,dict[str,Any]]",
                    "Dict",
                    "Mapping[str,Any]",
                    "Dict[str,Dict[str,Any]]"
                ]
            }
        },
        "get_msrp": {
            "name": "get_msrp",
            "location": 16,
            "return": [
                "str",
                "Optional[List[Any]]",
                "int",
                "Callable",
                "bytes",
                "dict",
                "Callable[[], T]"
            ],
            "arguments": {
                "issue": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "get_full_status": {
            "name": "get_full_status",
            "location": 21,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "issue": [
                    "Dict[str,Any]",
                    "Dict",
                    "List[dict]",
                    "Dict[int,List[str]]",
                    "Dict[str,bool]",
                    "Dict[int,list[str]]",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "get_status": {
            "name": "get_status",
            "location": 31,
            "return": [
                "Dict[str, Any]",
                "str",
                "bool",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "issue": [
                    "int",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "get_summary": {
            "name": "get_summary",
            "location": 42,
            "return": [
                "str",
                "Optional[List[Any]]",
                "int",
                "Callable",
                "bytes",
                "dict",
                "Callable[[], T]"
            ],
            "arguments": {
                "issue": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "get_username": {
            "name": "get_username",
            "location": 47,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "issue": [
                    "str"
                ]
            }
        },
        "get_display_name": {
            "name": "get_display_name",
            "location": 52,
            "return": [
                "str",
                "Optional[str]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "issue": [
                    "Dict",
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "get_user_details": {
            "name": "get_user_details",
            "location": 57,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "issue": [
                    "Dict[str,bool]",
                    "Dict",
                    "Callable",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "_get_display_name": {
            "name": "_get_display_name",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "display_name": [
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "get_component": {
            "name": "get_component",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "issue": [
                    "int",
                    "Dict[str,bool]",
                    "Dict"
                ]
            }
        },
        "get_story_point": {
            "name": "get_story_point",
            "location": 81,
            "return": [
                "int"
            ],
            "arguments": {
                "issue": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "get_sprint": {
            "name": "get_sprint",
            "location": 93,
            "return": [
                "Text",
                "str",
                "bool"
            ],
            "arguments": {
                "issue": [
                    "str",
                    "List",
                    "bool",
                    "Optional[str]",
                    "Sequence[str]",
                    "int"
                ]
            }
        },
        "get_master_branch": {
            "name": "get_master_branch",
            "location": 102,
            "return": [
                "str",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "sprint": [
                    "str",
                    "list",
                    "List[int]",
                    "TextIO",
                    "int"
                ],
                "key": [
                    "str",
                    "bytes",
                    "Callable",
                    "Callable[[T],bool]"
                ]
            }
        },
        "get_epic_link": {
            "name": "get_epic_link",
            "location": 108,
            "return": [
                "str",
                "Optional[List[str]]",
                "bool"
            ],
            "arguments": {
                "issue": [
                    "str",
                    "int",
                    "Dict[str,Any]"
                ],
                "epic_links": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "get_label": {
            "name": "get_label",
            "location": 114,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "issue": [
                    "str",
                    "Dict[str,Any]",
                    "Dict",
                    "Optional[Mapping[str,Any]]",
                    "Mapping",
                    "None"
                ]
            }
        },
        "get_comments": {
            "name": "get_comments",
            "location": 123,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "issue": [
                    "Dict",
                    "Dict[str,Any]",
                    "int"
                ]
            }
        },
        "format_comment": {
            "name": "format_comment",
            "location": 140,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "comment": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict]",
                    "Hashable",
                    "int"
                ],
                "key": [
                    "Dict",
                    "int",
                    "Sequence[cirq.Qid]"
                ]
            }
        },
        "get_customer_details": {
            "name": "get_customer_details",
            "location": 172,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "issue": [
                    "Dict",
                    "int",
                    "Dict[str,Any]"
                ]
            }
        },
        "get_dates": {
            "name": "get_dates",
            "location": 182,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "issue": [
                    "Dict",
                    "Dict[str,Any]",
                    "List[T]"
                ]
            }
        },
        "get_worklog": {
            "name": "get_worklog",
            "location": 196,
            "return": [
                "str",
                "List",
                "bool"
            ],
            "arguments": {
                "issue": [
                    "int",
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "get_attachments": {
            "name": "get_attachments",
            "location": 207,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "issue": [
                    "str",
                    "bool",
                    "T",
                    "Dict"
                ]
            }
        },
        "get_watchers": {
            "name": "get_watchers",
            "location": 221,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "issue": [
                    "str",
                    "List",
                    "bool",
                    "Optional[str]",
                    "Sequence[str]",
                    "int"
                ]
            }
        },
        "get_priority": {
            "name": "get_priority",
            "location": 233,
            "return": [
                "str",
                "bool",
                "Text",
                "Dict[str,Any]",
                "Dict",
                "List[list[Any]]"
            ],
            "arguments": {
                "issue": [
                    "str",
                    "Callable",
                    "Union[str,IO]",
                    "Dict",
                    "IO[str]",
                    "bool"
                ]
            }
        },
        "get_severity": {
            "name": "get_severity",
            "location": 241,
            "return": [
                "str",
                "bool",
                "Text",
                "Dict[str,Any]",
                "Dict",
                "List[list[Any]]"
            ],
            "arguments": {
                "issue": [
                    "str",
                    "Callable",
                    "Union[str,IO]",
                    "Dict",
                    "IO[str]",
                    "bool"
                ]
            }
        },
        "get_code_reviewer": {
            "name": "get_code_reviewer",
            "location": 249,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "issue": [
                    "str",
                    "bool",
                    "Type[BaseConfig]",
                    "int",
                    "Dict"
                ]
            }
        },
        "get_issue_type": {
            "name": "get_issue_type",
            "location": 264,
            "return": [
                "typing.Text",
                "dict[str, list[]]",
                "dict[str, str]",
                "tuple[typing.Union[str,str,str,str,str,str,str,str,str,str,str,str,str]]",
                "dict[str, tuple[typing.Union[str,str]]]"
            ],
            "arguments": {
                "issue": [
                    "str",
                    "Dict",
                    "Tuple[Union[int,int]]",
                    "Optional[str]",
                    "Tuple[int,int]",
                    "Type"
                ]
            }
        },
        "get_environment": {
            "name": "get_environment",
            "location": 272,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "issue": [
                    "dict",
                    "Mapping[str, Any]",
                    "Dict[str, bool]",
                    "Callable",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_dev_changes": {
            "name": "get_dev_changes",
            "location": 277,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "issue": [
                    "dict",
                    "Mapping[str, Any]",
                    "Dict[str, bool]",
                    "Callable",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_issue_links": {
            "name": "get_issue_links",
            "location": 282,
            "return": [
                "str",
                "int",
                "list",
                "Tuple[bool, bool, bool]"
            ],
            "arguments": {
                "issue": [
                    "dict",
                    "Dict[str, Any]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "get_description": {
            "name": "get_description",
            "location": 287,
            "return": [
                "int",
                "bool",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "issue": [
                    "dict",
                    "Mapping[str, Any]",
                    "Dict[str, bool]",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        },
        "get_history": {
            "name": "get_history",
            "location": 292,
            "return": [
                "Dict[(str, list)]"
            ],
            "arguments": {
                "issue": [
                    "int",
                    "Dict[str,bool]",
                    "Dict"
                ]
            }
        },
        "get_transitions": {
            "name": "get_transitions",
            "location": 310,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "issue": [
                    "Dict",
                    "Callable",
                    "Union[str,IO]",
                    "IO[str]",
                    "bool"
                ]
            }
        }
    },
    "devCenter-master/devcenter/jira/jira.py": {},
    "devCenter-master/devcenter/jira/misc.py": {
        "JiraMisc.build_qa_title": {
            "name": "build_qa_title",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Dict[str,str]"
                ],
                "key": [
                    "str",
                    "Set[str]",
                    "int"
                ],
                "msrp": [
                    "str",
                    "Set[str]",
                    "int"
                ],
                "summary": [
                    "str",
                    "Set[str]",
                    "int"
                ]
            }
        },
        "JiraMisc.get_pcr_estimate": {
            "name": "get_pcr_estimate",
            "location": 19,
            "return": [
                "int"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "Type[T]",
                    "Type"
                ],
                "story_point": [
                    "int",
                    "float",
                    "List[str]",
                    "Iterable[int]"
                ]
            }
        },
        "JiraMisc.find_key_by_msrp": {
            "name": "find_key_by_msrp",
            "location": 29,
            "return": [
                "str",
                "Dict[str,Any]",
                "Dict[Text,Union[bool,str]]",
                "Dict[Text,Union[bool,Text]]",
                "Sequence[str]",
                "Optional[str]",
                "Optional[List]",
                "bool",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "msrp": [
                    "Text",
                    "str",
                    "Any",
                    "Optional[str]",
                    "bool"
                ],
                "cred_hash": [
                    "Text",
                    "str",
                    "MutableMapping",
                    "Dict",
                    "Optional[dict]"
                ]
            }
        },
        "JiraMisc.add_work_log": {
            "name": "add_work_log",
            "location": 42,
            "return": [
                "str",
                "list",
                "datetime.datetime",
                "slice",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "time": [
                    "bool"
                ],
                "key": [
                    "str",
                    "Dict[str,str]",
                    "bool",
                    "Dict",
                    "Optional[Dict]",
                    "None",
                    "datetime.datetime",
                    "Optional[str]"
                ],
                "cred_hash": [
                    "str",
                    "Dict[str,str]",
                    "bool",
                    "Dict",
                    "Optional[Dict]",
                    "None",
                    "datetime.datetime",
                    "Optional[str]"
                ],
                "private_log": [
                    "bool",
                    "int",
                    "Optional[int]",
                    "Optional[dict]",
                    "Optional[List]",
                    "Callable",
                    "Optional[str]"
                ]
            }
        },
        "JiraMisc.get_profile": {
            "name": "get_profile",
            "location": 55,
            "return": [
                "str",
                "List",
                "Dict[str,str]",
                "Dict",
                "Tuple[bytes,bytes]",
                "bytes",
                "Dict[str,Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "cred_hash": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "JiraMisc.set_dev_changes": {
            "name": "set_dev_changes",
            "location": 71,
            "return": [
                "int",
                "bool",
                "List[str]",
                "\"DataFrame\"",
                "float"
            ],
            "arguments": {
                "self": [],
                "dev_changes": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "key": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "Dict",
                    "List[Dict[str,str]]",
                    "None",
                    "Iterable[dict]",
                    "List[dict[str,str]]"
                ],
                "cred_hash": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "Dict",
                    "List[Dict[str,str]]",
                    "None",
                    "Iterable[dict]",
                    "List[dict[str,str]]"
                ]
            }
        },
        "JiraMisc.set_additional_qa": {
            "name": "set_additional_qa",
            "location": 80,
            "return": [
                "int",
                "bool",
                "List[str]",
                "\"DataFrame\"",
                "float"
            ],
            "arguments": {
                "self": [],
                "comment": [
                    "str",
                    "int",
                    "Callable",
                    "Union[int,List[int]]",
                    "List[int]",
                    "bool"
                ],
                "key": [
                    "str",
                    "Callable",
                    "OrderedDict",
                    "T",
                    "List[list[int]]",
                    "List[List[int]]"
                ],
                "cred_hash": [
                    "str",
                    "Callable",
                    "OrderedDict",
                    "T",
                    "List[list[int]]",
                    "List[List[int]]"
                ]
            }
        },
        "JiraMisc.add_pr_to_dev_changes": {
            "name": "add_pr_to_dev_changes",
            "location": 89,
            "return": [
                "bool",
                "Optional[str]",
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "pull_response": [
                    "str",
                    "Optional[IO[bytes]]",
                    "Type[T]",
                    "Dict"
                ],
                "data": [
                    "bytes",
                    "Dict[str,Any]"
                ]
            }
        },
        "JiraMisc.add_dev_changes": {
            "name": "add_dev_changes",
            "location": 103,
            "return": [
                "List[str]",
                "Set[str]",
                "set",
                "str",
                "bool",
                "Dict[str, Set[str]]"
            ],
            "arguments": {
                "self": [],
                "dev_changes": [
                    "int",
                    "str"
                ],
                "cred_hash": [
                    "int",
                    "str"
                ],
                "key": [
                    "int",
                    "str"
                ]
            }
        },
        "JiraMisc.get_active_sprints": {
            "name": "get_active_sprints",
            "location": 107,
            "return": [
                "str",
                "Sequence[str]",
                "Dict[Text,Union[bool,list[Text]]]",
                "Optional[Dict[str,Any]]",
                "Dict[int,dict]"
            ],
            "arguments": {
                "self": [],
                "cred_hash": [
                    "Text",
                    "str",
                    "Dict[str,str]",
                    "Optional[dict]"
                ]
            }
        }
    },
    "devCenter-master/devcenter/jira/status.py": {
        "JiraStatus.set_status": {
            "name": "set_status",
            "location": 7,
            "return": [
                "int",
                "dict",
                "Optional[str]",
                "List[str]",
                "Dict[str, str]",
                "bool",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "float",
                    "str",
                    "Optional[str]",
                    "int",
                    "None"
                ],
                "transition_id": [
                    "str",
                    "int",
                    "bool"
                ],
                "cred_hash": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "devCenter-master/devcenter/jira/tickets.py": {
        "JiraTickets.get_filter_url": {
            "name": "get_filter_url",
            "location": 13,
            "return": [
                "str",
                "Dict[Text,Union[bool,str]]",
                "Optional[str]",
                "bool",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "filter_number": [
                    "str",
                    "Dict"
                ],
                "cred_hash": [
                    "str",
                    "Dict"
                ]
            }
        },
        "JiraTickets.get_raw_jira_tickets": {
            "name": "get_raw_jira_tickets",
            "location": 20,
            "return": [
                "Dict[Text,Union[bool,Text]]",
                "Dict[Text,bool]",
                "Dict[str,Any]",
                "bool",
                "int",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "cred_hash": [
                    "bool",
                    "Dict"
                ],
                "fields": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "bool",
                    "Mapping[int,str]",
                    "Dict"
                ],
                "jql": [
                    "Text",
                    "bool",
                    "Optional[str]",
                    "Optional[float]",
                    "Dict[int,int]"
                ],
                "filter_number": [
                    "Text",
                    "Optional[Any]",
                    "int",
                    "List[bytes]",
                    "Dict[str,str]",
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[dict]"
                ],
                "get_expanded": [
                    "bool",
                    "Callable[,object]",
                    "Dict[str,Any]"
                ]
            }
        },
        "JiraTickets.get_full_ticket": {
            "name": "get_full_ticket",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "str",
                    "Type",
                    "int",
                    "float",
                    "T"
                ],
                "cred_hash": [
                    "Text",
                    "str",
                    "bool"
                ]
            }
        },
        "JiraTickets.get_ticket_field_values": {
            "name": "get_ticket_field_values",
            "location": 52,
            "return": [
                "bool",
                "Dict[Text,Union[bool,Text]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Text",
                    "Optional[str]",
                    "Optional[Period]",
                    "str",
                    "Optional[T]",
                    "List[PydanticModelField]"
                ],
                "cred_hash": [
                    "Text",
                    "Dict[str,str]",
                    "str",
                    "Optional[str]"
                ],
                "fields": [
                    "Text",
                    "Optional[str]",
                    "str",
                    "Optional[Period]",
                    "Optional[T]"
                ],
                "get_expanded": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[Period]",
                    "Optional[T]"
                ]
            }
        },
        "JiraTickets.get_ticket_dev_changes": {
            "name": "get_ticket_dev_changes",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "Dict[str,object]",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "cred_hash": [
                    "Text",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "JiraTickets.get_ticket_fields": {
            "name": "get_ticket_fields",
            "location": 71,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "issue": [
                    "Dict",
                    "str",
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "fields": [
                    "Type[T]",
                    "List[str]",
                    "Type",
                    "str",
                    "bool"
                ]
            }
        },
        "JiraTickets.get_jira_tickets": {
            "name": "get_jira_tickets",
            "location": 119,
            "return": [
                "str",
                "Dict[Text,Union[int,list]]",
                "Dict",
                "Optional[bytes]",
                "Optional[str]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "cred_hash": [
                    "Dict",
                    "bool",
                    "int",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "fields": [
                    "Text",
                    "Optional[Dict[str,Any]]",
                    "bool",
                    "Optional[Any]",
                    "Optional[str]",
                    "Optional[Dict]"
                ],
                "jql": [
                    "Text",
                    "bool",
                    "int"
                ],
                "filter_number": [
                    "Text",
                    "bool",
                    "int"
                ],
                "get_expanded": [
                    "bool",
                    "int"
                ]
            }
        }
    },
    "devCenter-master/devcenter/jira/watchers.py": {
        "JiraWatchers.add_watcher": {
            "name": "add_watcher",
            "location": 7,
            "return": [
                "int",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "cred_hash": [
                    "str"
                ],
                "username": [
                    "str"
                ]
            }
        },
        "JiraWatchers.remove_watcher": {
            "name": "remove_watcher",
            "location": 11,
            "return": [
                "List[int]",
                "int",
                "dict",
                "Generator"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "KT",
                    "bytes",
                    "Optional[bytes]",
                    "None"
                ],
                "cred_hash": [
                    "str",
                    "KT",
                    "bytes",
                    "Optional[bytes]",
                    "None"
                ],
                "username": [
                    "str",
                    "KT",
                    "bytes",
                    "Optional[bytes]",
                    "None"
                ]
            }
        },
        "JiraWatchers.get_watchers": {
            "name": "get_watchers",
            "location": 15,
            "return": [
                "bool",
                "Optional[Dict[str, Any]]",
                "Sequence[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "None"
                ],
                "cred_hash": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        }
    },
    "devCenter-master/devcenter/jira/__init__.py": {},
    "devCenter-master/devcenter/jira/__tests__/test_fields.py": {
        "test_get_key": {
            "name": "test_get_key",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_msrp": {
            "name": "test_get_msrp",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_full_status": {
            "name": "test_get_full_status",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_status": {
            "name": "test_get_status",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_summary": {
            "name": "test_get_summary",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_username": {
            "name": "test_get_username",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_display_name": {
            "name": "test_get_display_name",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_user_details": {
            "name": "test_get_user_details",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_component": {
            "name": "test_get_component",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_story_point": {
            "name": "test_get_story_point",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "devCenter-master/devcenter/jira/__tests__/__init__.py": {},
    "devCenter-master/devcenter/requests/api.py": {
        "get_orders": {
            "name": "get_orders",
            "location": 5,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {}
        },
        "get_atx": {
            "name": "get_atx",
            "location": 10,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {}
        }
    },
    "devCenter-master/devcenter/requests/chat.py": {
        "send_ping": {
            "name": "send_ping",
            "location": 8,
            "return": [
                "Dict[Text,Union[Text,bool]]",
                "OrderedDict",
                "Dict[Text,bool]",
                "str",
                "MutableMapping[str,Any]",
                "Dict[str,List[Any]]"
            ],
            "arguments": {
                "data": [
                    "bytes"
                ]
            }
        },
        "set_user_pings": {
            "name": "set_user_pings",
            "location": 53,
            "return": [
                "Dict",
                "str",
                "Dict[Text,Union[Text,bool]]",
                "Dict[str,float]",
                "Dict[str,Any]",
                "OrderedDict",
                "Tuple[Union[str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str]]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "Dict",
                    "Dict[str,Any]",
                    "Optional[dict]",
                    "Type[Declared]"
                ]
            }
        },
        "send_custom_ping": {
            "name": "send_custom_ping",
            "location": 68,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "_get_jira_ticket_for_ping": {
            "name": "_get_jira_ticket_for_ping",
            "location": 106,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "Dict[str,Any]",
                    "Dict"
                ]
            }
        },
        "send_pcr_comments": {
            "name": "send_pcr_comments",
            "location": 124,
            "return": [
                "Dict[Text,Union[Text,bool]]",
                "OrderedDict",
                "str",
                "MutableMapping[str,Any]",
                "Dict[str,List[Any]]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "Dict"
                ]
            }
        }
    },
    "devCenter-master/devcenter/requests/codecloud.py": {
        "transition_to_pcr": {
            "name": "transition_to_pcr",
            "location": 9,
            "return": [
                "bytes",
                "dict",
                "bool"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "str"
                ]
            }
        },
        "get_repos": {
            "name": "get_repos",
            "location": 38,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "data": [
                    "Dict[str,Any]",
                    "bytes",
                    "Mapping[str,Any]",
                    "List",
                    "Mapping",
                    "int"
                ]
            }
        },
        "create_pull_requests": {
            "name": "create_pull_requests",
            "location": 44,
            "return": [
                "int",
                "str",
                "dict",
                "Callable"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "get_branches": {
            "name": "get_branches",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "data": [
                    "str",
                    "Dict",
                    "Tuple[Union[str,str]]",
                    "List[dict]",
                    "Tuple[str,str]",
                    "Dict[str,str]"
                ]
            }
        },
        "ticket_branches": {
            "name": "ticket_branches",
            "location": 64,
            "return": [
                "str",
                "Optional[float]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "SendRefundTransfer",
                    "Dict"
                ]
            }
        },
        "add_qa_comment": {
            "name": "add_qa_comment",
            "location": 70,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "Optional[bool]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "List",
                    "Dict[str,Any]",
                    "Mapping[str,object]",
                    "Dict"
                ]
            }
        },
        "add_reviewer_to_pull_request": {
            "name": "add_reviewer_to_pull_request",
            "location": 87,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Sequence"
                ]
            }
        }
    },
    "devCenter-master/devcenter/requests/crucible.py": {},
    "devCenter-master/devcenter/requests/jira.py": {
        "set_status": {
            "name": "set_status",
            "location": 15,
            "return": [
                "Dict[(str, Union[(bool, dict, str)])]"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "get_new_component": {
            "name": "get_new_component",
            "location": 61,
            "return": [
                "Dict[Text,Union[bool,dict[Text,Union[str,dict[str,Any],Container,None,Sequence[str],Sequence[list[Any]]]]]]",
                "str",
                "Optional[str]",
                "bool",
                "Callable",
                "Dict"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Dict[str,Any]",
                    "Sequence[str]",
                    "Optional[Container[str]]",
                    "Container",
                    "None",
                    "Sequence[List[Any]]",
                    "Sequence[list[Any]]"
                ],
                "cred_hash": [
                    "str",
                    "Sequence[str]",
                    "Optional[Container[str]]",
                    "Container",
                    "Dict[str,Any]",
                    "IO",
                    "None",
                    "Dict",
                    "Sequence[List[Any]]",
                    "Sequence[list[Any]]"
                ]
            }
        },
        "add_comment": {
            "name": "add_comment",
            "location": 80,
            "return": [
                "Dict[Text,bool]",
                "str",
                "List[float]",
                "bytes"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "List[Dict[str, Any]]",
                    "Mapping[str, Any]",
                    "bytes",
                    "bool",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "edit_comment": {
            "name": "edit_comment",
            "location": 95,
            "return": [
                "Dict[Text,Union[Text,bool]]",
                "OrderedDict",
                "str",
                "MutableMapping[str,Any]",
                "Dict[str,List[Any]]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "Dict[str,Any]",
                    "Dict"
                ]
            }
        },
        "delete_comment": {
            "name": "delete_comment",
            "location": 110,
            "return": [
                "Dict[Text,Union[Text,bool]]",
                "str",
                "int",
                "Dict[str,Any]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "add_work_log": {
            "name": "add_work_log",
            "location": 123,
            "return": [
                "Dict[Text,Union[Text,bool]]",
                "str",
                "Dict",
                "OrderedDict",
                "Iterable"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "Dict"
                ]
            }
        },
        "get_jira_tickets": {
            "name": "get_jira_tickets",
            "location": 132,
            "return": [
                "str",
                "Dict[Text,Union[Text,bool]]",
                "int",
                "Dict[Text,bool]"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "bytes",
                    "List[Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "find_key_by_msrp": {
            "name": "find_key_by_msrp",
            "location": 160,
            "return": [
                "Dict[Text,Union[Text,bool]]",
                "str",
                "Optional[Container[str]]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "Dict"
                ]
            }
        },
        "get_profile": {
            "name": "get_profile",
            "location": 169,
            "return": [
                "str",
                "Dict[Text,Union[Text,bool]]",
                "int",
                "Dict[Text,bool]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "parse_comment": {
            "name": "parse_comment",
            "location": 183,
            "return": [
                "Dict[Text,Union[Text,bool]]",
                "OrderedDict",
                "str",
                "MutableMapping[str,Any]",
                "Dict[str,List[Any]]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "Dict"
                ]
            }
        },
        "modify_watchers": {
            "name": "modify_watchers",
            "location": 192,
            "return": [
                "Dict[Text,Union[Text,bool]]",
                "OrderedDict",
                "Dict[Text,Union[bool,Text]]",
                "str",
                "MutableMapping[str,Any]",
                "Dict[str,List[Any]]"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "get_active_sprints": {
            "name": "get_active_sprints",
            "location": 221,
            "return": [
                "Dict[Text,Union[Text,bool]]",
                "str",
                "int"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "int"
                ]
            }
        }
    },
    "devCenter-master/devcenter/requests/jira_status.py": {
        "pass_pull_requests": {
            "name": "pass_pull_requests",
            "location": 7,
            "return": [
                "Dict[(str, Union[(bool, list, str)])]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "add_reviewer_all_pull_requests": {
            "name": "add_reviewer_all_pull_requests",
            "location": 30,
            "return": [
                "Dict[(str, Union[(bool, list, str)])]"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Optional[dict]",
                    "Dict[str, Any]"
                ]
            }
        },
        "add_cr_pass_comment": {
            "name": "add_cr_pass_comment",
            "location": 53,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "Optional[bool]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "bool"
                ]
            }
        },
        "add_qa_pass_comment": {
            "name": "add_qa_pass_comment",
            "location": 63,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "Optional[bool]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "bool"
                ]
            }
        },
        "add_commits_table_comment": {
            "name": "add_commits_table_comment",
            "location": 73,
            "return": [
                "Dict[(str, Union[(bool, str, Dict[(str, Any)])])]"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "_add_commit_comment": {
            "name": "_add_commit_comment",
            "location": 102,
            "return": [
                "str",
                "List[bytes]",
                "List[str]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "commit_ids": [
                    "str",
                    "int",
                    "Mapping[str, Any]"
                ],
                "key": [
                    "str"
                ],
                "cred_hash": [
                    "str"
                ]
            }
        }
    },
    "devCenter-master/devcenter/requests/user.py": {
        "get_navbar_items": {
            "name": "get_navbar_items",
            "location": 5,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {}
        },
        "get_statuses": {
            "name": "get_statuses",
            "location": 14,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {}
        },
        "get_ticket_history": {
            "name": "get_ticket_history",
            "location": 23,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {}
        },
        "get_jql_links": {
            "name": "get_jql_links",
            "location": 32,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {}
        },
        "set_navbar_item": {
            "name": "set_navbar_item",
            "location": 41,
            "return": [
                "Dict[Text,Union[Text,bool]]",
                "Dict[str,Any]",
                "Callable",
                "str",
                "Dict",
                "IO"
            ],
            "arguments": {
                "data": [
                    "Dict",
                    "Dict[int,dict]",
                    "Dict[int,Dict]",
                    "List[str]",
                    "bytes"
                ]
            }
        }
    },
    "devCenter-master/devcenter/requests/__init__.py": {},
    "devCenter-master/devcenter/routes/api.py": {
        "define_routes": {
            "name": "define_routes",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ],
                "g": [
                    "flask.Flask"
                ]
            }
        },
        "define_routes.get_orders_route": {
            "name": "get_orders_route",
            "location": 19,
            "return": [
                "Response",
                "str",
                "Dict",
                "Dict[str,str]",
                "Tuple[bytes,bytes]",
                "bytes",
                "Dict[str,Any]",
                "bool"
            ],
            "arguments": {}
        },
        "define_routes.get_atx_route": {
            "name": "get_atx_route",
            "location": 25,
            "return": [
                "Response",
                "str",
                "Dict",
                "Dict[str,str]",
                "Tuple[bytes,bytes]",
                "bytes",
                "Dict[str,Any]",
                "bool"
            ],
            "arguments": {}
        }
    },
    "devCenter-master/devcenter/routes/chat.py": {
        "define_routes": {
            "name": "define_routes",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ],
                "g": [
                    "flask.Flask"
                ]
            }
        },
        "define_routes.send_ping_route": {
            "name": "send_ping_route",
            "location": 19,
            "return": [
                "Response",
                "Optional[str]",
                "float",
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {}
        },
        "define_routes.user_pings": {
            "name": "user_pings",
            "location": 27,
            "return": [
                "Dict[str,str]",
                "Response"
            ],
            "arguments": {}
        },
        "define_routes.send_custom_ping_route": {
            "name": "send_custom_ping_route",
            "location": 35,
            "return": [
                "Response",
                "Optional[str]",
                "float",
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {}
        },
        "define_routes.send_pcr_comments_route": {
            "name": "send_pcr_comments_route",
            "location": 43,
            "return": [
                "Response",
                "Optional[str]",
                "float",
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {}
        }
    },
    "devCenter-master/devcenter/routes/codecloud.py": {
        "define_routes": {
            "name": "define_routes",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ],
                "g": [
                    "flask.Flask"
                ]
            }
        },
        "define_routes.repos": {
            "name": "repos",
            "location": 28,
            "return": [
                "Response",
                "Optional[str]",
                "float",
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {}
        },
        "define_routes.branches": {
            "name": "branches",
            "location": 35,
            "return": [
                "Response",
                "Optional[str]",
                "float",
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "repo_name": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "define_routes.ticket_branches": {
            "name": "ticket_branches",
            "location": 42,
            "return": [
                "Response",
                "Optional[str]",
                "float",
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "msrp": [
                    "str"
                ]
            }
        },
        "define_routes.transition_ticket_to_pcr": {
            "name": "transition_ticket_to_pcr",
            "location": 49,
            "return": [
                "Response",
                "float",
                "Optional[str]",
                "List[str]",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "define_routes.add_reviewer": {
            "name": "add_reviewer",
            "location": 69,
            "return": [
                "Response",
                "List[str]",
                "int",
                "Optional[str]",
                "Dict[str,str]",
                "OrderedDict",
                "Dict[str,Any]"
            ],
            "arguments": {}
        },
        "define_routes.add_comment": {
            "name": "add_comment",
            "location": 82,
            "return": [
                "Response",
                "List[str]",
                "int",
                "Optional[str]",
                "Dict[str,str]",
                "OrderedDict",
                "Dict[str,Any]"
            ],
            "arguments": {}
        }
    },
    "devCenter-master/devcenter/routes/jira.py": {
        "define_routes": {
            "name": "define_routes",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ],
                "g": [
                    "flask.Flask"
                ]
            }
        },
        "define_routes.jiraTickets": {
            "name": "jiraTickets",
            "location": 24,
            "return": [
                "Response",
                "bytes",
                "Dict"
            ],
            "arguments": {}
        },
        "define_routes.getKey": {
            "name": "getKey",
            "location": 35,
            "return": [
                "Response",
                "str",
                "int",
                "Optional[List[str]]",
                "Optional[bytes]",
                "bytes"
            ],
            "arguments": {
                "msrp": [
                    "Dict[str, Union[int, bool]]",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "define_routes.jira_comment": {
            "name": "jira_comment",
            "location": 44,
            "return": [
                "Response",
                "Optional[str]",
                "float",
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {}
        },
        "define_routes.change_status": {
            "name": "change_status",
            "location": 93,
            "return": [
                "Response",
                "str",
                "bool",
                "Optional[bool]",
                "Dict[int,dict]"
            ],
            "arguments": {}
        },
        "define_routes.parse_comment_route": {
            "name": "parse_comment_route",
            "location": 115,
            "return": [
                "Response",
                "Dict",
                "float",
                "Optional[str]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "define_routes.modify_watchers_route": {
            "name": "modify_watchers_route",
            "location": 123,
            "return": [
                "Response",
                "Optional[str]",
                "float",
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "key": [
                    "int",
                    "bytes",
                    "Sequence[Hashable]",
                    "str"
                ],
                "username": [
                    "str",
                    "int",
                    "KT"
                ]
            }
        },
        "define_routes.active_sprints_route": {
            "name": "active_sprints_route",
            "location": 158,
            "return": [
                "Response",
                "List[str]",
                "Optional[str]",
                "int",
                "Dict[str,str]",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {}
        }
    },
    "devCenter-master/devcenter/routes/user.py": {
        "define_routes": {
            "name": "define_routes",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ],
                "g": [
                    "flask.Flask"
                ]
            }
        },
        "define_routes.get_profile_route": {
            "name": "get_profile_route",
            "location": 23,
            "return": [
                "Response",
                "int",
                "bytes",
                "Dict[str,Any]",
                "Dict[str,str]"
            ],
            "arguments": {
                "username": [
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "define_routes.get_navbar": {
            "name": "get_navbar",
            "location": 30,
            "return": [
                "Response",
                "str",
                "Dict",
                "Dict[str,str]",
                "Tuple[bytes,bytes]",
                "bytes",
                "Dict[str,Any]",
                "bool"
            ],
            "arguments": {}
        },
        "define_routes.get_jql_links_route": {
            "name": "get_jql_links_route",
            "location": 43,
            "return": [
                "Response",
                "bool",
                "Dict[str,str]",
                "Dict",
                "Dict[str,Any]"
            ],
            "arguments": {}
        },
        "define_routes.get_statuses_request": {
            "name": "get_statuses_request",
            "location": 49,
            "return": [
                "Response",
                "Dict[str,Any]",
                "Optional[str]",
                "bool",
                "Dict",
                "List[dict]"
            ],
            "arguments": {}
        },
        "define_routes.get_ticket_history_request": {
            "name": "get_ticket_history_request",
            "location": 55,
            "return": [
                "Response",
                "Dict",
                "phial.Response",
                "bool",
                "str",
                "Tuple[int,str]",
                "Dict[str,Any]"
            ],
            "arguments": {}
        }
    },
    "devCenter-master/devcenter/routes/__init__.py": {},
    "devCenter-master/devcenter/scripts/beta_stats.py": {},
    "devCenter-master/devcenter/scripts/chat_messages.py": {},
    "devCenter-master/devcenter/sql/epic_links.py": {
        "EpicLinks.get_epic_links": {
            "name": "get_epic_links",
            "location": 9,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devCenter-master/devcenter/sql/history.py": {
        "TicketHistory.get_ticket_history": {
            "name": "get_ticket_history",
            "location": 9,
            "return": [
                "List[Dict[(Any, str)]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devCenter-master/devcenter/sql/misc.py": {
        "Misc.get_repos": {
            "name": "get_repos",
            "location": 9,
            "return": [
                "List[Dict[(Any, str)]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devCenter-master/devcenter/sql/models.py": {},
    "devCenter-master/devcenter/sql/navbar.py": {
        "SQLNavBar.get_navbar_items": {
            "name": "get_navbar_items",
            "location": 8,
            "return": [
                "List[Dict[(Any, str)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLNavBar.get_jql_links": {
            "name": "get_jql_links",
            "location": 16,
            "return": [
                "List[Dict[(Any, str)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLNavBar.set_navbar_item": {
            "name": "set_navbar_item",
            "location": 24,
            "return": [
                "Dict[(str, Union[(bool, str)])]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "db.models.Name",
                    "models.User"
                ]
            }
        }
    },
    "devCenter-master/devcenter/sql/sql.py": {
        "DevCenterSQL.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DevCenterSQL.login": {
            "name": "login",
            "location": 34,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DevCenterSQL.logout": {
            "name": "logout",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "sqlalchemy.orm.Session",
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "DevCenterSQL.log_error": {
            "name": "log_error",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int",
                    "guillotina.db.orm.interfaces.IBaseObject"
                ]
            }
        }
    },
    "devCenter-master/devcenter/sql/statuses.py": {
        "Statuses.get_statuses": {
            "name": "get_statuses",
            "location": 9,
            "return": [
                "List[Dict[(Any, str)]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devCenter-master/devcenter/sql/tickets.py": {
        "SQLTickets.update_ping": {
            "name": "update_ping",
            "location": 10,
            "return": [
                "Dict[(str, Union[(bool, str)])]"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str",
                    "bool",
                    "Union[str,int,float]",
                    "float"
                ],
                "key": [
                    "str",
                    "sqlalchemy.orm.Session"
                ],
                "value": [
                    "int",
                    "str",
                    "bool",
                    "Union[str,int,float]"
                ]
            }
        },
        "SQLTickets.reset_pings": {
            "name": "reset_pings",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ping_type": [
                    "str",
                    "Dict",
                    "bool"
                ],
                "key": [
                    "str",
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "SQLTickets.set_inactive_tickets": {
            "name": "set_inactive_tickets",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jira_tickets": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "SQLTickets.update_ticket": {
            "name": "update_ticket",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jira_ticket": [
                    "jumeaux.models.Res2ResAddOnPayload",
                    "django.db.models.Model",
                    "models.Payment",
                    "app.models.User"
                ]
            }
        },
        "SQLTickets.get_ping": {
            "name": "get_ping",
            "location": 79,
            "return": [
                "int",
                "List[str]",
                "Dict[str,str]",
                "str",
                "sqlalchemy.orm.Query",
                "Dict[str,Any]",
                "Tuple[Union[str,str]]"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str",
                    "int"
                ],
                "key": [
                    "str",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "SQLTickets.get_pings": {
            "name": "get_pings",
            "location": 91,
            "return": [
                "Dict[str,str]",
                "int",
                "List[str]",
                "str",
                "Dict",
                "sqlalchemy.orm.Query",
                "Dict[int,Type]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "core.models.User.Key"
                ]
            }
        }
    },
    "devCenter-master/devcenter/sql/users.py": {
        "SQLUsers.get_user_ping_value": {
            "name": "get_user_ping_value",
            "location": 16,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "Callable[,T]",
                    "Any",
                    "None",
                    "Union[sqlalchemy.orm.session.Session,abilian.core.models.blob.Blob]",
                    "Optional[Any]",
                    "fal.models.Season",
                    "medtagger.database.models.Scan"
                ],
                "field": [
                    "int",
                    "django.db.models.fields.Field"
                ]
            }
        },
        "SQLUsers.get_user_ping_values": {
            "name": "get_user_ping_values",
            "location": 46,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLUsers.set_user_ping_value": {
            "name": "set_user_ping_value",
            "location": 60,
            "return": [
                "Dict[str,str]",
                "Dict[str,Any]",
                "bool",
                "Dict[str,object]"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "Dict[str,List[str]]",
                    "Dict[str,list[str]]"
                ],
                "field": [
                    "str",
                    "Dict",
                    "Optional[FieldContainer]",
                    "None"
                ],
                "value": [
                    "str",
                    "Dict",
                    "Optional[FieldContainer]",
                    "None"
                ]
            }
        },
        "SQLUsers.set_user_pings": {
            "name": "set_user_pings",
            "location": 68,
            "return": [
                "Dict[(str, Union[(bool, str)])]"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "bool",
                    "Dict"
                ],
                "fields": [
                    "Dict",
                    "str",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "devCenter-master/devcenter/sql/__init__.py": {},
    "devCenter-master/devcenter/__tests__/test_aes_cipher.py": {
        "test_aes_cipher": {
            "name": "test_aes_cipher",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "devCenter-master/devcenter/__tests__/test_server_utils.py": {
        "test_generate_cred_hash": {
            "name": "test_generate_cred_hash",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_branch_name": {
            "name": "test_get_branch_name",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_build_commit_message": {
            "name": "test_build_commit_message",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_verify_parameters": {
            "name": "test_verify_parameters",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_missing_parameters_required": {
            "name": "test_missing_parameters_required",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_verify_parameters.fake_request": {
            "name": "fake_request",
            "location": 50,
            "return": [
                "Text",
                "Dict[str,Any]",
                "Dict",
                "List[Dict]",
                "bool"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict",
                    "List[dict]",
                    "Tuple[str]",
                    "bool"
                ]
            }
        }
    },
    "devCenter-master/devcenter/__tests__/__init__.py": {}
}
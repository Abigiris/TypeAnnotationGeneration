{
    "devhost-master/sublime-packages/Anaconda/anaconda.py": {
        "plugin_loaded": {
            "name": "plugin_loaded",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "plugin_unloaded": {
            "name": "plugin_unloaded",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "monitor_plugins": {
            "name": "monitor_plugins",
            "location": 71,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "enable_plugins": {
            "name": "enable_plugins",
            "location": 97,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "devhost-master/sublime-packages/Anaconda/setup.py": {},
    "devhost-master/sublime-packages/Anaconda/version.py": {},
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/aenum.py": {
        "_is_descriptor": {
            "name": "_is_descriptor",
            "location": 62,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "int"
                ]
            }
        },
        "_is_dunder": {
            "name": "_is_dunder",
            "location": 70,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "_is_sunder": {
            "name": "_is_sunder",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "_make_class_unpicklable": {
            "name": "_make_class_unpicklable",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "cls": []
            }
        },
        "__new__": {
            "name": "__new__",
            "location": 644,
            "return": [
                "int",
                "float",
                "bool",
                "str",
                "List[int]",
                "tuple",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool"
                ],
                "value": [
                    "str",
                    "bool",
                    "Iterable[Hashable]",
                    "Type[T]"
                ]
            }
        },
        "__repr__": {
            "name": "__repr__",
            "location": 666,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "__str__": {
            "name": "__str__",
            "location": 672,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "__format__": {
            "name": "__format__",
            "location": 689,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "format_spec": [
                    "str",
                    "Optional[Any]",
                    "Union[str, int]"
                ]
            }
        },
        "__eq__": {
            "name": "__eq__",
            "location": 745,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "float",
                    "Dict[str, str]"
                ]
            }
        },
        "__ne__": {
            "name": "__ne__",
            "location": 752,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "float",
                    "Dict[str, str]"
                ]
            }
        },
        "__hash__": {
            "name": "__hash__",
            "location": 759,
            "return": [
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "__reduce_ex__": {
            "name": "__reduce_ex__",
            "location": 764,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "proto": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "name": {
            "name": "name",
            "location": 777,
            "return": [
                "str",
                "Type",
                "Callable[..., T]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "value": {
            "name": "value",
            "location": 783,
            "return": [
                "str",
                "int",
                "dict",
                "tuple",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_convert": {
            "name": "_convert",
            "location": 789,
            "return": [
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "name": [
                    "dict",
                    "Type[T]",
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[Sequence[Any]]",
                    "Optional[Mapping[str, Any]]"
                ],
                "module": [
                    "Optional[List[str]]",
                    "Optional[Any]",
                    "str"
                ],
                "filter": [
                    "dict",
                    "List[str]",
                    "Dict[str, Any]",
                    "str"
                ],
                "source": [
                    "int"
                ]
            }
        },
        "_reduce_ex_by_name": {
            "name": "_reduce_ex_by_name",
            "location": 821,
            "return": [
                "str",
                "Type",
                "Callable[..., T]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "proto": [
                    "int",
                    "str",
                    "list",
                    "bool"
                ]
            }
        },
        "unique": {
            "name": "unique",
            "location": 824,
            "return": [
                "List[str]",
                "str",
                "int"
            ],
            "arguments": {
                "enumeration": [
                    "str"
                ]
            }
        },
        "_RouteClassAttributeToGetattr.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fget": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "_RouteClassAttributeToGetattr.__get__": {
            "name": "__get__",
            "location": 50,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Optional[str]",
                    "int",
                    "Optional[float]"
                ],
                "ownerclass": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "_RouteClassAttributeToGetattr.__set__": {
            "name": "__set__",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "bool",
                    "str",
                    "int",
                    "Optional[type]"
                ],
                "value": [
                    "bool",
                    "str",
                    "int",
                    "Optional[type]"
                ]
            }
        },
        "_RouteClassAttributeToGetattr.__delete__": {
            "name": "__delete__",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "bool",
                    "Iterable[int]",
                    "T"
                ]
            }
        },
        "_make_class_unpicklable._break_on_call_reduce": {
            "name": "_break_on_call_reduce",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "protocol": [
                    "str",
                    "Iterable"
                ]
            }
        },
        "_EnumDict.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_EnumDict.__setitem__": {
            "name": "__setitem__",
            "location": 105,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "bool"
                ],
                "value": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "EnumMeta.__prepare__": {
            "name": "__prepare__",
            "location": 150,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "metacls": [
                    "bool"
                ],
                "cls": [
                    "bool"
                ],
                "bases": [
                    "bool"
                ]
            }
        },
        "EnumMeta.__new__": {
            "name": "__new__",
            "location": 153,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "metacls": [
                    "str",
                    "int",
                    "List[List[str]]"
                ],
                "cls": [
                    "str"
                ],
                "bases": [
                    "str",
                    "int"
                ],
                "classdict": [
                    "dict",
                    "Dict[str, Any]",
                    "Union[Dict, List, str]",
                    "bool"
                ]
            }
        },
        "EnumMeta.__bool__": {
            "name": "__bool__",
            "location": 324,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "bool",
                    "Type",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "EnumMeta.__call__": {
            "name": "__call__",
            "location": 330,
            "return": [
                "Sequence['cirq.Qid']",
                "Type",
                "Callable",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[Any]",
                    "int",
                    "Type[T]"
                ],
                "value": [
                    "str",
                    "Optional[Any]",
                    "int",
                    "Type[T]"
                ],
                "names": [
                    "bool",
                    "int",
                    "Optional[Type]",
                    "Optional[Any]"
                ],
                "module": [
                    "str",
                    "Optional[str]",
                    "Callable[[Any], str]",
                    "Mapping[str, str]",
                    "bool"
                ],
                "type": [
                    "str",
                    "Optional[str]",
                    "Callable[[Any], str]",
                    "Mapping[str, str]",
                    "bool"
                ],
                "start": [
                    "str",
                    "Optional[str]",
                    "Callable[[Any], str]",
                    "Mapping[str, str]",
                    "bool"
                ]
            }
        },
        "EnumMeta.__contains__": {
            "name": "__contains__",
            "location": 351,
            "return": [
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "int",
                    "Type"
                ],
                "member": [
                    "Dict[str, Any]",
                    "int",
                    "Type"
                ]
            }
        },
        "EnumMeta.__delattr__": {
            "name": "__delattr__",
            "location": 354,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type[T]"
                ],
                "attr": [
                    "str",
                    "T",
                    "Callable"
                ]
            }
        },
        "EnumMeta.__dir__": {
            "name": "__dir__",
            "location": 362,
            "return": [
                "str",
                "bool",
                "Type",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumMeta.__members__": {
            "name": "__members__",
            "location": 367,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "float",
                    "type"
                ]
            }
        },
        "EnumMeta.__getattr__": {
            "name": "__getattr__",
            "location": 376,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Pattern"
                ],
                "name": [
                    "str",
                    "int"
                ]
            }
        },
        "EnumMeta.__getitem__": {
            "name": "__getitem__",
            "location": 392,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Pattern"
                ],
                "name": [
                    "str",
                    "Pattern"
                ]
            }
        },
        "EnumMeta.__iter__": {
            "name": "__iter__",
            "location": 395,
            "return": [
                "str",
                "Optional[str]",
                "Iterable[str]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "Dict[str, Iterable[Any]]",
                    "Optional[str]",
                    "Union[int, bytes]",
                    "type"
                ]
            }
        },
        "EnumMeta.__reversed__": {
            "name": "__reversed__",
            "location": 398,
            "return": [
                "str",
                "list",
                "Iterable[str]",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Exception"
                ]
            }
        },
        "EnumMeta.__len__": {
            "name": "__len__",
            "location": 401,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "\"Track\"",
                    "type"
                ]
            }
        },
        "EnumMeta.__repr__": {
            "name": "__repr__",
            "location": 406,
            "return": [
                "str",
                "Callable[[str], str]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        },
        "EnumMeta.__setattr__": {
            "name": "__setattr__",
            "location": 409,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict",
                    "type"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool",
                    "Optional[Callable]",
                    "Optional[Any]"
                ],
                "value": [
                    "str",
                    "Optional[Any]",
                    "bool"
                ]
            }
        },
        "EnumMeta._create_": {
            "name": "_create_",
            "location": 422,
            "return": [
                "str",
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "Union[Type[Any], Tuple[Any, ...]]",
                    "AbstractSet[\"TemplatePropertyVariable\"]",
                    "Optional[Union[Any, Any]]"
                ],
                "class_name": [
                    "str",
                    "Callable",
                    "type",
                    "tuple"
                ],
                "names": [
                    "AbstractSet[str]",
                    "Container[str]",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ],
                "module": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "type": [
                    "type",
                    "Tuple[List[str], Optional[str]]",
                    "Optional['Entity']"
                ],
                "start": [
                    "bool"
                ]
            }
        },
        "EnumMeta._get_mixins_": {
            "name": "_get_mixins_",
            "location": 484,
            "return": [
                "Tuple[str, str]",
                "bool",
                "str"
            ],
            "arguments": {
                "bases": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "__dir__": {
            "name": "__dir__",
            "location": 678,
            "return": [
                "Optional[Dict[str, str]]",
                "T",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "__cmp__": {
            "name": "__cmp__",
            "location": 712,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float",
                    "bool",
                    "Tuple[int, int, int]",
                    "Iterable[Any]",
                    "Optional[float]"
                ]
            }
        },
        "__le__": {
            "name": "__le__",
            "location": 724,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "float"
                ]
            }
        },
        "__lt__": {
            "name": "__lt__",
            "location": 729,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "float"
                ]
            }
        },
        "__ge__": {
            "name": "__ge__",
            "location": 734,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "float"
                ]
            }
        },
        "__gt__": {
            "name": "__gt__",
            "location": 739,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "float"
                ]
            }
        },
        "any": {
            "name": "any",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "iterable": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "EnumMeta._find_new_": {
            "name": "_find_new_",
            "location": 589,
            "return": [
                "bool",
                "float",
                "Optional[Any]",
                "Optional[Iterable[str]]",
                "int"
            ],
            "arguments": {
                "classdict": [
                    "dict",
                    "Mapping[str, Any]",
                    "str"
                ],
                "member_type": [
                    "str",
                    "Type"
                ],
                "first_enum": [
                    "str",
                    "Type"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/callback.py": {
        "Callback.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "on_success": [
                    "None",
                    "bool",
                    "int",
                    "str"
                ],
                "on_failure": [
                    "None",
                    "bool",
                    "int",
                    "str"
                ],
                "on_timeout": [
                    "str",
                    "None"
                ],
                "timeout": [
                    "Union[int, float]",
                    "int"
                ]
            }
        },
        "Callback.__call__": {
            "name": "__call__",
            "location": 67,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Callback.id": {
            "name": "id",
            "location": 76,
            "return": [
                "str",
                "Callable[[], bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Callback.hexid": {
            "name": "hexid",
            "location": 82,
            "return": [
                "str",
                "int",
                "dict",
                "Union[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Callback.timeout": {
            "name": "timeout",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Union[int, float]"
                ]
            }
        },
        "Callback.status": {
            "name": "status",
            "location": 110,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "Callback.initialize_timeout": {
            "name": "initialize_timeout",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Callback.on": {
            "name": "on",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "success": [
                    "None",
                    "Dict[str, Any]",
                    "type",
                    "Union[int, float]",
                    "Hashable"
                ],
                "error": [
                    "None",
                    "Dict[str, Any]",
                    "type",
                    "Union[int, float]",
                    "Hashable"
                ],
                "timeout": [
                    "None",
                    "int",
                    "dict",
                    "Mapping",
                    "Dict[str, Exception]",
                    "Callable"
                ]
            }
        },
        "Callback._infere_status_from_data": {
            "name": "_infere_status_from_data",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Callback._fire_callback": {
            "name": "_fire_callback",
            "location": 199,
            "return": [
                "List[str]",
                "logging.LogRecord",
                "int",
                "List[List[str]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Callback.initialize_timeout._timeout_callback": {
            "name": "_timeout_callback",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Callback.initialize_timeout._on_timeout": {
            "name": "_on_timeout",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "list",
                    "Dict[str, Any]",
                    "Set[str]"
                ]
            }
        },
        "Callback._fire_callback._panic": {
            "name": "_panic",
            "location": 203,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/constants.py": {},
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/contexts.py": {
        "vagrant_root": {
            "name": "vagrant_root",
            "location": 15,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "os.DirEntry"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/decorators.py": {
        "auto_project_switch": {
            "name": "auto_project_switch",
            "location": 33,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "func": [
                    "T",
                    "str",
                    "Callable"
                ]
            }
        },
        "auto_project_switch_ng": {
            "name": "auto_project_switch_ng",
            "location": 69,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "func": [
                    "T",
                    "str",
                    "Callable"
                ]
            }
        },
        "timeit": {
            "name": "timeit",
            "location": 93,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "logger": [
                    "Iterable[str]",
                    "str",
                    "int",
                    "Optional[logging.Logger]",
                    "Callable[[str], None]"
                ]
            }
        },
        "profile": {
            "name": "profile",
            "location": 116,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "auto_project_switch.wrapper": {
            "name": "wrapper",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "auto_project_switch_ng.wrapper": {
            "name": "wrapper",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "timeit.decorator": {
            "name": "decorator",
            "location": 97,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "profile.wrapper": {
            "name": "wrapper",
            "location": 121,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {}
        },
        "auto_project_switch.wrapper.reconnect": {
            "name": "reconnect",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "proc": [
                    "int",
                    "sublime.View",
                    "Callable",
                    "str"
                ]
            }
        },
        "timeit.decorator.wrapper": {
            "name": "wrapper",
            "location": 100,
            "return": [],
            "arguments": {}
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/explore_panel.py": {
        "ExplorerPanel.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "int",
                    "str",
                    "Any"
                ],
                "options": [
                    "str",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "ExplorerPanel.show": {
            "name": "show",
            "location": 45,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "cluster": [
                    "List[Dict]",
                    "Optional[str]",
                    "dict",
                    "Dict[str, Any]"
                ],
                "forced": [
                    "bool"
                ]
            }
        },
        "ExplorerPanel.on_select": {
            "name": "on_select",
            "location": 77,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "sublime.View",
                    "Callable",
                    "str"
                ],
                "transient": [
                    "bool",
                    "int",
                    "Awaitable",
                    "T"
                ]
            }
        },
        "ExplorerPanel._restore_view": {
            "name": "_restore_view",
            "location": 101,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Jumper.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "int",
                    "bool",
                    "float"
                ],
                "position": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Jumper.jump": {
            "name": "jump",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transient": [
                    "bool"
                ]
            }
        },
        "Jumper._toggle_indicator": {
            "name": "_toggle_indicator",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/helpers.py": {
        "dot_completion": {
            "name": "dot_completion",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "view": []
            }
        },
        "enable_dot_completion": {
            "name": "enable_dot_completion",
            "location": 57,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "view": [
                    "bool",
                    "sublime.View"
                ]
            }
        },
        "completion_is_disabled": {
            "name": "completion_is_disabled",
            "location": 76,
            "return": [
                "bool"
            ],
            "arguments": {
                "view": [
                    "Optional[int]",
                    "str",
                    "List[dict]"
                ]
            }
        },
        "is_code": {
            "name": "is_code",
            "location": 90,
            "return": [
                "bool"
            ],
            "arguments": {
                "view": [
                    "Optional[int]",
                    "dict",
                    "sublime.View"
                ],
                "lang": [
                    "typing.Text",
                    "str",
                    "int"
                ],
                "ignore_comments": [
                    "bool"
                ],
                "ignore_repl": [
                    "bool",
                    "List[str]",
                    "dict",
                    "int",
                    "List[int]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "is_python": {
            "name": "is_python",
            "location": 115,
            "return": [
                "bool"
            ],
            "arguments": {
                "view": [
                    "dict",
                    "List[str]",
                    "bool"
                ],
                "ignore_comments": [
                    "bool"
                ],
                "autocomplete_ignore_repl": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "check_linting": {
            "name": "check_linting",
            "location": 140,
            "return": [
                "bool"
            ],
            "arguments": {
                "view": [
                    "int",
                    "List[int]",
                    "bytes",
                    "str"
                ],
                "mask": [
                    "int",
                    "List[int]",
                    "bytes",
                    "str"
                ],
                "code": [
                    "int",
                    "typing.Text"
                ]
            }
        },
        "check_linting_behaviour": {
            "name": "check_linting_behaviour",
            "location": 157,
            "return": [
                "bool",
                "str",
                "bytearray",
                "int"
            ],
            "arguments": {
                "view": [
                    "str",
                    "int",
                    "list"
                ],
                "behaviours": [
                    "int",
                    "sublime.View",
                    "Callable",
                    "str"
                ]
            }
        },
        "create_subprocess": {
            "name": "create_subprocess",
            "location": 165,
            "return": [
                "Callable"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_settings": {
            "name": "get_settings",
            "location": 197,
            "return": [
                "None",
                "Tuple[float, float]",
                "int",
                "str",
                "Callable[[KT], VT]"
            ],
            "arguments": {
                "view": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[Union[bool, Any]]",
                    "Optional[Union[int, Any]]",
                    "Optional[bool]"
                ],
                "name": [
                    "str",
                    "sublime.View"
                ],
                "default": [
                    "None",
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "T",
                    "dict"
                ]
            }
        },
        "active_view": {
            "name": "active_view",
            "location": 261,
            "return": [
                "List[str]",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "is_remote_session": {
            "name": "is_remote_session",
            "location": 268,
            "return": [
                "bool"
            ],
            "arguments": {
                "view": [
                    "str"
                ]
            }
        },
        "prepare_send_data": {
            "name": "prepare_send_data",
            "location": 278,
            "return": [
                "str",
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "location": [
                    "str"
                ],
                "method": [
                    "str"
                ],
                "handler": [
                    "str"
                ]
            }
        },
        "project_name": {
            "name": "project_name",
            "location": 293,
            "return": [
                "str",
                "Union[str, Pattern]",
                "List[int]"
            ],
            "arguments": {}
        },
        "get_traceback": {
            "name": "get_traceback",
            "location": 327,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_view": {
            "name": "get_view",
            "location": 338,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "window": [
                    "int",
                    "str",
                    "Optional[int]",
                    "dict",
                    "Sequence[Any]"
                ],
                "vid": [
                    "int",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "get_window_view": {
            "name": "get_window_view",
            "location": 348,
            "return": [
                "int",
                "Callable[[bytes], None]",
                "bool",
                "str"
            ],
            "arguments": {
                "vid": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "dict"
                ]
            }
        },
        "cache": {
            "name": "cache",
            "location": 358,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "valid_languages": {
            "name": "valid_languages",
            "location": 384,
            "return": [
                "list[typing.Text]",
                "Callable[[str], bool]",
                "List[object]",
                "Optional[str]",
                "dict",
                "int"
            ],
            "arguments": {}
        },
        "get_interpreter": {
            "name": "get_interpreter",
            "location": 397,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "view": [
                    "str",
                    "bool"
                ]
            }
        },
        "debug_enabled": {
            "name": "debug_enabled",
            "location": 404,
            "return": [
                "bool",
                "str",
                "float",
                "Optional[str]",
                "List[str]",
                "Optional[float]"
            ],
            "arguments": {
                "view": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "cache.wrapper": {
            "name": "wrapper",
            "location": 370,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {}
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/import_validator.py": {
        "Validator.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "list",
                    "List[str]"
                ],
                "filename": [
                    "str",
                    "Callable",
                    "dict"
                ]
            }
        },
        "Validator.is_valid": {
            "name": "is_valid",
            "location": 22,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Validator._validate_import": {
            "name": "_validate_import",
            "location": 33,
            "return": [
                "bool",
                "tuple[typing.Union[typing.Text,bool]]"
            ],
            "arguments": {
                "self": [],
                "module_line": [
                    "str",
                    "bool"
                ],
                "lineno": [
                    "str",
                    "Optional[str]",
                    "float"
                ]
            }
        },
        "Validator._extract_imports": {
            "name": "_extract_imports",
            "location": 60,
            "return": [
                "list[tuple[typing.Union[str,int]]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Validator.__detect_docstring": {
            "name": "__detect_docstring",
            "location": 96,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str",
                    "bytes",
                    "List[str]",
                    "Iterator[str]",
                    "Union[str, bytes]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/info.py": {
        "Repr.__repr__": {
            "name": "__repr__",
            "location": 10,
            "return": [
                "bool",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "cls": [
                    "T",
                    "int",
                    "type",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/ioloop.py": {
        "poll": {
            "name": "poll",
            "location": 243,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "loop": {
            "name": "loop",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "terminate": {
            "name": "terminate",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "restart": {
            "name": "restart",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "IOHandlers.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None",
                "Dict[str, Dict[str, int]]",
                "str",
                "Dict[str, Any]",
                "Union[tuple, list]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IOHandlers.ready_to_read": {
            "name": "ready_to_read",
            "location": 64,
            "return": [
                "list",
                "List['EventHandler']",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "IOHandlers.ready_to_write": {
            "name": "ready_to_write",
            "location": 70,
            "return": [
                "list",
                "List['EventHandler']",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "IOHandlers.register": {
            "name": "register",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "int",
                    "float",
                    "Union[str, int]",
                    "str"
                ]
            }
        },
        "IOHandlers.unregister": {
            "name": "unregister",
            "location": 87,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "str",
                    "int",
                    "logging.LogRecord"
                ]
            }
        },
        "EventHandler.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str",
                    "int"
                ],
                "sock": [
                    "None"
                ]
            }
        },
        "EventHandler.__del__": {
            "name": "__del__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventHandler.fileno": {
            "name": "fileno",
            "location": 119,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventHandler.send": {
            "name": "send",
            "location": 125,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventHandler.recv": {
            "name": "recv",
            "location": 158,
            "return": [
                "None",
                "bool",
                "Optional[int]",
                "Optional[str]",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventHandler.push": {
            "name": "push",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "Union[bytes, bytearray, memoryview]"
                ]
            }
        },
        "EventHandler.handle_read": {
            "name": "handle_read",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "bool",
                    "dict"
                ]
            }
        },
        "EventHandler.process_message": {
            "name": "process_message",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventHandler.ready_to_read": {
            "name": "ready_to_read",
            "location": 220,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventHandler.ready_to_write": {
            "name": "ready_to_write",
            "location": 226,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventHandler.close": {
            "name": "close",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "loop.restart_poll": {
            "name": "restart_poll",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "error": [
                    "Exception"
                ]
            }
        },
        "loop.inner_loop": {
            "name": "inner_loop",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jediusages.py": {
        "JediUsages.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "bool",
                    "str",
                    "Sequence[Dict[str, str]]",
                    "float",
                    "int"
                ]
            }
        },
        "JediUsages.process": {
            "name": "process",
            "location": 21,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "self": [],
                "usages": [
                    "bool",
                    "bytes",
                    "Optional[List[str]]",
                    "float",
                    "Optional[Dict[str, Any]]",
                    "List[AnyStr]",
                    "str"
                ],
                "data": [
                    "bytes",
                    "Dict[str, Any]",
                    "Callable[[bytes], bytes]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "JediUsages._jump": {
            "name": "_jump",
            "location": 44,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "Union[int, str]",
                    "Sequence[Tuple[str, int]]",
                    "Union[str, int, float]"
                ],
                "lineno": [
                    "int",
                    "None"
                ],
                "columno": [
                    "int",
                    "None"
                ],
                "transient": [
                    "bool",
                    "str"
                ]
            }
        },
        "JediUsages._show_options": {
            "name": "_show_options",
            "location": 81,
            "return": [
                "None",
                "str",
                "DefaultDict",
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "defs": [
                    "Union[str, Dict]"
                ],
                "usages": [
                    "bool"
                ]
            }
        },
        "JediUsages._toggle_indicator": {
            "name": "_toggle_indicator",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lineno": [
                    "int",
                    "bool",
                    "List[List[int]]"
                ],
                "columno": [
                    "int",
                    "bool",
                    "dict",
                    "List[List[int]]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jsonclient.py": {
        "AsynClient.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "int",
                    "bool",
                    "Optional[Union[int, float]]",
                    "Optional[int]"
                ],
                "host": [
                    "typing.Text",
                    "str",
                    "int"
                ]
            }
        },
        "AsynClient.ready_to_write": {
            "name": "ready_to_write",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsynClient.handle_read": {
            "name": "handle_read",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Mapping[str, Any]",
                    "dict",
                    "Dict[str, Any]",
                    "float",
                    "List[List[Any]]"
                ]
            }
        },
        "AsynClient.add_callback": {
            "name": "add_callback",
            "location": 62,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "AsynClient.pop_callback": {
            "name": "pop_callback",
            "location": 78,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "hexid": [
                    "int",
                    "sublime.View",
                    "Callable",
                    "str"
                ]
            }
        },
        "AsynClient.process_message": {
            "name": "process_message",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsynClient.send_command": {
            "name": "send_command",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "bool",
                    "Dict[str, str]",
                    "Tuple[Dict[str, Any], Dict[str, Any]]",
                    "Union[List, Dict]"
                ]
            }
        },
        "AsynClient.__repr__": {
            "name": "__repr__",
            "location": 122,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/kite.py": {
        "Integration.enabled": {
            "name": "enabled",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "Integration.enable": {
            "name": "enable",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "Integration.disable": {
            "name": "disable",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/logger.py": {
        "prevent_spam": {
            "name": "prevent_spam",
            "location": 14,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "prevent_spam._remove_from_cache": {
            "name": "_remove_from_cache",
            "location": 20,
            "return": [
                "None",
                "str",
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]",
                "Iterator[Any]"
            ],
            "arguments": {
                "args": []
            }
        },
        "prevent_spam.wrapper": {
            "name": "wrapper",
            "location": 33,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "Callable[..., T]",
                    "Callable",
                    "str",
                    "dict",
                    "callable",
                    "list"
                ]
            }
        },
        "MetaLog.__new__": {
            "name": "__new__",
            "location": 47,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "logging.Logger",
                    "str",
                    "Optional[logging.Logger]",
                    "Type"
                ],
                "name": [
                    "str",
                    "List[Tuple[str, str]]"
                ],
                "bases": [
                    "str",
                    "List[Tuple[str, str]]"
                ],
                "attrs": [
                    "str",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "Log.write": {
            "name": "write",
            "location": 75,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Dict[str, str]",
                    "Type",
                    "Dict[str, Any]"
                ],
                "method": [
                    "dict",
                    "Dict[str, str]",
                    "Type",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/persistent_list.py": {
        "PersistentList.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistentList.__setitem__": {
            "name": "__setitem__",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Optional[\"PNSqlCursor\"]",
                    "Optional[\"PNBuffer\"]",
                    "str",
                    "bool"
                ],
                "value": [
                    "Optional[\"PNSqlCursor\"]",
                    "Optional[\"PNBuffer\"]",
                    "str",
                    "bool"
                ]
            }
        },
        "PersistentList.__delitem__": {
            "name": "__delitem__",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Match",
                    "int"
                ]
            }
        },
        "PersistentList.append": {
            "name": "append",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "Optional[List]",
                    "str",
                    "Optional[Union[bool, int]]"
                ]
            }
        },
        "PersistentList.remove": {
            "name": "remove",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T",
                    "str",
                    "List[T]",
                    "Tuple[float, int]",
                    "List[str]",
                    "list"
                ]
            }
        },
        "PersistentList.pop": {
            "name": "pop",
            "location": 55,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "None",
                    "Optional[int]",
                    "Optional[\"Outcome\"]",
                    "Optional[float]",
                    "Optional[Any]"
                ]
            }
        },
        "PersistentList.sort": {
            "name": "sort",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistentList.load": {
            "name": "load",
            "location": 70,
            "return": [
                "list",
                "str",
                "bool",
                "Any",
                "dict"
            ],
            "arguments": {
                "self": [],
                "fileobj": [
                    "dict",
                    "bytes",
                    "Callable",
                    "Dict[str, Any]"
                ]
            }
        },
        "PersistentList.sync": {
            "name": "sync",
            "location": 76,
            "return": [
                "DefaultDict[int, List[Any]]",
                "OrderedDict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/phantoms.py": {
        "Phantom.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None",
                "Dict[str, Dict[str, int]]",
                "str",
                "Dict[str, Any]",
                "Union[tuple, list]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Phantom.clear_phantoms": {
            "name": "clear_phantoms",
            "location": 33,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "AsyncIterator",
                    "bool",
                    "Union[str, 'Path']"
                ]
            }
        },
        "Phantom.update_phantoms": {
            "name": "update_phantoms",
            "location": 41,
            "return": [
                "None",
                "str",
                "Set[str]",
                "DefaultDict"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "sublime.View"
                ],
                "phantoms": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "Phantom._load_phantom_templates": {
            "name": "_load_phantom_templates",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Phantom._load_css_themes": {
            "name": "_load_css_themes",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Phantom._load_css": {
            "name": "_load_css",
            "location": 101,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "css_file": [
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/progress_bar.py": {
        "ProgressBar.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "messages": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ProgressBar.run": {
            "name": "run",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProgressBar.update": {
            "name": "update",
            "location": 35,
            "return": [
                "None",
                "str",
                "Set[str]",
                "DefaultDict"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "ProgressBar.terminate": {
            "name": "terminate",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "None",
                    "int",
                    "str",
                    "Callable[[str], int]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/tooltips.py": {
        "Tooltip.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None",
                "Dict[str, Dict[str, int]]",
                "str",
                "Dict[str, Any]",
                "Union[tuple, list]"
            ],
            "arguments": {
                "self": [],
                "theme": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Tooltip.show_tooltip": {
            "name": "show_tooltip",
            "location": 36,
            "return": [
                "Iterable[List[T]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "view": [],
                "tooltip": [
                    "int",
                    "Dict[str, str]",
                    "str",
                    "Optional[str]"
                ],
                "content": [
                    "int",
                    "Dict[str, str]",
                    "str",
                    "Optional[str]"
                ],
                "fallback": [
                    "Callable"
                ]
            }
        },
        "Tooltip._generate": {
            "name": "_generate",
            "location": 54,
            "return": [
                "None",
                "Optional[T]",
                "Callable",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": [],
                "tooltip": [
                    "str",
                    "int",
                    "List[Dict[str, str]]"
                ],
                "content": [
                    "Dict[str, str]"
                ]
            }
        },
        "Tooltip._load_tooltips": {
            "name": "_load_tooltips",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tooltip._load_css_themes": {
            "name": "_load_css_themes",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tooltip._load_css": {
            "name": "_load_css",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "css_file": [
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/typing.py": {
        "_qualname": {
            "name": "_qualname",
            "location": 75,
            "return": [
                "str",
                "bool",
                "Type",
                "bytes",
                "List[int]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "_has_type_var": {
            "name": "_has_type_var",
            "location": 271,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "t": [
                    "Optional[str]",
                    "mypy.types.Type"
                ]
            }
        },
        "_eval_type": {
            "name": "_eval_type",
            "location": 275,
            "return": [
                "bool",
                "mypy.types.Type"
            ],
            "arguments": {
                "t": [
                    "Optional[mypy.types.Type]",
                    "mypy.types.CallableType",
                    "Sequence[mypy.types.Type]",
                    "str",
                    "bool",
                    "mypy.types.Type"
                ],
                "globalns": [
                    "mypy.types.CallableType",
                    "Type",
                    "Optional[Type]",
                    "str"
                ],
                "localns": [
                    "mypy.types.CallableType",
                    "Type",
                    "Optional[Type]",
                    "str"
                ]
            }
        },
        "_type_check": {
            "name": "_type_check",
            "location": 282,
            "return": [
                "bool",
                "mypy.types.Type",
                "Tuple[List[str], List[str], List[str]]",
                "Optional[Type]",
                "Optional[mypy.types.CallableType]"
            ],
            "arguments": {
                "arg": [
                    "Optional[str]",
                    "Optional[BaseException]",
                    "Type[Any]",
                    "Type[BaseException]"
                ],
                "msg": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_type_repr": {
            "name": "_type_repr",
            "location": 303,
            "return": [
                "str"
            ],
            "arguments": {
                "obj": [
                    "types.FrameType",
                    "bool",
                    "Callable"
                ]
            }
        },
        "_gorg": {
            "name": "_gorg",
            "location": 855,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "a": [
                    "int"
                ]
            }
        },
        "_geqv": {
            "name": "_geqv",
            "location": 863,
            "return": [
                "Dict[str, Any]",
                "dict",
                "OrderedDict[str, Any]"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float",
                    "str"
                ],
                "b": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "cast": {
            "name": "cast",
            "location": 1078,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "typ": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "val": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_get_defaults": {
            "name": "_get_defaults",
            "location": 1089,
            "return": [
                "bool",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "func": [
                    "str",
                    "Callable",
                    "tuple"
                ]
            }
        },
        "get_type_hints": {
            "name": "get_type_hints",
            "location": 1107,
            "return": [
                "str",
                "int",
                "float",
                "bool"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "globalns": [
                    "Set[str]",
                    "Optional[Pattern]",
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "T",
                    "Dict[str, str]"
                ],
                "localns": [
                    "Set[str]",
                    "Optional[mypy.types.Instance]",
                    "Dict[str, Any]",
                    "str",
                    "Optional[Pattern]",
                    "Optional[Type[BaseException]]",
                    "Optional[Iterable[str]]",
                    "Optional[bool]"
                ]
            }
        },
        "no_type_check": {
            "name": "no_type_check",
            "location": 1149,
            "return": [
                "str",
                "Exception",
                "Dict[str, Any]",
                "Container[str]",
                "int"
            ],
            "arguments": {
                "arg": [
                    "Set[str]",
                    "type",
                    "List[str]"
                ]
            }
        },
        "no_type_check_decorator": {
            "name": "no_type_check_decorator",
            "location": 1167,
            "return": [
                "str",
                "Exception",
                "Dict[str, Any]",
                "Container[str]",
                "int"
            ],
            "arguments": {
                "decorator": [
                    "str",
                    "List[Tuple[Any, Any]]",
                    "bool",
                    "int"
                ]
            }
        },
        "overload": {
            "name": "overload",
            "location": 1183,
            "return": [
                ""
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "NamedTuple": {
            "name": "NamedTuple",
            "location": 1463,
            "return": [
                "mypy.types.Instance",
                "str",
                "int"
            ],
            "arguments": {
                "typename": [
                    "float",
                    "str",
                    "bytes"
                ],
                "fields": [
                    "str",
                    "mypy.types.Type",
                    "Type",
                    "Union[str, 'Type']"
                ]
            }
        },
        "TypingMeta.__new__": {
            "name": "__new__",
            "location": 98,
            "return": [
                "str",
                "Type",
                "Type[Any]",
                "Sequence[Any]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "bases": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Iterable[str]",
                    "Mapping[str, Any]"
                ],
                "namespace": [
                    "str"
                ]
            }
        },
        "TypingMeta.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TypingMeta._eval_type": {
            "name": "_eval_type",
            "location": 107,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "Iterator",
                "int"
            ],
            "arguments": {
                "self": [],
                "globalns": [
                    "mypy.types.Type",
                    "type",
                    "bool"
                ],
                "localns": [
                    "mypy.types.Type",
                    "type",
                    "bool"
                ]
            }
        },
        "TypingMeta._has_type_var": {
            "name": "_has_type_var",
            "location": 117,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypingMeta.__repr__": {
            "name": "__repr__",
            "location": 120,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Final.__new__": {
            "name": "__new__",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_ForwardRef.__new__": {
            "name": "__new__",
            "location": 136,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "dict"
                ],
                "arg": [
                    "Type",
                    "type",
                    "Callable",
                    "Dict[str, Any]"
                ]
            }
        },
        "_ForwardRef._eval_type": {
            "name": "_eval_type",
            "location": 157,
            "return": [
                "int",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "globalns": [
                    "Optional[float]",
                    "Optional[Union[int, str]]",
                    "dict",
                    "type"
                ],
                "localns": [
                    "Optional[mypy.types.Type]",
                    "Dict[str, Tuple[int, int]]",
                    "dict",
                    "Optional[Union[int, str]]"
                ]
            }
        },
        "_ForwardRef.__instancecheck__": {
            "name": "__instancecheck__",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_ForwardRef.__subclasscheck__": {
            "name": "__subclasscheck__",
            "location": 180,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "Optional[int]",
                    "bool",
                    "Type",
                    "complex",
                    "bytes"
                ]
            }
        },
        "_ForwardRef.__repr__": {
            "name": "__repr__",
            "location": 190,
            "return": [
                "List[str]",
                "bool",
                "int",
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TypeAlias.__new__": {
            "name": "__new__",
            "location": 207,
            "return": [
                "float",
                "List[str]",
                "str",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "Callable",
                    "opentrons.types.Mount",
                    "int",
                    "str"
                ]
            }
        },
        "_TypeAlias.__init__": {
            "name": "__init__",
            "location": 220,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]",
                    "Type",
                    "bool",
                    "Optional[List[str]]",
                    "str"
                ],
                "type_var": [
                    "Set[str]",
                    "bool",
                    "Optional[int]",
                    "int",
                    "T"
                ],
                "impl_type": [],
                "type_checker": [
                    "float",
                    "int",
                    "List[str]"
                ]
            }
        },
        "_TypeAlias.__repr__": {
            "name": "__repr__",
            "location": 240,
            "return": [
                "str",
                "list",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TypeAlias.__getitem__": {
            "name": "__getitem__",
            "location": 243,
            "return": [
                "mypy.types.Type",
                "bool",
                "type"
            ],
            "arguments": {
                "self": [],
                "parameter": [
                    "str"
                ]
            }
        },
        "_TypeAlias.__instancecheck__": {
            "name": "__instancecheck__",
            "location": 254,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_TypeAlias.__subclasscheck__": {
            "name": "__subclasscheck__",
            "location": 257,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "dict",
                    "Callable",
                    "Optional[Callable[..., Any]]",
                    "bool"
                ]
            }
        },
        "AnyMeta.__new__": {
            "name": "__new__",
            "location": 323,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, Any]",
                    "Iterable[str]",
                    "bool"
                ],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "Iterable[str]",
                    "bool"
                ],
                "bases": [
                    "str",
                    "Dict[str, Any]",
                    "Iterable[str]",
                    "bool"
                ],
                "namespace": [
                    "str",
                    "Dict[str, Any]",
                    "Iterable[str]",
                    "bool"
                ],
                "_root": [
                    "str",
                    "Dict[str, Any]",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "AnyMeta.__instancecheck__": {
            "name": "__instancecheck__",
            "location": 327,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "AnyMeta.__subclasscheck__": {
            "name": "__subclasscheck__",
            "location": 330,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "type",
                    "list",
                    "Type[T]",
                    "Type[types.C]",
                    "types.StrucInput",
                    "str"
                ]
            }
        },
        "TypeVar.__new__": {
            "name": "__new__",
            "location": 391,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int"
                ],
                "name": [
                    "str",
                    "int"
                ]
            }
        },
        "TypeVar._has_type_var": {
            "name": "_has_type_var",
            "location": 410,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeVar.__repr__": {
            "name": "__repr__",
            "location": 413,
            "return": [
                "str",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeVar.__instancecheck__": {
            "name": "__instancecheck__",
            "location": 422,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TypeVar.__subclasscheck__": {
            "name": "__subclasscheck__",
            "location": 425,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "Type",
                    "\"SpeciesNameComplex\"",
                    "list"
                ]
            }
        },
        "UnionMeta.__new__": {
            "name": "__new__",
            "location": 455,
            "return": [
                "Optional[Any]",
                "bool",
                "Type",
                "int",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[Dict[str, str]]",
                    "Iterable[str]"
                ],
                "name": [
                    "str",
                    "Optional[Dict[str, str]]",
                    "Iterable[str]"
                ],
                "bases": [
                    "str",
                    "Optional[Dict[str, str]]",
                    "Iterable[str]"
                ],
                "namespace": [
                    "str",
                    "Sequence[Any]",
                    "Mapping[str, Any]",
                    "Iterable[str]"
                ],
                "parameters": [
                    "Optional[Any]",
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[List[Any]]",
                    "Optional[bool]",
                    "Optional[\"ValidatorTypes\"]"
                ],
                "_root": [
                    "str",
                    "Optional[Dict[str, str]]",
                    "Iterable[str]"
                ]
            }
        },
        "UnionMeta._eval_type": {
            "name": "_eval_type",
            "location": 505,
            "return": [
                "Union[str, 'Type']",
                "Type",
                "Set[str]",
                "mypy.types.Instance",
                "bool"
            ],
            "arguments": {
                "self": [],
                "globalns": [
                    "mypy.types.Type",
                    "Iterable[Any]"
                ],
                "localns": [
                    "mypy.types.Type",
                    "Iterable[Any]"
                ]
            }
        },
        "UnionMeta._has_type_var": {
            "name": "_has_type_var",
            "location": 514,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnionMeta.__repr__": {
            "name": "__repr__",
            "location": 521,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnionMeta.__getitem__": {
            "name": "__getitem__",
            "location": 528,
            "return": [
                "bool",
                "int",
                "Type",
                "Dict[str, Set[str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "parameters": [
                    "bool",
                    "bytes",
                    "Callable",
                    "ark.types.PrimalItem",
                    "type"
                ]
            }
        },
        "UnionMeta.__eq__": {
            "name": "__eq__",
            "location": 539,
            "return": [
                "str",
                "List[dict]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "T",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "UnionMeta.__hash__": {
            "name": "__hash__",
            "location": 544,
            "return": [
                "int",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnionMeta.__instancecheck__": {
            "name": "__instancecheck__",
            "location": 547,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "UnionMeta.__subclasscheck__": {
            "name": "__subclasscheck__",
            "location": 550,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "int",
                    "T",
                    "str",
                    "Type[Any]",
                    "List[int]"
                ]
            }
        },
        "OptionalMeta.__new__": {
            "name": "__new__",
            "location": 629,
            "return": [
                "Optional[Any]",
                "bool",
                "Type",
                "int",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, Any]",
                    "Iterable[str]",
                    "bool"
                ],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "Iterable[str]",
                    "bool"
                ],
                "bases": [
                    "str",
                    "Dict[str, Any]",
                    "Iterable[str]",
                    "bool"
                ],
                "namespace": [
                    "str",
                    "Dict[str, Any]",
                    "Iterable[str]",
                    "bool"
                ],
                "_root": [
                    "str",
                    "Dict[str, Any]",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "OptionalMeta.__getitem__": {
            "name": "__getitem__",
            "location": 632,
            "return": [
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "Sequence['cirq.Qid']",
                    "bool"
                ]
            }
        },
        "TupleMeta.__new__": {
            "name": "__new__",
            "location": 649,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Any]"
                ],
                "name": [
                    "str",
                    "bool",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Any]"
                ],
                "bases": [
                    "str",
                    "bool",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Any]"
                ],
                "namespace": [
                    "str",
                    "bool",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Any]"
                ],
                "parameters": [
                    "Optional[str]",
                    "int",
                    "Sequence",
                    "bool"
                ],
                "use_ellipsis": [
                    "bool",
                    "str"
                ],
                "_root": [
                    "str",
                    "bool",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "TupleMeta._has_type_var": {
            "name": "_has_type_var",
            "location": 656,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TupleMeta._eval_type": {
            "name": "_eval_type",
            "location": 663,
            "return": [
                "Union[str, 'Type']",
                "Type",
                "Set[str]",
                "mypy.types.Instance",
                "bool"
            ],
            "arguments": {
                "self": [],
                "globalns": [
                    "mypy.types.Type",
                    "Iterable[Any]"
                ],
                "localns": [
                    "mypy.types.Type",
                    "Iterable[Any]"
                ]
            }
        },
        "TupleMeta.__repr__": {
            "name": "__repr__",
            "location": 674,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TupleMeta.__getitem__": {
            "name": "__getitem__",
            "location": 684,
            "return": [
                "bool",
                "int",
                "Dict[str, Set[str]]",
                "Type",
                "Dict[str, Any]",
                "type"
            ],
            "arguments": {
                "self": [],
                "parameters": [
                    "bool",
                    "List[str]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "TupleMeta.__eq__": {
            "name": "__eq__",
            "location": 701,
            "return": [
                "Tuple[Any, Any, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TupleMeta.__hash__": {
            "name": "__hash__",
            "location": 706,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TupleMeta.__instancecheck__": {
            "name": "__instancecheck__",
            "location": 709,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TupleMeta.__subclasscheck__": {
            "name": "__subclasscheck__",
            "location": 712,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "IO[bytes]",
                    "Callable",
                    "types.StrucInput"
                ]
            }
        },
        "CallableMeta.__new__": {
            "name": "__new__",
            "location": 750,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Sequence[Any]",
                    "Mapping[str, Any]"
                ],
                "name": [
                    "str",
                    "Sequence[Any]",
                    "Mapping[str, Any]"
                ],
                "bases": [
                    "str",
                    "Sequence[Any]",
                    "Mapping[str, Any]"
                ],
                "namespace": [
                    "str",
                    "Sequence[Any]",
                    "Mapping[str, Any]"
                ],
                "_root": [
                    "str",
                    "Sequence[Any]",
                    "Mapping[str, Any]"
                ],
                "args": [],
                "result": [
                    "Optional[str]",
                    "Optional[List[str]]",
                    "str",
                    "Type"
                ]
            }
        },
        "CallableMeta._has_type_var": {
            "name": "_has_type_var",
            "location": 769,
            "return": [
                "bool",
                "Tuple[List[str], List[mypy.types.Type], Set[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallableMeta._eval_type": {
            "name": "_eval_type",
            "location": 776,
            "return": [
                "Set[str]",
                "type",
                "mypy.types.Instance",
                "Dict[str, Any]",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "globalns": [
                    "mypy.types.Type.dDictType",
                    "type",
                    "mypy.types.TypedDictType"
                ],
                "localns": [
                    "mypy.types.Type.dDictType",
                    "type",
                    "mypy.types.TypedDictType"
                ]
            }
        },
        "CallableMeta.__repr__": {
            "name": "__repr__",
            "location": 790,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallableMeta.__getitem__": {
            "name": "__getitem__",
            "location": 801,
            "return": [
                "bool",
                "int",
                "Dict[str, Any]",
                "Type"
            ],
            "arguments": {
                "self": [],
                "parameters": [
                    "Callable",
                    "Dict[str, Any]",
                    "Callable[..., T]"
                ]
            }
        },
        "CallableMeta.__eq__": {
            "name": "__eq__",
            "location": 812,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int"
                ]
            }
        },
        "CallableMeta.__hash__": {
            "name": "__hash__",
            "location": 818,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallableMeta.__instancecheck__": {
            "name": "__instancecheck__",
            "location": 821,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "CallableMeta.__subclasscheck__": {
            "name": "__subclasscheck__",
            "location": 830,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "\"WriteBack\"",
                    "ItemsView",
                    "Optional[Type]",
                    "Tuple[str, int]",
                    "int",
                    "dict"
                ]
            }
        },
        "GenericMeta.__new__": {
            "name": "__new__",
            "location": 891,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "bases": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "namespace": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "parameters": [
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[Any]",
                    "Optional[List[str]]",
                    "str"
                ],
                "origin": [
                    "str",
                    "List[str]",
                    "Type[T]",
                    "Sequence[Dict[str, str]]",
                    "dict",
                    "int"
                ],
                "extra": [
                    "Optional[str]",
                    "Callable",
                    "bool",
                    "Optional[Any]",
                    "str"
                ]
            }
        },
        "GenericMeta._has_type_var": {
            "name": "_has_type_var",
            "location": 929,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericMeta.__repr__": {
            "name": "__repr__",
            "location": 936,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericMeta.__eq__": {
            "name": "__eq__",
            "location": 943,
            "return": [
                "Optional[int]",
                "int",
                "str",
                "float",
                "Generator"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Any"
                ]
            }
        },
        "GenericMeta.__hash__": {
            "name": "__hash__",
            "location": 949,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericMeta.__getitem__": {
            "name": "__getitem__",
            "location": 952,
            "return": [
                "int",
                "Type",
                "Dict[str, Any]",
                "Dict[str, Set[str]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "float",
                    "List[str]"
                ]
            }
        },
        "GenericMeta.__instancecheck__": {
            "name": "__instancecheck__",
            "location": 990,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "GenericMeta.__subclasscheck__": {
            "name": "__subclasscheck__",
            "location": 998,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "slice",
                    "dict",
                    "str"
                ]
            }
        },
        "Generic.__new__": {
            "name": "__new__",
            "location": 1069,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "mypy.types.CallableType",
                    "bytes",
                    "Iterable[str]",
                    "Type"
                ]
            }
        },
        "no_type_check_decorator.wrapped_decorator": {
            "name": "wrapped_decorator",
            "location": 1175,
            "return": [
                "mypy.types.Type",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "types.Resolver",
                "str"
            ],
            "arguments": {}
        },
        "_ProtocolMeta.__instancecheck__": {
            "name": "__instancecheck__",
            "location": 1194,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_ProtocolMeta.__subclasscheck__": {
            "name": "__subclasscheck__",
            "location": 1197,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "dict",
                    "Callable"
                ]
            }
        },
        "_ProtocolMeta._get_protocol_attrs": {
            "name": "_get_protocol_attrs",
            "location": 1214,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupportsInt.__int__": {
            "name": "__int__",
            "location": 1276,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupportsFloat.__float__": {
            "name": "__float__",
            "location": 1284,
            "return": [
                "builtins.float"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupportsComplex.__complex__": {
            "name": "__complex__",
            "location": 1292,
            "return": [
                "builtins.complex"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupportsBytes.__bytes__": {
            "name": "__bytes__",
            "location": 1300,
            "return": [
                "builtins.bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupportsAbs.__abs__": {
            "name": "__abs__",
            "location": 1308,
            "return": [
                "T_co"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupportsRound.__round__": {
            "name": "__round__",
            "location": 1316,
            "return": [
                "T_co"
            ],
            "arguments": {
                "self": [],
                "ndigits": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Reversible.__reversed__": {
            "name": "__reversed__",
            "location": 1324,
            "return": [
                "'Iterator[T_co]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "List.__new__": {
            "name": "__new__",
            "location": 1375,
            "return": [
                "List[str]",
                "str",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "Set.__new__": {
            "name": "__new__",
            "location": 1384,
            "return": [
                "int",
                "Type",
                "List[str]",
                "Dict[str, Tuple[int, int]]",
                "Dict[str, Union[str, Any]]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "int",
                    "Tuple[str, str]",
                    "Dict[str, Any]",
                    "Iterator[T]"
                ]
            }
        },
        "_FrozenSetMeta.__subclasscheck__": {
            "name": "__subclasscheck__",
            "location": 1399,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "T",
                    "Iterable[Any]"
                ]
            }
        },
        "FrozenSet.__new__": {
            "name": "__new__",
            "location": 1408,
            "return": [
                "bool",
                "Optional[Any]"
            ],
            "arguments": {
                "cls": [
                    "type",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "Dict.__new__": {
            "name": "__new__",
            "location": 1436,
            "return": [
                "Dict[str, Any]",
                "str",
                "Dict[str, float]",
                "int",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict",
                    "List[dict]",
                    "Iterable"
                ]
            }
        },
        "Generator.__new__": {
            "name": "__new__",
            "location": 1456,
            "return": [
                "bool",
                "Optional[Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "IO.mode": {
            "name": "mode",
            "location": 1506,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IO.name": {
            "name": "name",
            "location": 1510,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IO.close": {
            "name": "close",
            "location": 1514,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IO.closed": {
            "name": "closed",
            "location": 1518,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IO.fileno": {
            "name": "fileno",
            "location": 1522,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": []
            }
        },
        "IO.flush": {
            "name": "flush",
            "location": 1526,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IO.isatty": {
            "name": "isatty",
            "location": 1530,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IO.read": {
            "name": "read",
            "location": 1534,
            "return": [
                "AnyStr"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "IO.readable": {
            "name": "readable",
            "location": 1538,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IO.readline": {
            "name": "readline",
            "location": 1542,
            "return": [
                "AnyStr"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "IO.readlines": {
            "name": "readlines",
            "location": 1546,
            "return": [
                "List[AnyStr]"
            ],
            "arguments": {
                "self": [],
                "hint": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "IO.seek": {
            "name": "seek",
            "location": 1550,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "whence": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "IO.seekable": {
            "name": "seekable",
            "location": 1554,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IO.tell": {
            "name": "tell",
            "location": 1558,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": []
            }
        },
        "IO.truncate": {
            "name": "truncate",
            "location": 1562,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "IO.writable": {
            "name": "writable",
            "location": 1566,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IO.write": {
            "name": "write",
            "location": 1570,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "AnyStr",
                    "Union[bytes, bytearray]",
                    "Iterable[T]",
                    "bool",
                    "str"
                ]
            }
        },
        "IO.writelines": {
            "name": "writelines",
            "location": 1574,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "List[AnyStr]",
                    "str",
                    "List[str]",
                    "Iterable[str]",
                    "Iterable[Sequence[str]]"
                ]
            }
        },
        "IO.__enter__": {
            "name": "__enter__",
            "location": 1578,
            "return": [
                "'IO[AnyStr]'"
            ],
            "arguments": {
                "self": []
            }
        },
        "IO.__exit__": {
            "name": "__exit__",
            "location": 1582,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Optional[BaseException]"
                ],
                "value": [
                    "Optional[BaseException]"
                ],
                "traceback": [
                    "Optional[BaseException]"
                ]
            }
        },
        "BinaryIO.write": {
            "name": "write",
            "location": 1592,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "AnyStr",
                    "Union[bytes, bytearray]",
                    "Iterable[T]",
                    "bool",
                    "str"
                ]
            }
        },
        "BinaryIO.__enter__": {
            "name": "__enter__",
            "location": 1596,
            "return": [
                "'BinaryIO'"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextIO.buffer": {
            "name": "buffer",
            "location": 1606,
            "return": [
                "BinaryIO"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextIO.encoding": {
            "name": "encoding",
            "location": 1610,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextIO.errors": {
            "name": "errors",
            "location": 1614,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextIO.line_buffering": {
            "name": "line_buffering",
            "location": 1618,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextIO.newlines": {
            "name": "newlines",
            "location": 1622,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextIO.__enter__": {
            "name": "__enter__",
            "location": 1626,
            "return": [
                "'TextIO'"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/unix_socket.py": {
        "UnixSocketPath.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "str",
                    "Optional[str]",
                    "float",
                    "bool",
                    "Callable"
                ]
            }
        },
        "UnixSocketPath.socket": {
            "name": "socket",
            "location": 31,
            "return": [
                "str",
                "TextIO",
                "BinaryIO",
                "tuple",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/vagrant.py": {
        "VagrantBase.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "str",
                    "bool",
                    "dict"
                ],
                "vagrant_root": [
                    "Callable"
                ],
                "machine": [
                    "bytes",
                    "Callable",
                    "str",
                    "list",
                    "dict"
                ]
            }
        },
        "VagrantBase.wait_answer": {
            "name": "wait_answer",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "VagrantInit.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "str",
                    "Optional[str]"
                ],
                "vagrant_root": [
                    "str",
                    "Optional[str]"
                ],
                "box": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "VagrantInit.run": {
            "name": "run",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VagrantUp.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "bool",
                    "str",
                    "Optional[\"Game\"]",
                    "Optional[Callable]"
                ],
                "vagrant_root": [
                    "bool",
                    "str",
                    "Optional[\"Game\"]",
                    "Optional[Callable]"
                ],
                "machine": [
                    "None",
                    "bool",
                    "str",
                    "Optional[\"Game\"]",
                    "Optional[Callable]"
                ]
            }
        },
        "VagrantUp.run": {
            "name": "run",
            "location": 63,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VagrantReload.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "str",
                    "Tuple[int, int]",
                    "Container[T]"
                ],
                "vagrant_root": [
                    "str",
                    "Tuple[int, int]",
                    "Container[T]"
                ],
                "machine": [
                    "None",
                    "str",
                    "Tuple[int, int]",
                    "Container[T]"
                ]
            }
        },
        "VagrantReload.run": {
            "name": "run",
            "location": 78,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VagrantStatus.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "str",
                    "Optional[\"Game\"]",
                    "bool"
                ],
                "vagrant_root": [
                    "str",
                    "Optional[\"Game\"]",
                    "bool"
                ],
                "machine": [
                    "None",
                    "str",
                    "Optional[\"Game\"]",
                    "bool"
                ],
                "full": [
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "VagrantStatus.run": {
            "name": "run",
            "location": 94,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VagrantSSH.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "str",
                    "Tuple[int, int]",
                    "Container[T]"
                ],
                "vagrant_root": [
                    "str",
                    "Tuple[int, int]",
                    "Container[T]"
                ],
                "cmd": [
                    "str",
                    "bool",
                    "dict"
                ],
                "machine": [
                    "None",
                    "str",
                    "Tuple[int, int]",
                    "Container[T]"
                ]
            }
        },
        "VagrantSSH.run": {
            "name": "run",
            "location": 122,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VagrantIPAddress.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "str",
                    "Dict[str, Any]",
                    "IO[bytes]",
                    "List[str]"
                ],
                "machine": [
                    "None",
                    "str",
                    "Dict[str, str]"
                ],
                "iface": [
                    "typing.Text",
                    "Tuple['cirq.Qid']",
                    "str",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "VagrantIPAddressGlobal.__init__": {
            "name": "__init__",
            "location": 158,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "machine": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "iface": [
                    "typing.Text",
                    "Tuple['cirq.Qid']",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "int"
                ]
            }
        },
        "VagrantMachineGlobalInfo.__init__": {
            "name": "__init__",
            "location": 182,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "machine": [
                    "str",
                    "Mapping[str, Any]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "VagrantStartMachine.__init__": {
            "name": "__init__",
            "location": 218,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "machine": [
                    "dict"
                ],
                "directory": [
                    "BinaryIO",
                    "Optional[str]",
                    "IO",
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/worker.py": {},
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/__init__.py": {},
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep_wrapper.py": {
        "AnacondaAutopep8.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "List[str]",
                    "str",
                    "Optional[List[str]]",
                    "Union[str, List[str]]",
                    "Optional[str]"
                ],
                "code": [
                    "str",
                    "int",
                    "float",
                    "Dict[str, Any]",
                    "bool"
                ],
                "callback": [
                    "str",
                    "int",
                    "float",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "AnacondaAutopep8.run": {
            "name": "run",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnacondaAutopep8.parse_settings": {
            "name": "parse_settings",
            "location": 32,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "set"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "str",
                    "List[str]",
                    "list",
                    "int"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/__init__.py": {},
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/autopep8.py": {
        "open_with_encoding": {
            "name": "open_with_encoding",
            "location": 128,
            "return": [
                "TextIO",
                "cdp.io.StreamHandle",
                "IO[str]",
                "Pattern",
                "BinaryIO"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "bool"
                ],
                "encoding": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "bool"
                ],
                "mode": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ],
                "limit_byte_check": [
                    "bool",
                    "Iterable[str]",
                    "Sequence[str]",
                    "int"
                ]
            }
        },
        "detect_encoding": {
            "name": "detect_encoding",
            "location": 138,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "limit_byte_check": [
                    "int",
                    "bytes",
                    "float",
                    "Tuple[bytes, str]",
                    "Tuple[int, int]",
                    "dict"
                ]
            }
        },
        "readlines_from_file": {
            "name": "readlines_from_file",
            "location": 153,
            "return": [
                "Tuple[str, str]",
                "str",
                "int"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Dict[str, Dict[str, str]]",
                    "List[str]",
                    "List[Tuple[int, int]]",
                    "List[Tuple[int, int, int, int]]"
                ]
            }
        },
        "extended_blank_lines": {
            "name": "extended_blank_lines",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {
                "logical_line": [
                    "str"
                ],
                "blank_lines": [
                    "str",
                    "int",
                    "Optional[List[str]]"
                ],
                "blank_before": [
                    "str",
                    "float"
                ],
                "indent_level": [
                    "str",
                    "float"
                ],
                "previous_logical": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "continued_indentation": {
            "name": "continued_indentation",
            "location": 185,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "logical_line": [
                    "int",
                    "float",
                    "Optional[str]",
                    "bool",
                    "Optional[bool]",
                    "str"
                ],
                "tokens": [
                    "List[str]",
                    "Dict[str, Any]",
                    "dict"
                ],
                "indent_level": [
                    "int",
                    "float",
                    "Tuple[int, int]",
                    "str",
                    "bool"
                ],
                "indent_char": [
                    "Union[int, float]",
                    "int",
                    "Tuple[int, int]",
                    "bool"
                ],
                "noqa": [
                    "int",
                    "float",
                    "Optional[str]",
                    "bool",
                    "Optional[bool]",
                    "str"
                ]
            }
        },
        "get_index_offset_contents": {
            "name": "get_index_offset_contents",
            "location": 1007,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "result": [
                    "str",
                    "dict",
                    "List[str]"
                ],
                "source": [
                    "str"
                ]
            }
        },
        "get_fixed_long_line": {
            "name": "get_fixed_long_line",
            "location": 1015,
            "return": [
                "Optional[int]",
                "bool",
                "str",
                "Optional[Dict]"
            ],
            "arguments": {
                "target": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Set[str]",
                    "Callable"
                ],
                "previous_line": [
                    "List[bool]",
                    "int",
                    "List[float]",
                    "list"
                ],
                "original": [
                    "bool",
                    "int"
                ],
                "indent_word": [
                    "int",
                    "list",
                    "List[float]",
                    "List[int]",
                    "List[bool]"
                ],
                "max_line_length": [
                    "int",
                    "list",
                    "List[float]",
                    "List[int]",
                    "List[bool]"
                ],
                "aggressive": [
                    "List[bool]",
                    "int",
                    "List[float]",
                    "list"
                ],
                "experimental": [
                    "int",
                    "list",
                    "List[float]",
                    "List[int]",
                    "List[bool]"
                ],
                "verbose": [
                    "bool",
                    "int",
                    "List[int]"
                ]
            }
        },
        "longest_line_length": {
            "name": "longest_line_length",
            "location": 1061,
            "return": [
                "str",
                "List[int]",
                "List[List[int]]",
                "Optional[dict]",
                "List[str]",
                "list"
            ],
            "arguments": {
                "code": [
                    "str",
                    "int"
                ]
            }
        },
        "join_logical_line": {
            "name": "join_logical_line",
            "location": 1066,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "Dict[str, int]"
            ],
            "arguments": {
                "logical_line": [
                    "str"
                ]
            }
        },
        "untokenize_without_newlines": {
            "name": "untokenize_without_newlines",
            "location": 1074,
            "return": [
                "str"
            ],
            "arguments": {
                "tokens": [
                    "str",
                    "Iterator[str]",
                    "List[str]"
                ]
            }
        },
        "_find_logical": {
            "name": "_find_logical",
            "location": 1102,
            "return": [
                "str",
                "Union[List[str], List[Any]]",
                "bool"
            ],
            "arguments": {
                "source_lines": [
                    "str",
                    "Union[int, str]"
                ]
            }
        },
        "_get_logical": {
            "name": "_get_logical",
            "location": 1128,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "source_lines": [
                    "int",
                    "str"
                ],
                "result": [
                    "bool",
                    "int",
                    "Tuple[str, str, str, str]",
                    "str",
                    "Sequence[str]"
                ],
                "logical_start": [
                    "int",
                    "List[float]",
                    "List[int]",
                    "str",
                    "bool",
                    "list"
                ],
                "logical_end": [
                    "List[List[int]]",
                    "str",
                    "List[int]",
                    "int"
                ]
            }
        },
        "get_item": {
            "name": "get_item",
            "location": 1151,
            "return": [
                "bool",
                "str",
                "int",
                "Optional[str]",
                "Optional[List[str]]",
                "float"
            ],
            "arguments": {
                "items": [
                    "int",
                    "List[int]",
                    "List[bytes]",
                    "list",
                    "Sequence[Any]"
                ],
                "index": [
                    "int",
                    "List[int]",
                    "List[bytes]",
                    "list",
                    "Sequence[Any]"
                ],
                "default": [
                    "str",
                    "Optional[list]"
                ]
            }
        },
        "reindent": {
            "name": "reindent",
            "location": 1158,
            "return": [
                "str",
                "tuple",
                "List[List[int]]"
            ],
            "arguments": {
                "source": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Iterable[str]",
                    "int"
                ],
                "indent_size": [
                    "list",
                    "Sequence[str]",
                    "bool",
                    "Optional[List[str]]"
                ]
            }
        },
        "code_almost_equal": {
            "name": "code_almost_equal",
            "location": 1164,
            "return": [
                "bool"
            ],
            "arguments": {
                "a": [
                    "Sequence[T]",
                    "Tuple[int, int]",
                    "BinaryIO",
                    "List[bool]",
                    "int"
                ],
                "b": [
                    "int"
                ]
            }
        },
        "split_and_strip_non_empty_lines": {
            "name": "split_and_strip_non_empty_lines",
            "location": 1183,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "fix_e265": {
            "name": "fix_e265",
            "location": 1192,
            "return": [
                "list",
                "str",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "source": [
                    "str"
                ],
                "aggressive": [
                    "int",
                    "str"
                ]
            }
        },
        "refactor": {
            "name": "refactor",
            "location": 1232,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "source": [
                    "str",
                    "Optional[str]",
                    "Union[str, None]"
                ],
                "fixer_names": [
                    "str",
                    "Optional[str]"
                ],
                "ignore": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Union[str, None]"
                ],
                "filename": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "code_to_2to3": {
            "name": "code_to_2to3",
            "location": 1256,
            "return": [
                "float",
                "Sequence[float]",
                "Tuple[int, int]",
                "tuple"
            ],
            "arguments": {
                "select": [
                    "str",
                    "Union[str, IO]",
                    "Optional[str]",
                    "IO",
                    "dict",
                    "IO[str]"
                ],
                "ignore": [
                    "str",
                    "Union[str, IO]",
                    "Optional[str]",
                    "IO",
                    "dict",
                    "IO[str]"
                ]
            }
        },
        "fix_2to3": {
            "name": "fix_2to3",
            "location": 1264,
            "return": [
                "bytes",
                "List[str]",
                "Callable"
            ],
            "arguments": {
                "source": [
                    "str",
                    "int",
                    "bool",
                    "dict"
                ],
                "aggressive": [
                    "Union[bool, Iterable[str]]",
                    "str",
                    "bool"
                ],
                "select": [
                    "bool",
                    "int",
                    "str",
                    "dict"
                ],
                "ignore": [
                    "bool",
                    "int",
                    "str",
                    "dict"
                ],
                "filename": [
                    "str",
                    "int",
                    "bool",
                    "dict"
                ]
            }
        },
        "fix_w602": {
            "name": "fix_w602",
            "location": 1279,
            "return": [
                "str"
            ],
            "arguments": {
                "source": [
                    "str",
                    "Optional[str]"
                ],
                "aggressive": [
                    "str",
                    "Iterable[Union[str, os.PathLike]]",
                    "Union[str, bytes]",
                    "Union[str, bytes, IO[bytes]]",
                    "Optional[Tuple[Any, Any]]"
                ]
            }
        },
        "find_newline": {
            "name": "find_newline",
            "location": 1288,
            "return": [
                "bool",
                "Tuple[int, int]"
            ],
            "arguments": {
                "source": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_get_indentword": {
            "name": "_get_indentword",
            "location": 1308,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "source": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "_get_indentation": {
            "name": "_get_indentation",
            "location": 1321,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "line": [
                    "str",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "get_diff_text": {
            "name": "get_diff_text",
            "location": 1330,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "old": [
                    "str",
                    "Optional[str]",
                    "IO[bytes]"
                ],
                "new": [
                    "str",
                    "Optional[str]",
                    "IO[bytes]"
                ],
                "filename": [
                    "str",
                    "Optional[str]",
                    "IO[bytes]"
                ]
            }
        },
        "_priority_key": {
            "name": "_priority_key",
            "location": 1350,
            "return": [
                "str",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "pep8_result": [
                    "bool",
                    "dict",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "shorten_line": {
            "name": "shorten_line",
            "location": 1385,
            "return": [
                ""
            ],
            "arguments": {
                "tokens": [
                    "str",
                    "int",
                    "bool",
                    "Optional[int]",
                    "List[Dict[str, Any]]",
                    "Union[bool, List[str]]"
                ],
                "source": [
                    "str",
                    "int",
                    "bool",
                    "Optional[int]",
                    "List[Dict[str, Any]]",
                    "Union[bool, List[str]]"
                ],
                "indentation": [
                    "str",
                    "int",
                    "bool",
                    "Optional[int]",
                    "List[Dict[str, Any]]",
                    "Union[bool, List[str]]"
                ],
                "indent_word": [
                    "str",
                    "int",
                    "bool",
                    "Optional[int]",
                    "List[Dict[str, Any]]",
                    "Union[bool, List[str]]"
                ],
                "max_line_length": [
                    "bool",
                    "List[Dict]",
                    "int"
                ],
                "aggressive": [
                    "str",
                    "int",
                    "bool",
                    "Optional[int]",
                    "List[Dict[str, Any]]",
                    "Union[bool, List[str]]"
                ],
                "experimental": [
                    "bool",
                    "float"
                ],
                "previous_line": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "int",
                    "List[Dict[str, Any]]",
                    "Union[bool, List[str]]"
                ]
            }
        },
        "_shorten_line": {
            "name": "_shorten_line",
            "location": 1423,
            "return": [
                ""
            ],
            "arguments": {
                "tokens": [
                    "str",
                    "Dict[str, List[str]]",
                    "Optional[str]",
                    "bool"
                ],
                "source": [
                    "int",
                    "str",
                    "Union[int, float]",
                    "bool"
                ],
                "indentation": [
                    "bytes",
                    "int",
                    "tuple",
                    "Optional[List[str]]"
                ],
                "indent_word": [
                    "int",
                    "bool",
                    "Callable[[str], Any]",
                    "Callable"
                ],
                "aggressive": [
                    "int",
                    "bool",
                    "Callable[[str], Any]",
                    "Callable"
                ],
                "previous_line": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "_parse_container": {
            "name": "_parse_container",
            "location": 2135,
            "return": [],
            "arguments": {
                "tokens": [
                    "bool",
                    "int",
                    "Optional[bool]",
                    "Optional[Dict[str, Any]]"
                ],
                "index": [
                    "int",
                    "Dict[str, kedro.io.core.AbstractDataSet]",
                    "Tuple[int, int]",
                    "float",
                    "Tuple[List[int], int]"
                ],
                "for_or_if": [
                    "bool",
                    "str"
                ]
            }
        },
        "_parse_tokens": {
            "name": "_parse_tokens",
            "location": 2194,
            "return": [
                "Optional[int]",
                "Optional[bool]"
            ],
            "arguments": {
                "tokens": [
                    "List[str]",
                    "str",
                    "List[Dict[str, Any]]",
                    "Iterable"
                ]
            }
        },
        "_reflow_lines": {
            "name": "_reflow_lines",
            "location": 2227,
            "return": [
                "Optional[float]",
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "parsed_tokens": [
                    "bool",
                    "Optional[List[Any]]",
                    "List[str]"
                ],
                "indentation": [
                    "int",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]"
                ],
                "max_line_length": [
                    "int",
                    "Optional[int]",
                    "List[str]",
                    "str",
                    "tuple"
                ],
                "start_on_prefix_line": [
                    "Set[str]",
                    "list",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "_shorten_line_at_tokens_new": {
            "name": "_shorten_line_at_tokens_new",
            "location": 2269,
            "return": [
                ""
            ],
            "arguments": {
                "tokens": [
                    "str",
                    "int"
                ],
                "source": [
                    "int",
                    "str",
                    "Dict[int, int]",
                    "Optional[Mapping]",
                    "Type['AbstractIntegrationConversation']"
                ],
                "indentation": [
                    "str",
                    "Tuple[str]",
                    "bool",
                    "IO"
                ],
                "max_line_length": []
            }
        },
        "_shorten_line_at_tokens": {
            "name": "_shorten_line_at_tokens",
            "location": 2297,
            "return": [
                "str",
                "Optional[int]",
                "dict",
                "bool",
                "Optional[str]",
                "Optional[Any]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "tokens": [
                    "Optional[Dict[str, Any]]",
                    "str",
                    "Optional[dict]",
                    "dict",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "source": [
                    "str",
                    "bool",
                    "List[str]",
                    "List[Optional[str]]"
                ],
                "indentation": [
                    "str",
                    "Dict[int, bool]",
                    "Optional[str]"
                ],
                "indent_word": [
                    "str",
                    "Optional[str]",
                    "Optional[bool]",
                    "bool"
                ],
                "key_token_strings": [
                    "str",
                    "bool"
                ],
                "aggressive": [
                    "str",
                    "Dict[int, bool]",
                    "Optional[str]"
                ]
            }
        },
        "token_offsets": {
            "name": "token_offsets",
            "location": 2376,
            "return": [
                ""
            ],
            "arguments": {
                "tokens": [
                    "bool",
                    "str"
                ]
            }
        },
        "normalize_multiline": {
            "name": "normalize_multiline",
            "location": 2407,
            "return": [
                "str",
                "bool",
                "Optional[int]",
                "Set[str]",
                "float"
            ],
            "arguments": {
                "line": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "fix_whitespace": {
            "name": "fix_whitespace",
            "location": 2427,
            "return": [
                "str",
                "list",
                "Sequence[str]",
                "List[str]",
                "Set[str]"
            ],
            "arguments": {
                "line": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "offset": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "replacement": [
                    "str",
                    "Tuple[str, str]",
                    "List[str]"
                ]
            }
        },
        "_execute_pep8": {
            "name": "_execute_pep8",
            "location": 2438,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "pep8_options": [
                    "str",
                    "bool",
                    "int",
                    "list",
                    "tuple"
                ],
                "source": [
                    "str",
                    "bool",
                    "int",
                    "list",
                    "tuple"
                ]
            }
        },
        "_remove_leading_and_normalize": {
            "name": "_remove_leading_and_normalize",
            "location": 2476,
            "return": [
                "List[str]",
                "Sequence[str]",
                "int",
                "str"
            ],
            "arguments": {
                "line": [
                    "str",
                    "List[str]",
                    "bytes",
                    "Iterator[str]"
                ]
            }
        },
        "_reindent_stats": {
            "name": "_reindent_stats",
            "location": 2603,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tokens": [
                    "str",
                    "Iterator[str]",
                    "List[str]"
                ]
            }
        },
        "_leading_space_count": {
            "name": "_leading_space_count",
            "location": 2654,
            "return": [
                "int",
                "slice",
                "str",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "line": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "refactor_with_2to3": {
            "name": "refactor_with_2to3",
            "location": 2662,
            "return": [
                "str",
                "type",
                "Sequence[str]"
            ],
            "arguments": {
                "source_text": [
                    "str",
                    "bool"
                ],
                "fixer_names": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "filename": [
                    "str",
                    "bool"
                ]
            }
        },
        "check_syntax": {
            "name": "check_syntax",
            "location": 2680,
            "return": [
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "code": [
                    "str",
                    "int"
                ]
            }
        },
        "filter_results": {
            "name": "filter_results",
            "location": 2688,
            "return": [
                ""
            ],
            "arguments": {
                "source": [
                    "str",
                    "bool"
                ],
                "results": [
                    "str",
                    "int"
                ],
                "aggressive": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "multiline_string_lines": {
            "name": "multiline_string_lines",
            "location": 2744,
            "return": [
                "str",
                "Iterable[str]",
                "int"
            ],
            "arguments": {
                "source": [
                    "str",
                    "Optional[str]",
                    "List[Tuple[int, int]]",
                    "int"
                ],
                "include_docstrings": [
                    "str",
                    "Type"
                ]
            }
        },
        "commented_out_code_lines": {
            "name": "commented_out_code_lines",
            "location": 2776,
            "return": [
                "str",
                "Sequence[str]",
                "Set[str]",
                "int",
                "Dict[str, List[Any]]"
            ],
            "arguments": {
                "source": [
                    "str",
                    "Optional[str]",
                    "TextIO",
                    "float"
                ]
            }
        },
        "shorten_comment": {
            "name": "shorten_comment",
            "location": 2809,
            "return": [
                "int",
                "Literal",
                "float",
                "str",
                "bool"
            ],
            "arguments": {
                "line": [
                    "List[int]",
                    "int"
                ],
                "max_line_length": [
                    "List[int]",
                    "str"
                ],
                "last_comment": [
                    "str"
                ]
            }
        },
        "normalize_line_endings": {
            "name": "normalize_line_endings",
            "location": 2844,
            "return": [
                "str",
                "bool",
                "int",
                "Union[List[str], List[Any]]"
            ],
            "arguments": {
                "lines": [
                    "str",
                    "bytes"
                ],
                "newline": [
                    "str",
                    "bytes"
                ]
            }
        },
        "mutual_startswith": {
            "name": "mutual_startswith",
            "location": 2853,
            "return": [
                "int",
                "str",
                "Union[bytes, bytearray]",
                "bytearray",
                "bool"
            ],
            "arguments": {
                "a": [
                    "str",
                    "bytes",
                    "Tuple[str, int]",
                    "int"
                ],
                "b": [
                    "str",
                    "bytes",
                    "Tuple[str, int]",
                    "int"
                ]
            }
        },
        "code_match": {
            "name": "code_match",
            "location": 2857,
            "return": [
                "bool"
            ],
            "arguments": {
                "code": [
                    "str",
                    "int"
                ],
                "select": [
                    "str"
                ],
                "ignore": [
                    "str"
                ]
            }
        },
        "fix_code": {
            "name": "fix_code",
            "location": 2874,
            "return": [
                "str"
            ],
            "arguments": {
                "source": [
                    "Optional[str]",
                    "Optional[TextIO]"
                ],
                "options": [
                    "str",
                    "Optional[Dict]",
                    "dict",
                    "configparser.ConfigParser",
                    "Optional[Iterable[str]]"
                ],
                "encoding": [
                    "str",
                    "Optional[str]"
                ],
                "apply_config": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "Optional[Iterable[str]]",
                    "Dict[str, str]",
                    "configparser.ConfigParser"
                ]
            }
        },
        "_get_options": {
            "name": "_get_options",
            "location": 2889,
            "return": [
                "str",
                "Optional[int]",
                "Optional[bool]",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "raw_options": [
                    "bool",
                    "Mapping[str, str]",
                    "str",
                    "Union[str, dict]",
                    "Dict[str, Any]"
                ],
                "apply_config": [
                    "configparser.ConfigParser",
                    "List[str]",
                    "str"
                ]
            }
        },
        "fix_lines": {
            "name": "fix_lines",
            "location": 2913,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "source_lines": [
                    "str"
                ],
                "options": [
                    "str",
                    "dict",
                    "NamedTuple",
                    "bool"
                ],
                "filename": [
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "fix_file": {
            "name": "fix_file",
            "location": 2955,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "filename": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "options": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "output": [
                    "configparser.RawConfigParser",
                    "str",
                    "List[str]",
                    "bool"
                ],
                "apply_config": [
                    "dict",
                    "str"
                ]
            }
        },
        "global_fixes": {
            "name": "global_fixes",
            "location": 2992,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_get_parameters": {
            "name": "_get_parameters",
            "location": 3005,
            "return": [
                "List[str]",
                "Set[str]",
                "bool",
                "Optional[bool]",
                "str",
                "dict"
            ],
            "arguments": {
                "function": [
                    "str",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "apply_global_fixes": {
            "name": "apply_global_fixes",
            "location": 3019,
            "return": [
                "str",
                "List[str]",
                "os.PathLike"
            ],
            "arguments": {
                "source": [
                    "str",
                    "bool",
                    "Union[str, int]",
                    "int"
                ],
                "options": [
                    "str",
                    "Sequence[bytes]",
                    "int"
                ],
                "where": [
                    "str",
                    "Union[str, bool]",
                    "Union[str, bytes, IO[bytes]]"
                ],
                "filename": [
                    "Union[str, \"FLSqlCursor\"]",
                    "str",
                    "BinaryIO",
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "extract_code_from_function": {
            "name": "extract_code_from_function",
            "location": 3049,
            "return": [
                "type"
            ],
            "arguments": {
                "function": [
                    "str",
                    "Container[\"Taxon\"]",
                    "Optional[int]"
                ]
            }
        },
        "create_parser": {
            "name": "create_parser",
            "location": 3066,
            "return": [
                "argparse._SubParsersAction"
            ],
            "arguments": {}
        },
        "parse_args": {
            "name": "parse_args",
            "location": 3135,
            "return": [
                "List[str]",
                "Iterable[str]",
                "Optional[Iterable[str]]",
                "Callable[[None], None]",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "arguments": [
                    "argparse.ArgumentParser",
                    "list",
                    "str",
                    "dict",
                    "argparse.Namespace"
                ],
                "apply_config": [
                    "Dict[str, Any]",
                    "bool",
                    "int"
                ]
            }
        },
        "read_config": {
            "name": "read_config",
            "location": 3213,
            "return": [
                "argparse._SubParsersAction",
                "argparse.ArgumentParser"
            ],
            "arguments": {
                "args": [],
                "parser": [
                    "argparse.ArgumentParser",
                    "argparse.Namespace"
                ]
            }
        },
        "_split_comma_separated": {
            "name": "_split_comma_separated",
            "location": 3246,
            "return": [
                "Dict[str, Any]",
                "Set[str]",
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "decode_filename": {
            "name": "decode_filename",
            "location": 3251,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bool"
                ]
            }
        },
        "supported_fixes": {
            "name": "supported_fixes",
            "location": 3259,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "docstring_summary": {
            "name": "docstring_summary",
            "location": 3287,
            "return": [
                "str",
                "Dict[str, Callable]"
            ],
            "arguments": {
                "docstring": [
                    "str"
                ]
            }
        },
        "line_shortening_rank": {
            "name": "line_shortening_rank",
            "location": 3292,
            "return": [
                "int",
                "float",
                "set"
            ],
            "arguments": {
                "candidate": [
                    "str"
                ],
                "indent_word": [
                    "int",
                    "List[str]",
                    "List[int]",
                    "bool",
                    "list",
                    "Sequence[Any]"
                ],
                "max_line_length": [
                    "int",
                    "bool",
                    "Optional[Union[int, float]]"
                ],
                "experimental": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "standard_deviation": {
            "name": "standard_deviation",
            "location": 3432,
            "return": [
                "str"
            ],
            "arguments": {
                "numbers": [
                    "int",
                    "Union[List[str], List[int]]",
                    "bool"
                ]
            }
        },
        "has_arithmetic_operator": {
            "name": "has_arithmetic_operator",
            "location": 3442,
            "return": [
                "bool"
            ],
            "arguments": {
                "line": [
                    "List[str]",
                    "str",
                    "Iterator[str]",
                    "Iterable[str]"
                ]
            }
        },
        "count_unbalanced_brackets": {
            "name": "count_unbalanced_brackets",
            "location": 3451,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        },
        "split_at_offsets": {
            "name": "split_at_offsets",
            "location": 3460,
            "return": [
                "list",
                "List[str]",
                "set"
            ],
            "arguments": {
                "line": [
                    "List[str]",
                    "str",
                    "int",
                    "List[OrderedDict]",
                    "List[int]",
                    "Set[str]"
                ],
                "offsets": [
                    "str",
                    "Tuple[str, str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "match_file": {
            "name": "match_file",
            "location": 3499,
            "return": [
                "bool"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Optional[List[str]]"
                ],
                "exclude": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "find_files": {
            "name": "find_files",
            "location": 3518,
            "return": [
                ""
            ],
            "arguments": {
                "filenames": [
                    "str"
                ],
                "recursive": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "exclude": [
                    "str"
                ]
            }
        },
        "_fix_file": {
            "name": "_fix_file",
            "location": 3534,
            "return": [
                ""
            ],
            "arguments": {
                "parameters": [
                    "str",
                    "Tuple[str]",
                    "Callable[[str], str]"
                ]
            }
        },
        "fix_multiple_files": {
            "name": "fix_multiple_files",
            "location": 3544,
            "return": [
                ""
            ],
            "arguments": {
                "filenames": [
                    "str",
                    "Sequence[str]"
                ],
                "options": [
                    "str",
                    "dict",
                    "bool"
                ],
                "output": [
                    "str"
                ]
            }
        },
        "is_python_file": {
            "name": "is_python_file",
            "location": 3561,
            "return": [
                "bool"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "is_probably_part_of_multiline": {
            "name": "is_probably_part_of_multiline",
            "location": 3583,
            "return": [
                "bool",
                "Tuple[bool, str]"
            ],
            "arguments": {
                "line": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "wrap_output": {
            "name": "wrap_output",
            "location": 3597,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "output": [
                    "str",
                    "IO[str]",
                    "int"
                ],
                "encoding": [
                    "str",
                    "IO[str]",
                    "int"
                ]
            }
        },
        "get_encoding": {
            "name": "get_encoding",
            "location": 3604,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 3609,
            "return": [
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "argv": [
                    "List[str]",
                    "dict",
                    "bool",
                    "argparse.Namespace",
                    "Union[List[str], str]"
                ],
                "apply_config": [
                    "List[str]",
                    "str",
                    "Optional[argparse.Namespace]",
                    "list"
                ]
            }
        },
        "FixPEP8.__init__": {
            "name": "__init__",
            "location": 410,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "List[str]",
                    "os.PathLike"
                ],
                "options": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[Mapping[str, str]]",
                    "Iterable[str]",
                    "type"
                ],
                "contents": [
                    "bytes",
                    "str",
                    "TextIO",
                    "BinaryIO",
                    "Callable"
                ],
                "long_line_ignore_cache": [
                    "int",
                    "str",
                    "List[str]",
                    "Sequence[str]",
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "FixPEP8._fix_source": {
            "name": "_fix_source",
            "location": 462,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "results": [
                    "list",
                    "List[List[Any]]",
                    "List[Dict[str, Any]]",
                    "List[int]",
                    "List[Dict]"
                ]
            }
        },
        "FixPEP8.fix": {
            "name": "fix",
            "location": 529,
            "return": [
                "str",
                "int",
                "os.PathLike"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixPEP8._fix_reindent": {
            "name": "_fix_reindent",
            "location": 564,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "result": [
                    "str",
                    "Optional[str]",
                    "Optional[Sequence[str]]",
                    "Tuple[str, str]"
                ]
            }
        },
        "FixPEP8.fix_e112": {
            "name": "fix_e112",
            "location": 576,
            "return": [
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "int",
                    "List[Dict[str, Any]]",
                    "list"
                ]
            }
        },
        "FixPEP8.fix_e113": {
            "name": "fix_e113",
            "location": 587,
            "return": [
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "int",
                    "List[Dict[str, Any]]",
                    "list"
                ]
            }
        },
        "FixPEP8.fix_e125": {
            "name": "fix_e125",
            "location": 601,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "str",
                    "Optional[str]",
                    "Optional[Sequence[str]]",
                    "List[str]",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "FixPEP8.fix_e201": {
            "name": "fix_e201",
            "location": 619,
            "return": [
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "dict",
                    "bool",
                    "OrderedDict",
                    "Dict[str, Any]"
                ]
            }
        },
        "FixPEP8.fix_e224": {
            "name": "fix_e224",
            "location": 634,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "result": [
                    "type",
                    "dict",
                    "T"
                ]
            }
        },
        "FixPEP8.fix_e225": {
            "name": "fix_e225",
            "location": 641,
            "return": [
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "type",
                    "dict",
                    "T"
                ]
            }
        },
        "FixPEP8.fix_e231": {
            "name": "fix_e231",
            "location": 657,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "result": [
                    "dict",
                    "bool",
                    "OrderedDict",
                    "Dict[str, Any]"
                ]
            }
        },
        "FixPEP8.fix_e251": {
            "name": "fix_e251",
            "location": 665,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "List[str]",
                    "Union[int, float]",
                    "Tuple[int, int]",
                    "List[Tuple[int, int]]",
                    "str"
                ]
            }
        },
        "FixPEP8.fix_e262": {
            "name": "fix_e262",
            "location": 692,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "result": [
                    "type",
                    "dict",
                    "T"
                ]
            }
        },
        "FixPEP8.fix_e271": {
            "name": "fix_e271",
            "location": 704,
            "return": [
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "dict",
                    "bool",
                    "OrderedDict",
                    "Dict[str, Any]"
                ]
            }
        },
        "FixPEP8.fix_e301": {
            "name": "fix_e301",
            "location": 722,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "result": [
                    "bool",
                    "T",
                    "type",
                    "Dict[str, Set[str]]"
                ]
            }
        },
        "FixPEP8.fix_e302": {
            "name": "fix_e302",
            "location": 727,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "result": [
                    "bool",
                    "Optional[Callable[[dict], None]]",
                    "List[str]"
                ]
            }
        },
        "FixPEP8.fix_e303": {
            "name": "fix_e303",
            "location": 733,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "str",
                    "int"
                ]
            }
        },
        "FixPEP8.fix_e304": {
            "name": "fix_e304",
            "location": 752,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "result": [
                    "str",
                    "Optional[Callable]",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "FixPEP8.fix_e401": {
            "name": "fix_e401",
            "location": 758,
            "return": [
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "dict",
                    "bool",
                    "OrderedDict",
                    "Dict[str, Any]"
                ]
            }
        },
        "FixPEP8.fix_long_line_logically": {
            "name": "fix_long_line_logically",
            "location": 773,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "str",
                    "Exception",
                    "dict",
                    "int",
                    "Optional[Dict]",
                    "bool"
                ],
                "logical": [
                    "int",
                    "List[str]",
                    "dict",
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "FixPEP8.fix_long_line_physically": {
            "name": "fix_long_line_physically",
            "location": 808,
            "return": [
                "Sequence[str]",
                "str",
                "list",
                "Iterable[str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "int",
                    "bool",
                    "bytes"
                ]
            }
        },
        "FixPEP8.fix_long_line": {
            "name": "fix_long_line",
            "location": 831,
            "return": [
                "int",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "int",
                    "str",
                    "Dict[str, int]",
                    "float",
                    "Optional[int]"
                ],
                "previous_line": [
                    "List[str]",
                    "Callable",
                    "int"
                ],
                "next_line": [
                    "int"
                ],
                "original": [
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "FixPEP8.fix_e502": {
            "name": "fix_e502",
            "location": 859,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "result": [
                    "\"Task\"",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "FixPEP8.fix_e701": {
            "name": "fix_e701",
            "location": 865,
            "return": [
                "bool",
                "Callable[..., None]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "dict"
                ]
            }
        },
        "FixPEP8.fix_e702": {
            "name": "fix_e702",
            "location": 877,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "dict",
                    "bool",
                    "OrderedDict",
                    "Dict[str, Any]"
                ],
                "logical": [
                    "int",
                    "List[Dict[str, Any]]",
                    "list"
                ]
            }
        },
        "FixPEP8.fix_e711": {
            "name": "fix_e711",
            "location": 912,
            "return": [
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "dict",
                    "int",
                    "str"
                ]
            }
        },
        "FixPEP8.fix_e712": {
            "name": "fix_e712",
            "location": 937,
            "return": [
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "dict",
                    "int",
                    "str"
                ]
            }
        },
        "FixPEP8.fix_e713": {
            "name": "fix_e713",
            "location": 975,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "result": [
                    "\"Task\"",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "FixPEP8.fix_w291": {
            "name": "fix_w291",
            "location": 987,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "result": [
                    "OrderedDict",
                    "Dict[str, Any]"
                ]
            }
        },
        "FixPEP8.fix_w391": {
            "name": "fix_w391",
            "location": 992,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "set"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ReformattedLines.__init__": {
            "name": "__init__",
            "location": 1542,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "max_line_length": [
                    "int",
                    "Tuple[str]",
                    "bytes"
                ]
            }
        },
        "ReformattedLines.__repr__": {
            "name": "__repr__",
            "location": 1549,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReformattedLines.add": {
            "name": "add",
            "location": 1555,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "str",
                    "dict"
                ],
                "indent_amt": [
                    "str",
                    "bool",
                    "Optional[Any]",
                    "List[str]",
                    "int"
                ],
                "break_after_open_bracket": [
                    "int",
                    "Awaitable",
                    "float"
                ]
            }
        },
        "ReformattedLines.add_comment": {
            "name": "add_comment",
            "location": 1562,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "List[str]",
                    "Tuple[str]"
                ]
            }
        },
        "ReformattedLines.add_indent": {
            "name": "add_indent",
            "location": 1576,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "indent_amt": [
                    "str",
                    "list",
                    "List[str]"
                ]
            }
        },
        "ReformattedLines.add_line_break": {
            "name": "add_line_break",
            "location": 1579,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "indent": [
                    "List[int]",
                    "list",
                    "int",
                    "Sequence[int]",
                    "bool",
                    "str"
                ]
            }
        },
        "ReformattedLines.add_line_break_at": {
            "name": "add_line_break_at",
            "location": 1583,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "index": [
                    "Dict[str, Any]"
                ],
                "indent_amt": [
                    "Sequence[Hashable]",
                    "Dict[str, bool]"
                ]
            }
        },
        "ReformattedLines.add_space_if_needed": {
            "name": "add_space_if_needed",
            "location": 1587,
            "return": [],
            "arguments": {
                "self": [],
                "curr_text": [
                    "str",
                    "Type"
                ],
                "equal": [
                    "str",
                    "Type"
                ]
            }
        },
        "ReformattedLines.previous_item": {
            "name": "previous_item",
            "location": 1633,
            "return": [
                "int",
                "List[int]",
                "bool",
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReformattedLines.fits_on_current_line": {
            "name": "fits_on_current_line",
            "location": 1637,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "item_extent": [
                    "int",
                    "tuple",
                    "List[str]"
                ]
            }
        },
        "ReformattedLines.current_size": {
            "name": "current_size",
            "location": 1640,
            "return": [
                "float",
                "int",
                "List[List[int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReformattedLines.line_empty": {
            "name": "line_empty",
            "location": 1650,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReformattedLines.emit": {
            "name": "emit",
            "location": 1655,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReformattedLines._add_item": {
            "name": "_add_item",
            "location": 1667,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Callable[..., str]",
                    "Iterable[T]",
                    "dict",
                    "T",
                    "List[T]",
                    "Dict[str, bool]"
                ],
                "indent_amt": [
                    "List[str]",
                    "dict",
                    "Union[int, slice]"
                ]
            }
        },
        "ReformattedLines._add_container": {
            "name": "_add_container",
            "location": 1708,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "container": [],
                "indent_amt": [
                    "Optional[Callable]"
                ],
                "break_after_open_bracket": [
                    "Optional[Dict[str, Any]]",
                    "str",
                    "bool"
                ]
            }
        },
        "ReformattedLines._prevent_default_initializer_splitting": {
            "name": "_prevent_default_initializer_splitting",
            "location": 1744,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "dict",
                    "Sequence[Any]",
                    "type"
                ],
                "indent_amt": [
                    "str",
                    "list"
                ]
            }
        },
        "ReformattedLines._split_after_delimiter": {
            "name": "_split_after_delimiter",
            "location": 1783,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Union[int, slice]",
                    "dict",
                    "str",
                    "List[T]"
                ],
                "indent_amt": [
                    "str"
                ]
            }
        },
        "ReformattedLines._enforce_space": {
            "name": "_enforce_space",
            "location": 1809,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "Union[int, float, str]"
                ]
            }
        },
        "ReformattedLines._delete_whitespace": {
            "name": "_delete_whitespace",
            "location": 1835,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Atom.__init__": {
            "name": "__init__",
            "location": 1846,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "atom": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Atom.__repr__": {
            "name": "__repr__",
            "location": 1849,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Atom.__len__": {
            "name": "__len__",
            "location": 1852,
            "return": [
                "int",
                "List[Tuple[int, float, float]]",
                "List[int]",
                "List[List[int]]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Atom.reflow": {
            "name": "reflow",
            "location": 1855,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "reflowed_lines": [
                    "bool",
                    "int",
                    "float"
                ],
                "continued_indent": [
                    "str",
                    "io.StringIO",
                    "List[Dict[str, Any]]",
                    "Tuple[str]",
                    "List[int]"
                ],
                "extent": [
                    "int",
                    "Optional[Tuple[int, int]]",
                    "Tuple[int, int]",
                    "List[List[int]]",
                    "str"
                ],
                "break_after_open_bracket": [
                    "str",
                    "int"
                ],
                "is_list_comp_or_if_expr": [
                    "int",
                    "Dict[str, Tuple[str, int, int]]",
                    "float",
                    "list"
                ],
                "next_is_dot": [
                    "int",
                    "Dict[str, Tuple[str, int, int]]",
                    "float",
                    "list"
                ]
            }
        },
        "Atom.emit": {
            "name": "emit",
            "location": 1891,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Atom.is_keyword": {
            "name": "is_keyword",
            "location": 1895,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Atom.is_string": {
            "name": "is_string",
            "location": 1899,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Atom.is_name": {
            "name": "is_name",
            "location": 1903,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Atom.is_number": {
            "name": "is_number",
            "location": 1907,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Atom.is_comma": {
            "name": "is_comma",
            "location": 1911,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Atom.is_colon": {
            "name": "is_colon",
            "location": 1915,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Atom.size": {
            "name": "size",
            "location": 1919,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Container.__init__": {
            "name": "__init__",
            "location": 1927,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "items": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Mapping[str, Dict[str, Any]]",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, int]"
                ]
            }
        },
        "Container.__repr__": {
            "name": "__repr__",
            "location": 1930,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Container.__iter__": {
            "name": "__iter__",
            "location": 1953,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Container.__getitem__": {
            "name": "__getitem__",
            "location": 1957,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "str",
                    "Tuple[int]",
                    "List[T]",
                    "T",
                    "List[str]",
                    "int"
                ]
            }
        },
        "Container.reflow": {
            "name": "reflow",
            "location": 1960,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "reflowed_lines": [
                    "int"
                ],
                "continued_indent": [
                    "int"
                ],
                "break_after_open_bracket": [
                    "str",
                    "Tuple[str]",
                    "int",
                    "ImportError"
                ]
            }
        },
        "Container._get_extent": {
            "name": "_get_extent",
            "location": 2007,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "Container.is_string": {
            "name": "is_string",
            "location": 2045,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Container.size": {
            "name": "size",
            "location": 2049,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Container.is_keyword": {
            "name": "is_keyword",
            "location": 2053,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Container.is_name": {
            "name": "is_name",
            "location": 2057,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Container.is_comma": {
            "name": "is_comma",
            "location": 2061,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Container.is_colon": {
            "name": "is_colon",
            "location": 2065,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Container.open_bracket": {
            "name": "open_bracket",
            "location": 2069,
            "return": [
                "Optional[str]",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Container.close_bracket": {
            "name": "close_bracket",
            "location": 2073,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tuple.open_bracket": {
            "name": "open_bracket",
            "location": 2082,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tuple.close_bracket": {
            "name": "close_bracket",
            "location": 2086,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "List.open_bracket": {
            "name": "open_bracket",
            "location": 2095,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "List.close_bracket": {
            "name": "close_bracket",
            "location": 2099,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictOrSet.open_bracket": {
            "name": "open_bracket",
            "location": 2108,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictOrSet.close_bracket": {
            "name": "close_bracket",
            "location": 2112,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListComprehension.size": {
            "name": "size",
            "location": 2121,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reindenter.__init__": {
            "name": "__init__",
            "location": 2488,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_text": [
                    "str",
                    "io.StringIO",
                    "bytes",
                    "io.BytesIO",
                    "IO"
                ]
            }
        },
        "Reindenter.run": {
            "name": "run",
            "location": 2511,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "indent_size": [
                    "int",
                    "Tuple[int, int]",
                    "float"
                ]
            }
        },
        "Reindenter.getline": {
            "name": "getline",
            "location": 2593,
            "return": [
                "str",
                "list",
                "Sequence[str]",
                "List[str]",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineEndingWrapper.__init__": {
            "name": "__init__",
            "location": 3489,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "output": [
                    "bool",
                    "int",
                    "set",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "LineEndingWrapper.write": {
            "name": "write",
            "location": 3492,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "LineEndingWrapper.flush": {
            "name": "flush",
            "location": 3495,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CachedTokenizer.__init__": {
            "name": "__init__",
            "location": 3659,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CachedTokenizer.generate_tokens": {
            "name": "generate_tokens",
            "location": 3663,
            "return": [
                "Dict[str, Any]",
                "OrderedDict",
                "bytes",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "IO",
                    "IO[bytes]",
                    "bytes"
                ]
            }
        },
        "ReformattedLines._Indent.__init__": {
            "name": "__init__",
            "location": 1510,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "indent_amt": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ReformattedLines._Indent.emit": {
            "name": "emit",
            "location": 1513,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReformattedLines._Indent.size": {
            "name": "size",
            "location": 1517,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReformattedLines._Space.emit": {
            "name": "emit",
            "location": 1524,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReformattedLines._Space.size": {
            "name": "size",
            "location": 1528,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReformattedLines._LineBreak.emit": {
            "name": "emit",
            "location": 1535,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReformattedLines._LineBreak.size": {
            "name": "size",
            "location": 1539,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "_execute_pep8.QuietReport.__init__": {
            "name": "__init__",
            "location": 2444,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "options": [
                    "str",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        },
        "_execute_pep8.QuietReport.error": {
            "name": "error",
            "location": 2448,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "line_number": [
                    "Dict[str, int]",
                    "List[str]",
                    "Optional[List[str]]",
                    "lib2to3.pytree.Leaf",
                    "str",
                    "Optional[str]",
                    "Optional[List[Any]]"
                ],
                "offset": [
                    "Dict[str, int]",
                    "List[str]",
                    "Optional[List[str]]",
                    "lib2to3.pytree.Leaf",
                    "str",
                    "Optional[str]",
                    "Optional[List[Any]]"
                ],
                "text": [
                    "Dict[str, int]",
                    "List[str]",
                    "Optional[List[str]]",
                    "lib2to3.pytree.Leaf",
                    "str",
                    "Optional[str]",
                    "Optional[List[Any]]"
                ],
                "check": [
                    "str",
                    "Callable"
                ]
            }
        },
        "_execute_pep8.QuietReport.full_error_results": {
            "name": "full_error_results",
            "location": 2461,
            "return": [
                "str",
                "bool",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/__init__.py": {},
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/btm_matcher.py": {
        "type_repr": {
            "name": "type_repr",
            "location": 160,
            "return": [
                "Mapping[str, Any]"
            ],
            "arguments": {
                "type_num": [
                    "int"
                ]
            }
        },
        "BMNode.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BottomMatcher.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BottomMatcher.add_fixer": {
            "name": "add_fixer",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "fixer": [
                    "str",
                    "list"
                ]
            }
        },
        "BottomMatcher.add": {
            "name": "add",
            "location": 49,
            "return": [
                "list",
                "int",
                "list[BMNode]",
                "Callable",
                "Set[Type]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "List['Block']",
                    "int",
                    "Dict[str, object]",
                    "str",
                    "List[List[str]]"
                ],
                "start": [
                    "int",
                    "list"
                ]
            }
        },
        "BottomMatcher.run": {
            "name": "run",
            "location": 83,
            "return": [
                "str",
                "int",
                "Set[str]",
                "Mapping[str, int]",
                "bool",
                "\"Parameter\""
            ],
            "arguments": {
                "self": [],
                "leaves": [
                    "str",
                    "bool"
                ]
            }
        },
        "BottomMatcher.print_ac": {
            "name": "print_ac",
            "location": 144,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BottomMatcher.print_ac.print_node": {
            "name": "print_node",
            "location": 147,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "node": [
                    "dict"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/btm_utils.py": {
        "reduce_tree": {
            "name": "reduce_tree",
            "location": 104,
            "return": [
                "None",
                "float",
                "bool"
            ],
            "arguments": {
                "node": [
                    "Callable"
                ],
                "parent": [
                    "None"
                ]
            }
        },
        "get_characteristic_subpattern": {
            "name": "get_characteristic_subpattern",
            "location": 238,
            "return": [
                "list",
                "str",
                "Tuple[int, int]"
            ],
            "arguments": {
                "subpatterns": [
                    "Optional[str]",
                    "dict",
                    "str",
                    "List[List[Any]]",
                    "int"
                ]
            }
        },
        "rec_test": {
            "name": "rec_test",
            "location": 275,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "sequence": [
                    "str",
                    "bool",
                    "Callable"
                ],
                "test_func": [
                    "int",
                    "Dict[str, Any]",
                    "str",
                    "Callable"
                ]
            }
        },
        "MinNode.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "None",
                    "str",
                    "bool",
                    "int"
                ],
                "name": [
                    "None",
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "MinNode.__repr__": {
            "name": "__repr__",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinNode.leaf_to_root": {
            "name": "leaf_to_root",
            "location": 33,
            "return": [
                "list[tuple]",
                "Callable[[bytes], None]",
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinNode.get_linear_subpattern": {
            "name": "get_linear_subpattern",
            "location": 75,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinNode.leaves": {
            "name": "leaves",
            "location": 96,
            "return": [
                "",
                "typing.Generator",
                "typing.Generator[MinNode]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixer_base.py": {
        "BaseFix.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "options": [
                    "bool",
                    "Set[str]",
                    "str"
                ],
                "log": [
                    "logging.Logger",
                    "str",
                    "int",
                    "Optional[logging.Logger]"
                ]
            }
        },
        "BaseFix.compile_pattern": {
            "name": "compile_pattern",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFix.set_filename": {
            "name": "set_filename",
            "location": 72,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "logging.Logger",
                    "int"
                ]
            }
        },
        "BaseFix.match": {
            "name": "match",
            "location": 80,
            "return": [
                "dict[typing.Text, ]",
                "bool",
                "int",
                "Type[T]"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "BaseFix.transform": {
            "name": "transform",
            "location": 92,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ],
                "results": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ]
            }
        },
        "BaseFix.new_name": {
            "name": "new_name",
            "location": 108,
            "return": [
                "typing.Text",
                "str",
                "type"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "typing.Text",
                    "str",
                    "Container[\"Taxon\"]",
                    "Optional[int]",
                    "Optional[Callable]"
                ]
            }
        },
        "BaseFix.log_message": {
            "name": "log_message",
            "location": 119,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "BaseFix.cannot_convert": {
            "name": "cannot_convert",
            "location": 125,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ],
                "reason": [
                    "None",
                    "str",
                    "list",
                    "bytes"
                ]
            }
        },
        "BaseFix.warning": {
            "name": "warning",
            "location": 140,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bytes",
                    "str"
                ],
                "reason": [
                    "list",
                    "bytes"
                ]
            }
        },
        "BaseFix.start_tree": {
            "name": "start_tree",
            "location": 150,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "Iterable[str]",
                    "Iterable[Any]",
                    "str",
                    "int"
                ],
                "filename": [
                    "str",
                    "bytes"
                ]
            }
        },
        "BaseFix.finish_tree": {
            "name": "finish_tree",
            "location": 162,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "Dict[str, Any]"
                ],
                "filename": [
                    "Dict[str, Any]"
                ]
            }
        },
        "ConditionalFix.start_tree": {
            "name": "start_tree",
            "location": 178,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionalFix.should_skip": {
            "name": "should_skip",
            "location": 182,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "bool",
                    "Pattern",
                    "ForwardRef"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixer_util.py": {
        "KeywordArg": {
            "name": "KeywordArg",
            "location": 17,
            "return": [
                "Node",
                "str",
                "int"
            ],
            "arguments": {
                "keyword": [
                    "str",
                    "nucypher.blockchain.eth.token.NU"
                ],
                "value": [
                    "str",
                    "nucypher.blockchain.eth.token.NU"
                ]
            }
        },
        "LParen": {
            "name": "LParen",
            "location": 21,
            "return": [
                "Leaf",
                "str",
                "int",
                "list"
            ],
            "arguments": {}
        },
        "RParen": {
            "name": "RParen",
            "location": 24,
            "return": [
                "Leaf",
                "str",
                "int",
                "list"
            ],
            "arguments": {}
        },
        "Assign": {
            "name": "Assign",
            "location": 27,
            "return": [
                "Node",
                "str",
                "int"
            ],
            "arguments": {
                "target": [
                    "str",
                    "int",
                    "IO[bytes]",
                    "Optional[str]",
                    "bool",
                    "list"
                ],
                "source": [
                    "str",
                    "bool"
                ]
            }
        },
        "Name": {
            "name": "Name",
            "location": 38,
            "return": [
                "Leaf",
                "type",
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "prefix": [
                    "str",
                    "None"
                ]
            }
        },
        "Attr": {
            "name": "Attr",
            "location": 42,
            "return": [
                "list[Node]",
                "Optional[Any]",
                "bool",
                "Callable[..., None]"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "List[str]",
                    "Type",
                    "List[int]",
                    "Node"
                ],
                "attr": [
                    "str",
                    "List[str]",
                    "Type",
                    "List[int]",
                    "Node"
                ]
            }
        },
        "Comma": {
            "name": "Comma",
            "location": 46,
            "return": [
                "Leaf",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "Dot": {
            "name": "Dot",
            "location": 50,
            "return": [
                "Leaf",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "ArgList": {
            "name": "ArgList",
            "location": 54,
            "return": [
                "Node",
                "blib2to3.pytree.Node",
                "Optional[int]",
                "Iterable[str]",
                "int",
                "Set[int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "args": [],
                "lparen": [
                    "Callable[[None], None]",
                    "str",
                    "Tuple[int, int]"
                ],
                "rparen": [
                    "Callable[[None], None]",
                    "str",
                    "Tuple[int, int]"
                ]
            }
        },
        "Call": {
            "name": "Call",
            "location": 61,
            "return": [
                "Node",
                "Tuple[int, str, List[str]]",
                "dcos_e2e.node.Node"
            ],
            "arguments": {
                "func_name": [
                    "str",
                    "dict"
                ],
                "args": [
                    "None"
                ],
                "prefix": [
                    "None",
                    "str",
                    "Optional[str]",
                    "Callable[[Any], bool]",
                    "int",
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "Newline": {
            "name": "Newline",
            "location": 68,
            "return": [
                "int",
                "Leaf"
            ],
            "arguments": {}
        },
        "BlankLine": {
            "name": "BlankLine",
            "location": 72,
            "return": [
                "Leaf",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "Number": {
            "name": "Number",
            "location": 76,
            "return": [
                "int",
                "Leaf"
            ],
            "arguments": {
                "n": [
                    "str",
                    "Union[int, str]",
                    "bytes",
                    "int",
                    "Optional[str]"
                ],
                "prefix": [
                    "None",
                    "str",
                    "Union[int, str]",
                    "bytes",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "Subscript": {
            "name": "Subscript",
            "location": 79,
            "return": [
                "Node",
                "int",
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "index_node": [
                    "str",
                    "dict",
                    "bool",
                    "List[str]",
                    "float",
                    "Dict[str, Any]"
                ]
            }
        },
        "String": {
            "name": "String",
            "location": 85,
            "return": [
                "Leaf",
                "str",
                "blib2to3.pytree.Leaf"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "prefix": [
                    "str",
                    "None"
                ]
            }
        },
        "ListComp": {
            "name": "ListComp",
            "location": 89,
            "return": [
                "Node",
                "str",
                "bool",
                "Type[T]",
                "float"
            ],
            "arguments": {
                "xp": [
                    "Optional[int]",
                    "int",
                    "bool"
                ],
                "fp": [
                    "int",
                    "bool",
                    "Optional[List[str]]"
                ],
                "it": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "test": [
                    "None",
                    "str",
                    "int",
                    "bool",
                    "Callable"
                ]
            }
        },
        "FromImport": {
            "name": "FromImport",
            "location": 113,
            "return": [
                "Node",
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "package_name": [
                    "str",
                    "int"
                ],
                "name_leafs": [
                    "str",
                    "int"
                ]
            }
        },
        "is_tuple": {
            "name": "is_tuple",
            "location": 137,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": [
                    "docutils.nodes.Node",
                    "Optional[str]",
                    "int",
                    "src.evalg.encoding.BinaryTree.Node",
                    "Node"
                ]
            }
        },
        "is_list": {
            "name": "is_list",
            "location": 149,
            "return": [
                "bool",
                "IO[str]",
                "str",
                "int"
            ],
            "arguments": {
                "node": [
                    "docutils.nodes.Node",
                    "src.evalg.encoding.BinaryTree.Node",
                    "Node"
                ]
            }
        },
        "parenthesize": {
            "name": "parenthesize",
            "location": 163,
            "return": [
                "Node",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "node": [
                    "int",
                    "docutils.nodes.Node",
                    "List[int]",
                    "T",
                    "Node"
                ]
            }
        },
        "attr_chain": {
            "name": "attr_chain",
            "location": 170,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "obj": [
                    "str"
                ],
                "attr": [
                    "str"
                ]
            }
        },
        "in_special_context": {
            "name": "in_special_context",
            "location": 208,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": [
                    "yaml.nodes.Node",
                    "Set[node.Node]",
                    "parsimonious.nodes.Node",
                    "Node[E]"
                ]
            }
        },
        "is_probably_builtin": {
            "name": "is_probably_builtin",
            "location": 227,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": [
                    "Sequence[object]"
                ]
            }
        },
        "find_indentation": {
            "name": "find_indentation",
            "location": 250,
            "return": [
                "typing.Text",
                "Type[T]",
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "node": [
                    "Optional[mypy.nodes.SymbolTable.Node]",
                    "Optional[Node]",
                    "Optional[mypy.nodes.Node]"
                ]
            }
        },
        "make_suite": {
            "name": "make_suite",
            "location": 264,
            "return": [
                "Node",
                "int",
                "blib2to3.pytree.Node",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "node": []
            }
        },
        "find_root": {
            "name": "find_root",
            "location": 273,
            "return": [
                "Iterable[str]",
                "Callable",
                "Iterable['cirq.Operation']",
                "Iterable['cirq.Qid']"
            ],
            "arguments": {
                "node": [
                    "blib2to3.pytree.Node",
                    "mypy.nodes.Node"
                ]
            }
        },
        "does_tree_import": {
            "name": "does_tree_import",
            "location": 282,
            "return": [
                "bool"
            ],
            "arguments": {
                "package": [
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ],
                "name": [
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ],
                "node": [
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "is_import": {
            "name": "is_import",
            "location": 290,
            "return": [
                "bool",
                "Optional[str]",
                "str",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "node": []
            }
        },
        "touch_import": {
            "name": "touch_import",
            "location": 294,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "package": [
                    "str",
                    "Sequence[Any]",
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "Type[Any]"
                ],
                "name": [
                    "str",
                    "Sequence[Any]",
                    "Mapping[str, Any]",
                    "dict"
                ],
                "node": [
                    "Callable",
                    "str",
                    "Tuple[Type]"
                ]
            }
        },
        "find_binding": {
            "name": "find_binding",
            "location": 340,
            "return": [
                "None",
                "Optional[str]",
                "bool",
                "Optional[float]",
                "str",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "name": [
                    "Sequence[Optional[str]]",
                    "List[T]",
                    "Union[str, List[str]]",
                    "str"
                ],
                "node": [
                    "str",
                    "bool",
                    "Sequence"
                ],
                "package": [
                    "str",
                    "None"
                ]
            }
        },
        "_find": {
            "name": "_find",
            "location": 383,
            "return": [
                "list",
                "bool",
                "None",
                "Optional[int]",
                "str",
                "Optional[Sequence]"
            ],
            "arguments": {
                "name": [
                    "dict",
                    "Optional[Dict[Any, Any]]",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]"
                ],
                "node": [
                    "str",
                    "Tuple[Type]",
                    "Type[Any]",
                    "Type",
                    "Callable",
                    "Collection"
                ]
            }
        },
        "_is_import_binding": {
            "name": "_is_import_binding",
            "location": 393,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[List[str]]",
                "bool"
            ],
            "arguments": {
                "node": [
                    "str",
                    "bool",
                    "docutils.nodes.Node",
                    "Optional[Union[Any, Any]]"
                ],
                "name": [
                    "str",
                    "Type[T]",
                    "Iterable[str]"
                ],
                "package": [
                    "None",
                    "str",
                    "Optional[str]",
                    "Type"
                ]
            }
        },
        "touch_import.is_import_stmt": {
            "name": "is_import_stmt",
            "location": 297,
            "return": [
                "bool",
                "dict",
                "str",
                "Dict[str, int]",
                "\"TransactionTypeModel\"",
                "Dict[str, List[Callable]]"
            ],
            "arguments": {
                "node": [
                    "Node",
                    "int"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/main.py": {
        "diff_texts": {
            "name": "diff_texts",
            "location": 17,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "a": [
                    "str"
                ],
                "b": [
                    "int",
                    "str",
                    "bytes",
                    "Union[str, bytes]",
                    "Dict[str, str]"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "warn": {
            "name": "warn",
            "location": 129,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "msg": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 133,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "fixer_pkg": [
                    "str",
                    "List[str]"
                ],
                "args": [
                    "None"
                ]
            }
        },
        "StdoutRefactoringTool.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "fixers": [
                    "str",
                    "float",
                    "bool",
                    "int"
                ],
                "options": [
                    "str",
                    "float",
                    "bool",
                    "int"
                ],
                "explicit": [
                    "str",
                    "float",
                    "bool",
                    "int"
                ],
                "nobackups": [
                    "bool",
                    "int",
                    "Optional[bool]",
                    "Iterable[str]",
                    "Optional[str]",
                    "str"
                ],
                "show_diffs": [
                    "bool",
                    "int",
                    "Optional[bool]",
                    "Iterable[str]",
                    "Optional[str]",
                    "str"
                ],
                "input_base_dir": [
                    "typing.Text",
                    "str",
                    "Optional[\"Address\"]",
                    "Optional[str]",
                    "Optional[Union[str, Any]]"
                ],
                "output_dir": [
                    "typing.Text",
                    "str",
                    "Optional[str]"
                ],
                "append_suffix": [
                    "typing.Text",
                    "bool",
                    "int",
                    "Optional[bool]",
                    "Iterable[str]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "StdoutRefactoringTool.log_error": {
            "name": "log_error",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "tuple",
                    "List[str]",
                    "List[Dict[str, str]]",
                    "Callable[..., Awaitable]"
                ]
            }
        },
        "StdoutRefactoringTool.write_file": {
            "name": "write_file",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "new_text": [
                    "bool",
                    "str",
                    "Hashable",
                    "Type[Any]",
                    "Optional[Iterable[Any]]",
                    "Optional[Mapping[str, Any]]"
                ],
                "filename": [
                    "str",
                    "dict"
                ],
                "old_text": [
                    "bool",
                    "str",
                    "Hashable",
                    "Type[Any]",
                    "Optional[Iterable[Any]]",
                    "Optional[Mapping[str, Any]]"
                ],
                "encoding": [
                    "bool",
                    "str",
                    "Hashable",
                    "Type[Any]",
                    "Optional[Iterable[Any]]",
                    "Optional[Mapping[str, Any]]"
                ]
            }
        },
        "StdoutRefactoringTool.print_output": {
            "name": "print_output",
            "location": 108,
            "return": [
                "None",
                "Union[tuple, list]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "old": [
                    "str",
                    "List[str]"
                ],
                "new": [
                    "str",
                    "List[str]"
                ],
                "filename": [
                    "str"
                ],
                "equal": [
                    "bool",
                    "str",
                    "List[str]",
                    "float"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/patcomp.py": {
        "tokenize_wrapper": {
            "name": "tokenize_wrapper",
            "location": 33,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "input": [
                    "io.StringIO",
                    "TextIO",
                    "str"
                ]
            }
        },
        "_type_of_literal": {
            "name": "_type_of_literal",
            "location": 186,
            "return": [
                "None",
                "Tuple[str]",
                "Set[str]",
                "Type",
                "Union[str, 'Type']"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Collection[str]",
                    "float",
                    "int"
                ]
            }
        },
        "pattern_convert": {
            "name": "pattern_convert",
            "location": 195,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "grammar": [
                    "str",
                    "type",
                    "Callable",
                    "Any",
                    "Tuple[Type]",
                    "Dict[str, Any]"
                ],
                "raw_node_info": [
                    "str",
                    "Optional[Any]",
                    "Dict[str, Any]",
                    "dict",
                    "slice",
                    "Optional[List[str]]"
                ]
            }
        },
        "compile_pattern": {
            "name": "compile_pattern",
            "location": 204,
            "return": [
                "str",
                "Iterable[int]"
            ],
            "arguments": {
                "pattern": [
                    "str",
                    "int"
                ]
            }
        },
        "PatternCompiler.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "grammar_file": [
                    "str",
                    "bool",
                    "int",
                    "Callable[[str], None]"
                ]
            }
        },
        "PatternCompiler.compile_pattern": {
            "name": "compile_pattern",
            "location": 56,
            "return": [
                "tuple",
                "str",
                "Optional[BaseException]",
                "bool",
                "dict",
                "Optional[str]",
                "int",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "str",
                    "Optional[str]",
                    "list"
                ],
                "debug": [
                    "bool",
                    "int",
                    "Callable",
                    "dict",
                    "Union[str, int, float]"
                ],
                "with_tree": [
                    "bool",
                    "Callable",
                    "Callable[[Any], int]"
                ]
            }
        },
        "PatternCompiler.compile_node": {
            "name": "compile_node",
            "location": 68,
            "return": [
                "float",
                "int",
                "Iterator",
                "Iterable[Iterable[T]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "PatternCompiler.compile_basic": {
            "name": "compile_basic",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "nodes": [
                    "int"
                ],
                "repeat": [
                    "int",
                    "None"
                ]
            }
        },
        "PatternCompiler.get_int": {
            "name": "get_int",
            "location": 174,
            "return": [
                "int",
                "str",
                "bool",
                "Type",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[T]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/pygram.py": {
        "Symbols.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "grammar": [
                    "pgen2.grammar.Grammar",
                    "bool",
                    "dict",
                    "int",
                    "Mapping[str, Sequence[str]]",
                    "Optional[int]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/pytree.py": {
        "type_repr": {
            "name": "type_repr",
            "location": 22,
            "return": [
                "Mapping[str, Any]"
            ],
            "arguments": {
                "type_num": [
                    "int"
                ]
            }
        },
        "convert": {
            "name": "convert",
            "location": 429,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "gr": [
                    "str",
                    "Any"
                ],
                "raw_node": [
                    "str",
                    "list"
                ]
            }
        },
        "generate_matches": {
            "name": "generate_matches",
            "location": 862,
            "return": [
                ""
            ],
            "arguments": {
                "patterns": [
                    "str",
                    "bool"
                ],
                "nodes": [
                    "List[int]",
                    "int"
                ]
            }
        },
        "Base.__new__": {
            "name": "__new__",
            "location": 50,
            "return": [
                "float",
                "List[str]",
                "str",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "OrderedDict",
                    "Union[int, float]",
                    "str"
                ]
            }
        },
        "Base.__eq__": {
            "name": "__eq__",
            "location": 55,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[T]",
                    "Collection",
                    "Union[int, float]"
                ]
            }
        },
        "Base.__ne__": {
            "name": "__ne__",
            "location": 67,
            "return": [
                "Tuple[Any, Any, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[T]",
                    "Collection",
                    "Union[int, float]"
                ]
            }
        },
        "Base._eq": {
            "name": "_eq",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "List[str]",
                    "Union[int, float]",
                    "AbstractSet[T]"
                ]
            }
        },
        "Base.clone": {
            "name": "clone",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.post_order": {
            "name": "post_order",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.pre_order": {
            "name": "pre_order",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.set_prefix": {
            "name": "set_prefix",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "bool",
                    "float"
                ]
            }
        },
        "Base.get_prefix": {
            "name": "get_prefix",
            "location": 122,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.replace": {
            "name": "replace",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "new": [
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Callable[..., T]"
                ]
            }
        },
        "Base.get_lineno": {
            "name": "get_lineno",
            "location": 155,
            "return": [
                "dict",
                "int",
                "str",
                "Dict[str, Any]",
                "Mapping[str, Any]",
                "Dict[str, Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.changed": {
            "name": "changed",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.remove": {
            "name": "remove",
            "location": 169,
            "return": [
                "int",
                "slice",
                "str",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.next_sibling": {
            "name": "next_sibling",
            "location": 183,
            "return": [
                "Optional[str]",
                "str",
                "bool",
                "Optional[int]",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.prev_sibling": {
            "name": "prev_sibling",
            "location": 200,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.leaves": {
            "name": "leaves",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.depth": {
            "name": "depth",
            "location": 220,
            "return": [
                "io.TextIO",
                "Optional[int]",
                "Optional[List[Callable]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.get_suffix": {
            "name": "get_suffix",
            "location": 225,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 243,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Tuple[str]",
                    "str",
                    "Optional[bool]"
                ],
                "children": [
                    "Tuple[str]",
                    "int",
                    "List[int]",
                    "bool",
                    "str",
                    "Set[int]"
                ],
                "context": [
                    "Optional[Any]",
                    "str",
                    "Sequence[str]",
                    "tuple"
                ],
                "prefix": [
                    "bool",
                    "Type",
                    "int",
                    "Optional[Iterable[str]]",
                    "str",
                    "Optional[Type]",
                    "Optional[str]"
                ],
                "fixers_applied": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "Node.__repr__": {
            "name": "__repr__",
            "location": 268,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__unicode__": {
            "name": "__unicode__",
            "location": 274,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node._eq": {
            "name": "_eq",
            "location": 285,
            "return": [
                "int",
                "type",
                "bool",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Node.clone": {
            "name": "clone",
            "location": 289,
            "return": [
                "bool",
                "str",
                "list",
                "Set[str]",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.post_order": {
            "name": "post_order",
            "location": 294,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.pre_order": {
            "name": "pre_order",
            "location": 301,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Node._prefix_getter": {
            "name": "_prefix_getter",
            "location": 308,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node._prefix_setter": {
            "name": "_prefix_setter",
            "location": 316,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str",
                    "bool"
                ]
            }
        },
        "Node.set_child": {
            "name": "set_child",
            "location": 322,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "Optional[int]",
                    "str"
                ],
                "child": [
                    "int",
                    "bool"
                ]
            }
        },
        "Node.insert_child": {
            "name": "insert_child",
            "location": 332,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "list",
                    "List[Dict[str, Any]]"
                ],
                "child": [
                    "int",
                    "list",
                    "List[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "Node.append_child": {
            "name": "append_child",
            "location": 341,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "child": [
                    "Optional[str]",
                    "float",
                    "Sequence['cirq.Qid']",
                    "T"
                ]
            }
        },
        "Leaf.__init__": {
            "name": "__init__",
            "location": 360,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Tuple[str]",
                    "Optional[bool]",
                    "str"
                ],
                "value": [
                    "str",
                    "float",
                    "int"
                ],
                "context": [
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "prefix": [
                    "Optional[str]",
                    "Optional[int]",
                    "List[str]",
                    "dict",
                    "Optional[bytes]",
                    "Optional[Sequence]",
                    "Optional[Any]"
                ],
                "fixers_applied": [
                    "str",
                    "bool"
                ]
            }
        },
        "Leaf.__repr__": {
            "name": "__repr__",
            "location": 379,
            "return": [
                "str",
                "List[str]",
                "Union[str, int]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Leaf.__unicode__": {
            "name": "__unicode__",
            "location": 385,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Leaf._eq": {
            "name": "_eq",
            "location": 396,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Leaf.clone": {
            "name": "clone",
            "location": 400,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Leaf.leaves": {
            "name": "leaves",
            "location": 406,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Leaf.post_order": {
            "name": "post_order",
            "location": 409,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Leaf.pre_order": {
            "name": "pre_order",
            "location": 413,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Leaf._prefix_getter": {
            "name": "_prefix_getter",
            "location": 417,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Leaf._prefix_setter": {
            "name": "_prefix_setter",
            "location": 423,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BasePattern.__new__": {
            "name": "__new__",
            "location": 469,
            "return": [
                "float",
                "List[str]",
                "str",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "list",
                    "str",
                    "Type[T]"
                ]
            }
        },
        "BasePattern.__repr__": {
            "name": "__repr__",
            "location": 474,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasePattern.optimize": {
            "name": "optimize",
            "location": 480,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasePattern.match": {
            "name": "match",
            "location": 488,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "type",
                    "Type[T]",
                    "Tuple[type]",
                    "str",
                    "Dict[str, Any]",
                    "Tuple[Type]"
                ],
                "results": [
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "dict",
                    "Dict[str, Set[str]]",
                    "type"
                ]
            }
        },
        "BasePattern.match_seq": {
            "name": "match_seq",
            "location": 513,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "Type[Set[Any]]",
                    "int",
                    "bool",
                    "AbstractSet[T]"
                ],
                "results": [
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "BasePattern.generate_matches": {
            "name": "generate_matches",
            "location": 523,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "set",
                    "str",
                    "bool",
                    "Pattern"
                ]
            }
        },
        "LeafPattern.__init__": {
            "name": "__init__",
            "location": 536,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Type[T]"
                ],
                "content": [
                    "Optional[int]",
                    "int",
                    "Optional[str]",
                    "Optional[List[Any]]"
                ],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Optional[str]"
                ]
            }
        },
        "LeafPattern.match": {
            "name": "match",
            "location": 556,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Dict[int, str]",
                    "Dict[Any, str]",
                    "Dict[str, Tuple[int, int]]",
                    "dict",
                    "str",
                    "tuple",
                    "Set[str]"
                ],
                "results": [
                    "str",
                    "Pattern[str]",
                    "Sequence",
                    "type"
                ]
            }
        },
        "LeafPattern._submatch": {
            "name": "_submatch",
            "location": 562,
            "return": [
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict",
                    "bool",
                    "List[int]",
                    "tuple"
                ],
                "results": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ]
            }
        },
        "NodePattern.__init__": {
            "name": "__init__",
            "location": 582,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Type[T]"
                ],
                "content": [
                    "Optional[List[str]]",
                    "list",
                    "Optional[Mapping[str, Any]]",
                    "Tuple[Optional[str], Optional[str]]"
                ],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Optional[str]"
                ]
            }
        },
        "NodePattern._submatch": {
            "name": "_submatch",
            "location": 611,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict",
                    "Dict[str, Any]",
                    "Callable",
                    "T",
                    "float"
                ],
                "results": [
                    "Optional[str]",
                    "Dict[str, Any]",
                    "type",
                    "bool",
                    "str"
                ]
            }
        },
        "WildcardPattern.__init__": {
            "name": "__init__",
            "location": 653,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "content": [
                    "Optional[bool]",
                    "Callable",
                    "dict",
                    "Optional[str]",
                    "Optional[Any]",
                    "str",
                    "List[str]"
                ],
                "min": [
                    "str",
                    "bool"
                ],
                "max": [
                    "str",
                    "bool"
                ],
                "name": [
                    "str",
                    "dict",
                    "bool"
                ]
            }
        },
        "WildcardPattern.optimize": {
            "name": "optimize",
            "location": 688,
            "return": [
                "str",
                "list",
                "int",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "WildcardPattern.match": {
            "name": "match",
            "location": 707,
            "return": [
                "type",
                "Tuple[float, float, float]",
                "int"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bytes",
                    "Callable"
                ],
                "results": [
                    "bytes",
                    "Callable"
                ]
            }
        },
        "WildcardPattern.match_seq": {
            "name": "match_seq",
            "location": 711,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "dict",
                    "Dict[str, bool]",
                    "Type[\"SerializationDialect\"]",
                    "Iterable"
                ],
                "results": [
                    "dict",
                    "List[Dict[str, Any]]",
                    "Dict[str, Set[str]]",
                    "Dict[str, Any]",
                    "Type[T]"
                ]
            }
        },
        "WildcardPattern.generate_matches": {
            "name": "generate_matches",
            "location": 722,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "dict",
                    "bytearray",
                    "bool"
                ]
            }
        },
        "WildcardPattern._iterative_matches": {
            "name": "_iterative_matches",
            "location": 767,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "int"
                ]
            }
        },
        "WildcardPattern._bare_name_matches": {
            "name": "_bare_name_matches",
            "location": 796,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "WildcardPattern._recursive_matches": {
            "name": "_recursive_matches",
            "location": 812,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "T"
                ],
                "count": [
                    "T",
                    "List[int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "NegatedPattern.__init__": {
            "name": "__init__",
            "location": 829,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "content": [
                    "Optional[Any]",
                    "Optional[str]"
                ]
            }
        },
        "NegatedPattern.match": {
            "name": "match",
            "location": 842,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool"
                ]
            }
        },
        "NegatedPattern.match_seq": {
            "name": "match_seq",
            "location": 846,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "nodes": []
            }
        },
        "NegatedPattern.generate_matches": {
            "name": "generate_matches",
            "location": 850,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "dict"
                ]
            }
        },
        "Base.__str__": {
            "name": "__str__",
            "location": 236,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/refactor.py": {
        "get_all_fix_names": {
            "name": "get_all_fix_names",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "fixer_pkg": [
                    "str",
                    "int"
                ],
                "remove_prefix": [
                    "str",
                    "bool",
                    "int",
                    "Mapping[str, Any]",
                    "List[dict]",
                    "Sequence[int]"
                ]
            }
        },
        "_get_head_types": {
            "name": "_get_head_types",
            "location": 50,
            "return": [
                "Type",
                "Union[str, 'Type']",
                "str",
                "Tuple[Type]"
            ],
            "arguments": {
                "pat": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "_get_headnode_dict": {
            "name": "_get_headnode_dict",
            "location": 78,
            "return": [
                "int",
                "Dict[str, Any]",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "fixer_list": [
                    "List[Dict[str, Any]]",
                    "List[List[str]]",
                    "List[Tuple[str, str]]",
                    "list",
                    "List[str]",
                    "List[Dict]",
                    "Iterable[str]"
                ]
            }
        },
        "get_fixers_from_package": {
            "name": "get_fixers_from_package",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "pkg_name": [
                    "str"
                ]
            }
        },
        "_identity": {
            "name": "_identity",
            "location": 110,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_detect_future_features": {
            "name": "_detect_future_features",
            "location": 130,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "source": [
                    "str",
                    "Iterable[Union[str, os.PathLike]]",
                    "Union[str, bytes]",
                    "Union[str, bytes, IO[bytes]]",
                    "Optional[Tuple[Any, Any]]"
                ]
            }
        },
        "_from_system_newlines": {
            "name": "_from_system_newlines",
            "location": 117,
            "return": [
                "str",
                "Optional[str]",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "input": [
                    "str",
                    "Callable",
                    "Callable[[None, None], bool]"
                ]
            }
        },
        "_to_system_newlines": {
            "name": "_to_system_newlines",
            "location": 119,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "input": [
                    "str"
                ]
            }
        },
        "_detect_future_features.advance": {
            "name": "advance",
            "location": 133,
            "return": [
                "bool",
                "str",
                "Hashable"
            ],
            "arguments": {}
        },
        "RefactoringTool.__init__": {
            "name": "__init__",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fixer_names": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Collection[str]"
                ],
                "options": [
                    "Sequence[Tuple[str, str]]",
                    "dict",
                    "MutableMapping[str, Any]",
                    "Optional[str]",
                    "str",
                    "Optional[Mapping[str, str]]",
                    "Dict[str, Any]"
                ],
                "explicit": [
                    "str",
                    "bool",
                    "int",
                    "Sequence"
                ]
            }
        },
        "RefactoringTool.get_fixers": {
            "name": "get_fixers",
            "location": 234,
            "return": [
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "RefactoringTool.log_error": {
            "name": "log_error",
            "location": 274,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "RefactoringTool.log_message": {
            "name": "log_message",
            "location": 278,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "Mapping[str, Any]",
                    "Optional[logging.Logger]"
                ]
            }
        },
        "RefactoringTool.log_debug": {
            "name": "log_debug",
            "location": 284,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "Callable"
                ]
            }
        },
        "RefactoringTool.print_output": {
            "name": "print_output",
            "location": 289,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "old_text": [
                    "str",
                    "bool",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "AnyStr"
                ],
                "new_text": [
                    "str",
                    "bool",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "AnyStr"
                ],
                "filename": [
                    "str",
                    "bool",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "AnyStr"
                ],
                "equal": [
                    "str",
                    "bool",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "AnyStr"
                ]
            }
        },
        "RefactoringTool.refactor": {
            "name": "refactor",
            "location": 294,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "items": [
                    "int",
                    "T",
                    "Optional[Dict[str, Any]]",
                    "List[str]"
                ],
                "write": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[List]",
                    "io.StringIO"
                ],
                "doctests_only": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[List]",
                    "io.StringIO"
                ]
            }
        },
        "RefactoringTool.refactor_dir": {
            "name": "refactor_dir",
            "location": 303,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dir_name": [
                    "str"
                ],
                "write": [
                    "str"
                ],
                "doctests_only": [
                    "str"
                ]
            }
        },
        "RefactoringTool._read_python_source": {
            "name": "_read_python_source",
            "location": 323,
            "return": [
                "Optional[int]",
                "str",
                "bool",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "RefactoringTool.refactor_file": {
            "name": "refactor_file",
            "location": 339,
            "return": [
                "Set[str]",
                "str",
                "Tuple[int, str]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "int",
                    "bool"
                ],
                "write": [
                    "str",
                    "io.StringIO",
                    "io.TextIOBase"
                ],
                "doctests_only": [
                    "str",
                    "bool"
                ]
            }
        },
        "RefactoringTool.refactor_string": {
            "name": "refactor_string",
            "location": 362,
            "return": [
                "str",
                "Optional[bool]",
                "list"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "RefactoringTool.refactor_stdin": {
            "name": "refactor_stdin",
            "location": 389,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "doctests_only": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "RefactoringTool.refactor_tree": {
            "name": "refactor_tree",
            "location": 405,
            "return": [
                "str",
                "Union[str, int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "str",
                    "Exception"
                ],
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "RefactoringTool.traverse_by": {
            "name": "traverse_by",
            "location": 484,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "fixers": [
                    "Callable[[None], None]",
                    "str",
                    "int",
                    "Tuple[int, int]"
                ],
                "traversal": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "RefactoringTool.processed_file": {
            "name": "processed_file",
            "location": 507,
            "return": [
                "Iterator[object]",
                "Tuple[int, str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "new_text": [
                    "str",
                    "List[str]",
                    "dict"
                ],
                "filename": [
                    "str",
                    "dict",
                    "List[str]"
                ],
                "old_text": [
                    "Optional[str]",
                    "str",
                    "dict"
                ],
                "write": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Type[Exception]",
                    "List[str]",
                    "bool"
                ],
                "encoding": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "RefactoringTool.write_file": {
            "name": "write_file",
            "location": 528,
            "return": [
                "Set[str]",
                "str",
                "Tuple[int, str]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "new_text": [
                    "str",
                    "int"
                ],
                "filename": [
                    "str",
                    "int",
                    "List[\"ItemShippingTarget\"]"
                ],
                "old_text": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Type[Exception]",
                    "List[str]",
                    "bool"
                ],
                "encoding": [
                    "str"
                ]
            }
        },
        "RefactoringTool.refactor_docstring": {
            "name": "refactor_docstring",
            "location": 552,
            "return": [
                "List[int]",
                "Dict[str, int]",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "bool",
                    "Optional[bool]",
                    "str"
                ],
                "filename": [
                    "int"
                ]
            }
        },
        "RefactoringTool.refactor_doctest": {
            "name": "refactor_doctest",
            "location": 595,
            "return": [
                "bool",
                "str",
                "List[str]",
                "Hashable",
                "int"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "bool",
                    "int",
                    "float",
                    "Callable",
                    "Type"
                ],
                "lineno": [
                    "str",
                    "Match",
                    "bool",
                    "bytes"
                ],
                "indent": [
                    "bool",
                    "int",
                    "float",
                    "Callable",
                    "Type"
                ],
                "filename": [
                    "str",
                    "bool"
                ]
            }
        },
        "RefactoringTool.summarize": {
            "name": "summarize",
            "location": 624,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RefactoringTool.parse_block": {
            "name": "parse_block",
            "location": 647,
            "return": [
                "BaseException"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "int",
                    "Optional[str]",
                    "type"
                ],
                "lineno": [
                    "int",
                    "Optional[str]",
                    "type"
                ],
                "indent": [
                    "int",
                    "Optional[str]",
                    "type"
                ]
            }
        },
        "RefactoringTool.wrap_toks": {
            "name": "wrap_toks",
            "location": 657,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "block": [
                    "List[\"Block\"]",
                    "Type",
                    "Tuple[str]",
                    "Union[AsyncIterable[Any], Iterable[Any]]",
                    "Callable[[T], bool]"
                ],
                "lineno": [
                    "str",
                    "int"
                ],
                "indent": [
                    "List[\"Block\"]",
                    "Type",
                    "Tuple[str]",
                    "Union[AsyncIterable[Any], Iterable[Any]]",
                    "Callable[[T], bool]"
                ]
            }
        },
        "RefactoringTool.gen_lines": {
            "name": "gen_lines",
            "location": 671,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "block": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "indent": [
                    "str"
                ]
            }
        },
        "MultiprocessRefactoringTool.__init__": {
            "name": "__init__",
            "location": 697,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiprocessRefactoringTool.refactor": {
            "name": "refactor",
            "location": 702,
            "return": [
                "float",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "bool",
                    "str",
                    "bytes",
                    "Optional[int]"
                ],
                "write": [
                    "bool",
                    "str",
                    "bytes",
                    "Optional[int]"
                ],
                "doctests_only": [
                    "bool",
                    "str",
                    "bytes",
                    "Optional[int]"
                ],
                "num_processes": [
                    "int",
                    "Tuple[int, int]",
                    "bool",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "MultiprocessRefactoringTool._child": {
            "name": "_child",
            "location": 731,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiprocessRefactoringTool.refactor_file": {
            "name": "refactor_file",
            "location": 742,
            "return": [
                "Dict[str, Any]",
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/__init__.py": {},
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_apply.py": {
        "FixApply.transform": {
            "name": "transform",
            "location": 31,
            "return": [
                "str",
                "list",
                "bool",
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool",
                    "Hashable",
                    "float"
                ],
                "results": [
                    "int",
                    "Union[str, int]",
                    "bool"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_basestring.py": {
        "FixBasestring.transform": {
            "name": "transform",
            "location": 13,
            "return": [
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bytes",
                    "str",
                    "type"
                ],
                "results": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_buffer.py": {
        "FixBuffer.transform": {
            "name": "transform",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ],
                "results": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_callable.py": {
        "FixCallable.transform": {
            "name": "transform",
            "location": 30,
            "return": [
                "str",
                "type",
                "Optional[Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict",
                    "Optional[List[Any]]",
                    "Callable",
                    "Optional[Dict[str, Any]]"
                ],
                "results": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_dict.py": {
        "FixDict.transform": {
            "name": "transform",
            "location": 55,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Iterable[Any]",
                    "int"
                ],
                "results": [
                    "list",
                    "Dict[str, str]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "FixDict.in_special_context": {
            "name": "in_special_context",
            "location": 91,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "isiter": [
                    "bool",
                    "int"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_except.py": {
        "find_excepts": {
            "name": "find_excepts",
            "location": 30,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "nodes": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "FixExcept.transform": {
            "name": "transform",
            "location": 47,
            "return": [
                "float",
                "List[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "T",
                    "Dict[str, Any]",
                    "dict"
                ],
                "results": [
                    "bool"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_exec.py": {
        "FixExec.transform": {
            "name": "transform",
            "location": 27,
            "return": [
                "str",
                "type",
                "Optional[Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[str]",
                    "tuple",
                    "list"
                ],
                "results": [
                    "T",
                    "type",
                    "Match",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_execfile.py": {
        "FixExecfile.transform": {
            "name": "transform",
            "location": 24,
            "return": [
                "str",
                "type",
                "Optional[Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "results": [
                    "Dict[str, Any]",
                    "str",
                    "dict",
                    "bytes"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_exitfunc.py": {
        "FixExitfunc.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixExitfunc.start_tree": {
            "name": "start_tree",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "str"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "FixExitfunc.transform": {
            "name": "transform",
            "location": 37,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool",
                    "Dict[str, Any]"
                ],
                "results": [
                    "dict",
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_filter.py": {
        "FixFilter.transform": {
            "name": "transform",
            "location": 53,
            "return": [
                "None",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "results": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_funcattrs.py": {
        "FixFuncattrs.transform": {
            "name": "transform",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ],
                "results": [
                    "List[str]",
                    "T"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_future.py": {
        "FixFuture.transform": {
            "name": "transform",
            "location": 19,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bytes",
                    "str",
                    "type"
                ],
                "results": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_getcwdu.py": {
        "FixGetcwdu.transform": {
            "name": "transform",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ],
                "results": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_has_key.py": {
        "FixHasKey.transform": {
            "name": "transform",
            "location": 72,
            "return": [
                "None",
                "Optional[str]",
                "list",
                "Optional[int]",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Type"
                ],
                "results": [
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "Optional[int]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_idioms.py": {
        "FixIdioms.match": {
            "name": "match",
            "location": 79,
            "return": [
                "None",
                "Optional[T]",
                "T",
                "Optional[Iterable[Any]]",
                "str",
                "List[str]",
                "Callable",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "set",
                    "str"
                ]
            }
        },
        "FixIdioms.transform": {
            "name": "transform",
            "location": 90,
            "return": [
                "str",
                "Optional[int]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "Node",
                    "Mapping"
                ],
                "results": [
                    "str",
                    "Node",
                    "Mapping"
                ]
            }
        },
        "FixIdioms.transform_isinstance": {
            "name": "transform_isinstance",
            "location": 100,
            "return": [
                "bool",
                "List[str]",
                "Union[int, float, complex]",
                "Tuple[int, int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bytes",
                    "str",
                    "type"
                ],
                "results": [
                    "dict",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        },
        "FixIdioms.transform_while": {
            "name": "transform_while",
            "location": 112,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ],
                "results": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "FixIdioms.transform_sort": {
            "name": "transform_sort",
            "location": 116,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ],
                "results": [
                    "Dict[str, Any]",
                    "T",
                    "type"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_import.py": {
        "traverse_imports": {
            "name": "traverse_imports",
            "location": 19,
            "return": [
                "",
                "typing.Generator",
                "typing.Generator[str]"
            ],
            "arguments": {
                "names": [
                    "str"
                ]
            }
        },
        "FixImport.start_tree": {
            "name": "start_tree",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "str"
                ],
                "name": [
                    "str",
                    "list"
                ]
            }
        },
        "FixImport.transform": {
            "name": "transform",
            "location": 51,
            "return": [
                "None",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "type"
                ],
                "results": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "FixImport.probably_a_local_import": {
            "name": "probably_a_local_import",
            "location": 85,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "imp_name": [
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_imports.py": {
        "alternates": {
            "name": "alternates",
            "location": 61,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "members": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "build_pattern": {
            "name": "build_pattern",
            "location": 65,
            "return": [
                "",
                "typing.Generator[typing.Text]"
            ],
            "arguments": {
                "mapping": [
                    "dict[typing.Text, typing.Text]",
                    "Mapping[str, Any]",
                    "Dict[str, str]",
                    "Dict[str, bool]",
                    "Dict[str, List[Callable]]",
                    "dict",
                    "Dict[str, Any]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "FixImports.build_pattern": {
            "name": "build_pattern",
            "location": 96,
            "return": [
                "str",
                "bytes",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixImports.compile_pattern": {
            "name": "compile_pattern",
            "location": 99,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixImports.match": {
            "name": "match",
            "location": 106,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "set",
                    "str",
                    "Callable"
                ]
            }
        },
        "FixImports.start_tree": {
            "name": "start_tree",
            "location": 118,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "str"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "FixImports.transform": {
            "name": "transform",
            "location": 122,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int",
                    "list",
                    "set",
                    "Pattern[str]",
                    "Pattern[bytes]"
                ],
                "results": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "dict",
                    "Dict[str, float]",
                    "bool"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_imports2.py": {},
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_input.py": {
        "FixInput.transform": {
            "name": "transform",
            "location": 19,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ],
                "results": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_intern.py": {
        "FixIntern.transform": {
            "name": "transform",
            "location": 28,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "bool",
                    "Type[T]",
                    "type",
                    "Optional[str]"
                ],
                "results": [
                    "type",
                    "Sequence[Dict]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_isinstance.py": {
        "FixIsinstance.transform": {
            "name": "transform",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int",
                    "dict"
                ],
                "results": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_itertools.py": {
        "FixItertools.transform": {
            "name": "transform",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ],
                "results": [
                    "dict",
                    "Optional[List[Any]]",
                    "Optional[Any]",
                    "Type",
                    "Mapping[str, Any]",
                    "type"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_itertools_imports.py": {
        "FixItertoolsImports.transform": {
            "name": "transform",
            "location": 14,
            "return": [
                "None",
                "Dict[str, Set[str]]",
                "int",
                "Type",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ],
                "results": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_long.py": {
        "FixLong.transform": {
            "name": "transform",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Mapping[str, str]"
                ],
                "results": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_map.py": {
        "FixMap.transform": {
            "name": "transform",
            "location": 59,
            "return": [
                "None",
                "bool",
                "str",
                "Hashable"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Type[Any]"
                ],
                "results": [
                    "bytes",
                    "dict"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_metaclass.py": {
        "has_metaclass": {
            "name": "has_metaclass",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "parent": [
                    "str",
                    "int"
                ]
            }
        },
        "fixup_parse_tree": {
            "name": "fixup_parse_tree",
            "location": 45,
            "return": [
                "int",
                "str",
                "DefaultDict"
            ],
            "arguments": {
                "cls_node": [
                    "list",
                    "Tuple[float, float]"
                ]
            }
        },
        "fixup_simple_stmt": {
            "name": "fixup_simple_stmt",
            "location": 71,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "parent": [
                    "bool",
                    "str",
                    "Callable",
                    "Optional[str]",
                    "float"
                ],
                "i": [
                    "bool",
                    "str",
                    "Callable",
                    "Optional[str]",
                    "float"
                ],
                "stmt_node": [
                    "Callable[[str], Any]",
                    "str",
                    "int",
                    "bool",
                    "Optional[List[str]]"
                ]
            }
        },
        "remove_trailing_newline": {
            "name": "remove_trailing_newline",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "node": [
                    "Node"
                ]
            }
        },
        "find_metas": {
            "name": "find_metas",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "cls_node": [
                    "bblfsh.Node",
                    "int",
                    "Node"
                ]
            }
        },
        "fixup_indent": {
            "name": "fixup_indent",
            "location": 123,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "suite": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "FixMetaclass.transform": {
            "name": "transform",
            "location": 152,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Node",
                    "dict",
                    "Optional[gfg.bsbst_and_node.Node]",
                    "network_simulator.Node.Node"
                ],
                "results": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_methodattrs.py": {
        "FixMethodattrs.transform": {
            "name": "transform",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ],
                "results": [
                    "List[str]",
                    "T"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_ne.py": {
        "FixNe.match": {
            "name": "match",
            "location": 17,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Type[T]"
                ]
            }
        },
        "FixNe.transform": {
            "name": "transform",
            "location": 21,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ClassVar",
                    "monkey.token.TokenType",
                    "bool"
                ],
                "results": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_next.py": {
        "is_assign_target": {
            "name": "is_assign_target",
            "location": 81,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": [
                    "int",
                    "str"
                ]
            }
        },
        "find_assign": {
            "name": "find_assign",
            "location": 93,
            "return": [
                "None",
                "bool",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "node": [
                    "str"
                ]
            }
        },
        "is_subtree": {
            "name": "is_subtree",
            "location": 100,
            "return": [
                "bool"
            ],
            "arguments": {
                "root": [
                    "List[int]",
                    "int"
                ],
                "node": [
                    "List[int]",
                    "int"
                ]
            }
        },
        "FixNext.start_tree": {
            "name": "start_tree",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "List[str]",
                    "Callable",
                    "Dict[str, str]",
                    "str"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "FixNext.transform": {
            "name": "transform",
            "location": 46,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Type[Any]",
                    "list",
                    "Dict[str, Any]"
                ],
                "results": [
                    "Dict[str, Any]",
                    "dict",
                    "List[dict]",
                    "Dict[str, Dict[str, Any]]",
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_nonzero.py": {
        "FixNonzero.transform": {
            "name": "transform",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ],
                "results": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_numliterals.py": {
        "FixNumliterals.match": {
            "name": "match",
            "location": 17,
            "return": [
                "bool",
                "str",
                "dict",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "FixNumliterals.transform": {
            "name": "transform",
            "location": 21,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Type",
                    "type",
                    "Type[T]"
                ],
                "results": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_operator.py": {
        "invocation": {
            "name": "invocation",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "s": [
                    "AnyStr",
                    "Union[bytes, bytearray]",
                    "Iterable[T]",
                    "bool",
                    "str"
                ]
            }
        },
        "invocation.dec": {
            "name": "dec",
            "location": 20,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "f": [
                    "dict",
                    "str",
                    "int"
                ]
            }
        },
        "FixOperator.transform": {
            "name": "transform",
            "location": 43,
            "return": [
                "bool",
                "Callable",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "type",
                    "dict",
                    "Exception",
                    "Union[str, List[str]]",
                    "bool"
                ],
                "results": [
                    "type",
                    "dict",
                    "Exception",
                    "Union[str, List[str]]",
                    "bool"
                ]
            }
        },
        "FixOperator._sequenceIncludes": {
            "name": "_sequenceIncludes",
            "location": 49,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool",
                    "Hashable",
                    "Optional[List[int]]"
                ],
                "results": [
                    "bool",
                    "Hashable",
                    "Optional[List[int]]"
                ]
            }
        },
        "FixOperator._isCallable": {
            "name": "_isCallable",
            "location": 53,
            "return": [
                "Type",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "tuple",
                    "dict",
                    "List[str]"
                ],
                "results": [
                    "str",
                    "int",
                    "Type",
                    "float",
                    "List[str]"
                ]
            }
        },
        "FixOperator._repeat": {
            "name": "_repeat",
            "location": 59,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool",
                    "Hashable",
                    "Optional[List[int]]"
                ],
                "results": [
                    "bool",
                    "Hashable",
                    "Optional[List[int]]"
                ]
            }
        },
        "FixOperator._irepeat": {
            "name": "_irepeat",
            "location": 63,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool",
                    "Hashable",
                    "Optional[List[int]]"
                ],
                "results": [
                    "bool",
                    "Hashable",
                    "Optional[List[int]]"
                ]
            }
        },
        "FixOperator._isSequenceType": {
            "name": "_isSequenceType",
            "location": 67,
            "return": [
                "str",
                "Callable[..., T]",
                "Type"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "results": []
            }
        },
        "FixOperator._isMappingType": {
            "name": "_isMappingType",
            "location": 71,
            "return": [
                "str",
                "Callable[..., T]",
                "Type"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "results": []
            }
        },
        "FixOperator._isNumberType": {
            "name": "_isNumberType",
            "location": 75,
            "return": [
                "str",
                "Callable[..., T]",
                "Type"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "results": []
            }
        },
        "FixOperator._handle_rename": {
            "name": "_handle_rename",
            "location": 78,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "int",
                    "List[str]"
                ],
                "results": [
                    "str",
                    "dict"
                ],
                "name": [
                    "str",
                    "Type",
                    "Iterable[Hashable]"
                ]
            }
        },
        "FixOperator._handle_type2abc": {
            "name": "_handle_type2abc",
            "location": 83,
            "return": [
                "Set[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "dict"
                ],
                "results": [
                    "bool",
                    "str",
                    "Type"
                ],
                "module": [
                    "Callable",
                    "str",
                    "int"
                ],
                "abc": [
                    "Callable[..., None]"
                ]
            }
        },
        "FixOperator._check_method": {
            "name": "_check_method",
            "location": 89,
            "return": [
                "collections_@_Callable",
                "None",
                "Optional[str]",
                "List[\"InlineContent\"]",
                "bool",
                "Optional[Sequence[Any]]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int",
                    "bool"
                ],
                "results": [
                    "Dict[str, Union[str, Any]]",
                    "List[str]",
                    "Dict[str, Any]",
                    "Iterator",
                    "list"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_paren.py": {
        "FixParen.transform": {
            "name": "transform",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ],
                "results": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_print.py": {
        "FixPrint.transform": {
            "name": "transform",
            "location": 37,
            "return": [
                "None",
                "str",
                "bool",
                "Iterable[Any]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "float",
                    "str",
                    "type",
                    "List[str]",
                    "Union[str, List[str]]",
                    "MutableMapping[str, Any]"
                ],
                "results": [
                    "dict",
                    "type",
                    "Dict[str, Any]",
                    "OrderedDict",
                    "Mapping[str, Any]",
                    "T"
                ]
            }
        },
        "FixPrint.add_kwarg": {
            "name": "add_kwarg",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "l_nodes": [
                    "str",
                    "List[str]",
                    "bytes",
                    "list",
                    "int"
                ],
                "s_kwd": [
                    "Optional[str]",
                    "str",
                    "Optional[List[str]]",
                    "Dict[str, Any]"
                ],
                "n_expr": [
                    "bool",
                    "Type",
                    "str",
                    "type"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_raise.py": {
        "FixRaise.transform": {
            "name": "transform",
            "location": 38,
            "return": [
                "None",
                "Optional[Dict[str, str]]",
                "Optional[BaseException]",
                "Union[dict, List[dict]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[str]"
                ],
                "results": [
                    "List[str]",
                    "tuple",
                    "dict",
                    "list",
                    "float"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_raw_input.py": {
        "FixRawInput.transform": {
            "name": "transform",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ],
                "results": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_reduce.py": {
        "FixReduce.transform": {
            "name": "transform",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int",
                    "dict"
                ],
                "results": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_renames.py": {
        "alternates": {
            "name": "alternates",
            "location": 17,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "members": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "build_pattern": {
            "name": "build_pattern",
            "location": 21,
            "return": [
                "",
                "typing.Generator[typing.Text]"
            ],
            "arguments": {}
        },
        "FixRenames.match": {
            "name": "match",
            "location": 49,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "set"
                ]
            }
        },
        "FixRenames.transform": {
            "name": "transform",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ],
                "results": [
                    "str",
                    "Dict[str, Any]",
                    "Type",
                    "Union[bytes, str]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_repr.py": {
        "FixRepr.transform": {
            "name": "transform",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "Union[int, bytes]",
                    "type",
                    "Dict[str, Iterable[Any]]",
                    "bool",
                    "dict",
                    "Optional[Match]",
                    "Tuple[Type[Any]]"
                ],
                "results": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_set_literal.py": {
        "FixSetLiteral.transform": {
            "name": "transform",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bytes",
                    "str",
                    "type"
                ],
                "results": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_standarderror.py": {
        "FixStandarderror.transform": {
            "name": "transform",
            "location": 17,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bytes",
                    "str",
                    "type"
                ],
                "results": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_sys_exc.py": {
        "FixSysExc.transform": {
            "name": "transform",
            "location": 22,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int",
                    "Exception"
                ],
                "results": [
                    "str",
                    "Optional[Match]",
                    "Dict[str, Any]",
                    "type"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_throw.py": {
        "FixThrow.transform": {
            "name": "transform",
            "location": 26,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int",
                    "dict"
                ],
                "results": [
                    "dict"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_tuple_params.py": {
        "is_docstring": {
            "name": "is_docstring",
            "location": 27,
            "return": [
                "int",
                "List[int]",
                "Union[List[str], List[Any]]",
                "str"
            ],
            "arguments": {
                "stmt": [
                    "Optional[int]",
                    "Optional[float]",
                    "str"
                ]
            }
        },
        "simplify_args": {
            "name": "simplify_args",
            "location": 139,
            "return": [
                "str",
                "List[str]",
                "bytes"
            ],
            "arguments": {
                "node": [
                    "Type[T]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "find_params": {
            "name": "find_params",
            "location": 150,
            "return": [
                "int",
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "node": []
            }
        },
        "map_to_index": {
            "name": "map_to_index",
            "location": 157,
            "return": [
                "Dict[str, bool]",
                "dict",
                "Dict[str, Any]",
                "OrderedDict[str, Any]",
                "str"
            ],
            "arguments": {
                "param_list": [
                    "int",
                    "Union[int, float]"
                ],
                "prefix": [
                    "bool",
                    "Optional[str]",
                    "Dict[str, str]",
                    "Sequence[str]",
                    "str",
                    "type"
                ],
                "d": [
                    "Optional[int]",
                    "Dict[str, int]",
                    "Optional[Any]",
                    "Callable"
                ]
            }
        },
        "tuple_name": {
            "name": "tuple_name",
            "location": 168,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "param_list": [
                    "str",
                    "bool",
                    "Optional[List[str]]",
                    "Iterator[Tuple[str, str]]",
                    "bytes"
                ]
            }
        },
        "FixTupleParams.transform": {
            "name": "transform",
            "location": 46,
            "return": [
                "bool",
                "List['cirq.Qid']",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ],
                "results": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ]
            }
        },
        "FixTupleParams.transform_lambda": {
            "name": "transform_lambda",
            "location": 110,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ],
                "results": [
                    "list",
                    "str",
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "FixTupleParams.transform.handle_tuple": {
            "name": "handle_tuple",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "tuple_arg": [
                    "str",
                    "BinaryIO"
                ],
                "add_prefix": [
                    "Iterable['cirq.Qid']",
                    "Optional[T]",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_types.py": {
        "FixTypes.transform": {
            "name": "transform",
            "location": 58,
            "return": [
                "None",
                "pgen2.grammar.Grammar",
                "Union[type, Tuple[type, ...]]",
                "Dict[str, str]",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "T",
                    "Match",
                    "type",
                    "bool"
                ],
                "results": [
                    "str",
                    "list",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_unicode.py": {
        "FixUnicode.transform": {
            "name": "transform",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "results": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_urllib.py": {
        "build_pattern": {
            "name": "build_pattern",
            "location": 49,
            "return": [
                "",
                "typing.Generator[typing.Text]"
            ],
            "arguments": {}
        },
        "FixUrllib.build_pattern": {
            "name": "build_pattern",
            "location": 74,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixUrllib.transform_import": {
            "name": "transform_import",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ],
                "results": [
                    "dict",
                    "type",
                    "Dict[str, Any]",
                    "OrderedDict",
                    "Mapping[str, Any]",
                    "T"
                ]
            }
        },
        "FixUrllib.transform_member": {
            "name": "transform_member",
            "location": 93,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Type",
                    "List[str]",
                    "Union[None, str, List[str], Dict[str, str]]"
                ],
                "results": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ]
            }
        },
        "FixUrllib.transform_dot": {
            "name": "transform_dot",
            "location": 169,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int",
                    "dict"
                ],
                "results": [
                    "str",
                    "Dict[str, Union[str, Set]]",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "FixUrllib.transform": {
            "name": "transform",
            "location": 186,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Node",
                    "Sequence[Dict]",
                    "Mapping",
                    "str"
                ],
                "results": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "FixUrllib.transform_member.handle_name": {
            "name": "handle_name",
            "location": 141,
            "return": [
                "list",
                "NamedTuple",
                "bool",
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "prefix": [
                    "str",
                    "Type[T]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_ws_comma.py": {
        "FixWsComma.transform": {
            "name": "transform",
            "location": 24,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool",
                    "Hashable",
                    "float"
                ],
                "results": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_xrange.py": {
        "FixXrange.start_tree": {
            "name": "start_tree",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "str"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "FixXrange.finish_tree": {
            "name": "finish_tree",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "Dict[str, Any]"
                ],
                "filename": [
                    "Dict[str, Any]"
                ]
            }
        },
        "FixXrange.transform": {
            "name": "transform",
            "location": 27,
            "return": [
                "Optional[int]",
                "Optional[List[int]]",
                "Tuple[float, float, float]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool",
                    "List['OverloadPart']",
                    "Callable[..., T]",
                    "Mapping",
                    "str"
                ],
                "results": [
                    "Dict[str, float]",
                    "List[str]",
                    "list",
                    "Sequence[Dict]"
                ]
            }
        },
        "FixXrange.transform_xrange": {
            "name": "transform_xrange",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "T",
                    "Union[int, float]"
                ],
                "results": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "FixXrange.transform_range": {
            "name": "transform_range",
            "location": 42,
            "return": [
                "List[str]",
                "Optional[Iterable[str]]",
                "str",
                "Dict[str, Set[str]]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict"
                ],
                "results": [
                    "str",
                    "Mapping[str, Any]",
                    "Dict[Hashable, Any]"
                ]
            }
        },
        "FixXrange.in_special_context": {
            "name": "in_special_context",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_xreadlines.py": {
        "FixXreadlines.transform": {
            "name": "transform",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[str]",
                    "str",
                    "Callable[[None], bool]",
                    "Optional[str]",
                    "Optional[Sequence[str]]"
                ],
                "results": [
                    "dict",
                    "Type",
                    "Mapping"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/fix_zip.py": {
        "FixZip.transform": {
            "name": "transform",
            "location": 24,
            "return": [
                "None",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "results": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/fixes/__init__.py": {},
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/pgen2/conv.py": {
        "Converter.run": {
            "name": "run",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "graminit_h": [
                    "int",
                    "str",
                    "Sequence[T]",
                    "List[Dict]"
                ],
                "graminit_c": [
                    "int",
                    "str",
                    "Sequence[T]",
                    "List[Dict]"
                ]
            }
        },
        "Converter.parse_graminit_h": {
            "name": "parse_graminit_h",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "Converter.parse_graminit_c": {
            "name": "parse_graminit_c",
            "location": 84,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Converter.finish_off": {
            "name": "finish_off",
            "location": 249,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/pgen2/driver.py": {
        "load_grammar": {
            "name": "load_grammar",
            "location": 109,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "gt": [
                    "str",
                    "Optional[bool]",
                    "float",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, str]"
                ],
                "gp": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "save": [
                    "bool",
                    "Optional[bool]"
                ],
                "force": [
                    "bool",
                    "int",
                    "str",
                    "dict"
                ],
                "logger": [
                    "Optional[logging.Logger]",
                    "str",
                    "logging.Logger",
                    "int"
                ]
            }
        },
        "_newer": {
            "name": "_newer",
            "location": 134,
            "return": [
                "bool"
            ],
            "arguments": {
                "a": [
                    "str",
                    "Optional[str]",
                    "bytes"
                ],
                "b": [
                    "str",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 143,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "Driver.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "grammar": [
                    "int",
                    "float",
                    "List[List[int]]"
                ],
                "convert": [
                    "int",
                    "float",
                    "List[List[int]]"
                ],
                "logger": [
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "Optional[Mapping[str, Any]]"
                ]
            }
        },
        "Driver.parse_tokens": {
            "name": "parse_tokens",
            "location": 38,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "Iterable[Any]",
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Iterator[str]"
                ],
                "debug": [
                    "str",
                    "List[str]",
                    "Union[str, List]"
                ]
            }
        },
        "Driver.parse_stream_raw": {
            "name": "parse_stream_raw",
            "location": 86,
            "return": [
                "str",
                "Callable",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "IO",
                    "str",
                    "bytes",
                    "Tuple[str, str]",
                    "int"
                ],
                "debug": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "Driver.parse_stream": {
            "name": "parse_stream",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "stream": [
                    "io.StringIO",
                    "str",
                    "Optional[Iterable[Any]]"
                ],
                "debug": [
                    "io.StringIO",
                    "str",
                    "Optional[Iterable[Any]]"
                ]
            }
        },
        "Driver.parse_file": {
            "name": "parse_file",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "encoding": [
                    "str"
                ],
                "debug": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Driver.parse_string": {
            "name": "parse_string",
            "location": 103,
            "return": [
                "str",
                "Optional[bool]",
                "Optional[Dict[str, Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "debug": [
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/pgen2/grammar.py": {
        "Grammar.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grammar.dump": {
            "name": "dump",
            "location": 87,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "Grammar.load": {
            "name": "load",
            "location": 93,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "Grammar.copy": {
            "name": "copy",
            "location": 100,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grammar.report": {
            "name": "report",
            "location": 113,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/pgen2/literals.py": {
        "escape": {
            "name": "escape",
            "location": 19,
            "return": [
                "typing.Text",
                "str",
                "List[str]",
                "Iterable[T]",
                "float",
                "int",
                "List[\"DictDataLoader\"]",
                "type"
            ],
            "arguments": {
                "m": [
                    "str",
                    "bool",
                    "Container[T]"
                ]
            }
        },
        "evalString": {
            "name": "evalString",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int",
                    "bytes",
                    "float"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/pgen2/parse.py": {
        "ParseError.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "bool",
                    "Optional[int]",
                    "str",
                    "Tuple[str, int]",
                    "dict"
                ],
                "type": [
                    "Optional[int]",
                    "bool",
                    "Optional[List[str]]",
                    "dict"
                ],
                "value": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Optional[BaseException]",
                    "T"
                ],
                "context": [
                    "bool",
                    "float",
                    "dict",
                    "Optional[List[str]]",
                    "Optional[int]"
                ]
            }
        },
        "Parser.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "grammar": [
                    "Collection[T]",
                    "bytes",
                    "str"
                ],
                "convert": [
                    "dict",
                    "str",
                    "slice",
                    "Sequence[Any]",
                    "List[str]"
                ]
            }
        },
        "Parser.setup": {
            "name": "setup",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "Parser.addtoken": {
            "name": "addtoken",
            "location": 113,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Type[BaseException]",
                    "BaseException"
                ],
                "value": [
                    "Type[BaseException]",
                    "BaseException"
                ],
                "context": [
                    "Tuple[object]",
                    "Type[BaseException]",
                    "BaseException"
                ]
            }
        },
        "Parser.classify": {
            "name": "classify",
            "location": 161,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Union[str, List[str]]",
                    "str"
                ],
                "value": [
                    "int",
                    "str"
                ],
                "context": [
                    "Optional[str]",
                    "BaseException",
                    "Type[BaseException]"
                ]
            }
        },
        "Parser.shift": {
            "name": "shift",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Optional[BaseException]",
                    "Type[BaseException]",
                    "Optional[Type[BaseException]]",
                    "int"
                ],
                "value": [
                    "Optional[BaseException]",
                    "Type[BaseException]",
                    "Optional[Type[BaseException]]",
                    "int"
                ],
                "newstate": [
                    "Callable[[None], None]",
                    "List[str]",
                    "str",
                    "bytes",
                    "Dict[str, Any]",
                    "ForwardRef"
                ],
                "context": [
                    "Optional[BaseException]",
                    "Type[BaseException]",
                    "Optional[Type[BaseException]]",
                    "int"
                ]
            }
        },
        "Parser.push": {
            "name": "push",
            "location": 184,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Type[Any]",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "newdfa": [
                    "str",
                    "bool"
                ],
                "newstate": [
                    "ForwardRef",
                    "str",
                    "Type",
                    "Callable[[None], None]",
                    "List[str]",
                    "IO"
                ],
                "context": [
                    "Type[Any]",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "Parser.pop": {
            "name": "pop",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/pgen2/pgen.py": {
        "generate_grammar": {
            "name": "generate_grammar",
            "location": 384,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "ParserGenerator.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[str]",
                    "bytes"
                ],
                "stream": [
                    "str",
                    "BinaryIO"
                ]
            }
        },
        "ParserGenerator.make_grammar": {
            "name": "make_grammar",
            "location": 27,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]",
                "str",
                "Optional[int]",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.make_first": {
            "name": "make_first",
            "location": 52,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "str",
                    "List[str]"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "ParserGenerator.make_label": {
            "name": "make_label",
            "location": 61,
            "return": [
                "int",
                "str",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "str",
                    "Union[tuple, list]",
                    "Iterator[Any]",
                    "Dict[str, Any]"
                ],
                "label": [
                    "str",
                    "Sequence[str]",
                    "int",
                    "Callable[..., T]",
                    "Optional[List]",
                    "tuple"
                ]
            }
        },
        "ParserGenerator.addfirstsets": {
            "name": "addfirstsets",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.calcfirst": {
            "name": "calcfirst",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "ParserGenerator.parse": {
            "name": "parse",
            "location": 145,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.make_dfa": {
            "name": "make_dfa",
            "location": 169,
            "return": [
                "Callable",
                "List[str]",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "str"
                ],
                "finish": [
                    "int",
                    "float"
                ]
            }
        },
        "ParserGenerator.dump_nfa": {
            "name": "dump_nfa",
            "location": 205,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "start": [
                    "int",
                    "str",
                    "Dict[str, 'LabwareDefinition']",
                    "List[int]",
                    "Tuple[float, float]"
                ],
                "finish": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "ParserGenerator.dump_dfa": {
            "name": "dump_dfa",
            "location": 221,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[int]"
                ],
                "dfa": [
                    "str",
                    "int"
                ]
            }
        },
        "ParserGenerator.simplify_dfa": {
            "name": "simplify_dfa",
            "location": 228,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dfa": [
                    "list",
                    "List[str]",
                    "int",
                    "str"
                ]
            }
        },
        "ParserGenerator.parse_rhs": {
            "name": "parse_rhs",
            "location": 249,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.parse_alt": {
            "name": "parse_alt",
            "location": 266,
            "return": [
                "float",
                "Tuple[Any, Any, Any]",
                "bytearray",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.parse_item": {
            "name": "parse_item",
            "location": 276,
            "return": [
                "str",
                "bytes",
                "Dict[Tuple[int, int], int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.parse_atom": {
            "name": "parse_atom",
            "location": 296,
            "return": [
                "str",
                "list",
                "List[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.expect": {
            "name": "expect",
            "location": 313,
            "return": [
                "str",
                "int",
                "List[List[float]]"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Optional[str]",
                    "str"
                ],
                "value": [
                    "str",
                    "Optional[Type[BaseException]]",
                    "Optional[BaseException]",
                    "Dict[str, Any]"
                ]
            }
        },
        "ParserGenerator.gettoken": {
            "name": "gettoken",
            "location": 321,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.raise_error": {
            "name": "raise_error",
            "location": 328,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "Exception",
                    "str",
                    "Sequence[str]",
                    "tuple",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "NFAState.__init__": {
            "name": "__init__",
            "location": 339,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NFAState.addarc": {
            "name": "addarc",
            "location": 342,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "next": [
                    "Dict[\"core.Edge\", \"state.State\"]"
                ],
                "label": [
                    "Optional[str]",
                    "Collection[int]"
                ]
            }
        },
        "DFAState.__init__": {
            "name": "__init__",
            "location": 349,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "nfaset": [
                    "Optional[str]",
                    "int",
                    "dict",
                    "float",
                    "str"
                ],
                "final": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "DFAState.addarc": {
            "name": "addarc",
            "location": 357,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "next": [],
                "label": [
                    "int"
                ]
            }
        },
        "DFAState.unifystate": {
            "name": "unifystate",
            "location": 363,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "old": [
                    "int"
                ],
                "new": [
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "DFAState.__eq__": {
            "name": "__eq__",
            "location": 368,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list",
                    "bool",
                    "float"
                ]
            }
        },
        "ParserGenerator.make_dfa.closure": {
            "name": "closure",
            "location": 176,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "state": [
                    "int",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "ParserGenerator.make_dfa.addclosure": {
            "name": "addclosure",
            "location": 180,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "state": [
                    "str",
                    "List[T]"
                ],
                "base": [
                    "Type",
                    "float",
                    "type"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/pgen2/token.py": {
        "ISTERMINAL": {
            "name": "ISTERMINAL",
            "location": 75,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "ISNONTERMINAL": {
            "name": "ISNONTERMINAL",
            "location": 78,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "ISEOF": {
            "name": "ISEOF",
            "location": 81,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/pgen2/tokenize.py": {
        "group": {
            "name": "group",
            "location": 48,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "any": {
            "name": "any",
            "location": 49,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "maybe": {
            "name": "maybe",
            "location": 50,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "printtoken": {
            "name": "printtoken",
            "location": 154,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "type": [
                    "str",
                    "bool"
                ],
                "token": [
                    "str",
                    "bool"
                ],
                "xxx_todo_changeme": [
                    "str",
                    "float",
                    "int",
                    "bool",
                    "Iterable[str]",
                    "Callable",
                    "Optional[bool]"
                ],
                "xxx_todo_changeme1": [
                    "str",
                    "float",
                    "int",
                    "bool",
                    "Iterable[str]",
                    "Callable",
                    "Optional[bool]"
                ],
                "line": [
                    "bool",
                    "List[str]",
                    "Type",
                    "int",
                    "str"
                ]
            }
        },
        "tokenize": {
            "name": "tokenize",
            "location": 160,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "readline": [
                    "int",
                    "Callable",
                    "str"
                ],
                "tokeneater": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "tokenize_loop": {
            "name": "tokenize_loop",
            "location": 179,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "readline": [
                    "int",
                    "Callable",
                    "str"
                ],
                "tokeneater": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_get_normal_name": {
            "name": "_get_normal_name",
            "location": 241,
            "return": [
                "typing.Text",
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "orig_enc": [
                    "str",
                    "Callable",
                    "Tuple[str, str]",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "detect_encoding": {
            "name": "detect_encoding",
            "location": 252,
            "return": [
                "List[List[str]]",
                "tuple[typing.Union[typing.Text,list]]",
                "tuple[list]"
            ],
            "arguments": {
                "readline": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "untokenize": {
            "name": "untokenize",
            "location": 324,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "iterable": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "generate_tokens": {
            "name": "generate_tokens",
            "location": 345,
            "return": [
                ""
            ],
            "arguments": {
                "readline": [
                    "Callable[[], str]",
                    "str",
                    "List[int]"
                ]
            }
        },
        "Untokenizer.__init__": {
            "name": "__init__",
            "location": 185,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Untokenizer.add_whitespace": {
            "name": "add_whitespace",
            "location": 190,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int"
                ]
            }
        },
        "Untokenizer.untokenize": {
            "name": "untokenize",
            "location": 197,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "iterable": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "Untokenizer.compat": {
            "name": "compat",
            "location": 211,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "Tuple[int, str]",
                    "List[str]"
                ],
                "iterable": [
                    "str",
                    "Iterator[str]",
                    "List[str]"
                ]
            }
        },
        "detect_encoding.read_or_stop": {
            "name": "read_or_stop",
            "location": 273,
            "return": [
                "bytes",
                "str",
                "bytearray",
                "int"
            ],
            "arguments": {}
        },
        "detect_encoding.find_cookie": {
            "name": "find_cookie",
            "location": 279,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[float]"
            ],
            "arguments": {
                "line": [
                    "bytes",
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/autopep/autopep8_lib/lib2to3/pgen2/__init__.py": {},
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/builder/python_builder.py": {
        "AnacondaSetPythonBuilder.update_interpreter_build_system": {
            "name": "update_interpreter_build_system",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "AnacondaSetPythonBuilder._get_project": {
            "name": "_get_project",
            "location": 59,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Union[int, bool]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnacondaSetPythonBuilder._parse_tpl": {
            "name": "_parse_tpl",
            "location": 65,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "AnacondaSetPythonBuilder._save_project": {
            "name": "_save_project",
            "location": 81,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "project_data": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "int",
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/builder/__init__.py": {},
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/cache.py": {
        "clear_time_caches": {
            "name": "clear_time_caches",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "delete_all": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "time_cache": {
            "name": "time_cache",
            "location": 48,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "time_add_setting": [
                    "list",
                    "bool",
                    "KT",
                    "float"
                ]
            }
        },
        "memoize_method": {
            "name": "memoize_method",
            "location": 80,
            "return": [
                "int",
                "str",
                "float",
                "Union[int, float]"
            ],
            "arguments": {
                "method": [
                    "str",
                    "dict",
                    "Iterable[str]",
                    "tuple"
                ]
            }
        },
        "cache_star_import": {
            "name": "cache_star_import",
            "location": 94,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "_invalidate_star_import_cache_module": {
            "name": "_invalidate_star_import_cache_module",
            "location": 102,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "module": [
                    "str",
                    "Union[str, Pattern[str]]"
                ],
                "only_main": [
                    "bool",
                    "Exception",
                    "dict",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "invalidate_star_import_cache": {
            "name": "invalidate_star_import_cache",
            "location": 120,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool"
                ]
            }
        },
        "time_cache._temp": {
            "name": "_temp",
            "location": 57,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "key_func": [
                    "Hashable",
                    "str",
                    "List[str]",
                    "KT",
                    "Iterable[T]",
                    "bool"
                ]
            }
        },
        "memoize_method.wrapper": {
            "name": "wrapper",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "cache_star_import.wrapper": {
            "name": "wrapper",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "time_cache._temp.wrapper": {
            "name": "wrapper",
            "location": 61,
            "return": [],
            "arguments": {}
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/common.py": {
        "safe_property": {
            "name": "safe_property",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "func": [
                    "str",
                    "Callable",
                    "bool",
                    "Dict[str, Optional[str]]"
                ]
            }
        },
        "reraise_uncaught": {
            "name": "reraise_uncaught",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "scale_speed_settings": {
            "name": "scale_speed_settings",
            "location": 85,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "factor": [
                    "int",
                    "str",
                    "Tuple[int]",
                    "bytes",
                    "Tuple[int, int]"
                ]
            }
        },
        "indent_block": {
            "name": "indent_block",
            "location": 97,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "indention": [
                    "typing.Text",
                    "str",
                    "int"
                ]
            }
        },
        "ignored": {
            "name": "ignored",
            "location": 108,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {}
        },
        "source_to_unicode": {
            "name": "source_to_unicode",
            "location": 119,
            "return": [
                "unicode",
                "str",
                "dict"
            ],
            "arguments": {
                "source": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "encoding": [
                    "str",
                    "None"
                ]
            }
        },
        "splitlines": {
            "name": "splitlines",
            "location": 151,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "unite": {
            "name": "unite",
            "location": 161,
            "return": [
                "set",
                "Set[str]",
                "list",
                "str",
                "bool"
            ],
            "arguments": {
                "iterable": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "to_list": {
            "name": "to_list",
            "location": 166,
            "return": [
                "str",
                "bool",
                "set"
            ],
            "arguments": {
                "func": [
                    "Callable"
                ]
            }
        },
        "reraise_uncaught.wrapper": {
            "name": "wrapper",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "PushBackIterator.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "iterator": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "PushBackIterator.push_back": {
            "name": "push_back",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Dict[str, Any]",
                    "List[str]",
                    "List[float]",
                    "List[List[Any]]",
                    "int",
                    "str"
                ]
            }
        },
        "PushBackIterator.__iter__": {
            "name": "__iter__",
            "location": 69,
            "return": [
                "PushBackIterator",
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "PushBackIterator.next": {
            "name": "next",
            "location": 72,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PushBackIterator.__next__": {
            "name": "__next__",
            "location": 76,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "source_to_unicode.detect_encoding": {
            "name": "detect_encoding",
            "location": 120,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "to_list.wrapper": {
            "name": "wrapper",
            "location": 167,
            "return": [
                "List[Dict]",
                "str",
                "List[str]",
                "List[T]",
                "list",
                "Optional[Type]"
            ],
            "arguments": {}
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/debug.py": {
        "_lazy_colorama_init": {
            "name": "_lazy_colorama_init",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "reset_time": {
            "name": "reset_time",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "increase_indent": {
            "name": "increase_indent",
            "location": 75,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "dbg": {
            "name": "dbg",
            "location": 87,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "message": [
                    "float",
                    "bool",
                    "callable",
                    "dict",
                    "int"
                ]
            }
        },
        "warning": {
            "name": "warning",
            "location": 102,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "message": [
                    "float",
                    "int",
                    "dict"
                ]
            }
        },
        "speed": {
            "name": "speed",
            "location": 113,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Callable",
                    "bool"
                ]
            }
        },
        "print_to_stdout": {
            "name": "print_to_stdout",
            "location": 120,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "color": [
                    "str",
                    "Optional[str]"
                ],
                "str_out": [
                    "str"
                ]
            }
        },
        "increase_indent.wrapper": {
            "name": "wrapper",
            "location": 77,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Mapping[str, Sequence[str]]"
            ],
            "arguments": {}
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/refactoring.py": {
        "rename": {
            "name": "rename",
            "location": 52,
            "return": [
                "Refactoring",
                "bool",
                "type"
            ],
            "arguments": {
                "script": [
                    "Optional[str]",
                    "str"
                ],
                "new_name": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "_rename": {
            "name": "_rename",
            "location": 62,
            "return": [
                "dict",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "names": [
                    "str"
                ],
                "replace_str": [
                    "int",
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "extract": {
            "name": "extract",
            "location": 97,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "script": [
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "new_name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "inline": {
            "name": "inline",
            "location": 159,
            "return": [
                "Refactoring",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "script": [
                    "Mapping[str, List[str]]",
                    "str"
                ]
            }
        },
        "Refactoring.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "change_dct": [
                    "str",
                    "bool",
                    "List[List[int]]"
                ]
            }
        },
        "Refactoring.old_files": {
            "name": "old_files",
            "location": 29,
            "return": [
                "dict[, str]",
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Refactoring.new_files": {
            "name": "new_files",
            "location": 35,
            "return": [
                "dict[, str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Refactoring.diff": {
            "name": "diff",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_rename.process": {
            "name": "process",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "int",
                    "List[str]",
                    "AnyStr"
                ],
                "old_lines": [
                    "str",
                    "int",
                    "List[str]",
                    "AnyStr"
                ],
                "new_lines": [
                    "Optional[str]",
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/settings.py": {},
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/utils.py": {
        "setup_readline": {
            "name": "setup_readline",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "namespace_module": [
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        },
        "version_info": {
            "name": "version_info",
            "location": 123,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "setup_readline.JediRL.complete": {
            "name": "complete",
            "location": 71,
            "return": [
                "None",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int",
                    "NamedTuple"
                ],
                "state": [
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/_compatibility.py": {
        "find_module_py33": {
            "name": "find_module_py33",
            "location": 34,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "string": [
                    "Dict[str, Any]"
                ],
                "path": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "find_module_pre_py33": {
            "name": "find_module_pre_py33",
            "location": 81,
            "return": [
                "str",
                "Callable[[List, bool], None]",
                "Dict[str, Any]",
                "Optional[TextIO]"
            ],
            "arguments": {
                "string": [
                    "str",
                    "int"
                ],
                "path": [
                    "Optional[str]",
                    "Optional[TextIO]",
                    "Optional[Sequence[str]]",
                    "str"
                ]
            }
        },
        "use_metaclass": {
            "name": "use_metaclass",
            "location": 185,
            "return": [
                "str",
                "Exception",
                "bool",
                "int"
            ],
            "arguments": {
                "meta": [
                    "str",
                    "Type['GenericList']",
                    "int"
                ]
            }
        },
        "u": {
            "name": "u",
            "location": 200,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str",
                    "Optional[Union[Dict, str, int, bytes]]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "literal_eval": {
            "name": "literal_eval",
            "location": 221,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "no_unicode_pprint": {
            "name": "no_unicode_pprint",
            "location": 236,
            "return": [
                ""
            ],
            "arguments": {
                "dct": [
                    "str",
                    "int"
                ]
            }
        },
        "utf8_repr": {
            "name": "utf8_repr",
            "location": 248,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "DummyFile.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "loader": [
                    "str",
                    "bool",
                    "int",
                    "List[List[str]]"
                ],
                "string": [
                    "str",
                    "Optional[Any]",
                    "int",
                    "bytes"
                ]
            }
        },
        "DummyFile.read": {
            "name": "read",
            "location": 27,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyFile.close": {
            "name": "close",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "exec_function": {
            "name": "exec_function",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "source": [
                    "str",
                    "float",
                    "bool"
                ],
                "global_map": [
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "reraise": {
            "name": "reraise",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "exception": [
                    "List[Exception]",
                    "Optional[float]",
                    "Union['Contributor', 'Coverage']"
                ],
                "traceback": [
                    "List[Exception]",
                    "Optional[float]",
                    "Union['Contributor', 'Coverage']"
                ]
            }
        },
        "Python3Method.__init__": {
            "name": "__init__",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "func": [
                    "int",
                    "float",
                    "List[List[T]]"
                ]
            }
        },
        "Python3Method.__get__": {
            "name": "__get__",
            "location": 178,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "str",
                    "Sequence[str]",
                    "Optional[List[str]]",
                    "dict",
                    "Union[str, int, float]",
                    "Optional[Dict]"
                ],
                "objtype": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "utf8_repr.wrapper": {
            "name": "wrapper",
            "location": 253,
            "return": [
                "bool",
                "Dict[str, int]",
                "Optional[Union[str, Any]]",
                "Dict[int, dict]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/__init__.py": {},
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/__main__.py": {
        "_start_linter": {
            "name": "_start_linter",
            "location": 5,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/api/classes.py": {
        "defined_names": {
            "name": "defined_names",
            "location": 25,
            "return": [
                "list[Definition]",
                "int",
                "str",
                "Iterable",
                "list",
                "List[str]"
            ],
            "arguments": {
                "evaluator": [
                    "Dict[str, Any]",
                    "Optional[Dict[str, str]]",
                    "Iterable[Any]"
                ],
                "scope": [
                    "bool",
                    "int",
                    "dict",
                    "str"
                ]
            }
        },
        "BaseDefinition.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "evaluator": [
                    "str",
                    "Optional[Sequence[str]]",
                    "Iterable[cmk.utils.type_defs.SectionName]",
                    "Optional[str]"
                ],
                "name": [
                    "Optional[bytes]",
                    "Type",
                    "bool"
                ]
            }
        },
        "BaseDefinition.name": {
            "name": "name",
            "location": 78,
            "return": [
                "str",
                "Type",
                "Callable[..., T]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDefinition.start_pos": {
            "name": "start_pos",
            "location": 89,
            "return": [
                "List[str]",
                "Callable[[None], None]",
                "Iterable[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDefinition.type": {
            "name": "type",
            "location": 99,
            "return": [
                "typing.Text",
                "str",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDefinition._path": {
            "name": "_path",
            "location": 166,
            "return": [
                "list[int]",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDefinition.module_name": {
            "name": "module_name",
            "location": 190,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDefinition.in_builtin_module": {
            "name": "in_builtin_module",
            "location": 203,
            "return": [
                "bool",
                "str",
                "utils.types.Vec3D",
                "List['PydanticModelField']"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDefinition.line": {
            "name": "line",
            "location": 208,
            "return": [
                "None",
                "Optional[Callable]",
                "Optional[BaseException]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDefinition.column": {
            "name": "column",
            "location": 215,
            "return": [
                "None",
                "Optional[BaseException]",
                "Optional[Callable]",
                "int",
                "Optional[str]",
                "Callable",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDefinition.docstring": {
            "name": "docstring",
            "location": 221,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "bool",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BaseDefinition.doc": {
            "name": "doc",
            "location": 253,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDefinition.raw_doc": {
            "name": "raw_doc",
            "location": 263,
            "return": [
                "bool",
                "Optional[int]",
                "int",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDefinition.description": {
            "name": "description",
            "location": 273,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDefinition.full_name": {
            "name": "full_name",
            "location": 278,
            "return": [
                "None",
                "str",
                "Optional[str]",
                "Optional[Callable]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDefinition.goto_assignments": {
            "name": "goto_assignments",
            "location": 313,
            "return": [
                "list[Definition]",
                "int",
                "List[float]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDefinition._follow_statements_imports": {
            "name": "_follow_statements_imports",
            "location": 318,
            "return": [
                "set",
                "str",
                "Iterable[int]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDefinition.params": {
            "name": "params",
            "location": 331,
            "return": [
                "list",
                "list[_Param]",
                "str",
                "Optional[str]",
                "Iterable[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDefinition.parent": {
            "name": "parent",
            "location": 364,
            "return": [
                "Definition",
                "str",
                "recidiviz.common.constants.state.state_incarceration_period.StateIncarcerationPeriodAdmissionReason",
                "List[Callable]",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDefinition.__repr__": {
            "name": "__repr__",
            "location": 369,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDefinition.get_line_code": {
            "name": "get_line_code",
            "location": 372,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "before": [
                    "int",
                    "List[str]",
                    "bool"
                ],
                "after": [
                    "int",
                    "gluonts.model.common.Tensor",
                    "cmk.utils.type_defs.EventRule",
                    "dict"
                ]
            }
        },
        "Completion.__init__": {
            "name": "__init__",
            "location": 399,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "evaluator": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "stack": [
                    "int",
                    "bool",
                    "str"
                ],
                "like_name_length": [
                    "str",
                    "Dict[str, str]",
                    "Optional[str]"
                ]
            }
        },
        "Completion._complete": {
            "name": "_complete",
            "location": 409,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "like_name": [
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "Iterable[float]",
                    "Any",
                    "Optional[Callable]",
                    "int"
                ]
            }
        },
        "Completion.complete": {
            "name": "complete",
            "location": 426,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Completion.name_with_symbols": {
            "name": "name_with_symbols",
            "location": 438,
            "return": [
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Completion.description": {
            "name": "description",
            "location": 450,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Completion.__repr__": {
            "name": "__repr__",
            "location": 463,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Completion.docstring": {
            "name": "docstring",
            "location": 466,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "bool",
                    "int",
                    "Callable",
                    "str"
                ],
                "fast": [
                    "bool",
                    "str",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        },
        "Completion.type": {
            "name": "type",
            "location": 489,
            "return": [
                "bool",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Completion._follow_statements_imports": {
            "name": "_follow_statements_imports",
            "location": 508,
            "return": [
                "int",
                "raiden.utils.Optional[int]",
                "str",
                "dict",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Completion.follow_definition": {
            "name": "follow_definition",
            "location": 518,
            "return": [
                "list[Definition]",
                "str",
                "List[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Definition.__init__": {
            "name": "__init__",
            "location": 536,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "evaluator": [
                    "str",
                    "apps.common.coininfo.CoinInfo",
                    "Union[str, dict]",
                    "bool"
                ],
                "definition": [
                    "str",
                    "apps.common.coininfo.CoinInfo",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "Definition.description": {
            "name": "description",
            "location": 540,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Definition.desc_with_module": {
            "name": "desc_with_module",
            "location": 608,
            "return": [
                "typing.Text",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Definition.defined_names": {
            "name": "defined_names",
            "location": 622,
            "return": [
                "list",
                "List[str]",
                "int",
                "List[type]",
                "Optional[Type]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Definition.is_definition": {
            "name": "is_definition",
            "location": 635,
            "return": [
                "str",
                "list",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Definition.__eq__": {
            "name": "__eq__",
            "location": 642,
            "return": [
                "bool",
                "Type"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Optional[cache.Cache]",
                    "List[Exception]"
                ]
            }
        },
        "Definition.__ne__": {
            "name": "__ne__",
            "location": 648,
            "return": [
                "bool",
                "str",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]",
                    "raiden.utils.Any"
                ]
            }
        },
        "Definition.__hash__": {
            "name": "__hash__",
            "location": 651,
            "return": [
                "int",
                "Callable",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallSignature.__init__": {
            "name": "__init__",
            "location": 661,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "evaluator": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]"
                ],
                "executable_name": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]"
                ],
                "bracket_start_pos": [
                    "str",
                    "Set[str]",
                    "Union[int, float]",
                    "int",
                    "Union[bool, float, int, str]"
                ],
                "index": [
                    "str",
                    "Optional[str]",
                    "Iterable[str]"
                ],
                "key_name_str": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "cmk.utils.type_defs.HostNameConditions"
                ]
            }
        },
        "CallSignature.index": {
            "name": "index",
            "location": 668,
            "return": [
                "None",
                "List[str]",
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallSignature.bracket_start": {
            "name": "bracket_start",
            "location": 692,
            "return": [
                "bool",
                "Tuple[Tuple[int, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallSignature.call_name": {
            "name": "call_name",
            "location": 700,
            "return": [
                "str",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallSignature.module": {
            "name": "module",
            "location": 712,
            "return": [
                "Optional[Iterable[Any]]",
                "T",
                "str",
                "List[str]",
                "Callable",
                "bool",
                "Optional[T]",
                "Optional[str]",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallSignature.__repr__": {
            "name": "__repr__",
            "location": 720,
            "return": [
                "typing.Text",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Param.get_code": {
            "name": "get_code",
            "location": 729,
            "return": [
                "bool",
                "str",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Help.__init__": {
            "name": "__init__",
            "location": 746,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "definition": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "_Help.full": {
            "name": "full",
            "location": 749,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Help.raw": {
            "name": "raw",
            "location": 755,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/api/completion.py": {
        "get_call_signature_param_names": {
            "name": "get_call_signature_param_names",
            "location": 16,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "call_signatures": [
                    "dict"
                ]
            }
        },
        "filter_names": {
            "name": "filter_names",
            "location": 31,
            "return": [
                "",
                "typing.Generator[Completion]"
            ],
            "arguments": {
                "evaluator": [
                    "str",
                    "int",
                    "Tuple[str, str]"
                ],
                "completion_names": [
                    "str",
                    "List[str]",
                    "Collection[str]",
                    "Optional[str]"
                ],
                "stack": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "like_name": [
                    "str"
                ]
            }
        },
        "get_user_scope": {
            "name": "get_user_scope",
            "location": 56,
            "return": [
                "List[dict]",
                "bool",
                "int",
                "Set[str]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "module": [
                    "str"
                ],
                "position": [
                    "str",
                    "bool"
                ]
            }
        },
        "Completion.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "evaluator": [
                    "str",
                    "bool",
                    "Optional[int]"
                ],
                "module": [
                    "Dict[int, int]",
                    "Type[Any]",
                    "List[str]",
                    "Type[T]"
                ],
                "code_lines": [
                    "str",
                    "dict",
                    "bool",
                    "Type[Any]"
                ],
                "position": [
                    "Dict[str, Any]",
                    "List[str]",
                    "Dict[Hashable, Any]",
                    "str"
                ],
                "call_signatures_method": [
                    "int",
                    "Optional[Sequence[str]]",
                    "set",
                    "Iterable[Tuple[Any, Any]]",
                    "bool",
                    "str"
                ]
            }
        },
        "Completion.completions": {
            "name": "completions",
            "location": 89,
            "return": [
                "list",
                "str",
                "Type[Any]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Completion._get_context_completions": {
            "name": "_get_context_completions",
            "location": 99,
            "return": [
                "list",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Completion._get_keyword_completion_names": {
            "name": "_get_keyword_completion_names",
            "location": 175,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "self": [],
                "keywords_": [
                    "Optional[List[Any]]",
                    "int",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "Completion._global_completions": {
            "name": "_global_completions",
            "location": 179,
            "return": [
                "list",
                "str",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Completion._trailer_completions": {
            "name": "_trailer_completions",
            "location": 200,
            "return": [
                "list",
                "str",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "atom_expr": [
                    "float",
                    "str",
                    "Union[str, List[str]]",
                    "Union[Type, Tuple[Type, ...]]",
                    "Optional[str]"
                ]
            }
        },
        "Completion._parse_dotted_names": {
            "name": "_parse_dotted_names",
            "location": 214,
            "return": [
                "tuple[typing.Union[int,list]]",
                "str",
                "Optional[str]",
                "List[Tuple[str]]"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "bool"
                ]
            }
        },
        "Completion._get_importer_names": {
            "name": "_get_importer_names",
            "location": 229,
            "return": [
                "str",
                "Set[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "names": [
                    "str"
                ],
                "level": [
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "only_modules": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Completion._get_class_context_completions": {
            "name": "_get_class_context_completions",
            "location": 234,
            "return": [
                "None",
                "typing.Generator",
                "List[str]",
                "Set[str]",
                "set",
                "Counter[str]",
                "str",
                "Union[bool, List[bool]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "is_function": [
                    "bool",
                    "Optional[\"TypeResourceIdentifier\"]",
                    "Optional[str]",
                    "mode.utils.imports.SymbolArg[Type[tables.TableT]]",
                    "str"
                ]
            }
        },
        "get_user_scope.scan": {
            "name": "scan",
            "location": 62,
            "return": [
                "None",
                "str",
                "List[str]"
            ],
            "arguments": {
                "scope": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/api/helpers.py": {
        "sorted_definitions": {
            "name": "sorted_definitions",
            "location": 18,
            "return": [
                "list",
                "str",
                "bool",
                "dict",
                "int"
            ],
            "arguments": {
                "defs": [
                    "list",
                    "dict",
                    "set"
                ]
            }
        },
        "get_on_completion_name": {
            "name": "get_on_completion_name",
            "location": 23,
            "return": [
                "typing.Text",
                "str",
                "List[str]",
                "Callable",
                "bool",
                "int"
            ],
            "arguments": {
                "module": [
                    "str",
                    "List[Tuple[str, str]]",
                    "Tuple[Dict[str, Any], Dict[str, Any], Set[str]]"
                ],
                "lines": [
                    "str",
                    "bytes"
                ],
                "position": [
                    "str",
                    "List[str]",
                    "float",
                    "Dict[str, float]",
                    "int"
                ]
            }
        },
        "_get_code": {
            "name": "_get_code",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "code_lines": [
                    "int",
                    "Union[float, None]",
                    "float"
                ],
                "start_pos": [
                    "str",
                    "bytes",
                    "int"
                ],
                "end_pos": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "_is_on_comment": {
            "name": "_is_on_comment",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "leaf": [
                    "Optional[int]"
                ],
                "position": [
                    "str",
                    "Optional[recidiviz.common.constants.state.state_supervision_period.StateSupervisionPeriodAdmissionReason]",
                    "Dict[str, Any]"
                ]
            }
        },
        "_get_code_for_stack": {
            "name": "_get_code_for_stack",
            "location": 80,
            "return": [
                "int",
                "str",
                "dict",
                "Optional[Type]"
            ],
            "arguments": {
                "code_lines": [
                    "str",
                    "int"
                ],
                "module": [
                    "str",
                    "List[str]"
                ],
                "position": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "get_stack_at_position": {
            "name": "get_stack_at_position",
            "location": 125,
            "return": [
                "Stack",
                "str",
                "bool"
            ],
            "arguments": {
                "grammar": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "code_lines": [
                    "str",
                    "Dict[str, Any]",
                    "Sequence[str]",
                    "Sequence[List[Any]]"
                ],
                "module": [
                    "str",
                    "Dict[str, Any]",
                    "Sequence[str]",
                    "Sequence[List[Any]]"
                ],
                "pos": [
                    "str",
                    "Dict[str, Any]",
                    "Sequence[str]",
                    "Sequence[List[Any]]"
                ]
            }
        },
        "get_possible_completion_types": {
            "name": "get_possible_completion_types",
            "location": 167,
            "return": [
                "tuple[list]",
                "Dict[str, Any]",
                "Optional[str]",
                "float",
                "str"
            ],
            "arguments": {
                "grammar": [
                    "Iterable[Any]",
                    "int"
                ],
                "stack": [
                    "Iterable[Any]",
                    "int"
                ]
            }
        },
        "evaluate_goto_definition": {
            "name": "evaluate_goto_definition",
            "location": 207,
            "return": [
                "list",
                "str",
                "bytearray"
            ],
            "arguments": {
                "evaluator": [
                    "bytes",
                    "str"
                ],
                "leaf": [
                    "str",
                    "Callable"
                ]
            }
        },
        "_get_index_and_key": {
            "name": "_get_index_and_key",
            "location": 231,
            "return": [
                "tuple[typing.Optional[int]]",
                "str",
                "bytes",
                "bool",
                "Tuple[int, int]"
            ],
            "arguments": {
                "nodes": [
                    "str",
                    "Callable[[T], Optional[T]]",
                    "dict",
                    "bool"
                ],
                "position": [
                    "dict",
                    "str"
                ]
            }
        },
        "_get_call_signature_details_from_error_node": {
            "name": "_get_call_signature_details_from_error_node",
            "location": 252,
            "return": [
                "CallSignatureDetails",
                "Mapping[str, Any]",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "node": [
                    "Tuple[str]"
                ],
                "position": [
                    "str"
                ]
            }
        },
        "get_call_signature_details": {
            "name": "get_call_signature_details",
            "location": 267,
            "return": [
                "None",
                "str",
                "CallSignatureDetails",
                "Optional[str]",
                "Union[None, List[str]]",
                "Optional[Sequence[str]]"
            ],
            "arguments": {
                "module": [
                    "str",
                    "List[Tuple[str, str]]"
                ],
                "position": [
                    "str"
                ]
            }
        },
        "cache_call_signatures": {
            "name": "cache_call_signatures",
            "location": 298,
            "return": [
                "",
                "typing.Generator[None]",
                "typing.Generator[tuple]",
                "typing.Generator"
            ],
            "arguments": {
                "evaluator": [
                    "str"
                ],
                "bracket_leaf": [
                    "int",
                    "Dict[str, str]",
                    "dict",
                    "T"
                ],
                "code_lines": [
                    "str",
                    "Optional[Any]"
                ],
                "user_pos": [
                    "bool",
                    "Optional[Any]",
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "OnErrorLeaf.error_leaf": {
            "name": "error_leaf",
            "location": 49,
            "return": [
                "str",
                "List[str]",
                "Optional[Iterable[str]]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "get_stack_at_position.tokenize_without_endmarker": {
            "name": "tokenize_without_endmarker",
            "location": 132,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "code": [
                    "str"
                ]
            }
        },
        "Stack.get_node_names": {
            "name": "get_node_names",
            "location": 157,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "self": [],
                "grammar": [
                    "Dict[str, Any]",
                    "Callable[..., None]",
                    "Dict[Tuple[int, int], str]",
                    "Optional[str]"
                ]
            }
        },
        "Stack.get_nodes": {
            "name": "get_nodes",
            "location": 161,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "get_possible_completion_types.add_results": {
            "name": "add_results",
            "location": 168,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "label_index": [
                    "str",
                    "bool",
                    "List[List[object]]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "get_possible_completion_types.scan_stack": {
            "name": "scan_stack",
            "location": 190,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "index": [
                    "int",
                    "Tuple[int, int, int]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/api/interpreter.py": {
        "MixedModule.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "evaluator": [],
                "parser_module": [
                    "bool"
                ],
                "namespaces": []
            }
        },
        "MixedModule.names_dicts": {
            "name": "names_dicts",
            "location": 30,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "self": [],
                "search_global": [
                    "Container[\"Taxon\"]",
                    "str",
                    "Type[T]"
                ]
            }
        },
        "MixedModule.__getattr__": {
            "name": "__getattr__",
            "location": 39,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "LazyName.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "evaluator": [
                    "Callable",
                    "list",
                    "str",
                    "Sequence[Dict[str, str]]"
                ],
                "module": [
                    "Callable",
                    "list",
                    "str",
                    "Sequence[Dict[str, str]]"
                ],
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "value": [
                    "str",
                    "dict"
                ]
            }
        },
        "LazyName.is_definition": {
            "name": "is_definition",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LazyName.parent": {
            "name": "parent",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Optional[Any]",
                    "str",
                    "List[int]",
                    "list"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/api/keywords.py": {
        "has_inappropriate_leaf_keyword": {
            "name": "has_inappropriate_leaf_keyword",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "pos": [
                    "str"
                ],
                "module": [
                    "str"
                ]
            }
        },
        "completion_names": {
            "name": "completion_names",
            "location": 42,
            "return": [
                "list",
                "List[str]",
                "bool",
                "Iterable[str]",
                "str",
                "List[Tuple[str, Any]]",
                "Tuple[str]"
            ],
            "arguments": {
                "evaluator": [
                    "List[str]",
                    "Union[List[str], List[int]]",
                    "bool",
                    "Optional[dict]",
                    "Optional[int]"
                ],
                "stmt": [
                    "bool",
                    "str"
                ],
                "pos": [
                    "bool",
                    "str"
                ],
                "module": [
                    "bool",
                    "str"
                ]
            }
        },
        "all_keywords": {
            "name": "all_keywords",
            "location": 53,
            "return": [
                "set[Keyword]",
                "Set[str]",
                "bool",
                "Set[Tuple[int, int]]",
                "set",
                "list"
            ],
            "arguments": {
                "evaluator": [
                    "Tuple[int, int]",
                    "dict"
                ],
                "pos": [
                    "tuple[int]",
                    "Tuple[int, int]",
                    "dict"
                ]
            }
        },
        "keyword": {
            "name": "keyword",
            "location": 57,
            "return": [
                "str",
                "Keyword",
                "int",
                "None"
            ],
            "arguments": {
                "evaluator": [
                    "str"
                ],
                "string": [
                    "str",
                    "int"
                ],
                "pos": [
                    "str",
                    "tuple[int]"
                ]
            }
        },
        "get_operator": {
            "name": "get_operator",
            "location": 64,
            "return": [
                "Keyword",
                "str",
                "blib2to3.pytree.Leaf"
            ],
            "arguments": {
                "evaluator": [
                    "str"
                ],
                "string": [
                    "str"
                ],
                "pos": [
                    "str"
                ]
            }
        },
        "imitate_pydoc": {
            "name": "imitate_pydoc",
            "location": 102,
            "return": [
                "typing.Text",
                "str",
                "dict",
                "Dict[str, int]",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "string": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Keyword.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "evaluator": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "Set[str]"
                ],
                "pos": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "Keyword.get_parent_until": {
            "name": "get_parent_until",
            "location": 82,
            "return": [
                "str",
                "dict",
                "Optional[str]",
                "Tuple[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Keyword.only_valid_as_leaf": {
            "name": "only_valid_as_leaf",
            "location": 86,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Keyword.names": {
            "name": "names",
            "location": 90,
            "return": [
                "list",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Keyword.docstr": {
            "name": "docstr",
            "location": 95,
            "return": [
                "bool",
                "bytes",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Keyword.__repr__": {
            "name": "__repr__",
            "location": 98,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/api/replstartup.py": {},
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/api/usages.py": {
        "usages": {
            "name": "usages",
            "location": 7,
            "return": [
                "list",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "evaluator": [
                    "Dict[str, Any]",
                    "type",
                    "str",
                    "Union[str, List[str]]"
                ],
                "definition_names": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "mods": [
                    "str",
                    "Optional[Collection[str]]",
                    "Optional[bool]",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "usages_add_import_modules": {
            "name": "usages_add_import_modules",
            "location": 41,
            "return": [
                "Set[str]",
                "set",
                "int"
            ],
            "arguments": {
                "evaluator": [
                    "str"
                ],
                "definitions": [
                    "str"
                ]
            }
        },
        "usages.compare_array": {
            "name": "compare_array",
            "location": 11,
            "return": [
                "list[tuple]",
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "definitions": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/api/__init__.py": {
        "defined_names": {
            "name": "defined_names",
            "location": 392,
            "return": [
                "str",
                "Callable[..., T]"
            ],
            "arguments": {
                "source": [
                    "str",
                    "apps.common.paths.Bip32Path"
                ],
                "path": [
                    "None",
                    "str",
                    "apps.common.paths.Bip32Path"
                ],
                "encoding": [
                    "typing.Text",
                    "str",
                    "apps.common.paths.Bip32Path"
                ]
            }
        },
        "names": {
            "name": "names",
            "location": 412,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "source": [
                    "None",
                    "str",
                    "Callable[[str], str]"
                ],
                "path": [
                    "None",
                    "str",
                    "Callable[[str], str]"
                ],
                "encoding": [
                    "typing.Text",
                    "str",
                    "Callable[[str], str]"
                ],
                "all_scopes": [
                    "bool",
                    "Tuple[int, int, int, str]",
                    "str"
                ],
                "definitions": [
                    "bool",
                    "List[str]"
                ],
                "references": [
                    "bool",
                    "List[str]"
                ]
            }
        },
        "preload_module": {
            "name": "preload_module",
            "location": 439,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "set_debug_function": {
            "name": "set_debug_function",
            "location": 451,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "func_cb": [
                    "Callable",
                    "int",
                    "Callable[[T], bool]",
                    "float"
                ],
                "warnings": [
                    "bool",
                    "Callable",
                    "int",
                    "Callable[[T], bool]",
                    "float"
                ],
                "notices": [
                    "bool",
                    "Callable",
                    "int",
                    "Callable[[T], bool]",
                    "float"
                ],
                "speed": [
                    "bool",
                    "Callable",
                    "int",
                    "Callable[[T], bool]",
                    "float"
                ]
            }
        },
        "Script.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "None",
                    "Optional[str]",
                    "str"
                ],
                "line": [
                    "None",
                    "str",
                    "Optional[str]"
                ],
                "column": [
                    "None",
                    "List[str]",
                    "list",
                    "Callable[[str], int]",
                    "Type[str]",
                    "int",
                    "Optional[str]"
                ],
                "path": [
                    "str",
                    "Optional[str]"
                ],
                "encoding": [
                    "typing.Text",
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Set[str]",
                    "List[str]"
                ],
                "source_path": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Optional[TextIO]"
                ],
                "source_encoding": [
                    "None",
                    "str",
                    "Optional[str]",
                    "coalib.settings.Setting.typed_list"
                ],
                "sys_path": [
                    "None",
                    "str",
                    "Optional[IO[bytes]]",
                    "Optional[str]"
                ]
            }
        },
        "Script._get_module": {
            "name": "_get_module",
            "location": 134,
            "return": [
                "bool",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Script.source_path": {
            "name": "source_path",
            "location": 144,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Script.__repr__": {
            "name": "__repr__",
            "location": 153,
            "return": [
                "typing.Text",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Script.completions": {
            "name": "completions",
            "location": 156,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Script.goto_definitions": {
            "name": "goto_definitions",
            "location": 173,
            "return": [
                "list",
                "str",
                "raiden.utils.Tuple[int, int]",
                "bytes",
                "dict",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Script.goto_assignments": {
            "name": "goto_assignments",
            "location": 199,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "follow_imports": [
                    "bool",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict"
                ]
            }
        },
        "Script._goto": {
            "name": "_goto",
            "location": 225,
            "return": [
                "list",
                "str",
                "List[str]",
                "Optional[Iterable[str]]",
                "Tuple[str]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Script.usages": {
            "name": "usages",
            "location": 234,
            "return": [
                "list",
                "str",
                "recidiviz.common.constants.state.state_incarceration_period.StateIncarcerationPeriodAdmissionReason",
                "int",
                "type"
            ],
            "arguments": {
                "self": [],
                "additional_module_paths": [
                    "tuple",
                    "str",
                    "list",
                    "Iterable[str]",
                    "dict"
                ]
            }
        },
        "Script.call_signatures": {
            "name": "call_signatures",
            "location": 280,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Script._analysis": {
            "name": "_analysis",
            "location": 316,
            "return": [
                "list",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Interpreter.__init__": {
            "name": "__init__",
            "location": 363,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "bytes",
                    "dict",
                    "int",
                    "str"
                ],
                "namespaces": [
                    "str",
                    "list",
                    "Match[str]",
                    "bool",
                    "Callable[[], Any]",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "Interpreter._get_module": {
            "name": "_get_module",
            "location": 388,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "names.def_ref_filter": {
            "name": "def_ref_filter",
            "location": 428,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "_def": [
                    "str",
                    "float"
                ]
            }
        },
        "Script.goto_assignments.filter_follow_imports": {
            "name": "filter_follow_imports",
            "location": 208,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "names": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/evaluate/analysis.py": {
        "add": {
            "name": "add",
            "location": 80,
            "return": [
                "Callable[[], Dict[str, object]]",
                "Iterator[Dict[str, str]]"
            ],
            "arguments": {
                "evaluator": [
                    "int"
                ],
                "name": [
                    "str"
                ],
                "jedi_obj": [
                    "str",
                    "bytes",
                    "Tuple[int, int]",
                    "bytearray",
                    "int"
                ],
                "message": [
                    "str",
                    "List[str]"
                ],
                "typ": [
                    "str",
                    "List[str]"
                ],
                "payload": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "_check_for_setattr": {
            "name": "_check_for_setattr",
            "location": 98,
            "return": [
                "bool"
            ],
            "arguments": {
                "instance": [
                    "float",
                    "int"
                ]
            }
        },
        "add_attribute_error": {
            "name": "add_attribute_error",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "evaluator": [
                    "str",
                    "Callable"
                ],
                "scope": [
                    "str",
                    "Callable",
                    "Optional[str]"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "_check_for_exception_catch": {
            "name": "_check_for_exception_catch",
            "location": 134,
            "return": [
                "bool"
            ],
            "arguments": {
                "evaluator": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "jedi_obj": [
                    "int",
                    "str",
                    "float",
                    "Callable"
                ],
                "exception": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "payload": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "Error.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "module_path": [
                    "str",
                    "Sequence[str]",
                    "bool"
                ],
                "start_pos": [
                    "int",
                    "Callable",
                    "str",
                    "List[str]"
                ],
                "message": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Optional[Iterable[str]]",
                    "bool"
                ]
            }
        },
        "Error.line": {
            "name": "line",
            "location": 40,
            "return": [
                "str",
                "Optional[str]",
                "FrozenSet[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Error.column": {
            "name": "column",
            "location": 44,
            "return": [
                "bool",
                "int",
                "float",
                "bytes",
                "str",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Error.code": {
            "name": "code",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Error.__unicode__": {
            "name": "__unicode__",
            "location": 53,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Error.__str__": {
            "name": "__str__",
            "location": 57,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Error.__eq__": {
            "name": "__eq__",
            "location": 60,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Optional[List[Any]]",
                    "Dict[str, Any]",
                    "int",
                    "Callable"
                ]
            }
        },
        "Error.__ne__": {
            "name": "__ne__",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "Error.__hash__": {
            "name": "__hash__",
            "location": 67,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "List[Dict]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Error.__repr__": {
            "name": "__repr__",
            "location": 70,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_check_for_exception_catch.check_match": {
            "name": "check_match",
            "location": 142,
            "return": [
                "Dict[str, int]",
                "int",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "type",
                    "Type"
                ],
                "exception": [
                    "str",
                    "type",
                    "Type"
                ]
            }
        },
        "_check_for_exception_catch.check_try_for_except": {
            "name": "check_try_for_except",
            "location": 148,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "int",
                    "IO[str]",
                    "bool"
                ],
                "exception": [
                    "Callable[[Mapping], Awaitable]",
                    "Callable[[], Awaitable[Mapping]]",
                    "int",
                    "dict"
                ]
            }
        },
        "_check_for_exception_catch.check_hasattr": {
            "name": "check_hasattr",
            "location": 174,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": [],
                "suite": [
                    "int",
                    "Callable[[str], str]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/evaluate/cache.py": {
        "memoize_default": {
            "name": "memoize_default",
            "location": 12,
            "return": [
                "Dict[str, Dict[str, int]]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "default": [
                    "bool",
                    "int",
                    "Callable[[Any], None]"
                ],
                "evaluator_is_first_arg": [
                    "bool",
                    "int",
                    "Callable[[Any], None]"
                ],
                "second_arg_is_evaluator": [
                    "bool",
                    "int",
                    "Callable[[Any], None]"
                ]
            }
        },
        "memoize_default.func": {
            "name": "func",
            "location": 20,
            "return": [
                "Tuple[str, int]",
                "Optional[str]",
                "str",
                "Tuple[int, int]",
                "int"
            ],
            "arguments": {
                "function": [
                    "float",
                    "Callable",
                    "Callable[..., T]",
                    "bool"
                ]
            }
        },
        "CachedMetaClass.__call__": {
            "name": "__call__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "memoize_default.func.wrapper": {
            "name": "wrapper",
            "location": 21,
            "return": [
                "list",
                "str",
                "List[int]"
            ],
            "arguments": {
                "obj": [
                    "bool"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/evaluate/docstrings.py": {
        "_search_param_in_docstr": {
            "name": "_search_param_in_docstr",
            "location": 66,
            "return": [
                "list",
                "Dict[str, Any]",
                "int",
                "str"
            ],
            "arguments": {
                "docstr": [
                    "str",
                    "Pattern"
                ],
                "param_str": [
                    "str"
                ]
            }
        },
        "_strip_rst_role": {
            "name": "_strip_rst_role",
            "location": 95,
            "return": [
                "int",
                "bool",
                "Callable",
                "type"
            ],
            "arguments": {
                "type_str": [
                    "str"
                ]
            }
        },
        "_evaluate_for_statement_string": {
            "name": "_evaluate_for_statement_string",
            "location": 117,
            "return": [
                "list",
                "str",
                "bool",
                "List[Tuple[str, Any]]",
                "Iterable",
                "int",
                "Tuple[str]",
                "List[str]",
                "FrozenSet[str]"
            ],
            "arguments": {
                "evaluator": [
                    "Optional[str]",
                    "str",
                    "Type",
                    "Type[T]"
                ],
                "string": [
                    "Dict[str, Any]",
                    "Optional[Any]",
                    "Optional[str]",
                    "Optional[Callable[[str], Any]]"
                ],
                "module": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "_execute_types_in_stmt": {
            "name": "_execute_types_in_stmt",
            "location": 151,
            "return": [
                "bool",
                "Optional[Set[str]]"
            ],
            "arguments": {
                "evaluator": [
                    "bool"
                ],
                "stmt": [
                    "Callable[[str], None]",
                    "Type",
                    "List[str]"
                ]
            }
        },
        "_execute_array_values": {
            "name": "_execute_array_values",
            "location": 161,
            "return": [
                "list[FakeSequence]",
                "tuple",
                "BaseException"
            ],
            "arguments": {
                "evaluator": [
                    "Callable"
                ],
                "array": [
                    "List[int]"
                ]
            }
        },
        "follow_param": {
            "name": "follow_param",
            "location": 177,
            "return": [],
            "arguments": {
                "evaluator": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "param": [
                    "int"
                ]
            }
        },
        "find_return_types": {
            "name": "find_return_types",
            "location": 196,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "evaluator": [
                    "bool",
                    "Type"
                ],
                "func": []
            }
        },
        "_search_param_in_numpydocstr": {
            "name": "_search_param_in_numpydocstr",
            "location": 46,
            "return": [
                "list",
                "bool",
                "List[Dict[str, object]]",
                "str",
                "int"
            ],
            "arguments": {
                "docstr": [
                    "str"
                ],
                "param_str": [
                    "str"
                ]
            }
        },
        "follow_param.eval_docstring": {
            "name": "eval_docstring",
            "location": 178,
            "return": [
                "set",
                "str",
                "List[str]",
                "Dict[str, Any]",
                "list"
            ],
            "arguments": {
                "docstring": [
                    "str"
                ]
            }
        },
        "find_return_types.search_return_in_docstr": {
            "name": "search_return_in_docstr",
            "location": 197,
            "return": [
                "str"
            ],
            "arguments": {
                "code": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/evaluate/dynamic.py": {
        "search_params": {
            "name": "search_params",
            "location": 44,
            "return": [
                "set",
                "Set[str]",
                "bool",
                "Dict[str, Set[str]]",
                "int"
            ],
            "arguments": {
                "evaluator": [
                    "dict",
                    "int"
                ],
                "param": [
                    "List[Tuple[str, int]]"
                ]
            }
        },
        "search_function_call": {
            "name": "search_function_call",
            "location": 76,
            "return": [
                "set",
                "Sequence['cirq.Qid']",
                "Callable",
                "Type"
            ],
            "arguments": {
                "evaluator": [
                    "List[Dict]",
                    "type",
                    "Optional[Dict[str, str]]",
                    "Callable"
                ],
                "func": [
                    "Callable"
                ]
            }
        },
        "ParamListener.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParamListener.execute": {
            "name": "execute",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "search_function_call.get_possible_nodes": {
            "name": "get_possible_nodes",
            "location": 82,
            "return": [
                "None",
                "Union[tuple, list]",
                "typing.Generator[tuple]",
                "Dict[str, Any]",
                "Set[str]",
                "str"
            ],
            "arguments": {
                "module": [
                    "str"
                ],
                "func_name": [
                    "str"
                ]
            }
        },
        "search_function_call.undecorate": {
            "name": "undecorate",
            "location": 94,
            "return": [
                "DefaultDict[int, List[Any]]",
                "OrderedDict",
                "int"
            ],
            "arguments": {
                "typ": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/evaluate/finder.py": {
        "filter_after_position": {
            "name": "filter_after_position",
            "location": 39,
            "return": [
                "list",
                "bool",
                "Dict[str, Any]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "names": [
                    "bool",
                    "str"
                ],
                "position": [
                    "Optional[float]",
                    "bytes",
                    "Callable[[str], str]",
                    "str",
                    "Optional[bool]",
                    "Optional[int]"
                ]
            }
        },
        "filter_definition_names": {
            "name": "filter_definition_names",
            "location": 56,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "names": [
                    "bool",
                    "str",
                    "Iterable[str]"
                ],
                "origin": [
                    "int",
                    "bool",
                    "str",
                    "Callable",
                    "Optional[List[str]]"
                ],
                "position": [
                    "None",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "_get_global_stmt_scopes": {
            "name": "_get_global_stmt_scopes",
            "location": 323,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "evaluator": [
                    "Optional[str]",
                    "str",
                    "dict",
                    "bool"
                ],
                "global_stmt": [
                    "bool",
                    "str",
                    "int",
                    "Optional[Callable[[Dict], bool]]",
                    "dict"
                ],
                "name": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Dict[str, 'LabwareDefinition']",
                    "Dict[str, str]",
                    "Collection[str]"
                ]
            }
        },
        "_name_to_types": {
            "name": "_name_to_types",
            "location": 332,
            "return": [],
            "arguments": {
                "evaluator": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "scope": [
                    "str",
                    "dict",
                    "set"
                ]
            }
        },
        "_remove_statements": {
            "name": "_remove_statements",
            "location": 376,
            "return": [
                "set",
                "Type",
                "type"
            ],
            "arguments": {
                "evaluator": [
                    "bool",
                    "Optional[Callable]",
                    "type"
                ],
                "stmt": [
                    "bool",
                    "Type[BaseException]"
                ],
                "name": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "_eval_param": {
            "name": "_eval_param",
            "location": 408,
            "return": [
                "set",
                "float",
                "list",
                "List[object]",
                "bool"
            ],
            "arguments": {
                "evaluator": [
                    "bool",
                    "str"
                ],
                "param": [
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "scope": []
            }
        },
        "check_flow_information": {
            "name": "check_flow_information",
            "location": 454,
            "return": [
                "None",
                "Optional[str]",
                "set",
                "bool",
                "apps.common.coininfo.CoinInfo",
                "Optional[Sequence[str]]"
            ],
            "arguments": {
                "evaluator": [
                    "str",
                    "Type"
                ],
                "flow": [
                    "bool",
                    "str",
                    "Type[T]"
                ],
                "search_name": [
                    "type",
                    "str",
                    "Dict[str, Any]",
                    "Mapping[str, T]",
                    "dict",
                    "Dict[str, Iterable[Any]]"
                ],
                "pos": [
                    "int",
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "_check_isinstance_type": {
            "name": "_check_isinstance_type",
            "location": 489,
            "return": [
                "Set[str]",
                "set"
            ],
            "arguments": {
                "evaluator": [
                    "dict",
                    "Type",
                    "str",
                    "Exception"
                ],
                "element": [
                    "str",
                    "List[int]",
                    "Set[str]",
                    "list"
                ],
                "search_name": [
                    "str"
                ]
            }
        },
        "global_names_dict_generator": {
            "name": "global_names_dict_generator",
            "location": 524,
            "return": [
                "",
                "typing.Generator[tuple]",
                "typing.Generator[tuple[None]]"
            ],
            "arguments": {
                "evaluator": [
                    "str",
                    "Optional[str]"
                ],
                "scope": [
                    "str",
                    "type",
                    "Optional[str]"
                ],
                "position": [
                    "OrderedDict"
                ]
            }
        },
        "check_tuple_assignments": {
            "name": "check_tuple_assignments",
            "location": 600,
            "return": [
                "set"
            ],
            "arguments": {
                "evaluator": [
                    "str",
                    "Optional[\"TypeResourceIdentifier\"]",
                    "int"
                ],
                "types": [
                    "str",
                    "Set[str]"
                ],
                "name": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "filter_private_variable": {
            "name": "filter_private_variable",
            "location": 619,
            "return": [
                "bool",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "scope": [],
                "origin_node": []
            }
        },
        "NameFinder.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "evaluator": [
                    "Optional[Mapping[str, Any]]",
                    "Callable",
                    "Type[Any]",
                    "Optional[Iterable[Any]]",
                    "bool",
                    "Optional[int]",
                    "int",
                    "Dict[str, Any]"
                ],
                "scope": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]"
                ],
                "name_str": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "position": [
                    "None",
                    "str",
                    "Iterable[str]",
                    "Optional[str]"
                ]
            }
        },
        "NameFinder.find": {
            "name": "find",
            "location": 93,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "scopes": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ],
                "attribute_lookup": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "NameFinder.scopes": {
            "name": "scopes",
            "location": 122,
            "return": [
                "typing.Generator[tuple[None]]",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "search_global": [
                    "bool",
                    "Optional[List[Type]]",
                    "Optional[str]",
                    "Type",
                    "Optional[Tuple[str, str]]"
                ]
            }
        },
        "NameFinder.names_dict_lookup": {
            "name": "names_dict_lookup",
            "location": 128,
            "return": [
                "list",
                "List[str]",
                "int",
                "bytes",
                "Optional[str]",
                "Tuple[str, str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "names_dict": [
                    "str",
                    "bool",
                    "Optional[bytes]",
                    "Iterable[str]"
                ],
                "position": [
                    "str"
                ]
            }
        },
        "NameFinder.filter_name": {
            "name": "filter_name",
            "location": 222,
            "return": [
                "list",
                "str",
                "_internal.argspec.Arguments",
                "bool"
            ],
            "arguments": {
                "self": [],
                "names_dicts": [
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "NameFinder._clean_names": {
            "name": "_clean_names",
            "location": 237,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "self": [],
                "names": [
                    "str"
                ]
            }
        },
        "NameFinder._check_getattr": {
            "name": "_check_getattr",
            "location": 255,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "inst": [
                    "type",
                    "Type",
                    "int"
                ]
            }
        },
        "NameFinder._names_to_types": {
            "name": "_names_to_types",
            "location": 274,
            "return": [
                "set",
                "int",
                "Mapping[str, Any]",
                "List[str]",
                "str",
                "type"
            ],
            "arguments": {
                "self": [],
                "names": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "Type",
                    "bool"
                ],
                "attribute_lookup": [
                    "str",
                    "Union[None, str, int]",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "NameFinder._resolve_descriptors": {
            "name": "_resolve_descriptors",
            "location": 304,
            "return": [
                "set"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "types": [
                    "str",
                    "type"
                ]
            }
        },
        "NameFinder.names_dict_lookup.get_param": {
            "name": "get_param",
            "location": 129,
            "return": [
                "str",
                "Optional[\"LocalizedString\"]"
            ],
            "arguments": {
                "scope": [
                    "str",
                    "int"
                ],
                "el": [
                    "Union[str, Dict[str, str]]",
                    "str",
                    "Optional[str]",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/evaluate/flow_analysis.py": {
        "break_check": {
            "name": "break_check",
            "location": 35,
            "return": [
                "Status",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "evaluator": [
                    "int"
                ],
                "base_scope": [
                    "Callable",
                    "str",
                    "bool"
                ],
                "stmt": [
                    "int"
                ],
                "origin_scope": [
                    "None",
                    "int",
                    "Callable[[str], int]",
                    "Optional[T]",
                    "Optional[float]",
                    "Optional[int]",
                    "Optional[Any]"
                ]
            }
        },
        "_break_check": {
            "name": "_break_check",
            "location": 52,
            "return": [
                "Status",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "evaluator": [
                    "int",
                    "Callable",
                    "bool"
                ],
                "stmt": [],
                "base_scope": [
                    "Dict[str, Any]"
                ],
                "element_scope": [
                    "Callable",
                    "int",
                    "str",
                    "Type[Any]"
                ]
            }
        },
        "_check_if": {
            "name": "_check_if",
            "location": 85,
            "return": [
                "Status",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "evaluator": [],
                "node": []
            }
        },
        "Status.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "bytes",
                    "dict"
                ],
                "name": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Status.invert": {
            "name": "invert",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Status.__and__": {
            "name": "__and__",
            "location": 20,
            "return": [
                "int",
                "Optional[int]",
                "List[int]",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Status.__repr__": {
            "name": "__repr__",
            "location": 26,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/evaluate/helpers.py": {
        "deep_ast_copy": {
            "name": "deep_ast_copy",
            "location": 7,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "Sequence[Dict]",
                    "NamedTuple",
                    "List[str]",
                    "dict",
                    "Tuple[int]"
                ],
                "parent": [
                    "None",
                    "Optional[\"Node\"]",
                    "bool",
                    "Optional[\"Scope\"]"
                ],
                "new_elements": [
                    "None"
                ]
            }
        },
        "call_of_leaf": {
            "name": "call_of_leaf",
            "location": 70,
            "return": [
                "int",
                "Dict[str, Any]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "leaf": [],
                "cut_own_trailer": [
                    "bool",
                    "str",
                    "Iterable"
                ]
            }
        },
        "get_names_of_node": {
            "name": "get_names_of_node",
            "location": 117,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "node": [
                    "str"
                ]
            }
        },
        "get_module_names": {
            "name": "get_module_names",
            "location": 129,
            "return": [
                "dict",
                "str",
                "Exception",
                "Dict[int, str]"
            ],
            "arguments": {
                "module": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "List[Union[str, Any]]"
                ],
                "all_scopes": [
                    "str",
                    "Set[str]",
                    "bool",
                    "Sequence[str]",
                    "Iterable[str]"
                ]
            }
        },
        "deep_ast_copy.copy_node": {
            "name": "copy_node",
            "location": 16,
            "return": [
                "Optional[Iterable[str]]",
                "bool",
                "Callable",
                "str",
                "Callable[..., None]",
                "Optional[T]"
            ],
            "arguments": {
                "obj": []
            }
        },
        "FakeImport.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "Optional[str]",
                    "dict"
                ],
                "parent": [
                    "str",
                    "T"
                ],
                "level": [
                    "int",
                    "bool",
                    "str",
                    "Sequence"
                ]
            }
        },
        "FakeImport.get_defined_names": {
            "name": "get_defined_names",
            "location": 148,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeImport.aliases": {
            "name": "aliases",
            "location": 151,
            "return": [
                "dict",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeImport.level": {
            "name": "level",
            "location": 155,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeImport.start_pos": {
            "name": "start_pos",
            "location": 159,
            "return": [
                "tuple[int]",
                "int",
                "Tuple[str, str]",
                "str",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeImport.paths": {
            "name": "paths",
            "location": 162,
            "return": [
                "list[list]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeImport.is_definition": {
            "name": "is_definition",
            "location": 165,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeName.__init__": {
            "name": "__init__",
            "location": 170,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name_str": [
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "parent": [
                    "None",
                    "str",
                    "Optional[Pattern]",
                    "bool",
                    "T",
                    "Optional[str]"
                ],
                "start_pos": [
                    "tuple[int]",
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "is_definition": [
                    "None",
                    "Optional[List[str]]",
                    "bool",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "FakeName.get_definition": {
            "name": "get_definition",
            "location": 179,
            "return": [
                "str",
                "Optional[str]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeName.is_definition": {
            "name": "is_definition",
            "location": 182,
            "return": [
                "str",
                "Literal",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "LazyName.__init__": {
            "name": "__init__",
            "location": 190,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "parent_callback": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "Optional[List[str]]"
                ],
                "is_definition": [
                    "None",
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "LazyName.parent": {
            "name": "parent",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Optional[Any]",
                    "str",
                    "List[int]",
                    "list"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/evaluate/imports.py": {
        "completion_names": {
            "name": "completion_names",
            "location": 35,
            "return": [
                "str",
                "list",
                "Dict[str, str]",
                "type"
            ],
            "arguments": {
                "evaluator": [
                    "bool",
                    "str"
                ],
                "imp": [],
                "pos": [
                    "Tuple[int, int]",
                    "bool"
                ]
            }
        },
        "_add_error": {
            "name": "_add_error",
            "location": 149,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "evaluator": [
                    "str",
                    "Callable",
                    "Set[str]",
                    "Dict[int, List[int]]",
                    "Union[Set[int], List[int], Dict[int, Any]]"
                ],
                "name": [
                    "str",
                    "list",
                    "Callable"
                ],
                "message": [
                    "None",
                    "str",
                    "Callable",
                    "Set[str]",
                    "Dict[int, List[int]]",
                    "Union[Set[int], List[int], Dict[int, Any]]"
                ]
            }
        },
        "get_init_path": {
            "name": "get_init_path",
            "location": 155,
            "return": [
                "None",
                "str",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "directory_path": [
                    "str"
                ]
            }
        },
        "_load_module": {
            "name": "_load_module",
            "location": 438,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[cmk.utils.type_defs.HostName]",
                "list"
            ],
            "arguments": {
                "evaluator": [
                    "str",
                    "Optional[str]"
                ],
                "path": [
                    "None",
                    "str",
                    "Optional[str]"
                ],
                "source": [
                    "None",
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "Optional[object]",
                    "IO",
                    "bool"
                ],
                "sys_path": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Optional[List[\"SoftwareApplication\"]]"
                ],
                "parent_module": [
                    "str",
                    "None"
                ]
            }
        },
        "add_module": {
            "name": "add_module",
            "location": 463,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "evaluator": [
                    "str",
                    "Union[int, str]"
                ],
                "module_name": [
                    "str",
                    "Union[int, str]"
                ],
                "module": [
                    "str",
                    "Union[int, str]"
                ]
            }
        },
        "get_modules_containing_name": {
            "name": "get_modules_containing_name",
            "location": 472,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "evaluator": [
                    "str",
                    "utils.types.Vec3D",
                    "int",
                    "Optional[str]",
                    "Callable[..., str]"
                ],
                "mods": [
                    "str",
                    "Sequence[str]",
                    "Dict[str, Any]"
                ],
                "name": [
                    "str",
                    "utils.types.Vec3D",
                    "int",
                    "Optional[str]",
                    "Callable[..., str]"
                ]
            }
        },
        "ImportWrapper.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "evaluator": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "Callable",
                    "Union[str, List[str]]",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "ImportWrapper.follow": {
            "name": "follow",
            "location": 70,
            "return": [
                "set"
            ],
            "arguments": {
                "self": [],
                "is_goto": [
                    "bool",
                    "Union[int, float]",
                    "int",
                    "str"
                ]
            }
        },
        "NestedImportModule.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "nested_import": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "NestedImportModule._get_nested_import_name": {
            "name": "_get_nested_import_name",
            "location": 126,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "NestedImportModule.__getattr__": {
            "name": "__getattr__",
            "location": 141,
            "return": [
                "str",
                "Optional[str]",
                "recidiviz.common.constants.state.state_incarceration_period.StateIncarcerationPeriodAdmissionReason",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "type"
                ]
            }
        },
        "NestedImportModule.__repr__": {
            "name": "__repr__",
            "location": 144,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Importer.__init__": {
            "name": "__init__",
            "location": 168,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "evaluator": [
                    "bool",
                    "str",
                    "MutableMapping[str, str]"
                ],
                "import_path": [
                    "str",
                    "list"
                ],
                "module": [
                    "str",
                    "Dict[str, str]"
                ],
                "level": [
                    "int",
                    "List[str]",
                    "Callable",
                    "bytes"
                ]
            }
        },
        "Importer.str_import_path": {
            "name": "str_import_path",
            "location": 218,
            "return": [
                "tuple[str]",
                "List[str]",
                "Tuple[str, str]",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Importer.sys_path_with_modifications": {
            "name": "sys_path_with_modifications",
            "location": 223,
            "return": [
                "list[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Importer.follow": {
            "name": "follow",
            "location": 243,
            "return": [
                "set",
                "str",
                "dict",
                "List[str]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Importer._do_import": {
            "name": "_do_import",
            "location": 248,
            "return": [
                "set",
                "Optional[bool]",
                "Optional[float]",
                "Optional[str]",
                "Optional[int]",
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "self": [],
                "import_path": [
                    "str",
                    "Optional[str]"
                ],
                "sys_path": [
                    "str",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ConfigSerial",
                    "common.PS"
                ]
            }
        },
        "Importer._generate_name": {
            "name": "_generate_name",
            "location": 352,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Importer._get_module_names": {
            "name": "_get_module_names",
            "location": 359,
            "return": [
                "list",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "search_path": [
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Importer.completion_names": {
            "name": "completion_names",
            "location": 376,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "evaluator": [
                    "str",
                    "bool",
                    "float",
                    "Callable",
                    "List[str]"
                ],
                "only_modules": [
                    "bool",
                    "str",
                    "float",
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "_load_module.load": {
            "name": "load",
            "location": 439,
            "return": [
                "ModuleWrapper",
                "Optional[List[str]]",
                "str",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "source": [
                    "raiden.tests.fuzz.utils.SendUnlockInNode",
                    "List[Union[str, \"SqlFile\"]]",
                    "Optional[str]"
                ]
            }
        },
        "get_modules_containing_name.check_python_file": {
            "name": "check_python_file",
            "location": 476,
            "return": [
                "None",
                "str",
                "Optional[str]",
                "dict",
                "int"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "get_modules_containing_name.check_fs": {
            "name": "check_fs",
            "location": 485,
            "return": [
                "Optional[str]",
                "Optional[cmk.utils.type_defs.HostName]",
                "str",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "os.PathLike"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/evaluate/iterable.py": {
        "has_builtin_methods": {
            "name": "has_builtin_methods",
            "location": 80,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "Optional[Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "register_builtin_method": {
            "name": "register_builtin_method",
            "location": 90,
            "return": [
                "int",
                "List[str]",
                "List[int]",
                "bytes"
            ],
            "arguments": {
                "method_name": [
                    "str",
                    "type"
                ],
                "type": [
                    "None",
                    "str",
                    "type"
                ]
            }
        },
        "create_evaluated_sequence_set": {
            "name": "create_evaluated_sequence_set",
            "location": 458,
            "return": [
                "type",
                "set[FakeSequence]"
            ],
            "arguments": {
                "evaluator": [
                    "str",
                    "Mapping[str, Any]",
                    "Set[str]"
                ]
            }
        },
        "unpack_tuple_to_dict": {
            "name": "unpack_tuple_to_dict",
            "location": 520,
            "return": [
                "dict",
                "bool",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "evaluator": [
                    "str",
                    "set",
                    "Set[str]"
                ],
                "types": [
                    "str",
                    "Dict[str, Any]",
                    "Tuple[Type]",
                    "bool"
                ],
                "exprlist": [
                    "Union[None, bool]",
                    "Dict[str, Any]",
                    "type",
                    "str",
                    "Tuple[Type]"
                ]
            }
        },
        "py__iter__": {
            "name": "py__iter__",
            "location": 558,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "evaluator": [
                    "str",
                    "set",
                    "int",
                    "Set[str]"
                ],
                "types": [],
                "node": [
                    "None",
                    "Iterable[T]",
                    "Optional[List[str]]",
                    "Optional[Set[str]]",
                    "Optional[Any]",
                    "Callable[..., None]",
                    "str",
                    "Union[str, int]"
                ]
            }
        },
        "py__iter__types": {
            "name": "py__iter__types",
            "location": 577,
            "return": [],
            "arguments": {
                "evaluator": [
                    "str",
                    "Optional[str]",
                    "Type['Payload']"
                ],
                "types": [
                    "str",
                    "Optional[str]",
                    "Type['Payload']"
                ],
                "node": [
                    "None",
                    "str",
                    "Optional[str]",
                    "Type['Payload']"
                ]
            }
        },
        "py__getitem__": {
            "name": "py__getitem__",
            "location": 585,
            "return": [
                "set",
                "IO",
                "Optional[str]",
                "str",
                "T"
            ],
            "arguments": {
                "evaluator": [],
                "types": [
                    "str",
                    "Type",
                    "Union[Type, Tuple[Type, ...]]",
                    "type",
                    "Set[str]"
                ],
                "trailer": [
                    "int"
                ]
            }
        },
        "check_array_additions": {
            "name": "check_array_additions",
            "location": 638,
            "return": [
                "set",
                "Set[str]",
                "List[str]",
                "str",
                "Dict[str, Set[str]]",
                "float"
            ],
            "arguments": {
                "evaluator": [
                    "int",
                    "str"
                ],
                "array": []
            }
        },
        "_check_array_additions": {
            "name": "_check_array_additions",
            "location": 657,
            "return": [
                "str",
                "set"
            ],
            "arguments": {
                "evaluator": [
                    "int"
                ],
                "compare_array": [
                    "float"
                ],
                "module": [
                    "bool",
                    "Mapping[str, Any]",
                    "dict"
                ],
                "is_list": [
                    "bool",
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "check_array_instances": {
            "name": "check_array_instances",
            "location": 760,
            "return": [
                "helpers.JSONType"
            ],
            "arguments": {
                "evaluator": [
                    "thonny.common.CommandToBackend",
                    "List[str]",
                    "int",
                    "str"
                ],
                "instance": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "create_index_types": {
            "name": "create_index_types",
            "location": 839,
            "return": [
                "Set[str]",
                "set[Slice]"
            ],
            "arguments": {
                "evaluator": [
                    "Optional[BaseException]",
                    "bool",
                    "str"
                ],
                "index": [
                    "Dict[str, Any]"
                ]
            }
        },
        "IterableWrapper.is_class": {
            "name": "is_class",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IterableWrapper._get_names_dict": {
            "name": "_get_names_dict",
            "location": 41,
            "return": [
                "dict[, list]",
                "str",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "names_dict": [
                    "str",
                    "dict",
                    "Iterable[Tuple[int, int]]"
                ]
            }
        },
        "BuiltinMethod.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "builtin": [
                    "int",
                    "bool"
                ],
                "method": [
                    "int",
                    "bool"
                ],
                "builtin_func": [
                    "int",
                    "bool"
                ]
            }
        },
        "BuiltinMethod.py__call__": {
            "name": "py__call__",
            "location": 73,
            "return": [
                "str",
                "dict",
                "Callable[[str], T]",
                "Mapping[str, str]"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "bool",
                    "Exception",
                    "Callable",
                    "Optional[bool]"
                ]
            }
        },
        "BuiltinMethod.__getattr__": {
            "name": "__getattr__",
            "location": 76,
            "return": [
                "str",
                "type"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Pattern"
                ]
            }
        },
        "register_builtin_method.wrapper": {
            "name": "wrapper",
            "location": 91,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "func": [
                    "str",
                    "dict",
                    "Callable[..., Awaitable[None]]"
                ]
            }
        },
        "GeneratorMixin.py__next__": {
            "name": "py__next__",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneratorMixin.names_dicts": {
            "name": "names_dicts",
            "location": 110,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "self": [],
                "search_global": [
                    "bool"
                ]
            }
        },
        "GeneratorMixin.py__bool__": {
            "name": "py__bool__",
            "location": 114,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneratorMixin.py__class__": {
            "name": "py__class__",
            "location": 117,
            "return": [
                "Callable[..., T]",
                "Type",
                "Optional[bool]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Generator.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "evaluator": [
                    "int",
                    "float",
                    "bool",
                    "List[str]",
                    "Union[float, int]"
                ],
                "func": [
                    "int",
                    "float",
                    "bool",
                    "List[str]",
                    "Union[float, int]"
                ],
                "var_args": [
                    "Set[str]",
                    "dict",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "Generator.py__iter__": {
            "name": "py__iter__",
            "location": 131,
            "return": [
                "str",
                "BaseException"
            ],
            "arguments": {
                "self": []
            }
        },
        "Generator.__getattr__": {
            "name": "__getattr__",
            "location": 136,
            "return": [
                "str",
                "type",
                "recidiviz.common.constants.state.state_incarceration_period.StateIncarcerationPeriodAdmissionReason",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bytes",
                    "Iterable[str]"
                ]
            }
        },
        "Generator.__repr__": {
            "name": "__repr__",
            "location": 144,
            "return": [
                "typing.Text",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comprehension.from_atom": {
            "name": "from_atom",
            "location": 150,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "evaluator": [
                    "str",
                    "Callable",
                    "Callable[[None, None], bool]"
                ],
                "atom": [
                    "int",
                    "Callable[[None, None], bool]",
                    "Type[T]",
                    "str"
                ]
            }
        },
        "Comprehension.__init__": {
            "name": "__init__",
            "location": 163,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "evaluator": [
                    "int",
                    "bool",
                    "float"
                ],
                "atom": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Comprehension._get_comprehension": {
            "name": "_get_comprehension",
            "location": 167,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comprehension._get_comp_for": {
            "name": "_get_comp_for",
            "location": 171,
            "return": [
                "bool",
                "str",
                "dbcontracts.graph.compiled.ManifestNode"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comprehension._eval_node": {
            "name": "_eval_node",
            "location": 176,
            "return": [
                "str",
                "int",
                "cache.Cache"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "str",
                    "list"
                ]
            }
        },
        "Comprehension._nested": {
            "name": "_nested",
            "location": 194,
            "return": [
                "",
                "typing.Generator",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "self": [],
                "comp_fors": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Comprehension._iterate": {
            "name": "_iterate",
            "location": 219,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comprehension.py__iter__": {
            "name": "py__iter__",
            "location": 224,
            "return": [
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comprehension.__repr__": {
            "name": "__repr__",
            "location": 227,
            "return": [
                "typing.Text",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayMixin.names_dicts": {
            "name": "names_dicts",
            "location": 234,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "self": [],
                "search_global": [
                    "bool",
                    "Type",
                    "str",
                    "dict"
                ]
            }
        },
        "ArrayMixin.py__bool__": {
            "name": "py__bool__",
            "location": 243,
            "return": [
                "None",
                "Optional[str]",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayMixin.py__class__": {
            "name": "py__class__",
            "location": 246,
            "return": [
                "Optional[str]",
                "(str, str)"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayMixin.parent": {
            "name": "parent",
            "location": 250,
            "return": [
                "int",
                "Union[rl_algorithms.common.abstraclearner.TensorTuple, Tuple[rl_algorithms.common.abstraclearner.TensorTuple]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayMixin.name": {
            "name": "name",
            "location": 254,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArrayMixin.dict_values": {
            "name": "dict_values",
            "location": 258,
            "return": [
                "str",
                "Tuple[float, float]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayMixin._imitate_values": {
            "name": "_imitate_values",
            "location": 262,
            "return": [
                "bool",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayMixin._imitate_items": {
            "name": "_imitate_items",
            "location": 268,
            "return": [
                "int",
                "bool",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListComprehension.py__getitem__": {
            "name": "py__getitem__",
            "location": 278,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "List[str]",
                    "bytes",
                    "int"
                ]
            }
        },
        "DictComprehension._get_comp_for": {
            "name": "_get_comp_for",
            "location": 298,
            "return": [
                "bool",
                "str",
                "dbcontracts.graph.compiled.ManifestNode"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictComprehension.py__iter__": {
            "name": "py__iter__",
            "location": 301,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictComprehension.py__getitem__": {
            "name": "py__getitem__",
            "location": 305,
            "return": [
                "str",
                "bool",
                "int",
                "Optional[float]",
                "Optional[str]",
                "float"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "DictComprehension.dict_values": {
            "name": "dict_values",
            "location": 313,
            "return": [
                "List[str]",
                "str",
                "bool",
                "Dict[str, Any]",
                "List[\"TaskNode\"]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictComprehension._imitate_items": {
            "name": "_imitate_items",
            "location": 317,
            "return": [
                "int",
                "bool",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Array.__init__": {
            "name": "__init__",
            "location": 334,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "evaluator": [
                    "int",
                    "bool",
                    "float"
                ],
                "atom": [
                    "Dict[str, Any]",
                    "Sized",
                    "...",
                    "str"
                ]
            }
        },
        "Array.name": {
            "name": "name",
            "location": 348,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Array.py__getitem__": {
            "name": "py__getitem__",
            "location": 351,
            "return": [
                "set[Array]",
                "bool",
                "Iterable[str]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "helpers.TraceContext"
                ]
            }
        },
        "Array.__getattr__": {
            "name": "__getattr__",
            "location": 367,
            "return": [
                "bool",
                "bytes",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Array.py__iter__": {
            "name": "py__iter__",
            "location": 374,
            "return": [
                "",
                "typing.Generator[set]",
                "typing.Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "Array._values": {
            "name": "_values",
            "location": 396,
            "return": [
                "str",
                "List[str]",
                "Optional[dict]",
                "int",
                "Iterable",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Array._items": {
            "name": "_items",
            "location": 403,
            "return": [
                "list",
                "float",
                "list[tuple]",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Array.__repr__": {
            "name": "__repr__",
            "location": 426,
            "return": [
                "typing.Text",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_FakeArray.__init__": {
            "name": "__init__",
            "location": 431,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "evaluator": [
                    "str",
                    "T",
                    "float",
                    "Callable"
                ],
                "container": [
                    "str",
                    "T",
                    "float",
                    "Callable"
                ],
                "type": [
                    "str",
                    "T",
                    "float",
                    "Callable"
                ]
            }
        },
        "ImplicitTuple.__init__": {
            "name": "__init__",
            "location": 438,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "evaluator": [
                    "str",
                    "apps.common.coininfo.CoinInfo",
                    "bytes",
                    "Iterable[str]"
                ],
                "testlist": [
                    "str",
                    "apps.common.coininfo.CoinInfo",
                    "bytes",
                    "Iterable[str]"
                ]
            }
        },
        "ImplicitTuple._items": {
            "name": "_items",
            "location": 442,
            "return": [
                "T",
                "float",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeSequence.__init__": {
            "name": "__init__",
            "location": 447,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "evaluator": [
                    "bool",
                    "Optional[bool]",
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[str]"
                ],
                "sequence_values": [
                    "bool",
                    "Optional[float]",
                    "Exception",
                    "float",
                    "int",
                    "Optional[int]"
                ],
                "type": [
                    "bool",
                    "Optional[bool]",
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[str]"
                ]
            }
        },
        "FakeSequence._items": {
            "name": "_items",
            "location": 454,
            "return": [
                "str",
                "int",
                "dict",
                "Callable[[Mapping], T]",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlreadyEvaluated.get_code": {
            "name": "get_code",
            "location": 472,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "normalized": [
                    "bool",
                    "Sequence[int]",
                    "str"
                ]
            }
        },
        "FakeDict.__init__": {
            "name": "__init__",
            "location": 482,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "evaluator": [
                    "dict",
                    "Dict[str, Any]",
                    "Type[T]",
                    "Optional[Mapping[str, Any]]"
                ],
                "dct": [
                    "dict",
                    "Dict[str, Any]",
                    "Type[T]",
                    "Optional[Mapping[str, Any]]"
                ]
            }
        },
        "FakeDict.py__iter__": {
            "name": "py__iter__",
            "location": 486,
            "return": [
                "",
                "typing.Generator[set]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeDict.py__getitem__": {
            "name": "py__getitem__",
            "location": 489,
            "return": [
                "str",
                "int",
                "List[List[str]]",
                "AsyncGenerator"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "FakeDict._items": {
            "name": "_items",
            "location": 492,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergedArray.__init__": {
            "name": "__init__",
            "location": 499,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "evaluator": [
                    "bytes",
                    "int"
                ],
                "arrays": [
                    "bool",
                    "Sized",
                    "str",
                    "DefaultDict[str, float]",
                    "Sequence[Hashable]",
                    "FrozenSet[int]"
                ]
            }
        },
        "MergedArray.py__iter__": {
            "name": "py__iter__",
            "location": 503,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergedArray.py__getitem__": {
            "name": "py__getitem__",
            "location": 508,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "MergedArray._items": {
            "name": "_items",
            "location": 511,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergedArray.__len__": {
            "name": "__len__",
            "location": 516,
            "return": [
                "int",
                "List[int]",
                "List[List[int]]",
                "Tuple[float]",
                "List[str]",
                "List['GridQubit']"
            ],
            "arguments": {
                "self": []
            }
        },
        "_check_array_additions.check_additions": {
            "name": "check_additions",
            "location": 669,
            "return": [
                "set",
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "arglist": [
                    "str",
                    "Tuple[str]",
                    "int",
                    "List[int]",
                    "Set[int]"
                ],
                "add_name": [
                    "Optional[Set[str]]",
                    "bool",
                    "List[str]",
                    "str"
                ]
            }
        },
        "_check_array_additions.get_execution_parent": {
            "name": "get_execution_parent",
            "location": 686,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "element": [
                    "str",
                    "List[int]",
                    "List[Tuple[int, int]]",
                    "bytes"
                ]
            }
        },
        "_ArrayInstance.__init__": {
            "name": "__init__",
            "location": 781,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "evaluator": [
                    "int",
                    "bool",
                    "float"
                ],
                "instance": [
                    "str",
                    "bool"
                ]
            }
        },
        "_ArrayInstance.py__iter__": {
            "name": "py__iter__",
            "location": 786,
            "return": [
                "int",
                "None",
                "str",
                "typing.Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slice.__init__": {
            "name": "__init__",
            "location": 806,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "evaluator": [
                    "int",
                    "dict"
                ],
                "start": [
                    "int",
                    "dict"
                ],
                "stop": [
                    "int",
                    "dict"
                ],
                "step": [
                    "int",
                    "dict"
                ]
            }
        },
        "Slice.obj": {
            "name": "obj",
            "location": 814,
            "return": [
                "range",
                "bool",
                "Callable[..., None]",
                "str",
                "cache.Cache"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slice.obj.get": {
            "name": "get",
            "location": 819,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "bool",
                "Optional[Any]"
            ],
            "arguments": {
                "element": [
                    "Optional[str]",
                    "Optional[float]",
                    "bool",
                    "Optional[int]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/evaluate/jedi_typing.py": {
        "factory": {
            "name": "factory",
            "location": 13,
            "return": [
                "bool",
                "bytes",
                "Optional[str]",
                "typing.Sequence",
                "str",
                "typing.MutableSequence",
                "list",
                "typing.Iterator",
                "typing.AbstractSet",
                "typing.MutableSet",
                "typing.Mapping",
                "typing.MutableMapping",
                "tuple",
                "typing.KeysView",
                "typing.ItemsView",
                "typing.ValuesView",
                "dict"
            ],
            "arguments": {
                "typing_name": [
                    "str"
                ],
                "indextypes": [
                    "str",
                    "type"
                ]
            }
        },
        "factory.Iterable.__iter__": {
            "name": "__iter__",
            "location": 15,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "factory.Iterator.next": {
            "name": "next",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "factory.Iterator.__next__": {
            "name": "__next__",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "factory.Sequence.__getitem__": {
            "name": "__getitem__",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "factory.Tuple.__getitem__": {
            "name": "__getitem__",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "factory.ValuesView.__iter__": {
            "name": "__iter__",
            "location": 56,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "factory.ItemsView.__iter__": {
            "name": "__iter__",
            "location": 61,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "self": []
            }
        },
        "factory.Mapping.__getitem__": {
            "name": "__getitem__",
            "location": 66,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "T",
                    "Optional[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "factory.Mapping.keys": {
            "name": "keys",
            "location": 69,
            "return": [
                "KeysView",
                "str",
                "List[str]",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "factory.Mapping.values": {
            "name": "values",
            "location": 72,
            "return": [
                "ValuesView",
                "str",
                "int",
                "Type[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "factory.Mapping.items": {
            "name": "items",
            "location": 75,
            "return": [
                "ItemsView",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "Union[Sequence, 'SweepFixedValues']"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/evaluate/param.py": {
        "try_iter_content": {
            "name": "try_iter_content",
            "location": 15,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "str",
                "Callable"
            ],
            "arguments": {
                "types": [
                    "str",
                    "Optional[Any]",
                    "Sequence[str]",
                    "bool"
                ],
                "depth": [
                    "int",
                    "str",
                    "Optional[int]",
                    "bytes"
                ]
            }
        },
        "_get_calling_var_args": {
            "name": "_get_calling_var_args",
            "location": 225,
            "return": [
                "None",
                "Optional[int]",
                "Optional[float]",
                "Optional[Dict]",
                "Optional[str]"
            ],
            "arguments": {
                "evaluator": [
                    "str",
                    "dict"
                ],
                "var_args": [
                    "List[str]",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "get_params": {
            "name": "get_params",
            "location": 250,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "evaluator": [
                    "str",
                    "float",
                    "dict"
                ],
                "func": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "var_args": [
                    "str",
                    "list",
                    "Type",
                    "Union[str, int]",
                    "int"
                ]
            }
        },
        "_iterate_star_args": {
            "name": "_iterate_star_args",
            "location": 387,
            "return": [
                "",
                "typing.Generator",
                "typing.Generator[AlreadyEvaluated]"
            ],
            "arguments": {
                "evaluator": [
                    "str",
                    "float",
                    "Optional[str]",
                    "Optional[Sequence[str]]",
                    "dict",
                    "Dict[str, Any]",
                    "Set[str]"
                ],
                "array": [
                    "int",
                    "List[str]",
                    "Hashable"
                ],
                "input_node": [
                    "str",
                    "float",
                    "Optional[str]",
                    "Optional[Sequence[str]]",
                    "dict",
                    "Dict[str, Any]",
                    "Set[str]"
                ],
                "func": [
                    "None",
                    "Sequence[str]",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Optional[Callable[..., Any]]",
                    "str",
                    "Optional[AnyStr]"
                ]
            }
        },
        "_star_star_dict": {
            "name": "_star_star_dict",
            "location": 405,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, bool]",
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "evaluator": [
                    "str",
                    "int"
                ],
                "array": [
                    "int",
                    "List[str]"
                ],
                "input_node": [
                    "str",
                    "float",
                    "dict",
                    "Dict[str, Any]",
                    "Set[str]",
                    "Optional[str]",
                    "Optional[Sequence[str]]"
                ],
                "func": [
                    "Optional[str]",
                    "Optional[Callable[..., Any]]",
                    "Sequence[str]",
                    "str",
                    "Optional[List[str]]",
                    "Optional[AnyStr]"
                ]
            }
        },
        "_error_argument_count": {
            "name": "_error_argument_count",
            "location": 430,
            "return": [
                "Optional[Callable[[], mypy.types.Instance]]",
                "typing.Text"
            ],
            "arguments": {
                "func": [
                    "nevergrad.common.Any",
                    "dict",
                    "tuple"
                ],
                "actual_count": [
                    "Callable",
                    "Tuple[List[str], bool]"
                ]
            }
        },
        "Arguments.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "evaluator": [
                    "int",
                    "str",
                    "Callable",
                    "Optional[List[str]]"
                ],
                "argument_node": [
                    "Callable[[Optional, Optional, str], None]",
                    "int",
                    "bool",
                    "list"
                ],
                "trailer": [
                    "None",
                    "int",
                    "str",
                    "Callable",
                    "Optional[List[str]]"
                ]
            }
        },
        "Arguments._split": {
            "name": "_split",
            "location": 45,
            "return": [
                "typing.Generator[tuple[int]]",
                "str",
                "None",
                "recidiviz.common.constants.entity_enum.EntityEnumMeta",
                "Dict[str, Tuple[int, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Arguments.get_parent_until": {
            "name": "get_parent_until",
            "location": 70,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[Dict]",
                "Optional[\"Period\"]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Arguments.as_tuple": {
            "name": "as_tuple",
            "location": 84,
            "return": [
                "",
                "typing.Generator[tuple[None]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Arguments.unpack": {
            "name": "unpack",
            "location": 92,
            "return": [
                "",
                "typing.Generator[tuple[typing.Optional[list]]]",
                "typing.Generator[tuple]",
                "typing.Generator[tuple[typing.Optional[tuple[AlreadyEvaluated]]]]",
                "typing.Generator[tuple[None]]",
                "typing.Generator[tuple[typing.Optional[tuple]]]",
                "typing.Generator[tuple[tuple]]"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "None",
                    "int",
                    "Callable",
                    "List[float]"
                ]
            }
        },
        "Arguments._reorder_var_args": {
            "name": "_reorder_var_args",
            "location": 129,
            "return": [
                "type",
                "list[tree_@_ExprStmt]"
            ],
            "arguments": {
                "var_args": [
                    "Iterator",
                    "Callable",
                    "List[Union[str, \"SqlFile\"]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Arguments.eval_argument_clinic": {
            "name": "eval_argument_clinic",
            "location": 147,
            "return": [
                "",
                "typing.Generator[set]"
            ],
            "arguments": {
                "self": [],
                "arguments": [
                    "int",
                    "List['world.PerceivedNoise']",
                    "Optional[BaseException]",
                    "float",
                    "bytes"
                ]
            }
        },
        "Arguments.scope": {
            "name": "scope",
            "location": 168,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Arguments.eval_args": {
            "name": "eval_args",
            "location": 172,
            "return": [
                "bool",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Arguments.__repr__": {
            "name": "__repr__",
            "location": 177,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Arguments.get_calling_var_args": {
            "name": "get_calling_var_args",
            "location": 180,
            "return": [
                "None",
                "Optional[str]",
                "Optional[T]",
                "Tuple[List[str], Optional[str]]",
                "str",
                "Callable[[Type, str], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Arguments.eval_all": {
            "name": "eval_all",
            "location": 187,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "None"
                ]
            }
        },
        "ExecutedParam.__init__": {
            "name": "__init__",
            "location": 200,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "original_param": [
                    "bool",
                    "int",
                    "Optional[int]",
                    "Type[T]"
                ],
                "var_args": [
                    "Optional[Dict[str, Any]]",
                    "str",
                    "Dict[str, Tuple[Any, Any]]",
                    "bool"
                ],
                "values": [
                    "bool",
                    "float",
                    "set",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "ExecutedParam.eval": {
            "name": "eval",
            "location": 205,
            "return": [
                "set"
            ],
            "arguments": {
                "self": [],
                "evaluator": [
                    "str"
                ]
            }
        },
        "ExecutedParam.position_nr": {
            "name": "position_nr",
            "location": 212,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExecutedParam.name": {
            "name": "name",
            "location": 218,
            "return": [
                "FakeName",
                "str",
                "Union[object, type]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExecutedParam.__getattr__": {
            "name": "__getattr__",
            "location": 221,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Pattern"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/evaluate/pep0484.py": {
        "_evaluate_for_annotation": {
            "name": "_evaluate_for_annotation",
            "location": 35,
            "return": [
                "List[Dict]",
                "str",
                "List[List[Any]]",
                "list",
                "List[str]",
                "Union[str, List[Any]]"
            ],
            "arguments": {
                "evaluator": [
                    "float",
                    "int",
                    "list",
                    "FrozenSet[int]"
                ],
                "annotation": [
                    "Optional[str]",
                    "Optional[float]",
                    "Optional[int]"
                ],
                "index": [
                    "Iterable['cirq.Operation']",
                    "int",
                    "list",
                    "Sequence[str]"
                ]
            }
        },
        "_fix_forward_reference": {
            "name": "_fix_forward_reference",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "evaluator": [],
                "node": []
            }
        },
        "follow_param": {
            "name": "follow_param",
            "location": 81,
            "return": [
                "bool",
                "str",
                "Optional[int]",
                "Optional[bool]"
            ],
            "arguments": {
                "evaluator": [
                    "int",
                    "Callable",
                    "str"
                ],
                "param": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "find_return_types": {
            "name": "find_return_types",
            "location": 87,
            "return": [
                "bool",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "evaluator": [
                    "str"
                ],
                "func": [
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "_get_typing_replacement_module": {
            "name": "_get_typing_replacement_module",
            "location": 95,
            "return": [
                "bool",
                "Callable",
                "BaseException",
                "Optional[str]",
                "str"
            ],
            "arguments": {}
        },
        "get_types_for_typing_module": {
            "name": "get_types_for_typing_module",
            "location": 111,
            "return": [
                "bool",
                "Optional[\"Period\"]",
                "Type",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "evaluator": [
                    "int"
                ],
                "typ": [],
                "node": []
            }
        },
        "find_type_from_comment_hint_for": {
            "name": "find_type_from_comment_hint_for",
            "location": 153,
            "return": [
                "IO",
                "Optional[str]"
            ],
            "arguments": {
                "evaluator": [
                    "str",
                    "Type"
                ],
                "node": [
                    "str",
                    "Type"
                ],
                "name": [
                    "str",
                    "Type"
                ]
            }
        },
        "find_type_from_comment_hint_with": {
            "name": "find_type_from_comment_hint_with",
            "location": 158,
            "return": [
                "IO"
            ],
            "arguments": {
                "evaluator": [
                    "str",
                    "Type",
                    "bool"
                ],
                "node": [
                    "Type[BaseException]",
                    "str",
                    "Type[Any]"
                ],
                "name": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "find_type_from_comment_hint_assign": {
            "name": "find_type_from_comment_hint_assign",
            "location": 165,
            "return": [
                "IO"
            ],
            "arguments": {
                "evaluator": [
                    "str",
                    "bool"
                ],
                "node": [
                    "str",
                    "bool"
                ],
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "_find_type_from_comment_hint": {
            "name": "_find_type_from_comment_hint",
            "location": 170,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "evaluator": [
                    "str",
                    "int"
                ],
                "node": [
                    "str",
                    "Optional[str]",
                    "Tuple[Type]"
                ],
                "varlist": [
                    "str",
                    "Tuple[type]"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/evaluate/precedence.py": {
        "literals_to_types": {
            "name": "literals_to_types",
            "location": 25,
            "return": [
                "set",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "evaluator": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, Set[str]]",
                    "List[Dict[str, Any]]",
                    "str"
                ],
                "result": [
                    "Type",
                    "Optional[List]",
                    "Optional[Dict[str, Any]]",
                    "type",
                    "Type[Exception]"
                ]
            }
        },
        "calculate_children": {
            "name": "calculate_children",
            "location": 40,
            "return": [],
            "arguments": {
                "evaluator": [
                    "str",
                    "Dict[int, Any]"
                ],
                "children": [
                    "str",
                    "IO[Any]",
                    "bytes",
                    "int"
                ]
            }
        },
        "calculate": {
            "name": "calculate",
            "location": 68,
            "return": [
                "set",
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "evaluator": [
                    "Tuple[str]",
                    "Optional[Dict]",
                    "Optional[bool]",
                    "Optional[Any]",
                    "bool",
                    "Mapping"
                ],
                "left_result": [
                    "str",
                    "List[str]",
                    "Dict[str, bytes]"
                ],
                "operator": [
                    "int",
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "right_result": [
                    "str",
                    "List[str]",
                    "Dict[str, bytes]"
                ]
            }
        },
        "factor_calculate": {
            "name": "factor_calculate",
            "location": 87,
            "return": [
                "typing.Generator",
                "Union[tuple, list]",
                "None",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "evaluator": [
                    "str",
                    "Type",
                    "Dict[str, Any]",
                    "int"
                ],
                "types": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "operator": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        },
        "_is_number": {
            "name": "_is_number",
            "location": 104,
            "return": [
                "bool",
                "str",
                "Iterable[int]",
                "int"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Iterable[T]",
                    "list"
                ]
            }
        },
        "is_string": {
            "name": "is_string",
            "location": 109,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "is_literal": {
            "name": "is_literal",
            "location": 114,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_is_tuple": {
            "name": "_is_tuple",
            "location": 118,
            "return": [
                "Sequence[Any]",
                "bool"
            ],
            "arguments": {
                "obj": [
                    "Callable[[int], bool]",
                    "List[float]",
                    "List[int]",
                    "list"
                ]
            }
        },
        "_is_list": {
            "name": "_is_list",
            "location": 123,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "Callable[[int], bool]",
                    "int",
                    "List[float]",
                    "List[int]"
                ]
            }
        },
        "_element_calculate": {
            "name": "_element_calculate",
            "location": 128,
            "return": [
                "set",
                "Set[str]",
                "List[str]",
                "str",
                "int"
            ],
            "arguments": {
                "evaluator": [
                    "set",
                    "Dict[str, Any]",
                    "dict"
                ],
                "left": [
                    "str"
                ],
                "operator": [
                    "str"
                ],
                "right": [
                    "str"
                ]
            }
        },
        "_element_calculate.check": {
            "name": "check",
            "location": 167,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "list",
                    "float"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/evaluate/recursion.py": {
        "recursion_decorator": {
            "name": "recursion_decorator",
            "location": 15,
            "return": [
                "bool",
                "int",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "execution_recursion_decorator": {
            "name": "execution_recursion_decorator",
            "location": 94,
            "return": [
                "bool",
                "Union[str, List[str]]",
                "int"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "bool",
                    "list",
                    "Tuple[Type[Exception]]"
                ]
            }
        },
        "recursion_decorator.run": {
            "name": "run",
            "location": 16,
            "return": [
                "set"
            ],
            "arguments": {
                "evaluator": [],
                "stmt": []
            }
        },
        "RecursionDetector.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "evaluator": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "RecursionDetector.push_stmt": {
            "name": "push_stmt",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "stmt": [
                    "List[str]",
                    "Optional[int]"
                ]
            }
        },
        "RecursionDetector.pop_stmt": {
            "name": "pop_stmt",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecursionDetector._check_recursion": {
            "name": "_check_recursion",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecursionDetector.node_statements": {
            "name": "node_statements",
            "location": 62,
            "return": [
                "list[int]",
                "bool",
                "int",
                "str",
                "Dict[str, Tuple[int, int]]",
                "Tuple[Dict[str, object], Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_RecursionNode.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "evaluator": [
                    "bool",
                    "List[str]",
                    "int",
                    "str"
                ],
                "stmt": [
                    "str",
                    "int"
                ],
                "parent": [
                    "str",
                    "bool",
                    "Tuple[type]",
                    "List[str]",
                    "Type[T]",
                    "dict"
                ]
            }
        },
        "_RecursionNode.__eq__": {
            "name": "__eq__",
            "location": 85,
            "return": [
                "None",
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "execution_recursion_decorator.run": {
            "name": "run",
            "location": 95,
            "return": [
                "set",
                "str",
                "int",
                "Set[str]",
                "Mapping[str, int]",
                "bool",
                "\"Parameter\""
            ],
            "arguments": {
                "execution": [
                    "str",
                    "int",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "ExecutionRecursionDetector.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "evaluator": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ExecutionRecursionDetector.__call__": {
            "name": "__call__",
            "location": 118,
            "return": [
                "set",
                "bool",
                "Dict[str, Any]",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "execution": [
                    "Dict[str, Any]",
                    "int",
                    "bool",
                    "Tuple[List, List]"
                ]
            }
        },
        "ExecutionRecursionDetector.pop_execution": {
            "name": "pop_execution",
            "location": 128,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExecutionRecursionDetector.push_execution": {
            "name": "push_execution",
            "location": 132,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "execution": [
                    "dict"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/evaluate/representation.py": {
        "get_instance_el": {
            "name": "get_instance_el",
            "location": 286,
            "return": [
                "InstanceName",
                "str",
                "InstanceElement",
                "Optional[str]",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "evaluator": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "instance": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "var": [
                    "Optional[int]",
                    "bool",
                    "Callable[[Type, str], bool]",
                    "Optional['Entity']"
                ],
                "is_class_var": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Executed.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "evaluator": [
                    "int",
                    "bool",
                    "Sequence[int]",
                    "List[str]"
                ],
                "base": [
                    "int",
                    "bool",
                    "Sequence[int]",
                    "List[str]"
                ],
                "var_args": [
                    "tuple",
                    "Set[str]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "Executed.is_scope": {
            "name": "is_scope",
            "location": 70,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Executed.get_parent_until": {
            "name": "get_parent_until",
            "location": 73,
            "return": [
                "str",
                "Optional[str]",
                "Optional[T]",
                "Type",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Executed.parent": {
            "name": "parent",
            "location": 77,
            "return": [
                "str",
                "Tuple[type]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instance.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "evaluator": [
                    "int",
                    "str",
                    "eth2spec.debug.random_value.RandomizationMode"
                ],
                "base": [
                    "float",
                    "Union[str, bytes]"
                ],
                "var_args": [
                    "str",
                    "bool",
                    "dict",
                    "Optional[str]"
                ],
                "is_generated": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "str",
                    "List[\"Outcome\"]"
                ]
            }
        },
        "Instance.is_class": {
            "name": "is_class",
            "location": 106,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instance.py__call__": {
            "name": "py__call__",
            "location": 110,
            "return": [
                "int",
                "Optional[List[str]]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instance.py__class__": {
            "name": "py__class__",
            "location": 122,
            "return": [
                "Pattern",
                "int",
                "Optional[\"Node\"]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instance.py__bool__": {
            "name": "py__bool__",
            "location": 125,
            "return": [
                "None",
                "Optional[str]",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instance._get_method_execution": {
            "name": "_get_method_execution",
            "location": 130,
            "return": [
                "FunctionExecution",
                "str",
                "bool",
                "int",
                "Mapping"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "bool"
                ]
            }
        },
        "Instance._get_func_self_name": {
            "name": "_get_func_self_name",
            "location": 134,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Type[T]",
                    "list",
                    "Dict[str, Any]"
                ]
            }
        },
        "Instance._self_names_dict": {
            "name": "_self_names_dict",
            "location": 144,
            "return": [
                "str",
                "dict",
                "Optional[str]",
                "list"
            ],
            "arguments": {
                "self": [],
                "add_mro": [
                    "bool",
                    "Callable",
                    "Exception"
                ]
            }
        },
        "Instance.get_subscope_by_name": {
            "name": "get_subscope_by_name",
            "location": 177,
            "return": [
                "int",
                "List[int]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Instance.execute_subscope_by_name": {
            "name": "execute_subscope_by_name",
            "location": 181,
            "return": [
                "str",
                "Iterable[int]",
                "bool",
                "apps.common.coininfo.CoinInfo"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Instance.get_descriptor_returns": {
            "name": "get_descriptor_returns",
            "location": 185,
            "return": [
                "set[Instance]",
                "Optional[str]",
                "str",
                "dict",
                "List[str]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Dict[str, Any]",
                    "list",
                    "Sequence[str]"
                ]
            }
        },
        "Instance.names_dicts": {
            "name": "names_dicts",
            "location": 197,
            "return": [
                "",
                "typing.Generator",
                "typing.Generator[LazyInstanceDict]"
            ],
            "arguments": {
                "self": [],
                "search_global": [
                    "Optional[Any]",
                    "type",
                    "Callable"
                ]
            }
        },
        "Instance.py__getitem__": {
            "name": "py__getitem__",
            "location": 209,
            "return": [
                "set",
                "List[str]",
                "Set[str]",
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "bool",
                    "List[str]",
                    "str",
                    "helpers.TraceContext",
                    "float"
                ]
            }
        },
        "Instance.py__iter__": {
            "name": "py__iter__",
            "location": 219,
            "return": [
                "int",
                "None",
                "str",
                "typing.Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instance.name": {
            "name": "name",
            "location": 241,
            "return": [
                "str",
                "Type",
                "BaseException",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instance.__getattr__": {
            "name": "__getattr__",
            "location": 245,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Instance.__repr__": {
            "name": "__repr__",
            "location": 252,
            "return": [
                "typing.Text",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "LazyInstanceDict.__init__": {
            "name": "__init__",
            "location": 261,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "evaluator": [
                    "int",
                    "bool",
                    "float"
                ],
                "instance": [
                    "int",
                    "bool",
                    "float"
                ],
                "dct": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "LazyInstanceDict.__getitem__": {
            "name": "__getitem__",
            "location": 266,
            "return": [
                "list",
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Iterator[bytes]"
                ]
            }
        },
        "LazyInstanceDict.values": {
            "name": "values",
            "location": 270,
            "return": [
                "list",
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstanceName.__init__": {
            "name": "__init__",
            "location": 275,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "origin_name": [
                    "str",
                    "Dict[str, Any]"
                ],
                "parent": [
                    "str",
                    "Iterable"
                ]
            }
        },
        "InstanceName.is_definition": {
            "name": "is_definition",
            "location": 282,
            "return": [
                "str",
                "Dict[str, Any]",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstanceElement.__init__": {
            "name": "__init__",
            "location": 312,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "evaluator": [
                    "bool",
                    "Optional[str]"
                ],
                "instance": [
                    "bool",
                    "Optional[str]"
                ],
                "var": [
                    "bool",
                    "Optional[str]"
                ],
                "is_class_var": [
                    "bool",
                    "Sequence[str]",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "InstanceElement.parent": {
            "name": "parent",
            "location": 320,
            "return": [
                "int",
                "Union[rl_algorithms.common.abstraclearner.TensorTuple, Tuple[rl_algorithms.common.abstraclearner.TensorTuple]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstanceElement.get_parent_until": {
            "name": "get_parent_until",
            "location": 331,
            "return": [
                "Optional[str]",
                "Optional[T]",
                "Dict[str, Any]",
                "Optional[Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstanceElement.get_definition": {
            "name": "get_definition",
            "location": 334,
            "return": [
                "dict",
                "List[str]",
                "recidiviz.common.constants.entity_enum.EntityEnumMeta",
                "Dict[str, bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstanceElement.get_decorated_func": {
            "name": "get_decorated_func",
            "location": 337,
            "return": [
                "str",
                "Tuple[str, str]",
                "bool",
                "Callable[[KT], VT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstanceElement.get_rhs": {
            "name": "get_rhs",
            "location": 343,
            "return": [
                "Optional[str]",
                "str",
                "int",
                "Dict[str, Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstanceElement.is_definition": {
            "name": "is_definition",
            "location": 347,
            "return": [
                "bool",
                "Type[BaseException]",
                "Optional[bool]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstanceElement.children": {
            "name": "children",
            "location": 351,
            "return": [
                "list",
                "dict",
                "Dict[str, int]",
                "List[str]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstanceElement.name": {
            "name": "name",
            "location": 358,
            "return": [
                "str",
                "Type",
                "BaseException",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstanceElement.__iter__": {
            "name": "__iter__",
            "location": 362,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstanceElement.__getitem__": {
            "name": "__getitem__",
            "location": 367,
            "return": [
                "Callable",
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "float",
                    "str",
                    "List[str]"
                ]
            }
        },
        "InstanceElement.__getattr__": {
            "name": "__getattr__",
            "location": 371,
            "return": [
                "str",
                "recidiviz.common.constants.state.state_incarceration_period.StateIncarcerationPeriodAdmissionReason",
                "type",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "InstanceElement.isinstance": {
            "name": "isinstance",
            "location": 374,
            "return": [
                "bool",
                "List[Dict[str, Any]]",
                "str",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstanceElement.is_scope": {
            "name": "is_scope",
            "location": 377,
            "return": [
                "bool",
                "Type[BaseException]",
                "Optional[bool]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstanceElement.py__call__": {
            "name": "py__call__",
            "location": 383,
            "return": [
                "bool",
                "apps.common.coininfo.CoinInfo"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "Type",
                    "Type['Frame']",
                    "bool"
                ]
            }
        },
        "InstanceElement.__repr__": {
            "name": "__repr__",
            "location": 391,
            "return": [
                "typing.Text",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wrapper.is_scope": {
            "name": "is_scope",
            "location": 396,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wrapper.is_class": {
            "name": "is_class",
            "location": 399,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wrapper.py__bool__": {
            "name": "py__bool__",
            "location": 402,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wrapper.name": {
            "name": "name",
            "location": 411,
            "return": [
                "str",
                "Type",
                "BaseException",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "Class.__init__": {
            "name": "__init__",
            "location": 421,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "evaluator": [
                    "int",
                    "str",
                    "AsyncIterator[T]",
                    "Dict[str, Any]"
                ],
                "base": [
                    "int",
                    "str",
                    "AsyncIterator[T]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Class.py__mro__": {
            "name": "py__mro__",
            "location": 426,
            "return": [
                "tuple[Class]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Class.py__bases__": {
            "name": "py__bases__",
            "location": 459,
            "return": [
                "list",
                "List[Dict]",
                "str",
                "List[str]",
                "Union[List[float], List[int]]",
                "List[int]",
                "Union[str, List[Any]]",
                "List[float]",
                "Tuple[int, int, int]",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Class.py__call__": {
            "name": "py__call__",
            "location": 467,
            "return": [
                "Set[str]",
                "set[Instance]"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "int",
                    "Optional[List[str]]",
                    "Callable"
                ]
            }
        },
        "Class.py__class__": {
            "name": "py__class__",
            "location": 470,
            "return": [
                "bool",
                "Type[T]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Class.params": {
            "name": "params",
            "location": 474,
            "return": [
                "list",
                "str",
                "int",
                "cache.Cache",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Class.names_dicts": {
            "name": "names_dicts",
            "location": 480,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "self": [],
                "search_global": [
                    "Callable",
                    "int",
                    "bool",
                    "str"
                ],
                "is_instance": [
                    "bool",
                    "dict",
                    "\"ImmutableSet[T]\"",
                    "Union[str, int]",
                    "int",
                    "\"FieldElement\""
                ]
            }
        },
        "Class.is_class": {
            "name": "is_class",
            "location": 490,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Class.get_subscope_by_name": {
            "name": "get_subscope_by_name",
            "location": 493,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "Optional[Union[Any, str]]"
                ]
            }
        },
        "Class.__getattr__": {
            "name": "__getattr__",
            "location": 500,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Class.__repr__": {
            "name": "__repr__",
            "location": 507,
            "return": [
                "typing.Text",
                "Optional[str]",
                "Optional[int]",
                "str",
                "bool",
                "Optional[Iterable[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.__init__": {
            "name": "__init__",
            "location": 515,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "evaluator": [
                    "str",
                    "int",
                    "List[str]",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ],
                "func": [
                    "Optional[str]",
                    "int",
                    "List[Dict]",
                    "Iterable[Any]",
                    "Iterable[float]",
                    "bool"
                ],
                "is_decorated": [
                    "bool",
                    "str",
                    "int",
                    "List[str]",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ]
            }
        },
        "Function.get_decorated_func": {
            "name": "get_decorated_func",
            "location": 524,
            "return": [
                "Function",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.names_dicts": {
            "name": "names_dicts",
            "location": 578,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "self": [],
                "search_global": [
                    "bool"
                ]
            }
        },
        "Function.py__call__": {
            "name": "py__call__",
            "location": 587,
            "return": [
                "set"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "type",
                    "str",
                    "Iterable[Any]"
                ]
            }
        },
        "Function.py__annotations__": {
            "name": "py__annotations__",
            "location": 594,
            "return": [
                "dict[typing.Text, ]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.py__class__": {
            "name": "py__class__",
            "location": 607,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.__getattr__": {
            "name": "__getattr__",
            "location": 616,
            "return": [
                "str",
                "Callable[[str], None]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "float",
                    "Optional[str]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "Function.__repr__": {
            "name": "__repr__",
            "location": 619,
            "return": [
                "typing.Text",
                "str",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LambdaWrapper.get_decorated_func": {
            "name": "get_decorated_func",
            "location": 627,
            "return": [
                "LambdaWrapper",
                "List[str]",
                "int",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionExecution.__init__": {
            "name": "__init__",
            "location": 642,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "evaluator": [
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Optional[Sequence]"
                ],
                "base": [
                    "Optional[Sequence]"
                ]
            }
        },
        "FunctionExecution.get_return_types": {
            "name": "get_return_types",
            "location": 662,
            "return": [
                "bool",
                "set",
                "BaseException",
                "int"
            ],
            "arguments": {
                "self": [],
                "check_yields": [
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "FunctionExecution._eval_yield": {
            "name": "_eval_yield",
            "location": 699,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "self": [],
                "yield_expr": [
                    "str",
                    "IO"
                ]
            }
        },
        "FunctionExecution.get_yield_types": {
            "name": "get_yield_types",
            "location": 710,
            "return": [
                "Iterator[Tuple[str, str]]",
                "typing.Generator",
                "Optional[str]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionExecution.names_dicts": {
            "name": "names_dicts",
            "location": 756,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "self": [],
                "search_global": [
                    "bool"
                ]
            }
        },
        "FunctionExecution._get_params": {
            "name": "_get_params",
            "location": 760,
            "return": [
                "str",
                "Optional[str]",
                "List[dict]",
                "bool",
                "int",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionExecution.param_by_name": {
            "name": "param_by_name",
            "location": 769,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "FunctionExecution.name_for_position": {
            "name": "name_for_position",
            "location": 772,
            "return": [
                "str",
                "bool",
                "Union[str, bytes]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "str",
                    "type",
                    "Container[\"Taxon\"]"
                ]
            }
        },
        "FunctionExecution.__getattr__": {
            "name": "__getattr__",
            "location": 775,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bytes"
                ]
            }
        },
        "FunctionExecution.returns": {
            "name": "returns",
            "location": 782,
            "return": [
                "str",
                "int",
                "List[Union[\"PipeChain\", str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionExecution.yields": {
            "name": "yields",
            "location": 787,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionExecution.statements": {
            "name": "statements",
            "location": 792,
            "return": [
                "Union[int, slice]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionExecution.subscopes": {
            "name": "subscopes",
            "location": 797,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionExecution.__repr__": {
            "name": "__repr__",
            "location": 800,
            "return": [
                "typing.Text",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GlobalName.__init__": {
            "name": "__init__",
            "location": 805,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "ModuleWrapper.__init__": {
            "name": "__init__",
            "location": 815,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "evaluator": [
                    "str",
                    "Callable",
                    "Set[str]",
                    "int",
                    "bool"
                ],
                "module": [
                    "str",
                    "Union[str, List[str]]",
                    "Callable"
                ],
                "parent_module": [
                    "None",
                    "str",
                    "Optional[Dict]"
                ]
            }
        },
        "ModuleWrapper.names_dicts": {
            "name": "names_dicts",
            "location": 820,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "self": [],
                "search_global": [
                    "bool"
                ]
            }
        },
        "ModuleWrapper.star_imports": {
            "name": "star_imports",
            "location": 835,
            "return": [
                "list",
                "bool",
                "int",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModuleWrapper._module_attributes_dict": {
            "name": "_module_attributes_dict",
            "location": 848,
            "return": [
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModuleWrapper.name": {
            "name": "name",
            "location": 860,
            "return": [
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModuleWrapper._get_init_directory": {
            "name": "_get_init_directory",
            "location": 863,
            "return": [
                "None",
                "str",
                "bool",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModuleWrapper.py__name__": {
            "name": "py__name__",
            "location": 876,
            "return": [
                "typing.Text",
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModuleWrapper.py__file__": {
            "name": "py__file__",
            "location": 883,
            "return": [
                "None",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModuleWrapper.py__package__": {
            "name": "py__package__",
            "location": 892,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModuleWrapper._py__path__": {
            "name": "_py__path__",
            "location": 898,
            "return": [
                "list",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModuleWrapper.py__path__": {
            "name": "py__path__",
            "location": 923,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModuleWrapper._sub_modules_dict": {
            "name": "_sub_modules_dict",
            "location": 942,
            "return": [
                "dict[, list]",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModuleWrapper.py__class__": {
            "name": "py__class__",
            "location": 967,
            "return": [
                "str",
                "Optional[recidiviz.common.constants.state.state_supervision.StateSupervisionType]",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModuleWrapper.__getattr__": {
            "name": "__getattr__",
            "location": 970,
            "return": [
                "str",
                "Optional[str]",
                "recidiviz.common.constants.state.state_incarceration_period.StateIncarcerationPeriodAdmissionReason",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "type"
                ]
            }
        },
        "ModuleWrapper.__repr__": {
            "name": "__repr__",
            "location": 973,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instance.py__call__.actual": {
            "name": "actual",
            "location": 111,
            "return": [
                "str",
                "int",
                "MutableMapping[str, Any]",
                "bool",
                "bytes",
                "Iterable[str]"
            ],
            "arguments": {
                "params": [
                    "str",
                    "Iterable[int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Class.py__mro__.add": {
            "name": "add",
            "location": 427,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Callable",
                    "Callable[[], T]",
                    "List[Union[int, float]]"
                ]
            }
        },
        "ModuleWrapper._module_attributes_dict.parent_callback": {
            "name": "parent_callback",
            "location": 849,
            "return": [
                "List[int]",
                "str",
                "List[Dict]",
                "List[str]"
            ],
            "arguments": {}
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/evaluate/site.py": {
        "makepath": {
            "name": "makepath",
            "location": 22,
            "return": [
                "tuple",
                "str",
                "List[int]"
            ],
            "arguments": {}
        },
        "_init_pathinfo": {
            "name": "_init_pathinfo",
            "location": 31,
            "return": [
                "set",
                "str",
                "Dict[str, bool]"
            ],
            "arguments": {
                "sys_path": [
                    "str",
                    "bool"
                ]
            }
        },
        "addpackage": {
            "name": "addpackage",
            "location": 44,
            "return": [
                "None",
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "sys_path": [
                    "str",
                    "int"
                ],
                "sitedir": [
                    "str",
                    "Optional[str]",
                    "IO[Any]"
                ],
                "name": [
                    "str"
                ],
                "known_paths": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "addsitedir": {
            "name": "addsitedir",
            "location": 89,
            "return": [
                "None",
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "sys_path": [
                    "bytes",
                    "Sequence[str]",
                    "str",
                    "int"
                ],
                "sitedir": [
                    "str",
                    "list"
                ],
                "known_paths": [
                    "None",
                    "Optional[str]",
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/evaluate/stdlib.py": {
        "execute": {
            "name": "execute",
            "location": 32,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "evaluator": [
                    "str",
                    "BaseException",
                    "int"
                ],
                "obj": [
                    "int"
                ],
                "arguments": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_follow_param": {
            "name": "_follow_param",
            "location": 55,
            "return": [
                "set",
                "Set[str]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "evaluator": [
                    "str",
                    "bool"
                ],
                "arguments": [
                    "Optional[Union[str, Any]]",
                    "bool",
                    "dict",
                    "list",
                    "int"
                ],
                "index": [
                    "Optional[Union[str, Any]]",
                    "bool",
                    "dict",
                    "list",
                    "int"
                ]
            }
        },
        "argument_clinic": {
            "name": "argument_clinic",
            "location": 64,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "string": [
                    "str",
                    "Mapping[str, str]",
                    "List[List[str]]",
                    "dict"
                ],
                "want_obj": [
                    "bool",
                    "str",
                    "Mapping[str, str]",
                    "List[List[str]]",
                    "dict"
                ],
                "want_scope": [
                    "bool",
                    "str",
                    "Mapping[str, str]",
                    "List[List[str]]",
                    "dict"
                ],
                "want_arguments": [
                    "bool",
                    "str",
                    "Mapping[str, str]",
                    "List[List[str]]",
                    "dict"
                ]
            }
        },
        "builtins_getattr": {
            "name": "builtins_getattr",
            "location": 109,
            "return": [
                "set",
                "str",
                "bool"
            ],
            "arguments": {
                "evaluator": [
                    "type",
                    "str",
                    "Exception",
                    "Union[int, bytes]"
                ],
                "objects": [
                    "str",
                    "Sequence[str]",
                    "bool",
                    "Callable",
                    "int"
                ],
                "names": [
                    "str",
                    "Sequence[str]",
                    "bool",
                    "Callable",
                    "int"
                ],
                "defaults": [
                    "None",
                    "str",
                    "Sequence[str]",
                    "bool",
                    "Callable",
                    "int"
                ]
            }
        },
        "builtins_type": {
            "name": "builtins_type",
            "location": 126,
            "return": [
                "set",
                "Set[str]",
                "Set[object]",
                "Set[T]"
            ],
            "arguments": {
                "evaluator": [
                    "str",
                    "List[object]"
                ],
                "objects": [
                    "set",
                    "bool",
                    "int",
                    "float"
                ],
                "bases": [
                    "int",
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ],
                "dicts": [
                    "int",
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "builtins_super": {
            "name": "builtins_super",
            "location": 142,
            "return": [
                "set",
                "str",
                "bytes",
                "dict",
                "List[dict]"
            ],
            "arguments": {
                "evaluator": [
                    "Type[Any]",
                    "BaseException",
                    "Exception",
                    "Type[BaseException]",
                    "type"
                ],
                "types": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "objects": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "scope": [
                    "Optional[BaseException]",
                    "Type[Any]",
                    "Optional[Type[BaseException]]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "builtins_reversed": {
            "name": "builtins_reversed",
            "location": 161,
            "return": [
                "set",
                "List[str]",
                "Set[str]",
                "str",
                "Dict[str, Set[str]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "evaluator": [
                    "str",
                    "int",
                    "Iterable[str]",
                    "bytes",
                    "List[str]"
                ],
                "sequences": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "Iterable[str]",
                    "Sequence[T]"
                ],
                "obj": [
                    "int",
                    "Callable",
                    "str"
                ],
                "arguments": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "builtins_isinstance": {
            "name": "builtins_isinstance",
            "location": 180,
            "return": [
                "set",
                "List[str]",
                "dict",
                "protos.common.common_pb2.Envelope",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "evaluator": [
                    "T",
                    "bytes",
                    "apps.common.coininfo.CoinInfo"
                ],
                "objects": [
                    "bool",
                    "str"
                ],
                "types": [
                    "bool",
                    "str"
                ],
                "arguments": [
                    "Callable[[T], Optional[T]]",
                    "list",
                    "List[str]"
                ]
            }
        },
        "collections_namedtuple": {
            "name": "collections_namedtuple",
            "location": 212,
            "return": [
                "set",
                "Optional[AbstractSet[str]]",
                "str"
            ],
            "arguments": {
                "evaluator": [
                    "str"
                ],
                "obj": [
                    "Union[str, Pattern]",
                    "bool",
                    "dict",
                    "Dict[str, Any]"
                ],
                "arguments": [
                    "str",
                    "bool",
                    "Iterable[int]",
                    "float"
                ]
            }
        },
        "_return_first_param": {
            "name": "_return_first_param",
            "location": 257,
            "return": [
                "float",
                "int",
                "Tuple[int, int]",
                "str"
            ],
            "arguments": {
                "evaluator": [
                    "str",
                    "bool",
                    "int",
                    "float"
                ],
                "firsts": [
                    "str",
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "argument_clinic.f": {
            "name": "f",
            "location": 85,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "str"
                ]
            }
        },
        "SuperInstance.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "evaluator": [
                    "int",
                    "str",
                    "bool"
                ],
                "cls": [
                    "int",
                    "bool",
                    "Type"
                ]
            }
        },
        "argument_clinic.f.wrapper": {
            "name": "wrapper",
            "location": 86,
            "return": [
                "set",
                "Set[str]",
                "bool",
                "List[str]",
                "str",
                "Iterable[Sequence[str]]"
            ],
            "arguments": {
                "evaluator": [
                    "int",
                    "Callable",
                    "str"
                ],
                "obj": [
                    "int",
                    "List[str]",
                    "List[int]",
                    "float"
                ],
                "arguments": [
                    "int"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/evaluate/sys_path.py": {
        "get_venv_path": {
            "name": "get_venv_path",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "venv": [
                    "str",
                    "list",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ConfigSerial",
                    "Optional[str]"
                ]
            }
        },
        "_get_sys_path_with_egglinks": {
            "name": "_get_sys_path_with_egglinks",
            "location": 27,
            "return": [
                "list",
                "str",
                "bool"
            ],
            "arguments": {
                "sys_path": [
                    "bool",
                    "str"
                ]
            }
        },
        "_get_venv_path_dirs": {
            "name": "_get_venv_path_dirs",
            "location": 53,
            "return": [
                "list",
                "str",
                "bool"
            ],
            "arguments": {
                "venv": [
                    "str",
                    "bool",
                    "Optional[Callable[[dict], None]]",
                    "Optional[Callable[[], None]]"
                ]
            }
        },
        "_get_venv_sitepackages": {
            "name": "_get_venv_sitepackages",
            "location": 62,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "venv": [
                    "str",
                    "Tuple[Tuple[int, ...]]",
                    "int"
                ]
            }
        },
        "_execute_code": {
            "name": "_execute_code",
            "location": 71,
            "return": [
                "list",
                "str",
                "bool"
            ],
            "arguments": {
                "module_path": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "list",
                    "Optional[str]"
                ],
                "code": [
                    "str",
                    "IO",
                    "Optional[float]",
                    "int",
                    "bytes"
                ]
            }
        },
        "_paths_from_assignment": {
            "name": "_paths_from_assignment",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "evaluator": [
                    "bool",
                    "Iterable[Any]",
                    "str"
                ],
                "expr_stmt": [
                    "Type[BaseException]",
                    "BaseException"
                ]
            }
        },
        "_paths_from_list_modifications": {
            "name": "_paths_from_list_modifications",
            "location": 131,
            "return": [
                "list",
                "str",
                "Optional[Dict[str, Any]]",
                "dict",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "module_path": [
                    "str"
                ],
                "trailer1": [
                    "bool",
                    "int",
                    "dict",
                    "str",
                    "Optional[str]",
                    "float"
                ],
                "trailer2": [
                    "int",
                    "List[int]",
                    "dict",
                    "str",
                    "bool"
                ]
            }
        },
        "_check_module": {
            "name": "_check_module",
            "location": 149,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "evaluator": [
                    "int",
                    "list",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "str"
                ],
                "module": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "sys_path_with_modifications": {
            "name": "sys_path_with_modifications",
            "location": 182,
            "return": [
                "list",
                "List[str]",
                "List[dict]",
                "List[bytes]"
            ],
            "arguments": {
                "evaluator": [
                    "str",
                    "bool",
                    "Dict[str, pypi2nix.utils.NixOption]"
                ],
                "module": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_get_paths_from_buildout_script": {
            "name": "_get_paths_from_buildout_script",
            "location": 205,
            "return": [
                "None",
                "typing.Generator",
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]",
                "Generator[dict, None, None]",
                "Generator",
                "Iterator[Dict[str, Any]]",
                "Iterator[str]"
            ],
            "arguments": {
                "evaluator": [
                    "Dict[str, Any]",
                    "bool",
                    "int",
                    "Dict[str, str]",
                    "dict"
                ],
                "buildout_script": [
                    "dict",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "traverse_parents": {
            "name": "traverse_parents",
            "location": 227,
            "return": [
                "None",
                "typing.Generator"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "_get_parent_dir_with_file": {
            "name": "_get_parent_dir_with_file",
            "location": 236,
            "return": [
                "None",
                "str",
                "Optional[str]",
                "Optional[Dict[str, Any]]",
                "List[Dict[str, Any]]",
                "Optional[bool]"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "_detect_django_path": {
            "name": "_detect_django_path",
            "location": 243,
            "return": [
                "list",
                "str",
                "Type",
                "List[str]"
            ],
            "arguments": {
                "module_path": [
                    "bool"
                ]
            }
        },
        "_get_buildout_scripts": {
            "name": "_get_buildout_scripts",
            "location": 255,
            "return": [
                "list",
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "module_path": [
                    "str"
                ]
            }
        },
        "_check_module.get_sys_path_powers": {
            "name": "get_sys_path_powers",
            "location": 153,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "names": [
                    "str",
                    "int"
                ]
            }
        },
        "_get_paths_from_buildout_script.load": {
            "name": "load",
            "location": 206,
            "return": [
                "None",
                "Iterable[str]",
                "Callable[[KT], VT]",
                "fonduer.parser.models.Document"
            ],
            "arguments": {
                "buildout_script": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/evaluate/__init__.py": {
        "Evaluator.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "grammar": [
                    "bool",
                    "Sequence[str]",
                    "str"
                ],
                "sys_path": [
                    "None",
                    "Optional[str]",
                    "Optional[TextIO]",
                    "str",
                    "Optional['Directory']",
                    "Optional[Tuple[str, str]]"
                ]
            }
        },
        "Evaluator.reset_recursion_limitations": {
            "name": "reset_recursion_limitations",
            "location": 108,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Evaluator.wrap": {
            "name": "wrap",
            "location": 112,
            "return": [
                "bool",
                "Type",
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "T",
                    "dict"
                ]
            }
        },
        "Evaluator.find_types": {
            "name": "find_types",
            "location": 129,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "str",
                    "Optional[str]"
                ],
                "name_str": [
                    "str",
                    "Optional[str]"
                ],
                "position": [
                    "None",
                    "str",
                    "Optional[str]"
                ],
                "search_global": [
                    "bool",
                    "Optional[str]",
                    "str"
                ],
                "is_goto": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Iterable[int]"
                ]
            }
        },
        "Evaluator.eval_statement": {
            "name": "eval_statement",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "stmt": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "seek_name": [
                    "None",
                    "str",
                    "Mapping",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Evaluator.eval_element": {
            "name": "eval_element",
            "location": 199,
            "return": [
                "set",
                "Dict[str, Any]",
                "List[Dict]",
                "float",
                "Dict[str, Tuple[int, int]]",
                "Dict[str, Set[str]]"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "list",
                    "List[int]",
                    "deque",
                    "int"
                ]
            }
        },
        "Evaluator._eval_element_if_evaluated": {
            "name": "_eval_element_if_evaluated",
            "location": 266,
            "return": [
                "int",
                "str",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "str",
                    "Sequence[T]",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "Evaluator._eval_element_cached": {
            "name": "_eval_element_cached",
            "location": 279,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "str",
                    "bytes",
                    "Set[str]",
                    "List[str]"
                ]
            }
        },
        "Evaluator._eval_element_not_cached": {
            "name": "_eval_element_not_cached",
            "location": 283,
            "return": [
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "Callable",
                    "Dict[str, Any]"
                ]
            }
        },
        "Evaluator._eval_atom": {
            "name": "_eval_atom",
            "location": 335,
            "return": [
                "set",
                "tuple",
                "bool"
            ],
            "arguments": {
                "self": [],
                "atom": [
                    "bool",
                    "List[str]",
                    "Mapping[str, int]",
                    "list"
                ]
            }
        },
        "Evaluator.eval_trailer": {
            "name": "eval_trailer",
            "location": 392,
            "return": [
                "bool",
                "set"
            ],
            "arguments": {
                "self": [],
                "types": [
                    "Optional[Callable]",
                    "Sequence[Any]"
                ],
                "trailer": [
                    "str"
                ]
            }
        },
        "Evaluator.execute_evaluated": {
            "name": "execute_evaluated",
            "location": 409,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Callable",
                    "int"
                ]
            }
        },
        "Evaluator.execute": {
            "name": "execute",
            "location": 417,
            "return": [
                "set",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int",
                    "slice"
                ],
                "arguments": [
                    "tuple",
                    "Optional[int]",
                    "str"
                ],
                "trailer": [
                    "None",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Evaluator.goto_definitions": {
            "name": "goto_definitions",
            "location": 445,
            "return": [
                "list",
                "Optional[BaseException]",
                "Type[Any]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "int",
                    "Tuple[type]",
                    "type"
                ]
            }
        },
        "Evaluator.goto": {
            "name": "goto",
            "location": 465,
            "return": [
                "list",
                "Optional[Any]",
                "bool",
                "int",
                "Optional[str]",
                "Type"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Evaluator.goto.resolve_implicit_imports": {
            "name": "resolve_implicit_imports",
            "location": 466,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "names": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/evaluate/compiled/fake.py": {
        "_load_faked_module": {
            "name": "_load_faked_module",
            "location": 50,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "dict",
                "List[str]",
                "int"
            ],
            "arguments": {
                "module": [
                    "dict",
                    "Union[Dict, List, str]",
                    "mypy.types.Instance",
                    "str",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "search_scope": {
            "name": "search_scope",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "scope": [
                    "str",
                    "float",
                    "travelfootprininsta.types.BasicLocation"
                ],
                "obj_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "get_module": {
            "name": "get_module",
            "location": 85,
            "return": [
                "str",
                "Tuple[int, int]",
                "int",
                "Tuple[bytes]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Tuple[int, int]",
                    "int",
                    "Tuple[bytes]",
                    "Dict[str, Any]"
                ]
            }
        },
        "_faked": {
            "name": "_faked",
            "location": 110,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "module": [
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Dict[str, Any]",
                    "bool",
                    "Optional[List[Any]]",
                    "Optional[Union[str, Any]]"
                ],
                "obj": [
                    "str",
                    "Optional[str]"
                ],
                "name": [
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[Set[str]]"
                ]
            }
        },
        "memoize_faked": {
            "name": "memoize_faked",
            "location": 149,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_get_faked": {
            "name": "_get_faked",
            "location": 172,
            "return": [
                "str",
                "bool",
                "dict",
                "set",
                "List[str]"
            ],
            "arguments": {
                "module": [],
                "obj": [
                    "Optional[Union[Any, Any]]"
                ],
                "name": [
                    "None"
                ]
            }
        },
        "get_faked": {
            "name": "get_faked",
            "location": 190,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "module": [
                    "str",
                    "Callable"
                ],
                "obj": [
                    "str",
                    "Callable"
                ],
                "name": [
                    "None",
                    "str",
                    "Callable"
                ],
                "parent": [
                    "None",
                    "str",
                    "bool",
                    "property",
                    "dict"
                ]
            }
        },
        "is_class_instance": {
            "name": "is_class_instance",
            "location": 196,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "memoize_faked.memoizer": {
            "name": "memoizer",
            "location": 155,
            "return": [
                "None",
                "float",
                "Dict[str, int]",
                "Dict[str, Any]",
                "Iterable[int]"
            ],
            "arguments": {}
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/evaluate/compiled/mixed.py": {
        "parse": {
            "name": "parse",
            "location": 88,
            "return": [
                "FastParser",
                "str",
                "bool"
            ],
            "arguments": {
                "grammar": [
                    "str",
                    "AnyStr"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "_load_module": {
            "name": "_load_module",
            "location": 95,
            "return": [
                "Optional[str]",
                "bool",
                "list"
            ],
            "arguments": {
                "evaluator": [
                    "str",
                    "List[str]"
                ],
                "path": [
                    "str",
                    "Iterable[str]"
                ],
                "python_object": [
                    "str",
                    "List[Union[Any, Any]]"
                ]
            }
        },
        "find_syntax_node_name": {
            "name": "find_syntax_node_name",
            "location": 103,
            "return": [
                "None",
                "str",
                "Optional[str]",
                "Optional[Sequence[str]]"
            ],
            "arguments": {
                "evaluator": [
                    "str",
                    "Optional[str]"
                ],
                "python_object": [
                    "str"
                ]
            }
        },
        "create": {
            "name": "create",
            "location": 153,
            "return": [
                "MixedObject",
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "evaluator": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "Mapping[str, Any]"
                ],
                "obj": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "Mapping[str, Any]"
                ]
            }
        },
        "MixedObject.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "evaluator": [
                    "str",
                    "int",
                    "bool",
                    "Optional[Mapping]"
                ],
                "obj": [
                    "str",
                    "int",
                    "bool",
                    "Optional[Mapping]"
                ],
                "node_name": [
                    "str",
                    "bool",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "MixedObject.names_dict": {
            "name": "names_dict",
            "location": 38,
            "return": [
                "LazyMixedNamesDict",
                "List[str]",
                "str",
                "bool",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MixedObject.names_dicts": {
            "name": "names_dicts",
            "location": 41,
            "return": [
                "list",
                "str",
                "bool",
                "type"
            ],
            "arguments": {
                "self": [],
                "search_global": [
                    "bool",
                    "str",
                    "Pattern",
                    "list"
                ]
            }
        },
        "MixedObject.api_type": {
            "name": "api_type",
            "location": 46,
            "return": [
                "typing.Text",
                "T",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MixedObject.__repr__": {
            "name": "__repr__",
            "location": 55,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MixedObject.__getattr__": {
            "name": "__getattr__",
            "location": 58,
            "return": [
                "bool",
                "bytes",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "MixedName.parent": {
            "name": "parent",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Optional[Any]",
                    "str",
                    "List[int]",
                    "nevergrad.common.Any",
                    "list"
                ]
            }
        },
        "MixedName.start_pos": {
            "name": "start_pos",
            "location": 76,
            "return": [
                "tuple[int]",
                "str",
                "type",
                "List[str]",
                "Sequence[str]",
                "bool",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/evaluate/compiled/__init__.py": {
        "dotted_from_fs_path": {
            "name": "dotted_from_fs_path",
            "location": 317,
            "return": [
                "str"
            ],
            "arguments": {
                "fs_path": [
                    "str"
                ],
                "sys_path": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "load_module": {
            "name": "load_module",
            "location": 352,
            "return": [
                "None",
                "Optional[str]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "evaluator": [
                    "str"
                ],
                "path": [
                    "None",
                    "Optional[str]",
                    "str"
                ],
                "name": [
                    "None",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_parse_function_doc": {
            "name": "_parse_function_doc",
            "location": 396,
            "return": [
                "tuple[typing.Text]",
                "str",
                "Exception"
            ],
            "arguments": {
                "doc": [
                    "str",
                    "int",
                    "Match"
                ]
            }
        },
        "_create_from_name": {
            "name": "_create_from_name",
            "location": 456,
            "return": [
                "Optional[str]",
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "evaluator": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "module": [
                    "str",
                    "Optional[str]",
                    "Optional[Any]",
                    "List[str]"
                ],
                "parent": [
                    "Callable",
                    "Optional[str]",
                    "Sequence[str]",
                    "str"
                ],
                "name": [
                    "str",
                    "Sequence[str]",
                    "Callable",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "builtin_from_name": {
            "name": "builtin_from_name",
            "location": 472,
            "return": [
                "str",
                "Tuple[int, int]",
                "Optional[Any]",
                "int"
            ],
            "arguments": {
                "evaluator": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "string": [
                    "str",
                    "int"
                ]
            }
        },
        "_a_generator": {
            "name": "_a_generator",
            "location": 477,
            "return": [
                "",
                "typing.Generator[int]",
                "typing.Generator"
            ],
            "arguments": {
                "foo": [
                    "Dict[str, int]",
                    "bool"
                ]
            }
        },
        "get_special_object": {
            "name": "get_special_object",
            "location": 492,
            "return": [
                "str",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "evaluator": [
                    "bool",
                    "str"
                ],
                "identifier": [
                    "str"
                ]
            }
        },
        "compiled_objects_cache": {
            "name": "compiled_objects_cache",
            "location": 497,
            "return": [
                "Mapping",
                "int"
            ],
            "arguments": {
                "attribute_name": [
                    "str"
                ]
            }
        },
        "create": {
            "name": "create",
            "location": 526,
            "return": [
                "CompiledObject",
                "int",
                "bool",
                "dict",
                "float"
            ],
            "arguments": {
                "evaluator": [
                    "Exception",
                    "dict"
                ],
                "obj": [
                    "bytes",
                    "int",
                    "str",
                    "Callable[[], 'Actor']"
                ],
                "parent": [
                    "None",
                    "str",
                    "Optional[int]",
                    "TextIO",
                    "Optional[str]"
                ],
                "module": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "CheckAttribute.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Dict[str, str]",
                    "Optional[str]",
                    "Type"
                ]
            }
        },
        "CheckAttribute.__get__": {
            "name": "__get__",
            "location": 32,
            "return": [
                "List[Tuple[str, str]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "dict",
                    "Callable"
                ],
                "owner": [
                    "Type['Signature']",
                    "Type[Any]"
                ]
            }
        },
        "CompiledObject.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "evaluator": [
                    "bool",
                    "List[str]",
                    "int",
                    "str"
                ],
                "obj": [
                    "bool",
                    "List[str]",
                    "int",
                    "str"
                ],
                "parent": [
                    "None",
                    "str",
                    "bool",
                    "Tuple[type]",
                    "List[str]",
                    "Type[T]",
                    "dict"
                ]
            }
        },
        "CompiledObject.py__call__": {
            "name": "py__call__",
            "location": 50,
            "return": [
                "mypy.types.Instance",
                "set[Instance]",
                "set"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "mypy.types.Instance",
                    "str"
                ]
            }
        },
        "CompiledObject.py__class__": {
            "name": "py__class__",
            "location": 58,
            "return": [
                "Callable[[str], mypy.types.Instance]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompiledObject.py__mro__": {
            "name": "py__mro__",
            "location": 62,
            "return": [
                "tuple",
                "int",
                "str",
                "Optional[dict]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompiledObject.py__bases__": {
            "name": "py__bases__",
            "location": 66,
            "return": [
                "tuple",
                "str",
                "list",
                "int",
                "Optional[dict]",
                "List[Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompiledObject.py__bool__": {
            "name": "py__bool__",
            "location": 69,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompiledObject.py__file__": {
            "name": "py__file__",
            "location": 72,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompiledObject.is_class": {
            "name": "is_class",
            "location": 75,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompiledObject.doc": {
            "name": "doc",
            "location": 79,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompiledObject.params": {
            "name": "params",
            "location": 83,
            "return": [
                "list[Param]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompiledObject.__repr__": {
            "name": "__repr__",
            "location": 96,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompiledObject._parse_function_doc": {
            "name": "_parse_function_doc",
            "location": 100,
            "return": [
                "tuple[typing.Text]",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompiledObject.api_type": {
            "name": "api_type",
            "location": 106,
            "return": [
                "typing.Text",
                "Type",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompiledObject.type": {
            "name": "type",
            "location": 119,
            "return": [
                "typing.Text",
                "str",
                "tuple",
                "IO[Any]",
                "Mapping"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompiledObject._cls": {
            "name": "_cls",
            "location": 131,
            "return": [
                "CompiledObject",
                "int",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompiledObject._get_class": {
            "name": "_get_class",
            "location": 139,
            "return": [
                "Type",
                "bool",
                "int",
                "Optional[List[str]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompiledObject.names_dict": {
            "name": "names_dict",
            "location": 152,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompiledObject.names_dicts": {
            "name": "names_dicts",
            "location": 156,
            "return": [
                "int",
                "Dict[str, Any]",
                "Optional[Match]",
                "dict",
                "List[str]",
                "Dict[str, Union[str, Any]]",
                "Dict[str, Iterable[Any]]",
                "Dict[str, List[Callable]]"
            ],
            "arguments": {
                "self": [],
                "search_global": [
                    "Callable",
                    "int",
                    "bool",
                    "str"
                ],
                "is_instance": [
                    "bool",
                    "Dict[str, str]",
                    "Union[str]",
                    "int",
                    "Optional[str]",
                    "Tuple[str, str]",
                    "Iterable[int]",
                    "dict",
                    "Tuple[int, int]"
                ]
            }
        },
        "CompiledObject._names_dict_ensure_one_dict": {
            "name": "_names_dict_ensure_one_dict",
            "location": 160,
            "return": [
                "list[LazyNamesDict]",
                "str",
                "bool",
                "Tuple[int, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "is_instance": [
                    "Dict[str, Any]"
                ]
            }
        },
        "CompiledObject.get_subscope_by_name": {
            "name": "get_subscope_by_name",
            "location": 167,
            "return": [
                "mypy.types.Instance",
                "Type",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "CompiledObject.py__getitem__": {
            "name": "py__getitem__",
            "location": 174,
            "return": [
                "set",
                "List[str]",
                "str",
                "bool",
                "Dict[str, Set[str]]",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "CompiledObject.py__iter__": {
            "name": "py__iter__",
            "location": 182,
            "return": [
                "int",
                "None",
                "str",
                "typing.Generator[set]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompiledObject.name": {
            "name": "name",
            "location": 191,
            "return": [
                "FakeName",
                "Type[BaseException]",
                "BaseException",
                "Exception",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompiledObject._execute_function": {
            "name": "_execute_function",
            "location": 198,
            "return": [
                "Iterator[Tuple[str, str]]",
                "None",
                "int",
                "typing.Generator"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "int",
                    "bool",
                    "Iterator"
                ]
            }
        },
        "CompiledObject.subscopes": {
            "name": "subscopes",
            "location": 218,
            "return": [
                "list",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompiledObject.is_scope": {
            "name": "is_scope",
            "location": 234,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompiledObject.get_self_attributes": {
            "name": "get_self_attributes",
            "location": 237,
            "return": [
                "list",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompiledObject.get_imports": {
            "name": "get_imports",
            "location": 240,
            "return": [
                "list",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompiledName.__init__": {
            "name": "__init__",
            "location": 245,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "evaluator": [
                    "int",
                    "bool",
                    "str",
                    "Optional[str]",
                    "Callable",
                    "Sequence"
                ],
                "compiled_obj": [
                    "int",
                    "bool",
                    "str",
                    "Optional[str]",
                    "Callable",
                    "Sequence"
                ],
                "name": [
                    "str",
                    "float"
                ]
            }
        },
        "CompiledName.__repr__": {
            "name": "__repr__",
            "location": 251,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompiledName.is_definition": {
            "name": "is_definition",
            "location": 258,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompiledName.parent": {
            "name": "parent",
            "location": 268,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Optional[Any]",
                    "str",
                    "List[int]",
                    "list"
                ]
            }
        },
        "LazyNamesDict.__init__": {
            "name": "__init__",
            "location": 278,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "evaluator": [
                    "bool",
                    "List[str]",
                    "Optional[float]",
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "compiled_obj": [
                    "bool",
                    "List[str]",
                    "Optional[float]",
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "is_instance": [
                    "bool",
                    "List[str]",
                    "Optional[float]",
                    "str",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "LazyNamesDict.__iter__": {
            "name": "__iter__",
            "location": 283,
            "return": [
                "typing.Generator",
                "Set[str]",
                "Dict[str, str]",
                "Dict[str, List[Callable]]",
                "dict",
                "List[Mapping[str, str]]",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LazyNamesDict.__getitem__": {
            "name": "__getitem__",
            "location": 287,
            "return": [
                "bool",
                "list[FakeName]",
                "Dict[str, Any]",
                "list"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "LazyNamesDict.values": {
            "name": "values",
            "location": 299,
            "return": [
                "list",
                "str",
                "int",
                "Type[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "compiled_objects_cache.decorator": {
            "name": "decorator",
            "location": 498,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "_parse_function_doc.change_options": {
            "name": "change_options",
            "location": 425,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "m": [
                    "Type",
                    "int",
                    "Dict[str, Dict[str, int]]",
                    "bool"
                ]
            }
        },
        "compiled_objects_cache.decorator.wrapper": {
            "name": "wrapper",
            "location": 504,
            "return": [
                "str",
                "int",
                "bytes",
                "list"
            ],
            "arguments": {
                "evaluator": [
                    "str",
                    "bool",
                    "Optional[bytes]"
                ],
                "obj": [
                    "str"
                ],
                "parent": [
                    "None",
                    "str",
                    "Callable"
                ],
                "module": [
                    "None",
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/parser/fast.py": {
        "FastModule.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "module_path": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "FastModule.reset_caches": {
            "name": "reset_caches",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FastModule.used_names": {
            "name": "used_names",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]",
                    "list",
                    "bool"
                ]
            }
        },
        "FastModule.global_names": {
            "name": "global_names",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "FastModule.error_statements": {
            "name": "error_statements",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "float",
                    "bytes",
                    "str",
                    "List[dict]"
                ]
            }
        },
        "FastModule.__repr__": {
            "name": "__repr__",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergedNamesDict.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dicts": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "MergedNamesDict.__iter__": {
            "name": "__iter__",
            "location": 75,
            "return": [
                "List[int]",
                "list",
                "set",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergedNamesDict.__getitem__": {
            "name": "__getitem__",
            "location": 78,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Dict[int, List[Any]]"
                ]
            }
        },
        "MergedNamesDict.items": {
            "name": "items",
            "location": 81,
            "return": [
                "int",
                "List[int]",
                "float",
                "List[float]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergedNamesDict.values": {
            "name": "values",
            "location": 92,
            "return": [
                "Union[str, int, float]",
                "float",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "CachedFastParser.__call__": {
            "name": "__call__",
            "location": 101,
            "return": [
                "Type",
                "BaseException"
            ],
            "arguments": {
                "self": [],
                "grammar": [
                    "bool"
                ],
                "source": [],
                "module_path": [
                    "settings.Settings"
                ]
            }
        },
        "ParserNode.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fast_module": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "parser": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "source": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Dict[str, float]",
                    "Type['AbstractIntegrationConversation']"
                ]
            }
        },
        "ParserNode.is_root_node": {
            "name": "is_root_node",
            "location": 143,
            "return": [
                "bool",
                "Optional[Tuple[Any, Any]]",
                "Optional[str]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserNode._rewrite_last_newline": {
            "name": "_rewrite_last_newline",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserNode.__repr__": {
            "name": "__repr__",
            "location": 161,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserNode.end_pos": {
            "name": "end_pos",
            "location": 170,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserNode.reset_node": {
            "name": "reset_node",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserNode.close": {
            "name": "close",
            "location": 188,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserNode._indent": {
            "name": "_indent",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserNode.add_node": {
            "name": "add_node",
            "location": 211,
            "return": [
                "bool",
                "Union[eth.rlp.transactions.BaseTransaction, eth.utils.spoof.SpoofTransaction]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ],
                "start_line": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "indent": [
                    "bool",
                    "str"
                ]
            }
        },
        "ParserNode.all_sub_nodes": {
            "name": "all_sub_nodes",
            "location": 242,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserNode.remove_last_newline": {
            "name": "remove_last_newline",
            "location": 252,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FastParser.__init__": {
            "name": "__init__",
            "location": 263,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "grammar": [
                    "Sequence[str]",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "source": [
                    "Sequence[str]",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "module_path": [
                    "str"
                ]
            }
        },
        "FastParser._reset_caches": {
            "name": "_reset_caches",
            "location": 270,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FastParser.get_parsed_node": {
            "name": "get_parsed_node",
            "location": 274,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastParser.update": {
            "name": "update",
            "location": 277,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ]
            }
        },
        "FastParser._split_parts": {
            "name": "_split_parts",
            "location": 293,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "FastParser._parse": {
            "name": "_parse",
            "location": 391,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "source": [
                    "List[str]",
                    "str",
                    "Literal",
                    "Optional[str]",
                    "Union[str, bytes]"
                ]
            }
        },
        "FastParser._parse_part": {
            "name": "_parse_part",
            "location": 457,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Optional[str]",
                    "str",
                    "Dict[str, str]",
                    "List[str]",
                    "Dict[str, Dict[str, str]]",
                    "Optional[List[str]]",
                    "type"
                ],
                "parser_code": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Dict[str, str]"
                ],
                "code_part_end_line": [
                    "Optional[List[str]]",
                    "Optional[Type[Any]]",
                    "int",
                    "Optional[float]"
                ],
                "nodes": [
                    "Optional[Union[int, slice]]",
                    "Optional[Collection[int]]",
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "FastTokenizer.__init__": {
            "name": "__init__",
            "location": 489,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Optional[Mapping[str, Any]]"
                ]
            }
        },
        "FastTokenizer.__iter__": {
            "name": "__iter__",
            "location": 505,
            "return": [
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastTokenizer.next": {
            "name": "next",
            "location": 508,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastTokenizer.__next__": {
            "name": "__next__",
            "location": 512,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastTokenizer._close": {
            "name": "_close",
            "location": 587,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastTokenizer._finish_dedents": {
            "name": "_finish_dedents",
            "location": 598,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastTokenizer._get_prefix": {
            "name": "_get_prefix",
            "location": 608,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastParser._split_parts.gen_part": {
            "name": "gen_part",
            "location": 299,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "FastParser._split_parts.just_newlines": {
            "name": "just_newlines",
            "location": 305,
            "return": [
                "bool"
            ],
            "arguments": {
                "current_lines": [
                    "str",
                    "bool",
                    "List[str]",
                    "Union[List[str], str]",
                    "list",
                    "Iterable[str]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/parser/token.py": {},
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/parser/tokenize.py": {
        "group": {
            "name": "group",
            "location": 39,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "maybe": {
            "name": "maybe",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "_compile": {
            "name": "_compile",
            "location": 101,
            "return": [
                "T",
                "float"
            ],
            "arguments": {
                "expr": []
            }
        },
        "source_tokens": {
            "name": "source_tokens",
            "location": 170,
            "return": [
                "str",
                "dict",
                "int",
                "Callable",
                "Dict[str, Any]"
            ],
            "arguments": {
                "source": [
                    "str",
                    "Literal",
                    "Union[str, bytes]"
                ],
                "use_exact_op_types": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "generate_tokens": {
            "name": "generate_tokens",
            "location": 177,
            "return": [
                "",
                "typing.Generator[TokenInfo]"
            ],
            "arguments": {
                "readline": [
                    "Tuple[str, bool]",
                    "str",
                    "bool",
                    "List[str]",
                    "int"
                ],
                "use_exact_op_types": [
                    "bool",
                    "List[str]",
                    "Optional[bool]",
                    "Optional[Callable]",
                    "Tuple[float, float]",
                    "str"
                ]
            }
        },
        "TokenInfo.__repr__": {
            "name": "__repr__",
            "location": 157,
            "return": [
                "typing.Text",
                "Set[str]",
                "Dict[str, Any]",
                "Dict[str, List[Callable]]",
                "str",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenInfo.exact_type": {
            "name": "exact_type",
            "location": 163,
            "return": [
                "bool",
                "str",
                "List[str]",
                "Tuple[Type]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/parser/tree.py": {
        "is_node": {
            "name": "is_node",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": [
                    "Optional[List[int]]",
                    "Type",
                    "Hashable",
                    "str",
                    "int"
                ]
            }
        },
        "_create_params": {
            "name": "_create_params",
            "location": 951,
            "return": [
                "recidiviz.utils.regions.Region",
                "str",
                "Callable"
            ],
            "arguments": {
                "parent": [
                    "List[str]"
                ],
                "argslist_list": [
                    "str",
                    "Callable",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "_defined_names": {
            "name": "_defined_names",
            "location": 1499,
            "return": [
                "str"
            ],
            "arguments": {
                "current": []
            }
        },
        "PositionModifier.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DocstringMixin.raw_doc": {
            "name": "raw_doc",
            "location": 70,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.isinstance": {
            "name": "isinstance",
            "location": 115,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.get_parent_until": {
            "name": "get_parent_until",
            "location": 119,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "classes": [
                    "int",
                    "Callable",
                    "bool",
                    "Optional[Union[str, Any]]",
                    "type"
                ],
                "reverse": [
                    "str",
                    "Type",
                    "Callable"
                ],
                "include_current": [
                    "str",
                    "Tuple[Type]"
                ]
            }
        },
        "Base.get_parent_scope": {
            "name": "get_parent_scope",
            "location": 136,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "include_flows": [
                    "str",
                    "Callable",
                    "Type",
                    "List[str]",
                    "List[Dict]"
                ]
            }
        },
        "Base.get_definition": {
            "name": "get_definition",
            "location": 149,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.assignment_indexes": {
            "name": "assignment_indexes",
            "location": 167,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.is_scope": {
            "name": "is_scope",
            "location": 196,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.nodes_to_execute": {
            "name": "nodes_to_execute",
            "location": 201,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "last_added": [
                    "int",
                    "Type[Exception]",
                    "Iterable[T]",
                    "Optional[Any]",
                    "str",
                    "float"
                ]
            }
        },
        "Base.get_next_sibling": {
            "name": "get_next_sibling",
            "location": 204,
            "return": [
                "str",
                "Optional[str]",
                "Optional[cmk.utils.diagnostics.DiagnosticsOptionalParameters]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.get_previous_sibling": {
            "name": "get_previous_sibling",
            "location": 217,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.get_previous_leaf": {
            "name": "get_previous_leaf",
            "location": 230,
            "return": [
                "Tuple[str]",
                "Sequence[str]",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.get_next_leaf": {
            "name": "get_next_leaf",
            "location": 253,
            "return": [
                "Tuple[str]",
                "Sequence[str]",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Leaf.__init__": {
            "name": "__init__",
            "location": 280,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "position_modifier": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ],
                "value": [
                    "str",
                    "float",
                    "int",
                    "Optional[Tuple[int, int]]"
                ],
                "start_pos": [
                    "int",
                    "str",
                    "Dict[str, str]"
                ],
                "prefix": [
                    "dict",
                    "str",
                    "Callable[..., None]",
                    "int"
                ]
            }
        },
        "Leaf.start_pos": {
            "name": "start_pos",
            "location": 292,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "float",
                    "str",
                    "Callable",
                    "Dict[str, Any]",
                    "Optional['ModelOrDc']"
                ]
            }
        },
        "Leaf.get_start_pos_of_prefix": {
            "name": "get_start_pos_of_prefix",
            "location": 295,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Leaf.end_pos": {
            "name": "end_pos",
            "location": 306,
            "return": [
                "float",
                "Union[int, float]",
                "str",
                "Optional[List[int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Leaf.move": {
            "name": "move",
            "location": 310,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "line_offset": [
                    "int",
                    "str"
                ],
                "column_offset": [
                    "int",
                    "str"
                ]
            }
        },
        "Leaf.first_leaf": {
            "name": "first_leaf",
            "location": 314,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Leaf.get_code": {
            "name": "get_code",
            "location": 317,
            "return": [
                "int",
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "normalized": [
                    "bool",
                    "Sequence[int]",
                    "str"
                ],
                "include_prefix": [
                    "bool",
                    "Sequence[int]",
                    "str"
                ]
            }
        },
        "Leaf.nodes_to_execute": {
            "name": "nodes_to_execute",
            "location": 325,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "last_added": [
                    "int",
                    "Type[Exception]",
                    "Iterable[T]",
                    "Optional[Any]",
                    "str",
                    "float"
                ]
            }
        },
        "Leaf.__repr__": {
            "name": "__repr__",
            "location": 329,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeafWithNewLines.end_pos": {
            "name": "end_pos",
            "location": 337,
            "return": [
                "float",
                "Optional[str]",
                "List[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeafWithNewLines.__repr__": {
            "name": "__repr__",
            "location": 353,
            "return": [
                "str",
                "Callable",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Newline.__repr__": {
            "name": "__repr__",
            "location": 368,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.__str__": {
            "name": "__str__",
            "location": 380,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.__unicode__": {
            "name": "__unicode__",
            "location": 383,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.__repr__": {
            "name": "__repr__",
            "location": 386,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.is_definition": {
            "name": "is_definition",
            "location": 390,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.nodes_to_execute": {
            "name": "nodes_to_execute",
            "location": 407,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "last_added": [
                    "bool",
                    "float",
                    "List[cmk.gui.plugins.visuals.utils.Filter]",
                    "str",
                    "List[int]"
                ]
            }
        },
        "Literal.eval": {
            "name": "eval",
            "location": 415,
            "return": [
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Operator.__str__": {
            "name": "__str__",
            "location": 443,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Operator.__eq__": {
            "name": "__eq__",
            "location": 446,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[Any]",
                    "AbstractSet[Any]",
                    "List[T]"
                ]
            }
        },
        "Operator.__ne__": {
            "name": "__ne__",
            "location": 456,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "T",
                    "Tuple[int, int]"
                ]
            }
        },
        "Operator.__hash__": {
            "name": "__hash__",
            "location": 460,
            "return": [
                "int",
                "Optional[int]",
                "bool",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Keyword.__eq__": {
            "name": "__eq__",
            "location": 468,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[Any]",
                    "AbstractSet[Any]",
                    "List[T]"
                ]
            }
        },
        "Keyword.__ne__": {
            "name": "__ne__",
            "location": 477,
            "return": [
                "str",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]",
                    "raiden.utils.Any"
                ]
            }
        },
        "Keyword.__hash__": {
            "name": "__hash__",
            "location": 481,
            "return": [
                "int",
                "Optional[int]",
                "bool",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseNode.__init__": {
            "name": "__init__",
            "location": 493,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "children": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "BaseNode.move": {
            "name": "move",
            "location": 504,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "line_offset": [
                    "Tuple[int, int]",
                    "int",
                    "List[int]",
                    "str",
                    "utils.types.Vec3D",
                    "bool",
                    "float"
                ],
                "column_offset": [
                    "Tuple[int, int]",
                    "int",
                    "List[int]",
                    "str",
                    "utils.types.Vec3D",
                    "bool",
                    "float"
                ]
            }
        },
        "BaseNode.start_pos": {
            "name": "start_pos",
            "location": 512,
            "return": [
                "float",
                "Tuple[Tuple[int, Any]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseNode.get_start_pos_of_prefix": {
            "name": "get_start_pos_of_prefix",
            "location": 515,
            "return": [
                "bool",
                "Callable",
                "Optional[BaseException]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseNode.end_pos": {
            "name": "end_pos",
            "location": 519,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseNode.get_code": {
            "name": "get_code",
            "location": 522,
            "return": [
                "Dict[str, str]",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "normalized": [
                    "int"
                ],
                "include_prefix": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "BaseNode.name_for_position": {
            "name": "name_for_position",
            "location": 531,
            "return": [
                "str",
                "bool",
                "Optional[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "str",
                    "int",
                    "List[Dict]"
                ]
            }
        },
        "BaseNode.get_leaf_for_position": {
            "name": "get_leaf_for_position",
            "location": 542,
            "return": [
                "Optional[str]",
                "Union[int, float]",
                "List[str]",
                "tuple",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "int"
                ],
                "include_prefixes": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "BaseNode.get_statement_for_position": {
            "name": "get_statement_for_position",
            "location": 562,
            "return": [
                "bool",
                "Tuple[bool, str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "str",
                    "int"
                ]
            }
        },
        "BaseNode.first_leaf": {
            "name": "first_leaf",
            "location": 575,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseNode.get_next_leaf": {
            "name": "get_next_leaf",
            "location": 581,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseNode.last_leaf": {
            "name": "last_leaf",
            "location": 593,
            "return": [
                "List[int]",
                "Dict[str, int]",
                "Tuple[Tuple[int, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseNode.get_following_comment_same_line": {
            "name": "get_following_comment_same_line",
            "location": 599,
            "return": [
                "bool",
                "Optional[bool]",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseNode.__repr__": {
            "name": "__repr__",
            "location": 627,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 646,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type": [
                    "str",
                    "int"
                ],
                "children": [
                    "str",
                    "dict",
                    "Sequence[str]",
                    "bool",
                    "Optional[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "Node.nodes_to_execute": {
            "name": "nodes_to_execute",
            "location": 658,
            "return": [
                "Match",
                "Optional[int]",
                "Optional[str]",
                "Optional[List[str]]",
                "Tuple[int, Dict[str, Any]]",
                "\"Parameter\"",
                "int"
            ],
            "arguments": {
                "self": [],
                "last_added": [
                    "int",
                    "bool",
                    "Hashable"
                ]
            }
        },
        "Node.__repr__": {
            "name": "__repr__",
            "location": 671,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ErrorNode.nodes_to_execute": {
            "name": "nodes_to_execute",
            "location": 682,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "last_added": [
                    "int",
                    "Type[Exception]",
                    "Iterable[T]",
                    "Optional[Any]",
                    "str",
                    "float"
                ]
            }
        },
        "ErrorLeaf.__init__": {
            "name": "__init__",
            "location": 693,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "position_modifier": [
                    "Optional[str]",
                    "str",
                    "Callable[[dict], None]",
                    "List[str]"
                ],
                "original_type": [
                    "str",
                    "bool",
                    "Type[BaseException]",
                    "Callable",
                    "Callable[[], object]"
                ],
                "value": [
                    "Optional[str]",
                    "str",
                    "Callable[[dict], None]",
                    "List[str]"
                ],
                "start_pos": [
                    "Optional[str]",
                    "str",
                    "Callable[[dict], None]",
                    "List[str]"
                ],
                "prefix": [
                    "Optional[str]",
                    "str",
                    "Callable[[dict], None]",
                    "List[str]"
                ]
            }
        },
        "ErrorLeaf.__repr__": {
            "name": "__repr__",
            "location": 697,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsScopeMeta.__instancecheck__": {
            "name": "__instancecheck__",
            "location": 703,
            "return": [
                "bool",
                "str",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[\"Cell\"]"
                ]
            }
        },
        "Scope.__init__": {
            "name": "__init__",
            "location": 724,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "children": [
                    "str",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "Scope.returns": {
            "name": "returns",
            "location": 728,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.subscopes": {
            "name": "subscopes",
            "location": 734,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.flows": {
            "name": "flows",
            "location": 738,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.imports": {
            "name": "imports",
            "location": 742,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope._search_in_scope": {
            "name": "_search_in_scope",
            "location": 746,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "IO",
                    "dict",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "Scope.statements": {
            "name": "statements",
            "location": 760,
            "return": [
                "Tuple[float, float, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.is_scope": {
            "name": "is_scope",
            "location": 763,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.__repr__": {
            "name": "__repr__",
            "location": 766,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.walk": {
            "name": "walk",
            "location": 778,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Module.__init__": {
            "name": "__init__",
            "location": 800,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "children": [
                    "Union[str, List[str], Tuple[str, ...]]",
                    "bool",
                    "str"
                ]
            }
        },
        "Module.name": {
            "name": "name",
            "location": 814,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Module.has_explicit_absolute_import": {
            "name": "has_explicit_absolute_import",
            "location": 830,
            "return": [
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Module.nodes_to_execute": {
            "name": "nodes_to_execute",
            "location": 846,
            "return": [
                "Match",
                "Optional[int]",
                "Optional[str]",
                "Optional[List[str]]",
                "Tuple[int, Dict[str, Any]]",
                "\"Parameter\"",
                "int"
            ],
            "arguments": {
                "self": [],
                "last_added": [
                    "int",
                    "Type[Exception]",
                    "Iterable[T]",
                    "Optional[Any]",
                    "str",
                    "float"
                ]
            }
        },
        "Decorator.nodes_to_execute": {
            "name": "nodes_to_execute",
            "location": 858,
            "return": [
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "last_added": [
                    "int",
                    "Type[Exception]",
                    "Iterable[T]",
                    "Optional[Any]",
                    "str",
                    "float"
                ]
            }
        },
        "ClassOrFunc.name": {
            "name": "name",
            "location": 870,
            "return": [
                "Dict[str, Any]",
                "str",
                "int",
                "Iterator",
                "Container[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassOrFunc.get_decorators": {
            "name": "get_decorators",
            "location": 873,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Class.__init__": {
            "name": "__init__",
            "location": 898,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "children": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "Class.get_super_arglist": {
            "name": "get_super_arglist",
            "location": 901,
            "return": [
                "Optional[int]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "bool",
                "Optional[str]",
                "dict",
                "Optional[Any]",
                "Optional[List[Any]]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Class.doc": {
            "name": "doc",
            "location": 911,
            "return": [
                "str",
                "List[str]",
                "Callable",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Class.nodes_to_execute": {
            "name": "nodes_to_execute",
            "location": 922,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "last_added": [
                    "int",
                    "Type[Exception]",
                    "Iterable[T]",
                    "Optional[Any]",
                    "str",
                    "float"
                ]
            }
        },
        "_create_params.check_python2_nested_param": {
            "name": "check_python2_nested_param",
            "location": 962,
            "return": [
                "str",
                "Optional[List[str]]",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "node": []
            }
        },
        "Function.__init__": {
            "name": "__init__",
            "location": 1017,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "children": [
                    "int",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "Function.params": {
            "name": "params",
            "location": 1024,
            "return": [
                "int",
                "list",
                "List[Dict]",
                "List[Tuple[int, float]]",
                "List[dict]",
                "List[str]",
                "Iterator[str]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.name": {
            "name": "name",
            "location": 1028,
            "return": [
                "Dict[str, Any]",
                "str",
                "int",
                "Iterator",
                "Container[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.yields": {
            "name": "yields",
            "location": 1032,
            "return": [
                "str",
                "Tuple[float, float, float]",
                "AbstractSet[T]",
                "Set[VT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.is_generator": {
            "name": "is_generator",
            "location": 1036,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.annotation": {
            "name": "annotation",
            "location": 1039,
            "return": [
                "type",
                "Optional[BaseException]",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.get_call_signature": {
            "name": "get_call_signature",
            "location": 1048,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "width": [
                    "str",
                    "type",
                    "cmk.utils.type_defs.SectionName"
                ],
                "func_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "Function._get_paramlist_code": {
            "name": "_get_paramlist_code",
            "location": 1063,
            "return": [
                "str",
                "dict",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.doc": {
            "name": "doc",
            "location": 1067,
            "return": [
                "int",
                "cmk.utils.type_defs.UserId",
                "dict",
                "Dict[str, Any]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.nodes_to_execute": {
            "name": "nodes_to_execute",
            "location": 1072,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "last_added": [
                    "int",
                    "Type[Exception]",
                    "Iterable[T]",
                    "Optional[Any]",
                    "str",
                    "float"
                ]
            }
        },
        "Lambda.__init__": {
            "name": "__init__",
            "location": 1101,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "children": [
                    "bool"
                ]
            }
        },
        "Lambda.name": {
            "name": "name",
            "location": 1109,
            "return": [
                "Set[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lambda._get_paramlist_code": {
            "name": "_get_paramlist_code",
            "location": 1113,
            "return": [
                "int",
                "Optional[List[Any]]",
                "Dict[str, Any]",
                "bool",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lambda.params": {
            "name": "params",
            "location": 1117,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lambda.is_generator": {
            "name": "is_generator",
            "location": 1120,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lambda.annotation": {
            "name": "annotation",
            "location": 1123,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lambda.yields": {
            "name": "yields",
            "location": 1128,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lambda.nodes_to_execute": {
            "name": "nodes_to_execute",
            "location": 1131,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "last_added": [
                    "int",
                    "Type[Exception]",
                    "Iterable[T]",
                    "Optional[Any]",
                    "str",
                    "float"
                ]
            }
        },
        "Lambda.__repr__": {
            "name": "__repr__",
            "location": 1139,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Flow.nodes_to_execute": {
            "name": "nodes_to_execute",
            "location": 1146,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "last_added": [
                    "int",
                    "Type[Exception]",
                    "Iterable[T]",
                    "Optional[Any]",
                    "str",
                    "float"
                ]
            }
        },
        "IfStmt.check_nodes": {
            "name": "check_nodes",
            "location": 1156,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "IfStmt.node_in_which_check_node": {
            "name": "node_in_which_check_node",
            "location": 1169,
            "return": [
                "Optional[int]",
                "Optional[float]",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "type",
                    "ClassVar",
                    "Dict[Tuple[int, int], str]",
                    "int"
                ]
            }
        },
        "IfStmt.node_after_else": {
            "name": "node_after_else",
            "location": 1185,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int",
                    "Callable[[T], T]",
                    "Iterable[T]",
                    "float",
                    "bytes",
                    "Callable[[None], bool]"
                ]
            }
        },
        "ForStmt.get_input_node": {
            "name": "get_input_node",
            "location": 1206,
            "return": [
                "List[str]",
                "int",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForStmt.defines_one_name": {
            "name": "defines_one_name",
            "location": 1212,
            "return": [
                "BaseException",
                "Exception",
                "Type[BaseException]",
                "type",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TryStmt.except_clauses": {
            "name": "except_clauses",
            "location": 1226,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TryStmt.nodes_to_execute": {
            "name": "nodes_to_execute",
            "location": 1237,
            "return": [
                "Match",
                "Optional[int]",
                "Optional[str]",
                "Optional[List[str]]",
                "Tuple[int, Dict[str, Any]]",
                "\"Parameter\"",
                "int"
            ],
            "arguments": {
                "self": [],
                "last_added": [
                    "int",
                    "Type[Exception]",
                    "Iterable[T]",
                    "Optional[Any]",
                    "str",
                    "float"
                ]
            }
        },
        "WithStmt.get_defined_names": {
            "name": "get_defined_names",
            "location": 1252,
            "return": [
                "str",
                "cmk.utils.type_defs.SectionName"
            ],
            "arguments": {
                "self": []
            }
        },
        "WithStmt.node_from_name": {
            "name": "node_from_name",
            "location": 1260,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "WithStmt.nodes_to_execute": {
            "name": "nodes_to_execute",
            "location": 1267,
            "return": [
                "Match",
                "Optional[int]",
                "Optional[str]",
                "Optional[List[str]]",
                "Tuple[int, Dict[str, Any]]",
                "\"Parameter\"",
                "int"
            ],
            "arguments": {
                "self": [],
                "last_added": [
                    "int",
                    "Type[Exception]",
                    "Iterable[T]",
                    "Optional[Any]",
                    "str",
                    "float"
                ]
            }
        },
        "Import.path_for_name": {
            "name": "path_for_name",
            "location": 1281,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Import.is_nested": {
            "name": "is_nested",
            "location": 1293,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Import.is_star_import": {
            "name": "is_star_import",
            "location": 1296,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Import.nodes_to_execute": {
            "name": "nodes_to_execute",
            "location": 1299,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "last_added": [
                    "int",
                    "Type[Exception]",
                    "Iterable[T]",
                    "Optional[Any]",
                    "str",
                    "float"
                ]
            }
        },
        "ImportFrom.get_defined_names": {
            "name": "get_defined_names",
            "location": 1312,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportFrom.aliases": {
            "name": "aliases",
            "location": 1315,
            "return": [
                "bool",
                "str",
                "int",
                "Optional[str]",
                "List[Dict[str, Any]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportFrom.get_from_names": {
            "name": "get_from_names",
            "location": 1320,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportFrom.level": {
            "name": "level",
            "location": 1332,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportFrom._as_name_tuples": {
            "name": "_as_name_tuples",
            "location": 1342,
            "return": [
                "int",
                "str",
                "Dict[str, Any]",
                "set",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportFrom.star_import_name": {
            "name": "star_import_name",
            "location": 1359,
            "return": [
                "str",
                "List[Tuple[int]]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportFrom.paths": {
            "name": "paths",
            "location": 1365,
            "return": [
                "str",
                "list",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportName.get_defined_names": {
            "name": "get_defined_names",
            "location": 1382,
            "return": [
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportName.level": {
            "name": "level",
            "location": 1386,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportName.paths": {
            "name": "paths",
            "location": 1390,
            "return": [
                "bool",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportName._dotted_as_names": {
            "name": "_dotted_as_names",
            "location": 1393,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportName.is_nested": {
            "name": "is_nested",
            "location": 1413,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportName.aliases": {
            "name": "aliases",
            "location": 1423,
            "return": [
                "bool",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeywordStatement.type": {
            "name": "type",
            "location": 1439,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeywordStatement.keyword": {
            "name": "keyword",
            "location": 1447,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeywordStatement.nodes_to_execute": {
            "name": "nodes_to_execute",
            "location": 1450,
            "return": [
                "Match",
                "Optional[int]",
                "Optional[str]",
                "Optional[List[str]]",
                "Tuple[int, Dict[str, Any]]",
                "\"Parameter\"",
                "int"
            ],
            "arguments": {
                "self": [],
                "last_added": [
                    "int",
                    "Type[Exception]",
                    "Iterable[T]",
                    "Optional[Any]",
                    "str",
                    "float"
                ]
            }
        },
        "AssertStmt.assertion": {
            "name": "assertion",
            "location": 1460,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GlobalStmt.get_defined_names": {
            "name": "get_defined_names",
            "location": 1467,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GlobalStmt.get_global_names": {
            "name": "get_global_names",
            "location": 1470,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GlobalStmt.nodes_to_execute": {
            "name": "nodes_to_execute",
            "location": 1473,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "last_added": [
                    "int",
                    "Type[Exception]",
                    "Iterable[T]",
                    "Optional[Any]",
                    "str",
                    "float"
                ]
            }
        },
        "YieldExpr.type": {
            "name": "type",
            "location": 1489,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "YieldExpr.nodes_to_execute": {
            "name": "nodes_to_execute",
            "location": 1492,
            "return": [
                "str",
                "Union[str, List[str]]",
                "Iterable[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "last_added": [
                    "int",
                    "Type[Exception]",
                    "Iterable[T]",
                    "Optional[Any]",
                    "str",
                    "float"
                ]
            }
        },
        "ExprStmt.get_defined_names": {
            "name": "get_defined_names",
            "location": 1524,
            "return": [
                "List[str]",
                "List[Tuple[str, str, bool]]",
                "List[dict]",
                "List[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExprStmt.get_rhs": {
            "name": "get_rhs",
            "location": 1529,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExprStmt.first_operation": {
            "name": "first_operation",
            "location": 1533,
            "return": [
                "Optional[str]",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExprStmt.nodes_to_execute": {
            "name": "nodes_to_execute",
            "location": 1542,
            "return": [
                "Match",
                "Optional[int]",
                "Optional[str]",
                "Optional[List[str]]",
                "Tuple[int, Dict[str, Any]]",
                "\"Parameter\"",
                "int"
            ],
            "arguments": {
                "self": [],
                "last_added": [
                    "TextIO",
                    "dict",
                    "int"
                ]
            }
        },
        "Param.__init__": {
            "name": "__init__",
            "location": 1559,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "children": [
                    "str",
                    "bool"
                ],
                "parent": [
                    "List[Union[str, \"SqlFile\"]]",
                    "Optional[\"TreeNode\"]",
                    "T",
                    "bool"
                ]
            }
        },
        "Param.stars": {
            "name": "stars",
            "location": 1566,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Param.default": {
            "name": "default",
            "location": 1573,
            "return": [
                "bool",
                "str",
                "Optional[bool]",
                "Optional[Sequence[str]]",
                "Optional[Callable]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Param.annotation": {
            "name": "annotation",
            "location": 1579,
            "return": [
                "Optional[str]",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Param._tfpdef": {
            "name": "_tfpdef",
            "location": 1589,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Param.name": {
            "name": "name",
            "location": 1597,
            "return": [
                "Dict[str, Any]",
                "str",
                "int",
                "Iterator",
                "Container[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Param.position_nr": {
            "name": "position_nr",
            "location": 1604,
            "return": [
                "Optional[int]",
                "Optional[List[Callable]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Param.parent_function": {
            "name": "parent_function",
            "location": 1608,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Param.__repr__": {
            "name": "__repr__",
            "location": 1611,
            "return": [
                "str",
                "bool",
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompFor.get_comp_fors": {
            "name": "get_comp_fors",
            "location": 1620,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CompFor.is_scope": {
            "name": "is_scope",
            "location": 1630,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompFor.names_dict": {
            "name": "names_dict",
            "location": 1634,
            "return": [
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompFor.names_dicts": {
            "name": "names_dicts",
            "location": 1641,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "search_global": [
                    "bool"
                ]
            }
        },
        "CompFor.get_defined_names": {
            "name": "get_defined_names",
            "location": 1644,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompFor.nodes_to_execute": {
            "name": "nodes_to_execute",
            "location": 1647,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "last_added": [
                    "int",
                    "Type[Exception]",
                    "Iterable[T]",
                    "Optional[Any]",
                    "str",
                    "float"
                ]
            }
        },
        "Scope._search_in_scope.scan": {
            "name": "scan",
            "location": 747,
            "return": [
                "str",
                "Iterable[str]",
                "Dict[str, Any]",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "children": [
                    "int",
                    "Tuple[float, float]",
                    "Tuple[int, int, int]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/parser/utils.py": {
        "underscore_memoization": {
            "name": "underscore_memoization",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "load_parser": {
            "name": "load_parser",
            "location": 61,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool"
                ]
            }
        },
        "save_parser": {
            "name": "save_parser",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "path": [
                    "Optional[str]"
                ],
                "parser": [
                    "bool",
                    "type"
                ],
                "pickling": [
                    "bool",
                    "Optional[str]",
                    "Optional[bool]"
                ]
            }
        },
        "underscore_memoization.wrapper": {
            "name": "wrapper",
            "location": 36,
            "return": [
                "str",
                "type",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserCacheItem.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "Optional[dict]",
                    "str",
                    "tuple"
                ],
                "change_time": []
            }
        },
        "ParserPickling.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserPickling.load_parser": {
            "name": "load_parser",
            "location": 116,
            "return": [
                "Optional[str]",
                "Optional[List[Any]]",
                "Optional[Dict[str, Any]]",
                "str",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "original_changed_time": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "dict",
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "ParserPickling.save_parser": {
            "name": "save_parser",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Sequence[str]",
                    "Optional[str]"
                ],
                "parser_cache_item": [
                    "Optional[str]",
                    "Sequence[str]",
                    "Optional[IO[str]]",
                    "bool"
                ]
            }
        },
        "ParserPickling._index": {
            "name": "_index",
            "location": 152,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserPickling._remove_old_modules": {
            "name": "_remove_old_modules",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserPickling._flush_index": {
            "name": "_flush_index",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserPickling.clear_cache": {
            "name": "clear_cache",
            "location": 180,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserPickling._get_hashed_path": {
            "name": "_get_hashed_path",
            "location": 184,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "ParserPickling._get_path": {
            "name": "_get_path",
            "location": 187,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str"
                ]
            }
        },
        "ParserPickling._cache_directory": {
            "name": "_cache_directory",
            "location": 193,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/parser/__init__.py": {
        "load_grammar": {
            "name": "load_grammar",
            "location": 43,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "version": [
                    "bytes",
                    "str",
                    "Optional[str]",
                    "bool",
                    "List[str]",
                    "int"
                ]
            }
        },
        "ParserSyntaxError.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "bool",
                    "float"
                ],
                "position": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Parser.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "grammar": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "bool"
                ],
                "source": [
                    "Optional[str]",
                    "str",
                    "Sequence[Optional[str]]",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "dict"
                ],
                "start_symbol": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "tokenizer": [
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "start_parsing": [
                    "bool",
                    "str",
                    "list"
                ]
            }
        },
        "Parser.parse": {
            "name": "parse",
            "location": 127,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "tokenizer": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Parser.get_parsed_node": {
            "name": "get_parsed_node",
            "location": 152,
            "return": [
                "List[str]",
                "int",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.error_recovery": {
            "name": "error_recovery",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "grammar": [
                    "str",
                    "bool",
                    "list",
                    "Union[str, int]",
                    "float"
                ],
                "stack": [
                    "str",
                    "bool",
                    "list",
                    "Union[str, int]",
                    "float"
                ],
                "arcs": [
                    "str",
                    "bool",
                    "list",
                    "Union[str, int]",
                    "float"
                ],
                "typ": [
                    "str",
                    "bool",
                    "list",
                    "Union[str, int]",
                    "float"
                ],
                "value": [
                    "str",
                    "bool",
                    "list",
                    "Union[str, int]",
                    "float"
                ],
                "start_pos": [
                    "str",
                    "bool",
                    "list",
                    "Union[str, int]",
                    "float"
                ],
                "prefix": [
                    "str",
                    "bool",
                    "list",
                    "Union[str, int]",
                    "float"
                ],
                "add_token_callback": [
                    "str",
                    "bool",
                    "list",
                    "Union[str, int]",
                    "float"
                ]
            }
        },
        "Parser.convert_node": {
            "name": "convert_node",
            "location": 160,
            "return": [
                "bool",
                "Callable[..., None]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "grammar": [
                    "Type[BaseException]",
                    "Callable",
                    "str"
                ],
                "type": [
                    "Type[BaseException]",
                    "Callable",
                    "str"
                ],
                "children": [
                    "Optional[Sequence[Any]]",
                    "Optional[Mapping[str, Any]]",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "Parser.convert_leaf": {
            "name": "convert_leaf",
            "location": 198,
            "return": [
                "str",
                "Generator",
                "Dict[str, int]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "grammar": [
                    "str",
                    "int",
                    "dict"
                ],
                "type": [
                    "str",
                    "int",
                    "List[Tuple[int, int]]",
                    "List[Optional[float]]",
                    "bool",
                    "AsyncContextManager[None]",
                    "Tuple[str, str, str]"
                ],
                "value": [
                    "Optional[str]",
                    "Optional[bool]",
                    "str",
                    "bool",
                    "Callable"
                ],
                "prefix": [
                    "Hashable",
                    "str"
                ],
                "start_pos": [
                    "Hashable",
                    "str"
                ]
            }
        },
        "Parser.remove_last_newline": {
            "name": "remove_last_newline",
            "location": 229,
            "return": [
                "Dict[str, Any]",
                "Optional[bool]",
                "Set[VT]",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserWithRecovery.__init__": {
            "name": "__init__",
            "location": 293,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "grammar": [
                    "List[Tuple[str, str]]",
                    "Optional[Type[Exception]]",
                    "Tuple[str]",
                    "str",
                    "Optional[str]"
                ],
                "source": [
                    "List[Tuple[str, str]]",
                    "Optional[Type[Exception]]",
                    "Tuple[str]",
                    "str",
                    "Optional[str]"
                ],
                "module_path": [
                    "str",
                    "Optional[str]"
                ],
                "tokenizer": [
                    "List[Tuple[str, str]]",
                    "Optional[Type[Exception]]",
                    "Tuple[str]",
                    "str",
                    "Optional[str]"
                ],
                "start_parsing": [
                    "List[Tuple[str, str]]",
                    "Optional[Type[Exception]]",
                    "Tuple[str]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ParserWithRecovery.parse": {
            "name": "parse",
            "location": 320,
            "return": [
                "list",
                "str"
            ],
            "arguments": {
                "self": [],
                "tokenizer": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "ParserWithRecovery.error_recovery": {
            "name": "error_recovery",
            "location": 323,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "grammar": [
                    "str",
                    "Callable",
                    "bool"
                ],
                "stack": [
                    "str",
                    "int",
                    "Callable[[], Any]"
                ],
                "arcs": [
                    "int",
                    "str",
                    "List[Dict[str, str]]",
                    "tuple",
                    "List[str]",
                    "float"
                ],
                "typ": [
                    "dict",
                    "bool",
                    "str",
                    "Dict[str, str]",
                    "Mapping[str, Any]"
                ],
                "value": [
                    "Dict[str, Any]",
                    "float",
                    "Optional[float]",
                    "str"
                ],
                "start_pos": [
                    "Dict[str, Any]",
                    "float",
                    "Optional[float]",
                    "str"
                ],
                "prefix": [
                    "dict",
                    "bool",
                    "Mapping[str, Any]",
                    "str"
                ],
                "add_token_callback": [
                    "Mapping[str, Any]",
                    "str",
                    "Exception",
                    "Optional[str]",
                    "dict",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "ParserWithRecovery._stack_removal": {
            "name": "_stack_removal",
            "location": 370,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "grammar": [
                    "dict",
                    "Optional[str]",
                    "Callable",
                    "Optional[Dict[str, Any]]"
                ],
                "stack": [
                    "int",
                    "str",
                    "list",
                    "dict",
                    "bool"
                ],
                "arcs": [
                    "int",
                    "bool",
                    "Callable[[], Iterable[Any]]",
                    "float"
                ],
                "start_index": [
                    "int",
                    "str",
                    "list",
                    "dict",
                    "bool"
                ],
                "value": [
                    "int",
                    "bool",
                    "Callable[[], Iterable[Any]]",
                    "float"
                ],
                "start_pos": [
                    "int",
                    "bool",
                    "Optional[bool]",
                    "Union[int, Tuple[int, ...]]"
                ]
            }
        },
        "ParserWithRecovery._tokenize": {
            "name": "_tokenize",
            "location": 391,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tokenizer": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ParserWithRecovery.__repr__": {
            "name": "__repr__",
            "location": 408,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserWithRecovery.error_recovery.current_suite": {
            "name": "current_suite",
            "location": 330,
            "return": [
                "str",
                "bool",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "stack": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "Iterable[str]",
                    "Sequence[T]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/parser/pgen2/grammar.py": {
        "Grammar.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grammar.dump": {
            "name": "dump",
            "location": 88,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "Grammar.load": {
            "name": "load",
            "location": 93,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Union[str, Iterable[str]]"
                ]
            }
        },
        "Grammar.copy": {
            "name": "copy",
            "location": 99,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grammar.report": {
            "name": "report",
            "location": 112,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/parser/pgen2/parse.py": {
        "token_to_ilabel": {
            "name": "token_to_ilabel",
            "location": 37,
            "return": [
                "tuple"
            ],
            "arguments": {
                "grammar": [
                    "str",
                    "Iterator[T]",
                    "Mapping[str, str]",
                    "Set[str]",
                    "int"
                ],
                "type_": [
                    "str",
                    "Optional[str]"
                ],
                "value": [
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        },
        "InternalParseError.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "bool",
                    "Optional[str]"
                ],
                "type": [
                    "bool",
                    "Optional[Type[BaseException]]",
                    "Optional[Dict]",
                    "str"
                ],
                "value": [
                    "bool",
                    "Optional[Dict]",
                    "type",
                    "List[str]",
                    "str"
                ],
                "start_pos": [
                    "bool",
                    "str"
                ]
            }
        },
        "PgenParser.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "grammar": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "float"
                ],
                "convert_node": [
                    "int",
                    "float",
                    "List[str]",
                    "str",
                    "tuple"
                ],
                "convert_leaf": [
                    "int",
                    "float",
                    "List[str]",
                    "str",
                    "tuple"
                ],
                "error_recovery": [
                    "int",
                    "float",
                    "List[str]",
                    "str",
                    "tuple"
                ],
                "start": [
                    "float",
                    "Optional[int]",
                    "Callable",
                    "str"
                ]
            }
        },
        "PgenParser.parse": {
            "name": "parse",
            "location": 121,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "tokenizer": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "PgenParser.addtoken": {
            "name": "addtoken",
            "location": 133,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "bool",
                    "str",
                    "Type"
                ],
                "value": [
                    "bool",
                    "str",
                    "Type"
                ],
                "start_pos": [
                    "Type"
                ],
                "prefix": [
                    "Optional[int]"
                ]
            }
        },
        "PgenParser.shift": {
            "name": "shift",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "dict",
                    "Optional[T]",
                    "bool",
                    "Optional[Type]",
                    "str",
                    "Union[str, int, float]"
                ],
                "value": [
                    "dict",
                    "Optional[T]",
                    "bool",
                    "Optional[Type]",
                    "str",
                    "Union[str, int, float]"
                ],
                "newstate": [
                    "IO",
                    "Dict[str, Any]",
                    "Type",
                    "List[str]"
                ],
                "prefix": [
                    "dict",
                    "Optional[T]",
                    "bool",
                    "Optional[Type]",
                    "str",
                    "Union[str, int, float]"
                ],
                "start_pos": [
                    "dict",
                    "Optional[T]",
                    "bool",
                    "Optional[Type]",
                    "str",
                    "Union[str, int, float]"
                ]
            }
        },
        "PgenParser.push": {
            "name": "push",
            "location": 188,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "ForwardRef",
                    "str",
                    "Type",
                    "Callable[[None], None]",
                    "List[str]",
                    "IO"
                ],
                "newdfa": [
                    "str",
                    "bool"
                ],
                "newstate": [
                    "ForwardRef",
                    "str",
                    "Type",
                    "Callable[[None], None]",
                    "List[str]",
                    "IO"
                ]
            }
        },
        "PgenParser.pop": {
            "name": "pop",
            "location": 195,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/parser/pgen2/pgen.py": {
        "generate_grammar": {
            "name": "generate_grammar",
            "location": 392,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "ParserGenerator.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[str]",
                    "bytes"
                ],
                "stream": [
                    "str",
                    "BinaryIO"
                ]
            }
        },
        "ParserGenerator.make_grammar": {
            "name": "make_grammar",
            "location": 30,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]",
                "str",
                "Optional[int]",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.make_first": {
            "name": "make_first",
            "location": 55,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "str",
                    "List[str]"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "ParserGenerator.make_label": {
            "name": "make_label",
            "location": 64,
            "return": [
                "int",
                "str",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "str",
                    "Union[tuple, list]",
                    "Iterator[Any]",
                    "Dict[str, Any]"
                ],
                "label": [
                    "str",
                    "Sequence[str]",
                    "int",
                    "Callable[..., T]",
                    "Optional[List]",
                    "tuple"
                ]
            }
        },
        "ParserGenerator.addfirstsets": {
            "name": "addfirstsets",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.calcfirst": {
            "name": "calcfirst",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "ParserGenerator.parse": {
            "name": "parse",
            "location": 148,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.make_dfa": {
            "name": "make_dfa",
            "location": 172,
            "return": [
                "Callable",
                "List[str]",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "str"
                ],
                "finish": [
                    "int",
                    "float"
                ]
            }
        },
        "ParserGenerator.dump_nfa": {
            "name": "dump_nfa",
            "location": 211,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "start": [
                    "int",
                    "str",
                    "Dict[str, 'LabwareDefinition']",
                    "List[int]",
                    "Tuple[float, float]"
                ],
                "finish": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "ParserGenerator.dump_dfa": {
            "name": "dump_dfa",
            "location": 227,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[int]"
                ],
                "dfa": [
                    "str",
                    "int"
                ]
            }
        },
        "ParserGenerator.simplify_dfa": {
            "name": "simplify_dfa",
            "location": 234,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dfa": [
                    "list",
                    "List[str]",
                    "int",
                    "str"
                ]
            }
        },
        "ParserGenerator.parse_rhs": {
            "name": "parse_rhs",
            "location": 255,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.parse_alt": {
            "name": "parse_alt",
            "location": 272,
            "return": [
                "float",
                "Tuple[Any, Any, Any]",
                "bytearray",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.parse_item": {
            "name": "parse_item",
            "location": 282,
            "return": [
                "str",
                "bytes",
                "Dict[Tuple[int, int], int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.parse_atom": {
            "name": "parse_atom",
            "location": 302,
            "return": [
                "str",
                "list",
                "List[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.expect": {
            "name": "expect",
            "location": 319,
            "return": [
                "str",
                "int",
                "List[List[float]]"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Optional[str]",
                    "str"
                ],
                "value": [
                    "str",
                    "Optional[Type[BaseException]]",
                    "Optional[BaseException]",
                    "Dict[str, Any]"
                ]
            }
        },
        "ParserGenerator.gettoken": {
            "name": "gettoken",
            "location": 327,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.raise_error": {
            "name": "raise_error",
            "location": 334,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "Exception",
                    "Callable",
                    "Sequence[str]"
                ]
            }
        },
        "NFAState.__init__": {
            "name": "__init__",
            "location": 346,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NFAState.addarc": {
            "name": "addarc",
            "location": 349,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "next": [
                    "Dict[\"core.Edge\", \"state.State\"]"
                ],
                "label": [
                    "Optional[str]",
                    "Collection[int]"
                ]
            }
        },
        "DFAState.__init__": {
            "name": "__init__",
            "location": 356,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "nfaset": [
                    "Optional[str]",
                    "int",
                    "dict",
                    "float",
                    "str"
                ],
                "final": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "DFAState.addarc": {
            "name": "addarc",
            "location": 364,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "next": [],
                "label": [
                    "int"
                ]
            }
        },
        "DFAState.unifystate": {
            "name": "unifystate",
            "location": 370,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "old": [
                    "int"
                ],
                "new": [
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "DFAState.__eq__": {
            "name": "__eq__",
            "location": 375,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list",
                    "bool",
                    "float"
                ]
            }
        },
        "ParserGenerator.make_dfa.closure": {
            "name": "closure",
            "location": 180,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "state": [
                    "int",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "ParserGenerator.make_dfa.addclosure": {
            "name": "addclosure",
            "location": 185,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "state": [
                    "str",
                    "List[T]"
                ],
                "base": [
                    "Type",
                    "float",
                    "type"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/jedi/parser/pgen2/__init__.py": {},
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/linting/anaconda_mccabe.py": {
        "AnacondaMcCabe.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "int",
                    "str",
                    "float"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "AnacondaMcCabe.tree": {
            "name": "tree",
            "location": 26,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnacondaMcCabe.get_code_complexity": {
            "name": "get_code_complexity",
            "location": 36,
            "return": [
                "None",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "threshold": [
                    "int",
                    "Tuple[bytes, bytes]",
                    "str",
                    "float"
                ]
            }
        },
        "AnacondaMcCabe.parse": {
            "name": "parse",
            "location": 46,
            "return": [
                "list[dict[typing.Text, int]]",
                "str",
                "int",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "complexities": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/linting/anaconda_mypy.py": {
        "MyPy.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "int",
                    "str",
                    "float"
                ],
                "filename": [
                    "str"
                ],
                "mypypath": [
                    "int",
                    "str",
                    "float"
                ],
                "settings": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "MyPy.silent": {
            "name": "silent",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyPy.execute": {
            "name": "execute",
            "location": 49,
            "return": [
                "str",
                "int",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyPy.check_source": {
            "name": "check_source",
            "location": 65,
            "return": [
                "List[str]",
                "list[dict[typing.Text, typing.Union[typing.Text,int]]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/linting/anaconda_pep257.py": {
        "PEP257.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "int",
                    "str",
                    "float"
                ],
                "filename": [
                    "str"
                ],
                "ignore": [
                    "Optional[str]",
                    "str",
                    "Callable"
                ]
            }
        },
        "PEP257.execute": {
            "name": "execute",
            "location": 23,
            "return": [
                "list",
                "str",
                "int",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PEP257._convert": {
            "name": "_convert",
            "location": 40,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,int]]",
                "Mapping",
                "Dict[str, float]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/linting/anaconda_pep8.py": {
        "Pep8Error.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[str]"
                ],
                "loc": [
                    "str",
                    "Optional[str]"
                ],
                "offset": [
                    "str",
                    "Optional[str]"
                ],
                "code": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "text": [
                    "str"
                ],
                "level": [
                    "typing.Text",
                    "str",
                    "int"
                ]
            }
        },
        "Pep8Warning.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "Callable",
                    "int"
                ],
                "loc": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "Callable",
                    "int"
                ],
                "offset": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "Callable",
                    "int"
                ],
                "code": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "text": [
                    "str",
                    "Optional[str]"
                ],
                "level": [
                    "typing.Text",
                    "str",
                    "int"
                ]
            }
        },
        "Pep8Linter.lint": {
            "name": "lint",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "str"
                ],
                "code": [
                    "str"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "Pep8Linter.check": {
            "name": "check",
            "location": 61,
            "return": [
                "list",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "bool",
                    "int",
                    "str",
                    "Optional[bool]"
                ],
                "filename": [
                    "str",
                    "List[str]",
                    "Optional[int]",
                    "Optional[float]",
                    "Union[str, int]"
                ],
                "rcfile": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "ignore": [
                    "int",
                    "bool",
                    "List[List[str]]",
                    "Optional[str]",
                    "Optional[bool]",
                    "List[int]",
                    "str"
                ],
                "max_line_length": [
                    "int"
                ],
                "levels": [
                    "bool",
                    "int",
                    "str",
                    "Optional[bool]"
                ]
            }
        },
        "Pep8Linter.parse": {
            "name": "parse",
            "location": 125,
            "return": [
                "int",
                "list",
                "Iterable[str]",
                "list[dict[typing.Text, typing.Union[bool,str]]]"
            ],
            "arguments": {
                "self": [],
                "errors": [
                    "Tuple[List[str], Optional[Any]]",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "Pep8Linter.check.AnacondaReport.error": {
            "name": "error",
            "location": 73,
            "return": [
                "None",
                "bool",
                "Iterable[str]",
                "Callable",
                "Hashable"
            ],
            "arguments": {
                "self": [],
                "line_number": [
                    "str",
                    "List[str]"
                ],
                "offset": [
                    "str",
                    "list",
                    "List[list]"
                ],
                "text": [
                    "str"
                ],
                "check": [
                    "str",
                    "list",
                    "Optional[str]",
                    "bool"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/linting/anaconda_pyflakes.py": {
        "PyFlakesError.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[str]",
                    "Optional[float]"
                ],
                "loc": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[str]",
                    "Optional[float]"
                ],
                "level": [
                    "float",
                    "bool",
                    "bytes"
                ],
                "message": [
                    "float",
                    "bool",
                    "bytes"
                ],
                "message_args": [
                    "bool",
                    "Callable[[Optional, Optional, str], None]",
                    "List[str]"
                ]
            }
        },
        "PyFlakesLinter.lint": {
            "name": "lint",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "str",
                    "Optional[str]"
                ],
                "code": [
                    "str",
                    "float"
                ],
                "filename": [
                    "str",
                    "float"
                ]
            }
        },
        "PyFlakesLinter.check": {
            "name": "check",
            "location": 48,
            "return": [
                "list[typing.Union[PyFlakesError,list]]",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str"
                ],
                "filename": [
                    "str",
                    "AnyStr"
                ],
                "ignore": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "PyFlakesLinter.parse": {
            "name": "parse",
            "location": 71,
            "return": [
                "list",
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "errors": [
                    "Optional[Iterable[str]]",
                    "Optional[Callable]",
                    "dict",
                    "Optional[int]",
                    "str"
                ],
                "explicit_ignore": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/linting/anaconda_pylint.py": {
        "PyLinter.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[str]"
                ],
                "rcfile": [
                    "int",
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "PyLinter.execute": {
            "name": "execute",
            "location": 43,
            "return": [
                "dict[typing.Text, list]",
                "str",
                "type",
                "Optional[str]",
                "logging.LogRecord",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyLinter.parse_errors": {
            "name": "parse_errors",
            "location": 67,
            "return": [
                "dict[typing.Text, list]",
                "str",
                "List[str]",
                "Optional[str]",
                "Set[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyLinter._map_code": {
            "name": "_map_code",
            "location": 119,
            "return": [
                "tuple[typing.Text]",
                "str",
                "dict",
                "Dict[str, Any]",
                "Tuple[str, int]"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/linting/linter.py": {
        "cmp_to_key": {
            "name": "cmp_to_key",
            "location": 34,
            "return": [
                "K",
                "bool",
                "str"
            ],
            "arguments": {
                "mycmp": [
                    "str",
                    "Dict[str, BinaryIO]",
                    "bool",
                    "float"
                ]
            }
        },
        "LintError.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "int",
                    "bool",
                    "List[str]",
                    "str"
                ],
                "loc": [
                    "float",
                    "bool",
                    "bytes"
                ],
                "level": [
                    "float",
                    "bool",
                    "bytes"
                ],
                "message": [
                    "float",
                    "bool",
                    "bytes"
                ],
                "message_args": [
                    "bool",
                    "Callable[[Optional, Optional, str], None]",
                    "List[str]"
                ]
            }
        },
        "LintError.__str__": {
            "name": "__str__",
            "location": 88,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pep8Error.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "loc": [
                    "str"
                ],
                "offset": [
                    "str"
                ],
                "code": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "Pep8Warning.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[str]"
                ],
                "loc": [
                    "str",
                    "Optional[str]"
                ],
                "offset": [
                    "str",
                    "Optional[str]"
                ],
                "code": [
                    "str",
                    "Optional[str]"
                ],
                "text": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "PythonError.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "loc": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "OffsetError.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "loc": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "text": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "offset": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "Linter.__init__": {
            "name": "__init__",
            "location": 144,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Linter.pyflakes_check": {
            "name": "pyflakes_check",
            "location": 148,
            "return": [
                "list[PythonError]",
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str"
                ],
                "filename": [
                    "str",
                    "Optional[Exception]"
                ],
                "ignore": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "Linter.pep8_check": {
            "name": "pep8_check",
            "location": 168,
            "return": [
                "list",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "bool",
                    "int",
                    "str",
                    "Optional[bool]"
                ],
                "filename": [
                    "str",
                    "List[str]",
                    "Optional[int]",
                    "Optional[float]",
                    "Union[str, int]"
                ],
                "rcfile": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "ignore": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "max_line_length": [
                    "int"
                ]
            }
        },
        "Linter.run_linter": {
            "name": "run_linter",
            "location": 238,
            "return": [
                "str",
                "bool",
                "\"Person\""
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "bool",
                    "int"
                ],
                "code": [
                    "str"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "Linter.sort_errors": {
            "name": "sort_errors",
            "location": 264,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "errors": [
                    "int",
                    "Dict[str, Any]",
                    "\"Cache\""
                ]
            }
        },
        "Linter.prepare_error_level": {
            "name": "prepare_error_level",
            "location": 269,
            "return": [
                "tuple",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "str",
                    "dict",
                    "List[Exception]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "Linter.parse_errors": {
            "name": "parse_errors",
            "location": 274,
            "return": [
                "list",
                "int",
                "List[object]",
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "errors": [
                    "Optional[Iterable[str]]",
                    "Optional[Callable]",
                    "Optional[Union[str, int]]"
                ],
                "explicit_ignore": [
                    "Dict[str, Any]"
                ]
            }
        },
        "Linter._handle_syntactic_error": {
            "name": "_handle_syntactic_error",
            "location": 363,
            "return": [
                "list[typing.Union[PythonError,OffsetError]]",
                "List[str]",
                "str",
                "Sequence[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "int",
                    "Optional[List[str]]"
                ],
                "filename": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "cmp_to_key.K.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "cmp_to_key.K.__lt__": {
            "name": "__lt__",
            "location": 44,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]"
                ]
            }
        },
        "cmp_to_key.K.__gt__": {
            "name": "__gt__",
            "location": 47,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]"
                ]
            }
        },
        "cmp_to_key.K.__eq__": {
            "name": "__eq__",
            "location": 50,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]"
                ]
            }
        },
        "cmp_to_key.K.__le__": {
            "name": "__le__",
            "location": 53,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]"
                ]
            }
        },
        "cmp_to_key.K.__ge__": {
            "name": "__ge__",
            "location": 56,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]"
                ]
            }
        },
        "cmp_to_key.K.__ne__": {
            "name": "__ne__",
            "location": 59,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]"
                ]
            }
        },
        "cmp_to_key.K.__hash__": {
            "name": "__hash__",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Linter.pep8_check.FakeCol.__init__": {
            "name": "__init__",
            "location": 180,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "line_number": [
                    "int",
                    "str"
                ]
            }
        },
        "Linter.pep8_check.SublimeLinterReport.error": {
            "name": "error",
            "location": 187,
            "return": [
                "None",
                "bool",
                "Iterable[str]",
                "Callable",
                "Hashable"
            ],
            "arguments": {
                "self": [],
                "line_number": [
                    "str",
                    "List[str]"
                ],
                "offset": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "text": [
                    "str"
                ],
                "check": [
                    "str",
                    "list",
                    "Optional[str]",
                    "bool"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/linting/mccabe.py": {
        "get_code_complexity": {
            "name": "get_code_complexity",
            "location": 257,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "code": [
                    "str",
                    "list"
                ],
                "threshold": [
                    "int",
                    "str"
                ],
                "filename": [
                    "str",
                    "typing.Text"
                ]
            }
        },
        "get_module_complexity": {
            "name": "get_module_complexity",
            "location": 276,
            "return": [
                "str",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "module_path": [
                    "str",
                    "float",
                    "bool",
                    "List[Tuple[int, str]]",
                    "Optional[str]"
                ],
                "threshold": [
                    "int",
                    "str",
                    "Union[List, str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 283,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "argv": [
                    "List[str]",
                    "Optional[str]",
                    "list",
                    "str",
                    "List[dict]"
                ]
            }
        },
        "ASTVisitor.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ASTVisitor.default": {
            "name": "default",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int",
                    "str"
                ]
            }
        },
        "ASTVisitor.dispatch": {
            "name": "dispatch",
            "location": 31,
            "return": [
                "int",
                "float",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ]
            }
        },
        "ASTVisitor.preorder": {
            "name": "preorder",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "Type",
                    "str",
                    "list"
                ],
                "visitor": []
            }
        },
        "PathNode.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ],
                "look": [
                    "typing.Text",
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "PathNode.to_dot": {
            "name": "to_dot",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathNode.dot_id": {
            "name": "dot_id",
            "location": 57,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathGraph.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]"
                ],
                "entity": [
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "str",
                    "float",
                    "Optional[float]"
                ],
                "lineno": [
                    "bool",
                    "Sequence",
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "PathGraph.connect": {
            "name": "connect",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "n1": [
                    "int",
                    "float",
                    "list",
                    "List[float]",
                    "str"
                ],
                "n2": [
                    "int",
                    "float",
                    "list",
                    "List[float]",
                    "str"
                ]
            }
        },
        "PathGraph.to_dot": {
            "name": "to_dot",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathGraph.complexity": {
            "name": "complexity",
            "location": 80,
            "return": [
                "int",
                "float",
                "str",
                "type",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathGraphingAstVisitor.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathGraphingAstVisitor.reset": {
            "name": "reset",
            "location": 100,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathGraphingAstVisitor.dispatch_list": {
            "name": "dispatch_list",
            "location": 104,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node_list": [
                    "Set[int]",
                    "List[Type]"
                ]
            }
        },
        "PathGraphingAstVisitor.visitFunctionDef": {
            "name": "visitFunctionDef",
            "location": 108,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "PathGraphingAstVisitor.visitClassDef": {
            "name": "visitClassDef",
            "location": 134,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict"
                ]
            }
        },
        "PathGraphingAstVisitor.appendPathNode": {
            "name": "appendPathNode",
            "location": 140,
            "return": [
                "set",
                "None",
                "Union[tuple, list]",
                "PathNode"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "PathGraphingAstVisitor.visitSimpleStatement": {
            "name": "visitSimpleStatement",
            "location": 148,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "PathGraphingAstVisitor.visitLoop": {
            "name": "visitLoop",
            "location": 161,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "PathGraphingAstVisitor.visitIf": {
            "name": "visitIf",
            "location": 185,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "PathGraphingAstVisitor.visitTryExcept": {
            "name": "visitTryExcept",
            "location": 203,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "PathGraphingAstVisitor.visitWith": {
            "name": "visitWith",
            "location": 219,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Set[str]"
                ]
            }
        },
        "McCabeChecker.__init__": {
            "name": "__init__",
            "location": 233,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "Iterable[bytes]",
                    "int",
                    "Tuple[str, str]",
                    "bool"
                ],
                "filename": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "McCabeChecker.add_options": {
            "name": "add_options",
            "location": 237,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]"
                ],
                "parser": []
            }
        },
        "McCabeChecker.parse_options": {
            "name": "parse_options",
            "location": 243,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[int]",
                    "Match[str]",
                    "float"
                ],
                "options": [
                    "int",
                    "List[int]",
                    "Match[str]",
                    "float"
                ]
            }
        },
        "McCabeChecker.run": {
            "name": "run",
            "location": 246,
            "return": [
                "Awaitable",
                "None",
                "typing.Generator[tuple[typing.Union[int,typing.Type]]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/linting/pep257.py": {
        "humanize": {
            "name": "humanize",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str",
                    "int",
                    "Union[Dict[str, Any], List[Any]]",
                    "bytes"
                ]
            }
        },
        "is_magic": {
            "name": "is_magic",
            "location": 76,
            "return": [
                "Dict[str, Any]",
                "int",
                "type",
                "Dict[str, Union[str, Any]]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "is_ascii": {
            "name": "is_ascii",
            "location": 82,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "string": [
                    "str",
                    "int"
                ]
            }
        },
        "is_blank": {
            "name": "is_blank",
            "location": 86,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "leading_space": {
            "name": "leading_space",
            "location": 90,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "check_initialized": {
            "name": "check_initialized",
            "location": 704,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "method": [
                    "Callable",
                    "Callable[..., Optional[Any]]",
                    "List[str]",
                    "list",
                    "str"
                ]
            }
        },
        "check": {
            "name": "check",
            "location": 1189,
            "return": [
                ""
            ],
            "arguments": {
                "filenames": [
                    "bool",
                    "str"
                ],
                "select": [
                    "Optional[int]",
                    "str",
                    "Mapping",
                    "List[str]",
                    "Optional[str]",
                    "int"
                ],
                "ignore": [
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Iterable[str]"
                ]
            }
        },
        "setup_stream_handlers": {
            "name": "setup_stream_handlers",
            "location": 1226,
            "return": [
                ""
            ],
            "arguments": {
                "conf": [
                    "float",
                    "str"
                ]
            }
        },
        "run_pep257": {
            "name": "run_pep257",
            "location": 1252,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "check_for": {
            "name": "check_for",
            "location": 1294,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "kind": [
                    "str",
                    "bool",
                    "int",
                    "List[str]",
                    "Union[int, Tuple[int, int]]",
                    "Optional[int]"
                ],
                "terminal": [
                    "str",
                    "bool",
                    "int",
                    "List[str]",
                    "Union[int, Tuple[int, int]]",
                    "Optional[int]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 1603,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Value.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Value.__hash__": {
            "name": "__hash__",
            "location": 99,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Value.__eq__": {
            "name": "__eq__",
            "location": 102,
            "return": [
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Set[VT]"
                ]
            }
        },
        "Value.__repr__": {
            "name": "__repr__",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Definition.__iter__": {
            "name": "__iter__",
            "location": 123,
            "return": [
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Definition._publicity": {
            "name": "_publicity",
            "location": 127,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Definition.__str__": {
            "name": "__str__",
            "location": 130,
            "return": [
                "str",
                "bool",
                "Optional[bool]",
                "Optional[float]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Module.__str__": {
            "name": "__str__",
            "location": 143,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.is_public": {
            "name": "is_public",
            "location": 157,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Method.is_public": {
            "name": "is_public",
            "location": 172,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenKind.__repr__": {
            "name": "__repr__",
            "location": 202,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.__init__": {
            "name": "__init__",
            "location": 210,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenStream.__init__": {
            "name": "__init__",
            "location": 217,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filelike": [
                    "str"
                ]
            }
        },
        "TokenStream.move": {
            "name": "move",
            "location": 222,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenStream.__iter__": {
            "name": "__iter__",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AllError.__init__": {
            "name": "__init__",
            "location": 240,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Parser.__call__": {
            "name": "__call__",
            "location": 251,
            "return": [
                "type",
                "bool",
                "AsyncGenerator"
            ],
            "arguments": {
                "self": [],
                "filelike": [
                    "Tuple[str, bool]",
                    "bool",
                    "str",
                    "Optional[bool]"
                ],
                "filename": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "Parser.consume": {
            "name": "consume",
            "location": 264,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "kind": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Parser.leapfrog": {
            "name": "leapfrog",
            "location": 267,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "kind": [
                    "float",
                    "Hashable",
                    "Union[int, None]",
                    "T",
                    "Optional[int]",
                    "Optional[Sequence[int]]"
                ],
                "value": [
                    "Optional[int]",
                    "float",
                    "T",
                    "Hashable",
                    "Union[int, None]",
                    "Optional[Union[bool, int]]",
                    "Optional[object]"
                ]
            }
        },
        "Parser.parse_docstring": {
            "name": "parse_docstring",
            "location": 280,
            "return": [
                "Optional[str]",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_decorators": {
            "name": "parse_decorators",
            "location": 294,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_definitions": {
            "name": "parse_definitions",
            "location": 337,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "class_": [
                    "float",
                    "str",
                    "Callable[[str], None]",
                    "dict"
                ],
                "all": [
                    "bool",
                    "str",
                    "list"
                ]
            }
        },
        "Parser.parse_all": {
            "name": "parse_all",
            "location": 361,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_module": {
            "name": "parse_module",
            "location": 404,
            "return": [
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_definition": {
            "name": "parse_definition",
            "location": 423,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "class_": [
                    "str",
                    "Exception"
                ]
            }
        },
        "Parser.parse_from_import_statement": {
            "name": "parse_from_import_statement",
            "location": 470,
            "return": [
                "Iterator[Tuple[str, str]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Error.__init__": {
            "name": "__init__",
            "location": 521,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Error.set_context": {
            "name": "set_context",
            "location": 526,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "definition": [
                    "bool",
                    "float"
                ],
                "explanation": [
                    "bool",
                    "float"
                ]
            }
        },
        "Error.message": {
            "name": "message",
            "location": 534,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Error.lines": {
            "name": "lines",
            "location": 541,
            "return": [
                "str",
                "List[str]",
                "os.PathLike"
            ],
            "arguments": {
                "self": []
            }
        },
        "Error.__str__": {
            "name": "__str__",
            "location": 559,
            "return": [
                "str",
                "Dict[str, str]",
                "Mapping",
                "Optional[Mapping]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Error.__lt__": {
            "name": "__lt__",
            "location": 575,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str"
                ]
            }
        },
        "ErrorRegistry.create_group": {
            "name": "create_group",
            "location": 601,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable"
                ],
                "prefix": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "ErrorRegistry.get_error_codes": {
            "name": "get_error_codes",
            "location": 607,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "List[str]",
                    "Type"
                ]
            }
        },
        "ErrorRegistry.to_rst": {
            "name": "to_rst",
            "location": 613,
            "return": [
                "str",
                "logging.LogRecord",
                "list",
                "Optional[List[str]]",
                "Optional[int]",
                "Optional[List[Callable]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type"
                ]
            }
        },
        "AttrDict.__getattr__": {
            "name": "__getattr__",
            "location": 678,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "List[float]",
                    "os.DirEntry",
                    "bool"
                ]
            }
        },
        "check_initialized._decorator": {
            "name": "_decorator",
            "location": 706,
            "return": [
                "str",
                "dict",
                "MutableMapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigurationParser.__init__": {
            "name": "__init__",
            "location": 760,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigurationParser.get_default_run_configuration": {
            "name": "get_default_run_configuration",
            "location": 769,
            "return": [
                "Mapping[str, str]",
                "bool",
                "Mapping",
                "Optional[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigurationParser.parse": {
            "name": "parse",
            "location": 774,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigurationParser.get_user_run_configuration": {
            "name": "get_user_run_configuration",
            "location": 794,
            "return": [
                "bool",
                "list",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigurationParser.get_files_to_check": {
            "name": "get_files_to_check",
            "location": 799,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigurationParser._get_config": {
            "name": "_get_config",
            "location": 838,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Tuple[List[int], int]",
                    "str",
                    "FrozenSet[str]",
                    "BinaryIO",
                    "IO[str]"
                ]
            }
        },
        "ConfigurationParser._read_configuration_file": {
            "name": "_read_configuration_file",
            "location": 910,
            "return": [
                "str",
                "set"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "ConfigurationParser._merge_configuration": {
            "name": "_merge_configuration",
            "location": 961,
            "return": [
                "Dict[str, Any]",
                "bool",
                "authorityspoke.io.schemas.RawFactor",
                "Tuple[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "parent_config": [
                    "Dict[str, Any]",
                    "str",
                    "int",
                    "Mapping[str, Any]",
                    "dict",
                    "configparser.ConfigParser"
                ],
                "child_options": [
                    "dict",
                    "str",
                    "Optional[str]",
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        },
        "ConfigurationParser._parse_args": {
            "name": "_parse_args",
            "location": 985,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "values": [
                    "Optional[List[str]]",
                    "OrderedDict",
                    "dict",
                    "bool",
                    "str"
                ]
            }
        },
        "ConfigurationParser._create_run_config": {
            "name": "_create_run_config",
            "location": 991,
            "return": [
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "options": [
                    "str",
                    "dict"
                ]
            }
        },
        "ConfigurationParser._create_check_config": {
            "name": "_create_check_config",
            "location": 998,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]"
                ],
                "options": [
                    "str",
                    "Optional[str]"
                ],
                "use_dafaults": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ConfigurationParser._get_config_file_in_folder": {
            "name": "_get_config_file_in_folder",
            "location": 1023,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "ConfigurationParser._get_exclusive_error_codes": {
            "name": "_get_exclusive_error_codes",
            "location": 1039,
            "return": [
                "str",
                "Union[str, List[str]]",
                "Iterable[int]",
                "bytes"
            ],
            "arguments": {
                "options": [
                    "dict",
                    "bytes",
                    "MutableMapping",
                    "Dict[str, Any]"
                ]
            }
        },
        "ConfigurationParser._set_add_options": {
            "name": "_set_add_options",
            "location": 1055,
            "return": [
                ""
            ],
            "arguments": {
                "checked_codes": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "dict"
                ],
                "options": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "dict"
                ]
            }
        },
        "ConfigurationParser._get_checked_errors": {
            "name": "_get_checked_errors",
            "location": 1061,
            "return": [
                "Union[str, List[str]]",
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict",
                    "T"
                ],
                "options": [
                    "str",
                    "dict",
                    "T",
                    "Dict[str, str]",
                    "Callable"
                ]
            }
        },
        "ConfigurationParser._validate_options": {
            "name": "_validate_options",
            "location": 1072,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "type"
                ],
                "options": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "ConfigurationParser._has_exclusive_option": {
            "name": "_has_exclusive_option",
            "location": 1094,
            "return": [
                "bool",
                "Optional[str]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bytes",
                    "Type[Any]"
                ],
                "options": [
                    "str",
                    "bytes",
                    "Type[Any]"
                ]
            }
        },
        "ConfigurationParser._fix_set_options": {
            "name": "_fix_set_options",
            "location": 1100,
            "return": [
                "bool",
                "float",
                "str",
                "List[str]"
            ],
            "arguments": {
                "options": [
                    "dict",
                    "str"
                ]
            }
        },
        "ConfigurationParser._create_option_parser": {
            "name": "_create_option_parser",
            "location": 1131,
            "return": [],
            "arguments": {
                "cls": [
                    "Optional[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "check_for.decorator": {
            "name": "decorator",
            "location": 1295,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "f": [
                    "int"
                ]
            }
        },
        "PEP257Checker.check_source": {
            "name": "check_source",
            "location": 1312,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Union[str, Pattern]"
                ],
                "filename": [
                    "str",
                    "Union[str, Pattern]"
                ]
            }
        },
        "PEP257Checker.checks": {
            "name": "checks",
            "location": 1334,
            "return": [
                "str",
                "Mapping",
                "Sequence[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PEP257Checker.check_docstring_missing": {
            "name": "check_docstring_missing",
            "location": 1340,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "definition": [
                    "str"
                ],
                "docstring": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "PEP257Checker.check_one_liners": {
            "name": "check_one_liners",
            "location": 1362,
            "return": [
                "int",
                "str",
                "bool",
                "List[List[str]]",
                "Type"
            ],
            "arguments": {
                "self": [],
                "definition": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "docstring": [
                    "str",
                    "bool"
                ]
            }
        },
        "PEP257Checker.check_no_blank_before": {
            "name": "check_no_blank_before",
            "location": 1377,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "function": [
                    "Callable"
                ],
                "docstring": [
                    "Callable"
                ]
            }
        },
        "PEP257Checker.check_blank_before_after_class": {
            "name": "check_blank_before_after_class",
            "location": 1397,
            "return": [
                ""
            ],
            "arguments": {
                "slef": [
                    "type"
                ],
                "class_": [
                    "str",
                    "List[str]",
                    "BaseException"
                ],
                "docstring": [
                    "str",
                    "List[str]",
                    "BaseException"
                ]
            }
        },
        "PEP257Checker.check_blank_after_summary": {
            "name": "check_blank_after_summary",
            "location": 1430,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "definition": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "docstring": [
                    "str"
                ]
            }
        },
        "PEP257Checker.check_indent": {
            "name": "check_indent",
            "location": 1449,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "definition": [
                    "bool",
                    "int",
                    "str"
                ],
                "docstring": [
                    "str",
                    "bool",
                    "IO[str]"
                ]
            }
        },
        "PEP257Checker.check_newline_after_last_paragraph": {
            "name": "check_newline_after_last_paragraph",
            "location": 1472,
            "return": [
                "Dict[str, bool]",
                "dict",
                "Exception",
                "int",
                "Union[Dict, str]"
            ],
            "arguments": {
                "self": [],
                "definition": [
                    "str",
                    "bool",
                    "Mapping"
                ],
                "docstring": [
                    "dict",
                    "str",
                    "Callable",
                    "logging.LogRecord"
                ]
            }
        },
        "PEP257Checker.check_surrounding_whitespaces": {
            "name": "check_surrounding_whitespaces",
            "location": 1486,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "definition": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "docstring": [
                    "str",
                    "bool"
                ]
            }
        },
        "PEP257Checker.check_triple_double_quotes": {
            "name": "check_triple_double_quotes",
            "location": 1495,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "definition": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "docstring": [
                    "str",
                    "int"
                ]
            }
        },
        "PEP257Checker.check_backslashes": {
            "name": "check_backslashes",
            "location": 1518,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "definition": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "docstring": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "PEP257Checker.check_unicode_docstring": {
            "name": "check_unicode_docstring",
            "location": 1532,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "definition": [
                    "float",
                    "str"
                ],
                "docstring": [
                    "float",
                    "int",
                    "bool",
                    "List[str]",
                    "Dict[str, Dict]"
                ]
            }
        },
        "PEP257Checker.check_ends_with_period": {
            "name": "check_ends_with_period",
            "location": 1549,
            "return": [
                "int",
                "str",
                "bool",
                "List[List[str]]",
                "Type"
            ],
            "arguments": {
                "self": [],
                "definition": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "docstring": [
                    "str",
                    "int"
                ]
            }
        },
        "PEP257Checker.check_imperative_mood": {
            "name": "check_imperative_mood",
            "location": 1561,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "Callable",
                    "bool",
                    "Callable[[T], Any]"
                ],
                "docstring": [
                    "Callable[[str], bool]"
                ]
            }
        },
        "PEP257Checker.check_no_signature": {
            "name": "check_no_signature",
            "location": 1577,
            "return": [
                "Dict[str, Tuple[Any, Any]]",
                "Dict[str, bool]",
                "Exception",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "str",
                    "Type[T]",
                    "Exception",
                    "Set[str]",
                    "int"
                ],
                "docstring": [
                    "str"
                ]
            }
        },
        "PEP257Checker.SKIP_check_return_type": {
            "name": "SKIP_check_return_type",
            "location": 1591,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "float",
                    "dict",
                    "str",
                    "Iterable[Union[dict, str]]",
                    "int"
                ],
                "docstring": [
                    "T",
                    "int",
                    "str",
                    "Optional[Callable[[Type, Dict], Any]]"
                ]
            }
        },
        "next": {
            "name": "next",
            "location": 45,
            "return": [
                "int",
                "str",
                "List[int]"
            ],
            "arguments": {
                "obj": [
                    "float",
                    "Iterable[T]",
                    "int",
                    "Tuple[int, int]"
                ],
                "default": [
                    "float",
                    "Iterable[T]",
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "ErrorRegistry.ErrorGroup.__init__": {
            "name": "__init__",
            "location": 584,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "name": [
                    "List[str]",
                    "str",
                    "dict"
                ]
            }
        },
        "ErrorRegistry.ErrorGroup.create_error": {
            "name": "create_error",
            "location": 589,
            "return": [
                "str",
                "List[str]",
                "Optional[Set[str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "error_code": [
                    "str",
                    "int",
                    "Optional[str]",
                    "float"
                ],
                "error_desc": [
                    "Union[bool, int, str]",
                    "str",
                    "list"
                ],
                "error_context": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "ConfigurationParser.get_files_to_check._get_matches": {
            "name": "_get_matches",
            "location": 811,
            "return": [
                "str",
                "Union[str, Pattern]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "config": [
                    "str"
                ]
            }
        },
        "ConfigurationParser._fix_set_options._get_set": {
            "name": "_get_set",
            "location": 1105,
            "return": [
                "str"
            ],
            "arguments": {
                "value_str": [
                    "str"
                ]
            }
        },
        "setup_stream_handlers.StdoutFilter.filter": {
            "name": "filter",
            "location": 1229,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "int",
                    "str",
                    "logging.LogRecord",
                    "Dict[str, List[str]]",
                    "bool"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/linting/pycodestyle.py": {
        "tabs_or_spaces": {
            "name": "tabs_or_spaces",
            "location": 149,
            "return": [
                "str",
                "Optional[str]",
                "dict",
                "Optional[BaseException]",
                "Optional[int]"
            ],
            "arguments": {
                "physical_line": [
                    "str",
                    "Pattern[str]",
                    "bool",
                    "Optional[int]"
                ],
                "indent_char": [
                    "str",
                    "int"
                ]
            }
        },
        "tabs_obsolete": {
            "name": "tabs_obsolete",
            "location": 168,
            "return": [
                "str",
                "int",
                "Iterable[Any]"
            ],
            "arguments": {
                "physical_line": [
                    "str"
                ]
            }
        },
        "trailing_whitespace": {
            "name": "trailing_whitespace",
            "location": 179,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "physical_line": [
                    "float",
                    "Iterable[str]",
                    "int",
                    "bool",
                    "list"
                ]
            }
        },
        "trailing_blank_lines": {
            "name": "trailing_blank_lines",
            "location": 200,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "physical_line": [
                    "str",
                    "int",
                    "dict"
                ],
                "lines": [
                    "Iterable[str]",
                    "str",
                    "Sequence[str]",
                    "bool"
                ],
                "line_number": [
                    "List[Tuple[int, int]]",
                    "TextIO",
                    "float",
                    "str",
                    "List[str]"
                ],
                "total_lines": [
                    "List[Tuple[int, int]]",
                    "TextIO",
                    "float",
                    "str",
                    "List[str]"
                ]
            }
        },
        "maximum_line_length": {
            "name": "maximum_line_length",
            "location": 216,
            "return": [
                "bool",
                "List[Dict[str, Any]]",
                "Union[int, float, complex]",
                "Dict[str, int]"
            ],
            "arguments": {
                "physical_line": [
                    "str",
                    "bytes",
                    "Optional[\"Node\"]",
                    "Tuple[Any, Any, Any]"
                ],
                "max_line_length": [
                    "int",
                    "str"
                ],
                "multiline": [
                    "str",
                    "int",
                    "list",
                    "List[str]"
                ],
                "noqa": [
                    "int",
                    "bool"
                ]
            }
        },
        "blank_lines": {
            "name": "blank_lines",
            "location": 254,
            "return": [
                "int",
                "Union[tuple, list]",
                "Set[str]",
                "str"
            ],
            "arguments": {
                "logical_line": [
                    "str",
                    "Dict[str, Any]"
                ],
                "blank_lines": [
                    "str",
                    "int",
                    "List[Tuple[int, int]]"
                ],
                "indent_level": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "line_number": [
                    "str",
                    "Optional[str]"
                ],
                "blank_before": [
                    "str",
                    "Pattern[str]"
                ],
                "previous_logical": [
                    "str"
                ],
                "previous_unindented_logical_line": [
                    "str",
                    "int",
                    "List[Tuple[int, int]]"
                ],
                "previous_indent_level": [
                    "str",
                    "Pattern[str]"
                ],
                "lines": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "extraneous_whitespace": {
            "name": "extraneous_whitespace",
            "location": 316,
            "return": [
                ""
            ],
            "arguments": {
                "logical_line": [
                    "str",
                    "List[str]",
                    "Set[str]",
                    "float",
                    "List[Union[\"PipeChain\", str]]"
                ]
            }
        },
        "whitespace_around_keywords": {
            "name": "whitespace_around_keywords",
            "location": 348,
            "return": [
                ""
            ],
            "arguments": {
                "logical_line": [
                    "Sequence[str]",
                    "Tuple[str, str]",
                    "os.DirEntry",
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "missing_whitespace_after_import_keyword": {
            "name": "missing_whitespace_after_import_keyword",
            "location": 371,
            "return": [
                ""
            ],
            "arguments": {
                "logical_line": [
                    "str",
                    "List[str]",
                    "Set[str]",
                    "float",
                    "List[Union[\"PipeChain\", str]]"
                ]
            }
        },
        "missing_whitespace": {
            "name": "missing_whitespace",
            "location": 388,
            "return": [
                ""
            ],
            "arguments": {
                "logical_line": [
                    "str",
                    "List[str]",
                    "Set[str]",
                    "float",
                    "List[Union[\"PipeChain\", str]]"
                ]
            }
        },
        "indentation": {
            "name": "indentation",
            "location": 414,
            "return": [
                ""
            ],
            "arguments": {
                "logical_line": [
                    "str",
                    "List[str]",
                    "bool",
                    "float",
                    "int",
                    "Optional[str]"
                ],
                "previous_logical": [
                    "str",
                    "List[str]",
                    "bool",
                    "float",
                    "int",
                    "Optional[str]"
                ],
                "indent_char": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "Callable"
                ],
                "indent_level": [
                    "str",
                    "List[str]",
                    "bool",
                    "float",
                    "int",
                    "Optional[str]"
                ],
                "previous_indent_level": [
                    "str",
                    "List[str]",
                    "bool",
                    "float",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "continued_indentation": {
            "name": "continued_indentation",
            "location": 445,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "logical_line": [
                    "Dict[str, Any]",
                    "float",
                    "int",
                    "Optional[str]",
                    "bool",
                    "Callable[..., None]"
                ],
                "tokens": [
                    "int",
                    "Dict[str, str]",
                    "Optional[str]",
                    "str",
                    "set"
                ],
                "indent_level": [
                    "int",
                    "Tuple[int, int]",
                    "float",
                    "Dict[Tuple[int, int], int]",
                    "Optional[bool]"
                ],
                "hang_closing": [
                    "Dict[str, Any]",
                    "float",
                    "int",
                    "Optional[str]",
                    "bool",
                    "Callable[..., None]"
                ],
                "indent_char": [
                    "Dict[str, Any]",
                    "float",
                    "int",
                    "Optional[str]",
                    "bool",
                    "Callable[..., None]"
                ],
                "noqa": [
                    "Dict[str, Any]",
                    "float",
                    "int",
                    "Optional[str]",
                    "bool",
                    "Callable[..., None]"
                ],
                "verbose": [
                    "bool",
                    "int",
                    "Callable"
                ]
            }
        },
        "whitespace_before_parameters": {
            "name": "whitespace_before_parameters",
            "location": 644,
            "return": [
                ""
            ],
            "arguments": {
                "logical_line": [
                    "bool",
                    "Type[T]",
                    "List[str]",
                    "str"
                ],
                "tokens": [
                    "int"
                ]
            }
        },
        "whitespace_around_operator": {
            "name": "whitespace_around_operator",
            "location": 676,
            "return": [
                ""
            ],
            "arguments": {
                "logical_line": [
                    "Sequence[str]",
                    "Tuple[str, str]",
                    "os.DirEntry",
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "missing_whitespace_around_operator": {
            "name": "missing_whitespace_around_operator",
            "location": 699,
            "return": [
                ""
            ],
            "arguments": {
                "logical_line": [
                    "str",
                    "bool",
                    "Callable",
                    "os.DirEntry"
                ],
                "tokens": [
                    "str",
                    "bool",
                    "Callable",
                    "os.DirEntry"
                ]
            }
        },
        "whitespace_around_comma": {
            "name": "whitespace_around_comma",
            "location": 791,
            "return": [
                ""
            ],
            "arguments": {
                "logical_line": [
                    "str",
                    "List[str]",
                    "Set[str]",
                    "float",
                    "List[Union[\"PipeChain\", str]]"
                ]
            }
        },
        "whitespace_around_named_parameter_equals": {
            "name": "whitespace_around_named_parameter_equals",
            "location": 809,
            "return": [
                ""
            ],
            "arguments": {
                "logical_line": [
                    "str",
                    "Optional[str]"
                ],
                "tokens": [
                    "bool",
                    "str",
                    "Type[T]",
                    "Optional[bool]"
                ]
            }
        },
        "whitespace_before_comment": {
            "name": "whitespace_before_comment",
            "location": 859,
            "return": [
                ""
            ],
            "arguments": {
                "logical_line": [
                    "str",
                    "bool",
                    "Callable",
                    "os.DirEntry"
                ],
                "tokens": [
                    "str",
                    "bool",
                    "Callable",
                    "os.DirEntry"
                ]
            }
        },
        "imports_on_separate_lines": {
            "name": "imports_on_separate_lines",
            "location": 900,
            "return": [
                ""
            ],
            "arguments": {
                "logical_line": [
                    "str",
                    "List[str]",
                    "float"
                ]
            }
        },
        "module_imports_on_top_of_file": {
            "name": "module_imports_on_top_of_file",
            "location": 919,
            "return": [
                "T",
                "os.DirEntry"
            ],
            "arguments": {
                "logical_line": [
                    "bytes",
                    "bool",
                    "str",
                    "List[str]",
                    "float"
                ],
                "indent_level": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "BinaryIO",
                    "Optional[int]"
                ],
                "checker_state": [
                    "bool",
                    "Dict[str, bool]",
                    "Dict[str, Type[Any]]",
                    "Dict[str, Dict[str, str]]",
                    "str"
                ],
                "noqa": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "BinaryIO",
                    "Optional[int]"
                ]
            }
        },
        "compound_statements": {
            "name": "compound_statements",
            "location": 975,
            "return": [
                ""
            ],
            "arguments": {
                "logical_line": [
                    "str",
                    "List[str]",
                    "Iterator[str]",
                    "Callable"
                ]
            }
        },
        "explicit_line_join": {
            "name": "explicit_line_join",
            "location": 1035,
            "return": [
                ""
            ],
            "arguments": {
                "logical_line": [
                    "str",
                    "bool",
                    "Type[T]",
                    "Optional[bool]",
                    "List[Tuple[str, str]]"
                ],
                "tokens": [
                    "str",
                    "bool",
                    "Type[T]",
                    "Optional[bool]",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "break_around_binary_operator": {
            "name": "break_around_binary_operator",
            "location": 1074,
            "return": [
                ""
            ],
            "arguments": {
                "logical_line": [
                    "str",
                    "bool",
                    "Callable",
                    "os.DirEntry"
                ],
                "tokens": [
                    "str",
                    "bool",
                    "Callable",
                    "os.DirEntry"
                ]
            }
        },
        "comparison_to_singleton": {
            "name": "comparison_to_singleton",
            "location": 1123,
            "return": [
                ""
            ],
            "arguments": {
                "logical_line": [
                    "str",
                    "bytes",
                    "int",
                    "Optional[int]",
                    "Optional[Callable[[Any, Any], None]]"
                ],
                "noqa": [
                    "str",
                    "bytes",
                    "int",
                    "Optional[int]",
                    "Optional[Callable[[Any, Any], None]]"
                ]
            }
        },
        "comparison_negative": {
            "name": "comparison_negative",
            "location": 1157,
            "return": [
                ""
            ],
            "arguments": {
                "logical_line": [
                    "str"
                ]
            }
        },
        "comparison_type": {
            "name": "comparison_type",
            "location": 1178,
            "return": [
                "Iterator[Tuple[str, str]]",
                "int",
                "Optional[str]",
                "Optional[bool]"
            ],
            "arguments": {
                "logical_line": [
                    "str",
                    "BinaryIO"
                ],
                "noqa": [
                    "bool"
                ]
            }
        },
        "bare_except": {
            "name": "bare_except",
            "location": 1201,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "logical_line": [
                    "str",
                    "Optional[int]",
                    "int",
                    "List[str]"
                ],
                "noqa": [
                    "str",
                    "bool",
                    "List[str]",
                    "Union[List[str], str]",
                    "list",
                    "Iterable[str]"
                ]
            }
        },
        "ambiguous_identifier": {
            "name": "ambiguous_identifier",
            "location": 1217,
            "return": [
                ""
            ],
            "arguments": {
                "logical_line": [
                    "str",
                    "bool",
                    "Callable",
                    "os.DirEntry"
                ],
                "tokens": [
                    "T",
                    "Exception"
                ]
            }
        },
        "python_3000_has_key": {
            "name": "python_3000_has_key",
            "location": 1269,
            "return": [
                ""
            ],
            "arguments": {
                "logical_line": [
                    "str",
                    "List[str]",
                    "Callable",
                    "Sequence[str]"
                ],
                "noqa": [
                    "str",
                    "List[str]",
                    "Callable",
                    "Sequence[str]"
                ]
            }
        },
        "python_3000_raise_comma": {
            "name": "python_3000_raise_comma",
            "location": 1280,
            "return": [
                ""
            ],
            "arguments": {
                "logical_line": [
                    "str",
                    "Pattern[str]",
                    "Match[Any]"
                ]
            }
        },
        "python_3000_not_equal": {
            "name": "python_3000_not_equal",
            "location": 1293,
            "return": [
                ""
            ],
            "arguments": {
                "logical_line": [
                    "Sequence[str]",
                    "Tuple[str, str]",
                    "os.DirEntry",
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "python_3000_backticks": {
            "name": "python_3000_backticks",
            "location": 1306,
            "return": [
                ""
            ],
            "arguments": {
                "logical_line": [
                    "Sequence[str]",
                    "Tuple[str, str]",
                    "os.DirEntry",
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "expand_indent": {
            "name": "expand_indent",
            "location": 1352,
            "return": [
                "int",
                "Optional[int]",
                "List[int]"
            ],
            "arguments": {
                "line": [
                    "str",
                    "Iterator[str]",
                    "int"
                ]
            }
        },
        "mute_string": {
            "name": "mute_string",
            "location": 1379,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "parse_udiff": {
            "name": "parse_udiff",
            "location": 1399,
            "return": [
                "bytes",
                "str",
                "Callable",
                "int"
            ],
            "arguments": {
                "diff": [
                    "int",
                    "bool"
                ],
                "patterns": [
                    "List[str]",
                    "str",
                    "Optional[List[str]]",
                    "Callable"
                ],
                "parent": [
                    "List[str]",
                    "str",
                    "Optional[List[str]]",
                    "Callable"
                ]
            }
        },
        "normalize_paths": {
            "name": "normalize_paths",
            "location": 1424,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Mapping",
                    "Optional[str]",
                    "Iterable[object]"
                ],
                "parent": [
                    "str"
                ]
            }
        },
        "filename_match": {
            "name": "filename_match",
            "location": 1442,
            "return": [
                "str",
                "Optional[str]",
                "Callable[[KT], VT]",
                "Type[T]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "int",
                    "bytes"
                ],
                "patterns": [
                    "str",
                    "int",
                    "bytes"
                ],
                "default": [
                    "str",
                    "bool",
                    "List[str]",
                    "Type[T]",
                    "Callable[[int], None]",
                    "Iterable[str]"
                ]
            }
        },
        "update_counts": {
            "name": "update_counts",
            "location": 1452,
            "return": [
                ""
            ],
            "arguments": {
                "s": [
                    "str",
                    "Union[str, bytes]",
                    "Callable",
                    "Optional[str]"
                ],
                "counts": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "_is_eol_token": {
            "name": "_is_eol_token",
            "location": 1465,
            "return": [
                "str",
                "Callable",
                "bool",
                "float",
                "int"
            ],
            "arguments": {
                "token": [
                    "bytes",
                    "str"
                ],
                "_eol_token": [
                    "bytes",
                    "str"
                ]
            }
        },
        "_get_parameters": {
            "name": "_get_parameters",
            "location": 1477,
            "return": [
                "List[str]",
                "Iterable[str]",
                "List[Tuple[str, Any]]",
                "str",
                "bool"
            ],
            "arguments": {
                "function": [
                    "str"
                ]
            }
        },
        "register_check": {
            "name": "register_check",
            "location": 1487,
            "return": [
                ""
            ],
            "arguments": {
                "check": [
                    "str",
                    "bool",
                    "Callable",
                    "List[str]"
                ],
                "codes": [
                    "Sequence[Any]",
                    "Dict[str, Any]",
                    "bool",
                    "Callable[[], None]",
                    "float",
                    "int"
                ]
            }
        },
        "init_checks_registry": {
            "name": "init_checks_registry",
            "location": 1505,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "get_parser": {
            "name": "get_parser",
            "location": 2088,
            "return": [],
            "arguments": {
                "prog": [
                    "str",
                    "bool",
                    "int"
                ],
                "version": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "read_config": {
            "name": "read_config",
            "location": 2150,
            "return": [
                "list",
                "str",
                "Sequence[str]",
                "List[Dict[str, Any]]",
                "bool",
                "int"
            ],
            "arguments": {
                "options": [
                    "configparser.ConfigParser",
                    "Type[MutableMapping]",
                    "Tuple[float, float, float, float]"
                ],
                "args": [],
                "arglist": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "parser": [
                    "dict"
                ]
            }
        },
        "process_options": {
            "name": "process_options",
            "location": 2225,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]"
            ],
            "arguments": {
                "arglist": [
                    "Dict[str, Any]",
                    "configparser.RawConfigParser",
                    "TextIO",
                    "tuple"
                ],
                "parse_argv": [
                    "Dict[str, Any]",
                    "Optional[str]",
                    "str"
                ],
                "config_file": [
                    "str",
                    "bool",
                    "TextIO",
                    "Optional[str]"
                ],
                "parser": [
                    "List[str]",
                    "configparser.ConfigParser"
                ]
            }
        },
        "_parse_multi_options": {
            "name": "_parse_multi_options",
            "location": 2276,
            "return": [
                "list",
                "List[Dict[str, Any]]",
                "frozenset",
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "options": [
                    "str",
                    "List[str]"
                ],
                "split_token": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "_main": {
            "name": "_main",
            "location": 2292,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "module_imports_on_top_of_file.is_string_literal": {
            "name": "is_string_literal",
            "location": 940,
            "return": [
                "bool",
                "Optional[Callable[[bool], None]]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        },
        "break_around_binary_operator.is_binary_operator": {
            "name": "is_binary_operator",
            "location": 1094,
            "return": [
                "bool",
                "int",
                "type",
                "Tuple[str]",
                "Union[type, Tuple[type, ...]]"
            ],
            "arguments": {
                "token_type": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "readlines": {
            "name": "readlines",
            "location": 1332,
            "return": [
                "Dict[int, int]",
                "Set[str]",
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "stdin_get_value": {
            "name": "stdin_get_value",
            "location": 1345,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "register_check._add_check": {
            "name": "_add_check",
            "location": 1489,
            "return": [
                ""
            ],
            "arguments": {
                "check": [
                    "str",
                    "Mapping[str, Any]",
                    "Callable",
                    "int",
                    "dict"
                ],
                "kind": [
                    "str",
                    "Mapping[str, Any]",
                    "Callable",
                    "int",
                    "dict"
                ],
                "codes": [
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "Literal",
                    "bool",
                    "Callable",
                    "str",
                    "bytes"
                ],
                "args": []
            }
        },
        "Checker.__init__": {
            "name": "__init__",
            "location": 1521,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "int",
                    "Iterator[int]"
                ],
                "lines": [
                    "str",
                    "Optional[str]"
                ],
                "options": [
                    "Union[List, Dict, None]",
                    "Optional[float]",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "report": [
                    "int",
                    "List[str]",
                    "configparser.ConfigParser",
                    "bool"
                ]
            }
        },
        "Checker.report_invalid_syntax": {
            "name": "report_invalid_syntax",
            "location": 1564,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Checker.readline": {
            "name": "readline",
            "location": 1577,
            "return": [
                "str",
                "list",
                "Sequence[str]",
                "List[str]",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Checker.run_check": {
            "name": "run_check",
            "location": 1587,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "check": [
                    "int",
                    "dict",
                    "bool",
                    "str"
                ],
                "argument_names": [
                    "str",
                    "bool",
                    "List[Union[int, Any]]"
                ]
            }
        },
        "Checker.init_checker_state": {
            "name": "init_checker_state",
            "location": 1594,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "float"
                ],
                "argument_names": [
                    "str",
                    "int",
                    "bool",
                    "Tuple[int, int]"
                ]
            }
        },
        "Checker.check_physical": {
            "name": "check_physical",
            "location": 1599,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        },
        "Checker.build_tokens_line": {
            "name": "build_tokens_line",
            "location": 1611,
            "return": [
                "str",
                "IO",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Checker.check_logical": {
            "name": "check_logical",
            "location": 1644,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Checker.check_ast": {
            "name": "check_ast",
            "location": 1678,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Checker.generate_tokens": {
            "name": "generate_tokens",
            "location": 1690,
            "return": [
                "Dict[str, Dict[str, int]]",
                "str",
                "Dict[str, Any]",
                "Union[tuple, list]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Checker.maybe_check_physical": {
            "name": "maybe_check_physical",
            "location": 1705,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "Checker.check_all": {
            "name": "check_all",
            "location": 1735,
            "return": [
                "str",
                "Dict[str, str]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "expected": [
                    "str"
                ],
                "line_offset": [
                    "str"
                ]
            }
        },
        "BaseReport.__init__": {
            "name": "__init__",
            "location": 1794,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "options": [
                    "dict",
                    "Dict[str, Any]",
                    "Callable[[str], bool]",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "BaseReport.start": {
            "name": "start",
            "location": 1803,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseReport.stop": {
            "name": "stop",
            "location": 1807,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseReport.init_file": {
            "name": "init_file",
            "location": 1811,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "lines": [
                    "str",
                    "int"
                ],
                "expected": [
                    "str",
                    "int",
                    "bool"
                ],
                "line_offset": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "BaseReport.increment_logical_line": {
            "name": "increment_logical_line",
            "location": 1821,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseReport.error": {
            "name": "error",
            "location": 1825,
            "return": [
                "bool",
                "Iterable[str]",
                "Callable",
                "Hashable"
            ],
            "arguments": {
                "self": [],
                "line_number": [
                    "str",
                    "list",
                    "Optional[str]",
                    "bool"
                ],
                "offset": [
                    "str",
                    "list",
                    "Optional[str]",
                    "bool"
                ],
                "text": [
                    "str"
                ],
                "check": [
                    "str",
                    "list",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "BaseReport.get_file_results": {
            "name": "get_file_results",
            "location": 1844,
            "return": [
                "Optional[str]",
                "str",
                "Set[str]",
                "Dict[str, tuple]",
                "tuple",
                "IO",
                "List[str]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseReport.get_count": {
            "name": "get_count",
            "location": 1848,
            "return": [
                "bool",
                "int",
                "Dict[str, bool]",
                "str"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ]
            }
        },
        "BaseReport.get_statistics": {
            "name": "get_statistics",
            "location": 1853,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str",
                    "dict",
                    "bool"
                ]
            }
        },
        "BaseReport.print_statistics": {
            "name": "print_statistics",
            "location": 1864,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BaseReport.print_benchmark": {
            "name": "print_benchmark",
            "location": 1869,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "StandardReport.__init__": {
            "name": "__init__",
            "location": 1888,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "options": [
                    "Dict[str, Any]",
                    "dict",
                    "float",
                    "Optional[str]"
                ]
            }
        },
        "StandardReport.init_file": {
            "name": "init_file",
            "location": 1896,
            "return": [
                "bool",
                "Dict[str, str]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "lines": [
                    "str"
                ],
                "expected": [
                    "str"
                ],
                "line_offset": [
                    "str"
                ]
            }
        },
        "StandardReport.error": {
            "name": "error",
            "location": 1902,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "line_number": [
                    "str",
                    "Dict[str, Any]"
                ],
                "offset": [
                    "str",
                    "Dict[str, Any]"
                ],
                "text": [
                    "str",
                    "Dict[str, Any]"
                ],
                "check": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "StandardReport.get_file_results": {
            "name": "get_file_results",
            "location": 1911,
            "return": [
                "Optional[str]",
                "str",
                "Set[str]",
                "Dict[str, tuple]",
                "tuple",
                "IO",
                "List[str]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiffReport.__init__": {
            "name": "__init__",
            "location": 1943,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "options": [
                    "Optional[Iterable[Any]]",
                    "dict"
                ]
            }
        },
        "DiffReport.error": {
            "name": "error",
            "location": 1947,
            "return": [
                "Optional[Dict[str, str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "line_number": [
                    "str",
                    "Sequence[str]"
                ],
                "offset": [
                    "Tuple[int]",
                    "str"
                ],
                "text": [
                    "Tuple[int]",
                    "str"
                ],
                "check": [
                    "Tuple[int]",
                    "str"
                ]
            }
        },
        "StyleGuide.__init__": {
            "name": "__init__",
            "location": 1956,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "StyleGuide.init_report": {
            "name": "init_report",
            "location": 1993,
            "return": [
                "bool",
                "Dict[str, Tuple[str, str]]",
                "Optional[str]",
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "reporter": [
                    "Callable[[Mapping], Awaitable]",
                    "Callable[[], Awaitable[Mapping]]",
                    "str",
                    "int",
                    "Optional[BaseException]"
                ]
            }
        },
        "StyleGuide.check_files": {
            "name": "check_files",
            "location": 1998,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "paths": [
                    "Optional[str]",
                    "str",
                    "Optional[Sequence[str]]"
                ]
            }
        },
        "StyleGuide.input_file": {
            "name": "input_file",
            "location": 2016,
            "return": [
                "int",
                "bool",
                "List[str]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "int"
                ],
                "lines": [
                    "str"
                ],
                "expected": [
                    "str"
                ],
                "line_offset": [
                    "str"
                ]
            }
        },
        "StyleGuide.input_dir": {
            "name": "input_dir",
            "location": 2024,
            "return": [
                "str",
                "Type[Any]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "dirname": [
                    "str",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "StyleGuide.excluded": {
            "name": "excluded",
            "location": 2046,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "IO",
                    "int"
                ],
                "parent": [
                    "str"
                ]
            }
        },
        "StyleGuide.ignore_code": {
            "name": "ignore_code",
            "location": 2061,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "Union[os.PathLike, str]"
                ]
            }
        },
        "StyleGuide.get_checks": {
            "name": "get_checks",
            "location": 2074,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "argument_name": [
                    "str",
                    "Union[Literal, str]",
                    "List[str]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/linting/sublime.py": {
        "erase_lint_marks": {
            "name": "erase_lint_marks",
            "location": 183,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "view": [
                    "sublime.View",
                    "Optional[sublime.View]"
                ]
            }
        },
        "add_lint_marks": {
            "name": "add_lint_marks",
            "location": 195,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "view": [
                    "Optional[sublime.View]",
                    "bool",
                    "Optional[int]"
                ],
                "lines": [
                    "str",
                    "List[str]",
                    "dict",
                    "int",
                    "Union[str, int]"
                ]
            }
        },
        "get_outlines": {
            "name": "get_outlines",
            "location": 271,
            "return": [
                "dict[typing.Text, list]",
                "str",
                "bytes"
            ],
            "arguments": {
                "view": [
                    "sublime.View",
                    "Optional[sublime.View]"
                ]
            }
        },
        "last_selected_lineno": {
            "name": "last_selected_lineno",
            "location": 293,
            "return": [
                "None",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "Optional[Dict]",
                "dict",
                "Optional[List[Any]]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "view": [
                    "str",
                    "Optional[int]",
                    "Callable"
                ]
            }
        },
        "update_statusbar": {
            "name": "update_statusbar",
            "location": 301,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "view": [
                    "bool",
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_lineno_msgs": {
            "name": "get_lineno_msgs",
            "location": 312,
            "return": [
                "list",
                "str",
                "List[str]"
            ],
            "arguments": {
                "view": [
                    "Union[str, 'Path']"
                ],
                "lineno": [
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "run_linter": {
            "name": "run_linter",
            "location": 333,
            "return": [
                "Awaitable",
                "None"
            ],
            "arguments": {
                "view": [
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "hook": [
                    "None",
                    "str",
                    "Optional[float]",
                    "bool"
                ]
            }
        },
        "get_mypy_settings": {
            "name": "get_mypy_settings",
            "location": 385,
            "return": [
                "list[typing.Text]",
                "str",
                "bool"
            ],
            "arguments": {
                "view": [
                    "sublime.View",
                    "Optional[sublime.View]"
                ]
            }
        },
        "parse_results": {
            "name": "parse_results",
            "location": 417,
            "return": [
                "Iterator[Dict[str, str]]",
                "None"
            ],
            "arguments": {
                "data": [
                    "Dict[str, Any]",
                    "dict",
                    "bool",
                    "List[str]",
                    "Dict[str, str]"
                ],
                "code": [
                    "typing.Text",
                    "bytes",
                    "dict",
                    "bool"
                ]
            }
        },
        "Linter.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Linter.add_message": {
            "name": "add_message",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "lineno": [
                    "str"
                ],
                "lines": [
                    "T",
                    "str",
                    "Callable",
                    "Optional[List[\"DeliveryItem\"]]"
                ],
                "message": [
                    "str",
                    "int"
                ],
                "messages": [
                    "str",
                    "List[str]",
                    "IO",
                    "dict"
                ]
            }
        },
        "Linter.underline_range": {
            "name": "underline_range",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "lineno": [
                    "sublime.View",
                    "str",
                    "Sequence[Dict[str, Any]]"
                ],
                "position": [
                    "str",
                    "Callable[[], None]",
                    "int"
                ],
                "underlines": [
                    "str"
                ],
                "length": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "Linter.underline_regex": {
            "name": "underline_regex",
            "location": 80,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Linter.is_that_code": {
            "name": "is_that_code",
            "location": 113,
            "return": [
                "int",
                "str",
                "type"
            ],
            "arguments": {
                "self": [],
                "point": [
                    "int",
                    "Callable"
                ]
            }
        },
        "Linter.parse_errors": {
            "name": "parse_errors",
            "location": 120,
            "return": [
                "dict[typing.Text, typing.Union[set,dict[typing.Text, dict[typing.Text, list]]]]",
                "int",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": [],
                "errors": [
                    "Optional[T]",
                    "List[str]",
                    "int",
                    "Tuple[List[str], Optional[str]]",
                    "Optional[List[Any]]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/linting/__init__.py": {},
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/linting/pyflakes/checker.py": {
        "counter": {
            "name": "counter",
            "location": 84,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "items": [
                    "int",
                    "T",
                    "Optional[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "iter_child_nodes": {
            "name": "iter_child_nodes",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "node": [
                    "str",
                    "Callable[..., None]"
                ],
                "omit": [
                    "str",
                    "TextIO",
                    "int",
                    "List[int]",
                    "List[str]"
                ],
                "_fields_order": [
                    "int",
                    "bytes"
                ]
            }
        },
        "convert_to_value": {
            "name": "convert_to_value",
            "location": 111,
            "return": [
                "str"
            ],
            "arguments": {
                "item": [
                    "str",
                    "List[str]",
                    "Union[tuple, list]"
                ]
            }
        },
        "getNodeName": {
            "name": "getNodeName",
            "location": 449,
            "return": [
                "str",
                "Iterable[str]",
                "List[str]",
                "IO",
                "Optional[str]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "node": []
            }
        },
        "getNodeType": {
            "name": "getNodeType",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "node_class": [
                    "dict",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "getAlternatives": {
            "name": "getAlternatives",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "n": [
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "_FieldsOrder._get_fields": {
            "name": "_get_fields",
            "location": 68,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "node_class": [
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "_FieldsOrder.__missing__": {
            "name": "__missing__",
            "location": 79,
            "return": [
                "List[str]",
                "str",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "node_class": [
                    "Type",
                    "type",
                    "List[str]",
                    "str"
                ]
            }
        },
        "Binding.__init__": {
            "name": "__init__",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "source": [
                    "str",
                    "Mapping[str, str]",
                    "Optional[Callable[..., Any]]",
                    "Optional[float]"
                ]
            }
        },
        "Binding.__str__": {
            "name": "__str__",
            "location": 155,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Binding.__repr__": {
            "name": "__repr__",
            "location": 158,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Binding.redefines": {
            "name": "redefines",
            "location": 164,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "T"
                ]
            }
        },
        "VariableKey.__init__": {
            "name": "__init__",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "item": [
                    "OrderedDict",
                    "T"
                ]
            }
        },
        "VariableKey.__eq__": {
            "name": "__eq__",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "compare": [
                    "str",
                    "dict"
                ]
            }
        },
        "VariableKey.__hash__": {
            "name": "__hash__",
            "location": 195,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Importation.__init__": {
            "name": "__init__",
            "location": 208,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Iterable[str]",
                    "Callable"
                ],
                "source": [
                    "str",
                    "Optional[str]",
                    "Callable"
                ],
                "full_name": [
                    "str",
                    "Optional[str]",
                    "Optional[Sequence[Any]]"
                ]
            }
        },
        "Importation.redefines": {
            "name": "redefines",
            "location": 213,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "float",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Importation._has_alias": {
            "name": "_has_alias",
            "location": 219,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Importation.source_statement": {
            "name": "source_statement",
            "location": 224,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Importation.__str__": {
            "name": "__str__",
            "location": 231,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubmoduleImportation.__init__": {
            "name": "__init__",
            "location": 256,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict"
                ],
                "source": [
                    "str",
                    "Optional[str]",
                    "Type"
                ]
            }
        },
        "SubmoduleImportation.redefines": {
            "name": "redefines",
            "location": 263,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "SubmoduleImportation.__str__": {
            "name": "__str__",
            "location": 268,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubmoduleImportation.source_statement": {
            "name": "source_statement",
            "location": 272,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportationFrom.__init__": {
            "name": "__init__",
            "location": 278,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]",
                    "str",
                    "Sequence[Sequence[Any]]",
                    "List[str]"
                ],
                "source": [
                    "Optional[str]",
                    "str",
                    "int"
                ],
                "module": [
                    "str",
                    "Dict[str, Dict[str, str]]",
                    "Sequence[Any]",
                    "Mapping[str, Any]",
                    "dict"
                ],
                "real_name": [
                    "Dict[Hashable, Any]",
                    "dict",
                    "str",
                    "Sequence[Any]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "ImportationFrom.__str__": {
            "name": "__str__",
            "location": 289,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportationFrom.source_statement": {
            "name": "source_statement",
            "location": 297,
            "return": [
                "str",
                "Dict[str, str]",
                "bool",
                "Optional[Dict]",
                "Sequence[int]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StarImportation.__init__": {
            "name": "__init__",
            "location": 309,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "source": [
                    "str",
                    "List[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "StarImportation.source_statement": {
            "name": "source_statement",
            "location": 317,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StarImportation.__str__": {
            "name": "__str__",
            "location": 320,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FutureImportation.__init__": {
            "name": "__init__",
            "location": 335,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "float"
                ],
                "source": [
                    "str",
                    "Optional[str]",
                    "Optional[Iterable[str]]"
                ],
                "scope": [
                    "bool",
                    "Optional[str]",
                    "float"
                ]
            }
        },
        "ExportBinding.__init__": {
            "name": "__init__",
            "location": 379,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "float"
                ],
                "source": [
                    "Optional[List[str]]",
                    "Optional[Any]",
                    "str",
                    "dict",
                    "bool"
                ],
                "scope": [
                    "Optional[str]",
                    "Type",
                    "Optional[Set[str]]",
                    "Optional[Iterable[str]]",
                    "str"
                ]
            }
        },
        "Scope.__repr__": {
            "name": "__repr__",
            "location": 394,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionScope.__init__": {
            "name": "__init__",
            "location": 413,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionScope.unusedAssignments": {
            "name": "unusedAssignments",
            "location": 420,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Checker.__init__": {
            "name": "__init__",
            "location": 480,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "Iterable[bytes]",
                    "int",
                    "Tuple[str, str]",
                    "bool"
                ],
                "filename": [
                    "str",
                    "Dict[str, str]",
                    "dict"
                ],
                "builtins": [
                    "Callable[[], None]",
                    "Callable[[Callable], Callable[..., None]]"
                ],
                "withDoctest": [
                    "Iterable[bytes]",
                    "int",
                    "Tuple[str, str]",
                    "bool"
                ]
            }
        },
        "Checker.deferFunction": {
            "name": "deferFunction",
            "location": 507,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "callable": [
                    "list",
                    "str",
                    "Callable[[], None]",
                    "List[str]",
                    "tuple"
                ]
            }
        },
        "Checker.deferAssignment": {
            "name": "deferAssignment",
            "location": 518,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "callable": [
                    "str",
                    "list",
                    "tuple",
                    "Callable[[], None]"
                ]
            }
        },
        "Checker.runDeferred": {
            "name": "runDeferred",
            "location": 525,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "deferred": [
                    "str",
                    "bool"
                ]
            }
        },
        "Checker._in_doctest": {
            "name": "_in_doctest",
            "location": 534,
            "return": [
                "int",
                "Callable[[Mapping], T]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Checker.futuresAllowed": {
            "name": "futuresAllowed",
            "location": 547,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "Checker.scope": {
            "name": "scope",
            "location": 553,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Checker.popScope": {
            "name": "popScope",
            "location": 556,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Checker.checkDeadScopes": {
            "name": "checkDeadScopes",
            "location": 559,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Checker.pushScope": {
            "name": "pushScope",
            "location": 609,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "scopeClass": [
                    "List[str]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "Checker.report": {
            "name": "report",
            "location": 612,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "messageClass": [
                    "int"
                ]
            }
        },
        "Checker.getParent": {
            "name": "getParent",
            "location": 615,
            "return": [
                "Union[Sequence, 'SweepFixedValues']",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Checker.getCommonAncestor": {
            "name": "getCommonAncestor",
            "location": 622,
            "return": [
                "Optional[str]",
                "Optional[List[Any]]",
                "Optional[List[str]]",
                "Optional[Union[str, Any]]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "lnode": [
                    "bool",
                    "str",
                    "int",
                    "float"
                ],
                "rnode": [
                    "bool",
                    "str",
                    "int",
                    "float"
                ],
                "stop": [
                    "int",
                    "str",
                    "bytearray"
                ]
            }
        },
        "Checker.descendantOf": {
            "name": "descendantOf",
            "location": 635,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "ancestors": [],
                "stop": []
            }
        },
        "Checker.differentForks": {
            "name": "differentForks",
            "location": 641,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "lnode": [
                    "dict",
                    "str"
                ],
                "rnode": [
                    "dict",
                    "str"
                ]
            }
        },
        "Checker.addBinding": {
            "name": "addBinding",
            "location": 652,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ],
                "value": [
                    "str",
                    "dict",
                    "bool",
                    "Iterable",
                    "Optional[Iterable]"
                ]
            }
        },
        "Checker.getNodeHandler": {
            "name": "getNodeHandler",
            "location": 691,
            "return": [
                "str",
                "trezor.messages.TxInputType.TxInputType"
            ],
            "arguments": {
                "self": [],
                "node_class": [
                    "List[Type]",
                    "bool"
                ]
            }
        },
        "Checker.handleNodeLoad": {
            "name": "handleNodeLoad",
            "location": 699,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict"
                ]
            }
        },
        "Checker.handleNodeStore": {
            "name": "handleNodeStore",
            "location": 753,
            "return": [
                "str",
                "Optional[bool]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Checker.handleNodeDelete": {
            "name": "handleNodeDelete",
            "location": 784,
            "return": [
                "Iterator[Dict[str, str]]",
                "Type"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Type",
                    "str",
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "Checker.handleChildren": {
            "name": "handleChildren",
            "location": 814,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tree": [],
                "omit": []
            }
        },
        "Checker.isLiteralTupleUnpacking": {
            "name": "isLiteralTupleUnpacking",
            "location": 818,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Checker.isDocstring": {
            "name": "isDocstring",
            "location": 825,
            "return": [
                "int",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict"
                ]
            }
        },
        "Checker.getDocstring": {
            "name": "getDocstring",
            "location": 833,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "bool",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict"
                ]
            }
        },
        "Checker.handleNode": {
            "name": "handleNode",
            "location": 847,
            "return": [
                "int",
                "str",
                "DefaultDict"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Optional[List[Any]]",
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "parent": [
                    "Optional[\"TreeNode\"]"
                ]
            }
        },
        "Checker.handleDoctests": {
            "name": "handleDoctests",
            "location": 871,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ]
            }
        },
        "Checker.ignore": {
            "name": "ignore",
            "location": 910,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[int]"
                ]
            }
        },
        "Checker.DICT": {
            "name": "DICT",
            "location": 942,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Checker.ASSERT": {
            "name": "ASSERT",
            "location": 978,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int",
                    "Type"
                ]
            }
        },
        "Checker.GLOBAL": {
            "name": "GLOBAL",
            "location": 983,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "dict"
                ]
            }
        },
        "Checker.GENERATOREXP": {
            "name": "GENERATOREXP",
            "location": 1015,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int"
                ]
            }
        },
        "Checker.NAME": {
            "name": "NAME",
            "location": 1024,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Checker.CONTINUE": {
            "name": "CONTINUE",
            "location": 1044,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Optional[Any]"
                ]
            }
        },
        "Checker.RETURN": {
            "name": "RETURN",
            "location": 1069,
            "return": [
                "Optional[bool]",
                "Union[tuple, list]",
                "str",
                "Dict[str, Any]",
                "tuple",
                "int"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Checker.YIELD": {
            "name": "YIELD",
            "location": 1082,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict"
                ]
            }
        },
        "Checker.FUNCTIONDEF": {
            "name": "FUNCTIONDEF",
            "location": 1092,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Checker.LAMBDA": {
            "name": "LAMBDA",
            "location": 1106,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[int]"
                ]
            }
        },
        "Checker.CLASSDEF": {
            "name": "CLASSDEF",
            "location": 1187,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int"
                ]
            }
        },
        "Checker.AUGASSIGN": {
            "name": "AUGASSIGN",
            "location": 1212,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict"
                ]
            }
        },
        "Checker.TUPLE": {
            "name": "TUPLE",
            "location": 1217,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Tuple[object]",
                    "dict"
                ]
            }
        },
        "Checker.IMPORT": {
            "name": "IMPORT",
            "location": 1242,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Checker.IMPORTFROM": {
            "name": "IMPORTFROM",
            "location": 1251,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict"
                ]
            }
        },
        "Checker.TRY": {
            "name": "TRY",
            "location": 1283,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Checker.EXCEPTHANDLER": {
            "name": "EXCEPTHANDLER",
            "location": 1305,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict"
                ]
            }
        },
        "Checker.handleNodeDelete.on_conditional_branch": {
            "name": "on_conditional_branch",
            "location": 786,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "Checker.LAMBDA.runFunction": {
            "name": "runFunction",
            "location": 1152,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Checker.LAMBDA.addArgs": {
            "name": "addArgs",
            "location": 1111,
            "return": [
                ""
            ],
            "arguments": {
                "arglist": [
                    "bool",
                    "str",
                    "Tuple[float, int]",
                    "int"
                ]
            }
        },
        "Checker.LAMBDA.runFunction.checkUnusedAssignments": {
            "name": "checkUnusedAssignments",
            "location": 1165,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Checker.LAMBDA.runFunction.checkReturnWithArgumentInsideGenerator": {
            "name": "checkReturnWithArgumentInsideGenerator",
            "location": 1174,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/linting/pyflakes/messages.py": {
        "Message.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[str]"
                ],
                "loc": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "Message.__str__": {
            "name": "__str__",
            "location": 15,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnusedImport.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[int]"
                ],
                "loc": [
                    "str",
                    "Optional[int]"
                ],
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "RedefinedWhileUnused.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[int]"
                ],
                "loc": [
                    "str",
                    "Optional[int]"
                ],
                "name": [
                    "str"
                ],
                "orig_loc": [
                    "str"
                ]
            }
        },
        "RedefinedInListComp.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[int]"
                ],
                "loc": [
                    "str",
                    "Optional[int]"
                ],
                "name": [
                    "str"
                ],
                "orig_loc": [
                    "str"
                ]
            }
        },
        "ImportShadowedByLoopVar.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[int]"
                ],
                "loc": [
                    "str",
                    "Optional[int]"
                ],
                "name": [
                    "str"
                ],
                "orig_loc": [
                    "str"
                ]
            }
        },
        "ImportStarNotPermitted.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[int]"
                ],
                "loc": [
                    "str",
                    "Optional[int]"
                ],
                "modname": [
                    "bool",
                    "List[str]",
                    "str"
                ]
            }
        },
        "ImportStarUsed.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[int]"
                ],
                "loc": [
                    "str",
                    "Optional[int]"
                ],
                "modname": [
                    "bool",
                    "List[str]",
                    "str"
                ]
            }
        },
        "ImportStarUsage.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "bool",
                    "str"
                ],
                "loc": [
                    "bool",
                    "str"
                ],
                "name": [
                    "str",
                    "bool",
                    "Set[str]",
                    "List[\"Taxon\"]"
                ],
                "from_list": [
                    "str",
                    "bool",
                    "Set[str]",
                    "List[\"Taxon\"]"
                ]
            }
        },
        "UndefinedName.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[int]"
                ],
                "loc": [
                    "str",
                    "Optional[int]"
                ],
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "DoctestSyntaxError.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[int]"
                ],
                "loc": [
                    "str",
                    "Optional[int]"
                ],
                "position": [
                    "None",
                    "int",
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "UndefinedExport.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[int]"
                ],
                "loc": [
                    "str",
                    "Optional[int]"
                ],
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "UndefinedLocal.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[int]"
                ],
                "loc": [
                    "str",
                    "Optional[int]"
                ],
                "name": [
                    "str"
                ],
                "orig_loc": [
                    "str"
                ]
            }
        },
        "DuplicateArgument.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[int]"
                ],
                "loc": [
                    "str",
                    "Optional[int]"
                ],
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "MultiValueRepeatedKeyLiteral.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[int]",
                    "bool"
                ],
                "loc": [
                    "str",
                    "Optional[int]",
                    "bool"
                ],
                "key": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "bytes",
                    "Optional[dict]",
                    "Optional[str]"
                ]
            }
        },
        "MultiValueRepeatedKeyVariable.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[int]",
                    "bool"
                ],
                "loc": [
                    "str",
                    "Optional[int]",
                    "bool"
                ],
                "key": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "bytes",
                    "Optional[dict]",
                    "Optional[str]"
                ]
            }
        },
        "LateFutureImport.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[int]"
                ],
                "loc": [
                    "str",
                    "Optional[int]"
                ],
                "names": [
                    "str",
                    "Set[Union[Any, Any]]",
                    "List[str]",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "FutureFeatureNotDefined.__init__": {
            "name": "__init__",
            "location": 147,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[int]"
                ],
                "loc": [
                    "str",
                    "Optional[int]"
                ],
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "UnusedVariable.__init__": {
            "name": "__init__",
            "location": 159,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[int]"
                ],
                "loc": [
                    "str",
                    "Optional[int]"
                ],
                "names": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/linting/pyflakes/__init__.py": {},
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/workers/interpreter.py": {
        "Interpreter.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "interpreter_string": [
                    "str",
                    "bool",
                    "int",
                    "List[List[str]]"
                ]
            }
        },
        "Interpreter.__getattr__": {
            "name": "__getattr__",
            "location": 29,
            "return": [
                "str",
                "Tuple[str]",
                "Union[str, List[str]]"
            ],
            "arguments": {
                "self": [],
                "attr_name": [
                    "str",
                    "Optional[str]",
                    "List[int]"
                ]
            }
        },
        "Interpreter.raw_interpreter": {
            "name": "raw_interpreter",
            "location": 36,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Interpreter.for_local": {
            "name": "for_local",
            "location": 40,
            "return": [
                "bool",
                "Callable[[Mapping], T]",
                "List[List[str]]",
                "int",
                "str",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Interpreter.for_remote": {
            "name": "for_remote",
            "location": 47,
            "return": [
                "bool",
                "Callable[[Mapping], T]",
                "List[List[str]]",
                "int",
                "str",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Interpreter.for_vagrant": {
            "name": "for_vagrant",
            "location": 54,
            "return": [
                "bool",
                "Callable[[Mapping], T]",
                "List[List[str]]",
                "int",
                "str",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Interpreter.project_name": {
            "name": "project_name",
            "location": 61,
            "return": [
                "str",
                "Union[str, Pattern]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Interpreter.renew_interpreter": {
            "name": "renew_interpreter",
            "location": 70,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Interpreter.__prepare_local_interpreter": {
            "name": "__prepare_local_interpreter",
            "location": 79,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Interpreter.__extract_port": {
            "name": "__extract_port",
            "location": 104,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "Interpreter.__extract_paths": {
            "name": "__extract_paths",
            "location": 125,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "str",
                    "float"
                ]
            }
        },
        "Interpreter.__extract_python_interpreter": {
            "name": "__extract_python_interpreter",
            "location": 144,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "str"
                ]
            }
        },
        "Interpreter.__extract_script": {
            "name": "__extract_script",
            "location": 163,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Interpreter.__get_unix_domain_socket": {
            "name": "__get_unix_domain_socket",
            "location": 172,
            "return": [
                "typing.Text",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Interpreter.__parse_raw_interpreter": {
            "name": "__parse_raw_interpreter",
            "location": 181,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Interpreter.__repr__": {
            "name": "__repr__",
            "location": 242,
            "return": [
                "str",
                "int",
                "typing.Text",
                "sublime.View",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/workers/local_process.py": {
        "LocalProcess.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "interpreter": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "LocalProcess.healthy": {
            "name": "healthy",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalProcess.start": {
            "name": "start",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalProcess.stop": {
            "name": "stop",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalProcess._set_wrong_config_error": {
            "name": "_set_wrong_config_error",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/workers/local_worker.py": {
        "LocalWorker.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "interpreter": [
                    "str",
                    "bytes",
                    "Iterable[str]"
                ]
            }
        },
        "LocalWorker.check": {
            "name": "check",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalWorker.start": {
            "name": "start",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalWorker.stop": {
            "name": "stop",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalWorker.on_python_interpreter_switch": {
            "name": "on_python_interpreter_switch",
            "location": 64,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "raw_python_interpreter": [
                    "dict",
                    "int",
                    "tuple"
                ]
            }
        },
        "LocalWorker._update_python_builder": {
            "name": "_update_python_builder",
            "location": 89,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalWorker._status": {
            "name": "_status",
            "location": 99,
            "return": [
                "dict",
                "IO[str]",
                "Dict[str, Any]",
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "float",
                    "int",
                    "Optional[str]",
                    "Optional[int]",
                    "Dict[int, Dict[str, float]]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/workers/market.py": {
        "Market.hire": {
            "name": "hire",
            "location": 27,
            "return": [
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Market.add": {
            "name": "add",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "window_id": [
                    "str",
                    "int"
                ],
                "worker": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "Market.get": {
            "name": "get",
            "location": 48,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "window_id": [
                    "str",
                    "int"
                ]
            }
        },
        "Market.fire": {
            "name": "fire",
            "location": 57,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "window_id": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "Market.execute": {
            "name": "execute",
            "location": 70,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict",
                    "type",
                    "int"
                ],
                "callback": [
                    "Callable",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "Market.lookup": {
            "name": "lookup",
            "location": 111,
            "return": [
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int"
                ],
                "window_id": [
                    "str",
                    "int"
                ]
            }
        },
        "Market._repr": {
            "name": "_repr",
            "location": 118,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "list",
                    "deque",
                    "OrderedDict",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "Market.execute._start_worker": {
            "name": "_start_worker",
            "location": 74,
            "return": [
                "None",
                "Union[tuple, list]",
                "Dict[str, Any]",
                "List[int]",
                "str"
            ],
            "arguments": {
                "wk": [
                    "int",
                    "str",
                    "bool"
                ],
                "cb": [
                    "int",
                    "float",
                    "str",
                    "Collection[int]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/workers/process.py": {
        "WorkerProcess.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "interpreter": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "WorkerProcess.take": {
            "name": "take",
            "location": 19,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/workers/remote_process.py": {
        "StubProcess.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "interpreter": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "StubProcess.start": {
            "name": "start",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/workers/remote_worker.py": {
        "RemoteWorker.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "interpreter": [
                    "str",
                    "bytes",
                    "Iterable[str]"
                ]
            }
        },
        "RemoteWorker.stop": {
            "name": "stop",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoteWorker.check": {
            "name": "check",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoteWorker.on_python_interpreter_switch": {
            "name": "on_python_interpreter_switch",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "raw_python_interpreter": [
                    "int",
                    "dict"
                ]
            }
        },
        "RemoteWorker._status": {
            "name": "_status",
            "location": 66,
            "return": [
                "dict",
                "IO[str]",
                "Dict[str, Any]",
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "int",
                    "Optional[str]",
                    "Optional[int]",
                    "Dict[int, Dict[str, float]]"
                ]
            }
        },
        "RemoteWorker.on_python_interpreter_switch._fire_worker": {
            "name": "_fire_worker",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/workers/vagrant_process.py": {
        "VagrantProcess.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "interpreter": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "VagrantProcess.healthy": {
            "name": "healthy",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VagrantProcess.start": {
            "name": "start",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VagrantProcess._up_already": {
            "name": "_up_already",
            "location": 70,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VagrantProcess._prepare_arguments": {
            "name": "_prepare_arguments",
            "location": 85,
            "return": [
                "str",
                "tuple[dict[typing.Text, ]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VagrantProcess._compose_script_file": {
            "name": "_compose_script_file",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VagrantProcess._compose_extra_paths": {
            "name": "_compose_extra_paths",
            "location": 118,
            "return": [
                "list",
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/workers/vagrant_worker.py": {
        "VagrantWorker.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "interpreter": [
                    "str",
                    "bytes",
                    "Iterable[str]"
                ]
            }
        },
        "VagrantWorker.start": {
            "name": "start",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VagrantWorker.check_config": {
            "name": "check_config",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VagrantWorker.check": {
            "name": "check",
            "location": 106,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VagrantWorker.stop": {
            "name": "stop",
            "location": 128,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VagrantWorker.on_python_interpreter_switch": {
            "name": "on_python_interpreter_switch",
            "location": 136,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "raw_python_interpreter": [
                    "int",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "VagrantWorker._check_status": {
            "name": "_check_status",
            "location": 160,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VagrantWorker._status": {
            "name": "_status",
            "location": 182,
            "return": [
                "dict",
                "IO[str]",
                "Dict[str, Any]",
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "float",
                    "int",
                    "Optional[str]",
                    "Optional[int]",
                    "Dict[int, Dict[str, float]]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/workers/worker.py": {
        "Worker.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "interpreter": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Worker.unix_socket": {
            "name": "unix_socket",
            "location": 32,
            "return": [
                "bool",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.start": {
            "name": "start",
            "location": 39,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.stop": {
            "name": "stop",
            "location": 86,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.check": {
            "name": "check",
            "location": 91,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.renew_interpreter": {
            "name": "renew_interpreter",
            "location": 97,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "raw_interpreter": [
                    "str",
                    "List[List[int]]",
                    "bool"
                ]
            }
        },
        "Worker._execute": {
            "name": "_execute",
            "location": 105,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "List[str]",
                    "dict",
                    "List[Tuple[bool, str]]",
                    "list"
                ]
            }
        },
        "Worker._get_service_socket": {
            "name": "_get_service_socket",
            "location": 111,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "Worker._get_service_unix_socket": {
            "name": "_get_service_unix_socket",
            "location": 120,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "Worker._append_context_data": {
            "name": "_append_context_data",
            "location": 129,
            "return": [
                "None",
                "Union[tuple, list]",
                "Iterable[Hashable]",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Callable",
                    "Mapping[str, Any]",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "Worker._status": {
            "name": "_status",
            "location": 146,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_lib/workers/__init__.py": {},
    "devhost-master/sublime-packages/Anaconda/anaconda_server/jsonserver.py": {
        "get_logger": {
            "name": "get_logger",
            "location": 260,
            "return": [
                "dict",
                "str",
                "Dict[str, str]",
                "int",
                "Callable",
                "Dict[str, Any]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "log_traceback": {
            "name": "log_traceback",
            "location": 281,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "JSONHandler.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sock": [
                    "str",
                    "bytes",
                    "Iterable[str]"
                ],
                "server": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "JSONHandler.return_back": {
            "name": "return_back",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "Optional[bool]",
                    "Dict[str, Union[str, Any]]",
                    "dict"
                ]
            }
        },
        "JSONHandler.collect_incoming_data": {
            "name": "collect_incoming_data",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Mapping[str, Any]",
                    "float",
                    "Dict[str, Any]",
                    "list"
                ]
            }
        },
        "JSONHandler.found_terminator": {
            "name": "found_terminator",
            "location": 72,
            "return": [
                "set",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONHandler.handle_command": {
            "name": "handle_command",
            "location": 120,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "handler_type": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "bool",
                    "Optional[Dict[str, str]]"
                ],
                "method": [
                    "str",
                    "int",
                    "Mapping[str, str]"
                ],
                "uid": [
                    "str",
                    "int",
                    "Mapping[str, str]"
                ],
                "vid": [
                    "str",
                    "int",
                    "Mapping[str, str]"
                ],
                "data": [
                    "str",
                    "int",
                    "Mapping[str, str]"
                ]
            }
        },
        "JSONServer.__init__": {
            "name": "__init__",
            "location": 147,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "float",
                    "int",
                    "datetime.date.time"
                ],
                "handler": [
                    "JSONHandler",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "JSONServer.fileno": {
            "name": "fileno",
            "location": 161,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONServer.serve_forever": {
            "name": "serve_forever",
            "location": 164,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONServer.shutdown": {
            "name": "shutdown",
            "location": 167,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONServer.handle_accept": {
            "name": "handle_accept",
            "location": 170,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONServer.handle_close": {
            "name": "handle_close",
            "location": 179,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Checker.__init__": {
            "name": "__init__",
            "location": 191,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "server": [
                    "int",
                    "bool",
                    "float"
                ],
                "delta": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Checker.run": {
            "name": "run",
            "location": 198,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Checker._check": {
            "name": "_check",
            "location": 214,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_server/minserver.py": {
        "get_logger": {
            "name": "get_logger",
            "location": 162,
            "return": [
                "dict",
                "str",
                "Dict[str, str]",
                "int",
                "Callable",
                "Dict[str, Any]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "log_traceback": {
            "name": "log_traceback",
            "location": 183,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "get_log_traceback": {
            "name": "get_log_traceback",
            "location": 190,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "JSONHandler.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sock": [
                    "str",
                    "bytes",
                    "Iterable[str]"
                ],
                "server": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "JSONHandler.return_back": {
            "name": "return_back",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "int",
                    "Dict[str, Union[str, Any]]",
                    "VT"
                ]
            }
        },
        "JSONHandler.collect_incoming_data": {
            "name": "collect_incoming_data",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Mapping[str, Any]",
                    "float",
                    "Dict[str, Any]",
                    "list"
                ]
            }
        },
        "JSONHandler.found_terminator": {
            "name": "found_terminator",
            "location": 67,
            "return": [
                "set",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONHandler.handle_command": {
            "name": "handle_command",
            "location": 102,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "handler_type": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "bool",
                    "Optional[Dict[str, str]]"
                ],
                "method": [
                    "str",
                    "int",
                    "Mapping[str, str]"
                ],
                "uid": [
                    "str",
                    "int",
                    "Mapping[str, str]"
                ],
                "vid": [
                    "str",
                    "int",
                    "Mapping[str, str]"
                ],
                "data": [
                    "str",
                    "int",
                    "Mapping[str, str]"
                ]
            }
        },
        "JSONServer.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "float",
                    "int",
                    "datetime.date.time"
                ],
                "handler": [
                    "JSONHandler",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "JSONServer.fileno": {
            "name": "fileno",
            "location": 138,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONServer.serve_forever": {
            "name": "serve_forever",
            "location": 141,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONServer.shutdown": {
            "name": "shutdown",
            "location": 144,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONServer.handle_accept": {
            "name": "handle_accept",
            "location": 147,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONServer.handle_close": {
            "name": "handle_close",
            "location": 154,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_server/process.py": {
        "spawn": {
            "name": "spawn",
            "location": 10,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_server/__init__.py": {},
    "devhost-master/sublime-packages/Anaconda/anaconda_server/commands/autocomplete.py": {
        "AutoComplete.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "List[str]"
                ],
                "uid": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "List[str]"
                ],
                "script": [
                    "int",
                    "float",
                    "str",
                    "List[List[int]]"
                ]
            }
        },
        "AutoComplete.run": {
            "name": "run",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_server/commands/autoformat.py": {
        "AutoPep8.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "int"
                ],
                "uid": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "int"
                ],
                "vid": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "List[Dict[str, Any]]",
                    "Optional[Dict[str, Any]]"
                ],
                "code": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "List[Dict[str, Any]]",
                    "Optional[Dict[str, Any]]"
                ],
                "settings": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "AutoPep8.run": {
            "name": "run",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutoPep8.parse_settings": {
            "name": "parse_settings",
            "location": 53,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "set"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "str",
                    "List[str]",
                    "list",
                    "int"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_server/commands/base.py": {
        "get_function_parameters": {
            "name": "get_function_parameters",
            "location": 17,
            "return": [
                "str",
                "list",
                "list[list]"
            ],
            "arguments": {
                "call_def": [
                    "Type",
                    "type",
                    "str",
                    "List[str]",
                    "bytes",
                    "int"
                ]
            }
        },
        "Command.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "int",
                    "float",
                    "str",
                    "List[List[int]]"
                ],
                "uid": [
                    "List[Dict[str, Any]]",
                    "str",
                    "Sequence[str]",
                    "Dict[str, int]",
                    "bytes",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_server/commands/complete_parameters.py": {
        "CompleteParameters.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "List[str]"
                ],
                "uid": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "List[str]"
                ],
                "script": [
                    "int",
                    "float",
                    "str",
                    "List[List[int]]"
                ],
                "settings": [
                    "int",
                    "float",
                    "str",
                    "List[List[int]]"
                ]
            }
        },
        "CompleteParameters.run": {
            "name": "run",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_server/commands/doc.py": {
        "Doc.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "bool",
                    "Optional[Union['Part', str]]",
                    "Optional[List]"
                ],
                "uid": [
                    "bool",
                    "Optional[Union['Part', str]]",
                    "Optional[List]"
                ],
                "script": [
                    "int",
                    "float",
                    "str",
                    "List[List[int]]"
                ],
                "html": [
                    "int",
                    "float",
                    "str",
                    "List[List[int]]"
                ]
            }
        },
        "Doc.run": {
            "name": "run",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Doc._plain": {
            "name": "_plain",
            "location": 68,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "sef": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "definition": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "Doc._html": {
            "name": "_html",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "definition": [
                    "int",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_server/commands/find_usages.py": {
        "FindUsages.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "bool",
                    "str",
                    "bytes"
                ],
                "uid": [
                    "bool",
                    "str",
                    "bytes"
                ],
                "script": [
                    "int",
                    "float",
                    "str",
                    "List[List[int]]"
                ]
            }
        },
        "FindUsages.run": {
            "name": "run",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_server/commands/goto.py": {
        "Goto.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "bool",
                    "Optional[Union['Part', str]]",
                    "Optional[List]"
                ],
                "uid": [
                    "bool",
                    "Optional[Union['Part', str]]",
                    "Optional[List]"
                ],
                "script": [
                    "int",
                    "float",
                    "str",
                    "List[List[int]]"
                ]
            }
        },
        "Goto._get_definitions": {
            "name": "_get_definitions",
            "location": 16,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Goto.run": {
            "name": "run",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GotoAssignment._get_definitions": {
            "name": "_get_definitions",
            "location": 46,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_server/commands/import_validator.py": {
        "ImportValidator.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "List[str]",
                    "Union[None, bool, str]",
                    "Optional[dict]",
                    "str"
                ],
                "uid": [
                    "List[str]",
                    "Union[None, bool, str]",
                    "Optional[dict]",
                    "str"
                ],
                "vid": [
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "linter": [
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "code": [
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "filename": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ImportValidator.run": {
            "name": "run",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportValidator._convert": {
            "name": "_convert",
            "location": 44,
            "return": [
                "list[dict[typing.Text, typing.Union[typing.Text,int]]]",
                "str",
                "Dict[str, str]",
                "List[Tuple[str, str]]",
                "List[Callable]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "validator": [
                    "str",
                    "List[str]",
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_server/commands/lint.py": {
        "Lint.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "int"
                ],
                "uid": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "int"
                ],
                "vid": [
                    "str",
                    "List[List[str]]",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "linter": [
                    "str",
                    "List[List[str]]",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "settings": [
                    "str",
                    "List[List[str]]",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "code": [
                    "str",
                    "List[List[str]]",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "filename": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Lint.run": {
            "name": "run",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_server/commands/mccabe.py": {
        "McCabe.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "Optional[dict]",
                    "List[str]",
                    "Union[None, bool, str]",
                    "bool",
                    "str"
                ],
                "uid": [
                    "Optional[dict]",
                    "List[str]",
                    "Union[None, bool, str]",
                    "bool",
                    "str"
                ],
                "vid": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ],
                "mccabe": [
                    "str",
                    "Optional[str]",
                    "Union[str, dict]"
                ],
                "code": [
                    "str",
                    "Optional[str]"
                ],
                "threshold": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ],
                "filename": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "int"
                ]
            }
        },
        "McCabe.run": {
            "name": "run",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_server/commands/mypy.py": {
        "MyPy.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Union[str, Iterable[str]]",
                    "Union[int, List]"
                ],
                "uid": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Union[str, Iterable[str]]",
                    "Union[int, List]"
                ],
                "vid": [
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "linter": [
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "code": [
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "filename": [
                    "str",
                    "Optional[str]"
                ],
                "mypypath": [
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "settings": [
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "MyPy.run": {
            "name": "run",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_server/commands/pep257.py": {
        "PEP257.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "int"
                ],
                "uid": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "int"
                ],
                "vid": [
                    "str",
                    "List[List[str]]",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "linter": [
                    "str",
                    "List[List[str]]",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "ignore": [
                    "str",
                    "List[List[str]]",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "code": [
                    "str",
                    "List[List[str]]",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "filename": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "PEP257.run": {
            "name": "run",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_server/commands/pep8.py": {
        "PEP8.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "int"
                ],
                "uid": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "int"
                ],
                "vid": [
                    "str",
                    "List[List[str]]",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "linter": [
                    "str",
                    "List[List[str]]",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "settings": [
                    "str",
                    "List[List[str]]",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "code": [
                    "str",
                    "List[List[str]]",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "filename": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "PEP8.run": {
            "name": "run",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_server/commands/pyflakes.py": {
        "PyFlakes.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "str",
                    "List[str]",
                    "Optional[dict]"
                ],
                "uid": [
                    "str",
                    "List[str]",
                    "Optional[dict]"
                ],
                "vid": [
                    "str",
                    "List[List[str]]",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "linter": [
                    "str",
                    "List[List[str]]",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "settings": [
                    "str",
                    "List[List[str]]",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "code": [
                    "str",
                    "List[List[str]]",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "filename": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "PyFlakes.run": {
            "name": "run",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_server/commands/pylint.py": {
        "PyLint.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "uid": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "vid": [
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "float"
                ],
                "linter": [
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "float"
                ],
                "rcfile": [
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "float"
                ],
                "filename": [
                    "str",
                    "bool",
                    "Tuple[str, int]"
                ]
            }
        },
        "PyLint.run": {
            "name": "run",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_server/commands/rename.py": {
        "Rename.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "bool",
                    "Optional[Union['Part', str]]"
                ],
                "uid": [
                    "bool",
                    "Optional[Union['Part', str]]"
                ],
                "script": [
                    "int",
                    "bool",
                    "float",
                    "List[int]",
                    "List[float]"
                ],
                "directories": [
                    "int",
                    "bool",
                    "float",
                    "List[int]",
                    "List[float]"
                ],
                "new_word": [
                    "int",
                    "bool",
                    "Sequence[cmk.base.check_utils.Service]",
                    "Dict[str, Any]"
                ],
                "refactor": [
                    "int",
                    "bool",
                    "float",
                    "List[int]",
                    "List[float]"
                ]
            }
        },
        "Rename.run": {
            "name": "run",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rename.is_same_path": {
            "name": "is_same_path",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_server/commands/__init__.py": {},
    "devhost-master/sublime-packages/Anaconda/anaconda_server/handlers/autoformat_handler.py": {
        "AutoFormatHandler.pep8": {
            "name": "pep8",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str"
                ],
                "settings": [
                    "str",
                    "None"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_server/handlers/jedi_handler.py": {
        "JediHandler.run": {
            "name": "run",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JediHandler.handle_result_and_purge_cache": {
            "name": "handle_result_and_purge_cache",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "List[Dict[str, Any]]",
                    "Optional[str]",
                    "dict",
                    "int",
                    "bool"
                ]
            }
        },
        "JediHandler.script": {
            "name": "script",
            "location": 43,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JediHandler.jedi_script": {
            "name": "jedi_script",
            "location": 49,
            "return": [
                "tuple",
                "Script"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "int",
                    "Union[int, str]",
                    "Optional[str]"
                ],
                "line": [
                    "str",
                    "int",
                    "Union[int, str]",
                    "Optional[str]"
                ],
                "offset": [
                    "str",
                    "int",
                    "Union[int, str]",
                    "Optional[str]"
                ],
                "filename": [
                    "typing.Text",
                    "str",
                    "int",
                    "Union[int, str]",
                    "Optional[str]"
                ],
                "encoding": [
                    "typing.Text",
                    "str",
                    "int",
                    "Union[int, str]",
                    "Optional[str]"
                ]
            }
        },
        "JediHandler.rename": {
            "name": "rename",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "directories": [
                    "str",
                    "int"
                ],
                "new_word": [
                    "str",
                    "int"
                ]
            }
        },
        "JediHandler.autocomplete": {
            "name": "autocomplete",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JediHandler.parameters": {
            "name": "parameters",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "bool",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "JediHandler.usages": {
            "name": "usages",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JediHandler.goto": {
            "name": "goto",
            "location": 83,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JediHandler.goto_assignment": {
            "name": "goto_assignment",
            "location": 89,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JediHandler.doc": {
            "name": "doc",
            "location": 95,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "html": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "Optional[str]",
                    "bytes"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_server/handlers/python_lint_handler.py": {
        "PythonLintHandler.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "bool",
                    "Union[Callable, str]",
                    "int",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "str"
                ],
                "data": [
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "int",
                    "Optional[str]",
                    "bool",
                    "List[str]"
                ],
                "uid": [
                    "dict"
                ],
                "vid": [
                    "bool",
                    "Union[Callable, str]",
                    "int",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "str"
                ],
                "callback": [
                    "bool",
                    "Union[Callable, str]",
                    "int",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "str"
                ],
                "debug": [
                    "bool",
                    "Union[Callable, str]",
                    "int",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "PythonLintHandler.lint": {
            "name": "lint",
            "location": 45,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "str"
                ],
                "code": [
                    "None",
                    "str",
                    "dict"
                ],
                "filename": [
                    "None",
                    "str",
                    "dict"
                ]
            }
        },
        "PythonLintHandler.pyflakes": {
            "name": "pyflakes",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "str",
                    "Optional[List[str]]",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, str]",
                    "bytes"
                ],
                "code": [
                    "None",
                    "str",
                    "Optional[List[str]]",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, str]",
                    "bytes"
                ],
                "filename": [
                    "None",
                    "str",
                    "Optional[List[str]]",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, str]",
                    "bytes"
                ]
            }
        },
        "PythonLintHandler.pep8": {
            "name": "pep8",
            "location": 79,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ],
                "code": [
                    "None",
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ],
                "filename": [
                    "None",
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "PythonLintHandler.pep257": {
            "name": "pep257",
            "location": 86,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "bool",
                    "Dict[str, Any]",
                    "Dict[int, str]",
                    "List[str]",
                    "Mapping[int, str]"
                ],
                "code": [
                    "None",
                    "str",
                    "Union[str, bytes]"
                ],
                "filename": [
                    "None",
                    "str",
                    "Union[str, bytes]"
                ]
            }
        },
        "PythonLintHandler.pylint": {
            "name": "pylint",
            "location": 94,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "str",
                    "bool"
                ],
                "code": [
                    "None",
                    "int",
                    "Optional[str]",
                    "bool",
                    "Optional[Union[float, int]]",
                    "str",
                    "list"
                ],
                "filename": [
                    "str",
                    "None"
                ]
            }
        },
        "PythonLintHandler.import_validator": {
            "name": "import_validator",
            "location": 109,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "int",
                    "Optional[str]",
                    "bool",
                    "Optional[Union[float, int]]",
                    "str",
                    "list"
                ],
                "code": [
                    "str",
                    "bool"
                ],
                "filename": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "PythonLintHandler.mypy": {
            "name": "mypy",
            "location": 116,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "str",
                    "List[str]"
                ],
                "code": [
                    "None",
                    "str",
                    "List[str]"
                ],
                "filename": [
                    "None",
                    "str",
                    "List[str]"
                ]
            }
        },
        "PythonLintHandler._normalize": {
            "name": "_normalize",
            "location": 126,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "dict",
                    "Dict[str, Union[str, bool]]",
                    "bytes",
                    "list"
                ],
                "data": [
                    "dict",
                    "bytes",
                    "Dict[str, Any]",
                    "Optional[Dict[str, str]]",
                    "str"
                ]
            }
        },
        "PythonLintHandler._configure_linters": {
            "name": "_configure_linters",
            "location": 158,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "Dict[str, Any]",
                    "str",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "PythonLintHandler._merge": {
            "name": "_merge",
            "location": 177,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "lint_result": [
                    "Callable",
                    "bool",
                    "Union[float, int]",
                    "Type"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_server/handlers/qa_handler.py": {
        "QAHandler.mccabe": {
            "name": "mccabe",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "bool",
                    "int",
                    "Optional[int]"
                ],
                "threshold": [
                    "str",
                    "bool",
                    "int",
                    "Optional[int]"
                ],
                "filename": [
                    "str",
                    "bool",
                    "int",
                    "Optional[int]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/anaconda_server/handlers/__init__.py": {},
    "devhost-master/sublime-packages/Anaconda/commands/autoformat.py": {
        "AnacondaAutoFormat.run": {
            "name": "run",
            "location": 24,
            "return": [
                "None",
                "Iterator[T]",
                "Iterator[str]",
                "Iterator[int]",
                "Iterable[T]"
            ],
            "arguments": {
                "self": [],
                "edit": [
                    "str",
                    "int",
                    "bool",
                    "list"
                ]
            }
        },
        "AnacondaAutoFormat.on_failure": {
            "name": "on_failure",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnacondaAutoFormat.is_enabled": {
            "name": "is_enabled",
            "location": 88,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnacondaAutoFormat.get_data": {
            "name": "get_data",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "bytes",
                    "list",
                    "str"
                ]
            }
        },
        "AnacondaAutoFormat.replace": {
            "name": "replace",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "edit": [
                    "Exception",
                    "Union[str, Exception]",
                    "Optional[str]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/commands/autoimport.py": {
        "AnacondaAutoImport.run": {
            "name": "run",
            "location": 19,
            "return": [
                "Awaitable",
                "None"
            ],
            "arguments": {
                "self": [],
                "edit": [
                    "str",
                    "int",
                    "Iterable[str]"
                ]
            }
        },
        "AnacondaAutoImport.is_enabled": {
            "name": "is_enabled",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnacondaAutoImport.insert_import": {
            "name": "insert_import",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "edit": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "Tuple[str, int]"
                ],
                "name": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "AnacondaAutoImport._guess_insertion_line": {
            "name": "_guess_insertion_line",
            "location": 45,
            "return": [
                "int",
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnacondaAutoImport._detected_undefined_name": {
            "name": "_detected_undefined_name",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "location": [
                    "anaconda_lib._Tuple[int]",
                    "anaconda_lib.Tuple[int]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/commands/complete_func_args.py": {
        "AnacondaCompleteFuncargs.run": {
            "name": "run",
            "location": 23,
            "return": [
                "Awaitable",
                "None"
            ],
            "arguments": {
                "self": [],
                "edit": [
                    "str",
                    "int",
                    "bool",
                    "list"
                ],
                "characters": [
                    "typing.Text",
                    "sublime_plugin.sublime.Edit",
                    "sublime.Edit",
                    "str",
                    "bool"
                ]
            }
        },
        "AnacondaCompleteFuncargs.is_enabled": {
            "name": "is_enabled",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnacondaCompleteFuncargs._insert_characters": {
            "name": "_insert_characters",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "edit": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "AnacondaCompleteFuncargs.insert_snippet": {
            "name": "insert_snippet",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "Union[bytes, bytearray, memoryview]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/commands/disable_linting.py": {
        "AnacondaDisableLinting.run": {
            "name": "run",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnacondaDisableLinting.is_enabled": {
            "name": "is_enabled",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/commands/doc.py": {
        "AnacondaDoc.run": {
            "name": "run",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "edit": [
                    "str"
                ]
            }
        },
        "AnacondaDoc.is_enabled": {
            "name": "is_enabled",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnacondaDoc.prepare_data": {
            "name": "prepare_data",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Iterable[T]",
                    "T"
                ]
            }
        },
        "AnacondaDoc.print_doc": {
            "name": "print_doc",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "edit": [
                    "int",
                    "sublime.View",
                    "Callable",
                    "str"
                ]
            }
        },
        "AnacondaDoc.print_popup": {
            "name": "print_popup",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "edit": [
                    "bytes",
                    "Sequence[int]"
                ]
            }
        },
        "AnacondaDoc._show_status": {
            "name": "_show_status",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/commands/enable_linting.py": {
        "AnacondaEnableLinting.run": {
            "name": "run",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnacondaEnableLinting.is_enabled": {
            "name": "is_enabled",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/commands/find_usages.py": {
        "AnacondaFindUsages.run": {
            "name": "run",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "edit": [
                    "sublime_plugin.sublime.Edit",
                    "str",
                    "bool"
                ]
            }
        },
        "AnacondaFindUsages.is_enabled": {
            "name": "is_enabled",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnacondaFindUsages.on_success": {
            "name": "on_success",
            "location": 34,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "bool",
                    "dict"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/commands/get_lines.py": {
        "AnacondaGetLines.run": {
            "name": "run",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnacondaGetLines.is_enabled": {
            "name": "is_enabled",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnacondaGetLines._harvest_errors": {
            "name": "_harvest_errors",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "harvester": [
                    "anaconda_lib._Dict[str, anaconda_lib._Any]",
                    "anaconda_lib.Dict[str, anaconda_lib.Any]"
                ],
                "error_type": [
                    "str"
                ]
            }
        },
        "AnacondaGetLines._jump": {
            "name": "_jump",
            "location": 59,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "Union[str, List[str]]",
                    "int"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/commands/goto.py": {
        "AnacondaGoto.run": {
            "name": "run",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "edit": [
                    "sublime_plugin.sublime.Edit",
                    "sublime.Edit",
                    "str",
                    "bool"
                ]
            }
        },
        "AnacondaGoto.is_enabled": {
            "name": "is_enabled",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnacondaGoto.on_success": {
            "name": "on_success",
            "location": 35,
            "return": [
                "int",
                "bytes",
                "Any",
                "List[Dict[str, Any]]",
                "Callable[[], 'Actor']"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "bool",
                    "dict"
                ]
            }
        },
        "AnacondaGoto._infere_context_data": {
            "name": "_infere_context_data",
            "location": 56,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "AnacondaGotoPythonObject.input_package": {
            "name": "input_package",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "package": [
                    "str"
                ]
            }
        },
        "AnacondaGotoPythonObject.goto_python_object": {
            "name": "goto_python_object",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "import_command": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "AnacondaGotoPythonObject.run": {
            "name": "run",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "edit": [
                    "sublime_plugin.sublime.Edit",
                    "sublime.Edit",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/commands/mccabe.py": {
        "AnacondaMcCabe.run": {
            "name": "run",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnacondaMcCabe.is_enabled": {
            "name": "is_enabled",
            "location": 31,
            "return": [
                "int",
                "str",
                "Mapping",
                "bool",
                "Callable",
                "Callable[[KT], VT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnacondaMcCabe.prepare_data": {
            "name": "prepare_data",
            "location": 40,
            "return": [
                "None",
                "Union[tuple, list]",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "anaconda_lib._Dict[str, anaconda_lib._Any]",
                    "anaconda_lib.Dict[str, anaconda_lib.Any]",
                    "Optional[bytes]",
                    "Dict[str, Any]"
                ]
            }
        },
        "AnacondaMcCabe._show_options": {
            "name": "_show_options",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "options": [
                    "list",
                    "str",
                    "List[str]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "AnacondaMcCabe._jump": {
            "name": "_jump",
            "location": 69,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "Union[str, List[str]]",
                    "int"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/commands/next_lint_error.py": {
        "AnacondaNextLintError.run": {
            "name": "run",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnacondaNextLintError.is_enabled": {
            "name": "is_enabled",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnacondaNextLintError.jump": {
            "name": "jump",
            "location": 38,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "lineno": [
                    "None",
                    "bytes",
                    "Optional[str]",
                    "T",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "AnacondaNextLintError._harvest_next": {
            "name": "_harvest_next",
            "location": 52,
            "return": [
                "int",
                "None",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/commands/prev_lint_error.py": {
        "AnacondaPrevLintError.run": {
            "name": "run",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnacondaPrevLintError.is_enabled": {
            "name": "is_enabled",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnacondaPrevLintError.jump": {
            "name": "jump",
            "location": 38,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "lineno": [
                    "None",
                    "bytes",
                    "Optional[str]",
                    "T",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "AnacondaPrevLintError._harvest_prev": {
            "name": "_harvest_prev",
            "location": 52,
            "return": [
                "int",
                "None",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/commands/python_build.py": {
        "AnacondaBaseBuild.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "executable": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/commands/rename.py": {
        "AnacondaRename.run": {
            "name": "run",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "edit": [
                    "str",
                    "int",
                    "bool",
                    "list"
                ]
            }
        },
        "AnacondaRename.is_enabled": {
            "name": "is_enabled",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnacondaRename.input_replacement": {
            "name": "input_replacement",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "replacement": [
                    "str"
                ]
            }
        },
        "AnacondaRename.store_data": {
            "name": "store_data",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "bytes",
                    "list",
                    "str"
                ]
            }
        },
        "AnacondaRename.rename": {
            "name": "rename",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "edit": [
                    "sublime.Edit"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/commands/set_python_interpreter.py": {
        "AnacondaSetPythonInterpreter.run": {
            "name": "run",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "edit": [
                    "sublime_plugin.sublime.Edit",
                    "sublime.Edit",
                    "str",
                    "bool"
                ]
            }
        },
        "AnacondaSetPythonInterpreter.update_interpreter_settings": {
            "name": "update_interpreter_settings",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "venv_path": [
                    "str"
                ]
            }
        },
        "AnacondaSetPythonInterpreter.save_project_data": {
            "name": "save_project_data",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "anaconda_lib.Dict[str, anaconda_lib.Any]",
                    "anaconda_lib._Dict[str, anaconda_lib._Any]"
                ]
            }
        },
        "AnacondaSetPythonInterpreter.get_project_data": {
            "name": "get_project_data",
            "location": 60,
            "return": [
                "anaconda_lib._Dict[str, anaconda_lib._Any]",
                "anaconda_lib.Dict[str, anaconda_lib.Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnacondaSetPythonInterpreter.get_current_interpreter_path": {
            "name": "get_current_interpreter_path",
            "location": 64,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnacondaSetPythonInterpreter.is_enabled": {
            "name": "is_enabled",
            "location": 71,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/commands/test_runner.py": {
        "virtualenv": {
            "name": "virtualenv",
            "location": 27,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "virtualenv.wrapper": {
            "name": "wrapper",
            "location": 34,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMethodMatcher.find_test_path": {
            "name": "find_test_path",
            "location": 57,
            "return": [
                "str",
                "bool",
                "List[str]",
                "Union[Match, None]"
            ],
            "arguments": {
                "self": [],
                "test_file_content": [
                    "str"
                ],
                "class_delimeter": [
                    "str"
                ],
                "method_delimeter": [
                    "str"
                ]
            }
        },
        "TestMethodMatcher.find_test_method": {
            "name": "find_test_method",
            "location": 73,
            "return": [
                "bool",
                "List[Dict[str, Any]]",
                "Union[int, float, complex]",
                "OrderedDict"
            ],
            "arguments": {
                "self": [],
                "test_file_content": [
                    "str",
                    "Callable[[str], None]"
                ]
            }
        },
        "TestMethodMatcher.find_test_class": {
            "name": "find_test_class",
            "location": 82,
            "return": [
                "List[str]",
                "Iterable[str]",
                "str",
                "List[Tuple[str, Any]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "test_file_content": [
                    "str"
                ]
            }
        },
        "AnacondaRunTestsBase.output_syntax": {
            "name": "output_syntax",
            "location": 117,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnacondaRunTestsBase.output_theme": {
            "name": "output_theme",
            "location": 130,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnacondaRunTestsBase.test_path": {
            "name": "test_path",
            "location": 145,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnacondaRunTestsBase.is_enabled": {
            "name": "is_enabled",
            "location": 160,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnacondaRunTestsBase.run": {
            "name": "run",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "edit": [
                    "sublime_plugin.sublime.Edit",
                    "sublime.Edit",
                    "str",
                    "bool"
                ]
            }
        },
        "AnacondaRunTestsBase._load_settings": {
            "name": "_load_settings",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnacondaRunTestsBase._prepare_command": {
            "name": "_prepare_command",
            "location": 209,
            "return": [
                "list",
                "sublime.View",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnacondaRunTestsBase._configure_output_window": {
            "name": "_configure_output_window",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "width": [
                    "int"
                ]
            }
        },
        "AnacondaRunTestsBase._save_test_run": {
            "name": "_save_test_run",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str"
                ]
            }
        },
        "AnacondaRunCurrentFileTests.test_params": {
            "name": "test_params",
            "location": 247,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AnacondaRunCurrentFileTests.test_path": {
            "name": "test_path",
            "location": 251,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnacondaRunProjectTests.test_params": {
            "name": "test_params",
            "location": 265,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AnacondaRunProjectTests.test_path": {
            "name": "test_path",
            "location": 269,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnacondaRunCurrentTest.test_params": {
            "name": "test_params",
            "location": 284,
            "return": [
                "Optional[Iterable[Any]]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnacondaRunCurrentTest.test_path": {
            "name": "test_path",
            "location": 288,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnacondaRunLastTest._prepare_command": {
            "name": "_prepare_command",
            "location": 319,
            "return": [
                "str",
                "Dict[str, str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/commands/vagrant.py": {
        "AnacondaVagrantEnable.run": {
            "name": "run",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnacondaVagrantBase.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnacondaVagrantBase.print_status": {
            "name": "print_status",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "edit": [
                    "bool",
                    "str",
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "AnacondaVagrantBase.prepare_data": {
            "name": "prepare_data",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "anaconda_lib._Dict[str, anaconda_lib._Any]"
                ]
            }
        },
        "AnacondaVagrantBase._class_name_to_command": {
            "name": "_class_name_to_command",
            "location": 61,
            "return": [
                "str",
                "int",
                "sublime.View"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnacondaVagrantStatus.run": {
            "name": "run",
            "location": 85,
            "return": [
                "Awaitable",
                "None"
            ],
            "arguments": {
                "self": [],
                "edit": [
                    "List[str]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "AnacondaVagrantStatus.prepare_data": {
            "name": "prepare_data",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "str",
                    "Dict[str, str]",
                    "Union[Dict, List]",
                    "bytes"
                ]
            }
        },
        "AnacondaVagrantInit.run": {
            "name": "run",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "edit": [
                    "List[str]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "AnacondaVagrantInit.input_directory": {
            "name": "input_directory",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "dict"
                ],
                "directory": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "AnacondaVagrantUp.run": {
            "name": "run",
            "location": 134,
            "return": [
                "Awaitable",
                "None"
            ],
            "arguments": {
                "self": [],
                "edit": [
                    "List[str]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "AnacondaVagrantReload.run": {
            "name": "run",
            "location": 153,
            "return": [
                "Awaitable",
                "None"
            ],
            "arguments": {
                "self": [],
                "edit": [
                    "List[str]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "AnacondaVagrantSsh.run": {
            "name": "run",
            "location": 174,
            "return": [
                "Awaitable",
                "None"
            ],
            "arguments": {
                "self": [],
                "edit": [
                    "List[str]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "AnacondaVagrantSsh.input_command": {
            "name": "input_command",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ],
                "command": [
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/commands/__init__.py": {},
    "devhost-master/sublime-packages/Anaconda/listeners/autopep8.py": {
        "AnacondaAutoformatPEP8EventListener.on_pre_save": {
            "name": "on_pre_save",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "sublime_plugin.sublime.View"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/listeners/completion.py": {
        "AnacondaCompletionEventListener.on_query_completions": {
            "name": "on_query_completions",
            "location": 27,
            "return": [
                "set",
                "None",
                "tuple[int]"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "sublime.View"
                ],
                "prefix": [
                    "str"
                ],
                "locations": [
                    "BinaryIO",
                    "str"
                ]
            }
        },
        "AnacondaCompletionEventListener.on_modified": {
            "name": "on_modified",
            "location": 63,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "sublime.View"
                ]
            }
        },
        "AnacondaCompletionEventListener._complete": {
            "name": "_complete",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "anaconda_lib.Dict[str, anaconda_lib.Any]",
                    "list"
                ]
            }
        },
        "AnacondaCompletionEventListener._run_auto_complete": {
            "name": "_run_auto_complete",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/listeners/linting.py": {
        "BackgroundLinter.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lang": [
                    "typing.Text",
                    "str",
                    "bool"
                ],
                "linter": [
                    "str",
                    "bool"
                ],
                "non_auto": [
                    "bool",
                    "str"
                ]
            }
        },
        "BackgroundLinter.lint": {
            "name": "lint",
            "location": 35,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BackgroundLinter.on_modified": {
            "name": "on_modified",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "sublime.View"
                ]
            }
        },
        "BackgroundLinter.on_load": {
            "name": "on_load",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "sublime.View"
                ]
            }
        },
        "BackgroundLinter.on_pre_close": {
            "name": "on_pre_close",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "sublime.View",
                    "AsyncIterator"
                ]
            }
        },
        "BackgroundLinter.on_post_save": {
            "name": "on_post_save",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "sublime.View"
                ]
            }
        },
        "BackgroundLinter._show_errors_list": {
            "name": "_show_errors_list",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parse_results": [
                    "anaconda_lib._Callable[[anaconda_lib._Dict], None]",
                    "anaconda_lib._Dict[str, anaconda_lib._Any]",
                    "anaconda_lib.Callable[[anaconda_lib.Dict], None]",
                    "anaconda_lib.Dict[str, anaconda_lib.Any]"
                ],
                "data": [
                    "anaconda_lib._Callable[[anaconda_lib._Dict], None]",
                    "anaconda_lib._Dict[str, anaconda_lib._Any]",
                    "anaconda_lib.Callable[[anaconda_lib.Dict], None]",
                    "anaconda_lib.Dict[str, anaconda_lib.Any]"
                ]
            }
        },
        "BackgroundLinter.on_activated": {
            "name": "on_activated",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "sublime.View",
                    "bool"
                ]
            }
        },
        "BackgroundLinter.on_selection_modified": {
            "name": "on_selection_modified",
            "location": 128,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "view": []
            }
        },
        "BackgroundLinter._erase_marks_if_no_linting": {
            "name": "_erase_marks_if_no_linting",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "int",
                    "Dict[str, int]",
                    "str"
                ]
            }
        },
        "BackgroundLinter._erase_marks": {
            "name": "_erase_marks",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "int",
                    "sublime.View",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/listeners/signatures.py": {
        "AnacondaSignaturesEventListener.on_modified": {
            "name": "on_modified",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "sublime.View"
                ]
            }
        },
        "AnacondaSignaturesEventListener.prepare_data_tooltip": {
            "name": "prepare_data_tooltip",
            "location": 62,
            "return": [
                "None",
                "Union[tuple, list]",
                "str"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "sublime.View"
                ],
                "data": [
                    "str",
                    "Callable",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "AnacondaSignaturesEventListener.prepare_data_status": {
            "name": "prepare_data_status",
            "location": 93,
            "return": [
                "None",
                "anaconda_lib._Any",
                "anaconda_lib.Any"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "Dict[str, Set[str]]",
                    "Tuple[int, int]",
                    "Callable[[Any], Awaitable[None]]",
                    "dict"
                ],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "AnacondaSignaturesEventListener._show_popup": {
            "name": "_show_popup",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "str"
                ]
            }
        },
        "AnacondaSignaturesEventListener._show_status": {
            "name": "_show_status",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "str"
                ]
            }
        },
        "AnacondaSignaturesEventListener._signature_excluded": {
            "name": "_signature_excluded",
            "location": 133,
            "return": [
                "bool",
                "anaconda_lib._Tuple[str]",
                "anaconda_lib.Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "signature": [
                    "List[str]",
                    "str",
                    "int",
                    "Union[str, list]",
                    "Union[str, List[str]]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/listeners/__init__.py": {},
    "devhost-master/sublime-packages/Anaconda/test/test_autoformat.py": {
        "TestAutoformat.setUp": {
            "name": "setUp",
            "location": 122,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAutoformat.test_autoformat_command": {
            "name": "test_autoformat_command",
            "location": 131,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAutoformat.test_autoformat_ignore": {
            "name": "test_autoformat_ignore",
            "location": 134,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAutoformat.test_autoformat_select": {
            "name": "test_autoformat_select",
            "location": 138,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAutoformat.test_autoformat_max_line_length": {
            "name": "test_autoformat_max_line_length",
            "location": 142,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAutoformat.test_autoformat_handler": {
            "name": "test_autoformat_handler",
            "location": 146,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAutoformat._check_autoformat": {
            "name": "_check_autoformat",
            "location": 151,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "TestAutoformat._check_autoformat_select": {
            "name": "_check_autoformat_select",
            "location": 157,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "bool",
                    "int",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "TestAutoformat._check_max_line": {
            "name": "_check_max_line",
            "location": 163,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "dict",
                    "Dict[str, Any]",
                    "Union[int, float]",
                    "Dict[int, int]",
                    "Optional[str]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/test/test_complete_parameters.py": {
        "TestCompleteParameters.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompleteParameters.test_complete_parameters_command": {
            "name": "test_complete_parameters_command",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompleteParameters.test_complete_all_parameters": {
            "name": "test_complete_all_parameters",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompleteParameters.test_complete_parameters_handler": {
            "name": "test_complete_parameters_handler",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompleteParameters.test_complete_all_parameters_handler": {
            "name": "test_complete_all_parameters_handler",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompleteParameters._check_parameters": {
            "name": "_check_parameters",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "Mapping",
                    "type",
                    "Dict[str, Any]",
                    "str",
                    "Callable",
                    "dict"
                ]
            }
        },
        "TestCompleteParameters._check_all_parameters": {
            "name": "_check_all_parameters",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "Mapping",
                    "type",
                    "str",
                    "Callable",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/test/test_completion.py": {
        "TestAutoCompletion.test_autocomplete_command": {
            "name": "test_autocomplete_command",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAutoCompletion.test_autocomplete_handler": {
            "name": "test_autocomplete_handler",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAutoCompletion._check": {
            "name": "_check",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "kwrgs": [
                    "int",
                    "List[int]",
                    "List[float]",
                    "bool"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/test/test_doc.py": {
        "TestDoc.test_doc_command": {
            "name": "test_doc_command",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDoc.test_doc_plain": {
            "name": "test_doc_plain",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDoc.test_doc_html_escape": {
            "name": "test_doc_html_escape",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDoc.test_doc_no_definiion": {
            "name": "test_doc_no_definiion",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDoc.test_doc_handler": {
            "name": "test_doc_handler",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDoc._check_html": {
            "name": "_check_html",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kwrgs": []
            }
        },
        "TestDoc._check_plain": {
            "name": "_check_plain",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kwrgs": []
            }
        },
        "TestDoc._check_html_escape": {
            "name": "_check_html_escape",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kwrgs": []
            }
        },
        "TestDoc._check_no_definition": {
            "name": "_check_no_definition",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kwrgs": []
            }
        },
        "TestDoc._check_handler": {
            "name": "_check_handler",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kwrgs": []
            }
        },
        "TestDoc._common_assertions": {
            "name": "_common_assertions",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kwrgs": []
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/test/test_find_usages.py": {
        "TestFindUsages.test_find_usages_command": {
            "name": "test_find_usages_command",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFindUsages.test_find_usages_handler": {
            "name": "test_find_usages_handler",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFindUsages._check_find_usages": {
            "name": "_check_find_usages",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "int",
                    "List[int]",
                    "Tuple[str]",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/test/test_goto.py": {
        "TestGoto.test_goto_command": {
            "name": "test_goto_command",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGoto.test_goto_handler": {
            "name": "test_goto_handler",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGoto._check_goto": {
            "name": "_check_goto",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "str",
                    "list",
                    "bool",
                    "dict",
                    "Dict[str, List[Any]]",
                    "Callable[[], None]",
                    "List[Tuple[bool, str]]"
                ]
            }
        },
        "TestGotoAssignment.test_goto_assignment_command": {
            "name": "test_goto_assignment_command",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGotoAssignment.test_goto_assignment_handler": {
            "name": "test_goto_assignment_handler",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGotoAssignment._check_goto_assignment": {
            "name": "_check_goto_assignment",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "int",
                    "list",
                    "List[float]",
                    "Iterable[int]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/test/test_lint.py": {
        "real_temp_file.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "contents": [
                    "dict",
                    "bytes",
                    "List[Callable]"
                ]
            }
        },
        "real_temp_file.__enter__": {
            "name": "__enter__",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "real_temp_file.__exit__": {
            "name": "__exit__",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "exc_value": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "traceback": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ]
            }
        },
        "TestLint.setUp": {
            "name": "setUp",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLint.test_pyflakes_lint": {
            "name": "test_pyflakes_lint",
            "location": 75,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLint.test_pyflakes_ignore": {
            "name": "test_pyflakes_ignore",
            "location": 80,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLint.test_pep8_lint": {
            "name": "test_pep8_lint",
            "location": 85,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLint.test_pep8_ignores": {
            "name": "test_pep8_ignores",
            "location": 90,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLint.test_pep8_max_line_lenght": {
            "name": "test_pep8_max_line_lenght",
            "location": 96,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLint.test_pep257_lint": {
            "name": "test_pep257_lint",
            "location": 102,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLint.test_pep257_ignores": {
            "name": "test_pep257_ignores",
            "location": 107,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLint.test_import_validator": {
            "name": "test_import_validator",
            "location": 113,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLint.test_mypy": {
            "name": "test_mypy",
            "location": 118,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLint.test_mypy_fast_parser": {
            "name": "test_mypy_fast_parser",
            "location": 130,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLint._check_pyflakes": {
            "name": "_check_pyflakes",
            "location": 143,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "list",
                    "int"
                ]
            }
        },
        "TestLint._check_pep8": {
            "name": "_check_pep8",
            "location": 154,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "int",
                    "Tuple[int]",
                    "Tuple[int, int]",
                    "Collection[int]",
                    "bool",
                    "Union[int, List[int]]"
                ]
            }
        },
        "TestLint._check_pep8_ignores": {
            "name": "_check_pep8_ignores",
            "location": 168,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "Optional[int]",
                    "int",
                    "mypy.types.Overloaded",
                    "List[str]"
                ]
            }
        },
        "TestLint._check_pep8_max_line_length": {
            "name": "_check_pep8_max_line_length",
            "location": 178,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "int",
                    "str",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "TestLint._check_pyflakes_ignore": {
            "name": "_check_pyflakes_ignore",
            "location": 184,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "TestLint._check_pep257": {
            "name": "_check_pep257",
            "location": 190,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "int",
                    "Union[int, List[int]]",
                    "list",
                    "List[str]"
                ]
            }
        },
        "TestLint._check_pep257_ignores": {
            "name": "_check_pep257_ignores",
            "location": 205,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "TestLint._check_validate_imports": {
            "name": "_check_validate_imports",
            "location": 211,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "List[str]",
                    "Union[int, float]",
                    "List[List[Any]]",
                    "str"
                ]
            }
        },
        "TestLint._check_mypy": {
            "name": "_check_mypy",
            "location": 221,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "TestLint._check_mypy_async": {
            "name": "_check_mypy_async",
            "location": 229,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "Optional[int]",
                    "int"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/test/test_qa.py": {
        "TestQa.test_mccabe_command": {
            "name": "test_mccabe_command",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQa.test_mccabe_high_threshold": {
            "name": "test_mccabe_high_threshold",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQa.test_mccabe_handler": {
            "name": "test_mccabe_handler",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQa._check_mccabe": {
            "name": "_check_mccabe",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "TestQa.test_mccabe_high_threshold._check_threshold_4": {
            "name": "_check_threshold_4",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "result": [
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "TestQa.test_mccabe_high_threshold._check_threshold_7": {
            "name": "_check_threshold_7",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "result": [
                    "Optional[int]",
                    "int"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/Anaconda/test/_usages_helper.py": {
        "usages_helper": {
            "name": "usages_helper",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "devhost-master/sublime-packages/Anaconda/test/__init__.py": {},
    "devhost-master/sublime-packages/markupsafe/all/markupsafe/_compat.py": {},
    "devhost-master/sublime-packages/markupsafe/all/markupsafe/_constants.py": {},
    "devhost-master/sublime-packages/markupsafe/all/markupsafe/_native.py": {
        "escape": {
            "name": "escape",
            "location": 15,
            "return": [
                "Markup",
                "str",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Dict[str, Any]",
                    "float",
                    "Union[str, bytes]"
                ]
            }
        },
        "escape_silent": {
            "name": "escape_silent",
            "location": 31,
            "return": [
                "Markup",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "s": [
                    "Optional[str]",
                    "Union[str, int]",
                    "Optional[bytes]",
                    "T",
                    "Optional[Iterable[str]]",
                    "Optional[Any]"
                ]
            }
        },
        "soft_unicode": {
            "name": "soft_unicode",
            "location": 40,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/markupsafe/all/markupsafe/__init__.py": {
        "_escape_argspec": {
            "name": "_escape_argspec",
            "location": 267,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "int",
                    "Dict[str, List[str]]"
                ],
                "iterable": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "escape": [
                    "str",
                    "int",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "Markup.__new__": {
            "name": "__new__",
            "location": 70,
            "return": [
                "type"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "bool"
                ],
                "base": [
                    "typing.Text",
                    "bool",
                    "Sequence[int]"
                ],
                "encoding": [
                    "None",
                    "Callable",
                    "Tuple[Type]",
                    "Optional[int]",
                    "Optional[Sequence]",
                    "Optional[Type]",
                    "Optional[float]",
                    "List[str]"
                ],
                "errors": [
                    "typing.Text",
                    "str",
                    "Sequence[Any]",
                    "Type",
                    "int",
                    "Callable"
                ]
            }
        },
        "Markup.__html__": {
            "name": "__html__",
            "location": 77,
            "return": [
                "Markup",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Markup.__add__": {
            "name": "__add__",
            "location": 80,
            "return": [
                "str",
                "bool",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Dict[str, Any]"
                ]
            }
        },
        "Markup.__radd__": {
            "name": "__radd__",
            "location": 85,
            "return": [
                "float",
                "str",
                "bool",
                "Optional[Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Type",
                    "Dict[str, Any]"
                ]
            }
        },
        "Markup.__mul__": {
            "name": "__mul__",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "num": [
                    "Optional[int]"
                ]
            }
        },
        "Markup.__mod__": {
            "name": "__mod__",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "arg": [
                    "List[\"SqlFile\"]"
                ]
            }
        },
        "Markup.__repr__": {
            "name": "__repr__",
            "location": 103,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Markup.join": {
            "name": "join",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "seq": [
                    "str",
                    "List[List[str]]",
                    "int",
                    "Tuple[float]",
                    "List[str]"
                ]
            }
        },
        "Markup.split": {
            "name": "split",
            "location": 113,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Markup.rsplit": {
            "name": "rsplit",
            "location": 117,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Markup.splitlines": {
            "name": "splitlines",
            "location": 121,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Markup.unescape": {
            "name": "unescape",
            "location": 126,
            "return": [
                "int",
                "Optional[Any]",
                "bool",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Markup.striptags": {
            "name": "striptags",
            "location": 148,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Markup.escape": {
            "name": "escape",
            "location": 160,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "Tuple[object]",
                    "bool"
                ],
                "s": [
                    "str",
                    "Iterable[int]"
                ]
            }
        },
        "Markup.make_simple_escaping_wrapper": {
            "name": "make_simple_escaping_wrapper",
            "location": 170,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "_MagicFormatMapping.__init__": {
            "name": "__init__",
            "location": 224,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "kwargs": []
            }
        },
        "_MagicFormatMapping.__getitem__": {
            "name": "__getitem__",
            "location": 229,
            "return": [
                "set",
                "str",
                "Tuple[str, int]",
                "List[Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "_MagicFormatMapping.__iter__": {
            "name": "__iter__",
            "location": 240,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MagicFormatMapping.__len__": {
            "name": "__len__",
            "location": 243,
            "return": [
                "int",
                "str",
                "bool",
                "Dict[str, int]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MarkupEscapeHelper.__init__": {
            "name": "__init__",
            "location": 278,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "bool",
                    "float"
                ],
                "escape": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Markup.unescape.handle_match": {
            "name": "handle_match",
            "location": 134,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "m": [
                    "str",
                    "Callable[[str], str]"
                ]
            }
        },
        "Markup.make_simple_escaping_wrapper.func": {
            "name": "func",
            "location": 172,
            "return": [
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Markup.partition": {
            "name": "partition",
            "location": 188,
            "return": [
                "tuple",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "sep": [
                    "int",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "Markup.rpartition": {
            "name": "rpartition",
            "location": 191,
            "return": [
                "tuple",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "sep": [
                    "int",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "Markup.format": {
            "name": "format",
            "location": 197,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {}
        },
        "Markup.__html_format__": {
            "name": "__html_format__",
            "location": 203,
            "return": [
                "Markup",
                "int",
                "str",
                "List[List[str]]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "format_spec": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "EscapeFormatter.__init__": {
            "name": "__init__",
            "location": 250,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "escape": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "EscapeFormatter.format_field": {
            "name": "format_field",
            "location": 253,
            "return": [
                "bool",
                "Type"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Type",
                    "float"
                ],
                "format_spec": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/mdpopups/st3/mdpopups/colorbox.py": {
        "to_list": {
            "name": "to_list",
            "location": 29,
            "return": [
                "list[int]",
                "str",
                "bool",
                "set"
            ],
            "arguments": {
                "rgb": [
                    "int",
                    "str",
                    "List[List[str]]"
                ],
                "alpha": [
                    "bool",
                    "str",
                    "dict",
                    "Iterable[str]",
                    "List[Tuple[int, int, str]]"
                ]
            }
        },
        "checkered_color": {
            "name": "checkered_color",
            "location": 51,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "color": [
                    "int",
                    "Callable",
                    "str"
                ],
                "background": [
                    "str",
                    "OrderedDict",
                    "DefaultDict[int, List[Any]]"
                ]
            }
        },
        "get_border_size": {
            "name": "get_border_size",
            "location": 59,
            "return": [
                "int",
                "float",
                "List[int]",
                "bool",
                "Optional[float]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "dir": [
                    "str",
                    "int",
                    "float",
                    "Container[str]"
                ],
                "border_map": [
                    "str",
                    "Tuple[Literal, Literal, Literal, Literal]"
                ]
            }
        },
        "color_box_raw": {
            "name": "color_box_raw",
            "location": 76,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "colors": [
                    "list",
                    "bool",
                    "str",
                    "int",
                    "float"
                ],
                "border": [
                    "typing.Text",
                    "int",
                    "float",
                    "Sequence[int]"
                ],
                "border2": [
                    "None",
                    "Optional[int]",
                    "tuple",
                    "float",
                    "bool"
                ],
                "height": [
                    "int",
                    "bytes"
                ],
                "width": [
                    "int"
                ],
                "border_size": [
                    "int",
                    "Callable",
                    "list"
                ],
                "check_size": [
                    "int",
                    "bool",
                    "bytes",
                    "str",
                    "List[str]"
                ],
                "max_colors": [
                    "int",
                    "Sequence",
                    "List[int]",
                    "Tuple[int, int]"
                ],
                "alpha": [
                    "bool",
                    "int",
                    "Tuple[int, int]",
                    "list",
                    "float"
                ],
                "border_map": [
                    "int",
                    "Callable"
                ]
            }
        },
        "color_box": {
            "name": "color_box",
            "location": 246,
            "return": [
                "typing.Text",
                "Optional[Exception]",
                "Sequence[int]"
            ],
            "arguments": {}
        }
    },
    "devhost-master/sublime-packages/mdpopups/st3/mdpopups/imagetint.py": {
        "tint_raw": {
            "name": "tint_raw",
            "location": 13,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "byte_string": [
                    "str",
                    "int"
                ],
                "color": [
                    "str"
                ],
                "opacity": [
                    "int",
                    "str",
                    "Iterator[str]",
                    "Optional[int]"
                ]
            }
        },
        "tint": {
            "name": "tint",
            "location": 53,
            "return": [
                "typing.Text",
                "str",
                "int",
                "Iterator[bytes]"
            ],
            "arguments": {
                "byte_string": [
                    "str",
                    "int",
                    "List[int]",
                    "Optional[str]",
                    "bool",
                    "dict"
                ],
                "color": [
                    "str",
                    "int",
                    "List[int]",
                    "Optional[str]",
                    "bool",
                    "dict"
                ],
                "opacity": [
                    "int",
                    "str",
                    "List[int]",
                    "Optional[str]",
                    "bool",
                    "dict"
                ],
                "height": [
                    "None",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "int",
                    "bool",
                    "str"
                ],
                "width": [
                    "None",
                    "int",
                    "Callable[[], float]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/mdpopups/st3/mdpopups/png.py": {
        "group": {
            "name": "group",
            "location": 201,
            "return": [
                "Sequence[int]",
                "str",
                "Iterable[str]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "n": [
                    "str",
                    "int"
                ]
            }
        },
        "isarray": {
            "name": "isarray",
            "location": 206,
            "return": [
                "bool",
                "Optional[bool]",
                "int",
                "Optional[int]",
                "numpy.ndarray"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "int"
                ]
            }
        },
        "interleave_planes": {
            "name": "interleave_planes",
            "location": 238,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "ipixels": [
                    "Sequence[int]",
                    "int",
                    "List[int]",
                    "str",
                    "List[List[int]]",
                    "list"
                ],
                "apixels": [
                    "List[int]",
                    "List[List[str]]",
                    "List[float]",
                    "List[Tuple[int, int]]",
                    "int",
                    "str"
                ],
                "ipsize": [
                    "Dict[str, Tuple[int, int]]",
                    "numpy.ndarray",
                    "int"
                ],
                "apsize": [
                    "numpy.ndarray",
                    "float"
                ]
            }
        },
        "check_palette": {
            "name": "check_palette",
            "location": 267,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "palette": [
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "write_chunk": {
            "name": "write_chunk",
            "location": 960,
            "return": [
                ""
            ],
            "arguments": {
                "outfile": [
                    "str",
                    "AnyStr",
                    "IO[str]",
                    "bytearray"
                ],
                "tag": [
                    "str",
                    "dict"
                ],
                "data": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "write_chunks": {
            "name": "write_chunks",
            "location": 976,
            "return": [
                ""
            ],
            "arguments": {
                "out": [
                    "BinaryIO",
                    "str",
                    "numpy.ndarray",
                    "float",
                    "bool"
                ],
                "chunks": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "filter_scanline": {
            "name": "filter_scanline",
            "location": 983,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "type": [
                    "str",
                    "bool",
                    "type",
                    "Union[str, Tuple[str, str]]",
                    "tuple",
                    "Dict[str, Any]",
                    "Optional[Any]"
                ],
                "line": [
                    "str",
                    "int",
                    "bytes",
                    "Union[str, bytes]"
                ],
                "fo": [
                    "str",
                    "bool",
                    "type",
                    "Union[str, Tuple[str, str]]",
                    "tuple",
                    "Dict[str, Any]",
                    "Optional[Any]"
                ],
                "prev": [
                    "int",
                    "str",
                    "List[Tuple[str]]",
                    "list",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "from_array": {
            "name": "from_array",
            "location": 1067,
            "return": [
                "str",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "a": [
                    "int",
                    "List[int]",
                    "List[str]",
                    "numpy.ndarray"
                ],
                "mode": [
                    "str",
                    "dict"
                ],
                "info": [
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 2322,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "topngbytes": {
            "name": "topngbytes",
            "location": 2325,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "rows": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "x": [
                    "int",
                    "float",
                    "Tuple[float, float]"
                ],
                "y": [
                    "int",
                    "float",
                    "Tuple[float, float]"
                ]
            }
        },
        "testWithIO": {
            "name": "testWithIO",
            "location": 2345,
            "return": [
                "float"
            ],
            "arguments": {
                "inp": [
                    "bytes",
                    "int",
                    "str"
                ],
                "out": [
                    "str",
                    "bytes"
                ],
                "f": [
                    "int",
                    "str",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "mycallersname": {
            "name": "mycallersname",
            "location": 2368,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "seqtobytes": {
            "name": "seqtobytes",
            "location": 2384,
            "return": [
                "int",
                "str",
                "tuple",
                "List[str]",
                "list",
                "Union[List[str], str]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "_dehex": {
            "name": "_dehex",
            "location": 2778,
            "return": [
                "Callable",
                "str",
                "numpy.ndarray",
                "list",
                "float"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Collection[int]",
                    "Set[int]",
                    "FrozenSet[int]"
                ]
            }
        },
        "_enhex": {
            "name": "_enhex",
            "location": 2788,
            "return": [
                "Callable",
                "str",
                "numpy.ndarray",
                "list",
                "float"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes"
                ]
            }
        },
        "test_suite": {
            "name": "test_suite",
            "location": 3300,
            "return": [
                ""
            ],
            "arguments": {
                "options": [
                    "int"
                ],
                "args": []
            }
        },
        "read_pam_header": {
            "name": "read_pam_header",
            "location": 3470,
            "return": [
                "bool",
                "int",
                "float",
                "Tuple[int, int]",
                "List[int]",
                "bytes"
            ],
            "arguments": {
                "infile": [
                    "str",
                    "bool",
                    "bytes",
                    "set"
                ]
            }
        },
        "read_pnm_header": {
            "name": "read_pnm_header",
            "location": 3511,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "infile": [
                    "bool",
                    "Iterable[str]",
                    "str",
                    "tuple"
                ],
                "supported": [
                    "bool",
                    "Iterable[str]",
                    "str",
                    "tuple"
                ]
            }
        },
        "write_pnm": {
            "name": "write_pnm",
            "location": 3590,
            "return": [
                ""
            ],
            "arguments": {
                "file": [
                    "int",
                    "str",
                    "bool",
                    "list"
                ],
                "width": [
                    "str",
                    "int",
                    "list"
                ],
                "height": [
                    "str",
                    "int",
                    "list"
                ],
                "pixels": [
                    "List[str]",
                    "str",
                    "Optional[IO]"
                ],
                "meta": [
                    "List[str]",
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "color_triple": {
            "name": "color_triple",
            "location": 3634,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "color": [
                    "List[int]",
                    "int",
                    "dict",
                    "Tuple[int]",
                    "list"
                ]
            }
        },
        "_main": {
            "name": "_main",
            "location": 3653,
            "return": [
                "bool",
                "str",
                "type",
                "Callable"
            ],
            "arguments": {
                "argv": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "tostring": {
            "name": "tostring",
            "location": 219,
            "return": [
                "Tuple[int, int]",
                "numpy.matrix",
                "float",
                "bool",
                "Union[numpy.ndarray, numpy.void]",
                "int"
            ],
            "arguments": {
                "row": [
                    "List[int]",
                    "bool",
                    "Optional[Any]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "strtobytes": {
            "name": "strtobytes",
            "location": 232,
            "return": [
                "List[int]",
                "str",
                "Dict[str, int]",
                "int"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "bytestostr": {
            "name": "bytestostr",
            "location": 233,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "Error.__str__": {
            "name": "__str__",
            "location": 297,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Writer.__init__": {
            "name": "__init__",
            "location": 316,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "width": [
                    "int",
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[float]"
                ],
                "height": [
                    "int",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "size": [
                    "int",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "greyscale": [
                    "int",
                    "str",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]"
                ],
                "alpha": [
                    "Optional[int]",
                    "Optional[str]",
                    "bool"
                ],
                "bitdepth": [
                    "int",
                    "List[str]"
                ],
                "palette": [
                    "Optional[Sequence[str]]",
                    "int",
                    "bool",
                    "Optional[float]",
                    "List[int]"
                ],
                "transparent": [
                    "Optional[int]",
                    "int",
                    "Optional[float]",
                    "Optional[List[str]]"
                ],
                "background": [
                    "str",
                    "bool"
                ],
                "gamma": [
                    "int",
                    "float",
                    "bool"
                ],
                "compression": [
                    "int",
                    "float",
                    "bool"
                ],
                "interlace": [
                    "bool",
                    "Optional[Iterable['cirq.Qid']]",
                    "Optional[str]",
                    "Optional[int]",
                    "List[str]",
                    "int",
                    "Dict[str, int]",
                    "float"
                ],
                "bytes_per_sample": [
                    "int",
                    "Optional[float]",
                    "Optional[int]"
                ],
                "planes": [
                    "int",
                    "float",
                    "bool"
                ],
                "colormap": [
                    "Optional[int]",
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "maxval": [
                    "bool",
                    "int",
                    "Optional[List[str]]"
                ],
                "chunk_limit": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Writer.make_palette": {
            "name": "make_palette",
            "location": 601,
            "return": [
                "int",
                "bool",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "Writer.write": {
            "name": "write",
            "location": 620,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "str",
                    "int",
                    "T",
                    "List[str]"
                ],
                "rows": [
                    "str"
                ]
            }
        },
        "Writer.write_passes": {
            "name": "write_passes",
            "location": 645,
            "return": [
                "int",
                "slice",
                "str",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "int",
                    "Sequence[MutableSet[int]]",
                    "str",
                    "Dict[str, str]"
                ],
                "rows": [
                    "Dict[str, str]",
                    "Iterable[Dict[str, Any]]",
                    "Iterator[Dict[str, Any]]",
                    "dict"
                ],
                "packed": [
                    "Dict[str, str]",
                    "Iterable[Dict[str, Any]]",
                    "Iterator[Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "Writer.write_array": {
            "name": "write_array",
            "location": 816,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "int",
                    "Callable",
                    "str"
                ],
                "pixels": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Writer.write_packed": {
            "name": "write_packed",
            "location": 827,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "Dict[str, Any]",
                    "bool",
                    "float"
                ],
                "rows": [
                    "Dict[str, Any]",
                    "bool",
                    "float"
                ]
            }
        },
        "Writer.convert_pnm": {
            "name": "convert_pnm",
            "location": 847,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "infile": [
                    "int",
                    "Optional[int]",
                    "bytes"
                ],
                "outfile": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "Writer.convert_ppm_and_pgm": {
            "name": "convert_ppm_and_pgm",
            "location": 863,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ppmfile": [
                    "int",
                    "Optional[int]",
                    "numpy.ndarray",
                    "float"
                ],
                "pgmfile": [
                    "int",
                    "Optional[bool]",
                    "Optional[int]",
                    "Dict[str, Dict[str, int]]",
                    "List[str]"
                ],
                "outfile": [
                    "str",
                    "List[str]",
                    "int",
                    "bytes"
                ]
            }
        },
        "Writer.file_scanlines": {
            "name": "file_scanlines",
            "location": 884,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "infile": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "list"
                ]
            }
        },
        "Writer.array_scanlines": {
            "name": "array_scanlines",
            "location": 910,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pixels": [
                    "float",
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "Writer.array_scanlines_interlace": {
            "name": "array_scanlines_interlace",
            "location": 924,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pixels": [
                    "int",
                    "pygame.math.Vector2"
                ]
            }
        },
        "filter_scanline.sub": {
            "name": "sub",
            "location": 999,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "filter_scanline.up": {
            "name": "up",
            "location": 1006,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "filter_scanline.average": {
            "name": "average",
            "location": 1010,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "filter_scanline.paeth": {
            "name": "paeth",
            "location": 1019,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Image.__init__": {
            "name": "__init__",
            "location": 1268,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rows": [
                    "int",
                    "Optional[Union[int, Any]]",
                    "Optional[str]",
                    "numpy.ndarray",
                    "bool",
                    "Optional[Tuple[int, int]]",
                    "Tuple[int, int]"
                ],
                "info": [
                    "int",
                    "bytes",
                    "List[int]"
                ]
            }
        },
        "Image.save": {
            "name": "save",
            "location": 1278,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str"
                ]
            }
        },
        "_readable.__init__": {
            "name": "__init__",
            "location": 1308,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "buf": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "_readable.read": {
            "name": "read",
            "location": 1312,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "numpy.ndarray",
                    "numpy.array",
                    "List[List[str]]",
                    "Sequence[Mapping[str, Any]]"
                ]
            }
        },
        "Reader.__init__": {
            "name": "__init__",
            "location": 1325,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_guess": [
                    "Optional[str]",
                    "int",
                    "Optional[float]",
                    "Optional[int]"
                ]
            }
        },
        "Reader.chunk": {
            "name": "chunk",
            "location": 1371,
            "return": [
                "Iterable[Mapping[str, Any]]",
                "Iterable['cirq.Qid']",
                "Iterable[int]"
            ],
            "arguments": {
                "self": [],
                "seek": [
                    "Union[str, bytes]",
                    "str"
                ]
            }
        },
        "Reader.chunks": {
            "name": "chunks",
            "location": 1420,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Reader.undo_filter": {
            "name": "undo_filter",
            "location": 1431,
            "return": [
                "Optional[str]",
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "filter_type": [
                    "str",
                    "int",
                    "Union[str, List]"
                ],
                "scanline": [
                    "str",
                    "bool",
                    "List[Dict[str, Any]]",
                    "type",
                    "Type"
                ],
                "previous": [
                    "str",
                    "bool",
                    "List[Dict[str, Any]]",
                    "type",
                    "Type"
                ]
            }
        },
        "Reader.deinterlace": {
            "name": "deinterlace",
            "location": 1543,
            "return": [
                "float",
                "numpy.ndarray",
                "int"
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Reader.iterboxed": {
            "name": "iterboxed",
            "location": 1595,
            "return": [
                "List[int]",
                "Optional[numpy.dtype]",
                "list",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "rows": [
                    "int",
                    "Dict[str, str]",
                    "List[str]",
                    "Sequence[MutableMapping]"
                ]
            }
        },
        "Reader.serialtoflat": {
            "name": "serialtoflat",
            "location": 1623,
            "return": [
                "str",
                "bytearray",
                "bool",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": [],
                "bytes": [
                    "int",
                    "bool"
                ],
                "width": [
                    "Optional[int]",
                    "int",
                    "Union[int, None]",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "Reader.iterstraight": {
            "name": "iterstraight",
            "location": 1650,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Reader.validate_signature": {
            "name": "validate_signature",
            "location": 1678,
            "return": [
                "bytes",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reader.preamble": {
            "name": "preamble",
            "location": 1689,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reader.chunklentype": {
            "name": "chunklentype",
            "location": 1709,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reader.process_chunk": {
            "name": "process_chunk",
            "location": 1728,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Reader.read": {
            "name": "read",
            "location": 1849,
            "return": [
                "int",
                "List[Tuple[int, float, float]]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reader.read_flat": {
            "name": "read_flat",
            "location": 1917,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reader.palette": {
            "name": "palette",
            "location": 1935,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "alpha": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Reader.asDirect": {
            "name": "asDirect",
            "location": 1958,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reader.asFloat": {
            "name": "asFloat",
            "location": 2062,
            "return": [
                "int",
                "List[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "maxval": [
                    "Dict[str, int]",
                    "bool"
                ]
            }
        },
        "Reader._as_rescale": {
            "name": "_as_rescale",
            "location": 2078,
            "return": [
                "Sequence[int]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "get": [
                    "str",
                    "Iterable[str]",
                    "bool",
                    "Optional[float]"
                ],
                "targetbitdepth": [
                    "str",
                    "Iterable[str]",
                    "bool",
                    "Optional[float]"
                ]
            }
        },
        "Reader.asRGB8": {
            "name": "asRGB8",
            "location": 2091,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reader.asRGBA8": {
            "name": "asRGBA8",
            "location": 2111,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reader.asRGB": {
            "name": "asRGB",
            "location": 2121,
            "return": [
                "bool",
                "Dict[str, bool]",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reader.asRGBA": {
            "name": "asRGBA",
            "location": 2150,
            "return": [
                "bool",
                "Tuple[float, float]",
                "Dict[str, bool]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.helperLN": {
            "name": "helperLN",
            "location": 2400,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "Sequence[T]",
                    "numpy.ndarray"
                ]
            }
        },
        "Test.testL8": {
            "name": "testL8",
            "location": 2413,
            "return": [
                "Iterable[Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.testL4": {
            "name": "testL4",
            "location": 2415,
            "return": [
                "Iterable[Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.testL2": {
            "name": "testL2",
            "location": 2417,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.testP2": {
            "name": "testP2",
            "location": 2429,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.testPtrns": {
            "name": "testPtrns",
            "location": 2442,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.testRGBtoRGBA": {
            "name": "testRGBtoRGBA",
            "location": 2462,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.testLtoRGBA": {
            "name": "testLtoRGBA",
            "location": 2471,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.testCtrns": {
            "name": "testCtrns",
            "location": 2479,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.testAdam7read": {
            "name": "testAdam7read",
            "location": 2488,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.testAdam7write": {
            "name": "testAdam7write",
            "location": 2508,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.testPGMin": {
            "name": "testPGMin",
            "location": 2537,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.testPAMin": {
            "name": "testPAMin",
            "location": 2552,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.testLA4": {
            "name": "testLA4",
            "location": 2572,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.testPNMsbit": {
            "name": "testPNMsbit",
            "location": 2578,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.testLtrns0": {
            "name": "testLtrns0",
            "location": 2593,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.testLtrns1": {
            "name": "testLtrns1",
            "location": 2596,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.helperLtrns": {
            "name": "helperLtrns",
            "location": 2599,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "transparent": [
                    "bool",
                    "int",
                    "str",
                    "Callable"
                ]
            }
        },
        "Test.testWinfo": {
            "name": "testWinfo",
            "location": 2610,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.testPackedIter": {
            "name": "testPackedIter",
            "location": 2617,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.testInterlacedArray": {
            "name": "testInterlacedArray",
            "location": 2631,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.testTrnsArray": {
            "name": "testTrnsArray",
            "location": 2636,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.testEmpty": {
            "name": "testEmpty",
            "location": 2646,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.testSigOnly": {
            "name": "testSigOnly",
            "location": 2651,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.testExtraPixels": {
            "name": "testExtraPixels",
            "location": 2656,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.testNotEnoughPixels": {
            "name": "testNotEnoughPixels",
            "location": 2668,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.helperFormat": {
            "name": "helperFormat",
            "location": 2678,
            "return": [
                "List[str]",
                "str",
                "List[Dict]",
                "list",
                "Union[List, Tuple]",
                "numpy.array"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "bytes",
                    "bool",
                    "Iterable[str]",
                    "Callable"
                ]
            }
        },
        "Test.testBadFilter": {
            "name": "testBadFilter",
            "location": 2687,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.testFlat": {
            "name": "testFlat",
            "location": 2697,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.testfromarray": {
            "name": "testfromarray",
            "location": 2705,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.testfromarrayL16": {
            "name": "testfromarrayL16",
            "location": 2708,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.testfromarrayRGB": {
            "name": "testfromarrayRGB",
            "location": 2711,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.testfromarrayIter": {
            "name": "testfromarrayIter",
            "location": 2716,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.testNumpyuint16": {
            "name": "testNumpyuint16",
            "location": 2728,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.testNumpyuint8": {
            "name": "testNumpyuint8",
            "location": 2740,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.testNumpybool": {
            "name": "testNumpybool",
            "location": 2752,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.testNumpyarray": {
            "name": "testNumpyarray",
            "location": 2764,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_suite.test_gradient_horizontal_lr": {
            "name": "test_gradient_horizontal_lr",
            "location": 3310,
            "return": [
                "float"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "List[List[Any]]",
                    "List[str]"
                ],
                "y": [
                    "Callable",
                    "List[List[Any]]",
                    "List[str]"
                ]
            }
        },
        "test_suite.test_gradient_horizontal_rl": {
            "name": "test_gradient_horizontal_rl",
            "location": 3311,
            "return": [
                "float"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "List[List[Any]]",
                    "List[str]"
                ],
                "y": [
                    "Callable",
                    "List[List[Any]]",
                    "List[str]"
                ]
            }
        },
        "test_suite.test_gradient_vertical_tb": {
            "name": "test_gradient_vertical_tb",
            "location": 3312,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "List[List[Any]]",
                    "int",
                    "List[str]"
                ],
                "y": [
                    "Callable",
                    "List[List[Any]]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_suite.test_gradient_vertical_bt": {
            "name": "test_gradient_vertical_bt",
            "location": 3313,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "List[List[Any]]",
                    "int",
                    "List[str]"
                ],
                "y": [
                    "Callable",
                    "List[List[Any]]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_suite.test_radial_tl": {
            "name": "test_radial_tl",
            "location": 3314,
            "return": [
                "Sequence[str]",
                "int"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "List[List[Any]]",
                    "int",
                    "List[str]"
                ],
                "y": [
                    "Callable",
                    "List[List[Any]]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_suite.test_radial_center": {
            "name": "test_radial_center",
            "location": 3315,
            "return": [
                "Mapping[str, Any]"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "List[List[Any]]",
                    "int",
                    "List[str]"
                ],
                "y": [
                    "Callable",
                    "List[List[Any]]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_suite.test_radial_tr": {
            "name": "test_radial_tr",
            "location": 3316,
            "return": [
                "Mapping[str, Any]"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "List[List[Any]]",
                    "int",
                    "List[str]"
                ],
                "y": [
                    "Callable",
                    "List[List[Any]]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_suite.test_radial_bl": {
            "name": "test_radial_bl",
            "location": 3317,
            "return": [
                "Mapping[str, Any]"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "List[List[Any]]",
                    "int",
                    "List[str]"
                ],
                "y": [
                    "Callable",
                    "List[List[Any]]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_suite.test_radial_br": {
            "name": "test_radial_br",
            "location": 3318,
            "return": [
                "Mapping[str, Any]"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "List[List[Any]]",
                    "int",
                    "List[str]"
                ],
                "y": [
                    "Callable",
                    "List[List[Any]]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_suite.test_stripe": {
            "name": "test_stripe",
            "location": 3319,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "test_suite.test_stripe_h_2": {
            "name": "test_stripe_h_2",
            "location": 3320,
            "return": [
                "str",
                "Dict[str, Tuple[str, str]]"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "List[List[Any]]",
                    "int",
                    "List[str]"
                ],
                "y": [
                    "Callable",
                    "List[List[Any]]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_suite.test_stripe_h_4": {
            "name": "test_stripe_h_4",
            "location": 3321,
            "return": [
                "str",
                "Dict[str, Tuple[str, str]]"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "List[List[Any]]",
                    "int",
                    "List[str]"
                ],
                "y": [
                    "Callable",
                    "List[List[Any]]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_suite.test_stripe_h_10": {
            "name": "test_stripe_h_10",
            "location": 3322,
            "return": [
                "str",
                "Dict[str, Tuple[str, str]]"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "List[List[Any]]",
                    "int",
                    "List[str]"
                ],
                "y": [
                    "Callable",
                    "List[List[Any]]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_suite.test_stripe_v_2": {
            "name": "test_stripe_v_2",
            "location": 3323,
            "return": [
                "dict",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "List[List[Any]]",
                    "str",
                    "List[str]"
                ],
                "y": [
                    "Callable",
                    "List[List[Any]]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_suite.test_stripe_v_4": {
            "name": "test_stripe_v_4",
            "location": 3324,
            "return": [
                "dict",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "List[List[Any]]",
                    "str",
                    "List[str]"
                ],
                "y": [
                    "Callable",
                    "List[List[Any]]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_suite.test_stripe_v_10": {
            "name": "test_stripe_v_10",
            "location": 3325,
            "return": [
                "dict",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "List[List[Any]]",
                    "str",
                    "List[str]"
                ],
                "y": [
                    "Callable",
                    "List[List[Any]]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_suite.test_stripe_lr_10": {
            "name": "test_stripe_lr_10",
            "location": 3326,
            "return": [
                "str",
                "Dict[str, Tuple[str, str]]"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "List[List[Any]]",
                    "int",
                    "List[str]"
                ],
                "y": [
                    "Callable",
                    "List[List[Any]]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_suite.test_stripe_rl_10": {
            "name": "test_stripe_rl_10",
            "location": 3327,
            "return": [
                "str",
                "Dict[str, Tuple[str, str]]"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "List[List[Any]]",
                    "int",
                    "List[str]"
                ],
                "y": [
                    "Callable",
                    "List[List[Any]]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_suite.test_checker": {
            "name": "test_checker",
            "location": 3328,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "x": [
                    "int",
                    "bool"
                ],
                "y": [
                    "int",
                    "bool"
                ],
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "test_suite.test_checker_8": {
            "name": "test_checker_8",
            "location": 3329,
            "return": [
                "str",
                "Dict[str, Tuple[str, str]]"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "List[List[Any]]",
                    "int",
                    "List[str]"
                ],
                "y": [
                    "Callable",
                    "List[List[Any]]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_suite.test_checker_15": {
            "name": "test_checker_15",
            "location": 3330,
            "return": [
                "str",
                "Dict[str, Tuple[str, str]]"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "List[List[Any]]",
                    "int",
                    "List[str]"
                ],
                "y": [
                    "Callable",
                    "List[List[Any]]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_suite.test_zero": {
            "name": "test_zero",
            "location": 3331,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "List[List[Any]]",
                    "int",
                    "List[str]"
                ],
                "y": [
                    "Callable",
                    "List[List[Any]]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_suite.test_one": {
            "name": "test_one",
            "location": 3332,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "List[List[Any]]",
                    "int",
                    "List[str]"
                ],
                "y": [
                    "Callable",
                    "List[List[Any]]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_suite.test_pattern": {
            "name": "test_pattern",
            "location": 3358,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {
                "width": [
                    "int",
                    "float"
                ],
                "height": [
                    "int",
                    "float"
                ],
                "bitdepth": [
                    "str"
                ],
                "pattern": [
                    "str",
                    "int"
                ]
            }
        },
        "test_suite.test_rgba": {
            "name": "test_rgba",
            "location": 3377,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "size": [
                    "int",
                    "bytes"
                ],
                "bitdepth": [
                    "int",
                    "bytes"
                ],
                "red": [
                    "int",
                    "Sequence[int]",
                    "numpy.ndarray",
                    "float",
                    "bool"
                ],
                "green": [
                    "int",
                    "float",
                    "bytes",
                    "bool",
                    "Iterable[List[str]]"
                ],
                "blue": [
                    "int",
                    "float",
                    "bytes",
                    "bool",
                    "Iterable[List[str]]"
                ],
                "alpha": [
                    "int",
                    "float",
                    "bytes",
                    "bool",
                    "Iterable[List[str]]"
                ]
            }
        },
        "test_suite.pngsuite_image": {
            "name": "pngsuite_image",
            "location": 3397,
            "return": [
                "numpy.ndarray",
                "int",
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Iterable[str]",
                    "dict"
                ]
            }
        },
        "read_pnm_header.getc": {
            "name": "getc",
            "location": 3546,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]",
                "str",
                "Optional[int]",
                "set"
            ],
            "arguments": {}
        },
        "Writer.__init__.isinteger": {
            "name": "isinteger",
            "location": 458,
            "return": [
                "bool",
                "numpy.ndarray",
                "Optional[bool]",
                "int",
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "int"
                ]
            }
        },
        "Writer.__init__.check_color": {
            "name": "check_color",
            "location": 464,
            "return": [
                "Dict[str, int]",
                "bytes",
                "Mapping[Any, Any]",
                "Dict[str, str]",
                "tuple",
                "int",
                "str"
            ],
            "arguments": {
                "c": [
                    "[str]",
                    "List[str]",
                    "Iterator[Any]"
                ],
                "which": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Reader.undo_filter.sub": {
            "name": "sub",
            "location": 1477,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Reader.undo_filter.up": {
            "name": "up",
            "location": 1490,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Reader.undo_filter.average": {
            "name": "average",
            "location": 1498,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Reader.undo_filter.paeth": {
            "name": "paeth",
            "location": 1512,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Reader.iterboxed.asvalues": {
            "name": "asvalues",
            "location": 1601,
            "return": [
                "numpy.ndarray",
                "int",
                "str",
                "Dict[str, Any]",
                "List[int]"
            ],
            "arguments": {
                "raw": [
                    "gobbli.io.PredictInput",
                    "bool",
                    "list",
                    "numpy.ndarray"
                ]
            }
        },
        "Reader.read.iteridat": {
            "name": "iteridat",
            "location": 1859,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Reader.read.iterdecomp": {
            "name": "iterdecomp",
            "location": 1877,
            "return": [
                ""
            ],
            "arguments": {
                "idat": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Reader.asFloat.iterfloat": {
            "name": "iterfloat",
            "location": 2073,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Reader._as_rescale.iterscale": {
            "name": "iterscale",
            "location": 2086,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Reader.asRGB.iterrgb": {
            "name": "iterrgb",
            "location": 2142,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Reader.asRGBA.newarray": {
            "name": "newarray",
            "location": 2165,
            "return": [
                "str",
                "List[float]",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "enumerate": {
            "name": "enumerate",
            "location": 2264,
            "return": [
                ""
            ],
            "arguments": {
                "seq": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "reversed": {
            "name": "reversed",
            "location": 2273,
            "return": [
                ""
            ],
            "arguments": {
                "l": [
                    "Optional[List[str]]",
                    "numpy.ndarray"
                ]
            }
        },
        "_itertools_imap": {
            "name": "_itertools_imap",
            "location": 2285,
            "return": [
                ""
            ],
            "arguments": {
                "f": [
                    "TextIO",
                    "bool"
                ],
                "seq": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "_itertools_chain": {
            "name": "_itertools_chain",
            "location": 2289,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Test.testPGMin.do": {
            "name": "do",
            "location": 2539,
            "return": [],
            "arguments": {}
        },
        "Test.testPAMin.do": {
            "name": "do",
            "location": 2554,
            "return": [],
            "arguments": {}
        },
        "Test.testPNMsbit.do": {
            "name": "do",
            "location": 2580,
            "return": [
                "str",
                "List[str]",
                "Callable"
            ],
            "arguments": {}
        },
        "Test.testExtraPixels.eachchunk": {
            "name": "eachchunk",
            "location": 2659,
            "return": [],
            "arguments": {
                "chunk": []
            }
        },
        "Test.testNotEnoughPixels.eachchunk": {
            "name": "eachchunk",
            "location": 2669,
            "return": [],
            "arguments": {
                "chunk": []
            }
        },
        "Test.helperFormat.newchunks": {
            "name": "newchunks",
            "location": 2681,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Test.testBadFilter.eachchunk": {
            "name": "eachchunk",
            "location": 2688,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "chunk": [
                    "str",
                    "bool",
                    "Optional[float]",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "Writer.write_passes.extend": {
            "name": "extend",
            "location": 739,
            "return": [],
            "arguments": {
                "sl": []
            }
        },
        "Writer.file_scanlines.line": {
            "name": "line",
            "location": 904,
            "return": [
                "int",
                "float",
                "set"
            ],
            "arguments": {}
        },
        "Image.save.close": {
            "name": "close",
            "location": 1296,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Reader.asDirect.iterpal": {
            "name": "iterpal",
            "location": 2010,
            "return": [
                ""
            ],
            "arguments": {
                "pixels": [
                    "str",
                    "int"
                ]
            }
        },
        "Reader.asDirect.itershift": {
            "name": "itershift",
            "location": 2056,
            "return": [
                ""
            ],
            "arguments": {
                "pixels": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Reader.asRGBA.convert": {
            "name": "convert",
            "location": 2191,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_suite.pngsuite_image.rescale": {
            "name": "rescale",
            "location": 3411,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "int",
                    "bytes",
                    "bool",
                    "dict"
                ]
            }
        },
        "Writer.write_passes.wrapmapint": {
            "name": "wrapmapint",
            "location": 780,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "f": [
                    "int",
                    "str",
                    "List['cirq.Qid']"
                ]
            }
        },
        "Reader.asDirect.itertrns": {
            "name": "itertrns",
            "location": 2028,
            "return": [
                ""
            ],
            "arguments": {
                "pixels": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_array_shim.__new__": {
            "name": "__new__",
            "location": 2237,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "Optional[str]",
                    "str",
                    "memoryview"
                ],
                "typecode": [
                    "str",
                    "Type['AbstractIntegrationConversation']",
                    "int",
                    "Type[T]"
                ],
                "init": [
                    "Optional[str]",
                    "str",
                    "Optional[dict]"
                ]
            }
        },
        "_array_shim.extend": {
            "name": "extend",
            "location": 2244,
            "return": [
                "str",
                "bytearray",
                "numpy.ndarray",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "extension": [
                    "bool",
                    "Union[bool, numpy.ndarray]",
                    "float",
                    "numpy.ndarray"
                ]
            }
        },
        "array": {
            "name": "array",
            "location": 2255,
            "return": [
                "List[Dict]",
                "List[int]",
                "float",
                "List[List[Any]]",
                "list",
                "List[float]",
                "Tuple[int, int, int]",
                "str",
                "Union[List[float], List[int]]"
            ],
            "arguments": {
                "typecode": [
                    "Callable",
                    "bool",
                    "dict",
                    "numpy.ndarray",
                    "type"
                ],
                "init": [
                    "Optional[Union[str, Any, Any, Any]]",
                    "T",
                    "List[bytes]",
                    "List[str]",
                    "int",
                    "List[List[int]]",
                    "Optional[Union[str, Any]]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/mdpopups/st3/mdpopups/rgba.py": {
        "clamp": {
            "name": "clamp",
            "location": 15,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "bool",
                    "complex",
                    "float",
                    "SupportsBytes",
                    "Sequence[str]"
                ],
                "mn": [
                    "str",
                    "bool",
                    "complex",
                    "float",
                    "SupportsBytes",
                    "Sequence[str]"
                ],
                "mx": [
                    "str",
                    "bool",
                    "complex",
                    "float",
                    "SupportsBytes",
                    "Sequence[str]"
                ]
            }
        },
        "round_int": {
            "name": "round_int",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "dec": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "RGBA.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "None",
                    "str",
                    "dict",
                    "Set[int]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "RGBA._split_channels": {
            "name": "_split_channels",
            "location": 43,
            "return": [
                "tuple[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "int"
                ]
            }
        },
        "RGBA.get_rgba": {
            "name": "get_rgba",
            "location": 57,
            "return": [
                "typing.Text",
                "int",
                "Union[tuple, list]",
                "str",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "RGBA.get_rgb": {
            "name": "get_rgb",
            "location": 62,
            "return": [
                "typing.Text",
                "float",
                "int",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "RGBA.apply_alpha": {
            "name": "apply_alpha",
            "location": 67,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": [],
                "background": [
                    "Hashable",
                    "typing.Text"
                ]
            }
        },
        "RGBA.get_luminance": {
            "name": "get_luminance",
            "location": 93,
            "return": [
                "str",
                "dict",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "RGBA.get_true_luminance": {
            "name": "get_true_luminance",
            "location": 98,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RGBA.alpha": {
            "name": "alpha",
            "location": 104,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "factor": [
                    "int",
                    "str",
                    "List[List[int]]",
                    "float"
                ]
            }
        },
        "RGBA.red": {
            "name": "red",
            "location": 109,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "factor": [
                    "Pattern",
                    "list",
                    "str"
                ]
            }
        },
        "RGBA.green": {
            "name": "green",
            "location": 114,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "factor": [
                    "str",
                    "list",
                    "Optional[bytes]"
                ]
            }
        },
        "RGBA.blue": {
            "name": "blue",
            "location": 119,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "factor": [
                    "int",
                    "list"
                ]
            }
        },
        "RGBA.luminance": {
            "name": "luminance",
            "location": 124,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "factor": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "RGBA.tohsv": {
            "name": "tohsv",
            "location": 131,
            "return": [
                "Dict[str, int]",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RGBA.fromhsv": {
            "name": "fromhsv",
            "location": 136,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "h": [
                    "int",
                    "Callable[[T], T]",
                    "float",
                    "str"
                ],
                "s": [
                    "int",
                    "Callable[[T], T]",
                    "float",
                    "str"
                ],
                "v": [
                    "int",
                    "Callable[[T], T]",
                    "float",
                    "str"
                ]
            }
        },
        "RGBA.tohls": {
            "name": "tohls",
            "location": 144,
            "return": [
                "Dict[str, int]",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RGBA.fromhls": {
            "name": "fromhls",
            "location": 149,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "h": [
                    "int",
                    "List[int]"
                ],
                "l": [
                    "int",
                    "List[int]"
                ],
                "s": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "RGBA.tohwb": {
            "name": "tohwb",
            "location": 157,
            "return": [
                "tuple[float]",
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RGBA.fromhwb": {
            "name": "fromhwb",
            "location": 165,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "h": [
                    "int",
                    "float",
                    "bool",
                    "str"
                ],
                "w": [
                    "int"
                ],
                "b": [
                    "int"
                ]
            }
        },
        "RGBA.colorize": {
            "name": "colorize",
            "location": 183,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "deg": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "RGBA.hue": {
            "name": "hue",
            "location": 190,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "deg": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "RGBA.invert": {
            "name": "invert",
            "location": 202,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RGBA.saturation": {
            "name": "saturation",
            "location": 209,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "factor": [
                    "str",
                    "bool",
                    "Container[T]"
                ]
            }
        },
        "RGBA.grayscale": {
            "name": "grayscale",
            "location": 216,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RGBA.sepia": {
            "name": "sepia",
            "location": 224,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RGBA._get_overage": {
            "name": "_get_overage",
            "location": 232,
            "return": [
                "tuple[float]",
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "float",
                    "str"
                ]
            }
        },
        "RGBA._distribute_overage": {
            "name": "_distribute_overage",
            "location": 245,
            "return": [
                "tuple",
                "Dict[str, int]",
                "bytes",
                "Mapping[Any, Any]",
                "Dict[str, str]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "Iterator[Any]",
                    "Iterator[Tuple[Any, Any]]",
                    "set",
                    "Generator[dict, None, None]"
                ],
                "o": [
                    "int",
                    "list",
                    "List[str]",
                    "str"
                ],
                "s": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "RGBA.brightness": {
            "name": "brightness",
            "location": 266,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "factor": [
                    "TextIO",
                    "List[List[int]]"
                ]
            }
        },
        "RGBA._split_channels.alpha_channel": {
            "name": "alpha_channel",
            "location": 46,
            "return": [
                "int",
                "Dict[str, int]",
                "str",
                "List[int]"
            ],
            "arguments": {
                "alpha": [
                    "str",
                    "float",
                    "int",
                    "Dict[str, bool]"
                ]
            }
        },
        "RGBA.apply_alpha.tx_alpha": {
            "name": "tx_alpha",
            "location": 75,
            "return": [
                "str",
                "bytearray",
                "Dict[str, int]"
            ],
            "arguments": {
                "cf": [
                    "int",
                    "float",
                    "str",
                    "Tuple[float, float]"
                ],
                "af": [
                    "int",
                    "float",
                    "str",
                    "Tuple[float, float]"
                ],
                "cb": [
                    "int",
                    "float",
                    "str",
                    "Tuple[float, float]"
                ],
                "ab": [
                    "int",
                    "float",
                    "str",
                    "Tuple[float, float]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/mdpopups/st3/mdpopups/st_clean_css.py": {
        "clean_css": {
            "name": "clean_css",
            "location": 25,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Pattern[str]"
                ],
                "preserve_lines": [
                    "bool",
                    "str",
                    "Pattern[str]"
                ]
            }
        },
        "clean_css.remove_comments": {
            "name": "remove_comments",
            "location": 28,
            "return": [
                "str",
                "Tuple[int]",
                "List[Dict]"
            ],
            "arguments": {
                "group": [
                    "str",
                    "Dict[str, Any]"
                ],
                "preserve_lines": [
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "clean_css.evaluate": {
            "name": "evaluate",
            "location": 33,
            "return": [
                "int"
            ],
            "arguments": {
                "m": [
                    "Optional[str]",
                    "Optional[T]",
                    "int",
                    "bool",
                    "str"
                ],
                "preserve_lines": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[float]",
                    "List[List[Callable]]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/mdpopups/st3/mdpopups/st_code_highlight.py": {
        "SublimeHighlight.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "scheme": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "SublimeHighlight.setup": {
            "name": "setup",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SublimeHighlight.setup_print_block": {
            "name": "setup_print_block",
            "location": 63,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "curr_sel": [
                    "Exception"
                ],
                "multi": [
                    "Exception",
                    "bool"
                ]
            }
        },
        "SublimeHighlight.print_line": {
            "name": "print_line",
            "location": 72,
            "return": [
                "typing.Text",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "set",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str",
                    "int",
                    "Tuple[int, int]",
                    "Union[str, List[str]]",
                    "List[str]"
                ],
                "num": [
                    "bool",
                    "str",
                    "Sequence[str]",
                    "List[str]"
                ]
            }
        },
        "SublimeHighlight.convert_view_to_html": {
            "name": "convert_view_to_html",
            "location": 81,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SublimeHighlight.html_encode": {
            "name": "html_encode",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "SublimeHighlight.format_text": {
            "name": "format_text",
            "location": 109,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ],
                "text": [
                    "str",
                    "int"
                ],
                "color": [
                    "str",
                    "int"
                ],
                "bgcolor": [
                    "str",
                    "Union[str, None]"
                ],
                "style": [
                    "str",
                    "int",
                    "set"
                ],
                "empty": [
                    "str",
                    "int"
                ],
                "annotate": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "SublimeHighlight.convert_line_to_html": {
            "name": "convert_line_to_html",
            "location": 132,
            "return": [
                "str",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "empty": [
                    "str",
                    "MutableMapping[str, Any]",
                    "int",
                    "Optional[str]",
                    "Type"
                ]
            }
        },
        "SublimeHighlight.write_body": {
            "name": "write_body",
            "location": 166,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SublimeHighlight.set_view": {
            "name": "set_view",
            "location": 183,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "str",
                    "Iterable[str]",
                    "int",
                    "Optional[str]"
                ],
                "lang": [
                    "bool",
                    "str",
                    "List[str]",
                    "Tuple[Sequence[str]]",
                    "List[T]",
                    "Set[str]"
                ]
            }
        },
        "SublimeHighlight.syntax_highlight": {
            "name": "syntax_highlight",
            "location": 230,
            "return": [
                "str",
                "int",
                "sublime.View",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "str",
                    "T",
                    "bool"
                ],
                "lang": [
                    "str",
                    "T",
                    "bool"
                ],
                "hl_lines": [
                    "str",
                    "list"
                ],
                "inline": [
                    "str",
                    "bool"
                ],
                "no_wrap": [
                    "str",
                    "bool"
                ],
                "code_wrap": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/mdpopups/st3/mdpopups/st_color_scheme_matcher.py": {
        "sublime_format_path": {
            "name": "sublime_format_path",
            "location": 50,
            "return": [
                "str",
                "int",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "pth": [
                    "str",
                    "Union[List[str], List[Any]]",
                    "dict",
                    "Union[bool, str]",
                    "int"
                ]
            }
        },
        "ColorSchemeMatcher.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "scheme_file": [
                    "str"
                ],
                "color_filter": [
                    "None",
                    "Optional[int]",
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "ColorSchemeMatcher.filter": {
            "name": "filter",
            "location": 81,
            "return": [
                "float",
                "Callable[[None], bool]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "plist": [
                    "str",
                    "bool",
                    "list"
                ]
            }
        },
        "ColorSchemeMatcher.parse_scheme": {
            "name": "parse_scheme",
            "location": 86,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ColorSchemeMatcher.process_color": {
            "name": "process_color",
            "location": 155,
            "return": [
                "tuple[None]",
                "Optional[str]",
                "bool",
                "Optional[bool]",
                "str"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "str"
                ],
                "simple_strip": [
                    "bool",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict"
                ]
            }
        },
        "ColorSchemeMatcher.get_special_color": {
            "name": "get_special_color",
            "location": 179,
            "return": [
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict",
                    "Optional[Mapping[str, Any]]"
                ],
                "simulate_transparency": [
                    "bool",
                    "str",
                    "dict",
                    "Optional[Mapping[str, Any]]"
                ]
            }
        },
        "ColorSchemeMatcher.get_plist_file": {
            "name": "get_plist_file",
            "location": 188,
            "return": [
                "str",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ColorSchemeMatcher.get_scheme_file": {
            "name": "get_scheme_file",
            "location": 193,
            "return": [
                "str",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ColorSchemeMatcher.guess_color": {
            "name": "guess_color",
            "location": 198,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "scope_key": [
                    "str",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "Optional[Callable]"
                ],
                "selected": [
                    "bool",
                    "str",
                    "Callable"
                ],
                "explicit_background": [
                    "bool",
                    "Optional[str]",
                    "int"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/mdpopups/st3/mdpopups/st_mapping.py": {},
    "devhost-master/sublime-packages/mdpopups/st3/mdpopups/st_pygments_highlight.py": {
        "replace_nbsp": {
            "name": "replace_nbsp",
            "location": 23,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "m": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "syntax_hl": {
            "name": "syntax_hl",
            "location": 158,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "src": [
                    "str",
                    "List[str]"
                ],
                "lang": [
                    "str",
                    "None"
                ],
                "guess_lang": [
                    "bool",
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "inline": [
                    "str",
                    "bool"
                ],
                "code_wrap": [
                    "bool",
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "SublimeWrapBlockFormatter.wrap": {
            "name": "wrap",
            "location": 32,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "int",
                    "bytes"
                ],
                "outfile": [
                    "str",
                    "Union[str, bytes]",
                    "Union[str, bytes, IO[bytes]]",
                    "Optional[Tuple[Any, Any]]"
                ]
            }
        },
        "SublimeWrapBlockFormatter._wrap_code": {
            "name": "_wrap_code",
            "location": 37,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[int,typing.Text]]]",
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "SublimeBlockFormatter.wrap": {
            "name": "wrap",
            "location": 76,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "int",
                    "bytes"
                ],
                "outfile": [
                    "str",
                    "Union[str, bytes]",
                    "Union[str, bytes, IO[bytes]]",
                    "Optional[Tuple[Any, Any]]"
                ]
            }
        },
        "SublimeBlockFormatter._wrap_code": {
            "name": "_wrap_code",
            "location": 81,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[int,typing.Text]]]",
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "SublimeInlineHtmlFormatter.wrap": {
            "name": "wrap",
            "location": 120,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "int",
                    "bytes"
                ],
                "outfile": [
                    "str",
                    "Union[str, bytes]",
                    "Union[str, bytes, IO[bytes]]",
                    "Optional[Tuple[Any, Any]]"
                ]
            }
        },
        "SublimeInlineHtmlFormatter._wrap_code": {
            "name": "_wrap_code",
            "location": 125,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[int,typing.Text]]]",
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "List[str]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/mdpopups/st3/mdpopups/st_scheme_template.py": {
        "fmt_float": {
            "name": "fmt_float",
            "location": 185,
            "return": [
                "str"
            ],
            "arguments": {
                "f": [
                    "str",
                    "dict",
                    "Callable",
                    "Dict[str, Any]"
                ],
                "p": [
                    "int",
                    "str",
                    "dict",
                    "Callable",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_pygments": {
            "name": "get_pygments",
            "location": 505,
            "return": [
                "typing.Text",
                "str",
                "bool",
                "list",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "style": [
                    "Optional[bool]",
                    "Optional[int]",
                    "List[int]",
                    "str",
                    "Iterable"
                ]
            }
        },
        "Scheme2CSS.__init__": {
            "name": "__init__",
            "location": 203,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "scheme_file": [
                    "str",
                    "bool"
                ]
            }
        },
        "Scheme2CSS.guess_style": {
            "name": "guess_style",
            "location": 211,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "str",
                    "float",
                    "Callable[..., None]",
                    "int"
                ],
                "selected": [
                    "bool",
                    "str",
                    "float",
                    "Callable[..., None]",
                    "int"
                ],
                "explicit_background": [
                    "bool",
                    "str",
                    "float",
                    "Callable[..., None]",
                    "int"
                ]
            }
        },
        "Scheme2CSS.parse_global": {
            "name": "parse_global",
            "location": 217,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scheme2CSS.process_color": {
            "name": "process_color",
            "location": 244,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "str",
                    "Optional[int]"
                ],
                "simple_strip": [
                    "bool",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict"
                ]
            }
        },
        "Scheme2CSS.setup": {
            "name": "setup",
            "location": 267,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scheme2CSS.read_css": {
            "name": "read_css",
            "location": 288,
            "return": [
                "typing.Text",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "css": [
                    "str"
                ]
            }
        },
        "Scheme2CSS.fade": {
            "name": "fade",
            "location": 306,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "css": [
                    "str"
                ],
                "factor": [
                    "int",
                    "float",
                    "Callable[[int], None]",
                    "str"
                ]
            }
        },
        "Scheme2CSS.colorize": {
            "name": "colorize",
            "location": 322,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "css": [
                    "str"
                ],
                "degree": [
                    "int",
                    "sublime.View",
                    "Callable",
                    "str"
                ]
            }
        },
        "Scheme2CSS.hue": {
            "name": "hue",
            "location": 333,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "css": [
                    "str"
                ],
                "degree": [
                    "int",
                    "sublime.View",
                    "Callable",
                    "str"
                ]
            }
        },
        "Scheme2CSS.invert": {
            "name": "invert",
            "location": 344,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "css": [
                    "str"
                ]
            }
        },
        "Scheme2CSS.saturation": {
            "name": "saturation",
            "location": 355,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "css": [
                    "str"
                ],
                "factor": [
                    "int",
                    "sublime.View",
                    "Callable",
                    "str"
                ]
            }
        },
        "Scheme2CSS.grayscale": {
            "name": "grayscale",
            "location": 366,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "css": [
                    "str"
                ]
            }
        },
        "Scheme2CSS.sepia": {
            "name": "sepia",
            "location": 377,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "css": [
                    "str"
                ]
            }
        },
        "Scheme2CSS.brightness": {
            "name": "brightness",
            "location": 388,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "css": [
                    "str"
                ],
                "factor": [
                    "int",
                    "sublime.View",
                    "Callable",
                    "str"
                ]
            }
        },
        "Scheme2CSS.to_fg": {
            "name": "to_fg",
            "location": 399,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "css": [
                    "str",
                    "Union[List[str], str]",
                    "Sequence[float]"
                ]
            }
        },
        "Scheme2CSS.to_bg": {
            "name": "to_bg",
            "location": 408,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "css": [
                    "str",
                    "Union[List[str], str]",
                    "Sequence[float]"
                ]
            }
        },
        "Scheme2CSS.pygments": {
            "name": "pygments",
            "location": 417,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": [],
                "style": [
                    "int",
                    "sublime.View",
                    "Callable",
                    "str"
                ]
            }
        },
        "Scheme2CSS.retrieve_selector": {
            "name": "retrieve_selector",
            "location": 422,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": [],
                "selector": [
                    "bool",
                    "int",
                    "Iterable[Iterable[T]]",
                    "str",
                    "Optional[str]",
                    "bytes"
                ],
                "key": [
                    "None",
                    "str",
                    "list",
                    "bytes",
                    "Optional[str]",
                    "Union[str, int]",
                    "dict",
                    "set"
                ],
                "explicit_background": [
                    "bool",
                    "int",
                    "Iterable[Iterable[T]]",
                    "str",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "Scheme2CSS.apply_template": {
            "name": "apply_template",
            "location": 445,
            "return": [
                "typing.Text",
                "Dict[Any, int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "css": [
                    "str"
                ],
                "css_type": [
                    "str",
                    "Type"
                ],
                "template_vars": [
                    "None",
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Scheme2CSS.get_css": {
            "name": "get_css",
            "location": 468,
            "return": [
                "str",
                "Optional[bool]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/mdpopups/st3/mdpopups/tests.py": {
        "active_view": {
            "name": "active_view",
            "location": 103,
            "return": [
                "List[str]",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "clear_cache": {
            "name": "clear_cache",
            "location": 108,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "menu": {
            "name": "menu",
            "location": 113,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "on_close_popup": {
            "name": "on_close_popup",
            "location": 130,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "href": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "on_close_phantom": {
            "name": "on_close_phantom",
            "location": 136,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "href": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "show_popup": {
            "name": "show_popup",
            "location": 142,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "show_phantom": {
            "name": "show_phantom",
            "location": 150,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "mdpopups_popup_format_test": {
            "name": "mdpopups_popup_format_test",
            "location": 160,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "mdpopups_phantom_format_test": {
            "name": "mdpopups_phantom_format_test",
            "location": 165,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "menu.run_test": {
            "name": "run_test",
            "location": 120,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "float",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/mdpopups/st3/mdpopups/version.py": {
        "version": {
            "name": "version",
            "location": 7,
            "return": [
                "tuple[int]",
                "str",
                "bytes",
                "bool",
                "dict"
            ],
            "arguments": {}
        }
    },
    "devhost-master/sublime-packages/mdpopups/st3/mdpopups/x11colors.py": {
        "hex2name": {
            "name": "hex2name",
            "location": 667,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "Union[str, List[str]]",
                "Mapping"
            ],
            "arguments": {
                "hex": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "name2hex": {
            "name": "name2hex",
            "location": 673,
            "return": [
                "int",
                "Union[str, List[str]]",
                "dict",
                "type",
                "List[str]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]",
                    "dict",
                    "T"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/mdpopups/st3/mdpopups/__init__.py": {
        "_log": {
            "name": "_log",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": []
            }
        },
        "_debug": {
            "name": "_debug",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [],
                "level": []
            }
        },
        "_get_setting": {
            "name": "_get_setting",
            "location": 61,
            "return": [],
            "arguments": {
                "name": [],
                "default": [
                    "None"
                ]
            }
        },
        "_can_show": {
            "name": "_can_show",
            "location": 67,
            "return": [
                "bool"
            ],
            "arguments": {
                "view": [],
                "location": [
                    "int"
                ]
            }
        },
        "_clear_cache": {
            "name": "_clear_cache",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_is_cache_expired": {
            "name": "_is_cache_expired",
            "location": 108,
            "return": [
                "bool"
            ],
            "arguments": {
                "cache_time": []
            }
        },
        "_prune_cache": {
            "name": "_prune_cache",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_get_sublime_highlighter": {
            "name": "_get_sublime_highlighter",
            "location": 129,
            "return": [
                "None",
                "SublimeHighlight"
            ],
            "arguments": {
                "view": []
            }
        },
        "_get_scheme": {
            "name": "_get_scheme",
            "location": 151,
            "return": [
                "tuple[typing.Union[None,Scheme2CSS,typing.Text]]"
            ],
            "arguments": {
                "view": []
            }
        },
        "_get_default_css": {
            "name": "_get_default_css",
            "location": 184,
            "return": [],
            "arguments": {}
        },
        "_get_user_css": {
            "name": "_get_user_css",
            "location": 190,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "_get_theme": {
            "name": "_get_theme",
            "location": 254,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "view": [],
                "css": [
                    "None"
                ],
                "css_type": [],
                "template_vars": [
                    "None"
                ]
            }
        },
        "_remove_entities": {
            "name": "_remove_entities",
            "location": 272,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "_create_html": {
            "name": "_create_html",
            "location": 285,
            "return": [],
            "arguments": {
                "view": [],
                "content": [],
                "md": [
                    "bool"
                ],
                "css": [
                    "None"
                ],
                "debug": [
                    "bool"
                ],
                "css_type": [],
                "wrapper_class": [
                    "None"
                ],
                "template_vars": [
                    "None"
                ],
                "template_env_options": [
                    "None"
                ],
                "nl2br": [
                    "bool"
                ],
                "allow_code_wrap": [
                    "bool"
                ]
            }
        },
        "_markup_template": {
            "name": "_markup_template",
            "location": 330,
            "return": [],
            "arguments": {
                "markup": [],
                "variables": [],
                "options": []
            }
        },
        "version": {
            "name": "version",
            "location": 344,
            "return": [],
            "arguments": {}
        },
        "md2html": {
            "name": "md2html",
            "location": 350,
            "return": [],
            "arguments": {
                "view": [],
                "markup": [],
                "template_vars": [
                    "None"
                ],
                "template_env_options": [
                    "None"
                ],
                "nl2br": [
                    "bool"
                ],
                "allow_code_wrap": [
                    "bool"
                ]
            }
        },
        "color_box": {
            "name": "color_box",
            "location": 398,
            "return": [],
            "arguments": {
                "colors": [],
                "border": [
                    "typing.Text"
                ],
                "border2": [
                    "None"
                ],
                "height": [
                    "int"
                ],
                "width": [
                    "int"
                ],
                "border_size": [
                    "int"
                ],
                "check_size": [
                    "int"
                ],
                "max_colors": [
                    "int"
                ],
                "alpha": [
                    "bool"
                ],
                "border_map": [
                    "int"
                ]
            }
        },
        "color_box_raw": {
            "name": "color_box_raw",
            "location": 410,
            "return": [],
            "arguments": {
                "colors": [],
                "border": [
                    "typing.Text"
                ],
                "border2": [
                    "None"
                ],
                "height": [
                    "int"
                ],
                "width": [
                    "int"
                ],
                "border_size": [
                    "int"
                ],
                "check_size": [
                    "int"
                ],
                "max_colors": [
                    "int"
                ],
                "alpha": [
                    "bool"
                ],
                "border_map": [
                    "int"
                ]
            }
        },
        "tint": {
            "name": "tint",
            "location": 422,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "img": [],
                "color": [],
                "opacity": [
                    "int"
                ],
                "height": [
                    "None"
                ],
                "width": [
                    "None"
                ]
            }
        },
        "tint_raw": {
            "name": "tint_raw",
            "location": 435,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "img": [],
                "color": [],
                "opacity": [
                    "int"
                ]
            }
        },
        "get_language_from_view": {
            "name": "get_language_from_view",
            "location": 448,
            "return": [
                "None"
            ],
            "arguments": {
                "view": []
            }
        },
        "syntax_highlight": {
            "name": "syntax_highlight",
            "location": 464,
            "return": [],
            "arguments": {
                "view": [],
                "src": [],
                "language": [
                    "None"
                ],
                "inline": [
                    "bool"
                ],
                "allow_code_wrap": [
                    "bool"
                ]
            }
        },
        "scope2style": {
            "name": "scope2style",
            "location": 485,
            "return": [
                "dict[typing.Text, typing.Union[None,typing.Text]]"
            ],
            "arguments": {
                "view": [],
                "scope": [],
                "selected": [
                    "bool"
                ],
                "explicit_background": [
                    "bool"
                ]
            }
        },
        "clear_cache": {
            "name": "clear_cache",
            "location": 501,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "hide_popup": {
            "name": "hide_popup",
            "location": 507,
            "return": [
                "None"
            ],
            "arguments": {
                "view": []
            }
        },
        "update_popup": {
            "name": "update_popup",
            "location": 513,
            "return": [
                "None"
            ],
            "arguments": {
                "view": [],
                "content": [],
                "md": [
                    "bool"
                ],
                "css": [
                    "None"
                ],
                "wrapper_class": [
                    "None"
                ],
                "template_vars": [
                    "None"
                ],
                "template_env_options": [
                    "None"
                ],
                "nl2br": [
                    "bool"
                ],
                "allow_code_wrap": [
                    "bool"
                ]
            }
        },
        "show_popup": {
            "name": "show_popup",
            "location": 538,
            "return": [
                "None"
            ],
            "arguments": {
                "view": [],
                "content": [],
                "md": [
                    "bool"
                ],
                "css": [
                    "None"
                ],
                "flags": [
                    "int"
                ],
                "location": [
                    "int"
                ],
                "max_width": [
                    "int"
                ],
                "max_height": [
                    "int"
                ],
                "on_navigate": [
                    "None"
                ],
                "on_hide": [
                    "None"
                ],
                "wrapper_class": [
                    "None"
                ],
                "template_vars": [
                    "None"
                ],
                "template_env_options": [
                    "None"
                ],
                "nl2br": [
                    "bool"
                ],
                "allow_code_wrap": [
                    "bool"
                ]
            }
        },
        "is_popup_visible": {
            "name": "is_popup_visible",
            "location": 571,
            "return": [],
            "arguments": {
                "view": []
            }
        },
        "add_phantom": {
            "name": "add_phantom",
            "location": 577,
            "return": [
                "None"
            ],
            "arguments": {
                "view": [],
                "key": [],
                "region": [],
                "content": [],
                "layout": [],
                "md": [
                    "bool"
                ],
                "css": [
                    "None"
                ],
                "on_navigate": [
                    "None"
                ],
                "wrapper_class": [
                    "None"
                ],
                "template_vars": [
                    "None"
                ],
                "template_env_options": [
                    "None"
                ],
                "nl2br": [
                    "bool"
                ],
                "allow_code_wrap": [
                    "bool"
                ]
            }
        },
        "erase_phantoms": {
            "name": "erase_phantoms",
            "location": 603,
            "return": [
                "None"
            ],
            "arguments": {
                "view": [],
                "key": []
            }
        },
        "erase_phantom_by_id": {
            "name": "erase_phantom_by_id",
            "location": 609,
            "return": [
                "None"
            ],
            "arguments": {
                "view": [],
                "pid": []
            }
        },
        "query_phantom": {
            "name": "query_phantom",
            "location": 615,
            "return": [],
            "arguments": {
                "view": [],
                "pid": []
            }
        },
        "query_phantoms": {
            "name": "query_phantoms",
            "location": 621,
            "return": [],
            "arguments": {
                "view": [],
                "pids": []
            }
        },
        "_MdWrapper.__init__": {
            "name": "__init__",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MdWrapper.registerExtensions": {
            "name": "registerExtensions",
            "location": 220,
            "return": [
                "_MdWrapper"
            ],
            "arguments": {
                "self": [],
                "extensions": [],
                "configs": []
            }
        },
        "_remove_entities.repl": {
            "name": "repl",
            "location": 278,
            "return": [],
            "arguments": {
                "m": []
            }
        },
        "Phantom.__init__": {
            "name": "__init__",
            "location": 630,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "region": [],
                "content": [],
                "layout": [],
                "md": [
                    "bool"
                ],
                "css": [
                    "None"
                ],
                "on_navigate": [
                    "None"
                ],
                "wrapper_class": [
                    "None"
                ],
                "template_vars": [
                    "None"
                ],
                "template_env_options": [
                    "None"
                ],
                "nl2br": [
                    "bool"
                ],
                "allow_code_wrap": [
                    "bool"
                ]
            }
        },
        "Phantom.__eq__": {
            "name": "__eq__",
            "location": 647,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "rhs": []
            }
        },
        "PhantomSet.__init__": {
            "name": "__init__",
            "location": 664,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [],
                "key": [
                    "typing.Text"
                ]
            }
        },
        "PhantomSet.__del__": {
            "name": "__del__",
            "location": 669,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhantomSet.update": {
            "name": "update",
            "location": 675,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_phantoms": []
            }
        }
    },
    "devhost-master/sublime-packages/mdpopups/st3/mdpopups/mdx/betterem.py": {
        "makeExtension": {
            "name": "makeExtension",
            "location": 151,
            "return": [
                "BetterEmExtension",
                "List[str]",
                "int",
                "List[List[str]]",
                "bool"
            ],
            "arguments": {}
        },
        "BetterEmExtension.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BetterEmExtension.extendMarkdown": {
            "name": "extendMarkdown",
            "location": 105,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "int",
                    "Callable",
                    "str"
                ],
                "md_globals": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "BetterEmExtension.make_better": {
            "name": "make_better",
            "location": 112,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "int",
                    "str",
                    "Union[float, str]",
                    "dict"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/mdpopups/st3/mdpopups/mdx/extrarawhtml.py": {
        "makeExtension": {
            "name": "makeExtension",
            "location": 43,
            "return": [
                "ExtraRawHtmExtension",
                "float",
                "List[int]",
                "int"
            ],
            "arguments": {}
        },
        "ExtraRawHtmExtension.extendMarkdown": {
            "name": "extendMarkdown",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "str",
                    "int"
                ],
                "md_globals": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/mdpopups/st3/mdpopups/mdx/highlight.py": {
        "replace_nbsp": {
            "name": "replace_nbsp",
            "location": 89,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "m": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "get_hl_settings": {
            "name": "get_hl_settings",
            "location": 395,
            "return": [
                "dict",
                "str",
                "bool"
            ],
            "arguments": {
                "md": [
                    "str",
                    "bool"
                ]
            }
        },
        "makeExtension": {
            "name": "makeExtension",
            "location": 471,
            "return": [
                "List[List[str]]",
                "HighlightExtension"
            ],
            "arguments": {}
        },
        "Highlight.__init__": {
            "name": "__init__",
            "location": 244,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "guess_lang": [
                    "bool",
                    "float",
                    "str"
                ],
                "pygments_style": [
                    "typing.Text",
                    "bool",
                    "float",
                    "str"
                ],
                "use_pygments": [
                    "bool"
                ],
                "noclasses": [
                    "bool",
                    "float",
                    "str"
                ],
                "extend_pygments_lang": [
                    "None",
                    "Optional[Union['AbstractSetIntStr', 'MappingIntStrAny']]",
                    "Optional[str]",
                    "bool",
                    "Optional[static_frame.core.util.DepthLevelSpecifier]",
                    "str"
                ],
                "linenums": [
                    "bool",
                    "float",
                    "str"
                ],
                "sublime_hl": [
                    "tuple[typing.Optional[bool]]",
                    "bool",
                    "float",
                    "str"
                ],
                "sublime_wrap": [
                    "bool",
                    "float",
                    "str"
                ]
            }
        },
        "Highlight.get_extended_language": {
            "name": "get_extended_language",
            "location": 272,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "language": [
                    "int",
                    "dict"
                ]
            }
        },
        "Highlight.get_lexer": {
            "name": "get_lexer",
            "location": 277,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "str",
                    "int"
                ],
                "language": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Highlight.escape": {
            "name": "escape",
            "location": 298,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "txt": [
                    "str",
                    "int",
                    "bytes"
                ],
                "code_wrap": [
                    "str",
                    "bool",
                    "int",
                    "Callable",
                    "Optional[str]"
                ]
            }
        },
        "Highlight.highlight": {
            "name": "highlight",
            "location": 313,
            "return": [
                "typing.Text",
                "Union[str, List[str]]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "str"
                ],
                "language": [
                    "str"
                ],
                "css_class": [
                    "typing.Text",
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "hl_lines": [
                    "None",
                    "bool",
                    "str"
                ],
                "linestart": [
                    "int",
                    "str",
                    "bool"
                ],
                "linestep": [
                    "int",
                    "str",
                    "bool"
                ],
                "linespecial": [
                    "int",
                    "str",
                    "bool"
                ],
                "inline": [
                    "bool",
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "HighlightTreeprocessor.run": {
            "name": "run",
            "location": 421,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "bool",
                    "str",
                    "IO"
                ]
            }
        },
        "HighlightExtension.__init__": {
            "name": "__init__",
            "location": 456,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HighlightExtension.extendMarkdown": {
            "name": "extendMarkdown",
            "location": 462,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "str",
                    "int",
                    "Callable"
                ],
                "md_globals": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "InlineHtmlFormatter.wrap": {
            "name": "wrap",
            "location": 105,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "int",
                    "bytes"
                ],
                "outfile": [
                    "str",
                    "Union[str, bytes]",
                    "Union[str, bytes, IO[bytes]]",
                    "Optional[Tuple[Any, Any]]"
                ]
            }
        },
        "InlineHtmlFormatter._wrap_code": {
            "name": "_wrap_code",
            "location": 110,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[int,typing.Text]]]",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "SublimeInlineHtmlFormatter.wrap": {
            "name": "wrap",
            "location": 121,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "int",
                    "bytes"
                ],
                "outfile": [
                    "str",
                    "Union[str, bytes]",
                    "Union[str, bytes, IO[bytes]]",
                    "Optional[Tuple[Any, Any]]"
                ]
            }
        },
        "SublimeInlineHtmlFormatter._wrap_code": {
            "name": "_wrap_code",
            "location": 126,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[int,typing.Text]]]",
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "SublimeBlockFormatter.wrap": {
            "name": "wrap",
            "location": 161,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "int",
                    "bytes"
                ],
                "outfile": [
                    "str",
                    "Union[str, bytes]",
                    "Union[str, bytes, IO[bytes]]",
                    "Optional[Tuple[Any, Any]]"
                ]
            }
        },
        "SublimeBlockFormatter._wrap_code": {
            "name": "_wrap_code",
            "location": 166,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[int,typing.Text]]]",
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "SublimeWrapBlockFormatter.wrap": {
            "name": "wrap",
            "location": 200,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "int",
                    "bytes"
                ],
                "outfile": [
                    "str",
                    "Union[str, bytes]",
                    "Union[str, bytes, IO[bytes]]",
                    "Optional[Tuple[Any, Any]]"
                ]
            }
        },
        "SublimeWrapBlockFormatter._wrap_code": {
            "name": "_wrap_code",
            "location": 205,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[int,typing.Text]]]",
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "List[str]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/mdpopups/st3/mdpopups/mdx/inlinehilite.py": {
        "_escape": {
            "name": "_escape",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "txt": [
                    "str",
                    "dict",
                    "bytes"
                ]
            }
        },
        "makeExtension": {
            "name": "makeExtension",
            "location": 157,
            "return": [
                "InlineHiliteExtension",
                "List[str]",
                "int",
                "List[List[str]]",
                "bool"
            ],
            "arguments": {}
        },
        "InlineHilitePattern.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "denite.util.Nvim",
                    "bool",
                    "deoplete.util.Nvim",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "md": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "InlineHilitePattern.get_settings": {
            "name": "get_settings",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InlineHilitePattern.highlight_code": {
            "name": "highlight_code",
            "location": 78,
            "return": [
                "str",
                "IO[Any]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "language": [
                    "int",
                    "util.AsyncHttpGetter",
                    "str",
                    "list"
                ],
                "src": []
            }
        },
        "InlineHilitePattern.handleMatch": {
            "name": "handleMatch",
            "location": 98,
            "return": [
                "Callable[[T], bool]",
                "Iterable[T]"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "type",
                    "MutableMapping[str, Any]",
                    "Mapping[str, str]",
                    "BaseException",
                    "int",
                    "Type",
                    "str"
                ]
            }
        },
        "InlineHiliteExtension.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InlineHiliteExtension.extendMarkdown": {
            "name": "extendMarkdown",
            "location": 138,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "str"
                ],
                "md_globals": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/mdpopups/st3/mdpopups/mdx/magiclink.py": {
        "makeExtension": {
            "name": "makeExtension",
            "location": 255,
            "return": [
                "List[List[str]]",
                "MagiclinkExtension"
            ],
            "arguments": {}
        },
        "MagicShortenerTreeprocessor.shorten": {
            "name": "shorten",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "link": [
                    "str",
                    "int",
                    "List[str]",
                    "Optional[str]"
                ],
                "my_repo": [
                    "int",
                    "Dict[str, Any]"
                ],
                "is_commit": [
                    "bool",
                    "str"
                ],
                "user_repo": [
                    "int",
                    "Dict[str, Any]"
                ],
                "value": [
                    "str",
                    "int",
                    "List[int]"
                ],
                "url": [
                    "bool",
                    "str"
                ],
                "hash_size": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "MagicShortenerTreeprocessor.run": {
            "name": "run",
            "location": 100,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "bool",
                    "str",
                    "IO"
                ]
            }
        },
        "MagiclinkPattern.handleMatch": {
            "name": "handleMatch",
            "location": 161,
            "return": [
                "Callable[[T], bool]",
                "Iterable[T]"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "List[str]",
                    "List[int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "MagiclinkAutoPattern.handleMatch": {
            "name": "handleMatch",
            "location": 183,
            "return": [
                "Callable[[T], bool]",
                "Iterable[T]"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "int",
                    "Iterable['cirq.Qid']",
                    "util.photolib.contentfiles.Contentfile",
                    "list",
                    "str"
                ]
            }
        },
        "MagicMailPattern.email_encode": {
            "name": "email_encode",
            "location": 200,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "MagicMailPattern.handleMatch": {
            "name": "handleMatch",
            "location": 204,
            "return": [
                "Callable[[T], bool]",
                "Iterable[T]"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "Sequence[float]",
                    "list",
                    "str"
                ]
            }
        },
        "MagiclinkExtension.__init__": {
            "name": "__init__",
            "location": 218,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MagiclinkExtension.extendMarkdown": {
            "name": "extendMarkdown",
            "location": 238,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "dict",
                    "str",
                    "allennlp.common.util.JsonDict"
                ],
                "md_globals": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/mdpopups/st3/mdpopups/mdx/superfences.py": {
        "_escape": {
            "name": "_escape",
            "location": 79,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "txt": [
                    "str",
                    "dict",
                    "bytes"
                ]
            }
        },
        "fence_code_format": {
            "name": "fence_code_format",
            "location": 130,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "source": [
                    "str",
                    "Dict[str, str]",
                    "Optional[str]"
                ],
                "language": [
                    "List[Tuple[str, str]]",
                    "str"
                ],
                "css_class": [
                    "str",
                    "Dict[str, str]",
                    "Optional[str]"
                ]
            }
        },
        "fence_div_format": {
            "name": "fence_div_format",
            "location": 136,
            "return": [
                "typing.Text",
                "str",
                "type"
            ],
            "arguments": {
                "source": [
                    "str",
                    "Dict[str, str]",
                    "Optional[Callable]",
                    "Optional[str]"
                ],
                "language": [
                    "str"
                ],
                "css_class": [
                    "str",
                    "Dict[str, str]",
                    "Optional[Callable]",
                    "Optional[str]"
                ]
            }
        },
        "makeExtension": {
            "name": "makeExtension",
            "location": 596,
            "return": [
                "SuperFencesCodeExtension",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "CodeStash.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodeStash.__len__": {
            "name": "__len__",
            "location": 103,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodeStash.get": {
            "name": "get",
            "location": 108,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Dict[str, Any]"
                ],
                "default": [
                    "None",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "CodeStash.remove": {
            "name": "remove",
            "location": 114,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Optional[str]",
                    "str",
                    "tuple",
                    "Dict[str, str]",
                    "int",
                    "Callable[[KT], VT]",
                    "Type[RuntimeError]"
                ]
            }
        },
        "CodeStash.store": {
            "name": "store",
            "location": 119,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[bytes]",
                    "Union[str, int]",
                    "List[int]"
                ],
                "code": [
                    "str",
                    "Optional[bytes]",
                    "Union[str, int]",
                    "List[int]"
                ],
                "indent_level": [
                    "str",
                    "Optional[bytes]",
                    "Union[str, int]",
                    "List[int]"
                ]
            }
        },
        "CodeStash.clear_stash": {
            "name": "clear_stash",
            "location": 124,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SuperFencesCodeExtension.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SuperFencesCodeExtension.extend_super_fences": {
            "name": "extend_super_fences",
            "location": 174,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "formatter": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "SuperFencesCodeExtension.extendMarkdown": {
            "name": "extendMarkdown",
            "location": 185,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "int",
                    "Callable",
                    "str"
                ],
                "md_globals": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "SuperFencesCodeExtension.patch_fenced_rule": {
            "name": "patch_fenced_rule",
            "location": 228,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SuperFencesCodeExtension.reset": {
            "name": "reset",
            "location": 248,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SuperFencesBlockPreprocessor.__init__": {
            "name": "__init__",
            "location": 267,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "str"
                ]
            }
        },
        "SuperFencesBlockPreprocessor.rebuild_block": {
            "name": "rebuild_block",
            "location": 275,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "SuperFencesBlockPreprocessor.get_hl_settings": {
            "name": "get_hl_settings",
            "location": 280,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SuperFencesBlockPreprocessor.clear": {
            "name": "clear",
            "location": 302,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SuperFencesBlockPreprocessor.eval": {
            "name": "eval",
            "location": 319,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "str",
                    "float",
                    "Container[str]"
                ],
                "start": [
                    "int",
                    "float"
                ],
                "end": [
                    "int",
                    "float"
                ]
            }
        },
        "SuperFencesBlockPreprocessor.eval_quoted": {
            "name": "eval_quoted",
            "location": 337,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "float",
                    "dict",
                    "str",
                    "int"
                ],
                "quote_level": [
                    "float",
                    "int",
                    "tuple",
                    "Union[str, float]"
                ],
                "start": [
                    "int",
                    "float",
                    "str"
                ],
                "end": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "SuperFencesBlockPreprocessor.process_nested_block": {
            "name": "process_nested_block",
            "location": 363,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "int",
                    "str",
                    "List[int]",
                    "Optional[Callable]",
                    "tuple",
                    "float",
                    "bool"
                ],
                "start": [
                    "str",
                    "int"
                ],
                "end": [
                    "str",
                    "int"
                ]
            }
        },
        "SuperFencesBlockPreprocessor.parse_hl_lines": {
            "name": "parse_hl_lines",
            "location": 377,
            "return": [
                "list",
                "List[Dict]",
                "List[str]",
                "List[int]",
                "Union[List[float], List[int]]",
                "str",
                "Tuple[int]",
                "List[List[Any]]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "hl_lines": [
                    "str",
                    "Union[str, List[str]]",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "SuperFencesBlockPreprocessor.parse_line_start": {
            "name": "parse_line_start",
            "location": 382,
            "return": [
                "int",
                "Sequence",
                "str",
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": [],
                "linestart": [
                    "Sequence",
                    "str",
                    "Callable[[T], bool]"
                ]
            }
        },
        "SuperFencesBlockPreprocessor.parse_line_step": {
            "name": "parse_line_step",
            "location": 387,
            "return": [
                "int",
                "str",
                "set"
            ],
            "arguments": {
                "self": [],
                "linestep": [
                    "int",
                    "str",
                    "float",
                    "Iterable[int]"
                ]
            }
        },
        "SuperFencesBlockPreprocessor.parse_line_special": {
            "name": "parse_line_special",
            "location": 394,
            "return": [
                "int",
                "str",
                "set"
            ],
            "arguments": {
                "self": [],
                "linespecial": [
                    "str",
                    "int",
                    "set"
                ]
            }
        },
        "SuperFencesBlockPreprocessor.search_nested": {
            "name": "search_nested",
            "location": 399,
            "return": [
                "str",
                "List[str]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "int",
                    "str"
                ]
            }
        },
        "SuperFencesBlockPreprocessor.highlight": {
            "name": "highlight",
            "location": 460,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "str",
                    "bool"
                ],
                "language": [
                    "str",
                    "bool"
                ]
            }
        },
        "SuperFencesBlockPreprocessor._store": {
            "name": "_store",
            "location": 497,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "int"
                ],
                "code": [
                    "str",
                    "int",
                    "dict"
                ],
                "start": [
                    "int",
                    "List[Tuple[int, int]]",
                    "bool",
                    "List[str]",
                    "float"
                ],
                "end": [
                    "int",
                    "List[Tuple[int, int]]",
                    "bool",
                    "List[str]",
                    "float"
                ],
                "obj": [
                    "str",
                    "int"
                ]
            }
        },
        "SuperFencesBlockPreprocessor.run": {
            "name": "run",
            "location": 515,
            "return": [
                "str",
                "list",
                "Iterable[str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "str",
                    "Dict[str, Dict[str, int]]",
                    "list",
                    "int",
                    "List[str]",
                    "Iterator[str]"
                ]
            }
        },
        "SuperFencesCodeBlockProcessor.test": {
            "name": "test",
            "location": 539,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "markdown.util.etree.Element",
                    "List[str]",
                    "Callable"
                ],
                "block": [
                    "markdown.util.etree.Element",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "SuperFencesCodeBlockProcessor.reindent": {
            "name": "reindent",
            "location": 544,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "pos": [
                    "str"
                ],
                "level": [
                    "str"
                ]
            }
        },
        "SuperFencesCodeBlockProcessor.revert_greedy_fences": {
            "name": "revert_greedy_fences",
            "location": 553,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "str"
                ]
            }
        },
        "SuperFencesCodeBlockProcessor.run": {
            "name": "run",
            "location": 582,
            "return": [
                "bool",
                "str",
                "int",
                "list"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "dict"
                ],
                "blocks": [
                    "bool",
                    "List[str]",
                    "Optional[Sequence]",
                    "Type"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/mdpopups/st3/mdpopups/mdx/util.py": {
        "escape_chars": {
            "name": "escape_chars",
            "location": 97,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "md": [
                    "str",
                    "bool",
                    "int",
                    "bytes"
                ],
                "echrs": [
                    "str",
                    "List[Dict[str, Any]]",
                    "Iterable[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "parse_url": {
            "name": "parse_url",
            "location": 113,
            "return": [
                "tuple[typing.Union[typing.Text,bool]]",
                "str",
                "Tuple[int, int]",
                "Optional[int]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Optional[list]",
                    "bytes"
                ]
            }
        },
        "get_code_points": {
            "name": "get_code_points",
            "location": 81,
            "return": [
                "list[str]",
                "List[str]",
                "int",
                "Iterable[str]",
                "bool",
                "Iterable",
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Type[RuntimeError]"
                ]
            }
        },
        "get_ord": {
            "name": "get_ord",
            "location": 86,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "c": [
                    "str",
                    "Sequence[str]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "get_char": {
            "name": "get_char",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Union[int, float]"
                ]
            }
        },
        "get_code_points.is_full_point": {
            "name": "is_full_point",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "p": [
                    "int",
                    "List[str]",
                    "List[List[int]]"
                ],
                "point": [
                    "int",
                    "float",
                    "List[int]",
                    "Union[List[float], List[int]]",
                    "List[str]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/mdpopups/st3/mdpopups/mdx/__init__.py": {},
    "devhost-master/sublime-packages/mdpopups/tests/spellcheck.py": {
        "console": {
            "name": "console",
            "location": 19,
            "return": [
                "str",
                "int",
                "List[int]"
            ],
            "arguments": {
                "cmd": [
                    "str"
                ],
                "input_file": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "yaml_dump": {
            "name": "yaml_dump",
            "location": 58,
            "return": [
                "int",
                "Dict[str, Any]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "Dict[str, Any]",
                    "str",
                    "dict"
                ],
                "stream": [
                    "bytes",
                    "Dict[str, Any]",
                    "str",
                    "dict"
                ],
                "dumper": [
                    "bytes",
                    "dict",
                    "list"
                ]
            }
        },
        "yaml_load": {
            "name": "yaml_load",
            "location": 74,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "source": [
                    "str"
                ],
                "loader": [
                    "str",
                    "Iterable[Union[str, os.PathLike]]",
                    "Optional[bool]"
                ]
            }
        },
        "patch_doc_config": {
            "name": "patch_doc_config",
            "location": 95,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "int"
            ],
            "arguments": {
                "config_file": [
                    "str",
                    "Optional[str]",
                    "IO",
                    "List[str]"
                ]
            }
        },
        "build_docs": {
            "name": "build_docs",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "compile_dictionary": {
            "name": "compile_dictionary",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "check_spelling": {
            "name": "check_spelling",
            "location": 161,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 202,
            "return": [
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "yaml_load.construct_yaml_str": {
            "name": "construct_yaml_str",
            "location": 81,
            "return": [
                "List[int]",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/cmdline.py": {
        "_parse_options": {
            "name": "_parse_options",
            "location": 101,
            "return": [
                "dict",
                "int",
                "Optional[BaseException]",
                "Tuple[int, int, int, int]"
            ],
            "arguments": {
                "o_strs": [
                    "List[str]",
                    "bool",
                    "Optional[BaseException]",
                    "str"
                ]
            }
        },
        "_parse_filters": {
            "name": "_parse_filters",
            "location": 122,
            "return": [
                "list",
                "list[tuple[dict]]",
                "int",
                "dict",
                "denite.util.UserContext",
                "Type",
                "str"
            ],
            "arguments": {
                "f_strs": [
                    "Callable[[], Any]",
                    "str",
                    "Iterable",
                    "T",
                    "Type[T]"
                ]
            }
        },
        "_print_help": {
            "name": "_print_help",
            "location": 135,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "what": [
                    "str"
                ],
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "_print_list": {
            "name": "_print_list",
            "location": 155,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "what": [
                    "int",
                    "Optional[int]",
                    "list",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "main_inner": {
            "name": "main_inner",
            "location": 206,
            "return": [
                "int",
                "str",
                "Tuple[List[str], List[str]]",
                "type",
                "Dict[str, str]",
                "List[str]",
                "Callable[[str], Any]"
            ],
            "arguments": {
                "popts": [
                    "List[str]",
                    "bool",
                    "Optional[Sequence[str]]",
                    "Optional[List[str]]"
                ],
                "args": [],
                "usage": [
                    "str",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 490,
            "return": [
                "int",
                "List[str]",
                "str",
                "List[int]",
                "list"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/console.py": {
        "reset_color": {
            "name": "reset_color",
            "location": 44,
            "return": [
                "typing.Text",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "colorize": {
            "name": "colorize",
            "location": 48,
            "return": [
                "str",
                "Union[str, Dict]",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "color_key": [
                    "str",
                    "Optional[str]"
                ],
                "text": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ansiformat": {
            "name": "ansiformat",
            "location": 52,
            "return": [
                "str",
                "List[int]",
                "Dict[str, int]",
                "List[dict]"
            ],
            "arguments": {
                "attr": [
                    "str",
                    "dict"
                ],
                "text": [
                    "str",
                    "int",
                    "Sequence[str]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/filter.py": {
        "apply_filters": {
            "name": "apply_filters",
            "location": 13,
            "return": [
                "str",
                "dict",
                "bytes"
            ],
            "arguments": {
                "stream": [
                    "Optional[str]",
                    "List[str]",
                    "Tuple[int, int]",
                    "str"
                ],
                "filters": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool",
                    "List[Dict[str, int]]"
                ],
                "lexer": [
                    "None",
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool",
                    "List[Dict[str, int]]"
                ]
            }
        },
        "simplefilter": {
            "name": "simplefilter",
            "location": 27,
            "return": [
                "str",
                "typing.Type"
            ],
            "arguments": {
                "f": [
                    "T",
                    "dict",
                    "MutableMapping"
                ]
            }
        },
        "apply_filters._apply": {
            "name": "_apply",
            "location": 19,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "filter_": [
                    "str",
                    "Optional[List[Any]]",
                    "list",
                    "Optional[List[str]]"
                ],
                "stream": [
                    "str",
                    "Optional[List[Any]]",
                    "list",
                    "Optional[List[str]]"
                ]
            }
        },
        "Filter.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Filter.filter": {
            "name": "filter",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "lexer": [
                    "str",
                    "bool",
                    "list"
                ],
                "stream": [
                    "str",
                    "bool",
                    "list"
                ]
            }
        },
        "FunctionFilter.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionFilter.filter": {
            "name": "filter",
            "location": 71,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "self": [],
                "lexer": [
                    "str",
                    "TextIO"
                ],
                "stream": [
                    "str",
                    "TextIO"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/formatter.py": {
        "_lookup_style": {
            "name": "_lookup_style",
            "location": 20,
            "return": [
                "string_types",
                "str",
                "int",
                "Optional[str]",
                "Optional[int]",
                "Optional[List[Callable]]"
            ],
            "arguments": {
                "style": [
                    "denite.util.UserContext",
                    "dict"
                ]
            }
        },
        "Formatter.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Formatter.get_style_defs": {
            "name": "get_style_defs",
            "location": 77,
            "return": [
                "typing.Text",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "typing.Text",
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "Formatter.format": {
            "name": "format",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "tokensource": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "tuple"
                ],
                "outfile": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexer.py": {
        "bygroups": {
            "name": "bygroups",
            "location": 306,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "using": {
            "name": "using",
            "location": 340,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "_other": [
                    "bool",
                    "str",
                    "float",
                    "Iterable[dict]",
                    "Optional[bool]",
                    "List[str]"
                ]
            }
        },
        "do_insertions": {
            "name": "do_insertions",
            "location": 757,
            "return": [
                "int",
                "Union[tuple, list]",
                "List[int]",
                "Union[int, slice]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "insertions": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "tokens": [
                    "str",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "LexerMeta.__new__": {
            "name": "__new__",
            "location": 46,
            "return": [
                "Optional[BaseException]",
                "Dict[str, Any]",
                "Optional[Dict[str, str]]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Dict[str, Any]",
                    "str",
                    "dict",
                    "static_frame.core.util.DtypeSpecifier",
                    "static_frame.core.util.NameType"
                ],
                "name": [
                    "bool",
                    "Dict[str, Any]",
                    "str",
                    "dict",
                    "static_frame.core.util.DtypeSpecifier",
                    "static_frame.core.util.NameType"
                ],
                "bases": [
                    "bool",
                    "Dict[str, Any]",
                    "str",
                    "dict",
                    "static_frame.core.util.DtypeSpecifier",
                    "static_frame.core.util.NameType"
                ],
                "d": [
                    "str",
                    "markdown.util.etree.Element",
                    "Callable"
                ]
            }
        },
        "Lexer.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer.__repr__": {
            "name": "__repr__",
            "location": 111,
            "return": [
                "str",
                "Exception",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer.add_filter": {
            "name": "add_filter",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filter_": [
                    "bool",
                    "list",
                    "Tuple[type]",
                    "List[allennlp.data.tokenizers.token.Token]",
                    "Mapping[str, T]"
                ]
            }
        },
        "Lexer.analyse_text": {
            "name": "analyse_text",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "text": [
                    "str",
                    "Iterable[Tuple[int, int]]",
                    "Optional[str]"
                ]
            }
        },
        "Lexer.get_tokens": {
            "name": "get_tokens",
            "location": 140,
            "return": [
                "str",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Optional[str]"
                ],
                "unfiltered": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Lexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "DelegatingLexer.__init__": {
            "name": "__init__",
            "location": 220,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_root_lexer": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Optional[int]",
                    "bool"
                ],
                "_language_lexer": [
                    "bool",
                    "Callable",
                    "Callable[[str], Any]",
                    "str",
                    "float"
                ],
                "_needle": [
                    "bool",
                    "Callable",
                    "Callable[[str], Any]",
                    "str",
                    "float"
                ]
            }
        },
        "DelegatingLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 226,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Sequence[int]"
                ]
            }
        },
        "_inherit.__repr__": {
            "name": "__repr__",
            "location": 260,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "combined.__new__": {
            "name": "__new__",
            "location": 271,
            "return": [
                "bool",
                "Optional[Any]"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "bool",
                    "type",
                    "Type[T]"
                ]
            }
        },
        "combined.__init__": {
            "name": "__init__",
            "location": 274,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_PseudoMatch.__init__": {
            "name": "__init__",
            "location": 284,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "start": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "text": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "_PseudoMatch.start": {
            "name": "start",
            "location": 288,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "int",
                    "Dict[str, str]",
                    "Callable",
                    "bool",
                    "str",
                    "Optional"
                ]
            }
        },
        "_PseudoMatch.end": {
            "name": "end",
            "location": 291,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_PseudoMatch.group": {
            "name": "group",
            "location": 294,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_PseudoMatch.groups": {
            "name": "groups",
            "location": 299,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_PseudoMatch.groupdict": {
            "name": "groupdict",
            "location": 302,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "bygroups.callback": {
            "name": "callback",
            "location": 310,
            "return": [],
            "arguments": {
                "lexer": [],
                "match": [],
                "ctx": []
            }
        },
        "default.__init__": {
            "name": "__init__",
            "location": 398,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ]
            }
        },
        "words.__init__": {
            "name": "__init__",
            "location": 409,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "words": [
                    "int",
                    "bool",
                    "float"
                ],
                "prefix": [
                    "int",
                    "bool",
                    "float"
                ],
                "suffix": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "words.get": {
            "name": "get",
            "location": 414,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegexLexerMeta._process_regex": {
            "name": "_process_regex",
            "location": 424,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool"
                ],
                "regex": [
                    "dict",
                    "Dict[str, str]",
                    "Optional[Dict]"
                ],
                "rflags": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "state": [
                    "str",
                    "bool"
                ]
            }
        },
        "RegexLexerMeta._process_token": {
            "name": "_process_token",
            "location": 430,
            "return": [
                "dict",
                "bool",
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "int",
                    "List[str]",
                    "Set[str]"
                ],
                "token": [
                    "bytes",
                    "str",
                    "Type"
                ]
            }
        },
        "RegexLexerMeta._process_new_state": {
            "name": "_process_new_state",
            "location": 436,
            "return": [
                "bool",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ],
                "new_state": [
                    "int"
                ],
                "unprocessed": [],
                "processed": [
                    "dict",
                    "Dict[str, Any]",
                    "\"prefecengine.state.State\"",
                    "Dict[str, str]"
                ]
            }
        },
        "RegexLexerMeta._process_state": {
            "name": "_process_state",
            "location": 471,
            "return": [],
            "arguments": {
                "cls": [
                    "int",
                    "dict",
                    "str",
                    "Optional[int]",
                    "List[allennlp.data.tokenizers.token.Token]",
                    "raiden.network.proxies.token.Token"
                ],
                "unprocessed": [
                    "int",
                    "str",
                    "List[int]",
                    "float"
                ],
                "processed": [
                    "str",
                    "dict",
                    "List[allennlp.data.tokenizers.token.Token]"
                ],
                "state": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "RegexLexerMeta.process_tokendef": {
            "name": "process_tokendef",
            "location": 515,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "type"
                ],
                "name": [
                    "str"
                ],
                "tokendefs": [
                    "str",
                    "Mapping[str, Any]",
                    "Set[str]",
                    "[str]"
                ]
            }
        },
        "RegexLexerMeta.get_tokendefs": {
            "name": "get_tokendefs",
            "location": 523,
            "return": [
                "str",
                "bool",
                "Union[int, float]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[int]",
                    "Type['DataclassT']",
                    "str",
                    "List[str]"
                ]
            }
        },
        "RegexLexerMeta.__call__": {
            "name": "__call__",
            "location": 572,
            "return": [],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "T",
                    "MutableMapping",
                    "Type['Model']"
                ]
            }
        },
        "RegexLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 617,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "bool"
                ],
                "stack": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "LexerContext.__init__": {
            "name": "__init__",
            "location": 677,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "List[int]"
                ],
                "pos": [
                    "bool",
                    "str",
                    "Sequence[Dict[str, str]]",
                    "float",
                    "int"
                ],
                "stack": [
                    "bool",
                    "str",
                    "Sequence[Dict[str, str]]",
                    "float",
                    "int"
                ],
                "end": [
                    "Set[str]",
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "LexerContext.__repr__": {
            "name": "__repr__",
            "location": 683,
            "return": [
                "Dict[str, Any]",
                "List[Dict[str, Any]]",
                "Callable[..., None]",
                "Tuple[type]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtendedRegexLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 693,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "context": [
                    "str",
                    "Dict[str, str]",
                    "Union[int, str]",
                    "dict"
                ]
            }
        },
        "ProfilingRegexLexerMeta._process_regex": {
            "name": "_process_regex",
            "location": 823,
            "return": [
                "List[Dict[str, Any]]",
                "int",
                "str",
                "bytes",
                "float"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool"
                ],
                "regex": [
                    "str",
                    "bool"
                ],
                "rflags": [
                    "str",
                    "bool"
                ],
                "state": [
                    "str",
                    "bool"
                ]
            }
        },
        "ProfilingRegexLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 849,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Optional[str]"
                ],
                "stack": [
                    "str"
                ]
            }
        },
        "Lexer.get_tokens.streamer": {
            "name": "streamer",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "using.callback": {
            "name": "callback",
            "location": 377,
            "return": [
                ""
            ],
            "arguments": {
                "lexer": [
                    "bool",
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ],
                "match": [],
                "ctx": [
                    "str",
                    "Callable"
                ]
            }
        },
        "ProfilingRegexLexerMeta._process_regex.match_func": {
            "name": "match_func",
            "location": 831,
            "return": [
                "str",
                "dict",
                "int",
                "type"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "pos": [
                    "str"
                ],
                "endpos": [
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/modeline.py": {
        "get_filetype_from_line": {
            "name": "get_filetype_from_line",
            "location": 21,
            "return": [
                "int",
                "str",
                "Callable"
            ],
            "arguments": {
                "l": [
                    "str",
                    "Optional[Callable[[Any, Any], None]]"
                ]
            }
        },
        "get_filetype_from_buffer": {
            "name": "get_filetype_from_buffer",
            "location": 26,
            "return": [
                "None",
                "bool",
                "Optional[int]",
                "Optional[str]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "Optional[Dict[str, int]]"
            ],
            "arguments": {
                "buf": [
                    "str",
                    "int",
                    "bytes",
                    "bool",
                    "Optional[Any]"
                ],
                "max_lines": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/plugin.py": {
        "find_plugin_lexers": {
            "name": "find_plugin_lexers",
            "location": 49,
            "return": [
                "None",
                "int",
                "typing.Generator",
                "Union[tuple, list]",
                "Set[str]",
                "Set[VT]"
            ],
            "arguments": {}
        },
        "find_plugin_formatters": {
            "name": "find_plugin_formatters",
            "location": 56,
            "return": [
                "None",
                "int",
                "typing.Generator[tuple]",
                "Union[tuple, list]",
                "Set[str]",
                "Set[VT]"
            ],
            "arguments": {}
        },
        "find_plugin_styles": {
            "name": "find_plugin_styles",
            "location": 63,
            "return": [
                "None",
                "int",
                "typing.Generator[tuple]",
                "Union[tuple, list]",
                "Set[str]",
                "Set[VT]"
            ],
            "arguments": {}
        },
        "find_plugin_filters": {
            "name": "find_plugin_filters",
            "location": 70,
            "return": [
                "None",
                "typing.Generator[tuple]",
                "Set[str]",
                "Optional[bool]",
                "Set[VT]",
                "\"DGEList\"",
                "tuple",
                "DefaultDict"
            ],
            "arguments": {}
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/regexopt.py": {
        "make_charset": {
            "name": "make_charset",
            "location": 23,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]",
                "str",
                "Optional[int]",
                "set"
            ],
            "arguments": {
                "letters": [
                    "str",
                    "list",
                    "set",
                    "Pattern[str]",
                    "Pattern[bytes]"
                ]
            }
        },
        "regex_opt_inner": {
            "name": "regex_opt_inner",
            "location": 27,
            "return": [
                "typing.Text",
                "List[str]",
                "float",
                "str",
                "int"
            ],
            "arguments": {
                "strings": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "open_paren": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "regex_opt": {
            "name": "regex_opt",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "strings": [
                    "str",
                    "Dict[str, Any]"
                ],
                "prefix": [
                    "str",
                    "typing.Text"
                ],
                "suffix": [
                    "str",
                    "typing.Text"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/scanner.py": {
        "Scanner.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int",
                    "Tuple[int, int, int, int]"
                ],
                "flags": [
                    "int",
                    "str",
                    "Dict[str, 'LabwareDefinition']",
                    "Tuple[float, float]"
                ]
            }
        },
        "Scanner.eos": {
            "name": "eos",
            "location": 50,
            "return": [
                "bool",
                "str",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.check": {
            "name": "check",
            "location": 55,
            "return": [
                "List[Dict[str, Any]]",
                "int",
                "Dict[str, List[str]]",
                "str",
                "bool",
                "OrderedDict"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "Callable",
                    "dict"
                ]
            }
        },
        "Scanner.test": {
            "name": "test",
            "location": 67,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "str",
                    "int",
                    "Sequence[int]",
                    "bool"
                ]
            }
        },
        "Scanner.scan": {
            "name": "scan",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "dict",
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "Scanner.get_char": {
            "name": "get_char",
            "location": 95,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.__repr__": {
            "name": "__repr__",
            "location": 99,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/sphinxext.py": {
        "setup": {
            "name": "setup",
            "location": 154,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "sphinx.application.Sphinx",
                    "Tuple[Callable, Callable]"
                ]
            }
        },
        "PygmentsDoc.run": {
            "name": "run",
            "location": 71,
            "return": [
                "mypy.nodes.ClassDef",
                "Awaitable",
                "T"
            ],
            "arguments": {
                "self": []
            }
        },
        "PygmentsDoc.document_lexers": {
            "name": "document_lexers",
            "location": 88,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PygmentsDoc.document_formatters": {
            "name": "document_formatters",
            "location": 123,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PygmentsDoc.document_filters": {
            "name": "document_filters",
            "location": 141,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "Union[str, bytes]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/style.py": {
        "StyleMeta.__new__": {
            "name": "__new__",
            "location": 18,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "mcs": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "IO[str]",
                    "Tuple[type]"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "IO[str]",
                    "Tuple[type]"
                ],
                "bases": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "IO[str]",
                    "Tuple[type]"
                ],
                "dct": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "IO[str]",
                    "Tuple[type]"
                ]
            }
        },
        "StyleMeta.style_for_token": {
            "name": "style_for_token",
            "location": 80,
            "return": [
                "dict[typing.Text, typing.Union[None,bool]]",
                "bool",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "type",
                    "Exception"
                ],
                "token": [
                    "type",
                    "Exception"
                ]
            }
        },
        "StyleMeta.list_styles": {
            "name": "list_styles",
            "location": 94,
            "return": [
                "list",
                "List[str]",
                "Union[List, Tuple]",
                "str",
                "Optional[List[str]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "list",
                    "Type['GenericList']",
                    "float",
                    "int"
                ]
            }
        },
        "StyleMeta.styles_token": {
            "name": "styles_token",
            "location": 97,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "bool",
                    "int"
                ],
                "ttype": [
                    "Type",
                    "bool",
                    "int"
                ]
            }
        },
        "StyleMeta.__iter__": {
            "name": "__iter__",
            "location": 100,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type",
                    "bytes",
                    "complex"
                ]
            }
        },
        "StyleMeta.__len__": {
            "name": "__len__",
            "location": 104,
            "return": [
                "int",
                "str",
                "Pattern",
                "OrderedDict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[int]",
                    "bool",
                    "Type",
                    "complex",
                    "bytes"
                ]
            }
        },
        "StyleMeta.__new__.colorformat": {
            "name": "colorformat",
            "location": 24,
            "return": [
                "typing.Text",
                "int",
                "List[int]",
                "bool",
                "List[dict]",
                "float"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[bool]",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/token.py": {
        "is_token_subtype": {
            "name": "is_token_subtype",
            "location": 77,
            "return": [
                "bool"
            ],
            "arguments": {
                "ttype": [
                    "int",
                    "dict",
                    "str",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ],
                "other": [
                    "int",
                    "dict",
                    "str",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "string_to_tokentype": {
            "name": "string_to_tokentype",
            "location": 86,
            "return": [
                "str",
                "_TokenType"
            ],
            "arguments": {
                "s": [
                    "str",
                    "dict"
                ]
            }
        },
        "_TokenType.split": {
            "name": "split",
            "location": 15,
            "return": [
                "list[_TokenType]",
                "Callable[[T], bool]",
                "str",
                "List[Tuple]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TokenType.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TokenType.__contains__": {
            "name": "__contains__",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "Union[str, bytes]",
                    "str"
                ]
            }
        },
        "_TokenType.__getattr__": {
            "name": "__getattr__",
            "location": 34,
            "return": [
                "_TokenType",
                "str",
                "Tuple[str, float]",
                "Iterable[int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "bool"
                ]
            }
        },
        "_TokenType.__repr__": {
            "name": "__repr__",
            "location": 43,
            "return": [
                "typing.Text",
                "bool",
                "dict",
                "Iterable[str]",
                "List[List[str]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/unistring.py": {
        "combine": {
            "name": "combine",
            "location": 124,
            "return": [
                "str",
                "int",
                "tuple",
                "List[str]",
                "list",
                "Union[List[str], str]",
                "float"
            ],
            "arguments": {}
        },
        "allexcept": {
            "name": "allexcept",
            "location": 128,
            "return": [
                "str",
                "int",
                "tuple",
                "List[str]",
                "list",
                "Union[List[str], str]",
                "float"
            ],
            "arguments": {}
        },
        "_handle_runs": {
            "name": "_handle_runs",
            "location": 135,
            "return": [
                "",
                "typing.Generator",
                "typing.Generator[typing.Text]"
            ],
            "arguments": {
                "char_list": [
                    "str",
                    "bool",
                    "int",
                    "dict"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/util.py": {
        "get_choice_opt": {
            "name": "get_choice_opt",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "options": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ],
                "optname": [
                    "str",
                    "Optional[bool]",
                    "Optional[str]",
                    "Mapping[str, Any]"
                ],
                "allowed": [
                    "int",
                    "Optional[int]",
                    "Optional[Any]"
                ],
                "default": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ],
                "normcase": [
                    "bool",
                    "int",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "get_bool_opt": {
            "name": "get_bool_opt",
            "location": 49,
            "return": [
                "str",
                "bool",
                "Union[str, Iterable[str]]"
            ],
            "arguments": {
                "options": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "Tuple['cirq.Qid']"
                ],
                "optname": [
                    "str",
                    "float"
                ],
                "default": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "Tuple['cirq.Qid']"
                ]
            }
        },
        "get_int_opt": {
            "name": "get_int_opt",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "options": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "dict"
                ],
                "optname": [
                    "str",
                    "bool"
                ],
                "default": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "get_list_opt": {
            "name": "get_list_opt",
            "location": 83,
            "return": [
                "str",
                "Union[str, list]",
                "list"
            ],
            "arguments": {
                "options": [
                    "bool",
                    "str",
                    "int",
                    "Dict[str, bool]"
                ],
                "optname": [
                    "str",
                    "float"
                ],
                "default": [
                    "bool",
                    "str",
                    "int",
                    "Dict[str, bool]"
                ]
            }
        },
        "docstring_headline": {
            "name": "docstring_headline",
            "location": 95,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "make_analysator": {
            "name": "make_analysator",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "f": [
                    "int"
                ]
            }
        },
        "shebang_matches": {
            "name": "shebang_matches",
            "location": 124,
            "return": [
                "bool"
            ],
            "arguments": {
                "text": [
                    "str",
                    "List[Union[str, Any]]"
                ],
                "regex": [
                    "str"
                ]
            }
        },
        "doctype_matches": {
            "name": "doctype_matches",
            "location": 169,
            "return": [
                "bool"
            ],
            "arguments": {
                "text": [
                    "str",
                    "bytes",
                    "Pattern"
                ],
                "regex": [
                    "str",
                    "Pattern"
                ]
            }
        },
        "html_doctype_matches": {
            "name": "html_doctype_matches",
            "location": 182,
            "return": [
                "Callable"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Tuple[int, int]"
                ]
            }
        },
        "looks_like_xml": {
            "name": "looks_like_xml",
            "location": 190,
            "return": [
                "bool"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "_surrogatepair": {
            "name": "_surrogatepair",
            "location": 208,
            "return": [
                "Optional[int]",
                "str",
                "Optional[List[int]]",
                "float",
                "int"
            ],
            "arguments": {
                "c": [
                    "int",
                    "str",
                    "Counter",
                    "Iterable[Tuple[int, int]]"
                ]
            }
        },
        "unirange": {
            "name": "unirange",
            "location": 217,
            "return": [
                "str"
            ],
            "arguments": {
                "a": [
                    "int",
                    "List[int]"
                ],
                "b": [
                    "int",
                    "List[int]",
                    "Sequence[T]"
                ]
            }
        },
        "format_lines": {
            "name": "format_lines",
            "location": 256,
            "return": [
                "str"
            ],
            "arguments": {
                "var_name": [
                    "str"
                ],
                "seq": [
                    "str",
                    "List[str]",
                    "Iterable[str]",
                    "bytes"
                ],
                "raw": [
                    "str",
                    "List[str]",
                    "Iterable[str]",
                    "bytes"
                ],
                "indent_level": [
                    "str",
                    "bool",
                    "int",
                    "List[dict]"
                ]
            }
        },
        "duplicates_removed": {
            "name": "duplicates_removed",
            "location": 275,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "it": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "already_seen": [
                    "str",
                    "bool",
                    "Container[T]"
                ]
            }
        },
        "guess_decode": {
            "name": "guess_decode",
            "location": 301,
            "return": [
                "bool"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "guess_decode_from_terminal": {
            "name": "guess_decode_from_terminal",
            "location": 322,
            "return": [
                "str",
                "Dict[str, int]",
                "Tuple[float, float, float]",
                "int"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "term": [
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "terminal_encoding": {
            "name": "terminal_encoding",
            "location": 339,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "term": [
                    "int",
                    "float",
                    "Iterable[Optional[Any]]",
                    "Optional[int]"
                ]
            }
        },
        "add_metaclass": {
            "name": "add_metaclass",
            "location": 378,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "metaclass": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "make_analysator.text_analyse": {
            "name": "text_analyse",
            "location": 109,
            "return": [
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "Future.get": {
            "name": "get",
            "location": 297,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "add_metaclass.wrapper": {
            "name": "wrapper",
            "location": 380,
            "return": [
                "str",
                "authorityspoke.io.schemas.RawFactor",
                "Type",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "T",
                    "Type[T]",
                    "Type",
                    "Exception",
                    "type"
                ]
            }
        },
        "UnclosingTextIOWrapper.close": {
            "name": "close",
            "location": 374,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/__init__.py": {
        "lex": {
            "name": "lex",
            "location": 40,
            "return": [
                "str",
                "dict",
                "float",
                "List[str]",
                "allennlp.common.util.JsonDict"
            ],
            "arguments": {
                "code": [
                    "str",
                    "Optional[str]"
                ],
                "lexer": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "format": {
            "name": "format",
            "location": 55,
            "return": [
                "str",
                "int",
                "List[List[str]]",
                "tuple"
            ],
            "arguments": {
                "tokens": [
                    "str",
                    "int",
                    "List[int]",
                    "dict"
                ],
                "formatter": [
                    "bytes",
                    "Union[None, bytes]",
                    "AnyStr",
                    "dict"
                ],
                "outfile": [
                    "None",
                    "str",
                    "List[int]"
                ]
            }
        },
        "highlight": {
            "name": "highlight",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "code": [
                    "str"
                ],
                "lexer": [
                    "str"
                ],
                "formatter": [
                    "str"
                ],
                "outfile": [
                    "str",
                    "None"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/filters/__init__.py": {
        "find_filter_class": {
            "name": "find_filter_class",
            "location": 23,
            "return": [],
            "arguments": {
                "filtername": []
            }
        },
        "get_filter_by_name": {
            "name": "get_filter_by_name",
            "location": 33,
            "return": [],
            "arguments": {
                "filtername": []
            }
        },
        "get_all_filters": {
            "name": "get_all_filters",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "_replace_special": {
            "name": "_replace_special",
            "location": 54,
            "return": [],
            "arguments": {
                "ttype": [],
                "value": [],
                "regex": [],
                "specialttype": [],
                "replacefunc": []
            }
        },
        "CodeTagFilter.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CodeTagFilter.filter": {
            "name": "filter",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "lexer": [],
                "stream": []
            }
        },
        "KeywordCaseFilter.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeywordCaseFilter.filter": {
            "name": "filter",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "lexer": [],
                "stream": []
            }
        },
        "NameHighlightFilter.__init__": {
            "name": "__init__",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NameHighlightFilter.filter": {
            "name": "filter",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "lexer": [],
                "stream": []
            }
        },
        "RaiseOnErrorTokenFilter.__init__": {
            "name": "__init__",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RaiseOnErrorTokenFilter.filter": {
            "name": "filter",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "lexer": [],
                "stream": []
            }
        },
        "VisibleWhitespaceFilter.__init__": {
            "name": "__init__",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VisibleWhitespaceFilter.filter": {
            "name": "filter",
            "location": 247,
            "return": [],
            "arguments": {
                "self": [],
                "lexer": [],
                "stream": []
            }
        },
        "GobbleFilter.__init__": {
            "name": "__init__",
            "location": 293,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GobbleFilter.gobble": {
            "name": "gobble",
            "location": 297,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "left": []
            }
        },
        "GobbleFilter.filter": {
            "name": "filter",
            "location": 303,
            "return": [],
            "arguments": {
                "self": [],
                "lexer": [],
                "stream": []
            }
        },
        "TokenMergeFilter.__init__": {
            "name": "__init__",
            "location": 324,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TokenMergeFilter.filter": {
            "name": "filter",
            "location": 327,
            "return": [],
            "arguments": {
                "self": [],
                "lexer": [],
                "stream": []
            }
        },
        "VisibleWhitespaceFilter.filter.replacefunc": {
            "name": "replacefunc",
            "location": 253,
            "return": [],
            "arguments": {
                "wschar": []
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/formatters/bbcode.py": {
        "BBCodeFormatter.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BBCodeFormatter._make_styles": {
            "name": "_make_styles",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BBCodeFormatter.format_unencoded": {
            "name": "format_unencoded",
            "location": 79,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tokensource": [
                    "bool",
                    "List[Tuple[int, str]]",
                    "float",
                    "int",
                    "str"
                ],
                "outfile": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/formatters/html.py": {
        "escape_html": {
            "name": "escape_html",
            "location": 40,
            "return": [
                "Type",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "bool",
                    "Callable[..., T]",
                    "list"
                ],
                "table": [
                    "dict[int, typing.Text]",
                    "bool",
                    "Callable[..., T]",
                    "list"
                ]
            }
        },
        "_get_ttype_class": {
            "name": "_get_ttype_class",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "ttype": [
                    "str"
                ]
            }
        },
        "HtmlFormatter.__init__": {
            "name": "__init__",
            "location": 378,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HtmlFormatter._get_css_class": {
            "name": "_get_css_class",
            "location": 423,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "ttype": [
                    "str",
                    "bool",
                    "int",
                    "bytes"
                ]
            }
        },
        "HtmlFormatter._get_css_classes": {
            "name": "_get_css_classes",
            "location": 431,
            "return": [
                "str",
                "int",
                "Type[T]"
            ],
            "arguments": {
                "self": [],
                "ttype": [
                    "str",
                    "list",
                    "int"
                ]
            }
        },
        "HtmlFormatter._create_stylesheet": {
            "name": "_create_stylesheet",
            "location": 440,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HtmlFormatter.get_style_defs": {
            "name": "get_style_defs",
            "location": 464,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "None",
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "HtmlFormatter._decodeifneeded": {
            "name": "_decodeifneeded",
            "location": 503,
            "return": [
                "str",
                "bytes",
                "bool",
                "Tuple[str, str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bytes",
                    "str",
                    "Union[bytes, str]",
                    "Union[str, bytes]",
                    "Union[None, str, bytes]"
                ]
            }
        },
        "HtmlFormatter._wrap_full": {
            "name": "_wrap_full",
            "location": 510,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[int,typing.Text]]]",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "self": [],
                "inner": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "outfile": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "HtmlFormatter._wrap_tablelinenos": {
            "name": "_wrap_tablelinenos",
            "location": 553,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[int,typing.Text]]]",
                "typing.Generator[tuple[int]]"
            ],
            "arguments": {
                "self": [],
                "inner": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "HtmlFormatter._wrap_inlinelinenos": {
            "name": "_wrap_inlinelinenos",
            "location": 615,
            "return": [
                "",
                "typing.Generator[tuple[int]]"
            ],
            "arguments": {
                "self": [],
                "inner": [
                    "str",
                    "int",
                    "Iterable[str]",
                    "Sequence[T]",
                    "Sequence[str]"
                ]
            }
        },
        "HtmlFormatter._wrap_lineanchors": {
            "name": "_wrap_lineanchors",
            "location": 651,
            "return": [
                "",
                "typing.Generator[tuple[int]]"
            ],
            "arguments": {
                "self": [],
                "inner": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "HtmlFormatter._wrap_linespans": {
            "name": "_wrap_linespans",
            "location": 662,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[int,typing.Text]]]",
                "typing.Generator[tuple[int]]"
            ],
            "arguments": {
                "self": [],
                "inner": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "HtmlFormatter._wrap_div": {
            "name": "_wrap_div",
            "location": 672,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[int,typing.Text]]]",
                "typing.Generator"
            ],
            "arguments": {
                "self": [],
                "inner": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "HtmlFormatter._wrap_pre": {
            "name": "_wrap_pre",
            "location": 687,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[int,typing.Text]]]",
                "typing.Generator"
            ],
            "arguments": {
                "self": [],
                "inner": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "HtmlFormatter._format_lines": {
            "name": "_format_lines",
            "location": 700,
            "return": [
                "",
                "typing.Generator[tuple[int]]"
            ],
            "arguments": {
                "self": [],
                "tokensource": [
                    "int",
                    "bool",
                    "str",
                    "Callable[[], T]",
                    "Set[str]"
                ]
            }
        },
        "HtmlFormatter._lookup_ctag": {
            "name": "_lookup_ctag",
            "location": 770,
            "return": [
                "tuple",
                "str",
                "tuple[None]",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "List[str]",
                    "str",
                    "Sequence[Sequence[str]]",
                    "Sequence[str]",
                    "oj.tokens.Token",
                    "List[List[str]]",
                    "bytes"
                ]
            }
        },
        "HtmlFormatter._highlight_lines": {
            "name": "_highlight_lines",
            "location": 777,
            "return": [
                "",
                "typing.Generator[tuple]",
                "typing.Generator[tuple[typing.Union[int,typing.Text]]]",
                "typing.Generator[tuple[int]]"
            ],
            "arguments": {
                "self": [],
                "tokensource": [
                    "str",
                    "int",
                    "set"
                ]
            }
        },
        "HtmlFormatter.wrap": {
            "name": "wrap",
            "location": 799,
            "return": [
                "pyparsing.Token",
                "str"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ],
                "outfile": [
                    "str",
                    "Iterable[Union[str, os.PathLike]]",
                    "Union[str, bytes]",
                    "Union[str, bytes, IO[bytes]]",
                    "Optional[Tuple[Any, Any]]"
                ]
            }
        },
        "HtmlFormatter.format_unencoded": {
            "name": "format_unencoded",
            "location": 807,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tokensource": [
                    "str",
                    "Union[BinaryIO, str]",
                    "Callable"
                ],
                "outfile": [
                    "str",
                    "Optional[bool]",
                    "List[str]"
                ]
            }
        },
        "HtmlFormatter.get_style_defs.prefix": {
            "name": "prefix",
            "location": 477,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable",
                    "Union[int, str]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/formatters/img.py": {
        "FontManager.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "font_name": [
                    "str",
                    "int",
                    "bool",
                    "dict"
                ],
                "font_size": [
                    "int",
                    "bool",
                    "Tuple[int, int, int]",
                    "str",
                    "Optional[float]"
                ]
            }
        },
        "FontManager._get_nix_font_path": {
            "name": "_get_nix_font_path",
            "location": 77,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "bytes"
                ],
                "style": [
                    "str",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "FontManager._create_nix": {
            "name": "_create_nix",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FontManager._lookup_win": {
            "name": "_lookup_win",
            "location": 111,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "tuple"
                ],
                "basename": [
                    "bool",
                    "Deque[str]",
                    "str",
                    "Dict[str, str]",
                    "Counter[str]"
                ],
                "styles": [
                    "str",
                    "int",
                    "Callable[[str], Any]",
                    "bytes",
                    "bool"
                ],
                "fail": [
                    "str",
                    "static_frame.core.util.GetItemKeyType",
                    "tuple",
                    "int",
                    "bool",
                    "Iterable[T]",
                    "Union[float, int]"
                ]
            }
        },
        "FontManager._create_win": {
            "name": "_create_win",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FontManager.get_char_size": {
            "name": "get_char_size",
            "location": 153,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FontManager.get_font": {
            "name": "get_font",
            "location": 159,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "bold": [
                    "str",
                    "bool"
                ],
                "oblique": [
                    "str",
                    "bool"
                ]
            }
        },
        "ImageFormatter.__init__": {
            "name": "__init__",
            "location": 290,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageFormatter.get_style_defs": {
            "name": "get_style_defs",
            "location": 346,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "ImageFormatter._get_line_height": {
            "name": "_get_line_height",
            "location": 350,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageFormatter._get_line_y": {
            "name": "_get_line_y",
            "location": 356,
            "return": [
                "str",
                "Optional[str]",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "lineno": [
                    "str",
                    "bool"
                ]
            }
        },
        "ImageFormatter._get_char_width": {
            "name": "_get_char_width",
            "location": 362,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageFormatter._get_char_x": {
            "name": "_get_char_x",
            "location": 368,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "charno": [
                    "str",
                    "Set[str]"
                ]
            }
        },
        "ImageFormatter._get_text_pos": {
            "name": "_get_text_pos",
            "location": 374,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "charno": [
                    "bool",
                    "List[str]"
                ],
                "lineno": [
                    "bool",
                    "List[str]"
                ]
            }
        },
        "ImageFormatter._get_linenumber_pos": {
            "name": "_get_linenumber_pos",
            "location": 380,
            "return": [
                "bool",
                "List[Dict[str, Any]]",
                "Iterable[Union[Any, int]]",
                "Callable",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "lineno": [
                    "Dict[str, Set[str]]",
                    "str",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "ImageFormatter._get_text_color": {
            "name": "_get_text_color",
            "location": 386,
            "return": [
                "Optional[str]",
                "str",
                "List[List[int]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "style": [
                    "Optional[str]",
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ]
            }
        },
        "ImageFormatter._get_style_font": {
            "name": "_get_style_font",
            "location": 396,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "style": [
                    "str",
                    "float"
                ]
            }
        },
        "ImageFormatter._get_image_size": {
            "name": "_get_image_size",
            "location": 402,
            "return": [
                "str",
                "Optional[List[str]]",
                "Optional[Dict[str, str]]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "maxcharno": [
                    "bool"
                ],
                "maxlineno": [
                    "bool"
                ]
            }
        },
        "ImageFormatter._draw_linenumber": {
            "name": "_draw_linenumber",
            "location": 409,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "posno": [
                    "bool",
                    "bytes",
                    "AbstractSet[str]",
                    "int"
                ],
                "lineno": [
                    "bool",
                    "bytes",
                    "AbstractSet[str]",
                    "int"
                ]
            }
        },
        "ImageFormatter._draw_text": {
            "name": "_draw_text",
            "location": 421,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "str",
                    "list",
                    "AnyStr"
                ],
                "text": [
                    "str",
                    "list",
                    "AnyStr"
                ],
                "font": [
                    "str",
                    "list",
                    "AnyStr"
                ]
            }
        },
        "ImageFormatter._create_drawables": {
            "name": "_create_drawables",
            "location": 427,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tokensource": [
                    "str",
                    "Iterator[str]",
                    "bool",
                    "float"
                ]
            }
        },
        "ImageFormatter._draw_line_numbers": {
            "name": "_draw_line_numbers",
            "location": 460,
            "return": [
                "int",
                "Union[tuple, list]",
                "Set[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageFormatter._paint_line_number_bg": {
            "name": "_paint_line_number_bg",
            "location": 471,
            "return": [
                "set"
            ],
            "arguments": {
                "self": [],
                "im": [
                    "str",
                    "int",
                    "PIL.Image.Image",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "ImageFormatter.format": {
            "name": "format",
            "location": 487,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tokensource": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "tuple"
                ],
                "outfile": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/formatters/latex.py": {
        "escape_tex": {
            "name": "escape_tex",
            "location": 24,
            "return": [
                "int",
                "bool",
                "bytes",
                "float"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int"
                ],
                "commandprefix": [
                    "str",
                    "int"
                ]
            }
        },
        "_get_ttype_name": {
            "name": "_get_ttype_name",
            "location": 137,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "ttype": [
                    "str",
                    "denite.util.Candidates",
                    "denite.util.UserContext",
                    "Optional[str]"
                ]
            }
        },
        "LatexFormatter.__init__": {
            "name": "__init__",
            "location": 251,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LatexFormatter._create_stylesheet": {
            "name": "_create_stylesheet",
            "location": 273,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LatexFormatter.get_style_defs": {
            "name": "get_style_defs",
            "location": 318,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "typing.Text",
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "LatexFormatter.format_unencoded": {
            "name": "format_unencoded",
            "location": 331,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tokensource": [
                    "bool",
                    "List[Tuple[int, str]]",
                    "float",
                    "int",
                    "str"
                ],
                "outfile": [
                    "bool",
                    "str"
                ]
            }
        },
        "LatexEmbeddedLexer.__init__": {
            "name": "__init__",
            "location": 436,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "left": [
                    "int",
                    "bool",
                    "str",
                    "float",
                    "Optional[str]"
                ],
                "right": [
                    "int",
                    "bool",
                    "str",
                    "float",
                    "Optional[str]"
                ],
                "lang": [
                    "int",
                    "bool",
                    "str",
                    "float",
                    "Optional[str]"
                ]
            }
        },
        "LatexEmbeddedLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 442,
            "return": [
                "",
                "typing.Generator",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Sequence[int]"
                ]
            }
        },
        "LatexEmbeddedLexer.get_tokens_aux": {
            "name": "get_tokens_aux",
            "location": 460,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "text": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "LatexFormatter._create_stylesheet.rgbcolor": {
            "name": "rgbcolor",
            "location": 278,
            "return": [
                "str",
                "Tuple[str, int]",
                "typing.Text"
            ],
            "arguments": {
                "col": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/formatters/other.py": {
        "NullFormatter.format": {
            "name": "format",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tokensource": [
                    "bool",
                    "List[Tuple[int, str]]",
                    "float",
                    "int",
                    "str"
                ],
                "outfile": [
                    "Optional[str]",
                    "IO[str]",
                    "int",
                    "str"
                ]
            }
        },
        "RawTokenFormatter.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RawTokenFormatter.format": {
            "name": "format",
            "location": 81,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tokensource": [
                    "bool",
                    "List[Tuple[int, str]]",
                    "float",
                    "int",
                    "str"
                ],
                "outfile": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "tuple"
                ]
            }
        },
        "TestcaseFormatter.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestcaseFormatter.format": {
            "name": "format",
            "location": 143,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tokensource": [
                    "bool",
                    "List[Tuple[int, str]]",
                    "float",
                    "int",
                    "str"
                ],
                "outfile": [
                    "bytes",
                    "IO[str]",
                    "AnyStr",
                    "str",
                    "Union[bytes, str]"
                ]
            }
        },
        "RawTokenFormatter.format.write": {
            "name": "write",
            "location": 102,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "text": [
                    "str",
                    "bool"
                ]
            }
        },
        "RawTokenFormatter.format.flush": {
            "name": "flush",
            "location": 98,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/formatters/rtf.py": {
        "RtfFormatter.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RtfFormatter._escape": {
            "name": "_escape",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "RtfFormatter._escape_text": {
            "name": "_escape_text",
            "location": 72,
            "return": [
                "typing.Text",
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "RtfFormatter.format_unencoded": {
            "name": "format_unencoded",
            "location": 96,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tokensource": [
                    "bool",
                    "List[Tuple[int, str]]",
                    "float",
                    "int",
                    "str"
                ],
                "outfile": [
                    "str",
                    "int",
                    "List[\"DictDataLoader\"]",
                    "Optional[str]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/formatters/svg.py": {
        "escape_html": {
            "name": "escape_html",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "SvgFormatter.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SvgFormatter.format_unencoded": {
            "name": "format_unencoded",
            "location": 97,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tokensource": [
                    "bool",
                    "List[Tuple[int, str]]",
                    "float",
                    "int",
                    "str"
                ],
                "outfile": [
                    "str",
                    "IO",
                    "int",
                    "denite.util.UserContext"
                ]
            }
        },
        "SvgFormatter._get_style": {
            "name": "_get_style",
            "location": 138,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "tokentype": [
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/formatters/terminal.py": {
        "TerminalFormatter.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TerminalFormatter.format": {
            "name": "format",
            "location": 93,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": [],
                "tokensource": [
                    "Tuple['cirq.Qid']",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "int"
                ],
                "outfile": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "TerminalFormatter._write_lineno": {
            "name": "_write_lineno",
            "location": 102,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "str",
                    "IO"
                ]
            }
        },
        "TerminalFormatter._format_unencoded_with_lineno": {
            "name": "_format_unencoded_with_lineno",
            "location": 106,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tokensource": [
                    "bool",
                    "List[Tuple[int, str]]",
                    "float",
                    "int",
                    "str"
                ],
                "outfile": [
                    "str"
                ]
            }
        },
        "TerminalFormatter.format_unencoded": {
            "name": "format_unencoded",
            "location": 131,
            "return": [
                "None",
                "Union[tuple, list]",
                "Dict[str, Any]",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "tokensource": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "tuple"
                ],
                "outfile": [
                    "str",
                    "Union[List[str], Tuple[str, ...]]",
                    "Iterator[Any]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/formatters/terminal256.py": {
        "EscapeSequence.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "fg": [
                    "None",
                    "int",
                    "bool",
                    "float"
                ],
                "bg": [
                    "None",
                    "int",
                    "bool",
                    "float"
                ],
                "bold": [
                    "bool",
                    "int",
                    "float"
                ],
                "underline": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "EscapeSequence.escape": {
            "name": "escape",
            "location": 42,
            "return": [
                "typing.Text",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "attrs": [
                    "str",
                    "int",
                    "list",
                    "List[str]"
                ]
            }
        },
        "EscapeSequence.color_string": {
            "name": "color_string",
            "location": 47,
            "return": [
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EscapeSequence.reset_string": {
            "name": "reset_string",
            "location": 59,
            "return": [
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Terminal256Formatter.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Terminal256Formatter._build_color_table": {
            "name": "_build_color_table",
            "location": 105,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Terminal256Formatter._closest_color": {
            "name": "_closest_color",
            "location": 141,
            "return": [
                "int",
                "Dict[str, Any]",
                "bool",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "int",
                    "Dict[str, int]",
                    "str"
                ],
                "g": [
                    "int",
                    "float"
                ],
                "b": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Terminal256Formatter._color_index": {
            "name": "_color_index",
            "location": 158,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "bool",
                    "Dict[Hashable, Any]",
                    "int",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "Terminal256Formatter._setup_styles": {
            "name": "_setup_styles",
            "location": 173,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Terminal256Formatter.format": {
            "name": "format",
            "location": 187,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": [],
                "tokensource": [
                    "Tuple['cirq.Qid']",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "int"
                ],
                "outfile": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "Terminal256Formatter.format_unencoded": {
            "name": "format_unencoded",
            "location": 196,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tokensource": [
                    "bool",
                    "List[Tuple[int, str]]",
                    "float",
                    "int",
                    "str"
                ],
                "outfile": [
                    "str",
                    "List[\"DictDataLoader\"]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/formatters/_mapping.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/formatters/__init__.py": {
        "_fn_matches": {
            "name": "_fn_matches",
            "location": 29,
            "return": [
                "str",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "List[str]"
                ],
                "glob": [
                    "dict",
                    "Mapping[str, Any]"
                ]
            }
        },
        "_load_formatters": {
            "name": "_load_formatters",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "module_name": [
                    "Optional[str]",
                    "str",
                    "Optional[Hashable]",
                    "static_frame.core.util.IndexInitializer",
                    "bool"
                ]
            }
        },
        "get_all_formatters": {
            "name": "get_all_formatters",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "find_formatter_class": {
            "name": "find_formatter_class",
            "location": 56,
            "return": [
                "mypy.types.Type",
                "list",
                "bool",
                "float",
                "Dict[str, str]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "alias": [
                    "Mapping[str, Any]"
                ]
            }
        },
        "get_formatter_by_name": {
            "name": "get_formatter_by_name",
            "location": 71,
            "return": [
                "str",
                "py.path.local",
                "dict"
            ],
            "arguments": {
                "_alias": [
                    "str",
                    "Optional[Union[pygments.lexer.Lexer, str]]",
                    "opentrons.protocols.types.APIVersion",
                    "bool",
                    "dict",
                    "Dict[str, object]"
                ]
            }
        },
        "get_formatter_for_filename": {
            "name": "get_formatter_for_filename",
            "location": 82,
            "return": [
                "str",
                "tuple",
                "List[str]"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "dict",
                    "Optional[Dict]",
                    "Sequence[str]",
                    "Optional[str]",
                    "Union[Callable, str]"
                ]
            }
        },
        "_automodule.__getattr__": {
            "name": "__getattr__",
            "location": 104,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/actionscript.py": {
        "ActionScript3Lexer.analyse_text": {
            "name": "analyse_text",
            "location": 193,
            "return": [
                "int",
                "float",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/agile.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/algebra.py": {
        "MathematicaLexer._multi_escape": {
            "name": "_multi_escape",
            "location": 95,
            "return": [
                "typing.Text",
                "str",
                "Sequence[Sequence[T]]",
                "Callable[[List], List[str]]",
                "bool"
            ],
            "arguments": {
                "entries": [
                    "int",
                    "list",
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/ambient.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/apl.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/asm.py": {
        "_objdump_lexer_tokens": {
            "name": "_objdump_lexer_tokens",
            "location": 101,
            "return": [
                "str",
                "dict[typing.Text, list[tuple[typing.Text]]]"
            ],
            "arguments": {
                "asm_lexer": [
                    "str",
                    "Optional[str]",
                    "models.Name"
                ]
            }
        },
        "GasLexer.analyse_text": {
            "name": "analyse_text",
            "location": 94,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "DObjdumpLexer.__init__": {
            "name": "__init__",
            "location": 171,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CppObjdumpLexer.__init__": {
            "name": "__init__",
            "location": 184,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CObjdumpLexer.__init__": {
            "name": "__init__",
            "location": 197,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ca65Lexer.analyse_text": {
            "name": "analyse_text",
            "location": 432,
            "return": [
                "float",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/automation.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/basic.py": {
        "CbmBasicV2Lexer.analyse_text": {
            "name": "analyse_text",
            "location": 353,
            "return": [
                "float",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "QBasicLexer.analyse_text": {
            "name": "analyse_text",
            "location": 498,
            "return": [
                "float",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/business.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/chapel.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/compiled.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/configs.py": {
        "_rx_indent": {
            "name": "_rx_indent",
            "location": 117,
            "return": [
                "Optional[Dict[str, str]]",
                "typing.Text"
            ],
            "arguments": {
                "level": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "IniLexer.analyse_text": {
            "name": "analyse_text",
            "location": 44,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "RegeditLexer.analyse_text": {
            "name": "analyse_text",
            "location": 91,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "KconfigLexer.call_indent": {
            "name": "call_indent",
            "location": 153,
            "return": [
                "tuple[typing.Text]",
                "str",
                "Exception",
                "float"
            ],
            "arguments": {
                "level": [
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "KconfigLexer.do_indent": {
            "name": "do_indent",
            "location": 157,
            "return": [
                "str",
                "list[tuple[typing.Text]]"
            ],
            "arguments": {
                "level": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/console.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/css.py": {
        "_indentation": {
            "name": "_indentation",
            "location": 340,
            "return": [
                ""
            ],
            "arguments": {
                "lexer": [
                    "str"
                ],
                "match": [
                    "str",
                    "Pattern[str]",
                    "Pattern[bytes]",
                    "List[str]"
                ],
                "ctx": [
                    "tuple"
                ]
            }
        },
        "_starts_block": {
            "name": "_starts_block",
            "location": 356,
            "return": [
                "str",
                "float",
                "int",
                "Tuple[str, str]",
                "list"
            ],
            "arguments": {
                "token": [
                    "int",
                    "Dict[str, object]",
                    "Optional[IO[bytes]]"
                ],
                "state": [
                    "int",
                    "Dict[str, object]",
                    "Optional[IO[bytes]]"
                ]
            }
        },
        "_starts_block.callback": {
            "name": "callback",
            "location": 357,
            "return": [
                ""
            ],
            "arguments": {
                "lexer": [
                    "str"
                ],
                "match": [
                    "str",
                    "dict",
                    "re.Match[str]"
                ],
                "ctx": []
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/c_cpp.py": {
        "CFamilyLexer.__init__": {
            "name": "__init__",
            "location": 153,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CFamilyLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 158,
            "return": [
                "",
                "typing.Generator[tuple[Name]]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Sequence[int]"
                ]
            }
        },
        "CLexer.analyse_text": {
            "name": "analyse_text",
            "location": 179,
            "return": [
                "float",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Union[str, Tuple[str, ...]]"
                ]
            }
        },
        "CppLexer.analyse_text": {
            "name": "analyse_text",
            "location": 229,
            "return": [
                "float",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/c_like.py": {
        "CudaLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 312,
            "return": [
                "typing.Generator[tuple[Name]]"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "SwigLexer.analyse_text": {
            "name": "analyse_text",
            "location": 376,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "text": []
            }
        },
        "ArduinoLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 517,
            "return": [
                "typing.Generator[tuple]",
                "typing.Generator[tuple[Name]]",
                "typing.Generator[tuple[Name_@_Function]]",
                "typing.Generator[tuple[Keyword]]"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/d.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/dalvik.py": {
        "SmaliLexer.analyse_text": {
            "name": "analyse_text",
            "location": 108,
            "return": [
                "int",
                "float",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/data.py": {
        "YamlLexerContext.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YamlLexer.something": {
            "name": "something",
            "location": 46,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "token_class": [
                    "List[Tuple[str, str]]",
                    "Optional[str]",
                    "bool",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]"
                ]
            }
        },
        "YamlLexer.reset_indent": {
            "name": "reset_indent",
            "location": 56,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "token_class": [
                    "List[Tuple[str, str]]",
                    "Optional[str]",
                    "bool",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]"
                ]
            }
        },
        "YamlLexer.save_indent": {
            "name": "save_indent",
            "location": 68,
            "return": [
                "str",
                "Dict[str, str]",
                "bool",
                "int"
            ],
            "arguments": {
                "token_class": [
                    "int",
                    "str",
                    "bool",
                    "Callable[[], str]",
                    "Optional[float]",
                    "float"
                ],
                "start": [
                    "bool",
                    "int",
                    "str",
                    "Callable[[], str]",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "YamlLexer.set_indent": {
            "name": "set_indent",
            "location": 90,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "token_class": [
                    "str",
                    "bool"
                ],
                "implicit": [
                    "bool",
                    "str"
                ]
            }
        },
        "YamlLexer.set_block_scalar_indent": {
            "name": "set_block_scalar_indent",
            "location": 103,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "token_class": [
                    "str",
                    "Callable",
                    "bool"
                ]
            }
        },
        "YamlLexer.parse_block_scalar_empty_line": {
            "name": "parse_block_scalar_empty_line",
            "location": 120,
            "return": [
                "int",
                "str",
                "Tuple[int]",
                "Sequence"
            ],
            "arguments": {
                "indent_token_class": [
                    "bool",
                    "str",
                    "Callable",
                    "Dict[str, Any]",
                    "dict",
                    "List[Dict[str, Any]]"
                ],
                "content_token_class": [
                    "bool",
                    "str",
                    "Callable",
                    "Dict[str, Any]",
                    "dict",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "YamlLexer.parse_block_scalar_indent": {
            "name": "parse_block_scalar_indent",
            "location": 137,
            "return": [
                "Mapping"
            ],
            "arguments": {
                "token_class": [
                    "List[Tuple[str, str]]",
                    "str",
                    "bool",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]"
                ]
            }
        },
        "YamlLexer.parse_plain_scalar_indent": {
            "name": "parse_plain_scalar_indent",
            "location": 157,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "token_class": [
                    "List[Tuple[str, str]]",
                    "Optional[str]",
                    "bool",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]"
                ]
            }
        },
        "YamlLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 427,
            "return": [
                "dict",
                "str",
                "Callable",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "None"
                ],
                "context": [
                    "None",
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "YamlLexer.something.callback": {
            "name": "callback",
            "location": 48,
            "return": [
                "None",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "lexer": [],
                "match": [],
                "context": []
            }
        },
        "YamlLexer.reset_indent.callback": {
            "name": "callback",
            "location": 58,
            "return": [
                "None",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "lexer": [],
                "match": [],
                "context": []
            }
        },
        "YamlLexer.save_indent.callback": {
            "name": "callback",
            "location": 70,
            "return": [
                "None",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "lexer": [],
                "match": [],
                "context": []
            }
        },
        "YamlLexer.set_indent.callback": {
            "name": "callback",
            "location": 92,
            "return": [
                "None",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "lexer": [],
                "match": [],
                "context": []
            }
        },
        "YamlLexer.set_block_scalar_indent.callback": {
            "name": "callback",
            "location": 105,
            "return": [
                "None",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "lexer": [],
                "match": [],
                "context": []
            }
        },
        "YamlLexer.parse_block_scalar_empty_line.callback": {
            "name": "callback",
            "location": 122,
            "return": [
                "None",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "lexer": [],
                "match": [],
                "context": []
            }
        },
        "YamlLexer.parse_block_scalar_indent.callback": {
            "name": "callback",
            "location": 139,
            "return": [
                "None",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "lexer": [],
                "match": [],
                "context": []
            }
        },
        "YamlLexer.parse_plain_scalar_indent.callback": {
            "name": "callback",
            "location": 159,
            "return": [
                "None",
                "Union[tuple, list]",
                "typing.Generator[tuple]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "lexer": [
                    "str",
                    "Iterable",
                    "Callable[[Any], T]",
                    "int",
                    "Callable",
                    "Iterable[T]"
                ],
                "match": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "context": [
                    "dict",
                    "Optional[str]",
                    "Sequence[Hashable]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/diff.py": {
        "DiffLexer.analyse_text": {
            "name": "analyse_text",
            "location": 42,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Iterable[Tuple[int, int]]",
                    "Optional[str]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/dotnet.py": {
        "CSharpLexer.__init__": {
            "name": "__init__",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NemerleLexer.__init__": {
            "name": "__init__",
            "location": 287,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VbNetLexer.analyse_text": {
            "name": "analyse_text",
            "location": 469,
            "return": [
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "CSharpAspxLexer.__init__": {
            "name": "__init__",
            "location": 508,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CSharpAspxLexer.analyse_text": {
            "name": "analyse_text",
            "location": 512,
            "return": [
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "VbNetAspxLexer.__init__": {
            "name": "__init__",
            "location": 529,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VbNetAspxLexer.analyse_text": {
            "name": "analyse_text",
            "location": 533,
            "return": [
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/dsls.py": {
        "RslLexer.analyse_text": {
            "name": "analyse_text",
            "location": 301,
            "return": [
                "float",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/dylan.py": {
        "DylanLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 93,
            "return": [
                "",
                "typing.Generator[tuple]",
                "typing.Generator[tuple[Name]]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Sequence[int]"
                ]
            }
        },
        "DylanConsoleLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 265,
            "return": [
                "",
                "typing.Generator",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/ecl.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/eiffel.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/erlang.py": {
        "gen_elixir_string_rules": {
            "name": "gen_elixir_string_rules",
            "location": 176,
            "return": [
                "dict[, list[tuple[typing.Text]]]",
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[List[str]]"
                ],
                "symbol": [
                    "str",
                    "Optional[List[str]]"
                ],
                "token": [
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "gen_elixir_sigstr_rules": {
            "name": "gen_elixir_sigstr_rules",
            "location": 188,
            "return": [
                "Iterable[str]",
                "list[tuple[typing.Text]]"
            ],
            "arguments": {
                "term": [
                    "Optional[Tuple[int, ...]]",
                    "int",
                    "List[str]"
                ],
                "token": [
                    "Optional[Tuple[int, ...]]",
                    "int",
                    "List[str]"
                ],
                "interpol": [
                    "bool",
                    "List[int]",
                    "str"
                ]
            }
        },
        "ErlangShellLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 146,
            "return": [
                "",
                "typing.Generator",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "ElixirLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 247,
            "return": [
                "",
                "typing.Generator[tuple]",
                "typing.Generator[tuple[Name]]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Sequence[int]"
                ]
            }
        },
        "ElixirLexer.gen_elixir_sigil_rules": {
            "name": "gen_elixir_sigil_rules",
            "location": 269,
            "return": [
                "dict[typing.Text, list[tuple[typing.Union[typing.Text,tuple[typing.Text]]]]]",
                "Callable",
                "List[str]",
                "dict",
                "int"
            ],
            "arguments": {}
        },
        "ElixirConsoleLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 478,
            "return": [
                "",
                "typing.Generator",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/esoteric.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/factor.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/fantom.py": {
        "FantomLexer.s": {
            "name": "s",
            "location": 34,
            "return": [
                "str",
                "Type[Any]"
            ],
            "arguments": {
                "str": [
                    "str",
                    "int",
                    "Union[str, bytes]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/felix.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/fortran.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/foxpro.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/functional.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/go.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/graph.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/graphics.py": {
        "_shortened": {
            "name": "_shortened",
            "location": 293,
            "return": [
                "str",
                "int",
                "List[int]"
            ],
            "arguments": {
                "word": [
                    "str",
                    "Sequence[float]",
                    "Dict[str, str]",
                    "bytes",
                    "List[float]",
                    "list"
                ]
            }
        },
        "_shortened_many": {
            "name": "_shortened_many",
            "location": 299,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {}
        },
        "AsymptoteLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 282,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Sequence[int]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/haskell.py": {
        "CryptolLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 460,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "LiterateLexer.__init__": {
            "name": "__init__",
            "location": 485,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "baselexer": [
                    "bool",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "List[Dict[str, Any]]",
                    "list",
                    "dict",
                    "bytes",
                    "str"
                ]
            }
        },
        "LiterateLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 489,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "LiterateHaskellLexer.__init__": {
            "name": "__init__",
            "location": 553,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LiterateIdrisLexer.__init__": {
            "name": "__init__",
            "location": 576,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LiterateAgdaLexer.__init__": {
            "name": "__init__",
            "location": 599,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LiterateCryptolLexer.__init__": {
            "name": "__init__",
            "location": 622,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/haxe.py": {
        "HaxeLexer.preproc_callback": {
            "name": "preproc_callback",
            "location": 59,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "self": [],
                "match": [
                    "str",
                    "dict",
                    "TypeError"
                ],
                "ctx": [
                    "list"
                ]
            }
        },
        "HaxeLexer.analyse_text": {
            "name": "analyse_text",
            "location": 893,
            "return": [
                "float",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/hdl.py": {
        "VerilogLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 134,
            "return": [
                "",
                "typing.Generator[tuple[Name]]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Sequence[int]"
                ]
            }
        },
        "SystemVerilogLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 279,
            "return": [
                "",
                "typing.Generator[tuple[Name]]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Sequence[int]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/html.py": {
        "HtmlLexer.analyse_text": {
            "name": "analyse_text",
            "location": 94,
            "return": [
                "float",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "DtdLexer.analyse_text": {
            "name": "analyse_text",
            "location": 181,
            "return": [
                "float",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "XmlLexer.analyse_text": {
            "name": "analyse_text",
            "location": 230,
            "return": [
                "float",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "XsltLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 258,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Sequence[int]"
                ]
            }
        },
        "XsltLexer.analyse_text": {
            "name": "analyse_text",
            "location": 267,
            "return": [
                "float",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/idl.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/igor.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/inferno.py": {
        "LimboLexer.analyse_text": {
            "name": "analyse_text",
            "location": 81,
            "return": [
                "float",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/installers.py": {
        "SourcesListLexer.analyse_text": {
            "name": "analyse_text",
            "location": 260,
            "return": [
                "bool"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/int_fiction.py": {
        "Inform6Lexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 485,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Sequence[int]"
                ]
            }
        },
        "Inform7Lexer.__init__": {
            "name": "__init__",
            "location": 711,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Inform6TemplateLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 732,
            "return": [
                "str",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "stack": [
                    "str"
                ]
            }
        },
        "Tads3Lexer._make_string_state": {
            "name": "_make_string_state",
            "location": 758,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "triple": [
                    "str",
                    "int"
                ],
                "double": [
                    "str"
                ],
                "verbatim": [
                    "str",
                    "Tuple[str]",
                    "Type[T]",
                    "int"
                ],
                "_escape": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "list"
                ]
            }
        },
        "Tads3Lexer._make_tag_state": {
            "name": "_make_tag_state",
            "location": 808,
            "return": [
                "str",
                "Optional[bytes]",
                "Tuple[str]"
            ],
            "arguments": {
                "triple": [
                    "str",
                    "bool"
                ],
                "double": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ],
                "_escape": [
                    "str",
                    "int",
                    "Exception"
                ]
            }
        },
        "Tads3Lexer._make_attribute_value_state": {
            "name": "_make_attribute_value_state",
            "location": 833,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "terminator": [
                    "IO[str]",
                    "List[str]",
                    "bool",
                    "int"
                ],
                "host_triple": [],
                "host_double": [
                    "float"
                ],
                "_escape": [
                    "float",
                    "bytes"
                ]
            }
        },
        "Tads3Lexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 1321,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/iolang.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/javascript.py": {
        "LassoLexer.__init__": {
            "name": "__init__",
            "location": 716,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LassoLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 732,
            "return": [
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "LassoLexer.analyse_text": {
            "name": "analyse_text",
            "location": 745,
            "return": [
                "float"
            ],
            "arguments": {
                "text": []
            }
        },
        "ObjectiveJLexer.analyse_text": {
            "name": "analyse_text",
            "location": 972,
            "return": [
                "bool"
            ],
            "arguments": {
                "text": []
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/julia.py": {
        "JuliaLexer.analyse_text": {
            "name": "analyse_text",
            "location": 142,
            "return": [],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "JuliaConsoleLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 158,
            "return": [
                "",
                "typing.Generator",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/jvm.py": {
        "AspectJLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 110,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Sequence[int]"
                ]
            }
        },
        "GosuTemplateLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 444,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "GroovyLexer.analyse_text": {
            "name": "analyse_text",
            "location": 518,
            "return": [],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "JasminLexer.analyse_text": {
            "name": "analyse_text",
            "location": 1550,
            "return": [
                "int",
                "float",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/lisp.py": {
        "CommonLispLexer.__init__": {
            "name": "__init__",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommonLispLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 204,
            "return": [
                "typing.Generator[tuple]",
                "typing.Generator[tuple[Name_@_Variable]]"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "HyLexer._multi_escape": {
            "name": "_multi_escape",
            "location": 386,
            "return": [],
            "arguments": {
                "entries": []
            }
        },
        "HyLexer.analyse_text": {
            "name": "analyse_text",
            "location": 453,
            "return": [
                "float"
            ],
            "arguments": {
                "text": []
            }
        },
        "EmacsLispLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 2021,
            "return": [
                "typing.Generator[tuple]",
                "typing.Generator[tuple[Name_@_Variable]]"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/make.py": {
        "MakefileLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 46,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "MakefileLexer.analyse_text": {
            "name": "analyse_text",
            "location": 63,
            "return": [
                "float",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "CMakeLexer.analyse_text": {
            "name": "analyse_text",
            "location": 197,
            "return": [
                "float",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/markup.py": {
        "RstLexer._handle_sourcecode": {
            "name": "_handle_sourcecode",
            "location": 130,
            "return": [
                "typing.Generator[tuple]",
                "Union[tuple, list]",
                "typing.Generator[tuple[typing.Text]]",
                "List[int]",
                "None",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "match": [
                    "int",
                    "bool",
                    "Optional[List[int]]"
                ]
            }
        },
        "RstLexer.__init__": {
            "name": "__init__",
            "location": 261,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RstLexer.analyse_text": {
            "name": "analyse_text",
            "location": 265,
            "return": [
                "float",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "TexLexer.analyse_text": {
            "name": "analyse_text",
            "location": 328,
            "return": [
                "bool"
            ],
            "arguments": {
                "text": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "GroffLexer.analyse_text": {
            "name": "analyse_text",
            "location": 380,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "MozPreprocXulLexer.__init__": {
            "name": "__init__",
            "location": 465,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MozPreprocJavascriptLexer.__init__": {
            "name": "__init__",
            "location": 482,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MozPreprocCssLexer.__init__": {
            "name": "__init__",
            "location": 499,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/math.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/matlab.py": {
        "MatlabLexer.analyse_text": {
            "name": "analyse_text",
            "location": 136,
            "return": [
                "float",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "MatlabSessionLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 156,
            "return": [
                "",
                "typing.Generator",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/ml.py": {
        "SMLLexer.stringy": {
            "name": "stringy",
            "location": 61,
            "return": [
                "list[tuple[typing.Text]]",
                "str",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "whatkind": [
                    "Callable",
                    "dict",
                    "Optional[str]",
                    "str",
                    "int"
                ]
            }
        },
        "SMLLexer.long_id_callback": {
            "name": "long_id_callback",
            "location": 76,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "self": [],
                "match": [
                    "str",
                    "Pattern",
                    "Sequence",
                    "Dict[Any, str]",
                    "list"
                ]
            }
        },
        "SMLLexer.end_id_callback": {
            "name": "end_id_callback",
            "location": 84,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "self": [],
                "match": [
                    "str",
                    "Sequence",
                    "dict",
                    "tuple",
                    "Union[Set[int], List[int], Dict[int, Any]]"
                ]
            }
        },
        "SMLLexer.id_callback": {
            "name": "id_callback",
            "location": 93,
            "return": [
                "",
                "typing.Generator[tuple[str]]"
            ],
            "arguments": {
                "self": [],
                "match": [
                    "str",
                    "Pattern",
                    "Dict[str, str]",
                    "Iterator[Dict[str, Any]]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/modeling.py": {
        "BugsLexer.analyse_text": {
            "name": "analyse_text",
            "location": 188,
            "return": [
                "float",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "JagsLexer.analyse_text": {
            "name": "analyse_text",
            "location": 271,
            "return": [
                "int",
                "float",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "StanLexer.analyse_text": {
            "name": "analyse_text",
            "location": 352,
            "return": [
                "float",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/modula2.py": {
        "Modula2Lexer.__init__": {
            "name": "__init__",
            "location": 1266,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Modula2Lexer.set_dialect": {
            "name": "set_dialect",
            "location": 1308,
            "return": [],
            "arguments": {
                "self": [],
                "dialect_id": []
            }
        },
        "Modula2Lexer.get_dialect_from_dialect_tag": {
            "name": "get_dialect_from_dialect_tag",
            "location": 1410,
            "return": [],
            "arguments": {
                "self": [],
                "dialect_tag": []
            }
        },
        "Modula2Lexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 1458,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/nimrod.py": {
        "NimrodLexer.underscorize": {
            "name": "underscorize",
            "location": 35,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "words": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/nit.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/nix.py": {
        "NixLexer.analyse_text": {
            "name": "analyse_text",
            "location": 125,
            "return": [
                "float",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/objective.py": {
        "objective": {
            "name": "objective",
            "location": 24,
            "return": [
                "GeneratedObjectiveCVariant",
                "bool",
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "baselexer": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "LogosLexer.analyse_text": {
            "name": "analyse_text",
            "location": 277,
            "return": [
                "int",
                "float",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "SwiftLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 490,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Sequence[int]"
                ]
            }
        },
        "objective.GeneratedObjectiveCVariant.analyse_text": {
            "name": "analyse_text",
            "location": 168,
            "return": [
                "int",
                "float",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "objective.GeneratedObjectiveCVariant.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 179,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Sequence[int]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/ooc.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/other.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/parsers.py": {
        "RagelEmbeddedLexer.analyse_text": {
            "name": "analyse_text",
            "location": 209,
            "return": [
                "bool",
                "Union[str, Pattern]",
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Iterable[Tuple[int, int]]",
                    "Optional[str]"
                ]
            }
        },
        "RagelRubyLexer.__init__": {
            "name": "__init__",
            "location": 224,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RagelRubyLexer.analyse_text": {
            "name": "analyse_text",
            "location": 228,
            "return": [
                "bool",
                "Union[str, Pattern]",
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Iterable[Tuple[int, int]]",
                    "Optional[str]"
                ]
            }
        },
        "RagelCLexer.__init__": {
            "name": "__init__",
            "location": 243,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RagelCLexer.analyse_text": {
            "name": "analyse_text",
            "location": 247,
            "return": [
                "bool"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Iterable[Tuple[int, int]]",
                    "Optional[str]"
                ]
            }
        },
        "RagelDLexer.__init__": {
            "name": "__init__",
            "location": 262,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RagelDLexer.analyse_text": {
            "name": "analyse_text",
            "location": 265,
            "return": [
                "bool",
                "Optional[str]",
                "Dict[str, Dict]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Iterable[Tuple[int, int]]",
                    "Optional[str]"
                ]
            }
        },
        "RagelCppLexer.__init__": {
            "name": "__init__",
            "location": 280,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RagelCppLexer.analyse_text": {
            "name": "analyse_text",
            "location": 283,
            "return": [
                "bool"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Iterable[Tuple[int, int]]",
                    "Optional[str]"
                ]
            }
        },
        "RagelObjectiveCLexer.__init__": {
            "name": "__init__",
            "location": 298,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RagelObjectiveCLexer.analyse_text": {
            "name": "analyse_text",
            "location": 303,
            "return": [
                "bool",
                "Union[str, Pattern]",
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Iterable[Tuple[int, int]]",
                    "Optional[str]"
                ]
            }
        },
        "RagelJavaLexer.__init__": {
            "name": "__init__",
            "location": 318,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RagelJavaLexer.analyse_text": {
            "name": "analyse_text",
            "location": 322,
            "return": [
                "bool",
                "Union[str, Pattern]",
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Iterable[Tuple[int, int]]",
                    "Optional[str]"
                ]
            }
        },
        "AntlrLexer.analyse_text": {
            "name": "analyse_text",
            "location": 515,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "AntlrCppLexer.__init__": {
            "name": "__init__",
            "location": 554,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AntlrCppLexer.analyse_text": {
            "name": "analyse_text",
            "location": 557,
            "return": [
                "int",
                "str",
                "dict",
                "Iterable[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "AntlrObjectiveCLexer.__init__": {
            "name": "__init__",
            "location": 573,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AntlrObjectiveCLexer.analyse_text": {
            "name": "analyse_text",
            "location": 577,
            "return": [
                "int",
                "str",
                "dict",
                "Iterable[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "AntlrCSharpLexer.__init__": {
            "name": "__init__",
            "location": 593,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AntlrCSharpLexer.analyse_text": {
            "name": "analyse_text",
            "location": 597,
            "return": [
                "int",
                "str",
                "dict",
                "Iterable[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "AntlrPythonLexer.__init__": {
            "name": "__init__",
            "location": 613,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AntlrPythonLexer.analyse_text": {
            "name": "analyse_text",
            "location": 617,
            "return": [
                "int",
                "str",
                "dict",
                "Iterable[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "AntlrJavaLexer.__init__": {
            "name": "__init__",
            "location": 633,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AntlrJavaLexer.analyse_text": {
            "name": "analyse_text",
            "location": 637,
            "return": [
                "float",
                "str",
                "dict",
                "Iterable[int]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "AntlrRubyLexer.__init__": {
            "name": "__init__",
            "location": 653,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AntlrRubyLexer.analyse_text": {
            "name": "analyse_text",
            "location": 657,
            "return": [
                "int",
                "str",
                "dict",
                "Iterable[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "AntlrPerlLexer.__init__": {
            "name": "__init__",
            "location": 673,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AntlrPerlLexer.analyse_text": {
            "name": "analyse_text",
            "location": 677,
            "return": [
                "int",
                "str",
                "dict",
                "Iterable[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "AntlrActionScriptLexer.__init__": {
            "name": "__init__",
            "location": 693,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AntlrActionScriptLexer.analyse_text": {
            "name": "analyse_text",
            "location": 698,
            "return": [
                "int",
                "str",
                "dict",
                "Iterable[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "TreetopLexer.__init__": {
            "name": "__init__",
            "location": 783,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/pascal.py": {
        "DelphiLexer.__init__": {
            "name": "__init__",
            "location": 300,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DelphiLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 313,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/pawn.py": {
        "SourcePawnLexer.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourcePawnLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 119,
            "return": [
                "",
                "typing.Generator[tuple[Name]]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Sequence[int]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/perl.py": {
        "PerlLexer.analyse_text": {
            "name": "analyse_text",
            "location": 203,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "text": []
            }
        },
        "Perl6Lexer._build_word_match": {
            "name": "_build_word_match",
            "location": 381,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "words": [],
                "boundary_regex_fragment": [
                    "None"
                ],
                "prefix": [
                    "typing.Text"
                ],
                "suffix": [
                    "typing.Text"
                ]
            }
        },
        "Perl6Lexer.brackets_callback": {
            "name": "brackets_callback",
            "location": 390,
            "return": [],
            "arguments": {
                "token_class": []
            }
        },
        "Perl6Lexer.opening_brace_callback": {
            "name": "opening_brace_callback",
            "location": 446,
            "return": [
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {
                "lexer": [],
                "match": [],
                "context": []
            }
        },
        "Perl6Lexer.closing_brace_callback": {
            "name": "closing_brace_callback",
            "location": 459,
            "return": [
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {
                "lexer": [],
                "match": [],
                "context": []
            }
        },
        "Perl6Lexer.embedded_perl6_callback": {
            "name": "embedded_perl6_callback",
            "location": 473,
            "return": [
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {
                "lexer": [],
                "match": [],
                "context": []
            }
        },
        "Perl6Lexer.analyse_text": {
            "name": "analyse_text",
            "location": 562,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "text": []
            }
        },
        "Perl6Lexer.__init__": {
            "name": "__init__",
            "location": 613,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Perl6Lexer.brackets_callback.callback": {
            "name": "callback",
            "location": 391,
            "return": [
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "lexer": [],
                "match": [],
                "context": []
            }
        },
        "Perl6Lexer.analyse_text.strip_pod": {
            "name": "strip_pod",
            "location": 563,
            "return": [
                "list"
            ],
            "arguments": {
                "lines": []
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/php.py": {
        "PhpLexer.__init__": {
            "name": "__init__",
            "location": 209,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhpLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 229,
            "return": [
                "",
                "typing.Generator[tuple]",
                "typing.Generator[tuple[Name_@_Other]]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "PhpLexer.analyse_text": {
            "name": "analyse_text",
            "location": 241,
            "return": [
                "float",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/prolog.py": {
        "PrologLexer.analyse_text": {
            "name": "analyse_text",
            "location": 84,
            "return": [
                "bool",
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Iterable[Tuple[int, int]]",
                    "Optional[str]"
                ]
            }
        },
        "LogtalkLexer.analyse_text": {
            "name": "analyse_text",
            "location": 296,
            "return": [
                "float",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/python.py": {
        "PythonLexer.analyse_text": {
            "name": "analyse_text",
            "location": 194,
            "return": [
                "bool"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "Python3Lexer.analyse_text": {
            "name": "analyse_text",
            "location": 314,
            "return": [
                "bool"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "PythonConsoleLexer.__init__": {
            "name": "__init__",
            "location": 343,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PythonConsoleLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 347,
            "return": [
                "",
                "typing.Generator",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "NumPyLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 836,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Sequence[int]"
                ]
            }
        },
        "NumPyLexer.analyse_text": {
            "name": "analyse_text",
            "location": 844,
            "return": [
                "bool"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/r.py": {
        "RConsoleLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 33,
            "return": [
                "",
                "typing.Generator",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "SLexer.analyse_text": {
            "name": "analyse_text",
            "location": 412,
            "return": [
                "float",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/rdf.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/rebol.py": {
        "RebolLexer.word_callback": {
            "name": "word_callback",
            "location": 36,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "lexer": [
                    "str",
                    "Iterable",
                    "Callable[[Any], T]",
                    "int",
                    "Callable",
                    "Iterable[T]"
                ],
                "match": [
                    "int",
                    "str",
                    "Callable[[T, T], T]",
                    "T"
                ]
            }
        },
        "RebolLexer.analyse_text": {
            "name": "analyse_text",
            "location": 235,
            "return": [
                "float",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "List[str]",
                    "type"
                ]
            }
        },
        "RedLexer.word_callback": {
            "name": "word_callback",
            "location": 262,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "lexer": [
                    "str",
                    "Iterable",
                    "Callable[[Any], T]",
                    "int",
                    "Callable",
                    "Iterable[T]"
                ],
                "match": [
                    "int",
                    "str",
                    "Callable[[T, T], T]",
                    "T"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/resource.py": {
        "ResourceLexer.analyse_text": {
            "name": "analyse_text",
            "location": 83,
            "return": [
                "Optional[str]",
                "Type",
                "str",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/robotframework.py": {
        "normalize": {
            "name": "normalize",
            "location": 49,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "string": [
                    "str",
                    "MutableMapping[str, str]"
                ],
                "remove": [
                    "typing.Text",
                    "str",
                    "Mapping[str, str]",
                    "List[List[str]]",
                    "dict"
                ]
            }
        },
        "RobotFrameworkLexer.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RobotFrameworkLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "VariableTokenizer.tokenize": {
            "name": "tokenize",
            "location": 89,
            "return": [
                "typing.Generator[tuple]",
                "Union[tuple, list]",
                "None",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str",
                    "List['Query']"
                ],
                "token": [
                    "str"
                ]
            }
        },
        "VariableTokenizer._tokenize": {
            "name": "_tokenize",
            "location": 98,
            "return": [
                "",
                "typing.Generator[tuple]",
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {
                "self": [],
                "var": [
                    "str",
                    "Optional[int]",
                    "bool",
                    "List[str]",
                    "List[Tuple]"
                ],
                "string": [
                    "Optional[int]",
                    "Dict[str, T]",
                    "str",
                    "Iterable[int]",
                    "List[allennlp.data.tokenizers.Token]"
                ],
                "orig_token": [
                    "str",
                    "int",
                    "Dict[int, int]"
                ]
            }
        },
        "RowTokenizer.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RowTokenizer.tokenize": {
            "name": "tokenize",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "row": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "RowTokenizer._start_table": {
            "name": "_start_table",
            "location": 146,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "header": [
                    "str"
                ]
            }
        },
        "RowTokenizer._tokenize": {
            "name": "_tokenize",
            "location": 150,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "dict",
                    "int",
                    "Dict[str, Any]"
                ],
                "index": [
                    "str",
                    "bool",
                    "complex",
                    "float",
                    "SupportsBytes",
                    "Sequence[str]"
                ],
                "commented": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ],
                "separator": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ],
                "heading": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "RowSplitter.split": {
            "name": "split",
            "location": 166,
            "return": [
                "",
                "typing.Generator",
                "typing.Generator[typing.Text]"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "str",
                    "Optional[str]",
                    "int",
                    "list"
                ]
            }
        },
        "RowSplitter._split_from_spaces": {
            "name": "_split_from_spaces",
            "location": 173,
            "return": [
                "",
                "typing.Generator[typing.Text]",
                "typing.Generator"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "str",
                    "bool",
                    "denite.util.Candidates"
                ]
            }
        },
        "RowSplitter._split_from_pipes": {
            "name": "_split_from_pipes",
            "location": 178,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "Optional[Dict[str, Any]]",
                    "int",
                    "dict",
                    "List[str]",
                    "str",
                    "List[Dict[str, Any]]",
                    "Mapping[int, str]",
                    "bool",
                    "List[dict]",
                    "Type[object]"
                ]
            }
        },
        "Tokenizer.__init__": {
            "name": "__init__",
            "location": 191,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tokenizer.tokenize": {
            "name": "tokenize",
            "location": 194,
            "return": [
                "list[tuple]",
                "int",
                "Dict[str, int]",
                "Optional[bool]",
                "Union[int, Tuple[int, ...]]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[Sequence[T]]",
                    "list",
                    "float",
                    "int"
                ]
            }
        },
        "Tokenizer._tokenize": {
            "name": "_tokenize",
            "location": 201,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ],
                "index": [
                    "List[str]",
                    "bool",
                    "Union[str, list]",
                    "List[Union[int, Any]]",
                    "list",
                    "int",
                    "List[int]"
                ]
            }
        },
        "Tokenizer._is_assign": {
            "name": "_is_assign",
            "location": 205,
            "return": [
                "bool",
                "int",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Hashable",
                    "T",
                    "str",
                    "Union[str, 'Type']",
                    "bool"
                ]
            }
        },
        "Setting.__init__": {
            "name": "__init__",
            "location": 226,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "template_setter": [
                    "None",
                    "str",
                    "List[str]",
                    "List[int]"
                ]
            }
        },
        "Setting._tokenize": {
            "name": "_tokenize",
            "location": 230,
            "return": [
                "int",
                "List[str]",
                "dict",
                "Dict[str, Set[str]]",
                "Dict[str, Any]",
                "str",
                "MutableMapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T",
                    "int",
                    "str",
                    "bool",
                    "float"
                ],
                "index": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "TestCaseSetting._tokenize": {
            "name": "_tokenize",
            "location": 256,
            "return": [
                "int",
                "list[tuple[typing.Text]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Sequence",
                    "Iterable",
                    "str",
                    "Optional[Type]",
                    "Tuple[str, int]"
                ],
                "index": [
                    "List[str]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Variable._tokenize": {
            "name": "_tokenize",
            "location": 271,
            "return": [
                "int",
                "dict",
                "List[str]",
                "Dict[str, str]",
                "Optional[Union[str, Any, Any, Any]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "Iterable[object]",
                    "int",
                    "float"
                ],
                "index": [
                    "bool",
                    "Iterable[object]",
                    "int",
                    "float"
                ]
            }
        },
        "KeywordCall.__init__": {
            "name": "__init__",
            "location": 280,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "support_assign": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "KeywordCall._tokenize": {
            "name": "_tokenize",
            "location": 285,
            "return": [
                "int",
                "str",
                "List[int]",
                "Dict[str, Any]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[Sequence[T]]",
                    "float",
                    "list",
                    "T"
                ],
                "index": [
                    "int",
                    "str",
                    "List[T]",
                    "List[str]"
                ]
            }
        },
        "GherkinTokenizer.tokenize": {
            "name": "tokenize",
            "location": 298,
            "return": [
                "list[tuple]",
                "str",
                "bool",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bytes",
                    "dict"
                ],
                "token": [
                    "str",
                    "Sequence[str]",
                    "dict",
                    "list"
                ]
            }
        },
        "ForLoop.__init__": {
            "name": "__init__",
            "location": 312,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForLoop._tokenize": {
            "name": "_tokenize",
            "location": 316,
            "return": [
                "bool",
                "dict",
                "Iterable[str]",
                "List[List[str]]",
                "as3.scanner.Token",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "T",
                    "int",
                    "bytes"
                ],
                "index": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "_Table.__init__": {
            "name": "__init__",
            "location": 326,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "prev_tokenizer": [
                    "None",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "_Table.tokenize": {
            "name": "tokenize",
            "location": 331,
            "return": [
                "",
                "typing.Generator[tuple]",
                "typing.Generator"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Optional[Sequence[T]]",
                    "T",
                    "bool"
                ],
                "index": [
                    "str",
                    "bool",
                    "T"
                ]
            }
        },
        "_Table._continues": {
            "name": "_continues",
            "location": 340,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[float]",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "float",
                    "T",
                    "Tuple[str, Optional[str]]"
                ],
                "index": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "_Table._is_empty": {
            "name": "_is_empty",
            "location": 344,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "bool",
                    "float",
                    "T"
                ]
            }
        },
        "_Table._tokenize": {
            "name": "_tokenize",
            "location": 347,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Union[str, bytes]"
                ],
                "index": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "_Table.end_row": {
            "name": "end_row",
            "location": 350,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnknownTable._continues": {
            "name": "_continues",
            "location": 357,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ],
                "index": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "SettingTable.__init__": {
            "name": "__init__",
            "location": 368,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "template_setter": [
                    "str",
                    "List[str]",
                    "List[int]"
                ],
                "prev_tokenizer": [
                    "None",
                    "str",
                    "Sequence[int]",
                    "bool"
                ]
            }
        },
        "SettingTable._tokenize": {
            "name": "_tokenize",
            "location": 372,
            "return": [
                "bool",
                "str",
                "Optional[bool]",
                "Callable[..., None]",
                "Optional[str]",
                "List[str]",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "Iterable[object]",
                    "int",
                    "float"
                ],
                "index": [
                    "bool",
                    "Iterable[object]",
                    "int",
                    "float"
                ]
            }
        },
        "SettingTable.end_row": {
            "name": "end_row",
            "location": 377,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCaseTable._tokenizer_class": {
            "name": "_tokenizer_class",
            "location": 387,
            "return": [
                "TemplatedKeywordCall",
                "bool",
                "KeywordCall",
                "str",
                "Callable[[Union, Union], Tuple[Any, ...],]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCaseTable._continues": {
            "name": "_continues",
            "location": 393,
            "return": [
                "bool",
                "dict",
                "Callable",
                "List[List[str]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "int",
                    "bool"
                ],
                "index": [
                    "str",
                    "float",
                    "int",
                    "bool"
                ]
            }
        },
        "TestCaseTable._tokenize": {
            "name": "_tokenize",
            "location": 396,
            "return": [
                "list[tuple]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T",
                    "list",
                    "int",
                    "str"
                ],
                "index": [
                    "Optional[Sequence[T]]",
                    "list",
                    "bool",
                    "List[str]",
                    "Dict[str, Any]",
                    "tuple"
                ]
            }
        },
        "TestCaseTable._is_setting": {
            "name": "_is_setting",
            "location": 413,
            "return": [
                "str",
                "Type",
                "dict",
                "Union[dict, list]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "TestCaseTable._is_template": {
            "name": "_is_template",
            "location": 416,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bytes",
                    "T",
                    "Iterable[str]",
                    "type"
                ]
            }
        },
        "TestCaseTable._is_for_loop": {
            "name": "_is_for_loop",
            "location": 419,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[float]",
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "TestCaseTable.set_test_template": {
            "name": "set_test_template",
            "location": 422,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "TestCaseTable.set_default_template": {
            "name": "set_default_template",
            "location": 425,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "TestCaseTable._is_template_set": {
            "name": "_is_template_set",
            "location": 428,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "Mapping[str, str]"
                ]
            }
        },
        "KeywordTable._is_template": {
            "name": "_is_template",
            "location": 436,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[str]",
                    "T",
                    "list",
                    "int",
                    "bool"
                ]
            }
        },
        "VariableSplitter.__init__": {
            "name": "__init__",
            "location": 444,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str",
                    "List[str]"
                ],
                "identifiers": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "VariableSplitter.get_replaced_base": {
            "name": "get_replaced_base",
            "location": 459,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "variables": [
                    "Dict[str, Any]",
                    "Callable",
                    "Type",
                    "str"
                ]
            }
        },
        "VariableSplitter._finalize": {
            "name": "_finalize",
            "location": 464,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableSplitter._has_list_variable_index": {
            "name": "_has_list_variable_index",
            "location": 472,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableSplitter._split": {
            "name": "_split",
            "location": 476,
            "return": [
                "None",
                "str",
                "Dict[str, Any]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "VariableSplitter._scanning_list_variable_index": {
            "name": "_scanning_list_variable_index",
            "location": 494,
            "return": [
                "bool",
                "Dict[str, str]",
                "Tuple[bool, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableSplitter._find_variable": {
            "name": "_find_variable",
            "location": 498,
            "return": [
                "tuple",
                "Type",
                "Sequence[Any]",
                "dict",
                "Type[Any]"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ]
            }
        },
        "VariableSplitter._find_start_index": {
            "name": "_find_start_index",
            "location": 509,
            "return": [
                "int",
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "int",
                    "str"
                ],
                "start": [
                    "int",
                    "Iterable[int]",
                    "Optional[str]",
                    "bool"
                ],
                "end": [
                    "str",
                    "int"
                ]
            }
        },
        "VariableSplitter._start_index_is_ok": {
            "name": "_start_index_is_ok",
            "location": 517,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ],
                "index": [
                    "str"
                ]
            }
        },
        "VariableSplitter._is_escaped": {
            "name": "_is_escaped",
            "location": 521,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ],
                "index": [
                    "str"
                ]
            }
        },
        "VariableSplitter._variable_state": {
            "name": "_variable_state",
            "location": 528,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "char": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "index": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "VariableSplitter._is_list_variable": {
            "name": "_is_list_variable",
            "location": 539,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableSplitter._internal_variable_start_state": {
            "name": "_internal_variable_start_state",
            "location": 542,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "char": [
                    "str",
                    "int"
                ],
                "index": [
                    "str"
                ]
            }
        },
        "VariableSplitter._waiting_list_variable_index_state": {
            "name": "_waiting_list_variable_index_state",
            "location": 551,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "char": [
                    "str",
                    "Dict[str, Any]"
                ],
                "index": [
                    "str",
                    "Mapping[str, str]",
                    "dict"
                ]
            }
        },
        "VariableSplitter._list_variable_index_state": {
            "name": "_list_variable_index_state",
            "location": 557,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "char": [
                    "str",
                    "Dict[str, Any]"
                ],
                "index": [
                    "str",
                    "Optional[int]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/ruby.py": {
        "RubyLexer.heredoc_callback": {
            "name": "heredoc_callback",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "match": [
                    "str",
                    "type"
                ],
                "ctx": [
                    "Union[str, List[str]]",
                    "str"
                ]
            }
        },
        "RubyLexer.gen_rubystrings_rules": {
            "name": "gen_rubystrings_rules",
            "location": 89,
            "return": [
                "Callable",
                "List[str]",
                "dict",
                "int",
                "allennlp.common.util.JsonDict"
            ],
            "arguments": {}
        },
        "RubyLexer.analyse_text": {
            "name": "analyse_text",
            "location": 386,
            "return": [
                "bool"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "RubyConsoleLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 409,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "RubyLexer.gen_rubystrings_rules.intp_regex_callback": {
            "name": "intp_regex_callback",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "match": [
                    "Optional[Type]"
                ],
                "ctx": [
                    "str"
                ]
            }
        },
        "RubyLexer.gen_rubystrings_rules.intp_string_callback": {
            "name": "intp_string_callback",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "match": [
                    "dict",
                    "denite.util.UserContext",
                    "int"
                ],
                "ctx": [
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/rust.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/scripting.py": {
        "LuaLexer.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuaLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 131,
            "return": [
                "typing.Generator[tuple]",
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[tuple[Name]]"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "MoonScriptLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 207,
            "return": [
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "RexxLexer.analyse_text": {
            "name": "analyse_text",
            "location": 782,
            "return": [
                "float",
                "bool",
                "int"
            ],
            "arguments": {
                "text": []
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/shell.py": {
        "BashLexer.analyse_text": {
            "name": "analyse_text",
            "location": 116,
            "return": [
                "int",
                "float",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "BashSessionLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 135,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "ShellSessionLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 186,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/smalltalk.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/snobol.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/special.py": {
        "TextLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 31,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[int,typing.Text]]]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "RawTokenLexer.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RawTokenLexer.get_tokens": {
            "name": "get_tokens",
            "location": 62,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "RawTokenLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 80,
            "return": [
                "",
                "typing.Generator[tuple[int]]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/sql.py": {
        "language_callback": {
            "name": "language_callback",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "lexer": [
                    "str",
                    "Tuple[Literal, Literal, Literal]"
                ],
                "match": [
                    "str",
                    "int"
                ]
            }
        },
        "PostgresBase.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "PostgresBase._get_lexer": {
            "name": "_get_lexer",
            "location": 102,
            "return": [
                "Optional[str]",
                "str",
                "Optional[List[str]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "lang": [
                    "str",
                    "dict"
                ]
            }
        },
        "lookahead.__init__": {
            "name": "__init__",
            "location": 241,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "lookahead.__iter__": {
            "name": "__iter__",
            "location": 245,
            "return": [
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "lookahead.send": {
            "name": "send",
            "location": 248,
            "return": [
                "int",
                "slice",
                "str",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "intervallum.interval.Interval.Number",
                    "Iterator"
                ]
            }
        },
        "lookahead.__next__": {
            "name": "__next__",
            "location": 252,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostgresConsoleLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 272,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "List[bytes]",
                    "Union['Contributor', 'Coverage']",
                    "Sequence[str]"
                ]
            }
        },
        "SqliteConsoleLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 542,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/tcl.py": {
        "TclLexer._gen_command_rules": {
            "name": "_gen_command_rules",
            "location": 49,
            "return": [
                "list[tuple[typing.Text]]",
                "str",
                "bool",
                "bytes",
                "List[dict]",
                "int"
            ],
            "arguments": {
                "keyword_cmds_re": [
                    "str",
                    "Dict[str, List[str]]"
                ],
                "builtin_cmds_re": [
                    "str",
                    "Dict[str, List[str]]"
                ],
                "context": [
                    "typing.Text",
                    "str",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "TclLexer.analyse_text": {
            "name": "analyse_text",
            "location": 144,
            "return": [],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/templates.py": {
        "ErbLexer.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ErbLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 72,
            "return": [
                "typing.Generator[tuple[int]]",
                "str",
                "typing.Generator[tuple]",
                "None",
                "Iterator[object]",
                "dict",
                "Set[str]",
                "Optional[Union[Any, str]]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "ErbLexer.analyse_text": {
            "name": "analyse_text",
            "location": 140,
            "return": [
                "float",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "SmartyLexer.analyse_text": {
            "name": "analyse_text",
            "location": 188,
            "return": [
                "float",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "VelocityLexer.analyse_text": {
            "name": "analyse_text",
            "location": 267,
            "return": [
                "float",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "VelocityHtmlLexer.__init__": {
            "name": "__init__",
            "location": 293,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VelocityXmlLexer.__init__": {
            "name": "__init__",
            "location": 310,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VelocityXmlLexer.analyse_text": {
            "name": "analyse_text",
            "location": 314,
            "return": [
                "float",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Union[str, bytes]"
                ]
            }
        },
        "DjangoLexer.analyse_text": {
            "name": "analyse_text",
            "location": 393,
            "return": [
                "float",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "MyghtyHtmlLexer.__init__": {
            "name": "__init__",
            "location": 464,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyghtyXmlLexer.__init__": {
            "name": "__init__",
            "location": 481,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyghtyJavascriptLexer.__init__": {
            "name": "__init__",
            "location": 500,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyghtyCssLexer.__init__": {
            "name": "__init__",
            "location": 517,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MasonLexer.analyse_text": {
            "name": "analyse_text",
            "location": 570,
            "return": [
                "float",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "MakoHtmlLexer.__init__": {
            "name": "__init__",
            "location": 657,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakoXmlLexer.__init__": {
            "name": "__init__",
            "location": 674,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakoJavascriptLexer.__init__": {
            "name": "__init__",
            "location": 693,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MakoCssLexer.__init__": {
            "name": "__init__",
            "location": 710,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheetahPythonLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 722,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Sequence[int]"
                ]
            }
        },
        "CheetahHtmlLexer.__init__": {
            "name": "__init__",
            "location": 784,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheetahXmlLexer.__init__": {
            "name": "__init__",
            "location": 799,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheetahJavascriptLexer.__init__": {
            "name": "__init__",
            "location": 820,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HtmlGenshiLexer.__init__": {
            "name": "__init__",
            "location": 935,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HtmlGenshiLexer.analyse_text": {
            "name": "analyse_text",
            "location": 939,
            "return": [
                "float",
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Pattern[str]",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "GenshiLexer.__init__": {
            "name": "__init__",
            "location": 960,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenshiLexer.analyse_text": {
            "name": "analyse_text",
            "location": 964,
            "return": [
                "float",
                "str",
                "bytes",
                "list",
                "Optional[str]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "JavascriptGenshiLexer.__init__": {
            "name": "__init__",
            "location": 986,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JavascriptGenshiLexer.analyse_text": {
            "name": "analyse_text",
            "location": 991,
            "return": [
                "float",
                "str",
                "dict",
                "Iterable[int]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "CssGenshiLexer.__init__": {
            "name": "__init__",
            "location": 1005,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CssGenshiLexer.analyse_text": {
            "name": "analyse_text",
            "location": 1009,
            "return": [
                "float",
                "str",
                "dict",
                "Iterable[int]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "RhtmlLexer.__init__": {
            "name": "__init__",
            "location": 1027,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RhtmlLexer.analyse_text": {
            "name": "analyse_text",
            "location": 1030,
            "return": [
                "float",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Union[str, bytes]"
                ]
            }
        },
        "XmlErbLexer.__init__": {
            "name": "__init__",
            "location": 1049,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "XmlErbLexer.analyse_text": {
            "name": "analyse_text",
            "location": 1052,
            "return": [
                "float",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Union[str, bytes]"
                ]
            }
        },
        "CssErbLexer.__init__": {
            "name": "__init__",
            "location": 1069,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CssErbLexer.analyse_text": {
            "name": "analyse_text",
            "location": 1072,
            "return": [
                "float",
                "str",
                "dict",
                "Iterable[int]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "JavascriptErbLexer.__init__": {
            "name": "__init__",
            "location": 1089,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JavascriptErbLexer.analyse_text": {
            "name": "analyse_text",
            "location": 1093,
            "return": [
                "float",
                "str",
                "dict",
                "Iterable[int]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "HtmlPhpLexer.__init__": {
            "name": "__init__",
            "location": 1113,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HtmlPhpLexer.analyse_text": {
            "name": "analyse_text",
            "location": 1116,
            "return": [
                "float",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Union[str, bytes]"
                ]
            }
        },
        "XmlPhpLexer.__init__": {
            "name": "__init__",
            "location": 1133,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "XmlPhpLexer.analyse_text": {
            "name": "analyse_text",
            "location": 1136,
            "return": [
                "float",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Union[str, bytes]"
                ]
            }
        },
        "CssPhpLexer.__init__": {
            "name": "__init__",
            "location": 1153,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CssPhpLexer.analyse_text": {
            "name": "analyse_text",
            "location": 1156,
            "return": [
                "float",
                "str",
                "dict",
                "Iterable[int]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "JavascriptPhpLexer.__init__": {
            "name": "__init__",
            "location": 1173,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JavascriptPhpLexer.analyse_text": {
            "name": "analyse_text",
            "location": 1177,
            "return": [
                "str",
                "dict",
                "Iterable[int]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "HtmlSmartyLexer.__init__": {
            "name": "__init__",
            "location": 1194,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HtmlSmartyLexer.analyse_text": {
            "name": "analyse_text",
            "location": 1197,
            "return": [
                "float",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Union[str, bytes]"
                ]
            }
        },
        "XmlSmartyLexer.__init__": {
            "name": "__init__",
            "location": 1215,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "XmlSmartyLexer.analyse_text": {
            "name": "analyse_text",
            "location": 1218,
            "return": [
                "float",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Union[str, bytes]"
                ]
            }
        },
        "CssSmartyLexer.__init__": {
            "name": "__init__",
            "location": 1236,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CssSmartyLexer.analyse_text": {
            "name": "analyse_text",
            "location": 1239,
            "return": [
                "float",
                "str",
                "dict",
                "Iterable[int]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "JavascriptSmartyLexer.__init__": {
            "name": "__init__",
            "location": 1256,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JavascriptSmartyLexer.analyse_text": {
            "name": "analyse_text",
            "location": 1260,
            "return": [
                "float",
                "str",
                "dict",
                "Iterable[int]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "HtmlDjangoLexer.__init__": {
            "name": "__init__",
            "location": 1277,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HtmlDjangoLexer.analyse_text": {
            "name": "analyse_text",
            "location": 1280,
            "return": [
                "float",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "XmlDjangoLexer.__init__": {
            "name": "__init__",
            "location": 1298,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "XmlDjangoLexer.analyse_text": {
            "name": "analyse_text",
            "location": 1301,
            "return": [
                "float",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "CssDjangoLexer.__init__": {
            "name": "__init__",
            "location": 1319,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CssDjangoLexer.analyse_text": {
            "name": "analyse_text",
            "location": 1322,
            "return": [
                "float",
                "str",
                "dict",
                "Iterable[int]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "JavascriptDjangoLexer.__init__": {
            "name": "__init__",
            "location": 1343,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JavascriptDjangoLexer.analyse_text": {
            "name": "analyse_text",
            "location": 1347,
            "return": [
                "float",
                "str",
                "dict",
                "Iterable[int]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "JspLexer.__init__": {
            "name": "__init__",
            "location": 1387,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JspLexer.analyse_text": {
            "name": "analyse_text",
            "location": 1390,
            "return": [
                "float",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "EvoqueHtmlLexer.__init__": {
            "name": "__init__",
            "location": 1464,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EvoqueXmlLexer.__init__": {
            "name": "__init__",
            "location": 1481,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ColdfusionHtmlLexer.__init__": {
            "name": "__init__",
            "location": 1589,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ColdfusionCFCLexer.__init__": {
            "name": "__init__",
            "location": 1605,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SspLexer.__init__": {
            "name": "__init__",
            "location": 1621,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SspLexer.analyse_text": {
            "name": "analyse_text",
            "location": 1624,
            "return": [
                "float",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "TeaTemplateLexer.__init__": {
            "name": "__init__",
            "location": 1668,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeaTemplateLexer.analyse_text": {
            "name": "analyse_text",
            "location": 1672,
            "return": [
                "float",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "LassoHtmlLexer.__init__": {
            "name": "__init__",
            "location": 1699,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LassoHtmlLexer.analyse_text": {
            "name": "analyse_text",
            "location": 1702,
            "return": [
                "float",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Union[str, bytes]"
                ]
            }
        },
        "LassoXmlLexer.__init__": {
            "name": "__init__",
            "location": 1723,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LassoXmlLexer.analyse_text": {
            "name": "analyse_text",
            "location": 1726,
            "return": [
                "float",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Union[str, bytes]"
                ]
            }
        },
        "LassoCssLexer.__init__": {
            "name": "__init__",
            "location": 1746,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LassoCssLexer.analyse_text": {
            "name": "analyse_text",
            "location": 1750,
            "return": [
                "float",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Set[str]",
                    "int"
                ]
            }
        },
        "LassoJavascriptLexer.__init__": {
            "name": "__init__",
            "location": 1774,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LassoJavascriptLexer.analyse_text": {
            "name": "analyse_text",
            "location": 1779,
            "return": [
                "float",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "HandlebarsHtmlLexer.__init__": {
            "name": "__init__",
            "location": 1848,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YamlJinjaLexer.__init__": {
            "name": "__init__",
            "location": 1867,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwigHtmlLexer.__init__": {
            "name": "__init__",
            "location": 2173,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/testing.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/text.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/textedit.py": {
        "VimLexer.__init__": {
            "name": "__init__",
            "location": 123,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VimLexer.is_in": {
            "name": "is_in",
            "location": 131,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "w": [
                    "list",
                    "List[List[T]]"
                ],
                "mapping": [
                    "dict",
                    "List[T]"
                ]
            }
        },
        "VimLexer.get_tokens_unprocessed": {
            "name": "get_tokens_unprocessed",
            "location": 154,
            "return": [
                "",
                "typing.Generator[tuple]",
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Sequence[int]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/textfmts.py": {
        "HttpLexer.header_callback": {
            "name": "header_callback",
            "location": 125,
            "return": [
                "",
                "typing.Generator[tuple]",
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[tuple[typing.Literal]]"
            ],
            "arguments": {
                "self": [],
                "match": [
                    "str",
                    "bool",
                    "type"
                ]
            }
        },
        "HttpLexer.continuous_header_callback": {
            "name": "continuous_header_callback",
            "location": 138,
            "return": [
                "",
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[tuple[typing.Literal]]"
            ],
            "arguments": {
                "self": [],
                "match": [
                    "str",
                    "Pattern",
                    "List[Dict[str, Any]]",
                    "Dict[str, str]"
                ]
            }
        },
        "HttpLexer.content_callback": {
            "name": "content_callback",
            "location": 143,
            "return": [
                "typing.Generator[tuple]",
                "Union[tuple, list]",
                "None",
                "Dict[str, Any]",
                "typing.Generator[tuple[typing.Text]]",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "match": [
                    "str",
                    "int"
                ]
            }
        },
        "HttpLexer.analyse_text": {
            "name": "analyse_text",
            "location": 190,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Iterable[Any]]",
                "int",
                "type",
                "Optional[Match]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/theorem.py": {
        "CoqLexer.analyse_text": {
            "name": "analyse_text",
            "location": 156,
            "return": [
                "bool"
            ],
            "arguments": {
                "text": []
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/urbi.py": {
        "UrbiscriptLexer.blob_callback": {
            "name": "blob_callback",
            "location": 39,
            "return": [
                "typing.Generator[tuple]",
                "Union[tuple, list]",
                "None",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "lexer": [
                    "str"
                ],
                "match": [
                    "str",
                    "int"
                ],
                "ctx": [
                    "bool",
                    "List[str]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/web.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/webmisc.py": {
        "XQueryLexer.punctuation_root_callback": {
            "name": "punctuation_root_callback",
            "location": 118,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "lexer": [
                    "str"
                ],
                "match": [],
                "ctx": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "XQueryLexer.operator_root_callback": {
            "name": "operator_root_callback",
            "location": 124,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "lexer": [
                    "str"
                ],
                "match": [],
                "ctx": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "XQueryLexer.popstate_tag_callback": {
            "name": "popstate_tag_callback",
            "location": 130,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "lexer": [],
                "match": [
                    "Callable",
                    "str"
                ],
                "ctx": [
                    "dict"
                ]
            }
        },
        "XQueryLexer.popstate_xmlcomment_callback": {
            "name": "popstate_xmlcomment_callback",
            "location": 135,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "lexer": [],
                "match": [
                    "Dict[str, Any]",
                    "dict",
                    "Optional[int]",
                    "bytes"
                ],
                "ctx": [
                    "List[str]",
                    "list"
                ]
            }
        },
        "XQueryLexer.popstate_kindtest_callback": {
            "name": "popstate_kindtest_callback",
            "location": 140,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "lexer": [
                    "Type[T]"
                ],
                "match": [
                    "Tuple[int]",
                    "Dict[str, Any]",
                    "bool",
                    "dict",
                    "str"
                ],
                "ctx": [
                    "list",
                    "set"
                ]
            }
        },
        "XQueryLexer.popstate_callback": {
            "name": "popstate_callback",
            "location": 155,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "lexer": [
                    "list"
                ],
                "match": [
                    "str",
                    "Sequence[Tuple[float, Any]]",
                    "Dict[str, int]",
                    "Pattern"
                ],
                "ctx": []
            }
        },
        "XQueryLexer.pushstate_element_content_starttag_callback": {
            "name": "pushstate_element_content_starttag_callback",
            "location": 168,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "lexer": [
                    "str",
                    "Callable[[str], str]",
                    "Iterable[str]"
                ],
                "match": [
                    "str",
                    "Callable"
                ],
                "ctx": []
            }
        },
        "XQueryLexer.pushstate_cdata_section_callback": {
            "name": "pushstate_cdata_section_callback",
            "location": 174,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "lexer": [
                    "bool"
                ],
                "match": [
                    "Dict[str, Any]",
                    "dict",
                    "Optional[int]",
                    "bytes"
                ],
                "ctx": [
                    "list"
                ]
            }
        },
        "XQueryLexer.pushstate_starttag_callback": {
            "name": "pushstate_starttag_callback",
            "location": 180,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "lexer": [
                    "bool"
                ],
                "match": [
                    "str",
                    "Callable"
                ],
                "ctx": [
                    "list"
                ]
            }
        },
        "XQueryLexer.pushstate_operator_order_callback": {
            "name": "pushstate_operator_order_callback",
            "location": 186,
            "return": [
                "",
                "typing.Generator[tuple]",
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {
                "lexer": [
                    "Callable[[str], str]",
                    "str"
                ],
                "match": [
                    "str",
                    "TypeError",
                    "Sequence[Tuple[float, Any]]",
                    "Dict[str, int]",
                    "int"
                ],
                "ctx": [
                    "bool",
                    "Type",
                    "dict"
                ]
            }
        },
        "XQueryLexer.pushstate_operator_root_validate": {
            "name": "pushstate_operator_root_validate",
            "location": 194,
            "return": [
                "",
                "typing.Generator[tuple]",
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {
                "lexer": [
                    "str",
                    "Callable[[str], str]",
                    "Type[T]"
                ],
                "match": [
                    "str",
                    "TypeError",
                    "Sequence[Tuple[float, Any]]",
                    "int"
                ],
                "ctx": [
                    "bool",
                    "str"
                ]
            }
        },
        "XQueryLexer.pushstate_operator_root_validate_withmode": {
            "name": "pushstate_operator_root_validate_withmode",
            "location": 202,
            "return": [
                "",
                "typing.Generator[tuple]",
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {
                "lexer": [
                    "str",
                    "Callable[[str], str]",
                    "Type[T]"
                ],
                "match": [
                    "str",
                    "TypeError",
                    "Sequence[Tuple[float, Any]]",
                    "int"
                ],
                "ctx": [
                    "bool",
                    "str"
                ]
            }
        },
        "XQueryLexer.pushstate_operator_processing_instruction_callback": {
            "name": "pushstate_operator_processing_instruction_callback",
            "location": 210,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "lexer": [
                    "Callable[[str], str]",
                    "str"
                ],
                "match": [
                    "Dict[str, Any]",
                    "dict",
                    "Optional[int]",
                    "bytes"
                ],
                "ctx": []
            }
        },
        "XQueryLexer.pushstate_element_content_processing_instruction_callback": {
            "name": "pushstate_element_content_processing_instruction_callback",
            "location": 216,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "lexer": [
                    "str",
                    "Callable[[str], str]",
                    "Iterable[str]"
                ],
                "match": [
                    "Dict[str, Any]",
                    "Optional[int]",
                    "bool"
                ],
                "ctx": []
            }
        },
        "XQueryLexer.pushstate_element_content_cdata_section_callback": {
            "name": "pushstate_element_content_cdata_section_callback",
            "location": 222,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "lexer": [
                    "str",
                    "Callable[[str], str]",
                    "Iterable[str]"
                ],
                "match": [
                    "Dict[str, Any]",
                    "Optional[int]",
                    "bool"
                ],
                "ctx": []
            }
        },
        "XQueryLexer.pushstate_operator_cdata_section_callback": {
            "name": "pushstate_operator_cdata_section_callback",
            "location": 228,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "lexer": [
                    "Callable[[str], str]",
                    "str"
                ],
                "match": [
                    "Dict[str, Any]",
                    "dict",
                    "Optional[int]",
                    "bytes"
                ],
                "ctx": []
            }
        },
        "XQueryLexer.pushstate_element_content_xmlcomment_callback": {
            "name": "pushstate_element_content_xmlcomment_callback",
            "location": 234,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "lexer": [
                    "str",
                    "Callable[[str], str]",
                    "Iterable[str]"
                ],
                "match": [
                    "Dict[str, Any]",
                    "Optional[int]",
                    "bool"
                ],
                "ctx": []
            }
        },
        "XQueryLexer.pushstate_operator_xmlcomment_callback": {
            "name": "pushstate_operator_xmlcomment_callback",
            "location": 240,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "lexer": [
                    "Callable[[str], str]",
                    "str"
                ],
                "match": [
                    "Dict[str, Any]",
                    "dict",
                    "Optional[int]",
                    "bytes"
                ],
                "ctx": []
            }
        },
        "XQueryLexer.pushstate_kindtest_callback": {
            "name": "pushstate_kindtest_callback",
            "location": 246,
            "return": [
                "",
                "typing.Generator[tuple]",
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {
                "lexer": [
                    "Callable[[str], str]",
                    "str"
                ],
                "match": [
                    "str",
                    "TypeError",
                    "Sequence[Tuple[float, Any]]",
                    "Dict[str, int]",
                    "int"
                ],
                "ctx": []
            }
        },
        "XQueryLexer.pushstate_operator_kindtestforpi_callback": {
            "name": "pushstate_operator_kindtestforpi_callback",
            "location": 254,
            "return": [
                "",
                "typing.Generator[tuple]",
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {
                "lexer": [
                    "Callable[[str], str]",
                    "str"
                ],
                "match": [
                    "str",
                    "TypeError",
                    "Sequence[Tuple[float, Any]]",
                    "Dict[str, int]",
                    "int"
                ],
                "ctx": []
            }
        },
        "XQueryLexer.pushstate_operator_kindtest_callback": {
            "name": "pushstate_operator_kindtest_callback",
            "location": 262,
            "return": [
                "",
                "typing.Generator[tuple]",
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {
                "lexer": [
                    "Callable[[str], str]",
                    "str"
                ],
                "match": [
                    "str",
                    "TypeError",
                    "Sequence[Tuple[float, Any]]",
                    "Dict[str, int]",
                    "int"
                ],
                "ctx": []
            }
        },
        "XQueryLexer.pushstate_occurrenceindicator_kindtest_callback": {
            "name": "pushstate_occurrenceindicator_kindtest_callback",
            "location": 270,
            "return": [
                "",
                "typing.Generator[tuple]",
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {
                "lexer": [
                    "Callable[[str], str]",
                    "str"
                ],
                "match": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ],
                "ctx": []
            }
        },
        "XQueryLexer.pushstate_operator_starttag_callback": {
            "name": "pushstate_operator_starttag_callback",
            "location": 278,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "lexer": [
                    "Callable[[str], str]",
                    "str"
                ],
                "match": [
                    "str",
                    "Callable"
                ],
                "ctx": []
            }
        },
        "XQueryLexer.pushstate_operator_root_callback": {
            "name": "pushstate_operator_root_callback",
            "location": 284,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "lexer": [
                    "str",
                    "Callable[[str], str]",
                    "Type[T]"
                ],
                "match": [
                    "Sequence[Tuple[float, Any]]",
                    "Pattern",
                    "Dict[str, int]",
                    "str"
                ],
                "ctx": [
                    "bool",
                    "str"
                ]
            }
        },
        "XQueryLexer.pushstate_operator_root_construct_callback": {
            "name": "pushstate_operator_root_construct_callback",
            "location": 290,
            "return": [
                "",
                "typing.Generator[tuple]",
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {
                "lexer": [
                    "str",
                    "Callable[[str], str]",
                    "Type[T]"
                ],
                "match": [
                    "str",
                    "TypeError",
                    "Sequence[Tuple[float, Any]]",
                    "int"
                ],
                "ctx": [
                    "bool",
                    "str"
                ]
            }
        },
        "XQueryLexer.pushstate_root_callback": {
            "name": "pushstate_root_callback",
            "location": 298,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "lexer": [
                    "List[int]"
                ],
                "match": [],
                "ctx": []
            }
        },
        "XQueryLexer.pushstate_operator_attribute_callback": {
            "name": "pushstate_operator_attribute_callback",
            "location": 305,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "lexer": [
                    "str"
                ],
                "match": [
                    "dict",
                    "type",
                    "bool",
                    "Union[str, List]"
                ],
                "ctx": []
            }
        },
        "XQueryLexer.pushstate_operator_callback": {
            "name": "pushstate_operator_callback",
            "location": 310,
            "return": [
                "",
                "typing.Generator[tuple]",
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {
                "lexer": [
                    "Callable[[str], str]",
                    "str"
                ],
                "match": [
                    "str",
                    "TypeError",
                    "Sequence[Tuple[float, Any]]",
                    "Dict[str, int]",
                    "int"
                ],
                "ctx": [
                    "str",
                    "Callable"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/_asy_builtins.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/_cl_builtins.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/_cocoa_builtins.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/_lasso_builtins.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/_lua_builtins.py": {
        "module_callbacks": {
            "name": "module_callbacks",
            "location": 158,
            "return": [
                "bool",
                "dict[typing.Text, ]"
            ],
            "arguments": {}
        },
        "get_newest_version": {
            "name": "get_newest_version",
            "location": 197,
            "return": [
                "str",
                "float",
                "bool"
            ],
            "arguments": {}
        },
        "get_lua_functions": {
            "name": "get_lua_functions",
            "location": 205,
            "return": [
                "list",
                "type",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "version": [
                    "bool",
                    "str",
                    "Sequence[Dict[str, str]]",
                    "List[int]"
                ]
            }
        },
        "get_function_module": {
            "name": "get_function_module",
            "location": 215,
            "return": [
                "typing.Text",
                "str",
                "List[str]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "regenerate": {
            "name": "regenerate",
            "location": 224,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "TextIO",
                    "bool"
                ],
                "modules": [
                    "int",
                    "Union[list, dict]",
                    "str",
                    "IO",
                    "Dict[str, Any]"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 237,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "module_callbacks.is_in_coroutine_module": {
            "name": "is_in_coroutine_module",
            "location": 159,
            "return": [
                "str",
                "type",
                "Optional[str]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "dict",
                    "type"
                ]
            }
        },
        "module_callbacks.is_in_modules_module": {
            "name": "is_in_modules_module",
            "location": 162,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "float"
                ]
            }
        },
        "module_callbacks.is_in_string_module": {
            "name": "is_in_string_module",
            "location": 168,
            "return": [
                "str",
                "Type[T]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "dict",
                    "type"
                ]
            }
        },
        "module_callbacks.is_in_table_module": {
            "name": "is_in_table_module",
            "location": 171,
            "return": [
                "bool",
                "Union[str, List[str]]",
                "Mapping"
            ],
            "arguments": {
                "name": [
                    "str",
                    "dict"
                ]
            }
        },
        "module_callbacks.is_in_math_module": {
            "name": "is_in_math_module",
            "location": 174,
            "return": [
                "str",
                "type",
                "Optional[str]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "dict",
                    "type"
                ]
            }
        },
        "module_callbacks.is_in_io_module": {
            "name": "is_in_io_module",
            "location": 177,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "dict",
                    "type",
                    "set"
                ]
            }
        },
        "module_callbacks.is_in_os_module": {
            "name": "is_in_os_module",
            "location": 180,
            "return": [
                "str",
                "Optional[str]",
                "Optional[bool]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "dict",
                    "type"
                ]
            }
        },
        "module_callbacks.is_in_debug_module": {
            "name": "is_in_debug_module",
            "location": 183,
            "return": [
                "str",
                "type"
            ],
            "arguments": {
                "name": [
                    "str",
                    "type",
                    "set",
                    "dict",
                    "Tuple[str, int]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/_mapping.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/_mql_builtins.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/_openedge_builtins.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/_php_builtins.py": {
        "get_php_functions": {
            "name": "get_php_functions",
            "location": 4694,
            "return": [
                "dict[, list]",
                "str",
                "Optional[str]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "get_php_references": {
            "name": "get_php_references",
            "location": 4727,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {}
        },
        "regenerate": {
            "name": "regenerate",
            "location": 4736,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "TextIO",
                    "bool"
                ],
                "modules": [
                    "int",
                    "Union[list, dict]",
                    "str",
                    "IO",
                    "Dict[str, Any]"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 4748,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/_postgres_builtins.py": {
        "update_myself": {
            "name": "update_myself",
            "location": 525,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "parse_keywords": {
            "name": "parse_keywords",
            "location": 535,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "f": [
                    "Callable"
                ]
            }
        },
        "parse_datatypes": {
            "name": "parse_datatypes",
            "location": 548,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "parse_pseudos": {
            "name": "parse_pseudos",
            "location": 576,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "f": [
                    "Callable[..., None]",
                    "bool",
                    "float",
                    "IO[bytes]",
                    "Callable",
                    "util.Unary[V, N]"
                ]
            }
        },
        "update_consts": {
            "name": "update_consts",
            "location": 604,
            "return": [
                ""
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bool"
                ],
                "constname": [
                    "str",
                    "Optional[str]",
                    "Iterable[str]",
                    "bool"
                ],
                "content": [
                    "str",
                    "Union[str, List]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/_scilab_builtins.py": {
        "extract_completion": {
            "name": "extract_completion",
            "location": 3061,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "var_type": [
                    "Type[T]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/_sourcemod_builtins.py": {
        "get_version": {
            "name": "get_version",
            "location": 1117,
            "return": [
                "str",
                "float",
                "Optional[int]",
                "Optional[Dict]"
            ],
            "arguments": {}
        },
        "get_sm_functions": {
            "name": "get_sm_functions",
            "location": 1126,
            "return": [
                "list",
                "type",
                "bool",
                "List[str]"
            ],
            "arguments": {}
        },
        "regenerate": {
            "name": "regenerate",
            "location": 1136,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bytes"
                ],
                "natives": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 1149,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/_stan_builtins.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/_vim_builtins.py": {
        "_getauto": {
            "name": "_getauto",
            "location": 15,
            "return": [
                "tuple[tuple[typing.Text]]",
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]",
                "str",
                "dict"
            ],
            "arguments": {}
        },
        "_getcommand": {
            "name": "_getcommand",
            "location": 110,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]",
                "str",
                "dict"
            ],
            "arguments": {}
        },
        "_getoption": {
            "name": "_getoption",
            "location": 677,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]",
                "str",
                "dict"
            ],
            "arguments": {}
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/lexers/__init__.py": {
        "_fn_matches": {
            "name": "_fn_matches",
            "location": 31,
            "return": [
                "str",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "List[str]"
                ],
                "glob": [
                    "dict",
                    "Mapping[str, Any]"
                ]
            }
        },
        "_load_lexers": {
            "name": "_load_lexers",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "module_name": [
                    "Optional[str]",
                    "str",
                    "Optional[Hashable]",
                    "static_frame.core.util.IndexInitializer",
                    "bool"
                ]
            }
        },
        "get_all_lexers": {
            "name": "get_all_lexers",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "find_lexer_class": {
            "name": "find_lexer_class",
            "location": 57,
            "return": [
                "bytes",
                "str",
                "type"
            ],
            "arguments": {
                "name": [
                    "str",
                    "mypy.types.CallableType"
                ]
            }
        },
        "get_lexer_by_name": {
            "name": "get_lexer_by_name",
            "location": 75,
            "return": [
                "bool",
                "audiopyle.lib.models.plugin.VampyPlugin"
            ],
            "arguments": {
                "_alias": [
                    "dict",
                    "str",
                    "bool"
                ]
            }
        },
        "find_lexer_class_for_filename": {
            "name": "find_lexer_class_for_filename",
            "location": 96,
            "return": [
                "str",
                "bool",
                "Type",
                "Optional[str]"
            ],
            "arguments": {
                "_fn": [
                    "str",
                    "bool",
                    "list",
                    "Union[str, Pattern[str]]"
                ],
                "code": [
                    "str",
                    "bool",
                    "list",
                    "Union[str, Pattern[str]]"
                ]
            }
        },
        "get_lexer_for_filename": {
            "name": "get_lexer_for_filename",
            "location": 139,
            "return": [
                "str",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "_fn": [
                    "str"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "get_lexer_for_mimetype": {
            "name": "get_lexer_for_mimetype",
            "location": 153,
            "return": [
                "str",
                "bool",
                "audiopyle.lib.models.plugin.VampyPlugin"
            ],
            "arguments": {
                "_mime": [
                    "str",
                    "list",
                    "Mapping[str, T]",
                    "float",
                    "List[str]"
                ]
            }
        },
        "_iter_lexerclasses": {
            "name": "_iter_lexerclasses",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "plugins": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "guess_lexer_for_filename": {
            "name": "guess_lexer_for_filename",
            "location": 181,
            "return": [
                "Optional[str]",
                "Callable",
                "apistar.types.WSGIEnviron",
                "dict",
                "int",
                "str"
            ],
            "arguments": {
                "_fn": [
                    "str",
                    "bool"
                ],
                "_text": [
                    "str",
                    "bool"
                ]
            }
        },
        "guess_lexer": {
            "name": "guess_lexer",
            "location": 232,
            "return": [
                "Optional[int]",
                "Optional[List[Callable]]",
                "str"
            ],
            "arguments": {
                "_text": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "find_lexer_class_for_filename.get_rating": {
            "name": "get_rating",
            "location": 121,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "info": [
                    "str",
                    "List[List[str]]",
                    "Exception"
                ]
            }
        },
        "guess_lexer_for_filename.type_sort": {
            "name": "type_sort",
            "location": 220,
            "return": [
                "Type[BaseException]",
                "Type",
                "pyspark.sql.types.DataType",
                "str",
                "list"
            ],
            "arguments": {
                "t": [
                    "mypy.types.CallableArgument"
                ]
            }
        },
        "_automodule.__getattr__": {
            "name": "__getattr__",
            "location": 259,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pygments/all/pygments/styles/algol.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/styles/algol_nu.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/styles/arduino.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/styles/autumn.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/styles/borland.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/styles/bw.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/styles/colorful.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/styles/default.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/styles/emacs.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/styles/friendly.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/styles/fruity.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/styles/igor.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/styles/lovelace.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/styles/manni.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/styles/monokai.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/styles/murphy.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/styles/native.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/styles/paraiso_dark.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/styles/paraiso_light.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/styles/pastie.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/styles/perldoc.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/styles/rrt.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/styles/tango.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/styles/trac.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/styles/vim.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/styles/vs.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/styles/xcode.py": {},
    "devhost-master/sublime-packages/pygments/all/pygments/styles/__init__.py": {
        "get_style_by_name": {
            "name": "get_style_by_name",
            "location": 47,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "get_all_styles": {
            "name": "get_all_styles",
            "location": 71,
            "return": [
                "",
                "typing.Generator[typing.Text]",
                "typing.Generator"
            ],
            "arguments": {}
        }
    },
    "devhost-master/sublime-packages/python-jinja2/all/jinja2/bccache.py": {
        "marshal_dump": {
            "name": "marshal_dump",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "code": [
                    "bytes",
                    "str",
                    "dict"
                ],
                "f": [
                    "str",
                    "Union[str, bytes]"
                ]
            }
        },
        "marshal_load": {
            "name": "marshal_load",
            "location": 42,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "f": [
                    "Tuple[int, int]",
                    "memoryview",
                    "List[float]"
                ]
            }
        },
        "Bucket.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "str",
                    "int",
                    "Set[str]"
                ],
                "key": [
                    "Dict[str, Any]",
                    "bytes",
                    "T",
                    "str",
                    "Dict[str, str]",
                    "dict"
                ],
                "checksum": [
                    "str",
                    "Union[Literal, str]",
                    "Dict[str, str]",
                    "Optional[str]"
                ]
            }
        },
        "Bucket.reset": {
            "name": "reset",
            "location": 75,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bucket.load_bytecode": {
            "name": "load_bytecode",
            "location": 79,
            "return": [
                "None",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "bool",
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Bucket.write_bytecode": {
            "name": "write_bytecode",
            "location": 98,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[..., int]",
                    "memoryview",
                    "Optional[str]",
                    "utils.CWLObjectType",
                    "dict",
                    "str"
                ]
            }
        },
        "Bucket.bytecode_from_string": {
            "name": "bytecode_from_string",
            "location": 106,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str",
                    "bytes",
                    "Union[str, bytes]",
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "Bucket.bytecode_to_string": {
            "name": "bytecode_to_string",
            "location": 110,
            "return": [
                "str",
                "OrderedDict",
                "list",
                "Dict[str, Any]",
                "Optional[str]",
                "Match"
            ],
            "arguments": {
                "self": []
            }
        },
        "BytecodeCache.load_bytecode": {
            "name": "load_bytecode",
            "location": 146,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "List[str]",
                    "str",
                    "bool",
                    "Optional[float]"
                ]
            }
        },
        "BytecodeCache.dump_bytecode": {
            "name": "dump_bytecode",
            "location": 153,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "int",
                    "str",
                    "Callable",
                    "bool",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "BytecodeCache.clear": {
            "name": "clear",
            "location": 160,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BytecodeCache.get_cache_key": {
            "name": "get_cache_key",
            "location": 166,
            "return": [
                "int",
                "str",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict"
                ],
                "filename": [
                    "None",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "BytecodeCache.get_source_checksum": {
            "name": "get_source_checksum",
            "location": 176,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Union[os.PathLike, str]"
                ]
            }
        },
        "BytecodeCache.get_bucket": {
            "name": "get_bucket",
            "location": 180,
            "return": [
                "str",
                "Bucket"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "filename": [
                    "str"
                ],
                "source": [
                    "str",
                    "int",
                    "raiden.utils.Address"
                ]
            }
        },
        "BytecodeCache.set_bucket": {
            "name": "set_bucket",
            "location": 190,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str",
                    "List[Tuple[int, int]]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "FileSystemBytecodeCache.__init__": {
            "name": "__init__",
            "location": 213,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "None",
                    "Optional[str]",
                    "bool",
                    "Optional[bool]",
                    "Iterable",
                    "str"
                ],
                "pattern": [
                    "typing.Text",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "FileSystemBytecodeCache._get_default_cache_dir": {
            "name": "_get_default_cache_dir",
            "location": 219,
            "return": [
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileSystemBytecodeCache._get_cache_filename": {
            "name": "_get_cache_filename",
            "location": 260,
            "return": [
                "str",
                "cmk.utils.type_defs.HostName",
                "os.PathLike"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ]
            }
        },
        "FileSystemBytecodeCache.load_bytecode": {
            "name": "load_bytecode",
            "location": 263,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ]
            }
        },
        "FileSystemBytecodeCache.dump_bytecode": {
            "name": "dump_bytecode",
            "location": 271,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "FileSystemBytecodeCache.clear": {
            "name": "clear",
            "location": 278,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemcachedBytecodeCache.__init__": {
            "name": "__init__",
            "location": 337,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "bool",
                    "bytes",
                    "str"
                ],
                "prefix": [
                    "typing.Text",
                    "bool",
                    "bytes",
                    "str"
                ],
                "timeout": [
                    "None",
                    "bool",
                    "bytes",
                    "str"
                ],
                "ignore_memcache_errors": [
                    "bool",
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "MemcachedBytecodeCache.load_bytecode": {
            "name": "load_bytecode",
            "location": 344,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str",
                    "Dict[str, Union[str, int]]"
                ]
            }
        },
        "MemcachedBytecodeCache.dump_bytecode": {
            "name": "dump_bytecode",
            "location": 354,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "FileSystemBytecodeCache._get_default_cache_dir._unsafe_dir": {
            "name": "_unsafe_dir",
            "location": 220,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "devhost-master/sublime-packages/python-jinja2/all/jinja2/compiler.py": {
        "unoptimize_before_dead_code": {
            "name": "unoptimize_before_dead_code",
            "location": 43,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "generate": {
            "name": "generate",
            "location": 55,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "node": [
                    "mypy.nodes.Expression",
                    "Optional[List[int]]",
                    "int",
                    "bool"
                ],
                "environment": [
                    "str",
                    "int"
                ],
                "name": [
                    "str",
                    "int"
                ],
                "filename": [
                    "str",
                    "int"
                ],
                "stream": [
                    "None",
                    "str",
                    "Optional[str]",
                    "bytes",
                    "Tuple[type]",
                    "float",
                    "int"
                ],
                "defer_init": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "has_safe_repr": {
            "name": "has_safe_repr",
            "location": 67,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "int",
                    "float",
                    "T"
                ]
            }
        },
        "find_undeclared": {
            "name": "find_undeclared",
            "location": 89,
            "return": [
                "mypy.nodes.FuncBase",
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "nodes": [
                    "str",
                    "Set[str]",
                    "List[str]"
                ],
                "names": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "unoptimize_before_dead_code.f": {
            "name": "f",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "Identifiers.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Identifiers.add_special": {
            "name": "add_special",
            "location": 124,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "Identifiers.is_declared": {
            "name": "is_declared",
            "location": 129,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Identifiers.copy": {
            "name": "copy",
            "location": 135,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Frame.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "eval_ctx": [
                    "str",
                    "Dict[str, Any]",
                    "IO",
                    "bytes"
                ],
                "parent": [
                    "str",
                    "None"
                ]
            }
        },
        "Frame.copy": {
            "name": "copy",
            "location": 185,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Frame.inspect": {
            "name": "inspect",
            "location": 193,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "astroid.nodes",
                    "mypy.nodes.Node",
                    "List[int]"
                ]
            }
        },
        "Frame.find_shadowed": {
            "name": "find_shadowed",
            "location": 202,
            "return": [
                "float",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "extra": [
                    "tuple",
                    "str",
                    "int",
                    "Iterable[list]"
                ]
            }
        },
        "Frame.inner": {
            "name": "inner",
            "location": 211,
            "return": [
                "Frame",
                "str",
                "dict",
                "bool",
                "BaseException"
            ],
            "arguments": {
                "self": []
            }
        },
        "Frame.soft": {
            "name": "soft",
            "location": 215,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DependencyFinderVisitor.__init__": {
            "name": "__init__",
            "location": 234,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DependencyFinderVisitor.visit_Filter": {
            "name": "visit_Filter",
            "location": 238,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.GlobalDecl",
                    "mypy.nodes.NonlocalDecl"
                ]
            }
        },
        "DependencyFinderVisitor.visit_Test": {
            "name": "visit_Test",
            "location": 242,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.OperatorAssignmentStmt",
                    "mypy.nodes.Import",
                    "mypy.nodes.Expression",
                    "mypy.nodes.ImporAll"
                ]
            }
        },
        "DependencyFinderVisitor.visit_Block": {
            "name": "visit_Block",
            "location": 246,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.EllipsisExpr",
                    "mypy.nodes.BreakStmt"
                ]
            }
        },
        "UndeclaredNameVisitor.__init__": {
            "name": "__init__",
            "location": 256,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "names": [
                    "bytes",
                    "str",
                    "int",
                    "List[T]",
                    "Optional[List[dict]]",
                    "list",
                    "Set[str]"
                ]
            }
        },
        "UndeclaredNameVisitor.visit_Name": {
            "name": "visit_Name",
            "location": 260,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.Expression",
                    "Optional[mypy.nodes.SymbolTableNode]"
                ]
            }
        },
        "UndeclaredNameVisitor.visit_Block": {
            "name": "visit_Block",
            "location": 268,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.EllipsisExpr",
                    "mypy.nodes.BreakStmt"
                ]
            }
        },
        "FrameIdentifierVisitor.__init__": {
            "name": "__init__",
            "location": 275,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "identifiers": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "FrameIdentifierVisitor.visit_Name": {
            "name": "visit_Name",
            "location": 278,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.Block"
                ]
            }
        },
        "FrameIdentifierVisitor.visit_If": {
            "name": "visit_If",
            "location": 288,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "FrameIdentifierVisitor.visit_Macro": {
            "name": "visit_Macro",
            "location": 319,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.ClassDef",
                    "mypy.nodes.OverloadedFuncDef"
                ]
            }
        },
        "FrameIdentifierVisitor.visit_Import": {
            "name": "visit_Import",
            "location": 322,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.Expression",
                    "mypy.nodes.ImportAll",
                    "mypy.nodes.ImporAll"
                ]
            }
        },
        "FrameIdentifierVisitor.visit_FromImport": {
            "name": "visit_FromImport",
            "location": 326,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.Import",
                    "mypy.nodes.ClassDef",
                    "mypy.nodes.OperatorAssignmentStmt"
                ]
            }
        },
        "FrameIdentifierVisitor.visit_Assign": {
            "name": "visit_Assign",
            "location": 334,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.ListComprehension",
                    "mypy.nodes.ImporAll",
                    "mypy.nodes.ImportAll"
                ]
            }
        },
        "FrameIdentifierVisitor.visit_For": {
            "name": "visit_For",
            "location": 339,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.OperatorAssignmentStmt",
                    "mypy.nodes.Expression",
                    "parsimonious.nodes.Node",
                    "Type[T]"
                ]
            }
        },
        "FrameIdentifierVisitor.visit_CallBlock": {
            "name": "visit_CallBlock",
            "location": 345,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.NamedTupleExpr",
                    "parsimonious.nodes.Node",
                    "mypy.nodes.TupleExpr"
                ]
            }
        },
        "FrameIdentifierVisitor.visit_FilterBlock": {
            "name": "visit_FilterBlock",
            "location": 348,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.NamedTupleExpr",
                    "mypy.nodes.StarExpr",
                    "mypy.nodes.PromoteExpr"
                ]
            }
        },
        "FrameIdentifierVisitor.visit_AssignBlock": {
            "name": "visit_AssignBlock",
            "location": 351,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.RevealTypeExpr",
                    "mypy.nodes.StrExpr"
                ]
            }
        },
        "FrameIdentifierVisitor.visit_Scope": {
            "name": "visit_Scope",
            "location": 354,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.EllipsisExpr",
                    "mypy.nodes.BreakStmt",
                    "mypy.nodes.ContinueStmt"
                ]
            }
        },
        "FrameIdentifierVisitor.visit_Block": {
            "name": "visit_Block",
            "location": 357,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.EllipsisExpr",
                    "mypy.nodes.BreakStmt"
                ]
            }
        },
        "CodeGenerator.__init__": {
            "name": "__init__",
            "location": 370,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "bool",
                    "str",
                    "Optional[Mapping]",
                    "Mapping[str, Any]"
                ],
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "filename": [
                    "str",
                    "Dict[str, str]",
                    "bytes"
                ],
                "stream": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Sequence[str]"
                ],
                "defer_init": [
                    "bool",
                    "str",
                    "Optional[Mapping]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "CodeGenerator.fail": {
            "name": "fail",
            "location": 425,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "Union[str, List[str]]"
                ],
                "lineno": [
                    "str",
                    "Union[str, List[str]]"
                ]
            }
        },
        "CodeGenerator.temporary_identifier": {
            "name": "temporary_identifier",
            "location": 429,
            "return": [
                "typing.Text",
                "dict",
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodeGenerator.buffer": {
            "name": "buffer",
            "location": 434,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "CodeGenerator.return_buffer_contents": {
            "name": "return_buffer_contents",
            "location": 439,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "int",
                    "str",
                    "Set[str]"
                ]
            }
        },
        "CodeGenerator.indent": {
            "name": "indent",
            "location": 455,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodeGenerator.outdent": {
            "name": "outdent",
            "location": 459,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "step": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "CodeGenerator.start_write": {
            "name": "start_write",
            "location": 463,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "int"
                ],
                "node": [
                    "list",
                    "None"
                ]
            }
        },
        "CodeGenerator.end_write": {
            "name": "end_write",
            "location": 470,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "str",
                    "list",
                    "Optional[List[str]]",
                    "bool",
                    "Optional[int]",
                    "Optional[List[Callable]]"
                ]
            }
        },
        "CodeGenerator.simple_write": {
            "name": "simple_write",
            "location": 475,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "int",
                    "List[int]"
                ],
                "frame": [
                    "int",
                    "mypy.nodes.RefExpr",
                    "mypy.nodes.Context"
                ],
                "node": [
                    "None",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "CodeGenerator.blockvisit": {
            "name": "blockvisit",
            "location": 481,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "astroid.nodes",
                    "mypy.nodes.Node",
                    "List[int]"
                ],
                "frame": [
                    "docutils.nodes.Node"
                ]
            }
        },
        "CodeGenerator.write": {
            "name": "write",
            "location": 496,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "CodeGenerator.writeline": {
            "name": "writeline",
            "location": 511,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int",
                    "str",
                    "List[str]"
                ],
                "node": [
                    "None"
                ],
                "extra": [
                    "int"
                ]
            }
        },
        "CodeGenerator.newline": {
            "name": "newline",
            "location": 516,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "None"
                ],
                "extra": [
                    "int"
                ]
            }
        },
        "CodeGenerator.signature": {
            "name": "signature",
            "location": 523,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "mypy.nodes.Var"
                ],
                "frame": [
                    "mypy.nodes.Var"
                ],
                "extra_kwargs": [
                    "None",
                    "float",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "CodeGenerator.pull_locals": {
            "name": "pull_locals",
            "location": 576,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "CodeGenerator.pull_dependencies": {
            "name": "pull_dependencies",
            "location": 581,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "List[mypy.nodes.Statement]",
                    "bool",
                    "astroid.nodes",
                    "mypy.nodes.Node"
                ]
            }
        },
        "CodeGenerator.unoptimize_scope": {
            "name": "unoptimize_scope",
            "location": 594,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "type"
                ]
            }
        },
        "CodeGenerator.push_scope": {
            "name": "push_scope",
            "location": 606,
            "return": [
                "dict",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "str",
                    "Type",
                    "Dict[str, Any]"
                ],
                "extra_vars": [
                    "tuple",
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "CodeGenerator.pop_scope": {
            "name": "pop_scope",
            "location": 628,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "aliases": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "frame": [
                    "int"
                ]
            }
        },
        "CodeGenerator.function_scoping": {
            "name": "function_scoping",
            "location": 642,
            "return": [
                "type",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.FuncDef",
                    "mypy.nodes.ClassDef",
                    "set"
                ],
                "frame": [
                    "Callable[[str, mypy.nodes.Context], None]",
                    "int",
                    "type"
                ],
                "children": [
                    "None",
                    "mypy.nodes.TypeInfo",
                    "docutils.nodes.Node"
                ],
                "find_special": [
                    "bool",
                    "Union[bool, Iterable[str]]",
                    "Iterable[str]"
                ]
            }
        },
        "CodeGenerator.macro_body": {
            "name": "macro_body",
            "location": 711,
            "return": [
                "str",
                "bool",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.ClassDef",
                    "mypy.nodes.MemberExpr",
                    "yaml.nodes.Node"
                ],
                "frame": [
                    "mypy.nodes.Expression"
                ],
                "children": [
                    "None",
                    "mypy.nodes.MypyFile",
                    "mypy.nodes.Node"
                ]
            }
        },
        "CodeGenerator.macro_def": {
            "name": "macro_def",
            "location": 735,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[str]"
                ],
                "frame": [
                    "mypy.nodes.MypyFile",
                    "astroid.nodes"
                ]
            }
        },
        "CodeGenerator.position": {
            "name": "position",
            "location": 752,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "CodeGenerator.visit_Template": {
            "name": "visit_Template",
            "location": 761,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.Expression"
                ],
                "frame": [
                    "None",
                    "mypy.nodes.RefExpr",
                    "mypy.nodes.Decorator",
                    "Optional[mypy.nodes.SymbolTable.Node]"
                ]
            }
        },
        "CodeGenerator.visit_Block": {
            "name": "visit_Block",
            "location": 860,
            "return": [
                "mypy.nodes.AssignmentStmt",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.Expression",
                    "mypy.nodes.ImportAll",
                    "mypy.nodes.ImporAll",
                    "parsimonious.nodes.Node"
                ],
                "frame": [
                    "parsimonious.nodes.Node",
                    "Sequence[Any]"
                ]
            }
        },
        "CodeGenerator.visit_Extends": {
            "name": "visit_Extends",
            "location": 879,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.Expression",
                    "mypy.nodes.Import"
                ],
                "frame": [
                    "Set[str]"
                ]
            }
        },
        "CodeGenerator.visit_Include": {
            "name": "visit_Include",
            "location": 926,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.ExecStmt",
                    "mypy.nodes.WithStmt"
                ],
                "frame": [
                    "Set[str]"
                ]
            }
        },
        "CodeGenerator.visit_Import": {
            "name": "visit_Import",
            "location": 969,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.ImporFrom"
                ],
                "frame": []
            }
        },
        "CodeGenerator.visit_FromImport": {
            "name": "visit_FromImport",
            "location": 987,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.Import"
                ],
                "frame": [
                    "mypy.nodes.Import",
                    "mypy.nodes.ClassDef"
                ]
            }
        },
        "CodeGenerator.visit_For": {
            "name": "visit_For",
            "location": 1040,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.ImporFrom",
                    "mypy.nodes.ImportAll",
                    "mypy.nodes.ImporAll",
                    "mypy.nodes.Import"
                ],
                "frame": [
                    "mypy.nodes.ExecStmt",
                    "mypy.nodes.PrintStmt"
                ]
            }
        },
        "CodeGenerator.visit_If": {
            "name": "visit_If",
            "location": 1166,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.Import",
                    "mypy.nodes.Expression"
                ],
                "frame": [
                    "parsimonious.nodes.Node",
                    "Sequence[Any]"
                ]
            }
        },
        "CodeGenerator.visit_Macro": {
            "name": "visit_Macro",
            "location": 1180,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.Expression",
                    "mypy.nodes.ImportAll",
                    "mypy.nodes.ImporAll"
                ],
                "frame": [
                    "mypy.nodes.Expression"
                ]
            }
        },
        "CodeGenerator.visit_CallBlock": {
            "name": "visit_CallBlock",
            "location": 1191,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.ImportAll",
                    "mypy.nodes.ImporAll",
                    "mypy.nodes.CallExpr"
                ],
                "frame": [
                    "mypy.nodes.MemberExpr",
                    "mypy.nodes.SymbolTableNode",
                    "mypy.nodes.IndexExpr",
                    "parsimonious.nodes.Node",
                    "mypy.nodes.ForStmt",
                    "mypy.nodes.SymbolTable.Node",
                    "mypy.nodes.TryStmt"
                ]
            }
        },
        "CodeGenerator.visit_FilterBlock": {
            "name": "visit_FilterBlock",
            "location": 1200,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.CallExpr",
                    "mypy.nodes.CastExpr",
                    "mypy.nodes.MemberExpr"
                ],
                "frame": [
                    "mypy.nodes.Expression",
                    "mypy.nodes.Decorator"
                ]
            }
        },
        "CodeGenerator.visit_ExprStmt": {
            "name": "visit_ExprStmt",
            "location": 1212,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.ImporAll",
                    "mypy.nodes.ImportAll",
                    "mypy.nodes.Import",
                    "mypy.nodes.OperatorAssignmentStmt"
                ],
                "frame": [
                    "mypy.nodes.ListComprehension",
                    "mypy.nodes.SetComprehension"
                ]
            }
        },
        "CodeGenerator.visit_Output": {
            "name": "visit_Output",
            "location": 1216,
            "return": [
                "None",
                "mypy.nodes.FuncDef",
                "Iterator[Tuple[str, str]]",
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "parsimonious.nodes.Node",
                    "Sequence[Any]"
                ],
                "frame": [
                    "str",
                    "dict",
                    "Set[str]",
                    "int",
                    "mypy.nodes.TypeInfo"
                ]
            }
        },
        "CodeGenerator.make_assignment_frame": {
            "name": "make_assignment_frame",
            "location": 1361,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "CodeGenerator.export_assigned_vars": {
            "name": "export_assigned_vars",
            "location": 1372,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "str",
                    "Iterable[T]"
                ],
                "assignment_frame": [
                    "mypy.nodes.FuncBase",
                    "Sequence[T]",
                    "Hashable",
                    "Set[str]",
                    "str"
                ]
            }
        },
        "CodeGenerator.visit_Assign": {
            "name": "visit_Assign",
            "location": 1395,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.OperatorAssignmentStmt",
                    "mypy.nodes.Import",
                    "mypy.nodes.Expression"
                ],
                "frame": [
                    "mypy.nodes.Import",
                    "bool",
                    "mypy.nodes.ImportAll"
                ]
            }
        },
        "CodeGenerator.visit_AssignBlock": {
            "name": "visit_AssignBlock",
            "location": 1403,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.SuperExpr",
                    "mypy.nodes.OperatorAssignmentStmt"
                ],
                "frame": [
                    "mypy.nodes.Decorator",
                    "int"
                ]
            }
        },
        "CodeGenerator.visit_Name": {
            "name": "visit_Name",
            "location": 1420,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.IfStmt",
                    "mypy.nodes.FuncDef"
                ],
                "frame": [
                    "mypy.nodes.IfStmt"
                ]
            }
        },
        "CodeGenerator.visit_Const": {
            "name": "visit_Const",
            "location": 1426,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.StrExpr",
                    "Set[str]"
                ],
                "frame": [
                    "mypy.nodes.EllipsisExpr",
                    "mypy.nodes.BreakStmt",
                    "mypy.nodes.ContinueStmt"
                ]
            }
        },
        "CodeGenerator.visit_TemplateData": {
            "name": "visit_TemplateData",
            "location": 1433,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.Expression",
                    "Optional[Any]"
                ],
                "frame": [
                    "str",
                    "mypy.nodes.Expression"
                ]
            }
        },
        "CodeGenerator.visit_Tuple": {
            "name": "visit_Tuple",
            "location": 1440,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.GlobalDecl",
                    "mypy.nodes.NonlocalDecl"
                ],
                "frame": []
            }
        },
        "CodeGenerator.visit_List": {
            "name": "visit_List",
            "location": 1449,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.GlobalDecl",
                    "mypy.nodes.NonlocalDecl"
                ],
                "frame": [
                    "mypy.nodes.ImportAll"
                ]
            }
        },
        "CodeGenerator.visit_Dict": {
            "name": "visit_Dict",
            "location": 1457,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.GlobalDecl",
                    "mypy.nodes.NonlocalDecl"
                ],
                "frame": [
                    "mypy.nodes.GlobalDecl",
                    "mypy.nodes.NonlocalDecl"
                ]
            }
        },
        "CodeGenerator.binop": {
            "name": "binop",
            "location": 1467,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "operator": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "interceptable": [
                    "bool",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict"
                ]
            }
        },
        "CodeGenerator.uaop": {
            "name": "uaop",
            "location": 1483,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "operator": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "interceptable": [
                    "bool",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict"
                ]
            }
        },
        "CodeGenerator.visit_Concat": {
            "name": "visit_Concat",
            "location": 1509,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "parsimonious.nodes.Node",
                    "Sequence[Any]"
                ],
                "frame": [
                    "dict"
                ]
            }
        },
        "CodeGenerator.visit_Compare": {
            "name": "visit_Compare",
            "location": 1523,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.Import",
                    "mypy.nodes.DictionaryComprehension"
                ],
                "frame": [
                    "mypy.nodes.Import",
                    "mypy.nodes.Block"
                ]
            }
        },
        "CodeGenerator.visit_Operand": {
            "name": "visit_Operand",
            "location": 1528,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.Import",
                    "mypy.nodes.OperatorAssignmentStmt"
                ],
                "frame": [
                    "mypy.nodes.Import",
                    "mypy.nodes.DictionaryComprehension"
                ]
            }
        },
        "CodeGenerator.visit_Getattr": {
            "name": "visit_Getattr",
            "location": 1532,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.Import",
                    "parsimonious.nodes.Node"
                ],
                "frame": [
                    "mypy.nodes.ListComprehension",
                    "mypy.nodes.SetComprehension"
                ]
            }
        },
        "CodeGenerator.visit_Getitem": {
            "name": "visit_Getitem",
            "location": 1537,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.ImporFrom",
                    "mypy.nodes.ImporAll",
                    "mypy.nodes.ImportAll"
                ],
                "frame": [
                    "mypy.nodes.OperatorAssignmentStmt",
                    "mypy.nodes.ImporAll",
                    "mypy.nodes.ImportAll",
                    "mypy.nodes.ImporFrom"
                ]
            }
        },
        "CodeGenerator.visit_Slice": {
            "name": "visit_Slice",
            "location": 1551,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.WhileStmt",
                    "mypy.nodes.Decorator",
                    "mypy.nodes.ForStmt"
                ],
                "frame": [
                    "mypy.nodes.ExecStmt",
                    "parsimonious.nodes.Node",
                    "mypy.nodes.WhileStmt"
                ]
            }
        },
        "CodeGenerator.visit_Filter": {
            "name": "visit_Filter",
            "location": 1561,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Optional[mypy.nodes.SymbolTableNode]",
                    "mypy.nodes.TypeInfo",
                    "dict"
                ],
                "frame": [
                    "mypy.nodes.SetComprehension",
                    "mypy.nodes.ListComprehension",
                    "mypy.nodes.Import"
                ]
            }
        },
        "CodeGenerator.visit_Test": {
            "name": "visit_Test",
            "location": 1588,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "frame": [
                    "mypy.nodes.ImporAll",
                    "mypy.nodes.ImportAll",
                    "mypy.nodes.Expression"
                ]
            }
        },
        "CodeGenerator.visit_CondExpr": {
            "name": "visit_CondExpr",
            "location": 1596,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.YieldFromExpr",
                    "mypy.nodes.ComparisonExpr",
                    "mypy.nodes.YieldExpr",
                    "mypy.nodes.LambdaExpr",
                    "mypy.nodes.UnaryExpr",
                    "mypy.nodes.SliceExpr",
                    "mypy.nodes.MemberExpr"
                ],
                "frame": [
                    "mypy.nodes.YieldFromExpr",
                    "mypy.nodes.ComparisonExpr",
                    "mypy.nodes.YieldExpr",
                    "mypy.nodes.LambdaExpr",
                    "mypy.nodes.UnaryExpr",
                    "mypy.nodes.SliceExpr",
                    "mypy.nodes.MemberExpr"
                ]
            }
        },
        "CodeGenerator.visit_Call": {
            "name": "visit_Call",
            "location": 1612,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.ImporAll",
                    "mypy.nodes.ImportAll",
                    "mypy.nodes.ImporFrom"
                ],
                "frame": [
                    "mypy.nodes.ImporAll",
                    "mypy.nodes.ImportAll",
                    "mypy.nodes.ImporFrom"
                ],
                "forward_caller": [
                    "bool",
                    "mypy.nodes.Expression",
                    "mypy.nodes.ClassDef",
                    "mypy.nodes.Context"
                ]
            }
        },
        "CodeGenerator.visit_Keyword": {
            "name": "visit_Keyword",
            "location": 1622,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.StrExpr",
                    "Set[str]"
                ],
                "frame": [
                    "mypy.nodes.Block",
                    "parsimonious.nodes.Node"
                ]
            }
        },
        "CodeGenerator.visit_MarkSafe": {
            "name": "visit_MarkSafe",
            "location": 1628,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.Import",
                    "mypy.nodes.SetComprehension"
                ],
                "frame": [
                    "mypy.nodes.Import",
                    "mypy.nodes.SetComprehension"
                ]
            }
        },
        "CodeGenerator.visit_MarkSafeIfAutoescape": {
            "name": "visit_MarkSafeIfAutoescape",
            "location": 1633,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.Import",
                    "mypy.nodes.SetComprehension"
                ],
                "frame": [
                    "mypy.nodes.Import",
                    "mypy.nodes.SetComprehension"
                ]
            }
        },
        "CodeGenerator.visit_EnvironmentAttribute": {
            "name": "visit_EnvironmentAttribute",
            "location": 1638,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.GlobalDecl",
                    "mypy.nodes.NonlocalDecl"
                ],
                "frame": [
                    "mypy.nodes.EllipsisExpr",
                    "mypy.nodes.BreakStmt",
                    "mypy.nodes.ContinueStmt"
                ]
            }
        },
        "CodeGenerator.visit_ExtensionAttribute": {
            "name": "visit_ExtensionAttribute",
            "location": 1641,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.GlobalDecl",
                    "mypy.nodes.NonlocalDecl"
                ],
                "frame": [
                    "mypy.nodes.EllipsisExpr",
                    "mypy.nodes.BreakStmt",
                    "mypy.nodes.ContinueStmt"
                ]
            }
        },
        "CodeGenerator.visit_ImportedName": {
            "name": "visit_ImportedName",
            "location": 1644,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Set[str]"
                ],
                "frame": [
                    "docutils.nodes.Element"
                ]
            }
        },
        "CodeGenerator.visit_InternalName": {
            "name": "visit_InternalName",
            "location": 1647,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.GlobalDecl",
                    "mypy.nodes.NonlocalDecl"
                ],
                "frame": [
                    "docutils.nodes.Element"
                ]
            }
        },
        "CodeGenerator.visit_ContextReference": {
            "name": "visit_ContextReference",
            "location": 1650,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "docutils.nodes.Element"
                ],
                "frame": [
                    "docutils.nodes.Element"
                ]
            }
        },
        "CodeGenerator.visit_Continue": {
            "name": "visit_Continue",
            "location": 1653,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "parsimonious.nodes.Node",
                    "Sequence[Any]"
                ],
                "frame": [
                    "mypy.nodes.EllipsisExpr",
                    "mypy.nodes.BreakStmt",
                    "mypy.nodes.ContinueStmt"
                ]
            }
        },
        "CodeGenerator.visit_Break": {
            "name": "visit_Break",
            "location": 1656,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "parsimonious.nodes.Node",
                    "Sequence[Any]"
                ],
                "frame": [
                    "mypy.nodes.EllipsisExpr",
                    "mypy.nodes.BreakStmt",
                    "mypy.nodes.ContinueStmt"
                ]
            }
        },
        "CodeGenerator.visit_Scope": {
            "name": "visit_Scope",
            "location": 1659,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.NamedTupleExpr",
                    "parsimonious.nodes.Node"
                ],
                "frame": [
                    "parsimonious.nodes.Node",
                    "Sequence[Any]"
                ]
            }
        },
        "CodeGenerator.visit_EvalContextModifier": {
            "name": "visit_EvalContextModifier",
            "location": 1667,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.ImportFrom"
                ],
                "frame": [
                    "mypy.nodes.Decorator",
                    "mypy.nodes.SetComprehension",
                    "mypy.nodes.ListComprehension"
                ]
            }
        },
        "CodeGenerator.visit_ScopedEvalContextModifier": {
            "name": "visit_ScopedEvalContextModifier",
            "location": 1678,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.Block",
                    "mypy.nodes.NameExpr"
                ],
                "frame": [
                    "mypy.nodes.PrintStmt",
                    "mypy.nodes.NameExpr",
                    "mypy.nodes.Block"
                ]
            }
        },
        "FrameIdentifierVisitor.visit_If.inner_visit": {
            "name": "inner_visit",
            "location": 295,
            "return": [
                "set",
                "mypy.nodes.SetComprehension",
                "Set[str]",
                "Sequence[object]"
            ],
            "arguments": {
                "nodes": [
                    "List[None]",
                    "docutils.nodes.Node"
                ]
            }
        },
        "CodeGenerator.binop.visitor": {
            "name": "visitor",
            "location": 1468,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "frame": []
            }
        },
        "CodeGenerator.uaop.visitor": {
            "name": "visitor",
            "location": 1484,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int",
                    "docutils.nodes.Node",
                    "str",
                    "mypy.nodes.Expression",
                    "Optional[str]"
                ],
                "frame": [
                    "int",
                    "docutils.nodes.Node",
                    "str",
                    "mypy.nodes.Expression",
                    "Optional[str]"
                ]
            }
        },
        "CodeGenerator.visit_CondExpr.write_expr2": {
            "name": "write_expr2",
            "location": 1597,
            "return": [
                "type"
            ],
            "arguments": {}
        }
    },
    "devhost-master/sublime-packages/python-jinja2/all/jinja2/constants.py": {},
    "devhost-master/sublime-packages/python-jinja2/all/jinja2/debug.py": {
        "make_frame_proxy": {
            "name": "make_frame_proxy",
            "location": 66,
            "return": [
                "TracebackFrameProxy",
                "tuple",
                "mypy.types.Type"
            ],
            "arguments": {
                "frame": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "make_traceback": {
            "name": "make_traceback",
            "location": 132,
            "return": [
                "str",
                "List[int]",
                "Optional[int]",
                "List[dict]"
            ],
            "arguments": {
                "exc_info": [
                    "cmk.utils.type_defs.HostName",
                    "Dict[str, str]",
                    "Optional[Iterable[Any]]"
                ],
                "source_hint": [
                    "None",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "dict",
                    "cmk.utils.type_defs.ServiceName",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        },
        "translate_syntax_error": {
            "name": "translate_syntax_error",
            "location": 143,
            "return": [
                "bytes",
                "Dict[str, Any]"
            ],
            "arguments": {
                "error": [
                    "str",
                    "Union[str, bytes, IO[bytes]]",
                    "Union[str, bytes]"
                ],
                "source": [
                    "None",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "translate_exception": {
            "name": "translate_exception",
            "location": 154,
            "return": [
                "ProcessedTraceback",
                "str",
                "int",
                "bool",
                "dict"
            ],
            "arguments": {
                "exc_info": [],
                "initial_skip": [
                    "int",
                    "str",
                    "reader_server.types.Feed",
                    "Dict[str, Any]"
                ]
            }
        },
        "fake_exc_info": {
            "name": "fake_exc_info",
            "location": 198,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "exc_info": [
                    "bool",
                    "Callable",
                    "List[Callable]",
                    "Optional[bool]",
                    "dict"
                ],
                "filename": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "Optional[Union[Dict, str, int, bytes]]"
                ],
                "lineno": [
                    "str",
                    "int"
                ]
            }
        },
        "_init_ugly_crap": {
            "name": "_init_ugly_crap",
            "location": 276,
            "return": [
                "str",
                "Set[str]",
                "int"
            ],
            "arguments": {}
        },
        "TracebackFrameProxy.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tb": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "TracebackFrameProxy.tb_next": {
            "name": "tb_next",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TracebackFrameProxy.set_next": {
            "name": "set_next",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "next": [
                    "str",
                    "MutableMapping",
                    "Pattern[bytes]",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "TracebackFrameProxy.is_jinja_frame": {
            "name": "is_jinja_frame",
            "location": 59,
            "return": [
                "bool",
                "str",
                "Tuple[str, int, Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TracebackFrameProxy.__getattr__": {
            "name": "__getattr__",
            "location": 62,
            "return": [
                "bool",
                "bytes",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "make_frame_proxy.operation_handler": {
            "name": "operation_handler",
            "location": 70,
            "return": [
                "bool",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "operation": [
                    "str",
                    "Callable",
                    "Optional[Union[str, Any]]",
                    "bool"
                ]
            }
        },
        "ProcessedTraceback.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[mypy.types.Type]",
                    "int",
                    "Type"
                ],
                "exc_value": [
                    "str",
                    "Exception",
                    "Callable",
                    "Optional[Callable]",
                    "raiden.utils.Any",
                    "bool"
                ],
                "frames": [
                    "str",
                    "Dict[str, Any]",
                    "List[mypy.types.Type]",
                    "bytes",
                    "bool"
                ]
            }
        },
        "ProcessedTraceback.render_as_text": {
            "name": "render_as_text",
            "location": 97,
            "return": [
                "mypy.types.CallableType",
                "mypy.types.Type",
                "str",
                "bool",
                "Iterable[int]"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "None",
                    "float",
                    "Optional[\"Outcome\"]",
                    "dict"
                ]
            }
        },
        "ProcessedTraceback.render_as_html": {
            "name": "render_as_html",
            "location": 103,
            "return": [
                "typing.Text",
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "full": [
                    "bool",
                    "str",
                    "Optional[cmk.utils.type_defs.HostAddress]"
                ]
            }
        },
        "ProcessedTraceback.is_template_syntax_error": {
            "name": "is_template_syntax_error",
            "location": 112,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessedTraceback.exc_info": {
            "name": "exc_info",
            "location": 117,
            "return": [
                "tuple",
                "str",
                "Type[Exception]",
                "Dict[str, Any]",
                "Callable[..., T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessedTraceback.standard_exc_info": {
            "name": "standard_exc_info",
            "location": 122,
            "return": [
                "tuple",
                "str",
                "mypy.types.Instance",
                "Type[Exception]",
                "Callable[..., T]",
                "Dict[str, Any]",
                "Tuple[str, Any]",
                "cmk.utils.type_defs.CheckPluginName.Str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_init_ugly_crap.tb_set_next": {
            "name": "tb_set_next",
            "location": 323,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tb": [
                    "Optional[int]",
                    "str",
                    "bool",
                    "int"
                ],
                "next": [
                    "bool",
                    "dict",
                    "Literal",
                    "Optional[int]",
                    "int"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/python-jinja2/all/jinja2/defaults.py": {},
    "devhost-master/sublime-packages/python-jinja2/all/jinja2/environment.py": {
        "get_spontaneous_environment": {
            "name": "get_spontaneous_environment",
            "location": 44,
            "return": [
                "Environment",
                "str",
                "bool",
                "int",
                "Dict[str, str]",
                "List[str]"
            ],
            "arguments": {}
        },
        "create_cache": {
            "name": "create_cache",
            "location": 60,
            "return": [
                "None",
                "Optional[bool]",
                "dict",
                "LRUCache",
                "Optional[str]",
                "str",
                "Optional[int]",
                "Optional[float]"
            ],
            "arguments": {
                "size": [
                    "int"
                ]
            }
        },
        "copy_cache": {
            "name": "copy_cache",
            "location": 69,
            "return": [
                "Optional[str]",
                "None",
                "str",
                "dict",
                "Optional[int]",
                "LRUCache"
            ],
            "arguments": {
                "cache": [
                    "Sequence[str]",
                    "dict",
                    "str"
                ]
            }
        },
        "load_extensions": {
            "name": "load_extensions",
            "location": 78,
            "return": [
                "dict",
                "bool",
                "List[str]",
                "str"
            ],
            "arguments": {
                "environment": [
                    "str",
                    "Type",
                    "int",
                    "Optional[str]"
                ],
                "extensions": [
                    "bool",
                    "str",
                    "list",
                    "IO[str]"
                ]
            }
        },
        "_environment_sanity_check": {
            "name": "_environment_sanity_check",
            "location": 90,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "environment": [
                    "bool",
                    "slice",
                    "int",
                    "str"
                ]
            }
        },
        "Environment.__init__": {
            "name": "__init__",
            "location": 249,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "block_start_string": [
                    "bool",
                    "float",
                    "Optional[int]",
                    "int",
                    "str"
                ],
                "block_end_string": [
                    "str",
                    "Optional[str]"
                ],
                "variable_start_string": [
                    "Callable[[str, mypy.nodes.Context], None]",
                    "bool"
                ],
                "variable_end_string": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "comment_start_string": [
                    "bool",
                    "float",
                    "Optional[int]",
                    "int",
                    "str"
                ],
                "comment_end_string": [
                    "str",
                    "Optional[str]"
                ],
                "line_statement_prefix": [
                    "str"
                ],
                "line_comment_prefix": [
                    "str",
                    "bool"
                ],
                "trim_blocks": [
                    "str",
                    "int"
                ],
                "lstrip_blocks": [
                    "str",
                    "int"
                ],
                "newline_sequence": [
                    "str",
                    "int",
                    "bool"
                ],
                "keep_trailing_newline": [
                    "str",
                    "int",
                    "bool"
                ],
                "extensions": [
                    "tuple",
                    "str",
                    "int",
                    "bool"
                ],
                "optimized": [
                    "bool",
                    "str",
                    "int"
                ],
                "undefined": [
                    "str",
                    "int",
                    "bool"
                ],
                "finalize": [
                    "None",
                    "str",
                    "int",
                    "bool"
                ],
                "autoescape": [
                    "bool",
                    "str",
                    "int"
                ],
                "loader": [
                    "None",
                    "str",
                    "int",
                    "bool"
                ],
                "cache_size": [
                    "int",
                    "str"
                ],
                "auto_reload": [
                    "bool",
                    "str",
                    "int"
                ],
                "bytecode_cache": [
                    "None",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "Environment.add_extension": {
            "name": "add_extension",
            "location": 318,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "extension": [
                    "str",
                    "bytes",
                    "dict",
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "Environment.extend": {
            "name": "extend",
            "location": 325,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Environment.overlay": {
            "name": "overlay",
            "location": 334,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "block_start_string": [
                    "str",
                    "bool",
                    "int"
                ],
                "block_end_string": [
                    "str",
                    "bool",
                    "int"
                ],
                "variable_start_string": [
                    "str",
                    "bool",
                    "int"
                ],
                "variable_end_string": [
                    "str",
                    "bool",
                    "int"
                ],
                "comment_start_string": [
                    "str",
                    "bool",
                    "int"
                ],
                "comment_end_string": [
                    "str",
                    "bool",
                    "int"
                ],
                "line_statement_prefix": [
                    "str",
                    "bool",
                    "int"
                ],
                "line_comment_prefix": [
                    "str",
                    "bool",
                    "int"
                ],
                "trim_blocks": [
                    "str",
                    "bool",
                    "int"
                ],
                "lstrip_blocks": [
                    "str",
                    "bool",
                    "int"
                ],
                "extensions": [
                    "str",
                    "dict",
                    "int"
                ],
                "optimized": [
                    "str",
                    "bool",
                    "int"
                ],
                "undefined": [
                    "str",
                    "bool",
                    "int"
                ],
                "finalize": [
                    "str",
                    "bool",
                    "int"
                ],
                "autoescape": [
                    "str",
                    "bool",
                    "int"
                ],
                "loader": [
                    "str",
                    "bool",
                    "int"
                ],
                "cache_size": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bytes"
                ],
                "auto_reload": [
                    "str",
                    "bool",
                    "int"
                ],
                "bytecode_cache": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "Environment.iter_extensions": {
            "name": "iter_extensions",
            "location": 381,
            "return": [
                "mypy.nodes.NameExpr"
            ],
            "arguments": {
                "self": []
            }
        },
        "Environment.getitem": {
            "name": "getitem",
            "location": 386,
            "return": [
                "trezor.utils.Writer",
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Dict[str, Any]"
                ],
                "argument": [
                    "bool",
                    "Tuple[str, str]",
                    "dict",
                    "cmk.utils.type_defs.EventRule"
                ]
            }
        },
        "Environment.getattr": {
            "name": "getattr",
            "location": 403,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "bytes"
                ],
                "attribute": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Environment.call_filter": {
            "name": "call_filter",
            "location": 416,
            "return": [
                "bool",
                "Dict[str, Tuple[int, int]]",
                "int",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "value": [
                    "List[mypy.nodes.Expression]",
                    "List[int]",
                    "List[Optional[str]]"
                ],
                "args": [
                    "None"
                ],
                "kwargs": [
                    "None"
                ],
                "context": [
                    "None",
                    "Optional[str]",
                    "Union[None, int, str]",
                    "Sequence[str]"
                ],
                "eval_ctx": [
                    "None",
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Environment.call_test": {
            "name": "call_test",
            "location": 442,
            "return": [
                "bool",
                "int",
                "str",
                "Tuple[float, float, float, float]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, str]"
                ],
                "value": [
                    "str",
                    "dict",
                    "List[str]",
                    "Tuple[str]",
                    "tuple"
                ],
                "args": [
                    "None"
                ],
                "kwargs": [
                    "None"
                ]
            }
        },
        "Environment.parse": {
            "name": "parse",
            "location": 453,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "name": [
                    "None",
                    "Optional[str]",
                    "str"
                ],
                "filename": [
                    "None",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "Environment._parse": {
            "name": "_parse",
            "location": 468,
            "return": [
                "int",
                "List[str]",
                "Optional[str]",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Dict[str, str]"
                ],
                "name": [
                    "str",
                    "Dict[str, str]"
                ],
                "filename": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "Environment.lex": {
            "name": "lex",
            "location": 472,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "bool",
                    "Dict[str, str]"
                ],
                "name": [
                    "None",
                    "str",
                    "Optional[str]"
                ],
                "filename": [
                    "None",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Environment.preprocess": {
            "name": "preprocess",
            "location": 489,
            "return": [
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ],
                "name": [
                    "str",
                    "None"
                ],
                "filename": [
                    "str",
                    "None"
                ]
            }
        },
        "Environment._tokenize": {
            "name": "_tokenize",
            "location": 497,
            "return": [
                "TokenStream",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Optional[Sequence[str]]",
                    "str"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "dict",
                    "IO[str]",
                    "bool"
                ],
                "filename": [
                    "None",
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "dict",
                    "IO[str]",
                    "bool"
                ],
                "state": [
                    "None",
                    "str",
                    "bool",
                    "Callable",
                    "Optional[float]"
                ]
            }
        },
        "Environment._generate": {
            "name": "_generate",
            "location": 509,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "List[str]"
                ],
                "name": [
                    "str",
                    "List[str]"
                ],
                "filename": [
                    "str",
                    "List[str]"
                ],
                "defer_init": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Environment._compile": {
            "name": "_compile",
            "location": 517,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "Environment.compile": {
            "name": "compile",
            "location": 526,
            "return": [
                "bool",
                "str",
                "Iterator[str]",
                "os.PathLike"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ],
                "name": [
                    "None",
                    "str",
                    "Optional[str]",
                    "bool",
                    "int"
                ],
                "filename": [
                    "None",
                    "str",
                    "Union[str, bytes]",
                    "Callable"
                ],
                "raw": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "List[str]"
                ],
                "defer_init": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "mypy.nodes.TypeInfo"
                ]
            }
        },
        "Environment.compile_expression": {
            "name": "compile_expression",
            "location": 567,
            "return": [
                "TemplateExpression",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "bool",
                    "django.utils.safestring.SafeString"
                ],
                "undefined_to_none": [
                    "bool",
                    "Mapping[str, Any]",
                    "Callable",
                    "Optional[Dict[str, str]]",
                    "Type[T]",
                    "List[str]",
                    "Optional[homeassistancore.Context]",
                    "Mapping"
                ]
            }
        },
        "Environment.compile_templates": {
            "name": "compile_templates",
            "location": 612,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "str",
                    "metrics_backend.utils.Address",
                    "float",
                    "Dict[str, Any]"
                ],
                "extensions": [
                    "None",
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "int",
                    "docutils.nodes.document"
                ],
                "filter_func": [
                    "None",
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "int",
                    "docutils.nodes.document"
                ],
                "zip": [
                    "typing.Text",
                    "Dict[cmk.utils.type_defs.HostName, List[cmk.utils.type_defs.HostName]]",
                    "int",
                    "Dict[cmk.utils.type_defs.HostName, cmk.utils.type_defs.TagList]",
                    "Dict[cmk.utils.type_defs.HostName, str]",
                    "Set[cmk.utils.type_defs.HostName]",
                    "bool"
                ],
                "log_function": [
                    "None",
                    "Callable",
                    "str",
                    "dict"
                ],
                "ignore_errors": [
                    "bool",
                    "Literal"
                ],
                "py_compile": [
                    "bool",
                    "Literal"
                ]
            }
        },
        "Environment.list_templates": {
            "name": "list_templates",
            "location": 707,
            "return": [
                "float",
                "list"
            ],
            "arguments": {
                "self": [],
                "extensions": [
                    "None",
                    "str",
                    "List[str]",
                    "bool",
                    "Iterable[Union[Any, int]]",
                    "int",
                    "Hashable"
                ],
                "filter_func": [
                    "None",
                    "bool",
                    "List[int]",
                    "Iterable[Union[Any, int]]",
                    "Optional[bool]"
                ]
            }
        },
        "Environment.handle_exception": {
            "name": "handle_exception",
            "location": 734,
            "return": [
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "exc_info": [
                    "None",
                    "bool",
                    "T",
                    "int"
                ],
                "rendered": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "Optional[List[Any]]"
                ],
                "source_hint": [
                    "None",
                    "str",
                    "Callable",
                    "int"
                ]
            }
        },
        "Environment.join_path": {
            "name": "join_path",
            "location": 756,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "bool",
                    "str",
                    "list",
                    "int",
                    "Sequence[str]"
                ],
                "parent": [
                    "bool",
                    "str",
                    "list",
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "Environment._load_template": {
            "name": "_load_template",
            "location": 769,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict",
                    "behave.runner.Context",
                    "Optional[str]"
                ],
                "globals": [
                    "str",
                    "List[str]",
                    "Callable[..., T]",
                    "list"
                ]
            }
        },
        "Environment.get_template": {
            "name": "get_template",
            "location": 792,
            "return": [
                "Template",
                "str",
                "Tuple[str, str]",
                "list"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Callable"
                ],
                "parent": [
                    "None",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "str"
                ],
                "globals": [
                    "None",
                    "str",
                    "dict"
                ]
            }
        },
        "Environment.select_template": {
            "name": "select_template",
            "location": 815,
            "return": [
                "Template",
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "names": [
                    "str"
                ],
                "parent": [
                    "None",
                    "Optional[str]",
                    "str"
                ],
                "globals": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "Environment.get_or_select_template": {
            "name": "get_or_select_template",
            "location": 842,
            "return": [
                "Template",
                "str",
                "Optional[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "template_name_or_list": [
                    "ClassVar",
                    "List[int]",
                    "Dict[str, Any]",
                    "bool"
                ],
                "parent": [
                    "None",
                    "List[str]",
                    "str",
                    "int",
                    "list",
                    "List[Optional[str]]"
                ],
                "globals": [
                    "None",
                    "List[str]",
                    "str",
                    "int",
                    "list",
                    "List[Optional[str]]"
                ]
            }
        },
        "Environment.from_string": {
            "name": "from_string",
            "location": 856,
            "return": [
                "bool",
                "str",
                "List[str]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ],
                "globals": [
                    "None",
                    "str",
                    "bool",
                    "Dict[str, mypy.nodes.MypyFile]",
                    "Tuple[Type]",
                    "dict"
                ],
                "template_class": [
                    "str",
                    "None"
                ]
            }
        },
        "Environment.make_globals": {
            "name": "make_globals",
            "location": 864,
            "return": [
                "dict",
                "Dict[str, Any]",
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "dict",
                    "str",
                    "int"
                ]
            }
        },
        "Template.__new__": {
            "name": "__new__",
            "location": 901,
            "return": [
                "Callable"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[int]",
                    "List[str]"
                ],
                "source": [
                    "str",
                    "Optional[int]",
                    "List[str]"
                ],
                "block_start_string": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "block_end_string": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "variable_start_string": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "variable_end_string": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "comment_start_string": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "comment_end_string": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "line_statement_prefix": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "line_comment_prefix": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "trim_blocks": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "lstrip_blocks": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "newline_sequence": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "keep_trailing_newline": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "extensions": [
                    "tuple",
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "optimized": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "undefined": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "finalize": [
                    "None",
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "autoescape": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "Template.from_code": {
            "name": "from_code",
            "location": 929,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]",
                "List[Dict[str, Any]]",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "environment": [
                    "str"
                ],
                "code": [
                    "str"
                ],
                "globals": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "uptodate": [
                    "None",
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        },
        "Template.from_module_dict": {
            "name": "from_module_dict",
            "location": 943,
            "return": [
                "int",
                "bool",
                "Iterable['Notification']",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.Item",
                    "cmk.utils.type_defs.CheckPluginName.Str",
                    "Optional[str]",
                    "dict",
                    "Optional[cmk.utils.type_defs.SectionName]",
                    "str",
                    "bool"
                ],
                "environment": [
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.Item",
                    "cmk.utils.type_defs.CheckPluginName.Str",
                    "Optional[str]",
                    "dict",
                    "Optional[cmk.utils.type_defs.SectionName]",
                    "str",
                    "bool"
                ],
                "module_dict": [
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.Item",
                    "cmk.utils.type_defs.CheckPluginName.Str",
                    "Optional[str]",
                    "dict",
                    "Optional[cmk.utils.type_defs.SectionName]",
                    "str",
                    "bool"
                ],
                "globals": [
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.Item",
                    "cmk.utils.type_defs.CheckPluginName.Str",
                    "Optional[str]",
                    "dict",
                    "Optional[cmk.utils.type_defs.SectionName]",
                    "str",
                    "bool"
                ]
            }
        },
        "Template._from_namespace": {
            "name": "_from_namespace",
            "location": 952,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "Hashable",
                    "Union[Callable, Coroutine]"
                ],
                "environment": [
                    "bool",
                    "int",
                    "purplship.core.utils.soap.Envelope"
                ],
                "namespace": [
                    "str",
                    "Dict[str, str]"
                ],
                "globals": [
                    "str",
                    "Union[bytearray, memoryview]",
                    "dict"
                ]
            }
        },
        "Template.render": {
            "name": "render",
            "location": 974,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Template.stream": {
            "name": "stream",
            "location": 991,
            "return": [
                "str",
                "TemplateStream"
            ],
            "arguments": {
                "self": []
            }
        },
        "Template.generate": {
            "name": "generate",
            "location": 997,
            "return": [
                "typing.Generator",
                "Union[tuple, list]",
                "None",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Template.new_context": {
            "name": "new_context",
            "location": 1015,
            "return": [
                "Optional[mypy.nodes.TypeInfo]",
                "List[str]",
                "type",
                "Type[T]",
                "bool",
                "Type",
                "str"
            ],
            "arguments": {
                "self": [],
                "vars": [
                    "None",
                    "Callable",
                    "Optional[Any]"
                ],
                "shared": [
                    "bool",
                    "Callable",
                    "Optional[Any]"
                ],
                "locals": [
                    "None",
                    "Callable",
                    "Optional[Any]"
                ]
            }
        },
        "Template.make_module": {
            "name": "make_module",
            "location": 1026,
            "return": [
                "str",
                "TemplateModule"
            ],
            "arguments": {
                "self": [],
                "vars": [
                    "None",
                    "str",
                    "List[str]",
                    "object",
                    "int",
                    "bool"
                ],
                "shared": [
                    "bool",
                    "str",
                    "List[str]",
                    "object",
                    "int"
                ],
                "locals": [
                    "None",
                    "str",
                    "List[str]",
                    "object",
                    "int",
                    "bool"
                ]
            }
        },
        "Template.module": {
            "name": "module",
            "location": 1036,
            "return": [
                "bool",
                "int",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Template.get_corresponding_lineno": {
            "name": "get_corresponding_lineno",
            "location": 1052,
            "return": [
                "int",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "lineno": [
                    "str",
                    "bool"
                ]
            }
        },
        "Template.is_up_to_date": {
            "name": "is_up_to_date",
            "location": 1062,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Template.debug_info": {
            "name": "debug_info",
            "location": 1069,
            "return": [
                "list[tuple]",
                "List[int]",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Template.__repr__": {
            "name": "__repr__",
            "location": 1074,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemplateModule.__init__": {
            "name": "__init__",
            "location": 1089,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "context": [
                    "str",
                    "Union[str, int]",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "TemplateModule.__html__": {
            "name": "__html__",
            "location": 1094,
            "return": [
                "Union[str, List[str]]",
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemplateModule.__str__": {
            "name": "__str__",
            "location": 1097,
            "return": [
                "Union[str, List[str]]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemplateModule.__repr__": {
            "name": "__repr__",
            "location": 1100,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemplateExpression.__init__": {
            "name": "__init__",
            "location": 1114,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "raiden.utils.Callable",
                    "Exception",
                    "str",
                    "Optional[int]",
                    "Type[T]",
                    "bool"
                ],
                "undefined_to_none": [
                    "raiden.utils.Callable",
                    "Exception",
                    "str",
                    "Optional[int]",
                    "Type[T]",
                    "bool"
                ]
            }
        },
        "TemplateExpression.__call__": {
            "name": "__call__",
            "location": 1118,
            "return": [
                "None",
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemplateStream.__init__": {
            "name": "__init__",
            "location": 1139,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "gen": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "TemplateStream.dump": {
            "name": "dump",
            "location": 1143,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "fp": [
                    "list",
                    "bool",
                    "str",
                    "raiden.utils.List[str]"
                ],
                "encoding": [
                    "None",
                    "Optional[str]",
                    "Union[str, os.PathLike, None]",
                    "Optional[Iterable[str]]",
                    "Optional[float]",
                    "Dict[str, str]",
                    "bool"
                ],
                "errors": [
                    "typing.Text",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "TemplateStream.disable_buffering": {
            "name": "disable_buffering",
            "location": 1172,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemplateStream.enable_buffering": {
            "name": "enable_buffering",
            "location": 1177,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "TemplateStream.__iter__": {
            "name": "__iter__",
            "location": 1204,
            "return": [
                "TemplateStream",
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemplateStream.__next__": {
            "name": "__next__",
            "location": 1207,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Environment.compile_templates.write_file": {
            "name": "write_file",
            "location": 657,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "data": [
                    "str",
                    "Optional[str]"
                ],
                "mode": [
                    "str",
                    "Union[str, dict]"
                ]
            }
        },
        "TemplateStream.enable_buffering.generator": {
            "name": "generator",
            "location": 1182,
            "return": [
                "None",
                "Union[tuple, list]",
                "typing.Generator",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "next": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/python-jinja2/all/jinja2/exceptions.py": {
        "TemplateNotFound.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[Dict[str, str]]",
                    "Union[str, List[str]]"
                ],
                "message": [
                    "None",
                    "str",
                    "int",
                    "Optional[bool]",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "TemplateNotFound.__str__": {
            "name": "__str__",
            "location": 60,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemplatesNotFound.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "names": [
                    "tuple",
                    "str",
                    "bool",
                    "dict",
                    "Optional[str]"
                ],
                "message": [
                    "None",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "TemplateSyntaxError.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "lineno": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[Mapping]"
                ],
                "name": [
                    "None",
                    "str",
                    "Optional[str]",
                    "Callable[..., T]"
                ],
                "filename": [
                    "None",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TemplateSyntaxError.__str__": {
            "name": "__str__",
            "location": 95,
            "return": [
                "str",
                "bool",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemplateError.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "None",
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "TemplateError.message": {
            "name": "message",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemplateError.__unicode__": {
            "name": "__unicode__",
            "location": 30,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/python-jinja2/all/jinja2/ext.py": {
        "_gettext_alias": {
            "name": "_gettext_alias",
            "location": 131,
            "return": [
                "str",
                "trezor.utils.Writer",
                "int",
                "Dict[str, int]"
            ],
            "arguments": {
                "__context": [
                    "List[str]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "_make_new_gettext": {
            "name": "_make_new_gettext",
            "location": 135,
            "return": [
                "str",
                "Iterable[T]",
                "Callable[[T], bool]"
            ],
            "arguments": {
                "func": [
                    "Callable"
                ]
            }
        },
        "_make_new_ngettext": {
            "name": "_make_new_ngettext",
            "location": 145,
            "return": [
                "str",
                "Iterable[T]",
                "Callable[[T], bool]"
            ],
            "arguments": {
                "func": [
                    "Callable"
                ]
            }
        },
        "extract_from_ast": {
            "name": "extract_from_ast",
            "location": 448,
            "return": [
                ""
            ],
            "arguments": {
                "node": [
                    "str",
                    "mypy.nodes.SymbolTable",
                    "Dict[mypy.nodes.SymbolNode, mypy.nodes.SymbolNode]"
                ],
                "gettext_functions": [
                    "tuple[typing.Text]",
                    "Callable[..., str]",
                    "dict",
                    "str"
                ],
                "babel_style": [
                    "bool",
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "Callable",
                    "Type"
                ]
            }
        },
        "babel_extract": {
            "name": "babel_extract",
            "location": 553,
            "return": [
                "None",
                "Union[tuple, list]",
                "typing.Generator[tuple]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "fileobj": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "List[str]",
                    "List[Dict[str, Any]]",
                    "int"
                ],
                "keywords": [
                    "int",
                    "Optional[int]",
                    "Optional[str]",
                    "mypy.nodes.SymbolTableNode"
                ],
                "comment_tags": [
                    "Optional[str]",
                    "str",
                    "List[str]"
                ],
                "options": [
                    "str",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "ExtensionRegistry.__new__": {
            "name": "__new__",
            "location": 35,
            "return": [
                "str",
                "int",
                "Environment"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "Iterable[str]",
                    "dict"
                ],
                "name": [
                    "str",
                    "List[str]",
                    "Iterable[str]",
                    "dict"
                ],
                "bases": [
                    "str",
                    "List[str]",
                    "Iterable[str]",
                    "dict"
                ],
                "d": [
                    "str",
                    "List[str]",
                    "Iterable[str]",
                    "dict"
                ]
            }
        },
        "Extension.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Extension.bind": {
            "name": "bind",
            "location": 73,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "str",
                    "dict",
                    "int",
                    "bool"
                ]
            }
        },
        "Extension.preprocess": {
            "name": "preprocess",
            "location": 80,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "bool",
                    "dict"
                ],
                "name": [
                    "str",
                    "bool",
                    "dict"
                ],
                "filename": [
                    "None",
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "Extension.filter_stream": {
            "name": "filter_stream",
            "location": 87,
            "return": [
                "float",
                "Callable[[None], bool]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "str",
                    "bool",
                    "list"
                ]
            }
        },
        "Extension.parse": {
            "name": "parse",
            "location": 99,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "utils.parser.BinaryParser",
                    "bool"
                ]
            }
        },
        "Extension.attr": {
            "name": "attr",
            "location": 107,
            "return": [
                "bool",
                "int",
                "Optional[str]",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "lineno": [
                    "str",
                    "None"
                ]
            }
        },
        "Extension.call_method": {
            "name": "call_method",
            "location": 117,
            "return": [
                "str",
                "Exception",
                "int",
                "Callable[..., T]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "type",
                    "Callable"
                ],
                "args": [
                    "None"
                ],
                "kwargs": [
                    "None"
                ],
                "dyn_args": [
                    "None",
                    "str",
                    "bool",
                    "Optional[str]",
                    "type",
                    "Callable"
                ],
                "dyn_kwargs": [
                    "None",
                    "str",
                    "bool",
                    "Optional[str]",
                    "type",
                    "Callable"
                ],
                "lineno": [
                    "None",
                    "str",
                    "bool",
                    "Optional[str]",
                    "type",
                    "Callable"
                ]
            }
        },
        "_make_new_gettext.gettext": {
            "name": "gettext",
            "location": 137,
            "return": [
                "bool",
                "Callable[[KT, VT], bool]",
                "Dict[int, Tuple[int, int]]",
                "str"
            ],
            "arguments": {
                "__context": [
                    "Dict[str, mypy.nodes.MypyFile]",
                    "Type[Any]",
                    "str"
                ],
                "__string": [
                    "bool",
                    "str",
                    "docutils.nodes.Node"
                ]
            }
        },
        "_make_new_ngettext.ngettext": {
            "name": "ngettext",
            "location": 147,
            "return": [
                "bool",
                "Callable[[KT, VT], bool]",
                "Dict[int, Tuple[int, int]]",
                "str"
            ],
            "arguments": {
                "__context": [
                    "bool",
                    "Type['BaseConfig']",
                    "int",
                    "Optional[Dict]"
                ],
                "__singular": [
                    "str",
                    "Sequence[float]",
                    "Optional[List[str]]",
                    "bool",
                    "Callable[[dict], None]",
                    "List[str]",
                    "int"
                ],
                "__plural": [
                    "str",
                    "Sequence[float]",
                    "Optional[List[str]]",
                    "bool",
                    "Callable[[dict], None]",
                    "List[str]",
                    "int"
                ],
                "__num": [
                    "Optional[str]",
                    "Dict[int, int]",
                    "dict",
                    "float",
                    "utils.mssql_counters.Section",
                    "str"
                ]
            }
        },
        "InternationalizationExtension.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "InternationalizationExtension._install": {
            "name": "_install",
            "location": 179,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "translations": [
                    "Optional[str]"
                ],
                "newstyle": [
                    "None",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "InternationalizationExtension._install_null": {
            "name": "_install_null",
            "location": 188,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "newstyle": [
                    "int",
                    "None"
                ]
            }
        },
        "InternationalizationExtension._install_callables": {
            "name": "_install_callables",
            "location": 195,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "gettext": [
                    "Optional[Any]",
                    "int",
                    "dict",
                    "bool",
                    "str"
                ],
                "ngettext": [
                    "Optional[Any]",
                    "int",
                    "dict",
                    "bool",
                    "str"
                ],
                "newstyle": [
                    "None",
                    "Optional[bool]",
                    "bool",
                    "int"
                ]
            }
        },
        "InternationalizationExtension._uninstall": {
            "name": "_uninstall",
            "location": 206,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "translations": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "InternationalizationExtension._extract": {
            "name": "_extract",
            "location": 210,
            "return": [
                "Callable[..., None]",
                "Type",
                "Tuple[type]",
                "int"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Optional[str]",
                    "Dict[str, mypy.nodes.MypyFile]"
                ],
                "gettext_functions": [
                    "tuple[typing.Text]",
                    "str",
                    "List[Union[str, Any]]",
                    "Union[str, bytes]"
                ]
            }
        },
        "InternationalizationExtension.parse": {
            "name": "parse",
            "location": 215,
            "return": [
                "Sequence['cirq.Qid']",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "jinja2.parser.Parser"
                ]
            }
        },
        "InternationalizationExtension._parse_block": {
            "name": "_parse_block",
            "location": 309,
            "return": [
                "tuple[list]",
                "Dict[str, Any]",
                "str",
                "int",
                "set",
                "dict"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "str",
                    "IO[str]"
                ],
                "allow_pluralize": [
                    "Callable[[str], T]"
                ]
            }
        },
        "InternationalizationExtension._make_node": {
            "name": "_make_node",
            "location": 341,
            "return": [
                "str",
                "int",
                "bytearray",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "singular": [
                    "int",
                    "Dict[str, str]"
                ],
                "plural": [
                    "dict",
                    "Union[int, str]"
                ],
                "variables": [
                    "Sequence[str]",
                    "Iterable[Tuple[Any, Any]]",
                    "bool"
                ],
                "plural_expr": [
                    "Optional[float]",
                    "Optional[Union[Any, Any]]"
                ],
                "vars_referenced": [
                    "str",
                    "bool",
                    "int",
                    "dict"
                ],
                "num_called_num": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ExprStmtExtension.parse": {
            "name": "parse",
            "location": 396,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "jinja2.parser.Parser"
                ]
            }
        },
        "LoopControlExtension.parse": {
            "name": "parse",
            "location": 406,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "WithExtension.parse": {
            "name": "parse",
            "location": 417,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "tests.utils.CliObjectRunner",
                    "jinja2.parser.Parser"
                ]
            }
        },
        "AutoEscapeExtension.parse": {
            "name": "parse",
            "location": 438,
            "return": [
                "float",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "Dict[str, Any]"
                ]
            }
        },
        "_CommentFinder.__init__": {
            "name": "__init__",
            "location": 523,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Tuple[int, int]"
                ],
                "comment_tags": [
                    "str"
                ]
            }
        },
        "_CommentFinder.find_backwards": {
            "name": "find_backwards",
            "location": 529,
            "return": [
                "list",
                "mypy.nodes.FuncBase",
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "str",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "_CommentFinder.find_comments": {
            "name": "find_comments",
            "location": 544,
            "return": [
                "list",
                "Type",
                "Optional[str]",
                "Optional[BaseException]",
                "Callable",
                "Dict[str, int]",
                "Optional[Iterable[str]]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "lineno": [
                    "bool",
                    "Optional[Union[str, Any]]",
                    "Callable",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "babel_extract.getbool": {
            "name": "getbool",
            "location": 590,
            "return": [
                "bool"
            ],
            "arguments": {
                "options": [
                    "str",
                    "Sequence[Any]",
                    "dict",
                    "Callable",
                    "bool",
                    "List[str]",
                    "Union[str, int]",
                    "int"
                ],
                "key": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "Dict[str, str]"
                ],
                "default": [
                    "bool",
                    "int",
                    "str",
                    "float",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/python-jinja2/all/jinja2/filters.py": {
        "contextfilter": {
            "name": "contextfilter",
            "location": 27,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "f": [
                    "bool",
                    "int"
                ]
            }
        },
        "evalcontextfilter": {
            "name": "evalcontextfilter",
            "location": 35,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "f": [
                    "bool",
                    "int"
                ]
            }
        },
        "environmentfilter": {
            "name": "environmentfilter",
            "location": 46,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "f": [
                    "bool",
                    "int"
                ]
            }
        },
        "make_attrgetter": {
            "name": "make_attrgetter",
            "location": 54,
            "return": [
                "typing.Callable",
                "str",
                "Tuple[str]",
                "Optional[int]"
            ],
            "arguments": {
                "environment": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "attribute": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "do_forceescape": {
            "name": "do_forceescape",
            "location": 73,
            "return": [
                "Callable",
                "int"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "do_urlencode": {
            "name": "do_urlencode",
            "location": 80,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "value": [
                    "dict",
                    "Union[bytes, str]",
                    "Optional[Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "do_replace": {
            "name": "do_replace",
            "location": 102,
            "return": [],
            "arguments": {
                "eval_ctx": [
                    "Dict[str, Any]",
                    "IO"
                ],
                "s": [
                    "str",
                    "List[str]"
                ],
                "old": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "new": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "count": [
                    "None",
                    "bool",
                    "Type[T]",
                    "Optional[str]"
                ]
            }
        },
        "do_upper": {
            "name": "do_upper",
            "location": 129,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ]
            }
        },
        "do_lower": {
            "name": "do_lower",
            "location": 134,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ]
            }
        },
        "do_xmlattr": {
            "name": "do_xmlattr",
            "location": 140,
            "return": [
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "_eval_ctx": [
                    "str",
                    "IO"
                ],
                "d": [
                    "int",
                    "Dict[str, Any]"
                ],
                "autospace": [
                    "bool",
                    "str",
                    "IO"
                ]
            }
        },
        "do_capitalize": {
            "name": "do_capitalize",
            "location": 175,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ]
            }
        },
        "do_title": {
            "name": "do_title",
            "location": 182,
            "return": [
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "do_dictsort": {
            "name": "do_dictsort",
            "location": 194,
            "return": [
                "list",
                "str",
                "Set[cmk.utils.type_defs.HostName]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "value": [
                    "bool",
                    "dict",
                    "Union[bytes, str]",
                    "Optional[Dict[str, Any]]",
                    "Iterable",
                    "str"
                ],
                "case_sensitive": [
                    "bool",
                    "Union[str, int]",
                    "Sequence[Union[int, str]]",
                    "bytes",
                    "T"
                ],
                "by": [
                    "typing.Text",
                    "Union[str, int]",
                    "Sequence[Union[int, str]]",
                    "bool",
                    "bytes",
                    "T"
                ]
            }
        },
        "do_sort": {
            "name": "do_sort",
            "location": 227,
            "return": [
                "list",
                "Optional[str]",
                "int",
                "bool"
            ],
            "arguments": {
                "environment": [
                    "str",
                    "List[int]",
                    "Callable[[str, object], None]",
                    "Iterable[float]",
                    "bool",
                    "Optional[BaseException]"
                ],
                "value": [
                    "str",
                    "dict",
                    "int"
                ],
                "reverse": [
                    "bool",
                    "str",
                    "dict",
                    "int"
                ],
                "case_sensitive": [
                    "bool",
                    "str",
                    "List[int]",
                    "Callable[[str, object], None]",
                    "Iterable[float]",
                    "Optional[BaseException]"
                ],
                "attribute": [
                    "None",
                    "str",
                    "List[int]",
                    "Callable[[str, object], None]",
                    "Iterable[float]",
                    "bool",
                    "Optional[BaseException]"
                ]
            }
        },
        "do_default": {
            "name": "do_default",
            "location": 268,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]",
                "int",
                "bool",
                "Optional[dict]"
            ],
            "arguments": {
                "value": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Mapping",
                    "dict",
                    "float"
                ],
                "default_value": [
                    "typing.Text",
                    "list",
                    "bool",
                    "Dict[str, Any]",
                    "Optional['ModelOrDc']",
                    "Union[Type[Exception], Tuple[Any, ...]]"
                ],
                "boolean": [
                    "bool",
                    "int",
                    "str",
                    "Optional[int]",
                    "Mapping",
                    "dict",
                    "float"
                ]
            }
        },
        "do_join": {
            "name": "do_join",
            "location": 291,
            "return": [
                "Type"
            ],
            "arguments": {
                "eval_ctx": [
                    "str",
                    "dict",
                    "basilisp.lang.runtime.Namespace"
                ],
                "value": [
                    "str",
                    "utils.converters.NonCaseSensMemberConverter"
                ],
                "d": [
                    "typing.Text",
                    "str",
                    "Union[str, List[str]]",
                    "Union[str, List]",
                    "bool"
                ],
                "attribute": [
                    "None",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "do_center": {
            "name": "do_center",
            "location": 340,
            "return": [
                "str",
                "Type[Any]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int",
                    "Type",
                    "Tuple[float, float]",
                    "bool"
                ],
                "width": [
                    "int",
                    "str",
                    "Type",
                    "Tuple[float, float]",
                    "bool"
                ]
            }
        },
        "do_first": {
            "name": "do_first",
            "location": 346,
            "return": [
                "Callable"
            ],
            "arguments": {
                "environment": [
                    "float",
                    "str",
                    "int"
                ],
                "seq": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "do_last": {
            "name": "do_last",
            "location": 355,
            "return": [
                "T",
                "list",
                "str",
                "int",
                "Iterator[T]"
            ],
            "arguments": {
                "environment": [
                    "int",
                    "str",
                    "Optional[bytearray]"
                ],
                "seq": [
                    "int",
                    "str",
                    "Optional[bytearray]"
                ]
            }
        },
        "do_random": {
            "name": "do_random",
            "location": 364,
            "return": [
                "int",
                "trezor.utils.Writer",
                "utils.Node",
                "str",
                "List[int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "environment": [
                    "float",
                    "str",
                    "int"
                ],
                "seq": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "do_filesizeformat": {
            "name": "do_filesizeformat",
            "location": 372,
            "return": [
                "typing.Text",
                "str",
                "bool"
            ],
            "arguments": {
                "value": [
                    "float",
                    "str",
                    "bytes",
                    "Sequence[float]"
                ],
                "binary": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "do_pprint": {
            "name": "do_pprint",
            "location": 402,
            "return": [
                "str",
                "int",
                "List[int]",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "value": [
                    "bool",
                    "float",
                    "Iterable[object]",
                    "str"
                ],
                "verbose": [
                    "bool",
                    "float",
                    "Iterable[object]",
                    "str"
                ]
            }
        },
        "do_urlize": {
            "name": "do_urlize",
            "location": 412,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {
                "eval_ctx": [
                    "int",
                    "bool"
                ],
                "value": [
                    "str",
                    "dict",
                    "bool",
                    "Optional[\"ShippingRateInputType\"]"
                ],
                "trim_url_limit": [
                    "None",
                    "str",
                    "dict",
                    "bool",
                    "Optional[\"ShippingRateInputType\"]"
                ],
                "nofollow": [
                    "bool",
                    "str",
                    "dict",
                    "Optional[\"ShippingRateInputType\"]"
                ],
                "target": [
                    "None",
                    "str",
                    "dict",
                    "bool",
                    "Optional[\"ShippingRateInputType\"]"
                ]
            }
        },
        "do_indent": {
            "name": "do_indent",
            "location": 441,
            "return": [
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "s": [
                    "str",
                    "MutableMapping[str, Any]",
                    "Optional[str]",
                    "Optional[List]",
                    "int"
                ],
                "width": [
                    "int",
                    "str",
                    "list",
                    "dict",
                    "bytes"
                ],
                "indentfirst": [
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "do_truncate": {
            "name": "do_truncate",
            "location": 459,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "int",
                    "str",
                    "bytes"
                ],
                "length": [
                    "int",
                    "str"
                ],
                "killwords": [
                    "bool",
                    "AnyStr",
                    "Union[bytes, bytearray]",
                    "Iterable[T]",
                    "str"
                ],
                "end": [
                    "typing.Text",
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "do_wordwrap": {
            "name": "do_wordwrap",
            "location": 488,
            "return": [
                "Callable",
                "bool",
                "hackathon.utils.utils.DataMessage",
                "float"
            ],
            "arguments": {
                "environment": [
                    "pygame.math.Vector2",
                    "bool",
                    "Callable",
                    "str",
                    "torch.utils.data.Dataset"
                ],
                "s": [
                    "bool",
                    "str",
                    "int"
                ],
                "width": [
                    "int",
                    "bool",
                    "str"
                ],
                "break_long_words": [
                    "bool",
                    "str",
                    "int"
                ],
                "wrapstring": [
                    "None",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "do_wordcount": {
            "name": "do_wordcount",
            "location": 509,
            "return": [
                "int",
                "Callable",
                "str",
                "list"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes"
                ]
            }
        },
        "do_int": {
            "name": "do_int",
            "location": 514,
            "return": [
                "int",
                "dict",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "str",
                "List[dict]"
            ],
            "arguments": {
                "value": [
                    "float",
                    "Optional[Iterable['cirq.Qid']]",
                    "List[int]",
                    "Hashable"
                ],
                "default": [
                    "int",
                    "Optional[Any]",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Iterable[Any]"
                ],
                "base": [
                    "int",
                    "Tuple[float, float]",
                    "Union[int, float]",
                    "bool",
                    "Type",
                    "float"
                ]
            }
        },
        "do_float": {
            "name": "do_float",
            "location": 532,
            "return": [
                "float",
                "str",
                "int",
                "tuple",
                "bool",
                "Type",
                "raiden.utils.BlockHash",
                "List[int]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int",
                    "Callable[[object], Any]",
                    "List[str]"
                ],
                "default": [
                    "float",
                    "bool",
                    "list",
                    "dict"
                ]
            }
        },
        "do_format": {
            "name": "do_format",
            "location": 543,
            "return": [
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "value": [
                    "list",
                    "str",
                    "Set[str]"
                ]
            }
        },
        "do_trim": {
            "name": "do_trim",
            "location": 558,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "value": [
                    "bool",
                    "str",
                    "complex",
                    "float",
                    "SupportsBytes",
                    "Sequence[str]"
                ]
            }
        },
        "do_striptags": {
            "name": "do_striptags",
            "location": 563,
            "return": [
                "Callable",
                "int"
            ],
            "arguments": {
                "value": [
                    "bool",
                    "T",
                    "float",
                    "Sequence",
                    "int"
                ]
            }
        },
        "do_slice": {
            "name": "do_slice",
            "location": 571,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "value": [
                    "bool",
                    "Sequence[Any]",
                    "Iterable",
                    "list",
                    "Iterable['Notification']",
                    "Optional[Sequence[T]]",
                    "set"
                ],
                "slices": [
                    "int",
                    "Union[int, slice]",
                    "List[int]",
                    "Union[None, float, int]",
                    "float"
                ],
                "fill_with": [
                    "None",
                    "Optional[int]",
                    "T",
                    "Optional[Any]",
                    "Optional[float]"
                ]
            }
        },
        "do_batch": {
            "name": "do_batch",
            "location": 607,
            "return": [
                "",
                "typing.Generator[list]",
                "typing.Generator[list[None]]"
            ],
            "arguments": {
                "value": [
                    "Union[str, int]",
                    "Sequence[Union[int, str]]",
                    "bool",
                    "bytes",
                    "T"
                ],
                "linecount": [
                    "str",
                    "int",
                    "tuple",
                    "bool",
                    "Optional[int]",
                    "Optional[Union[int, Any]]"
                ],
                "fill_with": [
                    "None",
                    "str",
                    "bool",
                    "Optional[int]",
                    "Optional[Union[int, Any]]",
                    "tuple",
                    "int",
                    "Dict[str, List[float]]"
                ]
            }
        },
        "do_round": {
            "name": "do_round",
            "location": 638,
            "return": [
                "float",
                "int",
                "bool",
                "str",
                "tuple",
                "dict"
            ],
            "arguments": {
                "value": [
                    "bool",
                    "float",
                    "str",
                    "Union[int, float]",
                    "T"
                ],
                "precision": [
                    "int",
                    "bool",
                    "float",
                    "str",
                    "Union[int, float]",
                    "T"
                ],
                "method": [
                    "typing.Text",
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[\"InventoryMode\"]",
                    "Optional[\"TaxMode\"]"
                ]
            }
        },
        "do_groupby": {
            "name": "do_groupby",
            "location": 673,
            "return": [
                "list",
                "int",
                "Optional[int]",
                "float",
                "List[int]",
                "str"
            ],
            "arguments": {
                "environment": [
                    "str",
                    "Callable",
                    "int"
                ],
                "value": [
                    "str",
                    "Sequence[Any]"
                ],
                "attribute": [
                    "str",
                    "Callable",
                    "int"
                ]
            }
        },
        "do_sum": {
            "name": "do_sum",
            "location": 726,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]",
                "int",
                "List[int]"
            ],
            "arguments": {
                "environment": [
                    "int",
                    "bool",
                    "List[str]"
                ],
                "iterable": [
                    "int",
                    "bool",
                    "List[str]"
                ],
                "attribute": [
                    "None",
                    "Optional[int]",
                    "Optional[str]",
                    "bool",
                    "int"
                ],
                "start": [
                    "int",
                    "float",
                    "tuple",
                    "Union[str, float]"
                ]
            }
        },
        "do_list": {
            "name": "do_list",
            "location": 746,
            "return": [
                "list",
                "str",
                "List[int]",
                "set"
            ],
            "arguments": {
                "value": [
                    "int",
                    "str",
                    "List[str]",
                    "Optional[bool]",
                    "Union[bool, str, None]"
                ]
            }
        },
        "do_mark_safe": {
            "name": "do_mark_safe",
            "location": 753,
            "return": [
                "str",
                "int",
                "List[int]"
            ],
            "arguments": {
                "value": [
                    "int",
                    "str",
                    "Callable",
                    "Dict[str, Any]",
                    "Callable[[object], Any]"
                ]
            }
        },
        "do_mark_unsafe": {
            "name": "do_mark_unsafe",
            "location": 760,
            "return": [
                "Type",
                "str"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int",
                    "Union[str]",
                    "T",
                    "list"
                ]
            }
        },
        "do_reverse": {
            "name": "do_reverse",
            "location": 765,
            "return": [
                "list",
                "int",
                "Callable",
                "str",
                "Optional[str]",
                "raiden.utils.BlockNumber",
                "raiden.utils.BlockHash"
            ],
            "arguments": {
                "value": [
                    "T",
                    "Optional[str]",
                    "Sequence[Any]",
                    "bytes",
                    "List[str]",
                    "list"
                ]
            }
        },
        "do_attr": {
            "name": "do_attr",
            "location": 783,
            "return": [
                "str",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "environment": [
                    "bool",
                    "str",
                    "Optional[Callable]",
                    "Optional[Any]",
                    "Tuple[Type]"
                ],
                "obj": [
                    "str"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "do_map": {
            "name": "do_map",
            "location": 808,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {}
        },
        "do_select": {
            "name": "do_select",
            "location": 854,
            "return": [
                "int",
                "bool",
                "Dict[str, int]",
                "tuple",
                "raiden.utils.Dict[str, raiden.utils.Any]"
            ],
            "arguments": {}
        },
        "do_reject": {
            "name": "do_reject",
            "location": 871,
            "return": [
                "int",
                "bool",
                "Dict[str, int]",
                "tuple",
                "raiden.utils.Dict[str, raiden.utils.Any]"
            ],
            "arguments": {}
        },
        "do_selectattr": {
            "name": "do_selectattr",
            "location": 887,
            "return": [
                "int",
                "bool",
                "Dict[str, int]",
                "tuple",
                "raiden.utils.Dict[str, raiden.utils.Any]"
            ],
            "arguments": {}
        },
        "do_rejectattr": {
            "name": "do_rejectattr",
            "location": 904,
            "return": [
                "int",
                "bool",
                "Dict[str, int]",
                "tuple",
                "raiden.utils.Dict[str, raiden.utils.Any]"
            ],
            "arguments": {}
        },
        "_select_or_reject": {
            "name": "_select_or_reject",
            "location": 918,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "modfunc": [
                    "Dict[str, Any]",
                    "list",
                    "bool"
                ],
                "lookup_attr": [
                    "bool",
                    "Callable",
                    "list"
                ]
            }
        },
        "make_attrgetter.attrgetter": {
            "name": "attrgetter",
            "location": 64,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "item": [
                    "T",
                    "Iterable[T]",
                    "Callable"
                ]
            }
        },
        "do_dictsort.sort_func": {
            "name": "sort_func",
            "location": 217,
            "return": [],
            "arguments": {
                "item": []
            }
        },
        "_GroupTuple.__new__": {
            "name": "__new__",
            "location": 720,
            "return": [
                "bool",
                "Sequence",
                "Dict[str, Any]",
                "Mapping",
                "Optional[Callable]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "int",
                    "T",
                    "type",
                    "Dict[str, Any]",
                    "Optional[Any]",
                    "Optional[List[Any]]"
                ],
                "xxx_todo_changeme": [
                    "str",
                    "int",
                    "T",
                    "Awaitable"
                ]
            }
        },
        "do_sort.sort_func": {
            "name": "sort_func",
            "location": 263,
            "return": [
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "utils.Node",
                "raiden.utils.Tuple[int, int]",
                "bytes",
                "int",
                "str"
            ],
            "arguments": {
                "item": [
                    "Iterable[str]",
                    "raiden.utils.Dict",
                    "List[str]"
                ],
                "processor": [
                    "Iterable[str]",
                    "raiden.utils.Dict",
                    "List[str]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/python-jinja2/all/jinja2/lexer.py": {
        "_describe_token_type": {
            "name": "_describe_token_type",
            "location": 145,
            "return": [],
            "arguments": {
                "token_type": []
            }
        },
        "describe_token": {
            "name": "describe_token",
            "location": 164,
            "return": [],
            "arguments": {
                "token": []
            }
        },
        "describe_token_expr": {
            "name": "describe_token_expr",
            "location": 171,
            "return": [],
            "arguments": {
                "expr": []
            }
        },
        "count_newlines": {
            "name": "count_newlines",
            "location": 182,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "compile_rules": {
            "name": "compile_rules",
            "location": 189,
            "return": [],
            "arguments": {
                "environment": []
            }
        },
        "get_lexer": {
            "name": "get_lexer",
            "location": 381,
            "return": [],
            "arguments": {
                "environment": []
            }
        },
        "Failure.__init__": {
            "name": "__init__",
            "location": 217,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "cls": []
            }
        },
        "Failure.__call__": {
            "name": "__call__",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "lineno": [],
                "filename": []
            }
        },
        "Token.__new__": {
            "name": "__new__",
            "location": 230,
            "return": [],
            "arguments": {
                "cls": [],
                "lineno": [],
                "type": [],
                "value": []
            }
        },
        "Token.__str__": {
            "name": "__str__",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Token.test": {
            "name": "test",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "expr": []
            }
        },
        "Token.test_any": {
            "name": "test_any",
            "location": 253,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Token.__repr__": {
            "name": "__repr__",
            "location": 260,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TokenStreamIterator.__init__": {
            "name": "__init__",
            "location": 274,
            "return": [],
            "arguments": {
                "self": [],
                "stream": []
            }
        },
        "TokenStreamIterator.__iter__": {
            "name": "__iter__",
            "location": 277,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TokenStreamIterator.__next__": {
            "name": "__next__",
            "location": 280,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TokenStream.__init__": {
            "name": "__init__",
            "location": 296,
            "return": [],
            "arguments": {
                "self": [],
                "generator": [],
                "name": [],
                "filename": []
            }
        },
        "TokenStream.__iter__": {
            "name": "__iter__",
            "location": 305,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TokenStream.__bool__": {
            "name": "__bool__",
            "location": 308,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TokenStream.push": {
            "name": "push",
            "location": 314,
            "return": [],
            "arguments": {
                "self": [],
                "token": []
            }
        },
        "TokenStream.look": {
            "name": "look",
            "location": 318,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TokenStream.skip": {
            "name": "skip",
            "location": 326,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "TokenStream.next_if": {
            "name": "next_if",
            "location": 331,
            "return": [],
            "arguments": {
                "self": [],
                "expr": []
            }
        },
        "TokenStream.skip_if": {
            "name": "skip_if",
            "location": 338,
            "return": [],
            "arguments": {
                "self": [],
                "expr": []
            }
        },
        "TokenStream.__next__": {
            "name": "__next__",
            "location": 342,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TokenStream.close": {
            "name": "close",
            "location": 354,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TokenStream.expect": {
            "name": "expect",
            "location": 360,
            "return": [],
            "arguments": {
                "self": [],
                "expr": []
            }
        },
        "Lexer.__init__": {
            "name": "__init__",
            "location": 410,
            "return": [],
            "arguments": {
                "self": [],
                "environment": []
            }
        },
        "Lexer._normalize_newlines": {
            "name": "_normalize_newlines",
            "location": 538,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Lexer.tokenize": {
            "name": "tokenize",
            "location": 542,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "name": [],
                "filename": [],
                "state": []
            }
        },
        "Lexer.wrap": {
            "name": "wrap",
            "location": 548,
            "return": [],
            "arguments": {
                "self": [],
                "stream": [],
                "name": [],
                "filename": []
            }
        },
        "Lexer.tokeniter": {
            "name": "tokeniter",
            "location": 594,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "name": [],
                "filename": [],
                "state": []
            }
        }
    },
    "devhost-master/sublime-packages/python-jinja2/all/jinja2/loaders.py": {
        "split_template_path": {
            "name": "split_template_path",
            "location": 22,
            "return": [
                "list",
                "str",
                "bytes"
            ],
            "arguments": {
                "template": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "BaseLoader.get_source": {
            "name": "get_source",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "list",
                    "str",
                    "Iterable[str]"
                ],
                "template": [
                    "mypy.types.Type",
                    "str",
                    "int"
                ]
            }
        },
        "BaseLoader.list_templates": {
            "name": "list_templates",
            "location": 93,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseLoader.load": {
            "name": "load",
            "location": 100,
            "return": [
                "str",
                "cmk.utils.type_defs.UserId",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "str"
                ],
                "name": [
                    "str",
                    "NamedTuple"
                ],
                "globals": [
                    "None",
                    "dict",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, dict]]",
                    "Optional[Union[Any, Any]]"
                ]
            }
        },
        "FileSystemLoader.__init__": {
            "name": "__init__",
            "location": 160,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "searchpath": [
                    "mypy.types.Type",
                    "list",
                    "bool",
                    "Exception"
                ],
                "encoding": [
                    "typing.Text",
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "followlinks": [
                    "bool",
                    "int",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "FileSystemLoader.get_source": {
            "name": "get_source",
            "location": 167,
            "return": [
                "tuple",
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "list",
                    "str",
                    "Iterable[str]"
                ],
                "template": [
                    "mypy.types.Type",
                    "str",
                    "int"
                ]
            }
        },
        "FileSystemLoader.list_templates": {
            "name": "list_templates",
            "location": 189,
            "return": [
                "int",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackageLoader.__init__": {
            "name": "__init__",
            "location": 220,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "package_name": [
                    "str",
                    "Optional[str]"
                ],
                "package_path": [
                    "str",
                    "typing.Text"
                ],
                "encoding": [
                    "typing.Text",
                    "str",
                    "bool",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "PackageLoader.get_source": {
            "name": "get_source",
            "location": 231,
            "return": [
                "tuple[None]",
                "str",
                "wemake_python_styleguide.types.ConfigurationOptions"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "list",
                    "str",
                    "Iterable[str]"
                ],
                "template": [
                    "list",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "PackageLoader.list_templates": {
            "name": "list_templates",
            "location": 250,
            "return": [
                "list",
                "str",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictLoader.__init__": {
            "name": "__init__",
            "location": 279,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mapping": [
                    "Optional[str]",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "Sequence[MutableSet[int]]",
                    "str"
                ]
            }
        },
        "DictLoader.get_source": {
            "name": "get_source",
            "location": 282,
            "return": [
                "tuple[typing.Optional[typing.Callable]]",
                "str",
                "dict",
                "Dict[str, 'LabwareDefinition']",
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "list",
                    "str",
                    "Iterable[str]"
                ],
                "template": [
                    "str",
                    "List[mypy.types.Instance]"
                ]
            }
        },
        "DictLoader.list_templates": {
            "name": "list_templates",
            "location": 288,
            "return": [
                "Dict[str, Any]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionLoader.__init__": {
            "name": "__init__",
            "location": 310,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "load_func": [
                    "int",
                    "bool"
                ]
            }
        },
        "FunctionLoader.get_source": {
            "name": "get_source",
            "location": 313,
            "return": [
                "tuple[typing.Optional[string_types]]",
                "Optional[str]",
                "string_types",
                "str",
                "None",
                "Optional[Dict[str, Any]]",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "list",
                    "str",
                    "Iterable[str]"
                ],
                "template": [
                    "str"
                ]
            }
        },
        "PrefixLoader.__init__": {
            "name": "__init__",
            "location": 337,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mapping": [
                    "Optional[str]",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "Sequence[MutableSet[int]]",
                    "str"
                ],
                "delimiter": [
                    "typing.Text",
                    "Optional[str]",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "Sequence[MutableSet[int]]",
                    "str"
                ]
            }
        },
        "PrefixLoader.get_loader": {
            "name": "get_loader",
            "location": 341,
            "return": [
                "tuple",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str"
                ]
            }
        },
        "PrefixLoader.get_source": {
            "name": "get_source",
            "location": 349,
            "return": [
                "str",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "jinja2.Environment"
                ],
                "template": [
                    "str",
                    "TextIO"
                ]
            }
        },
        "PrefixLoader.load": {
            "name": "load",
            "location": 359,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "str",
                    "bytes",
                    "List[str]"
                ],
                "name": [
                    "str",
                    "Set[str]",
                    "Optional[str]"
                ],
                "globals": [
                    "None",
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "PrefixLoader.list_templates": {
            "name": "list_templates",
            "location": 368,
            "return": [
                "list",
                "str",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChoiceLoader.__init__": {
            "name": "__init__",
            "location": 390,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "loaders": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "ChoiceLoader.get_source": {
            "name": "get_source",
            "location": 393,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "jinja2.Environment",
                    "bool",
                    "cmk.utils.type_defs.HostName",
                    "str"
                ],
                "template": [
                    "str",
                    "Exception",
                    "int",
                    "jinja2.Template",
                    "List[pypi2nix.path.Path]"
                ]
            }
        },
        "ChoiceLoader.load": {
            "name": "load",
            "location": 402,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "str",
                    "Type"
                ],
                "name": [
                    "str",
                    "int"
                ],
                "globals": [
                    "None",
                    "str",
                    "Type"
                ]
            }
        },
        "ChoiceLoader.list_templates": {
            "name": "list_templates",
            "location": 410,
            "return": [
                "int",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModuleLoader.__init__": {
            "name": "__init__",
            "location": 436,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "bool",
                    "str"
                ]
            }
        },
        "ModuleLoader.get_template_key": {
            "name": "get_template_key",
            "location": 458,
            "return": [
                "str",
                "bool",
                "int",
                "Optional[str]",
                "Dict[str, Any]",
                "Dict[str, Type]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "ModuleLoader.get_module_filename": {
            "name": "get_module_filename",
            "location": 462,
            "return": [
                "str",
                "Union[None, List[str]]",
                "Optional[int]",
                "Optional[str]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ModuleLoader.load": {
            "name": "load",
            "location": 466,
            "return": [
                "str",
                "Optional[\"permissions_doc\"]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "Optional[str]",
                    "int",
                    "Dict[str, Any]",
                    "Optional[Sequence[str]]"
                ],
                "name": [
                    "str",
                    "List[str]",
                    "bytes"
                ],
                "globals": [
                    "None",
                    "Optional[str]",
                    "int",
                    "Dict[str, Any]",
                    "Optional[Sequence[str]]"
                ]
            }
        },
        "PackageLoader.list_templates._walk": {
            "name": "_walk",
            "location": 258,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "path": [
                    "path.Path",
                    "str",
                    "bool",
                    "waterbutler.providers.gitlab.path.GitLabPath"
                ]
            }
        },
        "FileSystemLoader.get_source.uptodate": {
            "name": "uptodate",
            "location": 181,
            "return": [
                "bool",
                "str",
                "utils.typeshed.pathlike"
            ],
            "arguments": {}
        },
        "PackageLoader.get_source.uptodate": {
            "name": "uptodate",
            "location": 241,
            "return": [
                "bool",
                "str",
                "utils.typeshed.pathlike"
            ],
            "arguments": {}
        }
    },
    "devhost-master/sublime-packages/python-jinja2/all/jinja2/meta.py": {
        "find_undeclared_variables": {
            "name": "find_undeclared_variables",
            "location": 33,
            "return": [
                "List[int]",
                "List[str]",
                "bytes",
                "bool"
            ],
            "arguments": {
                "ast": [
                    "str"
                ]
            }
        },
        "find_referenced_templates": {
            "name": "find_referenced_templates",
            "location": 57,
            "return": [
                "",
                "typing.Generator[string_types]",
                "typing.Generator[None]"
            ],
            "arguments": {
                "ast": []
            }
        },
        "TrackingCodeGenerator.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "TrackingCodeGenerator.write": {
            "name": "write",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "TrackingCodeGenerator.pull_locals": {
            "name": "pull_locals",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "bytes",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Optional[Dict[str, str]]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/python-jinja2/all/jinja2/nodes.py": {
        "get_eval_context": {
            "name": "get_eval_context",
            "location": 97,
            "return": [
                "str",
                "EvalContext",
                "bool",
                "None"
            ],
            "arguments": {
                "node": [
                    "Optional[str]",
                    "bool",
                    "basilisp.lang.compiler.nodes.Fn",
                    "Optional[mypy.types.Instance]"
                ],
                "ctx": [
                    "mypy.types.Type.VarId",
                    "str",
                    "Optional[Type[BaseException]]"
                ]
            }
        },
        "_failing_new": {
            "name": "_failing_new",
            "location": 917,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "NodeType.__new__": {
            "name": "__new__",
            "location": 64,
            "return": [
                "mypy.types.Type",
                "Optional[BaseException]",
                "Dict[str, Any]",
                "Optional[Dict[str, str]]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Dict[str, Any]",
                    "str",
                    "django.utils.safestring.SafeText",
                    "dict",
                    "raiden.utils.Dict[str, raiden.utils.Any]"
                ],
                "name": [
                    "bool",
                    "Dict[str, Any]",
                    "str",
                    "django.utils.safestring.SafeText",
                    "dict",
                    "raiden.utils.Dict[str, raiden.utils.Any]"
                ],
                "bases": [
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "d": [
                    "str",
                    "int",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "EvalContext.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "str",
                    "Optional[str]"
                ],
                "template_name": [
                    "None",
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "EvalContext.save": {
            "name": "save",
            "location": 89,
            "return": [
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EvalContext.revert": {
            "name": "revert",
            "location": 92,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "old": [
                    "int",
                    "Callable",
                    "str",
                    "float",
                    "List[types.CodeType]"
                ]
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.iter_fields": {
            "name": "iter_fields",
            "location": 148,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "self": [],
                "exclude": [
                    "None",
                    "Optional[str]",
                    "Sequence[str]",
                    "type",
                    "bool"
                ],
                "only": [
                    "None",
                    "Optional[str]",
                    "Sequence[str]",
                    "type",
                    "bool"
                ]
            }
        },
        "Node.iter_child_nodes": {
            "name": "iter_child_nodes",
            "location": 164,
            "return": [
                "",
                "typing.Generator[Node]"
            ],
            "arguments": {
                "self": [],
                "exclude": [
                    "None",
                    "Callable[[int], None]",
                    "Sequence[T]",
                    "float",
                    "str"
                ],
                "only": [
                    "None",
                    "Callable[[int], None]",
                    "Sequence[T]",
                    "float",
                    "str"
                ]
            }
        },
        "Node.find": {
            "name": "find",
            "location": 177,
            "return": [
                "str",
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]"
            ],
            "arguments": {
                "self": [],
                "node_type": [
                    "str",
                    "List[str]",
                    "Type[T]"
                ]
            }
        },
        "Node.find_all": {
            "name": "find_all",
            "location": 184,
            "return": [
                "",
                "typing.Generator[node_type]",
                "typing.Generator"
            ],
            "arguments": {
                "self": [],
                "node_type": [
                    "str",
                    "Optional[mypy.types.Instance]",
                    "int",
                    "mode.utils.imports.SymbolArg[Type[tables.TableT]]",
                    "type"
                ]
            }
        },
        "Node.set_ctx": {
            "name": "set_ctx",
            "location": 194,
            "return": [
                "Node",
                "int",
                "torch.utils.data.DataLoader",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "bool"
                ]
            }
        },
        "Node.set_lineno": {
            "name": "set_lineno",
            "location": 208,
            "return": [
                "Node",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "lineno": [
                    "Optional[str]",
                    "Optional[Tuple[Any, Any]]",
                    "bool",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "override": [
                    "bool",
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "Node.set_environment": {
            "name": "set_environment",
            "location": 219,
            "return": [
                "Node",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "str",
                    "bool",
                    "Union[str, dict]"
                ]
            }
        },
        "Node.__eq__": {
            "name": "__eq__",
            "location": 228,
            "return": [
                "bool",
                "tuple",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AbstractSet[T]",
                    "raiden.utils.Any",
                    "str",
                    "raiden.utils.List[raiden.utils.Dict]",
                    "mypy.types.Any"
                ]
            }
        },
        "Node.__ne__": {
            "name": "__ne__",
            "location": 232,
            "return": [
                "bool",
                "str",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]",
                    "raiden.utils.Any"
                ]
            }
        },
        "Node.__repr__": {
            "name": "__repr__",
            "location": 238,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expr.as_const": {
            "name": "as_const",
            "location": 359,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "eval_ctx": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "Expr.can_assign": {
            "name": "can_assign",
            "location": 372,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinExpr.as_const": {
            "name": "as_const",
            "location": 383,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "eval_ctx": [
                    "None",
                    "str",
                    "BaseException",
                    "bool",
                    "int"
                ]
            }
        },
        "UnaryExpr.as_const": {
            "name": "as_const",
            "location": 402,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "eval_ctx": [
                    "None",
                    "BaseException",
                    "bool",
                    "types.Ty",
                    "Sequence[str]",
                    "int"
                ]
            }
        },
        "Name.can_assign": {
            "name": "can_assign",
            "location": 425,
            "return": [
                "bool",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Const.as_const": {
            "name": "as_const",
            "location": 443,
            "return": [
                "str",
                "Type[T]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "eval_ctx": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "Const.from_untrusted": {
            "name": "from_untrusted",
            "location": 447,
            "return": [
                "str",
                "bytes",
                "MutableMapping[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "list",
                    "str",
                    "bytes",
                    "dict",
                    "int",
                    "bool"
                ],
                "value": [
                    "Callable",
                    "dict",
                    "type",
                    "bytes"
                ],
                "lineno": [
                    "None",
                    "list",
                    "str",
                    "bytes",
                    "dict",
                    "int",
                    "bool"
                ],
                "environment": [
                    "None",
                    "list",
                    "str",
                    "bytes",
                    "dict",
                    "int",
                    "bool"
                ]
            }
        },
        "TemplateData.as_const": {
            "name": "as_const",
            "location": 462,
            "return": [
                "dict",
                "starfish.types.Axes",
                "str",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "eval_ctx": [
                    "None",
                    "bool",
                    "Optional[Any]",
                    "int"
                ]
            }
        },
        "Tuple.as_const": {
            "name": "as_const",
            "location": 478,
            "return": [
                "tuple",
                "mypy.types.Type",
                "Type"
            ],
            "arguments": {
                "self": [],
                "eval_ctx": [
                    "None",
                    "mypy.types.AnyType",
                    "mypy.types.CallableType",
                    "int",
                    "Dict[str, Optional[BaseException]]",
                    "bool"
                ]
            }
        },
        "Tuple.can_assign": {
            "name": "can_assign",
            "location": 482,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "List.as_const": {
            "name": "as_const",
            "location": 493,
            "return": [
                "list",
                "int",
                "str",
                "bool",
                "dict",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": [],
                "eval_ctx": [
                    "None",
                    "int",
                    "mypy.types.Type"
                ]
            }
        },
        "Dict.as_const": {
            "name": "as_const",
            "location": 504,
            "return": [
                "dict",
                "types.Snapshot"
            ],
            "arguments": {
                "self": [],
                "eval_ctx": [
                    "None",
                    "dict",
                    "Dict[str, Optional[BaseException]]",
                    "Sequence[int]",
                    "bool"
                ]
            }
        },
        "Pair.as_const": {
            "name": "as_const",
            "location": 513,
            "return": [
                "tuple",
                "int",
                "bool",
                "Dict[str, Tuple[int, int]]",
                "Dict[str, List[Callable]]",
                "Type",
                "cmk.utils.type_defs.CheckVariables"
            ],
            "arguments": {
                "self": [],
                "eval_ctx": [
                    "None",
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "type"
                ]
            }
        },
        "Keyword.as_const": {
            "name": "as_const",
            "location": 522,
            "return": [
                "tuple",
                "str",
                "bool",
                "Dict[str, Tuple[Any, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "eval_ctx": [
                    "None",
                    "str",
                    "bool",
                    "types.Ty",
                    "int"
                ]
            }
        },
        "CondExpr.as_const": {
            "name": "as_const",
            "location": 533,
            "return": [
                "list",
                "T"
            ],
            "arguments": {
                "self": [],
                "eval_ctx": [
                    "str",
                    "None"
                ]
            }
        },
        "Filter.as_const": {
            "name": "as_const",
            "location": 554,
            "return": [
                "Optional[str]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "eval_ctx": [
                    "None",
                    "int",
                    "Pattern",
                    "str"
                ]
            }
        },
        "Call.as_const": {
            "name": "as_const",
            "location": 605,
            "return": [
                "mypy.types.Type",
                "types.Resolver",
                "bool",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": [],
                "eval_ctx": [
                    "None",
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Getitem.as_const": {
            "name": "as_const",
            "location": 642,
            "return": [
                "mypy.types.CallableType",
                "str",
                "Tuple[float, float, float]"
            ],
            "arguments": {
                "self": [],
                "eval_ctx": [
                    "None",
                    "bool",
                    "Callable",
                    "cmk.utils.type_defs.Ruleset",
                    "cmk.utils.type_defs.ServiceName",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        },
        "Getitem.can_assign": {
            "name": "can_assign",
            "location": 652,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Getattr.as_const": {
            "name": "as_const",
            "location": 662,
            "return": [
                "mypy.types.CallableType",
                "str",
                "Tuple[float, float, float]"
            ],
            "arguments": {
                "self": [],
                "eval_ctx": [
                    "None",
                    "int",
                    "bool",
                    "types.Ty",
                    "type"
                ]
            }
        },
        "Getattr.can_assign": {
            "name": "can_assign",
            "location": 672,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slice.as_const": {
            "name": "as_const",
            "location": 682,
            "return": [
                "range",
                "Dict[str, int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "eval_ctx": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "Concat.as_const": {
            "name": "as_const",
            "location": 697,
            "return": [
                "mypy.types.Type",
                "str"
            ],
            "arguments": {
                "self": [],
                "eval_ctx": [
                    "str",
                    "None"
                ]
            }
        },
        "Compare.as_const": {
            "name": "as_const",
            "location": 708,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "eval_ctx": [
                    "None",
                    "purplship.core.utils.Element",
                    "str",
                    "bool"
                ]
            }
        },
        "And.as_const": {
            "name": "as_const",
            "location": 772,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "eval_ctx": [
                    "None",
                    "bool",
                    "Optional[Any]",
                    "int"
                ]
            }
        },
        "Or.as_const": {
            "name": "as_const",
            "location": 781,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "eval_ctx": [
                    "None",
                    "bool",
                    "Optional[Any]",
                    "int"
                ]
            }
        },
        "InternalName.__init__": {
            "name": "__init__",
            "location": 839,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MarkSafe.as_const": {
            "name": "as_const",
            "location": 848,
            "return": [],
            "arguments": {
                "self": [],
                "eval_ctx": [
                    "None",
                    "str",
                    "int",
                    "bool",
                    "Callable",
                    "Optional[Exception]"
                ]
            }
        },
        "MarkSafeIfAutoescape.as_const": {
            "name": "as_const",
            "location": 861,
            "return": [
                "mypy.types.Type"
            ],
            "arguments": {
                "self": [],
                "eval_ctx": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "Slice.as_const.const": {
            "name": "const",
            "location": 684,
            "return": [
                "None",
                "bool",
                "Optional[T]",
                "Optional[BaseException]",
                "str"
            ],
            "arguments": {
                "obj": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[float]",
                    "bool"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/python-jinja2/all/jinja2/optimizer.py": {
        "optimize": {
            "name": "optimize",
            "location": 23,
            "return": [
                "Sequence['cirq.Qid']",
                "SupportsFloat",
                "bool"
            ],
            "arguments": {
                "node": [
                    "mypy.nodes.MypyFile",
                    "int"
                ],
                "environment": [
                    "mypy.nodes.MypyFile",
                    "int"
                ]
            }
        },
        "Optimizer.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Optimizer.visit_If": {
            "name": "visit_If",
            "location": 35,
            "return": [
                "list",
                "mypy.nodes.CastExpr",
                "mypy.nodes.TypeApplication",
                "mypy.nodes.YieldFromExpr"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.Expression",
                    "mypy.nodes.TryStmt",
                    "Optional[mypy.nodes.SymbolTable.Node]"
                ]
            }
        },
        "Optimizer.fold": {
            "name": "fold",
            "location": 54,
            "return": [
                "str",
                "Optional[int]",
                "Optional[str]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/python-jinja2/all/jinja2/parser.py": {
        "Parser.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "source": [
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[Dict]"
                ],
                "name": [
                    "str",
                    "None"
                ],
                "filename": [
                    "None",
                    "str",
                    "bool"
                ],
                "state": [
                    "None",
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[Dict]"
                ]
            }
        },
        "Parser.fail": {
            "name": "fail",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "Callable"
                ],
                "lineno": [
                    "None",
                    "Optional[IO[bytes]]",
                    "Optional[IO[str]]",
                    "List[str]"
                ],
                "exc": [
                    "str",
                    "Callable"
                ]
            }
        },
        "Parser._fail_ut_eof": {
            "name": "_fail_ut_eof",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Optional[Iterable[str]]"
                ],
                "end_token_stack": [
                    "Optional[str]",
                    "Optional['InstrumentBase']"
                ],
                "lineno": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Parser.fail_unknown_tag": {
            "name": "fail_unknown_tag",
            "location": 83,
            "return": [
                "str",
                "type",
                "Callable",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "lineno": [
                    "str",
                    "None"
                ]
            }
        },
        "Parser.fail_eof": {
            "name": "fail_eof",
            "location": 90,
            "return": [
                "str",
                "list",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": [],
                "end_tokens": [
                    "List[Set[int]]",
                    "None"
                ],
                "lineno": [
                    "None",
                    "Union[str, Callable[[], str]]",
                    "Union[int, float, None]",
                    "Optional[str]",
                    "Iterable[Callable]",
                    "Optional[object]"
                ]
            }
        },
        "Parser.is_tuple_end": {
            "name": "is_tuple_end",
            "location": 97,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "extra_end_rules": [
                    "None",
                    "Optional[int]",
                    "float",
                    "Optional[str]",
                    "Optional[bool]"
                ]
            }
        },
        "Parser.free_identifier": {
            "name": "free_identifier",
            "location": 105,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "lineno": [
                    "None",
                    "str",
                    "dict",
                    "Optional[int]"
                ]
            }
        },
        "Parser.parse_statement": {
            "name": "parse_statement",
            "location": 112,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_statements": {
            "name": "parse_statements",
            "location": 140,
            "return": [
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "end_tokens": [
                    "str",
                    "Optional[str]",
                    "Callable"
                ],
                "drop_needle": [
                    "bool",
                    "str",
                    "List[int]",
                    "Dict[str, \"Outcome\"]"
                ]
            }
        },
        "Parser.parse_set": {
            "name": "parse_set",
            "location": 167,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_for": {
            "name": "parse_for",
            "location": 178,
            "return": [
                "str",
                "List[List[int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_if": {
            "name": "parse_if",
            "location": 197,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_block": {
            "name": "parse_block",
            "location": 218,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_extends": {
            "name": "parse_extends",
            "location": 235,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_import_context": {
            "name": "parse_import_context",
            "location": 240,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Dict[str, str]",
                    "Callable"
                ],
                "default": [
                    "mypy.nodes.TypeInfo",
                    "List[Tuple[str, Any]]"
                ]
            }
        },
        "Parser.parse_include": {
            "name": "parse_include",
            "location": 249,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_import": {
            "name": "parse_import",
            "location": 260,
            "return": [
                "Optional[int]",
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_from": {
            "name": "parse_from",
            "location": 267,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_signature": {
            "name": "parse_signature",
            "location": 306,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.NameExpr",
                    "list",
                    "List[str]"
                ]
            }
        },
        "Parser.parse_call_block": {
            "name": "parse_call_block",
            "location": 322,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_filter_block": {
            "name": "parse_filter_block",
            "location": 336,
            "return": [
                "int",
                "Iterable[str]",
                "Set[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_macro": {
            "name": "parse_macro",
            "location": 343,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_print": {
            "name": "parse_print",
            "location": 351,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_assign_target": {
            "name": "parse_assign_target",
            "location": 360,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "with_tuple": [
                    "bool",
                    "str",
                    "List[Union[int, Any]]",
                    "Optional[str]"
                ],
                "name_only": [
                    "bool",
                    "str",
                    "List[Union[int, Any]]",
                    "Optional[str]"
                ],
                "extra_end_rules": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "Parser.parse_expression": {
            "name": "parse_expression",
            "location": 384,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "with_condexpr": [
                    "bool",
                    "List[str]",
                    "Exception"
                ]
            }
        },
        "Parser.parse_condexpr": {
            "name": "parse_condexpr",
            "location": 393,
            "return": [
                "tuple",
                "mypy.nodes.Expression",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_or": {
            "name": "parse_or",
            "location": 406,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_and": {
            "name": "parse_and",
            "location": 415,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_not": {
            "name": "parse_not",
            "location": 424,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_compare": {
            "name": "parse_compare",
            "location": 430,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_add": {
            "name": "parse_add",
            "location": 452,
            "return": [
                "float",
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_sub": {
            "name": "parse_sub",
            "location": 462,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_concat": {
            "name": "parse_concat",
            "location": 472,
            "return": [
                "List[int]",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_mul": {
            "name": "parse_mul",
            "location": 482,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_div": {
            "name": "parse_div",
            "location": 492,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_floordiv": {
            "name": "parse_floordiv",
            "location": 502,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_mod": {
            "name": "parse_mod",
            "location": 512,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_pow": {
            "name": "parse_pow",
            "location": 522,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_unary": {
            "name": "parse_unary",
            "location": 532,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "with_filter": [
                    "bool",
                    "str",
                    "Optional[Any]",
                    "List[Tuple[str, float]]"
                ]
            }
        },
        "Parser.parse_primary": {
            "name": "parse_primary",
            "location": 548,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_tuple": {
            "name": "parse_tuple",
            "location": 582,
            "return": [
                "List[int]",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "simplified": [
                    "bool",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict"
                ],
                "with_condexpr": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ],
                "extra_end_rules": [
                    "None",
                    "int",
                    "Callable",
                    "str"
                ],
                "explicit_parentheses": [
                    "bool",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict"
                ]
            }
        },
        "Parser.parse_list": {
            "name": "parse_list",
            "location": 637,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_dict": {
            "name": "parse_dict",
            "location": 649,
            "return": [
                "Mapping[str, Any]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_postfix": {
            "name": "parse_postfix",
            "location": 664,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Sequence[object]"
                ]
            }
        },
        "Parser.parse_filter_expr": {
            "name": "parse_filter_expr",
            "location": 677,
            "return": [
                "mypy.nodes.Node",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Parser.parse_subscript": {
            "name": "parse_subscript",
            "location": 692,
            "return": [
                "str",
                "Optional[int]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "dict",
                    "bytes"
                ]
            }
        },
        "Parser.parse_subscribed": {
            "name": "parse_subscribed",
            "location": 718,
            "return": [
                "str",
                "mypy.nodes.Context",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_call": {
            "name": "parse_call",
            "location": 749,
            "return": [
                "tuple[typing.Optional[list]]",
                "bool",
                "int",
                "Type",
                "Type[object]",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Parser.parse_filter": {
            "name": "parse_filter",
            "location": 796,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Sequence[Any]",
                    "dict",
                    "Callable[..., None]"
                ],
                "start_inline": [
                    "float",
                    "bool"
                ]
            }
        },
        "Parser.parse_test": {
            "name": "parse_test",
            "location": 816,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]",
                "T"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict",
                    "bytes"
                ]
            }
        },
        "Parser.subparse": {
            "name": "subparse",
            "location": 847,
            "return": [
                "list",
                "int",
                "bytes",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "end_tokens": [
                    "None",
                    "Union[str, Callable[[], str]]",
                    "Union[int, float, None]",
                    "str"
                ]
            }
        },
        "Parser.parse": {
            "name": "parse",
            "location": 895,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_from.parse_context": {
            "name": "parse_context",
            "location": 273,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "Parser.parse_call.ensure": {
            "name": "ensure",
            "location": 756,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "expr": [
                    "bool",
                    "Optional[bool]",
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "Parser.subparse.flush_data": {
            "name": "flush_data",
            "location": 855,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "devhost-master/sublime-packages/python-jinja2/all/jinja2/runtime.py": {
        "markup_join": {
            "name": "markup_join",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "seq": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "unicode_join": {
            "name": "unicode_join",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "seq": [
                    "DefaultDict[int, List[Any]]",
                    "hackathon.utils.utils.DataMessage",
                    "OrderedDict",
                    "Dict[Tuple[cmk.utils.type_defs.UserId, DashboardName], DashboardConfig]"
                ]
            }
        },
        "new_context": {
            "name": "new_context",
            "location": 55,
            "return": [
                "tuple"
            ],
            "arguments": {
                "environment": [
                    "str",
                    "int",
                    "bool",
                    "Type[Any]",
                    "Optional[Iterable[Any]]",
                    "Optional[Mapping[str, Any]]"
                ],
                "template_name": [
                    "str",
                    "int",
                    "bool",
                    "Type[Any]",
                    "Optional[Iterable[Any]]",
                    "Optional[Mapping[str, Any]]"
                ],
                "blocks": [
                    "str",
                    "int",
                    "bool",
                    "Type[Any]",
                    "Optional[Iterable[Any]]",
                    "Optional[Mapping[str, Any]]"
                ],
                "vars": [
                    "Optional[float]",
                    "Sequence[Callable]",
                    "bool"
                ],
                "shared": [
                    "bool",
                    "Callable[[int], None]"
                ],
                "globals": [
                    "str",
                    "Tuple[bool]",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "locals": [
                    "bool",
                    "Optional[float]",
                    "str",
                    "List[str]",
                    "utils.ResolveType"
                ]
            }
        },
        "make_logging_undefined": {
            "name": "make_logging_undefined",
            "location": 531,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "logger": [
                    "bool",
                    "str",
                    "int",
                    "Iterable[int]"
                ],
                "base": [
                    "bool",
                    "str",
                    "int",
                    "Iterable[int]"
                ]
            }
        },
        "TemplateReference.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "TemplateReference.__getitem__": {
            "name": "__getitem__",
            "location": 82,
            "return": [
                "Optional[BaseException]",
                "Optional[T]",
                "Callable",
                "Optional[Dict]",
                "Optional[Callable]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "TemplateReference.__repr__": {
            "name": "__repr__",
            "location": 86,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Context.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "str",
                    "Union[str, Iterable[str]]",
                    "bool"
                ],
                "parent": [
                    "bool",
                    "str",
                    "Optional[mypy.nodes.TypeInfo]",
                    "Tuple[type]",
                    "Optional[Pattern]"
                ],
                "name": [
                    "str",
                    "bool",
                    "Callable",
                    "Optional[int]"
                ],
                "blocks": [
                    "str",
                    "Optional[Dict[str, str]]",
                    "List[str]",
                    "list",
                    "Iterable[str]"
                ]
            }
        },
        "Context.super": {
            "name": "super",
            "location": 128,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "current": [
                    "str",
                    "int",
                    "qutebrowser.utils.urlmatch.UrlPattern",
                    "Callable[[], Any]"
                ]
            }
        },
        "Context.get": {
            "name": "get",
            "location": 140,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "int",
                    "List[Tuple[int, int]]",
                    "Optional[str]"
                ],
                "default": [
                    "str",
                    "Optional[Any]"
                ]
            }
        },
        "Context.resolve": {
            "name": "resolve",
            "location": 149,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "Context.get_exported": {
            "name": "get_exported",
            "location": 159,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Context.get_all": {
            "name": "get_all",
            "location": 163,
            "return": [
                "bool",
                "int",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Context.call": {
            "name": "call",
            "location": 170,
            "return": [
                "bool",
                "Type",
                "mypy.nodes.TypeInfo",
                "str"
            ],
            "arguments": {
                "__self": [
                    "mypy.nodes.CallExpr",
                    "bool"
                ],
                "__obj": [
                    "mypy.nodes.Lvalue",
                    "Dict[str, Any]"
                ]
            }
        },
        "Context.derived": {
            "name": "derived",
            "location": 202,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "locals": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "Context._all": {
            "name": "_all",
            "location": 211,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "meth": [
                    "bool",
                    "Dict[str, str]",
                    "str",
                    "Tuple[str, int]"
                ]
            }
        },
        "Context.__contains__": {
            "name": "__contains__",
            "location": 228,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Context.__getitem__": {
            "name": "__getitem__",
            "location": 231,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Context.__repr__": {
            "name": "__repr__",
            "location": 240,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockReference.__init__": {
            "name": "__init__",
            "location": 259,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ],
                "context": [
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ],
                "stack": [
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ],
                "depth": [
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "BlockReference.super": {
            "name": "super",
            "location": 266,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockReference.__call__": {
            "name": "__call__",
            "location": 276,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoopContext.__init__": {
            "name": "__init__",
            "location": 286,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "iterable": [
                    "int",
                    "str"
                ],
                "recurse": [
                    "int",
                    "bool",
                    "float"
                ],
                "depth0": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "LoopContext.cycle": {
            "name": "cycle",
            "location": 302,
            "return": [
                "bool",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoopContext.__len__": {
            "name": "__len__",
            "location": 315,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoopContext.__iter__": {
            "name": "__iter__",
            "location": 318,
            "return": [
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoopContext._safe_next": {
            "name": "_safe_next",
            "location": 321,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoopContext.loop": {
            "name": "loop",
            "location": 328,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "iterable": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "LoopContext.length": {
            "name": "length",
            "location": 340,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoopContext.__repr__": {
            "name": "__repr__",
            "location": 352,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoopContextIterator.__init__": {
            "name": "__init__",
            "location": 365,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "LoopContextIterator.__iter__": {
            "name": "__iter__",
            "location": 368,
            "return": [
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoopContextIterator.__next__": {
            "name": "__next__",
            "location": 371,
            "return": [
                "str",
                "dict",
                "bool",
                "BaseException"
            ],
            "arguments": {
                "self": []
            }
        },
        "Macro.__init__": {
            "name": "__init__",
            "location": 384,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "Iterable[str]",
                    "int"
                ],
                "func": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "Iterable[str]",
                    "int"
                ],
                "name": [
                    "str",
                    "mypy.nodes.FuncDef",
                    "Optional[Sequence[Any]]"
                ],
                "arguments": [
                    "int",
                    "bool",
                    "List[Dict[str, Any]]",
                    "List[Tuple[int, int]]",
                    "List[str]"
                ],
                "defaults": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "Iterable[str]",
                    "int"
                ],
                "catch_kwargs": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "Iterable[str]",
                    "int"
                ],
                "catch_varargs": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "Iterable[str]",
                    "int"
                ],
                "caller": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "Macro.__call__": {
            "name": "__call__",
            "location": 397,
            "return": [
                "mypy.nodes.TypeInfo",
                "int",
                "Union[int, slice]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Macro.__repr__": {
            "name": "__repr__",
            "location": 438,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Undefined.__init__": {
            "name": "__init__",
            "location": 463,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hint": [
                    "int",
                    "str",
                    "bool"
                ],
                "obj": [
                    "int",
                    "str",
                    "bool"
                ],
                "name": [
                    "str",
                    "Callable[..., T]",
                    "Set[str]"
                ],
                "exc": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Undefined._fail_with_undefined_error": {
            "name": "_fail_with_undefined_error",
            "location": 470,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Undefined.__getattr__": {
            "name": "__getattr__",
            "location": 492,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Undefined.__eq__": {
            "name": "__eq__",
            "location": 504,
            "return": [
                "Type",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "dict",
                    "Type",
                    "Callable",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "Undefined.__ne__": {
            "name": "__ne__",
            "location": 507,
            "return": [
                "str",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]",
                    "raiden.utils.Any"
                ]
            }
        },
        "Undefined.__hash__": {
            "name": "__hash__",
            "location": 510,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "Undefined.__str__": {
            "name": "__str__",
            "location": 513,
            "return": [
                "int",
                "bytes",
                "mypy.nodes.FuncBase",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Undefined.__len__": {
            "name": "__len__",
            "location": 516,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Undefined.__iter__": {
            "name": "__iter__",
            "location": 519,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Undefined.__nonzero__": {
            "name": "__nonzero__",
            "location": 523,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Undefined.__repr__": {
            "name": "__repr__",
            "location": 527,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "make_logging_undefined._log_message": {
            "name": "_log_message",
            "location": 558,
            "return": [
                ""
            ],
            "arguments": {
                "undef": [
                    "Type",
                    "Optional[int]",
                    "utils.Node"
                ]
            }
        },
        "DebugUndefined.__str__": {
            "name": "__str__",
            "location": 628,
            "return": [
                "str",
                "bool",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "make_logging_undefined.LoggingUndefined._fail_with_undefined_error": {
            "name": "_fail_with_undefined_error",
            "location": 576,
            "return": [
                "Sequence[Any]",
                "Dict[str, Any]",
                "mypy.nodes.FuncBase",
                "bool",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "make_logging_undefined.LoggingUndefined.__str__": {
            "name": "__str__",
            "location": 583,
            "return": [
                "int",
                "bytes",
                "mypy.nodes.FuncBase",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "make_logging_undefined.LoggingUndefined.__iter__": {
            "name": "__iter__",
            "location": 588,
            "return": [
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "make_logging_undefined.LoggingUndefined.__nonzero__": {
            "name": "__nonzero__",
            "location": 594,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "make_logging_undefined.LoggingUndefined.__unicode__": {
            "name": "__unicode__",
            "location": 599,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "make_logging_undefined.LoggingUndefined.__bool__": {
            "name": "__bool__",
            "location": 604,
            "return": [
                "Callable",
                "bytes",
                "int",
                "IO"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/python-jinja2/all/jinja2/sandbox.py": {
        "safe_range": {
            "name": "safe_range",
            "location": 97,
            "return": [
                "range",
                "bool",
                "types.UUIDType",
                "float",
                "int"
            ],
            "arguments": {}
        },
        "unsafe": {
            "name": "unsafe",
            "location": 108,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "f": [
                    "mypy.types.Type",
                    "str",
                    "bool"
                ]
            }
        },
        "is_internal_attribute": {
            "name": "is_internal_attribute",
            "location": 121,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "Optional[Union[Any, Any]]",
                    "type",
                    "Exception",
                    "str"
                ],
                "attr": [
                    "str",
                    "List[str]",
                    "set"
                ]
            }
        },
        "modifies_known_mutable": {
            "name": "modifies_known_mutable",
            "location": 151,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "T",
                    "bool",
                    "int"
                ],
                "attr": [
                    "reader_server.types.Feed",
                    "reader_server.types.Subscription",
                    "Dict[str, Tuple[int, int]]",
                    "Set[str]",
                    "Callable",
                    "List[Dict]"
                ]
            }
        },
        "SandboxedEnvironment.intercept_unop": {
            "name": "intercept_unop",
            "location": 243,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "operator": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "SandboxedEnvironment.__init__": {
            "name": "__init__",
            "location": 261,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SandboxedEnvironment.is_safe_attribute": {
            "name": "is_safe_attribute",
            "location": 267,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str"
                ],
                "attr": [
                    "str"
                ],
                "value": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "List[Union[Any, Any]]",
                    "list",
                    "int"
                ]
            }
        },
        "SandboxedEnvironment.is_safe_callable": {
            "name": "is_safe_callable",
            "location": 276,
            "return": [
                "bool",
                "Dict[str, int]",
                "float"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Mapping",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "SandboxedEnvironment.call_binop": {
            "name": "call_binop",
            "location": 285,
            "return": [
                "bool",
                "type",
                "mypy.types.TupleType"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ],
                "operator": [
                    "float",
                    "Type"
                ],
                "left": [
                    "float",
                    "Type"
                ],
                "right": [
                    "float",
                    "Type"
                ]
            }
        },
        "SandboxedEnvironment.call_unop": {
            "name": "call_unop",
            "location": 294,
            "return": [
                "bool",
                "type",
                "mypy.types.TupleType"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ],
                "operator": [
                    "float",
                    "Type"
                ],
                "arg": [
                    "float",
                    "Type"
                ]
            }
        },
        "SandboxedEnvironment.getitem": {
            "name": "getitem",
            "location": 303,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "List[str]",
                    "list"
                ],
                "argument": [
                    "Type",
                    "Dict[str, object]",
                    "dict",
                    "str"
                ]
            }
        },
        "SandboxedEnvironment.getattr": {
            "name": "getattr",
            "location": 324,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "BaseException"
                ],
                "attribute": [
                    "str",
                    "BaseException"
                ]
            }
        },
        "SandboxedEnvironment.unsafe_undefined": {
            "name": "unsafe_undefined",
            "location": 341,
            "return": [
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str"
                ],
                "attribute": [
                    "str"
                ]
            }
        },
        "SandboxedEnvironment.call": {
            "name": "call",
            "location": 349,
            "return": [
                "bool"
            ],
            "arguments": {
                "__self": [
                    "mypy.types.CallableType",
                    "starlette.types.Send"
                ],
                "__context": [
                    "bool",
                    "tuple",
                    "List[str]"
                ],
                "__obj": [
                    "mypy.types.Type",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "ImmutableSandboxedEnvironment.is_safe_attribute": {
            "name": "is_safe_attribute",
            "location": 364,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Iterable",
                    "Optional[Iterable]",
                    "MutableMapping[str, Any]",
                    "Union[dict, List[Any]]",
                    "mypy.types.Instance",
                    "Type['Model']",
                    "dict"
                ],
                "attr": [
                    "Iterable",
                    "Optional[Iterable]",
                    "MutableMapping[str, Any]",
                    "Union[dict, List[Any]]",
                    "mypy.types.Instance",
                    "Type['Model']",
                    "dict"
                ],
                "value": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "type"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/python-jinja2/all/jinja2/tests.py": {
        "test_odd": {
            "name": "test_odd",
            "location": 24,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "value": [
                    "List[bool]",
                    "bool",
                    "str",
                    "List[List[Any]]",
                    "int"
                ]
            }
        },
        "test_even": {
            "name": "test_even",
            "location": 29,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "value": [
                    "List[bool]",
                    "bool",
                    "str",
                    "List[List[Any]]",
                    "int"
                ]
            }
        },
        "test_divisibleby": {
            "name": "test_divisibleby",
            "location": 34,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int",
                    "Dict[str, Dict[str, str]]",
                    "Optional[int]",
                    "MutableMapping"
                ],
                "num": [
                    "str",
                    "int",
                    "Dict[str, Dict[str, str]]",
                    "Optional[int]",
                    "MutableMapping"
                ]
            }
        },
        "test_defined": {
            "name": "test_defined",
            "location": 39,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "value": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "test_undefined": {
            "name": "test_undefined",
            "location": 56,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "value": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "test_none": {
            "name": "test_none",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "bool",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Optional[T]"
                ]
            }
        },
        "test_lower": {
            "name": "test_lower",
            "location": 66,
            "return": [
                "Type[Any]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "set"
                ]
            }
        },
        "test_upper": {
            "name": "test_upper",
            "location": 71,
            "return": [
                "Type[Any]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "bool",
                    "set",
                    "bytes",
                    "int"
                ]
            }
        },
        "test_string": {
            "name": "test_string",
            "location": 76,
            "return": [
                "bool",
                "int",
                "str",
                "Tuple[str, Any]",
                "Iterable[int]",
                "Type"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Type",
                    "Iterable[Hashable]",
                    "Sequence[str]",
                    "Sequence[List[Any]]"
                ]
            }
        },
        "test_mapping": {
            "name": "test_mapping",
            "location": 81,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Optional[str]",
                    "float",
                    "int"
                ]
            }
        },
        "test_number": {
            "name": "test_number",
            "location": 89,
            "return": [
                "bool",
                "str",
                "list",
                "int",
                "Callable"
            ],
            "arguments": {
                "value": [
                    "bool"
                ]
            }
        },
        "test_sequence": {
            "name": "test_sequence",
            "location": 94,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "value": [
                    "int",
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "test_equalto": {
            "name": "test_equalto",
            "location": 106,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "value": [
                    "int",
                    "str",
                    "bool"
                ],
                "other": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "test_sameas": {
            "name": "test_sameas",
            "location": 128,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "value": [
                    "int",
                    "str",
                    "bool"
                ],
                "other": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "test_iterable": {
            "name": "test_iterable",
            "location": 141,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "value": [
                    "set",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "test_escaped": {
            "name": "test_escaped",
            "location": 150,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "value": [
                    "set",
                    "str",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/python-jinja2/all/jinja2/utils.py": {
        "contextfunction": {
            "name": "contextfunction",
            "location": 41,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "f": [
                    "bool",
                    "int"
                ]
            }
        },
        "evalcontextfunction": {
            "name": "evalcontextfunction",
            "location": 57,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "f": [
                    "bool",
                    "int"
                ]
            }
        },
        "environmentfunction": {
            "name": "environmentfunction",
            "location": 70,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "f": [
                    "bool",
                    "int"
                ]
            }
        },
        "internalcode": {
            "name": "internalcode",
            "location": 80,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "f": [
                    "list",
                    "Set[str]",
                    "set",
                    "int"
                ]
            }
        },
        "is_undefined": {
            "name": "is_undefined",
            "location": 86,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "int"
                ]
            }
        },
        "consume": {
            "name": "consume",
            "location": 102,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "iterable": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "clear_caches": {
            "name": "clear_caches",
            "location": 108,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "import_string": {
            "name": "import_string",
            "location": 120,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]",
                "list",
                "Callable"
            ],
            "arguments": {
                "import_name": [
                    "str"
                ],
                "silent": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "open_if_exists": {
            "name": "open_if_exists",
            "location": 146,
            "return": [
                "typing.IO",
                "Dict[str, Dict[str, int]]",
                "Iterable[str]",
                "List[Dict]",
                "bool",
                "int"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "mode": [
                    "str",
                    "typing.Text"
                ]
            }
        },
        "object_type_repr": {
            "name": "object_type_repr",
            "location": 157,
            "return": [
                "typing.Text",
                "Type[Any]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "obj": [
                    "Optional[Mapping[str, Any]]",
                    "Optional[str]",
                    "Optional[Sequence[Any]]"
                ]
            }
        },
        "pformat": {
            "name": "pformat",
            "location": 174,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "str",
                    "dict"
                ],
                "verbose": [
                    "bool",
                    "int",
                    "Optional[int]",
                    "Optional[bool]"
                ]
            }
        },
        "urlize": {
            "name": "urlize",
            "location": 186,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int",
                    "dict"
                ],
                "trim_url_limit": [
                    "None",
                    "List[str]",
                    "Tuple[int, int]",
                    "List[Dict[str, Any]]",
                    "Dict[str, int]",
                    "str",
                    "tuple"
                ],
                "nofollow": [
                    "bool",
                    "str",
                    "Dict[str, str]",
                    "BinaryIO"
                ],
                "target": [
                    "None",
                    "Optional[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "generate_lorem_ipsum": {
            "name": "generate_lorem_ipsum",
            "location": 237,
            "return": [
                "str",
                "int",
                "Markup"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "html": [
                    "bool",
                    "int"
                ],
                "min": [
                    "int",
                    "Optional[int]"
                ],
                "max": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "unicode_urlencode": {
            "name": "unicode_urlencode",
            "location": 286,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "str",
                    "bool"
                ],
                "charset": [
                    "typing.Text",
                    "str",
                    "Union[None, str, List[str]]"
                ],
                "for_qs": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "LRUCache.__init__": {
            "name": "__init__",
            "location": 312,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "capacity": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "LRUCache._postinit": {
            "name": "_postinit",
            "location": 318,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LRUCache.__getstate__": {
            "name": "__getstate__",
            "location": 326,
            "return": [
                "dict[typing.Text, ]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LRUCache.__setstate__": {
            "name": "__setstate__",
            "location": 333,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "Dict[str, str]",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "LRUCache.__getnewargs__": {
            "name": "__getnewargs__",
            "location": 337,
            "return": [
                "tuple",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LRUCache.copy": {
            "name": "copy",
            "location": 340,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LRUCache.get": {
            "name": "get",
            "location": 347,
            "return": [
                "None",
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "int",
                    "List[Tuple[int, int]]",
                    "Optional[str]"
                ],
                "default": [
                    "None",
                    "str",
                    "Optional[Any]"
                ]
            }
        },
        "LRUCache.setdefault": {
            "name": "setdefault",
            "location": 354,
            "return": [
                "None",
                "bool",
                "str",
                "Tuple[str, int, int]",
                "Dict[str, object]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "float"
                ],
                "default": [
                    "None",
                    "str",
                    "int",
                    "Set[str]"
                ]
            }
        },
        "LRUCache.clear": {
            "name": "clear",
            "location": 368,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LRUCache.__contains__": {
            "name": "__contains__",
            "location": 377,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int"
                ]
            }
        },
        "LRUCache.__len__": {
            "name": "__len__",
            "location": 381,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LRUCache.__repr__": {
            "name": "__repr__",
            "location": 385,
            "return": [
                "typing.Text",
                "str",
                "dict",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "LRUCache.__getitem__": {
            "name": "__getitem__",
            "location": 391,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Container[str]",
                    "List[Dict[str, Any]]",
                    "bytes"
                ]
            }
        },
        "LRUCache.__setitem__": {
            "name": "__setitem__",
            "location": 413,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT"
                ]
            }
        },
        "LRUCache.__delitem__": {
            "name": "__delitem__",
            "location": 428,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "dict"
                ]
            }
        },
        "LRUCache.items": {
            "name": "items",
            "location": 443,
            "return": [
                "list[tuple]",
                "bool",
                "Tuple[int, Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LRUCache.iteritems": {
            "name": "iteritems",
            "location": 449,
            "return": [
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LRUCache.values": {
            "name": "values",
            "location": 453,
            "return": [
                "list",
                "List[str]",
                "Set[str]",
                "str",
                "Optional[dict]",
                "int",
                "Counter",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LRUCache.itervalue": {
            "name": "itervalue",
            "location": 457,
            "return": [
                "set",
                "Optional[T]",
                "FrozenSet[int]",
                "Callable",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LRUCache.keys": {
            "name": "keys",
            "location": 461,
            "return": [
                "list",
                "str",
                "List[Dict]",
                "List[int]",
                "List[str]",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LRUCache.iterkeys": {
            "name": "iterkeys",
            "location": 465,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LRUCache.__reversed__": {
            "name": "__reversed__",
            "location": 473,
            "return": [
                "set",
                "Iterator[str]",
                "Iterable[T]",
                "Iterator[int]",
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cycler.__init__": {
            "name": "__init__",
            "location": 494,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cycler.reset": {
            "name": "reset",
            "location": 500,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cycler.current": {
            "name": "current",
            "location": 505,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cycler.__next__": {
            "name": "__next__",
            "location": 509,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Joiner.__init__": {
            "name": "__init__",
            "location": 519,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sep": [
                    "typing.Text",
                    "str",
                    "List[str]",
                    "List[Dict]",
                    "List[Tuple[str, str]]",
                    "bool"
                ]
            }
        },
        "Joiner.__call__": {
            "name": "__call__",
            "location": 523,
            "return": [
                "typing.Text",
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/python-jinja2/all/jinja2/visitor.py": {
        "NodeVisitor.get_visitor": {
            "name": "get_visitor",
            "location": 26,
            "return": [
                "bool",
                "Optional[int]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Node",
                    "dict",
                    "bytes"
                ]
            }
        },
        "NodeVisitor.visit": {
            "name": "visit",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.PrintStmt",
                    "List[mypy.nodes.Expression]"
                ]
            }
        },
        "NodeVisitor.generic_visit": {
            "name": "generic_visit",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.NameExpr"
                ]
            }
        },
        "NodeTransformer.generic_visit": {
            "name": "generic_visit",
            "location": 58,
            "return": [
                "Node",
                "dcos_e2e.node.Node"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Optional[str]",
                    "mypy.nodes.TypeInfo"
                ]
            }
        },
        "NodeTransformer.visit_list": {
            "name": "visit_list",
            "location": 80,
            "return": [
                "dict",
                "list"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "devhost-master/sublime-packages/python-jinja2/all/jinja2/_compat.py": {
        "with_metaclass": {
            "name": "with_metaclass",
            "location": 88,
            "return": [
                "str",
                "type"
            ],
            "arguments": {
                "meta": [
                    "bool",
                    "str",
                    "int",
                    "Iterable[int]"
                ]
            }
        },
        "reraise": {
            "name": "reraise",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "tp": [
                    "Optional[BaseException]",
                    "Callable[[str, object], None]",
                    "Iterable[float]",
                    "bool"
                ],
                "value": [
                    "int",
                    "bool"
                ],
                "tb": [
                    "int",
                    "bool"
                ]
            }
        },
        "implements_iterator": {
            "name": "implements_iterator",
            "location": 70,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "\"Namespace\"",
                    "Type",
                    "dict",
                    "T_co"
                ]
            }
        },
        "implements_to_string": {
            "name": "implements_to_string",
            "location": 75,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[str]",
                    "str"
                ]
            }
        },
        "encode_filename": {
            "name": "encode_filename",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "with_metaclass.metaclass.__new__": {
            "name": "__new__",
            "location": 101,
            "return": [
                "Mapping[str, Any]",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[Hashable, Any]",
                    "Sequence[Any]",
                    "Mapping[str, Any]"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "tuple",
                    "Type[Any]",
                    "dict"
                ],
                "this_bases": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Dict[str, Any]]",
                    "int",
                    "Optional[Any]"
                ],
                "d": [
                    "str",
                    "Optional[str]",
                    "tuple",
                    "Type[Any]",
                    "dict"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/python-jinja2/all/jinja2/_stringdefs.py": {
        "combine": {
            "name": "combine",
            "location": 83,
            "return": [
                "str",
                "int",
                "tuple",
                "List[str]",
                "list",
                "Union[List[str], str]",
                "float"
            ],
            "arguments": {}
        },
        "allexcept": {
            "name": "allexcept",
            "location": 90,
            "return": [
                "str",
                "int",
                "tuple",
                "List[str]",
                "list",
                "Union[List[str], str]",
                "float"
            ],
            "arguments": {}
        }
    },
    "devhost-master/sublime-packages/python-jinja2/all/jinja2/__init__.py": {},
    "devhost-master/sublime-packages/python-markdown/st3/markdown/blockparser.py": {
        "State.set": {
            "name": "set",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ]
            }
        },
        "State.reset": {
            "name": "reset",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.isstate": {
            "name": "isstate",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "int",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "BlockParser.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "markdown": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "BlockParser.parseDocument": {
            "name": "parseDocument",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "List[str]",
                    "IO[str]",
                    "str",
                    "Sequence[str]",
                    "Union[List[str], str]"
                ]
            }
        },
        "BlockParser.parseChunk": {
            "name": "parseChunk",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "int"
                ],
                "text": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "BlockParser.parseBlocks": {
            "name": "parseBlocks",
            "location": 82,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "Optional[Iterable[Any]]",
                    "int",
                    "Type",
                    "str",
                    "Type[BaseException]"
                ],
                "blocks": [
                    "Optional[Iterable[Any]]",
                    "int",
                    "Type",
                    "str",
                    "Type[BaseException]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/python-markdown/st3/markdown/blockprocessors.py": {
        "build_block_parser": {
            "name": "build_block_parser",
            "location": 25,
            "return": [
                "Callable[[str, Mapping], Any]",
                "BlockParser"
            ],
            "arguments": {
                "md_instance": [
                    "str"
                ]
            }
        },
        "BlockProcessor.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "BlockProcessor.lastChild": {
            "name": "lastChild",
            "location": 56,
            "return": [
                "None",
                "bool",
                "Optional[float]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "BlockProcessor.detab": {
            "name": "detab",
            "location": 63,
            "return": [
                "tuple[str]",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "BlockProcessor.looseDetab": {
            "name": "looseDetab",
            "location": 76,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "level": [
                    "str",
                    "int"
                ]
            }
        },
        "BlockProcessor.test": {
            "name": "test",
            "location": 84,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "markdown.util.etree.Element",
                    "List[str]",
                    "Callable"
                ],
                "block": [
                    "markdown.util.etree.Element",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "BlockProcessor.run": {
            "name": "run",
            "location": 104,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "markdown.util.etree.Element",
                    "bool",
                    "Callable",
                    "Callable[..., T]"
                ],
                "blocks": [
                    "markdown.util.etree.Element",
                    "bool",
                    "Callable",
                    "Callable[..., T]"
                ]
            }
        },
        "ListIndentProcessor.__init__": {
            "name": "__init__",
            "location": 143,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListIndentProcessor.test": {
            "name": "test",
            "location": 147,
            "return": [
                "bool",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "parent": [],
                "block": []
            }
        },
        "ListIndentProcessor.run": {
            "name": "run",
            "location": 154,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "Callable",
                    "\"path\"",
                    "bool",
                    "str"
                ],
                "blocks": [
                    "List[str]",
                    "str",
                    "markdown.util.etree.Element",
                    "Dict[str, Any]"
                ]
            }
        },
        "ListIndentProcessor.create_item": {
            "name": "create_item",
            "location": 190,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "Dict[str, str]"
                ],
                "block": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "ListIndentProcessor.get_level": {
            "name": "get_level",
            "location": 195,
            "return": [
                "tuple[int]",
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "Callable",
                    "Optional[bool]",
                    "bool",
                    "Dict[str, str]"
                ],
                "block": [
                    "str",
                    "bytes",
                    "List[List[float]]"
                ]
            }
        },
        "CodeBlockProcessor.test": {
            "name": "test",
            "location": 227,
            "return": [
                "str",
                "Type[Any]"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "markdown.util.etree.Element",
                    "List[str]",
                    "Callable"
                ],
                "block": [
                    "str"
                ]
            }
        },
        "CodeBlockProcessor.run": {
            "name": "run",
            "location": 230,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "denite.util.UserContext",
                    "dict"
                ],
                "blocks": [
                    "markdown.util.etree.Element",
                    "List[str]",
                    "Exception"
                ]
            }
        },
        "BlockQuoteProcessor.test": {
            "name": "test",
            "location": 261,
            "return": [
                "bool",
                "str",
                "Optional[bool]",
                "Tuple[int, int, bool]",
                "Dict[str, Any]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "markdown.util.etree.Element",
                    "List[str]",
                    "Callable"
                ],
                "block": [
                    "str",
                    "Tuple[Any, Any, Any]",
                    "Set[str]",
                    "re.Match[str]",
                    "Optional[\"Node\"]"
                ]
            }
        },
        "BlockQuoteProcessor.run": {
            "name": "run",
            "location": 264,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "bool",
                    "str"
                ],
                "blocks": [
                    "List[str]",
                    "str",
                    "markdown.util.etree.Element",
                    "Dict[str, Any]"
                ]
            }
        },
        "BlockQuoteProcessor.clean": {
            "name": "clean",
            "location": 288,
            "return": [
                "typing.Text",
                "int",
                "bool",
                "float",
                "List[Tuple[str, str]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "Iterator[str]",
                    "List[str]",
                    "list",
                    "str"
                ]
            }
        },
        "OListProcessor.__init__": {
            "name": "__init__",
            "location": 311,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "OListProcessor.test": {
            "name": "test",
            "location": 322,
            "return": [
                "bool",
                "str",
                "Optional[bool]",
                "Tuple[int, int, bool]"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "markdown.util.etree.Element",
                    "List[str]",
                    "Callable"
                ],
                "block": [
                    "str"
                ]
            }
        },
        "OListProcessor.run": {
            "name": "run",
            "location": 325,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "Optional[Mapping[str, Any]]"
                ],
                "blocks": [
                    "Callable",
                    "str"
                ]
            }
        },
        "OListProcessor.get_items": {
            "name": "get_items",
            "location": 384,
            "return": [
                "list[typing.Text]",
                "str",
                "list",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "str",
                    "dict"
                ]
            }
        },
        "UListProcessor.__init__": {
            "name": "__init__",
            "location": 416,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "HashHeaderProcessor.test": {
            "name": "test",
            "location": 428,
            "return": [
                "bool",
                "str",
                "Optional[bool]",
                "Tuple[int, int, bool]",
                "Dict[str, Any]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "markdown.util.etree.Element",
                    "List[str]",
                    "Callable"
                ],
                "block": [
                    "str",
                    "Tuple[Any, Any, Any]",
                    "Set[str]",
                    "re.Match[str]",
                    "Optional[\"Node\"]"
                ]
            }
        },
        "HashHeaderProcessor.run": {
            "name": "run",
            "location": 431,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "Type[object]"
                ],
                "blocks": [
                    "markdown.util.etree.Element",
                    "Callable",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "SetextHeaderProcessor.test": {
            "name": "test",
            "location": 459,
            "return": [
                "bool",
                "str",
                "Optional[bool]",
                "Tuple[int, int, bool]"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "markdown.util.etree.Element",
                    "List[str]",
                    "Callable"
                ],
                "block": [
                    "str"
                ]
            }
        },
        "SetextHeaderProcessor.run": {
            "name": "run",
            "location": 462,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "Callable",
                    "List['PydanticModelField']"
                ],
                "blocks": [
                    "List[str]"
                ]
            }
        },
        "HRProcessor.test": {
            "name": "test",
            "location": 483,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "markdown.util.etree.Element",
                    "List[str]",
                    "Callable"
                ],
                "block": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "HRProcessor.run": {
            "name": "run",
            "location": 494,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str"
                ],
                "blocks": [
                    "markdown.util.etree.Element",
                    "List[str]",
                    "Exception"
                ]
            }
        },
        "EmptyBlockProcessor.test": {
            "name": "test",
            "location": 513,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "markdown.util.etree.Element",
                    "List[str]",
                    "Callable"
                ],
                "block": [
                    "markdown.util.etree.Element",
                    "List[str]",
                    "Optional[\"Node\"]",
                    "Exception"
                ]
            }
        },
        "EmptyBlockProcessor.run": {
            "name": "run",
            "location": 516,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "Optional[bytes]",
                    "type"
                ],
                "blocks": [
                    "markdown.util.etree.Element",
                    "List[str]",
                    "Exception"
                ]
            }
        },
        "ParagraphProcessor.test": {
            "name": "test",
            "location": 540,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "markdown.util.etree.Element",
                    "List[str]",
                    "Callable"
                ],
                "block": [
                    "markdown.util.etree.Element",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "ParagraphProcessor.run": {
            "name": "run",
            "location": 543,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "list",
                    "Dict[str, Any]"
                ],
                "blocks": [
                    "List[str]",
                    "str",
                    "markdown.util.etree.Element",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/python-markdown/st3/markdown/inlinepatterns.py": {
        "build_inlinepatterns": {
            "name": "build_inlinepatterns",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "md_instance": [
                    "Optional[Iterable[T]]",
                    "bool"
                ]
            }
        },
        "dequote": {
            "name": "dequote",
            "location": 163,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "handleAttributes": {
            "name": "handleAttributes",
            "location": 175,
            "return": [
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "text": [
                    "str",
                    "T",
                    "bool",
                    "Optional[str]"
                ],
                "parent": [
                    "str",
                    "bool",
                    "List[Tuple[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "handleAttributes.attributeCallback": {
            "name": "attributeCallback",
            "location": 177,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "match": [
                    "Match",
                    "List[str]",
                    "Optional[str]",
                    "Optional[Sequence[str]]",
                    "str",
                    "Match[bytes]"
                ]
            }
        },
        "Pattern.__init__": {
            "name": "__init__",
            "location": 191,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "str"
                ],
                "markdown_instance": [
                    "None",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Pattern.getCompiledRegExp": {
            "name": "getCompiledRegExp",
            "location": 209,
            "return": [
                "str",
                "MutableMapping[str, Any]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pattern.handleMatch": {
            "name": "handleMatch",
            "location": 213,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "str",
                    "Optional[str]",
                    "Iterable[T]"
                ]
            }
        },
        "Pattern.type": {
            "name": "type",
            "location": 225,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pattern.unescape": {
            "name": "unescape",
            "location": 229,
            "return": [
                "str",
                "Iterable[int]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "SimpleTextPattern.handleMatch": {
            "name": "handleMatch",
            "location": 263,
            "return": [
                "Callable[[T], bool]",
                "Iterable[T]"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "str",
                    "int"
                ]
            }
        },
        "EscapePattern.handleMatch": {
            "name": "handleMatch",
            "location": 270,
            "return": [
                "str",
                "typing.Text",
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "str",
                    "Callable[[str], str]"
                ]
            }
        },
        "SimpleTagPattern.__init__": {
            "name": "__init__",
            "location": 284,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "list",
                    "bool",
                    "float",
                    "Sequence[int]"
                ],
                "tag": [
                    "Optional[str]",
                    "bool",
                    "Optional[Callable]",
                    "str",
                    "List[str]",
                    "Optional[Exception]"
                ]
            }
        },
        "SimpleTagPattern.handleMatch": {
            "name": "handleMatch",
            "location": 288,
            "return": [
                "Callable[[T], bool]",
                "Iterable[T]"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "SubstituteTagPattern.handleMatch": {
            "name": "handleMatch",
            "location": 296,
            "return": [
                "str",
                "denite.util.UserContext",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "str",
                    "Optional[str]",
                    "Iterable[T]"
                ]
            }
        },
        "BacktickPattern.__init__": {
            "name": "__init__",
            "location": 302,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "denite.util.Nvim",
                    "bool",
                    "deoplete.util.Nvim",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "BacktickPattern.handleMatch": {
            "name": "handleMatch",
            "location": 306,
            "return": [
                "Callable[[T], bool]",
                "Iterable[T]"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "str",
                    "Dict[str, Any]",
                    "T",
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "DoubleTagPattern.handleMatch": {
            "name": "handleMatch",
            "location": 318,
            "return": [
                "Callable[[T], bool]",
                "Iterable[T]"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "Collection[int]",
                    "int",
                    "Optional[Union[str, Any, Any, Any]]"
                ]
            }
        },
        "HtmlPattern.handleMatch": {
            "name": "handleMatch",
            "location": 330,
            "return": [
                "Callable[[T], bool]",
                "Iterable[T]"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "Sequence[float]",
                    "list",
                    "str"
                ]
            }
        },
        "HtmlPattern.unescape": {
            "name": "unescape",
            "location": 335,
            "return": [
                "str",
                "Iterable[int]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "LinkPattern.handleMatch": {
            "name": "handleMatch",
            "location": 356,
            "return": [
                "Callable[[T], bool]",
                "Iterable[T]"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "Dict[str, Dict[str, int]]",
                    "int",
                    "List[int]",
                    "str"
                ]
            }
        },
        "LinkPattern.sanitize_url": {
            "name": "sanitize_url",
            "location": 374,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bytes"
                ]
            }
        },
        "ImagePattern.handleMatch": {
            "name": "handleMatch",
            "location": 423,
            "return": [
                "Callable[[T], bool]",
                "Iterable[T]"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "ReferencePattern.handleMatch": {
            "name": "handleMatch",
            "location": 450,
            "return": [
                "None",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "str",
                    "bool",
                    "Exception"
                ]
            }
        },
        "ReferencePattern.makeTag": {
            "name": "makeTag",
            "location": 469,
            "return": [
                "str",
                "int",
                "float",
                "List[int]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "href": [
                    "str",
                    "Dict[str, List[str]]",
                    "Tuple[str, str, str, str]"
                ],
                "title": [
                    "str",
                    "int"
                ],
                "text": [
                    "str",
                    "bool"
                ]
            }
        },
        "ImageReferencePattern.makeTag": {
            "name": "makeTag",
            "location": 482,
            "return": [
                "str",
                "int",
                "float",
                "List[int]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "href": [
                    "str",
                    "Dict[str, List[str]]",
                    "Tuple[str, str, str, str]"
                ],
                "title": [
                    "str",
                    "int"
                ],
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "AutolinkPattern.handleMatch": {
            "name": "handleMatch",
            "location": 497,
            "return": [
                "Callable[[T], bool]",
                "Iterable[T]"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "int",
                    "util.photolib.contentfiles.Contentfile",
                    "str",
                    "Iterable['cirq.Qid']"
                ]
            }
        },
        "AutomailPattern.handleMatch": {
            "name": "handleMatch",
            "location": 508,
            "return": [
                "Callable[[T], bool]",
                "Iterable[T]"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "str",
                    "Optional[str]",
                    "Iterable[T]"
                ]
            }
        },
        "Pattern.unescape.itertext": {
            "name": "itertext",
            "location": 236,
            "return": [
                "None",
                "Union[tuple, list]",
                "typing.Generator",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "el": [
                    "str",
                    "bool",
                    "Iterable[Sequence[str]]"
                ]
            }
        },
        "Pattern.unescape.get_stash": {
            "name": "get_stash",
            "location": 249,
            "return": [
                "str",
                "util_@_string_type",
                "Sequence[util.datetime.range.DateTimeRange]",
                "dict",
                "int"
            ],
            "arguments": {
                "m": [
                    "str",
                    "float",
                    "Dict[str, int]"
                ]
            }
        },
        "HtmlPattern.unescape.get_stash": {
            "name": "get_stash",
            "location": 342,
            "return": [
                "typing.Text",
                "str",
                "int",
                "Callable[[KT], VT]"
            ],
            "arguments": {
                "m": [
                    "str",
                    "float",
                    "Dict[str, int]"
                ]
            }
        },
        "AutomailPattern.handleMatch.codepoint2name": {
            "name": "codepoint2name",
            "location": 514,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "code": [
                    "str",
                    "dict"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/python-markdown/st3/markdown/odict.py": {
        "OrderedDict.__new__": {
            "name": "__new__",
            "location": 14,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "type",
                    "bool",
                    "Dict[str, Iterable[Any]]",
                    "int"
                ]
            }
        },
        "OrderedDict.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Optional[dict]",
                    "Dict[str, Any]",
                    "bytes",
                    "Optional[bytes]",
                    "dict",
                    "Mapping[str, str]"
                ]
            }
        },
        "OrderedDict.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 34,
            "return": [
                "List[str]",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": [],
                "memo": [
                    "dict",
                    "Dict[str, float]"
                ]
            }
        },
        "OrderedDict.__copy__": {
            "name": "__copy__",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedDict.__setitem__": {
            "name": "__setitem__",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "List[str]",
                    "Container[str]"
                ],
                "value": [
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "OrderedDict.__delitem__": {
            "name": "__delitem__",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "KT"
                ]
            }
        },
        "OrderedDict.__iter__": {
            "name": "__iter__",
            "location": 53,
            "return": [
                "List[int]",
                "bytearray",
                "Iterator[str]",
                "Iterable",
                "Iterator[T]",
                "Iterator[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedDict.__reversed__": {
            "name": "__reversed__",
            "location": 56,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedDict.pop": {
            "name": "pop",
            "location": 59,
            "return": [
                "deoplete.util.UserContext",
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "dict",
                    "str",
                    "tuple",
                    "Callable",
                    "Type",
                    "List[str]"
                ]
            }
        },
        "OrderedDict.popitem": {
            "name": "popitem",
            "location": 68,
            "return": [
                "tuple",
                "deoplete.util.UserContext",
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedDict._iteritems": {
            "name": "_iteritems",
            "location": 73,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedDict._iterkeys": {
            "name": "_iterkeys",
            "location": 77,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedDict._itervalues": {
            "name": "_itervalues",
            "location": 81,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedDict.update": {
            "name": "update",
            "location": 103,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "dict_": [
                    "Mapping[str, Any]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "OrderedDict.setdefault": {
            "name": "setdefault",
            "location": 107,
            "return": [
                "str",
                "int",
                "List[Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "List[str]",
                    "Container[str]"
                ],
                "default": [
                    "str",
                    "set",
                    "dict"
                ]
            }
        },
        "OrderedDict.value_for_index": {
            "name": "value_for_index",
            "location": 112,
            "return": [
                "str",
                "List[str]",
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "int",
                    "list",
                    "Union[List[str], str]",
                    "bool"
                ]
            }
        },
        "OrderedDict.insert": {
            "name": "insert",
            "location": 116,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "set",
                    "bool",
                    "dict",
                    "Iterable[str]",
                    "Optional[Callable[[str], Any]]",
                    "Sequence[str]"
                ],
                "key": [
                    "str",
                    "MutableMapping[Any, Any]",
                    "dict"
                ],
                "value": [
                    "str",
                    "List[Optional[Any]]",
                    "Optional[List[str]]"
                ]
            }
        },
        "OrderedDict.copy": {
            "name": "copy",
            "location": 126,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedDict.__repr__": {
            "name": "__repr__",
            "location": 131,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedDict.clear": {
            "name": "clear",
            "location": 140,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedDict.index": {
            "name": "index",
            "location": 144,
            "return": [
                "str",
                "Optional[str]",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bool",
                    "Callable[[T], T]",
                    "Union[str, list]"
                ]
            }
        },
        "OrderedDict.index_for_location": {
            "name": "index_for_location",
            "location": 151,
            "return": [
                "float",
                "int",
                "None"
            ],
            "arguments": {
                "self": [],
                "location": [
                    "str"
                ]
            }
        },
        "OrderedDict.add": {
            "name": "add",
            "location": 170,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "T",
                    "Hashable",
                    "int",
                    "Optional[int]"
                ],
                "value": [
                    "str",
                    "T",
                    "Hashable",
                    "int",
                    "Optional[int]"
                ],
                "location": [
                    "bool",
                    "str",
                    "Sequence[float]",
                    "int",
                    "Optional[Callable[[object], Any]]"
                ]
            }
        },
        "OrderedDict.link": {
            "name": "link",
            "location": 178,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "static_frame.core.util.Bloc2DKeyType",
                    "MutableMapping[Any, Any]",
                    "bytes",
                    "list",
                    "str",
                    "List[Dict[str, Any]]",
                    "dict",
                    "set"
                ],
                "location": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "OrderedDict.items": {
            "name": "items",
            "location": 94,
            "return": [
                "list[tuple]",
                "Set[str]",
                "Dict[str, Set[str]]",
                "Dict[int, Dict[int, Any]]",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedDict.keys": {
            "name": "keys",
            "location": 97,
            "return": [
                "str",
                "List[str]",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedDict.values": {
            "name": "values",
            "location": 100,
            "return": [
                "list",
                "bool",
                "Callable[[], bool]",
                "int",
                "Optional[str]",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/python-markdown/st3/markdown/postprocessors.py": {
        "build_postprocessors": {
            "name": "build_postprocessors",
            "location": 19,
            "return": [
                "bool",
                "OrderedDict"
            ],
            "arguments": {
                "md_instance": [
                    "str",
                    "int",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "Postprocessor.run": {
            "name": "run",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "RawHtmlPostprocessor.run": {
            "name": "run",
            "location": 52,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Pattern",
                    "bool"
                ]
            }
        },
        "RawHtmlPostprocessor.escape": {
            "name": "escape",
            "location": 77,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "html": [
                    "str",
                    "dict",
                    "bytes"
                ]
            }
        },
        "RawHtmlPostprocessor.isblocklevel": {
            "name": "isblocklevel",
            "location": 84,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "html": [
                    "str"
                ]
            }
        },
        "AndSubstitutePostprocessor.run": {
            "name": "run",
            "location": 97,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "UnescapePostprocessor.unescape": {
            "name": "unescape",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "UnescapePostprocessor.run": {
            "name": "run",
            "location": 110,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/python-markdown/st3/markdown/preprocessors.py": {
        "build_preprocessors": {
            "name": "build_preprocessors",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "md_instance": [
                    "bytes",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "Preprocessor.run": {
            "name": "run",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "NormalizeWhitespace.run": {
            "name": "run",
            "location": 50,
            "return": [
                "str",
                "\"path\"",
                "Optional[Union[str, Any]]",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "str",
                    "List[str]",
                    "Sequence[Any]",
                    "list"
                ]
            }
        },
        "HtmlBlockPreprocessor._get_left_tag": {
            "name": "_get_left_tag",
            "location": 76,
            "return": [
                "tuple[typing.Union[int,dict[, typing.Text]]]",
                "tuple[typing.Union[int,dict]]",
                "str",
                "Set[str]",
                "Mapping[str, Any]",
                "MutableMapping[str, Any]",
                "bool",
                "Dict[int, str]"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "str",
                    "int"
                ]
            }
        },
        "HtmlBlockPreprocessor._recursive_tagfind": {
            "name": "_recursive_tagfind",
            "location": 103,
            "return": [
                "int",
                "slice",
                "str",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "ltag": [
                    "int",
                    "Sequence[int]",
                    "str"
                ],
                "rtag": [
                    "Union[int, float]",
                    "bool",
                    "int"
                ],
                "start_index": [
                    "int",
                    "bytes"
                ],
                "block": [
                    "int",
                    "dict"
                ]
            }
        },
        "HtmlBlockPreprocessor._get_right_tag": {
            "name": "_get_right_tag",
            "location": 121,
            "return": [
                "tuple",
                "tuple[int]",
                "str",
                "List[int]",
                "bool",
                "Dict[int, str]",
                "Dict[str, Any]",
                "Set[int]",
                "Mapping[int, str]",
                "List['PydanticModelField']"
            ],
            "arguments": {
                "self": [],
                "left_tag": [
                    "bytes",
                    "Optional[List[dict]]",
                    "Optional[List[str]]",
                    "int",
                    "list",
                    "dict"
                ],
                "left_index": [
                    "bool",
                    "Optional[Tuple]",
                    "Optional[List[Any]]"
                ],
                "block": [
                    "bool",
                    "Optional[Tuple]",
                    "Optional[List[Any]]"
                ]
            }
        },
        "HtmlBlockPreprocessor._equal_tags": {
            "name": "_equal_tags",
            "location": 131,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "left_tag": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "right_tag": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "HtmlBlockPreprocessor._is_oneliner": {
            "name": "_is_oneliner",
            "location": 143,
            "return": [
                "bool",
                "Tuple[str]",
                "Dict[int, int]"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "HtmlBlockPreprocessor._stringindex_to_listindex": {
            "name": "_stringindex_to_listindex",
            "location": 146,
            "return": [
                "int",
                "slice",
                "str",
                "Optional[int]",
                "float"
            ],
            "arguments": {
                "self": [],
                "stringindex": [
                    "int",
                    "BinaryIO"
                ],
                "items": [
                    "list",
                    "List[Tuple[int, int]]",
                    "int",
                    "List[bytes]"
                ]
            }
        },
        "HtmlBlockPreprocessor._nested_markdown_in_html": {
            "name": "_nested_markdown_in_html",
            "location": 159,
            "return": [
                "list",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "Union[Sequence, 'SweepFixedValues']"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "bool",
                    "str",
                    "Union[int, slice]"
                ]
            }
        },
        "HtmlBlockPreprocessor.run": {
            "name": "run",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "lines": [
                    "List[str]",
                    "str",
                    "list"
                ]
            }
        },
        "ReferencePreprocessor.run": {
            "name": "run",
            "location": 327,
            "return": [
                "list",
                "str",
                "Callable[..., T]",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "str",
                    "Iterator[str]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/python-markdown/st3/markdown/serializers.py": {
        "_raise_serialization_error": {
            "name": "_raise_serialization_error",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "_encode": {
            "name": "_encode",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "encoding": [
                    "str"
                ]
            }
        },
        "_escape_cdata": {
            "name": "_escape_cdata",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "_escape_attrib": {
            "name": "_escape_attrib",
            "location": 106,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "_escape_attrib_html": {
            "name": "_escape_attrib_html",
            "location": 124,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "_serialize_html": {
            "name": "_serialize_html",
            "location": 140,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "write": [
                    "str"
                ],
                "elem": [
                    "str",
                    "dict",
                    "Optional[str]"
                ],
                "qnames": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Union[int, str]",
                    "Sequence[str]"
                ],
                "namespaces": [
                    "Dict[str, str]",
                    "bool",
                    "dict",
                    "Dict[str, Any]"
                ],
                "format": [
                    "str",
                    "Optional[Dict]"
                ]
            }
        },
        "_write_html": {
            "name": "_write_html",
            "location": 195,
            "return": [
                "str",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "root": [
                    "str",
                    "Optional[Tuple[str, str]]",
                    "Optional[str]"
                ],
                "encoding": [
                    "None",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Dict[str, Any]]",
                    "str"
                ],
                "default_namespace": [
                    "None",
                    "str",
                    "int"
                ],
                "format": [
                    "str",
                    "typing.Text"
                ]
            }
        },
        "_namespaces": {
            "name": "_namespaces",
            "location": 213,
            "return": [
                "tuple[typing.Union[dict[None, None],dict[None, typing.Text]]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "elem": [
                    "int",
                    "str"
                ],
                "default_namespace": [
                    "None",
                    "bool",
                    "str",
                    "int",
                    "Optional[T]",
                    "float",
                    "T",
                    "Callable[[], T]",
                    "Optional"
                ]
            }
        },
        "to_html_string": {
            "name": "to_html_string",
            "location": 277,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "element": [
                    "bytes",
                    "dict"
                ]
            }
        },
        "to_xhtml_string": {
            "name": "to_xhtml_string",
            "location": 281,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "element": [
                    "bytes",
                    "dict"
                ]
            }
        },
        "_namespaces.add_qname": {
            "name": "add_qname",
            "location": 224,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "qname": [
                    "str",
                    "type"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/python-markdown/st3/markdown/treeprocessors.py": {
        "build_treeprocessors": {
            "name": "build_treeprocessors",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {
                "md_instance": [
                    "bytes",
                    "float"
                ]
            }
        },
        "isString": {
            "name": "isString",
            "location": 16,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ]
            }
        },
        "Treeprocessor.run": {
            "name": "run",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "str",
                    "Container"
                ]
            }
        },
        "InlineProcessor.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "InlineProcessor.__makePlaceholder": {
            "name": "__makePlaceholder",
            "location": 58,
            "return": [
                "tuple[typing.Text]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Iterable[Type]",
                    "Sequence[str]",
                    "Type",
                    "str"
                ]
            }
        },
        "InlineProcessor.__findPlaceholder": {
            "name": "__findPlaceholder",
            "location": 64,
            "return": [
                "Optional[str]",
                "tuple",
                "str",
                "tuple[None]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "dict",
                    "str",
                    "Dict[str, str]",
                    "Union['Contributor', 'Coverage']",
                    "Dict[str, Any]",
                    "TextIO"
                ],
                "index": [
                    "bytes",
                    "str",
                    "dict",
                    "TextIO",
                    "Dict[str, str]"
                ]
            }
        },
        "InlineProcessor.__stashNode": {
            "name": "__stashNode",
            "location": 82,
            "return": [
                "str",
                "int",
                "float",
                "Sequence"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Optional[str]",
                    "Type[T]",
                    "Optional[float]",
                    "Optional[Dict]",
                    "str",
                    "Optional[Sequence]",
                    "int"
                ],
                "type": [
                    "str",
                    "bool",
                    "Optional[Dict]",
                    "Optional[int]",
                    "Type",
                    "int"
                ]
            }
        },
        "InlineProcessor.__handleInline": {
            "name": "__handleInline",
            "location": 88,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "Dict[str, str]"
                ],
                "patternIndex": [
                    "int",
                    "Dict[str, Any]",
                    "str",
                    "dict"
                ]
            }
        },
        "InlineProcessor.__processElementText": {
            "name": "__processElementText",
            "location": 111,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Set[str]",
                    "denite.util.Candidate.s",
                    "bytes",
                    "List[T]",
                    "int",
                    "Optional[int]"
                ],
                "subnode": [],
                "isText": [
                    "bool",
                    "str"
                ]
            }
        },
        "InlineProcessor.__processPlaceholders": {
            "name": "__processPlaceholders",
            "location": 143,
            "return": [
                "list",
                "deoplete.util.UserContext",
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "int"
                ],
                "parent": [
                    "int",
                    "List[Dict]"
                ],
                "isText": [
                    "bool",
                    "int",
                    "List[Dict]"
                ]
            }
        },
        "InlineProcessor.__applyPattern": {
            "name": "__applyPattern",
            "location": 218,
            "return": [
                "bool",
                "tuple[bool]",
                "int",
                "tuple[typing.Union[typing.Text,bool]]"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "Dict[str, Any]",
                    "Counter[Any]",
                    "VT"
                ],
                "data": [
                    "int",
                    "Sequence[Sequence[Any]]",
                    "str",
                    "float",
                    "dict",
                    "Dict[str, Any]"
                ],
                "patternIndex": [
                    "int",
                    "bool"
                ],
                "startIndex": [
                    "int",
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "InlineProcessor.run": {
            "name": "run",
            "location": 264,
            "return": [],
            "arguments": {
                "self": [],
                "tree": []
            }
        },
        "PrettifyTreeprocessor._prettifyETree": {
            "name": "_prettifyETree",
            "location": 339,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "elem": [
                    "type",
                    "str"
                ]
            }
        },
        "PrettifyTreeprocessor.run": {
            "name": "run",
            "location": 355,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "str"
                ]
            }
        },
        "InlineProcessor.__processPlaceholders.linkText": {
            "name": "linkText",
            "location": 155,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/python-markdown/st3/markdown/util.py": {
        "isBlockLevel": {
            "name": "isBlockLevel",
            "location": 87,
            "return": [
                "bool",
                "Optional[Dict[str, str]]",
                "Type",
                "Mapping[str, str]",
                "List[str]"
            ],
            "arguments": {
                "tag": [
                    "str",
                    "int",
                    "bool",
                    "Union[List[str], str]",
                    "List[str]"
                ]
            }
        },
        "parseBoolValue": {
            "name": "parseBoolValue",
            "location": 95,
            "return": [
                "bool",
                "None",
                "list",
                "int"
            ],
            "arguments": {
                "value": [
                    "Optional[Union[int, float]]",
                    "Sequence[str]",
                    "Optional[Iterable[str]]",
                    "Optional[Type]",
                    "Optional[str]"
                ],
                "fail_on_errors": [
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "type",
                    "Dict[str, Any]"
                ],
                "preserve_none": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "Optional[float]",
                    "Optional[Sequence[Any]]",
                    "dict",
                    "Optional[Union[str, Any]]"
                ]
            }
        },
        "Processor.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "markdown_instance": [
                    "None",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "HtmlStash.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HtmlStash.store": {
            "name": "store",
            "location": 144,
            "return": [
                "int",
                "str",
                "Optional[str]",
                "Tuple[str, int]",
                "bytearray"
            ],
            "arguments": {
                "self": [],
                "html": [
                    "str",
                    "Callable",
                    "Dict[str, Any]",
                    "Callable[..., bool]"
                ],
                "safe": [
                    "bool",
                    "str",
                    "Callable",
                    "Dict[str, Any]",
                    "Callable[..., bool]"
                ]
            }
        },
        "HtmlStash.reset": {
            "name": "reset",
            "location": 163,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HtmlStash.get_placeholder": {
            "name": "get_placeholder",
            "location": 167,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]",
                "bytes",
                "int",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Hashable"
                ]
            }
        },
        "HtmlStash.store_tag": {
            "name": "store_tag",
            "location": 170,
            "return": [
                "typing.Text",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "List[str]"
                ],
                "attrs": [
                    "str",
                    "List[str]"
                ],
                "left_index": [
                    "str",
                    "List[str]"
                ],
                "right_index": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/python-markdown/st3/markdown/__init__.py": {
        "markdown": {
            "name": "markdown",
            "location": 478,
            "return": [
                "str",
                "Iterable[int]",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "bool"
                ]
            }
        },
        "markdownFromFile": {
            "name": "markdownFromFile",
            "location": 497,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "Markdown.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Markdown.build_parser": {
            "name": "build_parser",
            "location": 163,
            "return": [
                "bool",
                "Markdown"
            ],
            "arguments": {
                "self": []
            }
        },
        "Markdown.registerExtensions": {
            "name": "registerExtensions",
            "location": 172,
            "return": [
                "Markdown",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "extensions": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "configs": [
                    "str",
                    "Union[str, Dict]"
                ]
            }
        },
        "Markdown.build_extension": {
            "name": "build_extension",
            "location": 199,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "ext_name": [
                    "str"
                ],
                "configs": [
                    "str",
                    "Dict[str, Any]",
                    "Union[Type, Tuple[Type, ...]]",
                    "MutableMapping[str, Any]",
                    "Sequence[str]",
                    "dict",
                    "Optional[Dict]"
                ]
            }
        },
        "Markdown.registerExtension": {
            "name": "registerExtension",
            "location": 299,
            "return": [
                "Markdown",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "extension": [
                    "str",
                    "list",
                    "tuple",
                    "Callable[[], None]"
                ]
            }
        },
        "Markdown.reset": {
            "name": "reset",
            "location": 304,
            "return": [
                "Markdown",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Markdown.set_output_format": {
            "name": "set_output_format",
            "location": 317,
            "return": [
                "Markdown",
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "format": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Markdown.convert": {
            "name": "convert",
            "location": 332,
            "return": [
                "typing.Text",
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ]
            }
        },
        "Markdown.convertFile": {
            "name": "convertFile",
            "location": 402,
            "return": [
                "Markdown",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "str",
                    "None"
                ],
                "output": [
                    "str",
                    "None"
                ],
                "encoding": [
                    "None",
                    "str",
                    "bytes",
                    "TextIO"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/python-markdown/st3/markdown/__main__.py": {
        "parse_options": {
            "name": "parse_options",
            "location": 23,
            "return": [
                "tuple[dict[typing.Text, typing.Union[None,list,dict]]]",
                "bool",
                "Optional[Any]"
            ],
            "arguments": {
                "args": [
                    "None"
                ],
                "values": [
                    "None",
                    "List[str]",
                    "int",
                    "str",
                    "Optional[List[str]]",
                    "tuple"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 112,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "devhost-master/sublime-packages/python-markdown/st3/markdown/__version__.py": {
        "_get_version": {
            "name": "_get_version",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "devhost-master/sublime-packages/python-markdown/st3/markdown/extensions/abbr.py": {
        "makeExtension": {
            "name": "makeExtension",
            "location": 90,
            "return": [
                "List[List[str]]",
                "AbbrExtension"
            ],
            "arguments": {}
        },
        "AbbrExtension.extendMarkdown": {
            "name": "extendMarkdown",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "str",
                    "int",
                    "VT"
                ],
                "md_globals": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "AbbrPreprocessor.run": {
            "name": "run",
            "location": 42,
            "return": [
                "list",
                "str",
                "Callable[..., T]",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "AbbrPreprocessor._generate_pattern": {
            "name": "_generate_pattern",
            "location": 60,
            "return": [
                "typing.Text",
                "str",
                "Sequence[str]",
                "int",
                "Set[str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "AbbrPattern.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "str",
                    "bytes",
                    "Iterable[str]"
                ],
                "title": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "AbbrPattern.handleMatch": {
            "name": "handleMatch",
            "location": 83,
            "return": [
                "Callable[[T], bool]",
                "Iterable[T]"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/python-markdown/st3/markdown/extensions/admonition.py": {
        "makeExtension": {
            "name": "makeExtension",
            "location": 95,
            "return": [
                "List[List[str]]",
                "AdmonitionExtension"
            ],
            "arguments": {}
        },
        "AdmonitionExtension.extendMarkdown": {
            "name": "extendMarkdown",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "str",
                    "tuple",
                    "NamedTuple",
                    "bool"
                ],
                "md_globals": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "AdmonitionProcessor.test": {
            "name": "test",
            "location": 46,
            "return": [
                "Callable",
                "bool"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "Hashable",
                    "Tuple[Type]"
                ],
                "block": [
                    "str",
                    "Any",
                    "Optional[Mapping[str, Any]]",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "AdmonitionProcessor.run": {
            "name": "run",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "bool",
                    "List[str]",
                    "str",
                    "lxml.etree._ElementTree"
                ],
                "blocks": [
                    "markdown.util.etree.Element",
                    "List[str]",
                    "Exception"
                ]
            }
        },
        "AdmonitionProcessor.get_class_and_title": {
            "name": "get_class_and_title",
            "location": 81,
            "return": [
                "str",
                "tuple[None]"
            ],
            "arguments": {
                "self": [],
                "match": [
                    "str",
                    "lxml.etree",
                    "Optional[Callable[[Any, Any], None]]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/python-markdown/st3/markdown/extensions/attr_list.py": {
        "_handle_double_quote": {
            "name": "_handle_double_quote",
            "location": 34,
            "return": [
                "tuple",
                "float",
                "bool",
                "Optional[Sequence[str]]",
                "Optional[Callable]",
                "Optional[int]"
            ],
            "arguments": {
                "s": [
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "t": [
                    "str",
                    "Set[str]",
                    "set"
                ]
            }
        },
        "_handle_single_quote": {
            "name": "_handle_single_quote",
            "location": 39,
            "return": [
                "tuple",
                "float",
                "bool",
                "Optional[Sequence[str]]",
                "Optional[Callable]",
                "Optional[int]"
            ],
            "arguments": {
                "s": [
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "t": [
                    "str",
                    "Set[str]",
                    "set"
                ]
            }
        },
        "_handle_key_value": {
            "name": "_handle_key_value",
            "location": 44,
            "return": [
                "str",
                "int",
                "Tuple[str, str]"
            ],
            "arguments": {
                "s": [
                    "List[Type]",
                    "List[str]"
                ],
                "t": [
                    "str",
                    "float",
                    "type"
                ]
            }
        },
        "_handle_word": {
            "name": "_handle_word",
            "location": 48,
            "return": [
                "bool",
                "tuple[typing.Text]",
                "tuple"
            ],
            "arguments": {
                "s": [
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "t": [
                    "str",
                    "List[str]",
                    "set"
                ]
            }
        },
        "get_attrs": {
            "name": "get_attrs",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "str": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "isheader": {
            "name": "isheader",
            "location": 69,
            "return": [
                "bool"
            ],
            "arguments": {
                "elem": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "makeExtension": {
            "name": "makeExtension",
            "location": 176,
            "return": [
                "str",
                "AttrListExtension"
            ],
            "arguments": {}
        },
        "AttrListTreeprocessor.run": {
            "name": "run",
            "location": 85,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "str",
                    "int",
                    "bool",
                    "list"
                ]
            }
        },
        "AttrListTreeprocessor.assign_attrs": {
            "name": "assign_attrs",
            "location": 147,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "elem": [
                    "dict",
                    "Callable[[T], bool]",
                    "Dict[str, \"Outcome\"]"
                ],
                "attrs": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "AttrListTreeprocessor.sanitize_name": {
            "name": "sanitize_name",
            "location": 161,
            "return": [
                "str",
                "bool",
                "type"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "AttrListExtension.extendMarkdown": {
            "name": "extendMarkdown",
            "location": 170,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "str",
                    "Optional[str]"
                ],
                "md_globals": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/python-markdown/st3/markdown/extensions/codehilite.py": {
        "parse_hl_lines": {
            "name": "parse_hl_lines",
            "location": 32,
            "return": [
                "list",
                "List[str]",
                "set",
                "bool",
                "Dict[str, Any]",
                "Optional[int]",
                "Iterable"
            ],
            "arguments": {
                "expr": [
                    "bytes",
                    "int",
                    "str"
                ]
            }
        },
        "makeExtension": {
            "name": "makeExtension",
            "location": 264,
            "return": [
                "CodeHiliteExtension",
                "str",
                "MutableMapping[str, Any]",
                "Iterable[int]",
                "bool"
            ],
            "arguments": {}
        },
        "CodeHilite.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "None",
                    "int",
                    "str",
                    "Optional[str]",
                    "slice",
                    "List[str]",
                    "dict"
                ],
                "linenums": [
                    "None",
                    "int",
                    "str",
                    "Optional[str]",
                    "slice",
                    "List[str]",
                    "dict"
                ],
                "guess_lang": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]",
                    "slice",
                    "List[str]",
                    "dict"
                ],
                "css_class": [
                    "typing.Text",
                    "str",
                    "bool",
                    "Dict[str, Union[str, int]]"
                ],
                "lang": [
                    "None",
                    "int",
                    "str",
                    "Optional[str]",
                    "slice",
                    "List[str]",
                    "dict"
                ],
                "style": [
                    "typing.Text",
                    "int",
                    "str",
                    "Optional[str]",
                    "slice",
                    "List[str]",
                    "dict"
                ],
                "noclasses": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]",
                    "slice",
                    "List[str]",
                    "dict"
                ],
                "tab_length": [
                    "int",
                    "str",
                    "Optional[str]",
                    "slice",
                    "List[str]",
                    "dict"
                ],
                "hl_lines": [
                    "None",
                    "int",
                    "str",
                    "Optional[str]",
                    "slice",
                    "List[str]",
                    "dict"
                ],
                "use_pygments": [
                    "bool",
                    "float",
                    "T",
                    "Optional[str]"
                ]
            }
        },
        "CodeHilite.hilite": {
            "name": "hilite",
            "location": 90,
            "return": [
                "typing.Text",
                "str",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodeHilite._parseHeader": {
            "name": "_parseHeader",
            "location": 141,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HiliteTreeprocessor.run": {
            "name": "run",
            "location": 203,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "bool",
                    "str",
                    "IO"
                ]
            }
        },
        "CodeHiliteExtension.__init__": {
            "name": "__init__",
            "location": 231,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodeHiliteExtension.extendMarkdown": {
            "name": "extendMarkdown",
            "location": 255,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "str",
                    "int",
                    "Callable"
                ],
                "md_globals": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/python-markdown/st3/markdown/extensions/def_list.py": {
        "makeExtension": {
            "name": "makeExtension",
            "location": 114,
            "return": [
                "DefListExtension",
                "int",
                "str",
                "list",
                "tuple",
                "bool",
                "List[Tuple]",
                "List[str]"
            ],
            "arguments": {}
        },
        "DefListProcessor.test": {
            "name": "test",
            "location": 32,
            "return": [
                "bool",
                "str",
                "Optional[bool]",
                "Tuple[int, int, bool]",
                "Dict[str, Any]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "markdown.util.etree.Element",
                    "List[str]",
                    "Callable"
                ],
                "block": [
                    "str",
                    "Tuple[Any, Any, Any]",
                    "Set[str]",
                    "re.Match[str]",
                    "Optional[\"Node\"]"
                ]
            }
        },
        "DefListProcessor.run": {
            "name": "run",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "parent": [],
                "blocks": [
                    "markdown.util.etree.Element"
                ]
            }
        },
        "DefListIndentProcessor.create_item": {
            "name": "create_item",
            "location": 95,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "bool",
                    "List[str]",
                    "Callable[..., None]",
                    "dict"
                ],
                "block": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "DefListExtension.extendMarkdown": {
            "name": "extendMarkdown",
            "location": 104,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "str",
                    "tuple",
                    "bool"
                ],
                "md_globals": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/python-markdown/st3/markdown/extensions/extra.py": {
        "makeExtension": {
            "name": "makeExtension",
            "location": 72,
            "return": [
                "List[List[str]]",
                "ExtraExtension"
            ],
            "arguments": {}
        },
        "ExtraExtension.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtraExtension.extendMarkdown": {
            "name": "extendMarkdown",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "bytes"
                ],
                "md_globals": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "MarkdownInHtmlProcessor.test": {
            "name": "test",
            "location": 78,
            "return": [
                "bool",
                "Mapping[str, Any]",
                "type",
                "Type[Any]"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "markdown.util.etree.Element",
                    "List[str]",
                    "Callable"
                ],
                "block": [
                    "str",
                    "int",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "MarkdownInHtmlProcessor._process_nests": {
            "name": "_process_nests",
            "location": 82,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "bool",
                    "T"
                ],
                "block": [
                    "bool",
                    "T"
                ]
            }
        },
        "MarkdownInHtmlProcessor.run": {
            "name": "run",
            "location": 100,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "type"
                ],
                "blocks": [
                    "int"
                ],
                "tail": [
                    "None",
                    "str",
                    "Callable",
                    "List['PydanticModelField']",
                    "Dict[str, str]"
                ],
                "nest": [
                    "bool",
                    "markdown.util.etree.Element",
                    "Callable",
                    "Callable[..., T]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/python-markdown/st3/markdown/extensions/fenced_code.py": {
        "makeExtension": {
            "name": "makeExtension",
            "location": 112,
            "return": [
                "FencedCodeExtension",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "FencedCodeExtension.extendMarkdown": {
            "name": "extendMarkdown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "int"
                ],
                "md_globals": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "FencedBlockPreprocessor.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "str"
                ]
            }
        },
        "FencedBlockPreprocessor.run": {
            "name": "run",
            "location": 55,
            "return": [
                "str",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "List[str]",
                    "str",
                    "list"
                ]
            }
        },
        "FencedBlockPreprocessor._escape": {
            "name": "_escape",
            "location": 103,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "txt": [
                    "str",
                    "dict",
                    "bytes"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/python-markdown/st3/markdown/extensions/footnotes.py": {
        "makeExtension": {
            "name": "makeExtension",
            "location": 319,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {}
        },
        "FootnoteExtension.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FootnoteExtension.extendMarkdown": {
            "name": "extendMarkdown",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "md": [],
                "md_globals": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "FootnoteExtension.reset": {
            "name": "reset",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FootnoteExtension.findFootnotesPlaceholder": {
            "name": "findFootnotesPlaceholder",
            "location": 89,
            "return": [
                "list",
                "dict",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "str",
                    "Optional[Tuple[int, int]]",
                    "bool"
                ]
            }
        },
        "FootnoteExtension.setFootnote": {
            "name": "setFootnote",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "Optional[bool]"
                ],
                "text": [
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "Optional[bool]"
                ]
            }
        },
        "FootnoteExtension.get_separator": {
            "name": "get_separator",
            "location": 111,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FootnoteExtension.makeFootnoteId": {
            "name": "makeFootnoteId",
            "location": 116,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ]
            }
        },
        "FootnoteExtension.makeFootnoteRefId": {
            "name": "makeFootnoteRefId",
            "location": 123,
            "return": [
                "str",
                "Dict[str, Any]",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ]
            }
        },
        "FootnoteExtension.makeFootnotesDiv": {
            "name": "makeFootnotesDiv",
            "location": 131,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "Sequence[str]",
                    "dict",
                    "List[List[xml.etree.ElementTree.Element]]",
                    "int"
                ]
            }
        },
        "FootnotePreprocessor.__init__": {
            "name": "__init__",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "footnotes": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "FootnotePreprocessor.run": {
            "name": "run",
            "location": 175,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "FootnotePreprocessor.detectTabbed": {
            "name": "detectTabbed",
            "location": 203,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "List[str]",
                    "Optional[int]",
                    "List[List[int]]"
                ]
            }
        },
        "FootnotePattern.__init__": {
            "name": "__init__",
            "location": 264,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "str",
                    "bytes",
                    "Iterable[str]"
                ],
                "footnotes": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "FootnotePattern.handleMatch": {
            "name": "handleMatch",
            "location": 268,
            "return": [
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "str",
                    "Dict[str, str]",
                    "int"
                ]
            }
        },
        "FootnoteTreeprocessor.__init__": {
            "name": "__init__",
            "location": 287,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "footnotes": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "FootnoteTreeprocessor.run": {
            "name": "run",
            "location": 290,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "root": [
                    "dict"
                ]
            }
        },
        "FootnotePostprocessor.__init__": {
            "name": "__init__",
            "location": 309,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "footnotes": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "FootnotePostprocessor.run": {
            "name": "run",
            "location": 312,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "FootnoteExtension.findFootnotesPlaceholder.finder": {
            "name": "finder",
            "location": 91,
            "return": [
                "bool",
                "tuple",
                "Dict[str, Any]"
            ],
            "arguments": {
                "element": [
                    "float",
                    "str",
                    "bool",
                    "int",
                    "Optional[List[str]]"
                ]
            }
        },
        "FootnotePreprocessor.detectTabbed.detab": {
            "name": "detab",
            "location": 217,
            "return": [
                "Dict[str, Any]",
                "bool",
                "denite.util.UserContext",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "line": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/python-markdown/st3/markdown/extensions/headerid.py": {
        "makeExtension": {
            "name": "makeExtension",
            "location": 96,
            "return": [
                "HeaderIdExtension",
                "str",
                "Optional[Any]",
                "bool",
                "Union[int, float, complex]"
            ],
            "arguments": {}
        },
        "HeaderIdTreeprocessor.run": {
            "name": "run",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "str",
                    "bool"
                ]
            }
        },
        "HeaderIdTreeprocessor._get_meta": {
            "name": "_get_meta",
            "location": 51,
            "return": [
                "tuple[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeaderIdExtension.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeaderIdExtension.extendMarkdown": {
            "name": "extendMarkdown",
            "location": 80,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "int",
                    "float"
                ],
                "md_globals": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "HeaderIdExtension.reset": {
            "name": "reset",
            "location": 92,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/python-markdown/st3/markdown/extensions/meta.py": {
        "makeExtension": {
            "name": "makeExtension",
            "location": 77,
            "return": [
                "List[List[str]]",
                "MetaExtension"
            ],
            "arguments": {}
        },
        "MetaExtension.extendMarkdown": {
            "name": "extendMarkdown",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "str",
                    "int",
                    "VT"
                ],
                "md_globals": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "MetaPreprocessor.run": {
            "name": "run",
            "location": 47,
            "return": [
                "list[int]",
                "str",
                "list",
                "Iterable[str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/python-markdown/st3/markdown/extensions/nl2br.py": {
        "makeExtension": {
            "name": "makeExtension",
            "location": 34,
            "return": [
                "Nl2BrExtension",
                "List[str]",
                "int",
                "List[List[str]]",
                "bool"
            ],
            "arguments": {}
        },
        "Nl2BrExtension.extendMarkdown": {
            "name": "extendMarkdown",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "List[int]",
                    "Union[tuple, list]",
                    "list"
                ],
                "md_globals": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/python-markdown/st3/markdown/extensions/sane_lists.py": {
        "makeExtension": {
            "name": "makeExtension",
            "location": 54,
            "return": [
                "SaneListExtension",
                "int",
                "str",
                "list",
                "tuple",
                "bool",
                "List[Tuple]",
                "List[str]"
            ],
            "arguments": {}
        },
        "SaneOListProcessor.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "SaneUListProcessor.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "SaneListExtension.extendMarkdown": {
            "name": "extendMarkdown",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "str",
                    "tuple"
                ],
                "md_globals": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/python-markdown/st3/markdown/extensions/smarty.py": {
        "makeExtension": {
            "name": "makeExtension",
            "location": 267,
            "return": [
                "SmartyExtension"
            ],
            "arguments": {}
        },
        "SubstituteTextPattern.__init__": {
            "name": "__init__",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pattern": [],
                "replace": [],
                "markdown_instance": []
            }
        },
        "SubstituteTextPattern.handleMatch": {
            "name": "handleMatch",
            "location": 160,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "SmartyExtension.__init__": {
            "name": "__init__",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmartyExtension._addPatterns": {
            "name": "_addPatterns",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [],
                "patterns": [],
                "serie": []
            }
        },
        "SmartyExtension.educateDashes": {
            "name": "educateDashes",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "md": []
            }
        },
        "SmartyExtension.educateEllipses": {
            "name": "educateEllipses",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "md": []
            }
        },
        "SmartyExtension.educateAngledQuotes": {
            "name": "educateAngledQuotes",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "md": []
            }
        },
        "SmartyExtension.educateQuotes": {
            "name": "educateQuotes",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "md": []
            }
        },
        "SmartyExtension.extendMarkdown": {
            "name": "extendMarkdown",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [],
                "md_globals": []
            }
        }
    },
    "devhost-master/sublime-packages/python-markdown/st3/markdown/extensions/smart_strong.py": {
        "makeExtension": {
            "name": "makeExtension",
            "location": 40,
            "return": [
                "SmartEmphasisExtension",
                "List[str]",
                "int",
                "List[List[str]]",
                "bool"
            ],
            "arguments": {}
        },
        "SmartEmphasisExtension.extendMarkdown": {
            "name": "extendMarkdown",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "str",
                    "dict"
                ],
                "md_globals": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/python-markdown/st3/markdown/extensions/tables.py": {
        "makeExtension": {
            "name": "makeExtension",
            "location": 144,
            "return": [
                "TableExtension",
                "Optional[str]",
                "bool",
                "str",
                "list",
                "Optional[List[str]]"
            ],
            "arguments": {}
        },
        "TableProcessor.test": {
            "name": "test",
            "location": 29,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "markdown.util.etree.Element",
                    "List[str]",
                    "Callable"
                ],
                "block": [
                    "markdown.util.etree.Element",
                    "str",
                    "bool"
                ]
            }
        },
        "TableProcessor.run": {
            "name": "run",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "Tuple[int, str]",
                    "Callable[..., None]",
                    "List[List[xml.etree.ElementTree.Element]]"
                ],
                "blocks": [
                    "str",
                    "Type[T]",
                    "Exception"
                ]
            }
        },
        "TableProcessor._build_row": {
            "name": "_build_row",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "List[str]",
                    "list",
                    "List[T]",
                    "Set[str]",
                    "bool"
                ],
                "parent": [
                    "str",
                    "bool",
                    "Union[int, str]",
                    "Dict[str, Dict]"
                ],
                "align": [
                    "int",
                    "bool",
                    "List[str]"
                ],
                "border": [
                    "List[str]",
                    "list",
                    "List[T]",
                    "Set[str]",
                    "bool"
                ]
            }
        },
        "TableProcessor._split_row": {
            "name": "_split_row",
            "location": 82,
            "return": [
                "int",
                "Optional[List[str]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Callable[[str], str]",
                    "Dict[str, str]"
                ],
                "border": [
                    "int",
                    "str",
                    "Iterable",
                    "Iterator[Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "TableProcessor._split": {
            "name": "_split",
            "location": 91,
            "return": [
                "list[typing.Text]",
                "bool",
                "Sequence[str]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "str",
                    "int"
                ],
                "marker": [
                    "str",
                    "Dict[str, Any]",
                    "Iterable[Iterable[str]]",
                    "dict"
                ]
            }
        },
        "TableProcessor._row_has_unpaired_backticks": {
            "name": "_row_has_unpaired_backticks",
            "location": 125,
            "return": [
                "int",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "bytes",
                    "Dict[str, str]",
                    "List[List[int]]"
                ]
            }
        },
        "TableExtension.extendMarkdown": {
            "name": "extendMarkdown",
            "location": 137,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "int",
                    "List[str]",
                    "dict"
                ],
                "md_globals": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/python-markdown/st3/markdown/extensions/toc.py": {
        "slugify": {
            "name": "slugify",
            "location": 25,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "value": [
                    "str",
                    "bool"
                ],
                "separator": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "Optional[int]",
                    "Union[str, bytes]",
                    "float",
                    "int"
                ]
            }
        },
        "unique": {
            "name": "unique",
            "location": 35,
            "return": [
                "typing.Text",
                "int",
                "str"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int",
                    "bool"
                ],
                "ids": [
                    "str"
                ]
            }
        },
        "stashedHTML2text": {
            "name": "stashedHTML2text",
            "location": 47,
            "return": [
                "Iterable[int]",
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Tuple[int, int]",
                    "int"
                ],
                "md": [
                    "str",
                    "Optional[str]",
                    "Iterable[Tuple[int, int]]"
                ]
            }
        },
        "nest_toc_tokens": {
            "name": "nest_toc_tokens",
            "location": 63,
            "return": [
                "list",
                "List[Dict]",
                "List[str]",
                "Union[str, List[Any]]",
                "str",
                "bool",
                "List[int]",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "toc_list": [
                    "T",
                    "dict",
                    "Union[str, List[str]]"
                ]
            }
        },
        "makeExtension": {
            "name": "makeExtension",
            "location": 309,
            "return": [
                "List[List[str]]",
                "TocExtension"
            ],
            "arguments": {}
        },
        "stashedHTML2text._html_sub": {
            "name": "_html_sub",
            "location": 49,
            "return": [
                "typing.Text",
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "m": []
            }
        },
        "TocTreeprocessor.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "Optional[int]",
                    "Optional[str]",
                    "dict"
                ],
                "config": [
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "TocTreeprocessor.iterparent": {
            "name": "iterparent",
            "location": 142,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "Sized"
                ]
            }
        },
        "TocTreeprocessor.replace_marker": {
            "name": "replace_marker",
            "location": 148,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "Sized"
                ],
                "elem": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "TocTreeprocessor.set_level": {
            "name": "set_level",
            "location": 168,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "elem": [
                    "str",
                    "int",
                    "Dict[str, int]",
                    "List[Dict]"
                ]
            }
        },
        "TocTreeprocessor.add_anchor": {
            "name": "add_anchor",
            "location": 175,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "str",
                    "Union[List, str]",
                    "Union[tuple, list]",
                    "static_frame.core.util.DepthLevelSpecifier",
                    "int"
                ],
                "elem_id": [
                    "str",
                    "int",
                    "Tuple[Optional[str], str]",
                    "Union[int,str]"
                ]
            }
        },
        "TocTreeprocessor.add_permalink": {
            "name": "add_permalink",
            "location": 187,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "list",
                    "int",
                    "str",
                    "Callable",
                    "List[int]",
                    "bytes"
                ],
                "elem_id": [
                    "str",
                    "int",
                    "Tuple[Optional[str], str]",
                    "Union[int,str]"
                ]
            }
        },
        "TocTreeprocessor.build_toc_div": {
            "name": "build_toc_div",
            "location": 197,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "toc_list": [
                    "Iterable[str]",
                    "int",
                    "List[List[Any]]"
                ]
            }
        },
        "TocTreeprocessor.run": {
            "name": "run",
            "location": 226,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "str",
                    "int",
                    "bool",
                    "list"
                ]
            }
        },
        "TocExtension.__init__": {
            "name": "__init__",
            "location": 270,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TocExtension.extendMarkdown": {
            "name": "extendMarkdown",
            "location": 293,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [],
                "md_globals": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TocExtension.reset": {
            "name": "reset",
            "location": 305,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TocTreeprocessor.build_toc_div.build_etree_ul": {
            "name": "build_etree_ul",
            "location": 208,
            "return": [
                "bool"
            ],
            "arguments": {
                "toc_list": [
                    "bool",
                    "str",
                    "List[str]",
                    "Callable"
                ],
                "parent": [
                    "List[str]",
                    "bool",
                    "dict"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/python-markdown/st3/markdown/extensions/wikilinks.py": {
        "build_url": {
            "name": "build_url",
            "location": 26,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "label": [
                    "str",
                    "int"
                ],
                "base": [
                    "str",
                    "bytes",
                    "dict"
                ],
                "end": [
                    "str",
                    "bytes",
                    "dict"
                ]
            }
        },
        "makeExtension": {
            "name": "makeExtension",
            "location": 88,
            "return": [
                "WikiLinkExtension",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "WikiLinkExtension.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WikiLinkExtension.extendMarkdown": {
            "name": "extendMarkdown",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "float",
                    "list"
                ],
                "md_globals": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "WikiLinks.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "Dict[str, Any]",
                    "dict",
                    "Optional[dict]"
                ],
                "config": [
                    "dict"
                ]
            }
        },
        "WikiLinks.handleMatch": {
            "name": "handleMatch",
            "location": 59,
            "return": [
                "bool",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "xml.etree.ElementTree.Element",
                    "str"
                ]
            }
        },
        "WikiLinks._getMeta": {
            "name": "_getMeta",
            "location": 73,
            "return": [
                "str",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/python-markdown/st3/markdown/extensions/__init__.py": {
        "Extension.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Extension.getConfig": {
            "name": "getConfig",
            "location": 53,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bool",
                    "dict"
                ],
                "default": [
                    "typing.Text",
                    "str",
                    "bytes",
                    "KT",
                    "VT"
                ]
            }
        },
        "Extension.getConfigs": {
            "name": "getConfigs",
            "location": 60,
            "return": [
                "bool",
                "dict",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Extension.getConfigInfo": {
            "name": "getConfigInfo",
            "location": 64,
            "return": [
                "list[tuple]",
                "dict",
                "str",
                "List[Dict[str, Any]]",
                "List[str]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Extension.setConfig": {
            "name": "setConfig",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "str",
                    "bytes",
                    "Union[str, int]",
                    "Union[bool, str]",
                    "list",
                    "Optional[Container[str]]"
                ]
            }
        },
        "Extension.setConfigs": {
            "name": "setConfigs",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "str",
                    "T",
                    "List[str]",
                    "Iterable[T]",
                    "Union[int, slice]",
                    "dict"
                ]
            }
        },
        "Extension.extendMarkdown": {
            "name": "extendMarkdown",
            "location": 84,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "md_globals": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pyyaml/st2/yaml/composer.py": {
        "Composer.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Composer.check_node": {
            "name": "check_node",
            "location": 16,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Composer.get_node": {
            "name": "get_node",
            "location": 24,
            "return": [
                "int",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Composer.get_single_node": {
            "name": "get_single_node",
            "location": 29,
            "return": [
                "None",
                "List[str]",
                "int",
                "str",
                "mypy.nodes.AssignmentStmt",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Composer.compose_document": {
            "name": "compose_document",
            "location": 50,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Composer.compose_node": {
            "name": "compose_node",
            "location": 63,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "bool",
                    "str",
                    "List[Type]"
                ],
                "index": [
                    "bool",
                    "str",
                    "List[Type]"
                ]
            }
        },
        "Composer.compose_scalar_node": {
            "name": "compose_scalar_node",
            "location": 88,
            "return": [
                "int",
                "Union",
                "Union[Sequence, 'SweepFixedValues']"
            ],
            "arguments": {
                "self": [],
                "anchor": [
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[str]"
                ]
            }
        },
        "Composer.compose_sequence_node": {
            "name": "compose_sequence_node",
            "location": 99,
            "return": [
                "int",
                "Union",
                "Union[Sequence, 'SweepFixedValues']"
            ],
            "arguments": {
                "self": [],
                "anchor": [
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[str]"
                ]
            }
        },
        "Composer.compose_mapping_node": {
            "name": "compose_mapping_node",
            "location": 117,
            "return": [
                "Dict[str, Any]",
                "Union[Sequence, 'SweepFixedValues']",
                "int"
            ],
            "arguments": {
                "self": [],
                "anchor": [
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[float]",
                    "int"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pyyaml/st2/yaml/constructor.py": {},
    "devhost-master/sublime-packages/pyyaml/st2/yaml/cyaml.py": {
        "CBaseLoader.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "str",
                    "bool"
                ]
            }
        },
        "CSafeLoader.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "str",
                    "bool"
                ]
            }
        },
        "CLoader.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "str",
                    "bool"
                ]
            }
        },
        "CBaseDumper.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "default_style": [
                    "int",
                    "Optional[float]",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Optional[Mapping[str, str]]"
                ],
                "default_flow_style": [
                    "int",
                    "Optional[float]",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Optional[Mapping[str, str]]"
                ],
                "canonical": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "indent": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "width": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "allow_unicode": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "line_break": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "encoding": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "explicit_start": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "explicit_end": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "version": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "tags": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ]
            }
        },
        "CSafeDumper.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "default_style": [
                    "int",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Callable",
                    "str",
                    "bool"
                ],
                "default_flow_style": [
                    "int",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Callable",
                    "str",
                    "bool"
                ],
                "canonical": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "indent": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "width": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "allow_unicode": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "line_break": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "encoding": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "explicit_start": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "explicit_end": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "version": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "tags": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ]
            }
        },
        "CDumper.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "default_style": [
                    "int",
                    "Optional[float]",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Optional[Mapping[str, str]]"
                ],
                "default_flow_style": [
                    "int",
                    "Optional[float]",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Optional[Mapping[str, str]]"
                ],
                "canonical": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "indent": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "width": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "allow_unicode": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "line_break": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "encoding": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "explicit_start": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "explicit_end": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "version": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "tags": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pyyaml/st2/yaml/dumper.py": {
        "BaseDumper.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "default_style": [
                    "int",
                    "Optional[float]",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Optional[Mapping[str, str]]"
                ],
                "default_flow_style": [
                    "int",
                    "Optional[float]",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Optional[Mapping[str, str]]"
                ],
                "canonical": [
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "indent": [
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "width": [
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "allow_unicode": [
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "line_break": [
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "encoding": [
                    "int",
                    "bool",
                    "str",
                    "Optional[int]"
                ],
                "explicit_start": [
                    "int",
                    "bool",
                    "str",
                    "Optional[int]"
                ],
                "explicit_end": [
                    "int",
                    "bool",
                    "str",
                    "Optional[int]"
                ],
                "version": [
                    "int",
                    "bool",
                    "str",
                    "Optional[int]"
                ],
                "tags": [
                    "int",
                    "bool",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "SafeDumper.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "default_style": [
                    "int",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Callable",
                    "str",
                    "bool"
                ],
                "default_flow_style": [
                    "int",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Callable",
                    "str",
                    "bool"
                ],
                "canonical": [
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "indent": [
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "width": [
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "allow_unicode": [
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "line_break": [
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "encoding": [
                    "int",
                    "bool",
                    "str",
                    "Optional[int]"
                ],
                "explicit_start": [
                    "int",
                    "bool",
                    "str",
                    "Optional[int]"
                ],
                "explicit_end": [
                    "int",
                    "bool",
                    "str",
                    "Optional[int]"
                ],
                "version": [
                    "int",
                    "bool",
                    "str",
                    "Optional[int]"
                ],
                "tags": [
                    "int",
                    "bool",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "Dumper.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "default_style": [
                    "int",
                    "Optional[float]",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Optional[Mapping[str, str]]"
                ],
                "default_flow_style": [
                    "int",
                    "Optional[float]",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Optional[Mapping[str, str]]"
                ],
                "canonical": [
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "indent": [
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "width": [
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "allow_unicode": [
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "line_break": [
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "encoding": [
                    "int",
                    "bool",
                    "str",
                    "Optional[int]"
                ],
                "explicit_start": [
                    "int",
                    "bool",
                    "str",
                    "Optional[int]"
                ],
                "explicit_end": [
                    "int",
                    "bool",
                    "str",
                    "Optional[int]"
                ],
                "version": [
                    "int",
                    "bool",
                    "str",
                    "Optional[int]"
                ],
                "tags": [
                    "int",
                    "bool",
                    "str",
                    "Optional[int]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pyyaml/st2/yaml/emitter.py": {
        "ScalarAnalysis.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "scalar": [
                    "bool",
                    "int",
                    "str",
                    "List['cirq.Circuit']"
                ],
                "empty": [
                    "bool",
                    "int",
                    "str",
                    "List['cirq.Circuit']"
                ],
                "multiline": [
                    "bool",
                    "int",
                    "str",
                    "List['cirq.Circuit']"
                ],
                "allow_flow_plain": [
                    "bool",
                    "str"
                ],
                "allow_block_plain": [
                    "bool",
                    "int",
                    "Iterable[Dict[str, Any]]",
                    "Dict[str, float]"
                ],
                "allow_single_quoted": [
                    "bool",
                    "int",
                    "str",
                    "List['cirq.Circuit']"
                ],
                "allow_double_quoted": [
                    "bool",
                    "int",
                    "str",
                    "List['cirq.Circuit']"
                ],
                "allow_block": [
                    "str",
                    "bool",
                    "Hashable"
                ]
            }
        },
        "Emitter.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "bool",
                    "List['cirq.Circuit']",
                    "int",
                    "Optional[dict]"
                ],
                "canonical": [
                    "None",
                    "bool",
                    "List['cirq.Circuit']",
                    "int",
                    "Optional[dict]"
                ],
                "indent": [
                    "Optional[float]",
                    "float",
                    "Optional[int]",
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[Callable[[str], bool]]",
                    "Optional[Callable]",
                    "Optional[bool]"
                ],
                "width": [
                    "int",
                    "Optional[int]"
                ],
                "allow_unicode": [
                    "None",
                    "bool",
                    "List['cirq.Circuit']",
                    "int",
                    "Optional[dict]"
                ],
                "line_break": [
                    "None",
                    "bool",
                    "str",
                    "int",
                    "FrozenSet[str]"
                ]
            }
        },
        "Emitter.dispose": {
            "name": "dispose",
            "location": 106,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.emit": {
            "name": "emit",
            "location": 111,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "raiden_libs.events.Event",
                    "Mapping[str, Any]",
                    "events.events_base.EventType"
                ]
            }
        },
        "Emitter.need_more_events": {
            "name": "need_more_events",
            "location": 120,
            "return": [
                "bool",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.need_events": {
            "name": "need_events",
            "location": 133,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "count": [
                    "int"
                ]
            }
        },
        "Emitter.increase_indent": {
            "name": "increase_indent",
            "location": 146,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "flow": [
                    "bool"
                ],
                "indentless": [
                    "bool"
                ]
            }
        },
        "Emitter.expect_stream_start": {
            "name": "expect_stream_start",
            "location": 160,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.expect_nothing": {
            "name": "expect_nothing",
            "location": 170,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.expect_first_document_start": {
            "name": "expect_first_document_start",
            "location": 175,
            "return": [
                "str",
                "float",
                "List[Tuple[float, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.expect_document_start": {
            "name": "expect_document_start",
            "location": 178,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "first": [
                    "str",
                    "bool"
                ]
            }
        },
        "Emitter.expect_document_end": {
            "name": "expect_document_end",
            "location": 215,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.expect_document_root": {
            "name": "expect_document_root",
            "location": 227,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.expect_node": {
            "name": "expect_node",
            "location": 233,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "bool",
                    "str",
                    "bytes"
                ],
                "sequence": [
                    "bool",
                    "str",
                    "bytes"
                ],
                "mapping": [
                    "bool",
                    "str",
                    "bytes"
                ],
                "simple_key": [
                    "bool",
                    "bytes",
                    "str",
                    "dict",
                    "Callable"
                ]
            }
        },
        "Emitter.expect_alias": {
            "name": "expect_alias",
            "location": 261,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.expect_scalar": {
            "name": "expect_scalar",
            "location": 267,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.expect_flow_sequence": {
            "name": "expect_flow_sequence",
            "location": 275,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.expect_first_flow_sequence_item": {
            "name": "expect_first_flow_sequence_item",
            "location": 281,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.expect_flow_sequence_item": {
            "name": "expect_flow_sequence_item",
            "location": 293,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.expect_flow_mapping": {
            "name": "expect_flow_mapping",
            "location": 311,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.expect_first_flow_mapping_key": {
            "name": "expect_first_flow_mapping_key",
            "location": 317,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.expect_flow_mapping_key": {
            "name": "expect_flow_mapping_key",
            "location": 334,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.expect_flow_mapping_simple_value": {
            "name": "expect_flow_mapping_simple_value",
            "location": 355,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.expect_flow_mapping_value": {
            "name": "expect_flow_mapping_value",
            "location": 360,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.expect_block_sequence": {
            "name": "expect_block_sequence",
            "location": 369,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.expect_first_block_sequence_item": {
            "name": "expect_first_block_sequence_item",
            "location": 374,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Emitter.expect_block_sequence_item": {
            "name": "expect_block_sequence_item",
            "location": 377,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "first": [
                    "bool",
                    "Callable",
                    "str",
                    "Optional[Union[bool, Any]]"
                ]
            }
        },
        "Emitter.expect_block_mapping": {
            "name": "expect_block_mapping",
            "location": 389,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.expect_first_block_mapping_key": {
            "name": "expect_first_block_mapping_key",
            "location": 393,
            "return": [
                "dict",
                "str",
                "Optional[Dict]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.expect_block_mapping_key": {
            "name": "expect_block_mapping_key",
            "location": 396,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "first": [
                    "bool",
                    "float",
                    "str"
                ]
            }
        },
        "Emitter.expect_block_mapping_simple_value": {
            "name": "expect_block_mapping_simple_value",
            "location": 410,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.expect_block_mapping_value": {
            "name": "expect_block_mapping_value",
            "location": 415,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.check_empty_sequence": {
            "name": "check_empty_sequence",
            "location": 423,
            "return": [
                "bool",
                "bytes",
                "Sequence[int]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.check_empty_mapping": {
            "name": "check_empty_mapping",
            "location": 427,
            "return": [
                "bool",
                "bytes",
                "Sequence[int]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.check_empty_document": {
            "name": "check_empty_document",
            "location": 431,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.check_simple_key": {
            "name": "check_simple_key",
            "location": 438,
            "return": [
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.process_anchor": {
            "name": "process_anchor",
            "location": 460,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "indicator": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Emitter.process_tag": {
            "name": "process_tag",
            "location": 470,
            "return": [
                "None",
                "set",
                "Union[tuple, list]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.choose_scalar_style": {
            "name": "choose_scalar_style",
            "location": 495,
            "return": [
                "typing.Text",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.process_scalar": {
            "name": "process_scalar",
            "location": 516,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.prepare_version": {
            "name": "prepare_version",
            "location": 540,
            "return": [
                "typing.Text",
                "Dict[str, bool]",
                "dict",
                "Dict[str, Any]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "Emitter.prepare_tag_handle": {
            "name": "prepare_tag_handle",
            "location": 546,
            "return": [
                "str",
                "int",
                "float",
                "List[int]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "handle": [
                    "str",
                    "Tuple[str, str]"
                ]
            }
        },
        "Emitter.prepare_tag_prefix": {
            "name": "prepare_tag_prefix",
            "location": 559,
            "return": [
                "str",
                "int",
                "float",
                "List[int]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ]
            }
        },
        "Emitter.prepare_tag": {
            "name": "prepare_tag",
            "location": 582,
            "return": [
                "str",
                "Type",
                "OrderedDict",
                "bool",
                "Optional[Union[Any, str]]"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "Sequence[str]",
                    "Sequence[Union[str, Any]]",
                    "Iterable[str]",
                    "Optional[str]"
                ]
            }
        },
        "Emitter.prepare_anchor": {
            "name": "prepare_anchor",
            "location": 619,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "anchor": [
                    "str"
                ]
            }
        },
        "Emitter.analyze_scalar": {
            "name": "analyze_scalar",
            "location": 629,
            "return": [
                "ScalarAnalysis",
                "str",
                "bytearray",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "scalar": [
                    "str",
                    "Dict[str, str]",
                    "bytearray",
                    "List[str]"
                ]
            }
        },
        "Emitter.flush_stream": {
            "name": "flush_stream",
            "location": 790,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.write_stream_start": {
            "name": "write_stream_start",
            "location": 794,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.write_stream_end": {
            "name": "write_stream_end",
            "location": 799,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.write_indicator": {
            "name": "write_indicator",
            "location": 802,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "indicator": [
                    "str",
                    "dict",
                    "bytes"
                ],
                "need_whitespace": [
                    "int",
                    "Callable",
                    "str"
                ],
                "whitespace": [
                    "bool",
                    "int",
                    "Callable",
                    "str"
                ],
                "indention": [
                    "bool",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Emitter.write_indent": {
            "name": "write_indent",
            "location": 816,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.write_line_break": {
            "name": "write_line_break",
            "location": 829,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "None",
                    "bytes",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Emitter.write_version_directive": {
            "name": "write_version_directive",
            "location": 840,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "version_text": [
                    "str",
                    "Mapping[str, Any]",
                    "Optional[str]",
                    "bytes",
                    "Callable[[str], T]",
                    "int"
                ]
            }
        },
        "Emitter.write_tag_directive": {
            "name": "write_tag_directive",
            "location": 847,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "handle_text": [
                    "str",
                    "bool",
                    "Callable"
                ],
                "prefix_text": [
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        },
        "Emitter.write_single_quoted": {
            "name": "write_single_quoted",
            "location": 856,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "int",
                    "str"
                ],
                "split": [
                    "bool",
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "Emitter.write_double_quoted": {
            "name": "write_double_quoted",
            "location": 928,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "int",
                    "str",
                    "Callable"
                ],
                "split": [
                    "bool",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "Emitter.determine_block_hints": {
            "name": "determine_block_hints",
            "location": 982,
            "return": [
                "Mapping",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "bool"
                ]
            }
        },
        "Emitter.write_folded": {
            "name": "write_folded",
            "location": 993,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Emitter.write_literal": {
            "name": "write_literal",
            "location": 1047,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Emitter.write_plain": {
            "name": "write_plain",
            "location": 1082,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "int",
                    "str"
                ],
                "split": [
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pyyaml/st2/yaml/error.py": {
        "Mark.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "OrderedDict",
                    "Optional[Sequence[Any]]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]"
                ],
                "index": [
                    "bool",
                    "Optional[List[str]]",
                    "str"
                ],
                "line": [
                    "str",
                    "Optional[str]",
                    "Optional[float]",
                    "dict"
                ],
                "column": [
                    "bool",
                    "Optional[List[str]]",
                    "str"
                ],
                "buffer": [
                    "bool",
                    "Optional[List[str]]",
                    "str"
                ],
                "pointer": [
                    "bool",
                    "Optional[List[str]]",
                    "str"
                ]
            }
        },
        "Mark.get_snippet": {
            "name": "get_snippet",
            "location": 14,
            "return": [
                "None",
                "str",
                "Optional[str]",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "indent": [
                    "int",
                    "List[int]",
                    "str",
                    "bytes"
                ],
                "max_length": [
                    "int",
                    "str",
                    "Tuple[int, int]"
                ]
            }
        },
        "Mark.__str__": {
            "name": "__str__",
            "location": 37,
            "return": [
                "typing.Text",
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "MarkedYAMLError.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "None",
                    "int",
                    "bool",
                    "float"
                ],
                "context_mark": [
                    "None",
                    "int",
                    "bool",
                    "float"
                ],
                "problem": [
                    "None",
                    "int",
                    "bool",
                    "float"
                ],
                "problem_mark": [
                    "None",
                    "int",
                    "bool",
                    "float"
                ],
                "note": [
                    "None",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "MarkedYAMLError.__str__": {
            "name": "__str__",
            "location": 58,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/pyyaml/st2/yaml/events.py": {
        "Event.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "start_mark": [
                    "int",
                    "None"
                ],
                "end_mark": [
                    "int",
                    "None"
                ]
            }
        },
        "Event.__repr__": {
            "name": "__repr__",
            "location": 8,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeEvent.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "anchor": [
                    "int",
                    "dict"
                ],
                "start_mark": [
                    "None",
                    "int",
                    "bool",
                    "Dict[str, str]"
                ],
                "end_mark": [
                    "None",
                    "int",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "CollectionStartEvent.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "anchor": [
                    "bool",
                    "Optional[bool]",
                    "int",
                    "list",
                    "str",
                    "Optional[str]",
                    "Optional[List[Any]]"
                ],
                "tag": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "Optional[float]",
                    "Optional[bytes]",
                    "Optional[bool]"
                ],
                "implicit": [
                    "bool",
                    "Optional[bool]",
                    "int",
                    "list",
                    "str",
                    "Optional[str]",
                    "Optional[List[Any]]"
                ],
                "start_mark": [
                    "None",
                    "Optional[int]",
                    "Optional[bool]",
                    "Optional[List[\"CustomLineItemDraft\"]]",
                    "Optional[List[str]]",
                    "Tuple[int, int, int]",
                    "Dict[str, str]",
                    "str",
                    "int"
                ],
                "end_mark": [
                    "None",
                    "int",
                    "Optional[float]",
                    "float",
                    "str",
                    "Tuple[int, int]"
                ],
                "flow_style": [
                    "None",
                    "bool",
                    "Optional[bool]",
                    "int",
                    "list",
                    "str",
                    "Optional[str]",
                    "Optional[List[Any]]"
                ]
            }
        },
        "StreamStartEvent.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "start_mark": [
                    "int",
                    "None"
                ],
                "end_mark": [
                    "int",
                    "None"
                ],
                "encoding": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "DocumentStartEvent.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "start_mark": [
                    "None",
                    "int",
                    "List[str]"
                ],
                "end_mark": [
                    "None"
                ],
                "explicit": [
                    "None",
                    "str",
                    "int",
                    "list",
                    "bool",
                    "float"
                ],
                "version": [
                    "None",
                    "str",
                    "int",
                    "list",
                    "bool",
                    "float"
                ],
                "tags": [
                    "None",
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "DocumentEndEvent.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "start_mark": [
                    "int",
                    "None"
                ],
                "end_mark": [
                    "int",
                    "None"
                ],
                "explicit": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "ScalarEvent.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "anchor": [
                    "List[List[str]]",
                    "int",
                    "bool",
                    "List[str]",
                    "Optional[str]"
                ],
                "tag": [
                    "Optional[str]",
                    "str",
                    "Optional[int]"
                ],
                "implicit": [
                    "List[List[str]]",
                    "int",
                    "bool",
                    "List[str]",
                    "Optional[str]"
                ],
                "value": [
                    "int",
                    "str",
                    "float",
                    "tuple",
                    "list",
                    "T"
                ],
                "start_mark": [
                    "None",
                    "str",
                    "Union[int, float]",
                    "Collection",
                    "int",
                    "Optional[bool]"
                ],
                "end_mark": [
                    "None",
                    "bool",
                    "int",
                    "float",
                    "Tuple[int, int]",
                    "str",
                    "Optional[List[str]]",
                    "Optional[float]"
                ],
                "style": [
                    "None",
                    "List[List[str]]",
                    "int",
                    "bool",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pyyaml/st2/yaml/loader.py": {
        "BaseLoader.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "SafeLoader.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Loader.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pyyaml/st2/yaml/nodes.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 3,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "int",
                    "Optional[float]"
                ],
                "value": [
                    "T",
                    "str",
                    "float"
                ],
                "start_mark": [
                    "str",
                    "Optional[List[str]]",
                    "Optional[int]",
                    "int",
                    "bool",
                    "Optional[List[\"CustomLineItemDraft\"]]",
                    "Tuple[int, int, int]"
                ],
                "end_mark": [
                    "bool",
                    "Tuple[int, int]",
                    "float"
                ]
            }
        },
        "Node.__repr__": {
            "name": "__repr__",
            "location": 8,
            "return": [
                "typing.Text",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScalarNode.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "int",
                    "Optional[float]"
                ],
                "value": [
                    "T",
                    "str",
                    "float"
                ],
                "start_mark": [
                    "None",
                    "str",
                    "Optional[List[str]]",
                    "Optional[int]",
                    "int",
                    "bool",
                    "Optional[List[\"CustomLineItemDraft\"]]",
                    "Tuple[int, int, int]"
                ],
                "end_mark": [
                    "None",
                    "bool",
                    "Tuple[int, int]",
                    "float"
                ],
                "style": [
                    "None",
                    "bool",
                    "Callable",
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "CollectionNode.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "Optional[str]",
                    "int",
                    "str",
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[bytes]"
                ],
                "value": [
                    "int",
                    "float",
                    "dict",
                    "T"
                ],
                "start_mark": [
                    "None",
                    "Optional[List[str]]",
                    "bool",
                    "Optional[List[\"CustomLineItemDraft\"]]",
                    "Tuple[int, int, int]",
                    "int"
                ],
                "end_mark": [
                    "None",
                    "bool",
                    "int",
                    "Tuple[int, int]",
                    "Optional[float]"
                ],
                "flow_style": [
                    "None",
                    "str",
                    "list",
                    "bool",
                    "Tuple[float, float]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pyyaml/st2/yaml/parser.py": {
        "Parser.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.dispose": {
            "name": "dispose",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.check_event": {
            "name": "check_event",
            "location": 94,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.peek_event": {
            "name": "peek_event",
            "location": 107,
            "return": [
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.get_event": {
            "name": "get_event",
            "location": 114,
            "return": [
                "int",
                "str",
                "List[List[float]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_stream_start": {
            "name": "parse_stream_start",
            "location": 127,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_implicit_document_start": {
            "name": "parse_implicit_document_start",
            "location": 139,
            "return": [
                "Callable",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_document_start": {
            "name": "parse_document_start",
            "location": 159,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_document_end": {
            "name": "parse_document_end",
            "location": 190,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_document_content": {
            "name": "parse_document_content",
            "location": 208,
            "return": [
                "int",
                "Dict[str, Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.process_directives": {
            "name": "process_directives",
            "location": 217,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_block_node": {
            "name": "parse_block_node",
            "location": 264,
            "return": [
                "Optional[Any]",
                "bool",
                "Optional[Dict[str, str]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_flow_node": {
            "name": "parse_flow_node",
            "location": 267,
            "return": [
                "int",
                "str",
                "Optional[Dict]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_block_node_or_indentless_sequence": {
            "name": "parse_block_node_or_indentless_sequence",
            "location": 270,
            "return": [
                "bool",
                "Optional[Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_node": {
            "name": "parse_node",
            "location": 273,
            "return": [
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "bool",
                    "Type"
                ],
                "indentless_sequence": [
                    "Exception",
                    "str",
                    "Tuple[()]",
                    "error.GraphQLError",
                    "Optional[Tuple[str, int]]",
                    "dict",
                    "bytes"
                ]
            }
        },
        "Parser.parse_block_sequence_first_entry": {
            "name": "parse_block_sequence_first_entry",
            "location": 376,
            "return": [
                "str",
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_block_sequence_entry": {
            "name": "parse_block_sequence_entry",
            "location": 381,
            "return": [
                "bool",
                "Union['IndexBase', 'Series']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_indentless_sequence_entry": {
            "name": "parse_indentless_sequence_entry",
            "location": 402,
            "return": [
                "List[dict]",
                "bool",
                "Union['IndexBase', 'Series']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_block_mapping_first_key": {
            "name": "parse_block_mapping_first_key",
            "location": 422,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_block_mapping_key": {
            "name": "parse_block_mapping_key",
            "location": 427,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_block_mapping_value": {
            "name": "parse_block_mapping_value",
            "location": 446,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_flow_sequence_first_entry": {
            "name": "parse_flow_sequence_first_entry",
            "location": 471,
            "return": [
                "bool",
                "float",
                "Optional[bool]",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_flow_sequence_entry": {
            "name": "parse_flow_sequence_entry",
            "location": 476,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "first": [
                    "bool",
                    "int"
                ]
            }
        },
        "Parser.parse_flow_sequence_entry_mapping_key": {
            "name": "parse_flow_sequence_entry_mapping_key",
            "location": 502,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_flow_sequence_entry_mapping_value": {
            "name": "parse_flow_sequence_entry_mapping_value",
            "location": 512,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_flow_sequence_entry_mapping_end": {
            "name": "parse_flow_sequence_entry_mapping_end",
            "location": 526,
            "return": [
                "str",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_flow_mapping_first_key": {
            "name": "parse_flow_mapping_first_key",
            "location": 537,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_flow_mapping_key": {
            "name": "parse_flow_mapping_key",
            "location": 542,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "first": [
                    "bool"
                ]
            }
        },
        "Parser.parse_flow_mapping_value": {
            "name": "parse_flow_mapping_value",
            "location": 569,
            "return": [
                "bool",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_flow_mapping_empty_value": {
            "name": "parse_flow_mapping_empty_value",
            "location": 583,
            "return": [
                "Optional[int]",
                "float",
                "Generator",
                "int",
                "str",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.process_empty_scalar": {
            "name": "process_empty_scalar",
            "location": 587,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "mark": [
                    "Type",
                    "Optional[int]",
                    "List[str]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pyyaml/st2/yaml/reader.py": {},
    "devhost-master/sublime-packages/pyyaml/st2/yaml/representer.py": {
        "BaseRepresenter.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "default_style": [
                    "bool",
                    "str",
                    "list",
                    "datetime.date.time"
                ],
                "default_flow_style": [
                    "bool",
                    "Optional[int]",
                    "str",
                    "float",
                    "Optional[float]"
                ]
            }
        },
        "BaseRepresenter.represent": {
            "name": "represent",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "dict",
                    "str",
                    "int",
                    "Iterable"
                ]
            }
        },
        "BaseRepresenter.get_classobj_bases": {
            "name": "get_classobj_bases",
            "location": 34,
            "return": [
                "str",
                "IO",
                "Callable[[], str]"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "bool",
                    "type",
                    "Type",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "BaseRepresenter.represent_data": {
            "name": "represent_data",
            "location": 40,
            "return": [
                "str",
                "List[int]",
                "types.ServiceT",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, utils.types.A]",
                    "Dict[str, str]"
                ]
            }
        },
        "BaseRepresenter.add_representer": {
            "name": "add_representer",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, Any]",
                    "hashdecoder.lib.types.hash_type",
                    "T",
                    "Callable"
                ],
                "data_type": [
                    "str",
                    "types.ModuleType",
                    "Mapping[str, Any]",
                    "Dict[str, Any]"
                ],
                "representer": [
                    "str",
                    "types.ModuleType",
                    "Mapping[str, Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "BaseRepresenter.add_multi_representer": {
            "name": "add_multi_representer",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "hashdecoder.lib.types.hash_type",
                    "List[Tuple[str, str]]"
                ],
                "data_type": [
                    "Optional[List[str]]",
                    "str",
                    "Mapping[str, Any]",
                    "tuple",
                    "bool",
                    "Dict[str, List[str]]"
                ],
                "representer": [
                    "Optional[List[str]]",
                    "str",
                    "Mapping[str, Any]",
                    "tuple",
                    "bool",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "BaseRepresenter.represent_scalar": {
            "name": "represent_scalar",
            "location": 86,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "list",
                    "List[str]",
                    "Iterable[Any]"
                ],
                "value": [
                    "str",
                    "list",
                    "List[str]",
                    "Iterable[Any]"
                ],
                "style": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "bytes",
                    "Optional[IO[bytes]]"
                ]
            }
        },
        "BaseRepresenter.represent_sequence": {
            "name": "represent_sequence",
            "location": 94,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "bool",
                    "Callable"
                ],
                "sequence": [
                    "bool",
                    "str",
                    "Union[bool, int]",
                    "Optional[bool]",
                    "Iterable[int]",
                    "Optional[float]"
                ],
                "flow_style": [
                    "Optional[bool]",
                    "str",
                    "float",
                    "Optional[str]"
                ]
            }
        },
        "BaseRepresenter.represent_mapping": {
            "name": "represent_mapping",
            "location": 112,
            "return": [
                "int",
                "tuple",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "bool",
                    "Optional[Any]",
                    "int"
                ],
                "mapping": [
                    "str",
                    "Dict[str, float]",
                    "Literal",
                    "type",
                    "Mapping[Any, Any]"
                ],
                "flow_style": [
                    "str",
                    "Dict[str, mypy.nodes.MypyFile]",
                    "Optional[str]",
                    "Optional[bool]",
                    "Set[str]"
                ]
            }
        },
        "BaseRepresenter.ignore_aliases": {
            "name": "ignore_aliases",
            "location": 136,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "bool",
                    "dict"
                ]
            }
        },
        "SafeRepresenter.ignore_aliases": {
            "name": "ignore_aliases",
            "location": 141,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "apistar.types.ParamAnnotation",
                    "Optional[int]",
                    "bytes",
                    "Union[None, int, str]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "SafeRepresenter.represent_none": {
            "name": "represent_none",
            "location": 149,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bool",
                    "list",
                    "memoryview",
                    "bytes",
                    "List[Dict]",
                    "dict"
                ]
            }
        },
        "SafeRepresenter.represent_str": {
            "name": "represent_str",
            "location": 153,
            "return": [
                "str",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "Union[List, Dict]",
                    "Sequence[str]",
                    "bytes",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "SafeRepresenter.represent_unicode": {
            "name": "represent_unicode",
            "location": 169,
            "return": [
                "str",
                "Optional[int]",
                "Callable",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "bytes"
                ]
            }
        },
        "SafeRepresenter.represent_bool": {
            "name": "represent_bool",
            "location": 172,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bool",
                    "List[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "SafeRepresenter.represent_int": {
            "name": "represent_int",
            "location": 179,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "bytes"
                ]
            }
        },
        "SafeRepresenter.represent_long": {
            "name": "represent_long",
            "location": 182,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "bytes"
                ]
            }
        },
        "SafeRepresenter.represent_float": {
            "name": "represent_float",
            "location": 189,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "SafeRepresenter.represent_list": {
            "name": "represent_list",
            "location": 209,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "T",
                    "Iterable[T]"
                ]
            }
        },
        "SafeRepresenter.represent_dict": {
            "name": "represent_dict",
            "location": 224,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "SafeRepresenter.represent_set": {
            "name": "represent_set",
            "location": 227,
            "return": [
                "Dict[str, Any]",
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "bool",
                    "dict"
                ]
            }
        },
        "SafeRepresenter.represent_date": {
            "name": "represent_date",
            "location": 233,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "Dict[str, Dict[str, str]]",
                    "int"
                ]
            }
        },
        "SafeRepresenter.represent_datetime": {
            "name": "represent_datetime",
            "location": 237,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Dict[str, str]]",
                    "str"
                ]
            }
        },
        "SafeRepresenter.represent_yaml_object": {
            "name": "represent_yaml_object",
            "location": 241,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "List[str]",
                    "str",
                    "List[\"DeliveryItem\"]",
                    "Optional[Sequence[str]]",
                    "Sequence[str]",
                    "Optional[List[\"DeliveryItem\"]]"
                ],
                "data": [
                    "str",
                    "Type",
                    "Tuple[str]",
                    "int"
                ],
                "cls": [
                    "bool",
                    "str",
                    "Optional[List[str]]"
                ],
                "flow_style": [
                    "List[str]",
                    "str",
                    "List[\"DeliveryItem\"]",
                    "Optional[Sequence[str]]",
                    "Sequence[str]",
                    "Optional[List[\"DeliveryItem\"]]"
                ]
            }
        },
        "SafeRepresenter.represent_undefined": {
            "name": "represent_undefined",
            "location": 248,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "Callable[[Any], None]",
                    "dict",
                    "int"
                ]
            }
        },
        "Representer.represent_str": {
            "name": "represent_str",
            "location": 295,
            "return": [
                "str",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "Union[List, Dict]",
                    "Sequence[str]",
                    "bytes",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "Representer.represent_unicode": {
            "name": "represent_unicode",
            "location": 311,
            "return": [
                "str",
                "Iterable[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "Representer.represent_long": {
            "name": "represent_long",
            "location": 320,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "Dict[str, Any]",
                    "Union[bytes, bytearray, memoryview]",
                    "bool"
                ]
            }
        },
        "Representer.represent_complex": {
            "name": "represent_complex",
            "location": 326,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "List[Union[int, float]]"
                ]
            }
        },
        "Representer.represent_tuple": {
            "name": "represent_tuple",
            "location": 337,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "bytes"
                ]
            }
        },
        "Representer.represent_name": {
            "name": "represent_name",
            "location": 340,
            "return": [
                "str",
                "mypy.nodes.Context",
                "Match[str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "Dict[str, Callable]",
                    "Mapping",
                    "Optional[str]"
                ]
            }
        },
        "Representer.represent_module": {
            "name": "represent_module",
            "location": 344,
            "return": [
                "str",
                "bool",
                "types.ModuleType"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Collection[str]",
                    "Optional[Exception]",
                    "Iterable",
                    "type",
                    "str"
                ]
            }
        },
        "Representer.represent_instance": {
            "name": "represent_instance",
            "location": 348,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "dict",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "Representer.represent_object": {
            "name": "represent_object",
            "location": 389,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Mapping[str, Any]",
                    "List[List[Any]]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pyyaml/st2/yaml/resolver.py": {},
    "devhost-master/sublime-packages/pyyaml/st2/yaml/scanner.py": {},
    "devhost-master/sublime-packages/pyyaml/st2/yaml/serializer.py": {
        "Serializer.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "encoding": [
                    "None",
                    "Callable",
                    "Tuple[int, int, int]",
                    "Optional[dict]",
                    "int",
                    "bool",
                    "List['cirq.Circuit']"
                ],
                "explicit_start": [
                    "None",
                    "int",
                    "str",
                    "list",
                    "bool"
                ],
                "explicit_end": [
                    "None",
                    "Callable",
                    "Tuple[int, int, int]",
                    "Optional[dict]",
                    "int",
                    "bool",
                    "List['cirq.Circuit']"
                ],
                "version": [
                    "None",
                    "Callable",
                    "Tuple[int, int, int]",
                    "Optional[dict]",
                    "int",
                    "bool",
                    "List['cirq.Circuit']"
                ],
                "tags": [
                    "None",
                    "str",
                    "Optional[List[str]]",
                    "bool",
                    "Optional[str]",
                    "Iterable[str]"
                ]
            }
        },
        "Serializer.open": {
            "name": "open",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Serializer.close": {
            "name": "close",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Serializer.serialize": {
            "name": "serialize",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Optional[mypy.nodes.Node]"
                ]
            }
        },
        "Serializer.anchor_node": {
            "name": "anchor_node",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.Expression"
                ]
            }
        },
        "Serializer.generate_anchor": {
            "name": "generate_anchor",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "astroid.nodes",
                    "mypy.nodes.Node",
                    "List[int]"
                ]
            }
        },
        "Serializer.serialize_node": {
            "name": "serialize_node",
            "location": 78,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.Var",
                    "str"
                ],
                "parent": [
                    "T",
                    "List[Type]"
                ],
                "index": []
            }
        }
    },
    "devhost-master/sublime-packages/pyyaml/st2/yaml/tokens.py": {
        "Token.__init__": {
            "name": "__init__",
            "location": 3,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "start_mark": [
                    "int"
                ],
                "end_mark": [
                    "int"
                ]
            }
        },
        "Token.__repr__": {
            "name": "__repr__",
            "location": 6,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectiveToken.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "bool"
                ],
                "value": [
                    "T",
                    "str",
                    "float"
                ],
                "start_mark": [
                    "int",
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "Optional[int]"
                ],
                "end_mark": [
                    "float",
                    "bool",
                    "Tuple[int, int]",
                    "Optional[float]"
                ]
            }
        },
        "StreamStartToken.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "start_mark": [
                    "int",
                    "None"
                ],
                "end_mark": [
                    "int",
                    "None"
                ],
                "encoding": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "AliasToken.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "int",
                    "dict",
                    "Optional[Tuple[int, int]]"
                ],
                "start_mark": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "end_mark": [
                    "int",
                    "str",
                    "float",
                    "tuple"
                ]
            }
        },
        "AnchorToken.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "int",
                    "dict",
                    "Optional[Tuple[int, int]]"
                ],
                "start_mark": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "end_mark": [
                    "int",
                    "str",
                    "float",
                    "tuple"
                ]
            }
        },
        "TagToken.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "int",
                    "dict",
                    "Optional[Tuple[int, int]]"
                ],
                "start_mark": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "end_mark": [
                    "int",
                    "str",
                    "float",
                    "tuple"
                ]
            }
        },
        "ScalarToken.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T",
                    "int",
                    "float",
                    "str"
                ],
                "plain": [
                    "int",
                    "list",
                    "str",
                    "bool",
                    "float"
                ],
                "start_mark": [
                    "int",
                    "Optional[int]",
                    "Tuple[int, int]"
                ],
                "end_mark": [
                    "Tuple[int, int]",
                    "float",
                    "int"
                ],
                "style": [
                    "None",
                    "int",
                    "list",
                    "str",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pyyaml/st2/yaml/__init__.py": {
        "scan": {
            "name": "scan",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "stream": [
                    "int",
                    "Callable",
                    "str"
                ],
                "Loader": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "parse": {
            "name": "parse",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "stream": [
                    "int",
                    "Callable",
                    "str"
                ],
                "Loader": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "compose": {
            "name": "compose",
            "location": 41,
            "return": [
                "Tuple[str]",
                "str"
            ],
            "arguments": {
                "stream": [
                    "int",
                    "Callable",
                    "str"
                ],
                "Loader": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "compose_all": {
            "name": "compose_all",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "stream": [
                    "int",
                    "str",
                    "Set[str]"
                ],
                "Loader": [
                    "int",
                    "str",
                    "Set[str]"
                ]
            }
        },
        "load": {
            "name": "load",
            "location": 64,
            "return": [
                "str",
                "dict",
                "Optional[str]",
                "Callable",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "stream": [
                    "str",
                    "bool"
                ],
                "Loader": [
                    "str",
                    "bool"
                ]
            }
        },
        "load_all": {
            "name": "load_all",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "stream": [
                    "bool",
                    "float",
                    "List[str]",
                    "Dict[str, List[str]]",
                    "str"
                ],
                "Loader": [
                    "bool",
                    "float",
                    "List[str]",
                    "Dict[str, List[str]]",
                    "str"
                ]
            }
        },
        "safe_load": {
            "name": "safe_load",
            "location": 87,
            "return": [
                "str",
                "int",
                "List[str]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "stream": [
                    "str",
                    "TextIO",
                    "int"
                ]
            }
        },
        "safe_load_all": {
            "name": "safe_load_all",
            "location": 95,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "stream": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "emit": {
            "name": "emit",
            "location": 103,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "events": [
                    "int",
                    "bool"
                ],
                "stream": [
                    "int",
                    "TextIO",
                    "Optional[TextIO]",
                    "IO[bytes]"
                ],
                "Dumper": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "canonical": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "indent": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "width": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "allow_unicode": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "line_break": [
                    "int",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "serialize_all": {
            "name": "serialize_all",
            "location": 125,
            "return": [
                "int",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "nodes": [
                    "str"
                ],
                "stream": [
                    "str",
                    "IO",
                    "Optional['Directory']",
                    "Optional[str]",
                    "io.StringIO",
                    "IO[bytes]",
                    "BinaryIO"
                ],
                "Dumper": [
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "canonical": [
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "indent": [
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "width": [
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "allow_unicode": [
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "line_break": [
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "encoding": [
                    "str",
                    "int",
                    "Iterable[str]"
                ],
                "explicit_start": [
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "explicit_end": [
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "version": [
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "tags": [
                    "str",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "serialize": {
            "name": "serialize",
            "location": 156,
            "return": [
                "List[str]",
                "T",
                "bool"
            ],
            "arguments": {
                "node": [
                    "List[str]"
                ],
                "stream": [
                    "List[str]"
                ],
                "Dumper": [
                    "List[str]"
                ]
            }
        },
        "dump_all": {
            "name": "dump_all",
            "location": 163,
            "return": [
                "int",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "documents": [
                    "int",
                    "bool",
                    "Callable",
                    "dict",
                    "str"
                ],
                "stream": [
                    "int",
                    "TextIO",
                    "IO[bytes]",
                    "Optional[TextIO]"
                ],
                "Dumper": [
                    "int",
                    "Sequence[int]",
                    "List[Tuple[int, int]]",
                    "str"
                ],
                "default_style": [
                    "int",
                    "Sequence[int]",
                    "List[Tuple[int, int]]",
                    "str"
                ],
                "default_flow_style": [
                    "int",
                    "Sequence[int]",
                    "List[Tuple[int, int]]",
                    "str"
                ],
                "canonical": [
                    "int",
                    "Sequence[int]",
                    "List[Tuple[int, int]]",
                    "str"
                ],
                "indent": [
                    "int",
                    "Sequence[int]",
                    "List[Tuple[int, int]]",
                    "str"
                ],
                "width": [
                    "int",
                    "Sequence[int]",
                    "List[Tuple[int, int]]",
                    "str"
                ],
                "allow_unicode": [
                    "int",
                    "Sequence[int]",
                    "List[Tuple[int, int]]",
                    "str"
                ],
                "line_break": [
                    "int",
                    "Sequence[int]",
                    "List[Tuple[int, int]]",
                    "str"
                ],
                "encoding": [
                    "Tuple[str, int]",
                    "Optional[int]"
                ],
                "explicit_start": [
                    "int",
                    "Sequence[int]",
                    "List[Tuple[int, int]]",
                    "str"
                ],
                "explicit_end": [
                    "int",
                    "Sequence[int]",
                    "List[Tuple[int, int]]",
                    "str"
                ],
                "version": [
                    "int",
                    "Sequence[int]",
                    "List[Tuple[int, int]]",
                    "str"
                ],
                "tags": [
                    "int",
                    "Sequence[int]",
                    "List[Tuple[int, int]]",
                    "str"
                ]
            }
        },
        "dump": {
            "name": "dump",
            "location": 197,
            "return": [
                "bytes",
                "dict",
                "int",
                "cmk.base.events.EventContext",
                "Dict[str, Any]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str"
                ],
                "stream": [
                    "bytes",
                    "str"
                ],
                "Dumper": [
                    "bytes",
                    "str"
                ]
            }
        },
        "safe_dump_all": {
            "name": "safe_dump_all",
            "location": 204,
            "return": [
                "bool",
                "str",
                "Optional[bool]",
                "Optional[str]",
                "List[str]",
                "Optional[float]"
            ],
            "arguments": {
                "documents": [
                    "int"
                ],
                "stream": [
                    "int"
                ]
            }
        },
        "safe_dump": {
            "name": "safe_dump",
            "location": 212,
            "return": [
                "bytes",
                "dict",
                "int",
                "cmk.base.events.EventContext",
                "Dict[str, Any]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "int"
                ],
                "stream": [
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "add_implicit_resolver": {
            "name": "add_implicit_resolver",
            "location": 220,
            "return": [
                ""
            ],
            "arguments": {
                "tag": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "Dict[str, Dict]",
                    "bytes"
                ],
                "regexp": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "Dict[str, Dict]",
                    "bytes"
                ],
                "first": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "Dict[str, Dict]",
                    "bytes"
                ],
                "Loader": [
                    "str",
                    "Optional[Dict]",
                    "List[str]",
                    "Optional[str]"
                ],
                "Dumper": [
                    "str",
                    "Optional[Dict]",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "add_path_resolver": {
            "name": "add_path_resolver",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {
                "tag": [
                    "str"
                ],
                "path": [
                    "str"
                ],
                "kind": [
                    "str"
                ],
                "Loader": [],
                "Dumper": []
            }
        },
        "add_constructor": {
            "name": "add_constructor",
            "location": 241,
            "return": [
                ""
            ],
            "arguments": {
                "tag": [
                    "str",
                    "float",
                    "Optional[Sequence[str]]",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "constructor": [
                    "str",
                    "float",
                    "Optional[Sequence[str]]",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "Loader": [
                    "str",
                    "float",
                    "Optional[Sequence[str]]",
                    "Optional[str]",
                    "Optional[bool]"
                ]
            }
        },
        "add_multi_constructor": {
            "name": "add_multi_constructor",
            "location": 249,
            "return": [
                ""
            ],
            "arguments": {
                "tag_prefix": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[List[str]]"
                ],
                "multi_constructor": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[List[str]]"
                ],
                "Loader": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[List[str]]"
                ]
            }
        },
        "add_representer": {
            "name": "add_representer",
            "location": 258,
            "return": [
                ""
            ],
            "arguments": {
                "data_type": [
                    "str"
                ],
                "representer": [
                    "str"
                ],
                "Dumper": [
                    "str"
                ]
            }
        },
        "add_multi_representer": {
            "name": "add_multi_representer",
            "location": 267,
            "return": [
                ""
            ],
            "arguments": {
                "data_type": [
                    "str",
                    "dict",
                    "mypy.nodes.TypeInfo"
                ],
                "multi_representer": [
                    "str",
                    "dict",
                    "mypy.nodes.TypeInfo"
                ],
                "Dumper": [
                    "str",
                    "dict",
                    "mypy.nodes.TypeInfo"
                ]
            }
        },
        "YAMLObjectMetaclass.__init__": {
            "name": "__init__",
            "location": 280,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable"
                ],
                "name": [
                    "str",
                    "bool",
                    "Dict[str, mypy.nodes.MypyFile]"
                ],
                "bases": [
                    "str",
                    "bool",
                    "Dict[str, mypy.nodes.MypyFile]"
                ],
                "kwds": [
                    "str",
                    "bool",
                    "Dict[str, mypy.nodes.MypyFile]",
                    "Callable[[dict], None]",
                    "List[str]"
                ]
            }
        },
        "YAMLObject.from_yaml": {
            "name": "from_yaml",
            "location": 301,
            "return": [
                "Callable",
                "Dict[str, Any]",
                "int",
                "str"
            ],
            "arguments": {
                "cls": [
                    "yaml.nodes.Node",
                    "Pattern",
                    "dict",
                    "bool"
                ],
                "loader": [
                    "yaml.nodes.Node",
                    "Pattern",
                    "dict",
                    "bool"
                ],
                "node": [
                    "yaml.nodes.Node",
                    "Pattern",
                    "dict",
                    "bool"
                ]
            }
        },
        "YAMLObject.to_yaml": {
            "name": "to_yaml",
            "location": 308,
            "return": [
                "str",
                "int",
                "IO[str]",
                "bool",
                "Iterable[int]"
            ],
            "arguments": {
                "cls": [
                    "type"
                ],
                "dumper": [
                    "type"
                ],
                "data": [
                    "type"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pyyaml/st3/yaml/composer.py": {
        "Composer.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Composer.check_node": {
            "name": "check_node",
            "location": 16,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Composer.get_node": {
            "name": "get_node",
            "location": 24,
            "return": [
                "int",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Composer.get_single_node": {
            "name": "get_single_node",
            "location": 29,
            "return": [
                "None",
                "List[str]",
                "int",
                "str",
                "mypy.nodes.AssignmentStmt",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Composer.compose_document": {
            "name": "compose_document",
            "location": 50,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Composer.compose_node": {
            "name": "compose_node",
            "location": 63,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "bool",
                    "str",
                    "List[Type]"
                ],
                "index": [
                    "bool",
                    "str",
                    "List[Type]"
                ]
            }
        },
        "Composer.compose_scalar_node": {
            "name": "compose_scalar_node",
            "location": 88,
            "return": [
                "int",
                "Union",
                "Union[Sequence, 'SweepFixedValues']"
            ],
            "arguments": {
                "self": [],
                "anchor": [
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[str]"
                ]
            }
        },
        "Composer.compose_sequence_node": {
            "name": "compose_sequence_node",
            "location": 99,
            "return": [
                "int",
                "Union",
                "Union[Sequence, 'SweepFixedValues']"
            ],
            "arguments": {
                "self": [],
                "anchor": [
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[str]"
                ]
            }
        },
        "Composer.compose_mapping_node": {
            "name": "compose_mapping_node",
            "location": 117,
            "return": [
                "Dict[str, Any]",
                "Union[Sequence, 'SweepFixedValues']",
                "int"
            ],
            "arguments": {
                "self": [],
                "anchor": [
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[float]",
                    "int"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pyyaml/st3/yaml/constructor.py": {
        "BaseConstructor.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConstructor.check_data": {
            "name": "check_data",
            "location": 24,
            "return": [
                "str",
                "float",
                "int",
                "Pattern"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConstructor.get_data": {
            "name": "get_data",
            "location": 28,
            "return": [
                "bool",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConstructor.get_single_data": {
            "name": "get_single_data",
            "location": 33,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConstructor.construct_document": {
            "name": "construct_document",
            "location": 40,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.Expression",
                    "Tuple[bytes]",
                    "Exception"
                ]
            }
        },
        "BaseConstructor.construct_object": {
            "name": "construct_object",
            "location": 53,
            "return": [
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.ImporFrom",
                    "mypy.nodes.Var"
                ],
                "deep": [
                    "astroid.nodes",
                    "mypy.nodes.Node",
                    "List[int]"
                ]
            }
        },
        "BaseConstructor.construct_scalar": {
            "name": "construct_scalar",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "py_type_extractor.type_extractor.nodes.BaseNodeType.NodeType"
                ]
            }
        },
        "BaseConstructor.construct_sequence": {
            "name": "construct_sequence",
            "location": 110,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict",
                    "py_type_extractor.type_extractor.nodes.BaseNodeType.NodeType"
                ],
                "deep": [
                    "wemake_python_styleguide.types.AnyFunctionDef"
                ]
            }
        },
        "BaseConstructor.construct_mapping": {
            "name": "construct_mapping",
            "location": 118,
            "return": [
                "str",
                "OrderedDict",
                "bytes",
                "Dict[str, Any]",
                "dict",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "yaml.nodes.MappingNode",
                    "py_type_extractor.type_extractor.nodes.BaseNodeType.NodeType",
                    "dict",
                    "mypy.nodes.Expression",
                    "Optional[mypy.nodes.SymbolNode]"
                ],
                "deep": [
                    "mypy.nodes.Var",
                    "mypy.nodes.ClassDef",
                    "mypy.nodes.NameExpr",
                    "yaml.nodes.MappingNode",
                    "T"
                ]
            }
        },
        "BaseConstructor.construct_pairs": {
            "name": "construct_pairs",
            "location": 133,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "py_type_extractor.type_extractor.nodes.BaseNodeType.NodeType"
                ],
                "deep": [
                    "mypy.nodes.Var"
                ]
            }
        },
        "BaseConstructor.add_constructor": {
            "name": "add_constructor",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict",
                    "mypy.nodes.TypeInfo"
                ],
                "tag": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "bytes",
                    "bool"
                ],
                "constructor": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "bytes",
                    "bool"
                ]
            }
        },
        "BaseConstructor.add_multi_constructor": {
            "name": "add_multi_constructor",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, Any]",
                    "Sequence[str]",
                    "Sequence[List[Any]]",
                    "Union[int, str, bool]"
                ],
                "tag_prefix": [
                    "str",
                    "dict"
                ],
                "multi_constructor": [
                    "str",
                    "dict"
                ]
            }
        },
        "SafeConstructor.construct_scalar": {
            "name": "construct_scalar",
            "location": 159,
            "return": [
                "int",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bytes",
                    "str"
                ]
            }
        },
        "SafeConstructor.flatten_mapping": {
            "name": "flatten_mapping",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int",
                    "types.trees.NodeT",
                    "Union[mypy.nodes.ImporFrom, mypy.nodes.ImporAll]"
                ]
            }
        },
        "SafeConstructor.construct_mapping": {
            "name": "construct_mapping",
            "location": 201,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "int",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Optional[Any]",
                    "Optional[mypy.nodes.Node]"
                ],
                "deep": [
                    "bool",
                    "Union[mypy.nodes.Var, mypy.nodes.FuncDef, mypy.nodes.OverloadedFuncDef]",
                    "bytearray"
                ]
            }
        },
        "SafeConstructor.construct_yaml_null": {
            "name": "construct_yaml_null",
            "location": 206,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.MypyFile",
                    "int"
                ]
            }
        },
        "SafeConstructor.construct_yaml_bool": {
            "name": "construct_yaml_bool",
            "location": 219,
            "return": [
                "float",
                "bool",
                "Optional[str]",
                "Optional[Sequence[str]]",
                "Optional[Callable]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict",
                    "str"
                ]
            }
        },
        "SafeConstructor.construct_yaml_int": {
            "name": "construct_yaml_int",
            "location": 223,
            "return": [
                "float",
                "Optional[int]",
                "str",
                "Generator",
                "int"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "dict",
                    "bool"
                ]
            }
        },
        "SafeConstructor.construct_yaml_float": {
            "name": "construct_yaml_float",
            "location": 256,
            "return": [
                "Optional[int]",
                "str",
                "int",
                "float",
                "tuple",
                "Generator",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "dict",
                    "bool"
                ]
            }
        },
        "SafeConstructor.construct_yaml_binary": {
            "name": "construct_yaml_binary",
            "location": 280,
            "return": [
                "str",
                "bool",
                "list",
                "Union[str, int]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "mypy.nodes.Node",
                    "yaml.nodes.MappingNode",
                    "astroid.nodes.ClassDef"
                ]
            }
        },
        "SafeConstructor.construct_yaml_timestamp": {
            "name": "construct_yaml_timestamp",
            "location": 308,
            "return": [
                "Optional[str]",
                "datetime.date",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "Pattern[str]",
                    "Pattern[bytes]",
                    "Match[bytes]"
                ]
            }
        },
        "SafeConstructor.construct_yaml_omap": {
            "name": "construct_yaml_omap",
            "location": 338,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict",
                    "py_type_extractor.type_extractor.nodes.BaseNodeType.NodeType"
                ]
            }
        },
        "SafeConstructor.construct_yaml_pairs": {
            "name": "construct_yaml_pairs",
            "location": 360,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict",
                    "py_type_extractor.type_extractor.nodes.BaseNodeType.NodeType"
                ]
            }
        },
        "SafeConstructor.construct_yaml_set": {
            "name": "construct_yaml_set",
            "location": 381,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool",
                    "List[mypy.types.Type]",
                    "\"RegistryData\"",
                    "\"DependencyGraph\""
                ]
            }
        },
        "SafeConstructor.construct_yaml_str": {
            "name": "construct_yaml_str",
            "location": 387,
            "return": [
                "int",
                "str",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "docutils.nodes.Element"
                ]
            }
        },
        "SafeConstructor.construct_yaml_seq": {
            "name": "construct_yaml_seq",
            "location": 390,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.types.Type",
                    "List[str]",
                    "parsimonious.nodes.Node",
                    "Type"
                ]
            }
        },
        "SafeConstructor.construct_yaml_map": {
            "name": "construct_yaml_map",
            "location": 395,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Optional[Callable[[], mypy.types.Instance]]",
                    "types.TracebackType",
                    "Type",
                    "Type[object]"
                ]
            }
        },
        "SafeConstructor.construct_yaml_object": {
            "name": "construct_yaml_object",
            "location": 401,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "...",
                    "List[str]",
                    "bytes",
                    "Iterable[str]",
                    "str",
                    "List[List[str]]",
                    "List[mypy.types.Type]"
                ],
                "cls": [
                    "Pattern",
                    "tuple",
                    "type",
                    "Type"
                ]
            }
        },
        "SafeConstructor.construct_undefined": {
            "name": "construct_undefined",
            "location": 411,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "docutils.nodes.Node",
                    "Optional[mypy.nodes.SymbolNode]"
                ]
            }
        },
        "Constructor.construct_python_str": {
            "name": "construct_python_str",
            "location": 469,
            "return": [
                "int",
                "str",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "docutils.nodes.Element"
                ]
            }
        },
        "Constructor.construct_python_unicode": {
            "name": "construct_python_unicode",
            "location": 472,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.MypyFile",
                    "int"
                ]
            }
        },
        "Constructor.construct_python_bytes": {
            "name": "construct_python_bytes",
            "location": 475,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "Optional[float]",
                "int"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "yaml.nodes.MappingNode",
                    "str",
                    "mypy.nodes.Expression"
                ]
            }
        },
        "Constructor.construct_python_long": {
            "name": "construct_python_long",
            "location": 491,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Iterable[T]",
                    "str",
                    "bytes",
                    "list",
                    "int"
                ]
            }
        },
        "Constructor.construct_python_complex": {
            "name": "construct_python_complex",
            "location": 494,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.MypyFile",
                    "int"
                ]
            }
        },
        "Constructor.construct_python_tuple": {
            "name": "construct_python_tuple",
            "location": 497,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.MypyFile",
                    "int"
                ]
            }
        },
        "Constructor.find_python_module": {
            "name": "find_python_module",
            "location": 500,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "mark": [
                    "str",
                    "mypy.types.NoneType",
                    "bool"
                ]
            }
        },
        "Constructor.find_python_name": {
            "name": "find_python_name",
            "location": 511,
            "return": [
                "mypy.types.Instance",
                "str",
                "Optional[Callable]",
                "mypy.nodes.Context"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Set[str]",
                    "Optional[str]"
                ],
                "mark": [
                    "str"
                ]
            }
        },
        "Constructor.construct_python_name": {
            "name": "construct_python_name",
            "location": 532,
            "return": [
                "bool",
                "Callable",
                "mypy.nodes.Lvalue",
                "Tuple[str, Optional[str]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "suffix": [
                    "mypy.nodes.Var",
                    "dict",
                    "Dict[str, Any]"
                ],
                "node": [
                    "mypy.nodes.Var",
                    "dict"
                ]
            }
        },
        "Constructor.construct_python_module": {
            "name": "construct_python_module",
            "location": 539,
            "return": [
                "Callable",
                "Tuple[int, int]",
                "Type",
                "Callable[[], object]"
            ],
            "arguments": {
                "self": [],
                "suffix": [
                    "types.TracebackType",
                    "yaml.nodes.Node",
                    "int",
                    "BaseException"
                ],
                "node": [
                    "mypy.nodes.Var",
                    "wemake_python_styleguide.types.AnyFunctionDef"
                ]
            }
        },
        "Constructor.make_python_instance": {
            "name": "make_python_instance",
            "location": 546,
            "return": [
                "bool",
                "int",
                "Iterable[str]",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "suffix": [
                    "Dict[str, Any]",
                    "Exception",
                    "List[str]",
                    "bytes"
                ],
                "node": [
                    "Dict[str, Any]",
                    "Exception",
                    "List[str]",
                    "bytes"
                ],
                "args": [],
                "kwds": [
                    "mypy.types.CallableType",
                    "Union",
                    "Exception",
                    "Type",
                    "Set[str]"
                ],
                "newobj": [
                    "Optional[mypy.nodes.TypeInfo]",
                    "yaml.nodes.Node",
                    "mypy.types.CallableType",
                    "mypy.nodes.TypeInfo",
                    "mypy.nodes.ClassDef",
                    "Callable"
                ]
            }
        },
        "Constructor.set_python_instance_state": {
            "name": "set_python_instance_state",
            "location": 558,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str"
                ],
                "state": [
                    "Sequence[Sequence[str]]",
                    "Sequence[Tuple[str, int]]"
                ]
            }
        },
        "Constructor.construct_python_object": {
            "name": "construct_python_object",
            "location": 572,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "suffix": [
                    "str",
                    "types.Message",
                    "List[str]",
                    "mypy.types.Type"
                ],
                "node": [
                    "str",
                    "mypy.types.Type",
                    "Optional[Mapping[str, Any]]"
                ]
            }
        },
        "Constructor.construct_python_object_apply": {
            "name": "construct_python_object_apply",
            "location": 581,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "suffix": [
                    "str",
                    "Exception",
                    "bool"
                ],
                "node": [
                    "yaml.nodes.Node",
                    "bool",
                    "Type"
                ],
                "newobj": [
                    "str",
                    "Exception",
                    "bool"
                ]
            }
        },
        "Constructor.construct_python_object_new": {
            "name": "construct_python_object_new",
            "location": 616,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "suffix": [
                    "yaml.nodes.MappingNode",
                    "ark.types.PrimalDinoCharacter",
                    "bool",
                    "Iterable[str]",
                    "str"
                ],
                "node": [
                    "yaml.nodes.MappingNode",
                    "ark.types.PrimalDinoCharacter",
                    "bool",
                    "Iterable[str]",
                    "str"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pyyaml/st3/yaml/cyaml.py": {
        "CBaseLoader.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "str",
                    "bool"
                ]
            }
        },
        "CSafeLoader.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "str",
                    "bool"
                ]
            }
        },
        "CLoader.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "str",
                    "bool"
                ]
            }
        },
        "CBaseDumper.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "default_style": [
                    "None",
                    "int",
                    "Optional[float]",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Optional[Mapping[str, str]]"
                ],
                "default_flow_style": [
                    "None",
                    "int",
                    "Optional[float]",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Optional[Mapping[str, str]]"
                ],
                "canonical": [
                    "None",
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "indent": [
                    "None",
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "width": [
                    "None",
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "allow_unicode": [
                    "None",
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "line_break": [
                    "None",
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "encoding": [
                    "None",
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "explicit_start": [
                    "None",
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "explicit_end": [
                    "None",
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "version": [
                    "None",
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "tags": [
                    "None",
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ]
            }
        },
        "CSafeDumper.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "default_style": [
                    "None",
                    "int",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Callable",
                    "str",
                    "bool"
                ],
                "default_flow_style": [
                    "None",
                    "int",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Callable",
                    "str",
                    "bool"
                ],
                "canonical": [
                    "None",
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "indent": [
                    "None",
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "width": [
                    "None",
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "allow_unicode": [
                    "None",
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "line_break": [
                    "None",
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "encoding": [
                    "None",
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "explicit_start": [
                    "None",
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "explicit_end": [
                    "None",
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "version": [
                    "None",
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "tags": [
                    "None",
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ]
            }
        },
        "CDumper.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "default_style": [
                    "None",
                    "int",
                    "Optional[float]",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Optional[Mapping[str, str]]"
                ],
                "default_flow_style": [
                    "None",
                    "int",
                    "Optional[float]",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Optional[Mapping[str, str]]"
                ],
                "canonical": [
                    "None",
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "indent": [
                    "None",
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "width": [
                    "None",
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "allow_unicode": [
                    "None",
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "line_break": [
                    "None",
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "encoding": [
                    "None",
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "explicit_start": [
                    "None",
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "explicit_end": [
                    "None",
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "version": [
                    "None",
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ],
                "tags": [
                    "None",
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pyyaml/st3/yaml/dumper.py": {
        "BaseDumper.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "default_style": [
                    "None",
                    "int",
                    "Optional[float]",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Optional[Mapping[str, str]]"
                ],
                "default_flow_style": [
                    "None",
                    "int",
                    "Optional[float]",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Optional[Mapping[str, str]]"
                ],
                "canonical": [
                    "None",
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "indent": [
                    "None",
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "width": [
                    "None",
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "allow_unicode": [
                    "None",
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "line_break": [
                    "None",
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "encoding": [
                    "None",
                    "int",
                    "bool",
                    "str",
                    "Optional[int]"
                ],
                "explicit_start": [
                    "None",
                    "int",
                    "bool",
                    "str",
                    "Optional[int]"
                ],
                "explicit_end": [
                    "None",
                    "int",
                    "bool",
                    "str",
                    "Optional[int]"
                ],
                "version": [
                    "None",
                    "int",
                    "bool",
                    "str",
                    "Optional[int]"
                ],
                "tags": [
                    "None",
                    "int",
                    "bool",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "SafeDumper.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "default_style": [
                    "None",
                    "int",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Callable",
                    "str",
                    "bool"
                ],
                "default_flow_style": [
                    "None",
                    "int",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Callable",
                    "str",
                    "bool"
                ],
                "canonical": [
                    "None",
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "indent": [
                    "None",
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "width": [
                    "None",
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "allow_unicode": [
                    "None",
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "line_break": [
                    "None",
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "encoding": [
                    "None",
                    "int",
                    "bool",
                    "str",
                    "Optional[int]"
                ],
                "explicit_start": [
                    "None",
                    "int",
                    "bool",
                    "str",
                    "Optional[int]"
                ],
                "explicit_end": [
                    "None",
                    "int",
                    "bool",
                    "str",
                    "Optional[int]"
                ],
                "version": [
                    "None",
                    "int",
                    "bool",
                    "str",
                    "Optional[int]"
                ],
                "tags": [
                    "None",
                    "int",
                    "bool",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "Dumper.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "default_style": [
                    "None",
                    "int",
                    "Optional[float]",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Optional[Mapping[str, str]]"
                ],
                "default_flow_style": [
                    "None",
                    "int",
                    "Optional[float]",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Optional[Mapping[str, str]]"
                ],
                "canonical": [
                    "None",
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "indent": [
                    "None",
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "width": [
                    "None",
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "allow_unicode": [
                    "None",
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "line_break": [
                    "None",
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "encoding": [
                    "None",
                    "int",
                    "bool",
                    "str",
                    "Optional[int]"
                ],
                "explicit_start": [
                    "None",
                    "int",
                    "bool",
                    "str",
                    "Optional[int]"
                ],
                "explicit_end": [
                    "None",
                    "int",
                    "bool",
                    "str",
                    "Optional[int]"
                ],
                "version": [
                    "None",
                    "int",
                    "bool",
                    "str",
                    "Optional[int]"
                ],
                "tags": [
                    "None",
                    "int",
                    "bool",
                    "str",
                    "Optional[int]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pyyaml/st3/yaml/emitter.py": {
        "ScalarAnalysis.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "scalar": [
                    "bool",
                    "int",
                    "str",
                    "List['cirq.Circuit']"
                ],
                "empty": [
                    "bool",
                    "int",
                    "str",
                    "List['cirq.Circuit']"
                ],
                "multiline": [
                    "bool",
                    "int",
                    "str",
                    "List['cirq.Circuit']"
                ],
                "allow_flow_plain": [
                    "bool",
                    "str"
                ],
                "allow_block_plain": [
                    "bool",
                    "int",
                    "Iterable[Dict[str, Any]]",
                    "Dict[str, float]"
                ],
                "allow_single_quoted": [
                    "bool",
                    "int",
                    "str",
                    "List['cirq.Circuit']"
                ],
                "allow_double_quoted": [
                    "bool",
                    "int",
                    "str",
                    "List['cirq.Circuit']"
                ],
                "allow_block": [
                    "str",
                    "bool",
                    "Hashable"
                ]
            }
        },
        "Emitter.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "bool",
                    "List['cirq.Circuit']",
                    "int",
                    "Optional[dict]"
                ],
                "canonical": [
                    "None",
                    "bool",
                    "List['cirq.Circuit']",
                    "int",
                    "Optional[dict]"
                ],
                "indent": [
                    "Optional[float]",
                    "float",
                    "Optional[int]",
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[Callable[[str], bool]]",
                    "Optional[Callable]",
                    "Optional[bool]"
                ],
                "width": [
                    "int",
                    "Optional[int]"
                ],
                "allow_unicode": [
                    "None",
                    "bool",
                    "List['cirq.Circuit']",
                    "int",
                    "Optional[dict]"
                ],
                "line_break": [
                    "None",
                    "bool",
                    "str",
                    "int",
                    "FrozenSet[str]"
                ]
            }
        },
        "Emitter.dispose": {
            "name": "dispose",
            "location": 106,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.emit": {
            "name": "emit",
            "location": 111,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "raiden_libs.events.Event",
                    "Mapping[str, Any]",
                    "events.events_base.EventType"
                ]
            }
        },
        "Emitter.need_more_events": {
            "name": "need_more_events",
            "location": 120,
            "return": [
                "bool",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.need_events": {
            "name": "need_events",
            "location": 133,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "count": [
                    "int"
                ]
            }
        },
        "Emitter.increase_indent": {
            "name": "increase_indent",
            "location": 146,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "flow": [
                    "bool"
                ],
                "indentless": [
                    "bool"
                ]
            }
        },
        "Emitter.expect_stream_start": {
            "name": "expect_stream_start",
            "location": 160,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.expect_nothing": {
            "name": "expect_nothing",
            "location": 170,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.expect_first_document_start": {
            "name": "expect_first_document_start",
            "location": 175,
            "return": [
                "str",
                "float",
                "List[Tuple[float, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.expect_document_start": {
            "name": "expect_document_start",
            "location": 178,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "first": [
                    "str",
                    "bool"
                ]
            }
        },
        "Emitter.expect_document_end": {
            "name": "expect_document_end",
            "location": 214,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.expect_document_root": {
            "name": "expect_document_root",
            "location": 226,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.expect_node": {
            "name": "expect_node",
            "location": 232,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "bool",
                    "str",
                    "bytes"
                ],
                "sequence": [
                    "bool",
                    "str",
                    "bytes"
                ],
                "mapping": [
                    "bool",
                    "str",
                    "bytes"
                ],
                "simple_key": [
                    "bool",
                    "bytes",
                    "str",
                    "dict",
                    "Callable"
                ]
            }
        },
        "Emitter.expect_alias": {
            "name": "expect_alias",
            "location": 260,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.expect_scalar": {
            "name": "expect_scalar",
            "location": 266,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.expect_flow_sequence": {
            "name": "expect_flow_sequence",
            "location": 274,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.expect_first_flow_sequence_item": {
            "name": "expect_first_flow_sequence_item",
            "location": 280,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.expect_flow_sequence_item": {
            "name": "expect_flow_sequence_item",
            "location": 292,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.expect_flow_mapping": {
            "name": "expect_flow_mapping",
            "location": 310,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.expect_first_flow_mapping_key": {
            "name": "expect_first_flow_mapping_key",
            "location": 316,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.expect_flow_mapping_key": {
            "name": "expect_flow_mapping_key",
            "location": 333,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.expect_flow_mapping_simple_value": {
            "name": "expect_flow_mapping_simple_value",
            "location": 354,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.expect_flow_mapping_value": {
            "name": "expect_flow_mapping_value",
            "location": 359,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.expect_block_sequence": {
            "name": "expect_block_sequence",
            "location": 368,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.expect_first_block_sequence_item": {
            "name": "expect_first_block_sequence_item",
            "location": 373,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Emitter.expect_block_sequence_item": {
            "name": "expect_block_sequence_item",
            "location": 376,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "first": [
                    "bool",
                    "Callable",
                    "str",
                    "Optional[Union[bool, Any]]"
                ]
            }
        },
        "Emitter.expect_block_mapping": {
            "name": "expect_block_mapping",
            "location": 388,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.expect_first_block_mapping_key": {
            "name": "expect_first_block_mapping_key",
            "location": 392,
            "return": [
                "dict",
                "str",
                "Optional[Dict]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.expect_block_mapping_key": {
            "name": "expect_block_mapping_key",
            "location": 395,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "first": [
                    "bool",
                    "float",
                    "str"
                ]
            }
        },
        "Emitter.expect_block_mapping_simple_value": {
            "name": "expect_block_mapping_simple_value",
            "location": 409,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.expect_block_mapping_value": {
            "name": "expect_block_mapping_value",
            "location": 414,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.check_empty_sequence": {
            "name": "check_empty_sequence",
            "location": 422,
            "return": [
                "bool",
                "bytes",
                "Sequence[int]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.check_empty_mapping": {
            "name": "check_empty_mapping",
            "location": 426,
            "return": [
                "bool",
                "bytes",
                "Sequence[int]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.check_empty_document": {
            "name": "check_empty_document",
            "location": 430,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.check_simple_key": {
            "name": "check_simple_key",
            "location": 437,
            "return": [
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.process_anchor": {
            "name": "process_anchor",
            "location": 459,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "indicator": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Emitter.process_tag": {
            "name": "process_tag",
            "location": 469,
            "return": [
                "None",
                "set",
                "Union[tuple, list]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.choose_scalar_style": {
            "name": "choose_scalar_style",
            "location": 494,
            "return": [
                "typing.Text",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.process_scalar": {
            "name": "process_scalar",
            "location": 515,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.prepare_version": {
            "name": "prepare_version",
            "location": 539,
            "return": [
                "typing.Text",
                "Dict[str, bool]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "Emitter.prepare_tag_handle": {
            "name": "prepare_tag_handle",
            "location": 545,
            "return": [
                "str",
                "int",
                "float",
                "List[int]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "handle": [
                    "str"
                ]
            }
        },
        "Emitter.prepare_tag_prefix": {
            "name": "prepare_tag_prefix",
            "location": 557,
            "return": [
                "str",
                "int",
                "float",
                "List[int]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ]
            }
        },
        "Emitter.prepare_tag": {
            "name": "prepare_tag",
            "location": 580,
            "return": [
                "str",
                "OrderedDict",
                "Dict[str, List[Any]]",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "Sequence[str]",
                    "Sequence[Union[str, Any]]",
                    "Iterable[str]",
                    "Optional[str]"
                ]
            }
        },
        "Emitter.prepare_anchor": {
            "name": "prepare_anchor",
            "location": 616,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "anchor": [
                    "str",
                    "int",
                    "float",
                    "Union[float, int]"
                ]
            }
        },
        "Emitter.analyze_scalar": {
            "name": "analyze_scalar",
            "location": 626,
            "return": [
                "ScalarAnalysis",
                "str",
                "bytearray",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "scalar": [
                    "str",
                    "Dict[str, str]",
                    "bytearray",
                    "List[str]"
                ]
            }
        },
        "Emitter.flush_stream": {
            "name": "flush_stream",
            "location": 787,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.write_stream_start": {
            "name": "write_stream_start",
            "location": 791,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.write_stream_end": {
            "name": "write_stream_end",
            "location": 796,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.write_indicator": {
            "name": "write_indicator",
            "location": 799,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "indicator": [
                    "str",
                    "dict",
                    "bytes"
                ],
                "need_whitespace": [
                    "int",
                    "Callable",
                    "str"
                ],
                "whitespace": [
                    "bool",
                    "int",
                    "Callable",
                    "str"
                ],
                "indention": [
                    "bool",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Emitter.write_indent": {
            "name": "write_indent",
            "location": 813,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emitter.write_line_break": {
            "name": "write_line_break",
            "location": 826,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "None",
                    "bytes",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Emitter.write_version_directive": {
            "name": "write_version_directive",
            "location": 837,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "version_text": [
                    "str",
                    "Mapping[str, Any]",
                    "Optional[str]",
                    "bytes",
                    "Callable[[str], T]",
                    "int"
                ]
            }
        },
        "Emitter.write_tag_directive": {
            "name": "write_tag_directive",
            "location": 844,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "handle_text": [
                    "str",
                    "bool",
                    "Callable"
                ],
                "prefix_text": [
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        },
        "Emitter.write_single_quoted": {
            "name": "write_single_quoted",
            "location": 853,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "int",
                    "str"
                ],
                "split": [
                    "bool",
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "Emitter.write_double_quoted": {
            "name": "write_double_quoted",
            "location": 925,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "int",
                    "str",
                    "Callable"
                ],
                "split": [
                    "bool",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "Emitter.determine_block_hints": {
            "name": "determine_block_hints",
            "location": 979,
            "return": [
                "Mapping",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "bool"
                ]
            }
        },
        "Emitter.write_folded": {
            "name": "write_folded",
            "location": 990,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Emitter.write_literal": {
            "name": "write_literal",
            "location": 1044,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Emitter.write_plain": {
            "name": "write_plain",
            "location": 1079,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "int",
                    "str"
                ],
                "split": [
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pyyaml/st3/yaml/error.py": {
        "Mark.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "OrderedDict",
                    "Optional[Sequence[Any]]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]"
                ],
                "index": [
                    "bool",
                    "Optional[List[str]]",
                    "str"
                ],
                "line": [
                    "str",
                    "Optional[str]",
                    "Optional[float]",
                    "dict"
                ],
                "column": [
                    "bool",
                    "Optional[List[str]]",
                    "str"
                ],
                "buffer": [
                    "bool",
                    "Optional[List[str]]",
                    "str"
                ],
                "pointer": [
                    "bool",
                    "Optional[List[str]]",
                    "str"
                ]
            }
        },
        "Mark.get_snippet": {
            "name": "get_snippet",
            "location": 14,
            "return": [
                "None",
                "str",
                "Optional[str]",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "indent": [
                    "int",
                    "List[int]",
                    "str",
                    "bytes"
                ],
                "max_length": [
                    "int",
                    "str",
                    "Tuple[int, int]"
                ]
            }
        },
        "Mark.__str__": {
            "name": "__str__",
            "location": 37,
            "return": [
                "typing.Text",
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "MarkedYAMLError.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "None",
                    "int",
                    "bool",
                    "float"
                ],
                "context_mark": [
                    "None",
                    "int",
                    "bool",
                    "float"
                ],
                "problem": [
                    "None",
                    "int",
                    "bool",
                    "float"
                ],
                "problem_mark": [
                    "None",
                    "int",
                    "bool",
                    "float"
                ],
                "note": [
                    "None",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "MarkedYAMLError.__str__": {
            "name": "__str__",
            "location": 58,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/pyyaml/st3/yaml/events.py": {
        "Event.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "start_mark": [
                    "int",
                    "None"
                ],
                "end_mark": [
                    "int",
                    "None"
                ]
            }
        },
        "Event.__repr__": {
            "name": "__repr__",
            "location": 8,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeEvent.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "anchor": [
                    "int",
                    "dict"
                ],
                "start_mark": [
                    "None",
                    "int",
                    "bool",
                    "Dict[str, str]"
                ],
                "end_mark": [
                    "None",
                    "int",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "CollectionStartEvent.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "anchor": [
                    "bool",
                    "Optional[bool]",
                    "int",
                    "list",
                    "str",
                    "Optional[str]",
                    "Optional[List[Any]]"
                ],
                "tag": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "Optional[float]",
                    "Optional[bytes]",
                    "Optional[bool]"
                ],
                "implicit": [
                    "bool",
                    "Optional[bool]",
                    "int",
                    "list",
                    "str",
                    "Optional[str]",
                    "Optional[List[Any]]"
                ],
                "start_mark": [
                    "None",
                    "Optional[int]",
                    "Optional[bool]",
                    "Optional[List[\"CustomLineItemDraft\"]]",
                    "Optional[List[str]]",
                    "Tuple[int, int, int]",
                    "Dict[str, str]",
                    "str",
                    "int"
                ],
                "end_mark": [
                    "None",
                    "int",
                    "Optional[float]",
                    "float",
                    "str",
                    "Tuple[int, int]"
                ],
                "flow_style": [
                    "None",
                    "bool",
                    "Optional[bool]",
                    "int",
                    "list",
                    "str",
                    "Optional[str]",
                    "Optional[List[Any]]"
                ]
            }
        },
        "StreamStartEvent.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "start_mark": [
                    "int",
                    "None"
                ],
                "end_mark": [
                    "int",
                    "None"
                ],
                "encoding": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "DocumentStartEvent.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "start_mark": [
                    "None",
                    "int",
                    "List[str]"
                ],
                "end_mark": [
                    "None"
                ],
                "explicit": [
                    "None",
                    "str",
                    "int",
                    "list",
                    "bool",
                    "float"
                ],
                "version": [
                    "None",
                    "str",
                    "int",
                    "list",
                    "bool",
                    "float"
                ],
                "tags": [
                    "None",
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "DocumentEndEvent.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "start_mark": [
                    "int",
                    "None"
                ],
                "end_mark": [
                    "int",
                    "None"
                ],
                "explicit": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "ScalarEvent.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "anchor": [
                    "List[List[str]]",
                    "int",
                    "bool",
                    "List[str]",
                    "Optional[str]"
                ],
                "tag": [
                    "Optional[str]",
                    "str",
                    "Optional[int]"
                ],
                "implicit": [
                    "List[List[str]]",
                    "int",
                    "bool",
                    "List[str]",
                    "Optional[str]"
                ],
                "value": [
                    "int",
                    "str",
                    "float",
                    "tuple",
                    "list",
                    "T"
                ],
                "start_mark": [
                    "None",
                    "str",
                    "Union[int, float]",
                    "Collection",
                    "int",
                    "Optional[bool]"
                ],
                "end_mark": [
                    "None",
                    "bool",
                    "int",
                    "float",
                    "Tuple[int, int]",
                    "str",
                    "Optional[List[str]]",
                    "Optional[float]"
                ],
                "style": [
                    "None",
                    "List[List[str]]",
                    "int",
                    "bool",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pyyaml/st3/yaml/loader.py": {
        "BaseLoader.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "SafeLoader.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Loader.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pyyaml/st3/yaml/nodes.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 3,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "int",
                    "Optional[float]"
                ],
                "value": [
                    "T",
                    "str",
                    "float"
                ],
                "start_mark": [
                    "str",
                    "Optional[List[str]]",
                    "Optional[int]",
                    "int",
                    "bool",
                    "Optional[List[\"CustomLineItemDraft\"]]",
                    "Tuple[int, int, int]"
                ],
                "end_mark": [
                    "bool",
                    "Tuple[int, int]",
                    "float"
                ]
            }
        },
        "Node.__repr__": {
            "name": "__repr__",
            "location": 8,
            "return": [
                "typing.Text",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScalarNode.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "int",
                    "Optional[float]"
                ],
                "value": [
                    "T",
                    "str",
                    "float"
                ],
                "start_mark": [
                    "None",
                    "str",
                    "Optional[List[str]]",
                    "Optional[int]",
                    "int",
                    "bool",
                    "Optional[List[\"CustomLineItemDraft\"]]",
                    "Tuple[int, int, int]"
                ],
                "end_mark": [
                    "None",
                    "bool",
                    "Tuple[int, int]",
                    "float"
                ],
                "style": [
                    "None",
                    "bool",
                    "Callable",
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "CollectionNode.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "Optional[str]",
                    "int",
                    "str",
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[bytes]"
                ],
                "value": [
                    "int",
                    "float",
                    "dict",
                    "T"
                ],
                "start_mark": [
                    "None",
                    "Optional[List[str]]",
                    "bool",
                    "Optional[List[\"CustomLineItemDraft\"]]",
                    "Tuple[int, int, int]",
                    "int"
                ],
                "end_mark": [
                    "None",
                    "bool",
                    "int",
                    "Tuple[int, int]",
                    "Optional[float]"
                ],
                "flow_style": [
                    "None",
                    "str",
                    "list",
                    "bool",
                    "Tuple[float, float]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pyyaml/st3/yaml/parser.py": {
        "Parser.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.dispose": {
            "name": "dispose",
            "location": 89,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.check_event": {
            "name": "check_event",
            "location": 94,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.peek_event": {
            "name": "peek_event",
            "location": 107,
            "return": [
                "Mapping[str, Any]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.get_event": {
            "name": "get_event",
            "location": 114,
            "return": [
                "None",
                "int",
                "str",
                "List[List[float]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_stream_start": {
            "name": "parse_stream_start",
            "location": 127,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_implicit_document_start": {
            "name": "parse_implicit_document_start",
            "location": 139,
            "return": [
                "Callable",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_document_start": {
            "name": "parse_document_start",
            "location": 159,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_document_end": {
            "name": "parse_document_end",
            "location": 190,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_document_content": {
            "name": "parse_document_content",
            "location": 208,
            "return": [
                "int",
                "Dict[str, Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.process_directives": {
            "name": "process_directives",
            "location": 217,
            "return": [
                "tuple[None]",
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_block_node": {
            "name": "parse_block_node",
            "location": 264,
            "return": [
                "Optional[Any]",
                "bool",
                "Optional[Dict[str, str]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_flow_node": {
            "name": "parse_flow_node",
            "location": 267,
            "return": [
                "int",
                "str",
                "Optional[Dict]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_block_node_or_indentless_sequence": {
            "name": "parse_block_node_or_indentless_sequence",
            "location": 270,
            "return": [
                "bool",
                "Optional[Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_node": {
            "name": "parse_node",
            "location": 273,
            "return": [
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "bool",
                    "Type"
                ],
                "indentless_sequence": [
                    "bool",
                    "Exception",
                    "str",
                    "Tuple[()]",
                    "error.GraphQLError",
                    "Optional[Tuple[str, int]]",
                    "dict",
                    "bytes"
                ]
            }
        },
        "Parser.parse_block_sequence_first_entry": {
            "name": "parse_block_sequence_first_entry",
            "location": 376,
            "return": [
                "str",
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_block_sequence_entry": {
            "name": "parse_block_sequence_entry",
            "location": 381,
            "return": [
                "bool",
                "Union['IndexBase', 'Series']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_indentless_sequence_entry": {
            "name": "parse_indentless_sequence_entry",
            "location": 402,
            "return": [
                "List[dict]",
                "bool",
                "Union['IndexBase', 'Series']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_block_mapping_first_key": {
            "name": "parse_block_mapping_first_key",
            "location": 422,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_block_mapping_key": {
            "name": "parse_block_mapping_key",
            "location": 427,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_block_mapping_value": {
            "name": "parse_block_mapping_value",
            "location": 446,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_flow_sequence_first_entry": {
            "name": "parse_flow_sequence_first_entry",
            "location": 471,
            "return": [
                "bool",
                "float",
                "Optional[bool]",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_flow_sequence_entry": {
            "name": "parse_flow_sequence_entry",
            "location": 476,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "first": [
                    "bool",
                    "int"
                ]
            }
        },
        "Parser.parse_flow_sequence_entry_mapping_key": {
            "name": "parse_flow_sequence_entry_mapping_key",
            "location": 502,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_flow_sequence_entry_mapping_value": {
            "name": "parse_flow_sequence_entry_mapping_value",
            "location": 512,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_flow_sequence_entry_mapping_end": {
            "name": "parse_flow_sequence_entry_mapping_end",
            "location": 526,
            "return": [
                "str",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_flow_mapping_first_key": {
            "name": "parse_flow_mapping_first_key",
            "location": 537,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_flow_mapping_key": {
            "name": "parse_flow_mapping_key",
            "location": 542,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "first": [
                    "bool"
                ]
            }
        },
        "Parser.parse_flow_mapping_value": {
            "name": "parse_flow_mapping_value",
            "location": 569,
            "return": [
                "bool",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_flow_mapping_empty_value": {
            "name": "parse_flow_mapping_empty_value",
            "location": 583,
            "return": [
                "Optional[int]",
                "float",
                "Generator",
                "int",
                "str",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.process_empty_scalar": {
            "name": "process_empty_scalar",
            "location": 587,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "mark": [
                    "Type",
                    "Optional[int]",
                    "List[str]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pyyaml/st3/yaml/reader.py": {
        "ReaderError.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ],
                "position": [
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ],
                "character": [
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ],
                "encoding": [
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ],
                "reason": [
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "ReaderError.__str__": {
            "name": "__str__",
            "location": 33,
            "return": [
                "typing.Text",
                "str",
                "Sequence[Sequence[T]]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reader.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "Optional[IO[bytes]]",
                    "Optional[IO[str]]",
                    "Optional[str]",
                    "Optional[TextIO]",
                    "bool",
                    "Optional[bytes]"
                ]
            }
        },
        "Reader.peek": {
            "name": "peek",
            "location": 87,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Mapping[str, Any]",
                    "IO[bytes]",
                    "dict",
                    "bytes"
                ]
            }
        },
        "Reader.prefix": {
            "name": "prefix",
            "location": 94,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "length": [
                    "int",
                    "List[List[int]]",
                    "bytes",
                    "memoryview"
                ]
            }
        },
        "Reader.forward": {
            "name": "forward",
            "location": 99,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "length": [
                    "int",
                    "list",
                    "List[str]",
                    "str",
                    "List[Dict]"
                ]
            }
        },
        "Reader.get_mark": {
            "name": "get_mark",
            "location": 114,
            "return": [
                "Mark",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reader.determine_encoding": {
            "name": "determine_encoding",
            "location": 122,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reader.check_printable": {
            "name": "check_printable",
            "location": 138,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "Pattern[str]"
                ]
            }
        },
        "Reader.update": {
            "name": "update",
            "location": 146,
            "return": [
                "None",
                "str",
                "Set[str]",
                "DefaultDict"
            ],
            "arguments": {
                "self": [],
                "length": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "Reader.update_raw": {
            "name": "update_raw",
            "location": 177,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "str",
                    "dict"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pyyaml/st3/yaml/representer.py": {
        "BaseRepresenter.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "default_style": [
                    "bool",
                    "str",
                    "list",
                    "datetime.date.time"
                ],
                "default_flow_style": [
                    "bool",
                    "Optional[int]",
                    "str",
                    "float",
                    "Optional[float]"
                ]
            }
        },
        "BaseRepresenter.represent": {
            "name": "represent",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "dict",
                    "str",
                    "int",
                    "Iterable"
                ]
            }
        },
        "BaseRepresenter.represent_data": {
            "name": "represent_data",
            "location": 32,
            "return": [
                "str",
                "List[int]",
                "types.ServiceT",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "server.types.CleanPredictionData"
                ]
            }
        },
        "BaseRepresenter.add_representer": {
            "name": "add_representer",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, Any]",
                    "hashdecoder.lib.types.hash_type",
                    "T",
                    "Callable"
                ],
                "data_type": [
                    "str",
                    "types.ModuleType",
                    "Mapping[str, Any]",
                    "Dict[str, Any]"
                ],
                "representer": [
                    "str",
                    "types.ModuleType",
                    "Mapping[str, Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "BaseRepresenter.add_multi_representer": {
            "name": "add_multi_representer",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "hashdecoder.lib.types.hash_type",
                    "List[Tuple[str, str]]"
                ],
                "data_type": [
                    "Optional[List[str]]",
                    "str",
                    "Mapping[str, Any]",
                    "tuple",
                    "bool",
                    "Dict[str, List[str]]"
                ],
                "representer": [
                    "Optional[List[str]]",
                    "str",
                    "Mapping[str, Any]",
                    "tuple",
                    "bool",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "BaseRepresenter.represent_scalar": {
            "name": "represent_scalar",
            "location": 76,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "list",
                    "List[str]",
                    "Iterable[Any]"
                ],
                "value": [
                    "str",
                    "list",
                    "List[str]",
                    "Iterable[Any]"
                ],
                "style": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "bytes",
                    "Optional[IO[bytes]]"
                ]
            }
        },
        "BaseRepresenter.represent_sequence": {
            "name": "represent_sequence",
            "location": 84,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "bool",
                    "Callable"
                ],
                "sequence": [
                    "bool",
                    "str",
                    "Union[bool, int]",
                    "Optional[bool]",
                    "Iterable[int]",
                    "Optional[float]"
                ],
                "flow_style": [
                    "Optional[bool]",
                    "str",
                    "float",
                    "Optional[str]"
                ]
            }
        },
        "BaseRepresenter.represent_mapping": {
            "name": "represent_mapping",
            "location": 102,
            "return": [
                "int",
                "tuple",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "bool",
                    "Optional[Any]",
                    "int"
                ],
                "mapping": [
                    "bool",
                    "Optional[Sequence[str]]",
                    "str",
                    "Type"
                ],
                "flow_style": [
                    "str",
                    "Dict[str, mypy.nodes.MypyFile]",
                    "Optional[str]",
                    "Optional[bool]",
                    "Set[str]"
                ]
            }
        },
        "BaseRepresenter.ignore_aliases": {
            "name": "ignore_aliases",
            "location": 129,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "bool",
                    "dict"
                ]
            }
        },
        "SafeRepresenter.ignore_aliases": {
            "name": "ignore_aliases",
            "location": 134,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "Union[bytes, bytearray, memoryview]",
                    "T"
                ]
            }
        },
        "SafeRepresenter.represent_none": {
            "name": "represent_none",
            "location": 142,
            "return": [
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bool",
                    "list",
                    "memoryview",
                    "bytes",
                    "List[Dict]",
                    "dict"
                ]
            }
        },
        "SafeRepresenter.represent_str": {
            "name": "represent_str",
            "location": 145,
            "return": [
                "bool",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "int",
                    "Iterable",
                    "Callable[[Any], None]"
                ]
            }
        },
        "SafeRepresenter.represent_binary": {
            "name": "represent_binary",
            "location": 148,
            "return": [
                "List[str]",
                "int",
                "dict",
                "str",
                "IO[bytes]",
                "List[List[int]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "str",
                    "bytes",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "SafeRepresenter.represent_bool": {
            "name": "represent_bool",
            "location": 155,
            "return": [
                "str",
                "OrderedDict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bool",
                    "List[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "SafeRepresenter.represent_int": {
            "name": "represent_int",
            "location": 162,
            "return": [
                "str",
                "List[dict]",
                "float"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "dict",
                    "Union[str, bytes]"
                ]
            }
        },
        "SafeRepresenter.represent_float": {
            "name": "represent_float",
            "location": 169,
            "return": [
                "str",
                "bool",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "SafeRepresenter.represent_list": {
            "name": "represent_list",
            "location": 189,
            "return": [
                "bool",
                "List[str]",
                "Dict[str, List[int]]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "T",
                    "Iterable[T]"
                ]
            }
        },
        "SafeRepresenter.represent_dict": {
            "name": "represent_dict",
            "location": 204,
            "return": [
                "Dict[str, Any]",
                "int",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "SafeRepresenter.represent_set": {
            "name": "represent_set",
            "location": 207,
            "return": [
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "bool",
                    "dict"
                ]
            }
        },
        "SafeRepresenter.represent_date": {
            "name": "represent_date",
            "location": 213,
            "return": [
                "bool",
                "int",
                "str",
                "OrderedDict",
                "dict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bool",
                    "bytes",
                    "str"
                ]
            }
        },
        "SafeRepresenter.represent_datetime": {
            "name": "represent_datetime",
            "location": 217,
            "return": [
                "bool",
                "str",
                "int",
                "OrderedDict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bool",
                    "bytes"
                ]
            }
        },
        "SafeRepresenter.represent_yaml_object": {
            "name": "represent_yaml_object",
            "location": 221,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "List[str]",
                    "str",
                    "List[\"DeliveryItem\"]",
                    "Optional[Sequence[str]]",
                    "Sequence[str]",
                    "Optional[List[\"DeliveryItem\"]]"
                ],
                "data": [
                    "str",
                    "Type",
                    "Tuple[str]",
                    "int"
                ],
                "cls": [
                    "bool",
                    "str",
                    "Optional[List[str]]"
                ],
                "flow_style": [
                    "List[str]",
                    "str",
                    "List[\"DeliveryItem\"]",
                    "Optional[Sequence[str]]",
                    "Sequence[str]",
                    "Optional[List[\"DeliveryItem\"]]"
                ]
            }
        },
        "SafeRepresenter.represent_undefined": {
            "name": "represent_undefined",
            "location": 228,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "Callable[[Any], None]",
                    "dict",
                    "int"
                ]
            }
        },
        "Representer.represent_complex": {
            "name": "represent_complex",
            "location": 272,
            "return": [
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "List[Union[int, float]]"
                ]
            }
        },
        "Representer.represent_tuple": {
            "name": "represent_tuple",
            "location": 283,
            "return": [
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "bytes"
                ]
            }
        },
        "Representer.represent_name": {
            "name": "represent_name",
            "location": 286,
            "return": [
                "str",
                "bool",
                "mypy.nodes.NameExpr"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "Dict[str, Callable]",
                    "Mapping",
                    "Optional[str]"
                ]
            }
        },
        "Representer.represent_module": {
            "name": "represent_module",
            "location": 290,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Collection[str]",
                    "Optional[Exception]",
                    "Iterable",
                    "type",
                    "str"
                ]
            }
        },
        "Representer.represent_object": {
            "name": "represent_object",
            "location": 294,
            "return": [
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "List[List[Any]]",
                    "Mapping[str, Any]",
                    "bytes"
                ]
            }
        },
        "Representer.represent_ordered_dict": {
            "name": "represent_ordered_dict",
            "location": 356,
            "return": [
                "str",
                "Set[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pyyaml/st3/yaml/resolver.py": {
        "BaseResolver.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseResolver.add_implicit_resolver": {
            "name": "add_implicit_resolver",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "T",
                    "Dict[str, Any]",
                    "dict",
                    "MutableMapping[str, Any]",
                    "Optional[str]"
                ],
                "tag": [
                    "str",
                    "bytes",
                    "Optional[Union[str, Any]]",
                    "List[Tuple[str, int]]",
                    "List[str]"
                ],
                "regexp": [
                    "str",
                    "bytes",
                    "Optional[Union[str, Any]]",
                    "List[Tuple[str, int]]",
                    "List[str]"
                ],
                "first": [
                    "Optional[str]",
                    "bool",
                    "Optional[int]",
                    "Tuple[Optional[str], Optional[str]]",
                    "str or None"
                ]
            }
        },
        "BaseResolver.add_path_resolver": {
            "name": "add_path_resolver",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable[str]"
                ],
                "tag": [
                    "bool",
                    "dict",
                    "List[str]"
                ],
                "path": [
                    "str",
                    "List[str]",
                    "bool",
                    "Iterable[str]"
                ],
                "kind": [
                    "None",
                    "bytes",
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "list",
                    "dict",
                    "Dict[int, str]"
                ]
            }
        },
        "BaseResolver.descend_resolver": {
            "name": "descend_resolver",
            "location": 91,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "current_node": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "current_index": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "BaseResolver.ascend_resolver": {
            "name": "ascend_resolver",
            "location": 114,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseResolver.check_resolver_prefix": {
            "name": "check_resolver_prefix",
            "location": 120,
            "return": [
                "mypy.nodes.OverloadedFuncDef",
                "None",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "depth": [
                    "str",
                    "List[int]",
                    "bool"
                ],
                "path": [
                    "str",
                    "List[int]",
                    "bool"
                ],
                "kind": [
                    "str",
                    "bool",
                    "Callable[[float], None]",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "current_node": [
                    "dict",
                    "str",
                    "bool",
                    "IO",
                    "Optional[mypy.nodes.TypeInfo]",
                    "bytes",
                    "Optional[str]"
                ],
                "current_index": [
                    "bool",
                    "str",
                    "Tuple[int]",
                    "int"
                ]
            }
        },
        "BaseResolver.resolve": {
            "name": "resolve",
            "location": 143,
            "return": [
                "str",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "kind": [
                    "str",
                    "Mapping[str, Any]",
                    "bool"
                ],
                "value": [
                    "dict",
                    "str",
                    "list",
                    "float",
                    "Dict[str, Any]"
                ],
                "implicit": [
                    "Tuple[int, int]",
                    "int",
                    "float"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pyyaml/st3/yaml/scanner.py": {
        "SimpleKey.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "token_number": [
                    "float",
                    "Dict[str, str]",
                    "bool",
                    "dict"
                ],
                "required": [
                    "float",
                    "Dict[str, str]",
                    "bool",
                    "dict"
                ],
                "index": [
                    "float",
                    "Dict[str, str]",
                    "bool",
                    "dict"
                ],
                "line": [
                    "str",
                    "Sequence[str]",
                    "List[str]",
                    "Optional[str]"
                ],
                "column": [
                    "float",
                    "Dict[str, str]",
                    "bool",
                    "dict"
                ],
                "mark": [
                    "float",
                    "Dict[str, str]",
                    "bool",
                    "dict"
                ]
            }
        },
        "Scanner.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.check_token": {
            "name": "check_token",
            "location": 113,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.peek_token": {
            "name": "peek_token",
            "location": 125,
            "return": [
                "dict",
                "bool",
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.get_token": {
            "name": "get_token",
            "location": 132,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.need_more_tokens": {
            "name": "need_more_tokens",
            "location": 142,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.fetch_more_tokens": {
            "name": "fetch_more_tokens",
            "location": 153,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.next_possible_simple_key": {
            "name": "next_possible_simple_key",
            "location": 261,
            "return": [
                "None",
                "str",
                "Dict[str, Any]",
                "List[str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.stale_possible_simple_keys": {
            "name": "stale_possible_simple_keys",
            "location": 276,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.save_possible_simple_key": {
            "name": "save_possible_simple_key",
            "location": 292,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.remove_possible_simple_key": {
            "name": "remove_possible_simple_key",
            "location": 309,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.unwind_indent": {
            "name": "unwind_indent",
            "location": 322,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "column": [
                    "int",
                    "float",
                    "Union[str, float]",
                    "tuple"
                ]
            }
        },
        "Scanner.add_indent": {
            "name": "add_indent",
            "location": 346,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "column": [
                    "str",
                    "tuple",
                    "int"
                ]
            }
        },
        "Scanner.fetch_stream_start": {
            "name": "fetch_stream_start",
            "location": 356,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.fetch_stream_end": {
            "name": "fetch_stream_end",
            "location": 368,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.fetch_directive": {
            "name": "fetch_directive",
            "location": 387,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.fetch_document_start": {
            "name": "fetch_document_start",
            "location": 399,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.fetch_document_end": {
            "name": "fetch_document_end",
            "location": 402,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.fetch_document_indicator": {
            "name": "fetch_document_indicator",
            "location": 405,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "TokenClass": [
                    "str",
                    "list",
                    "Set[str]"
                ]
            }
        },
        "Scanner.fetch_flow_sequence_start": {
            "name": "fetch_flow_sequence_start",
            "location": 421,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.fetch_flow_mapping_start": {
            "name": "fetch_flow_mapping_start",
            "location": 424,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.fetch_flow_collection_start": {
            "name": "fetch_flow_collection_start",
            "location": 427,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "TokenClass": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Scanner.fetch_flow_sequence_end": {
            "name": "fetch_flow_sequence_end",
            "location": 444,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.fetch_flow_mapping_end": {
            "name": "fetch_flow_mapping_end",
            "location": 447,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.fetch_flow_collection_end": {
            "name": "fetch_flow_collection_end",
            "location": 450,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "TokenClass": [
                    "str",
                    "list"
                ]
            }
        },
        "Scanner.fetch_flow_entry": {
            "name": "fetch_flow_entry",
            "location": 467,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.fetch_block_entry": {
            "name": "fetch_block_entry",
            "location": 481,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.fetch_key": {
            "name": "fetch_key",
            "location": 514,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.fetch_value": {
            "name": "fetch_value",
            "location": 542,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.fetch_alias": {
            "name": "fetch_alias",
            "location": 598,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.fetch_anchor": {
            "name": "fetch_anchor",
            "location": 609,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.fetch_tag": {
            "name": "fetch_tag",
            "location": 620,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.fetch_literal": {
            "name": "fetch_literal",
            "location": 631,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.fetch_folded": {
            "name": "fetch_folded",
            "location": 634,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.fetch_block_scalar": {
            "name": "fetch_block_scalar",
            "location": 637,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "style": [
                    "str"
                ]
            }
        },
        "Scanner.fetch_single": {
            "name": "fetch_single",
            "location": 648,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.fetch_double": {
            "name": "fetch_double",
            "location": 651,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.fetch_flow_scalar": {
            "name": "fetch_flow_scalar",
            "location": 654,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "style": [
                    "str",
                    "dict",
                    "T"
                ]
            }
        },
        "Scanner.fetch_plain": {
            "name": "fetch_plain",
            "location": 665,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.check_directive": {
            "name": "check_directive",
            "location": 680,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.check_document_start": {
            "name": "check_document_start",
            "location": 687,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.check_document_end": {
            "name": "check_document_end",
            "location": 695,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.check_block_entry": {
            "name": "check_block_entry",
            "location": 703,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.check_key": {
            "name": "check_key",
            "location": 708,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.check_value": {
            "name": "check_value",
            "location": 718,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.check_plain": {
            "name": "check_plain",
            "location": 728,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.scan_to_next_token": {
            "name": "scan_to_next_token",
            "location": 749,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.scan_directive": {
            "name": "scan_directive",
            "location": 784,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.scan_directive_name": {
            "name": "scan_directive_name",
            "location": 803,
            "return": [
                "str",
                "list",
                "T",
                "Type"
            ],
            "arguments": {
                "self": [],
                "start_mark": [
                    "str",
                    "int"
                ]
            }
        },
        "Scanner.scan_yaml_directive_value": {
            "name": "scan_yaml_directive_value",
            "location": 824,
            "return": [
                "tuple",
                "Callable[[T], bool]",
                "str",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "start_mark": [
                    "int",
                    "float",
                    "Union[int, str]"
                ]
            }
        },
        "Scanner.scan_yaml_directive_number": {
            "name": "scan_yaml_directive_number",
            "location": 841,
            "return": [
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "start_mark": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Scanner.scan_tag_directive_value": {
            "name": "scan_tag_directive_value",
            "location": 854,
            "return": [
                "tuple",
                "Dict[str, Any]",
                "str",
                "int",
                "Iterator"
            ],
            "arguments": {
                "self": [],
                "start_mark": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Scanner.scan_tag_directive_handle": {
            "name": "scan_tag_directive_handle",
            "location": 864,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "start_mark": [
                    "str",
                    "Optional[Any]",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "Scanner.scan_tag_directive_prefix": {
            "name": "scan_tag_directive_prefix",
            "location": 873,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "start_mark": [
                    "str",
                    "Optional[Any]",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "Scanner.scan_directive_ignored_line": {
            "name": "scan_directive_ignored_line",
            "location": 882,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "start_mark": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[bool]"
                ]
            }
        },
        "Scanner.scan_anchor": {
            "name": "scan_anchor",
            "location": 896,
            "return": [
                "str",
                "Tuple[str, str]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "TokenClass": [
                    "str"
                ]
            }
        },
        "Scanner.scan_tag": {
            "name": "scan_tag",
            "location": 932,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.scan_block_scalar": {
            "name": "scan_block_scalar",
            "location": 973,
            "return": [
                "dict",
                "str",
                "int",
                "Iterable[str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "style": [
                    "int",
                    "float"
                ]
            }
        },
        "Scanner.scan_block_scalar_indicators": {
            "name": "scan_block_scalar_indicators",
            "location": 1049,
            "return": [
                "Mapping",
                "tuple[typing.Optional[bool]]"
            ],
            "arguments": {
                "self": [],
                "start_mark": [
                    "str",
                    "int"
                ]
            }
        },
        "Scanner.scan_block_scalar_ignored_line": {
            "name": "scan_block_scalar_ignored_line",
            "location": 1089,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "start_mark": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "Scanner.scan_block_scalar_indentation": {
            "name": "scan_block_scalar_indentation",
            "location": 1103,
            "return": [
                "Mapping",
                "tuple[typing.Union[list,int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.scan_block_scalar_breaks": {
            "name": "scan_block_scalar_breaks",
            "location": 1118,
            "return": [
                "Mapping",
                "tuple[list]"
            ],
            "arguments": {
                "self": [],
                "indent": [
                    "list",
                    "int"
                ]
            }
        },
        "Scanner.scan_flow_scalar": {
            "name": "scan_flow_scalar",
            "location": 1131,
            "return": [
                "Dict[str, int]",
                "dict",
                "int",
                "Type"
            ],
            "arguments": {
                "self": [],
                "style": [
                    "int",
                    "float"
                ]
            }
        },
        "Scanner.scan_flow_scalar_non_spaces": {
            "name": "scan_flow_scalar_non_spaces",
            "location": 1181,
            "return": [
                "list",
                "Iterable[T]",
                "str",
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": [],
                "double": [
                    "int",
                    "bool"
                ],
                "start_mark": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "Scanner.scan_flow_scalar_spaces": {
            "name": "scan_flow_scalar_spaces",
            "location": 1224,
            "return": [
                "list[typing.Text]",
                "float",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "double": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ],
                "start_mark": [
                    "int",
                    "str"
                ]
            }
        },
        "Scanner.scan_flow_scalar_breaks": {
            "name": "scan_flow_scalar_breaks",
            "location": 1248,
            "return": [
                "list",
                "float",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "double": [
                    "bool",
                    "AsyncIterator[T]",
                    "AsyncIterable[T]"
                ],
                "start_mark": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "Scanner.scan_plain": {
            "name": "scan_plain",
            "location": 1266,
            "return": [
                "dict",
                "Iterable[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.scan_plain_spaces": {
            "name": "scan_plain_spaces",
            "location": 1313,
            "return": [
                "Iterator",
                "None",
                "list[typing.Text]"
            ],
            "arguments": {
                "self": [],
                "indent": [
                    "bool",
                    "AsyncIterator[T]",
                    "AsyncIterable[T]"
                ],
                "start_mark": [
                    "bool",
                    "AsyncIterator[T]",
                    "AsyncIterable[T]"
                ]
            }
        },
        "Scanner.scan_tag_handle": {
            "name": "scan_tag_handle",
            "location": 1350,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Callable"
                ],
                "start_mark": [
                    "str",
                    "Callable"
                ]
            }
        },
        "Scanner.scan_tag_uri": {
            "name": "scan_tag_uri",
            "location": 1374,
            "return": [
                "str",
                "int",
                "float",
                "List[int]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "list"
                ],
                "start_mark": [
                    "str",
                    "list"
                ]
            }
        },
        "Scanner.scan_uri_escapes": {
            "name": "scan_uri_escapes",
            "location": 1399,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ],
                "start_mark": [
                    "str",
                    "int"
                ]
            }
        },
        "Scanner.scan_line_break": {
            "name": "scan_line_break",
            "location": 1418,
            "return": [
                "typing.Text",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "devhost-master/sublime-packages/pyyaml/st3/yaml/serializer.py": {
        "Serializer.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "encoding": [
                    "None",
                    "Callable",
                    "Tuple[int, int, int]",
                    "Optional[dict]",
                    "int",
                    "bool",
                    "List['cirq.Circuit']"
                ],
                "explicit_start": [
                    "None",
                    "int",
                    "str",
                    "list",
                    "bool"
                ],
                "explicit_end": [
                    "None",
                    "Callable",
                    "Tuple[int, int, int]",
                    "Optional[dict]",
                    "int",
                    "bool",
                    "List['cirq.Circuit']"
                ],
                "version": [
                    "None",
                    "Callable",
                    "Tuple[int, int, int]",
                    "Optional[dict]",
                    "int",
                    "bool",
                    "List['cirq.Circuit']"
                ],
                "tags": [
                    "None",
                    "str",
                    "Optional[List[str]]",
                    "bool",
                    "Optional[str]",
                    "Iterable[str]"
                ]
            }
        },
        "Serializer.open": {
            "name": "open",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Serializer.close": {
            "name": "close",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Serializer.serialize": {
            "name": "serialize",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Optional[mypy.nodes.Node]"
                ]
            }
        },
        "Serializer.anchor_node": {
            "name": "anchor_node",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.Expression"
                ]
            }
        },
        "Serializer.generate_anchor": {
            "name": "generate_anchor",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "astroid.nodes",
                    "mypy.nodes.Node",
                    "List[int]"
                ]
            }
        },
        "Serializer.serialize_node": {
            "name": "serialize_node",
            "location": 78,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "mypy.nodes.Var",
                    "str"
                ],
                "parent": [
                    "T",
                    "List[Type]"
                ],
                "index": []
            }
        }
    },
    "devhost-master/sublime-packages/pyyaml/st3/yaml/tokens.py": {
        "Token.__init__": {
            "name": "__init__",
            "location": 3,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "start_mark": [
                    "int"
                ],
                "end_mark": [
                    "int"
                ]
            }
        },
        "Token.__repr__": {
            "name": "__repr__",
            "location": 6,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectiveToken.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "bool"
                ],
                "value": [
                    "T",
                    "str",
                    "float"
                ],
                "start_mark": [
                    "int",
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "Optional[int]"
                ],
                "end_mark": [
                    "float",
                    "bool",
                    "Tuple[int, int]",
                    "Optional[float]"
                ]
            }
        },
        "StreamStartToken.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "start_mark": [
                    "int",
                    "None"
                ],
                "end_mark": [
                    "int",
                    "None"
                ],
                "encoding": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "AliasToken.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "int",
                    "dict",
                    "Optional[Tuple[int, int]]"
                ],
                "start_mark": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "end_mark": [
                    "int",
                    "str",
                    "float",
                    "tuple"
                ]
            }
        },
        "AnchorToken.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "int",
                    "dict",
                    "Optional[Tuple[int, int]]"
                ],
                "start_mark": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "end_mark": [
                    "int",
                    "str",
                    "float",
                    "tuple"
                ]
            }
        },
        "TagToken.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "int",
                    "dict",
                    "Optional[Tuple[int, int]]"
                ],
                "start_mark": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "end_mark": [
                    "int",
                    "str",
                    "float",
                    "tuple"
                ]
            }
        },
        "ScalarToken.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T",
                    "int",
                    "float",
                    "str"
                ],
                "plain": [
                    "int",
                    "list",
                    "str",
                    "bool",
                    "float"
                ],
                "start_mark": [
                    "int",
                    "Optional[int]",
                    "Tuple[int, int]"
                ],
                "end_mark": [
                    "Tuple[int, int]",
                    "float",
                    "int"
                ],
                "style": [
                    "None",
                    "int",
                    "list",
                    "str",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/pyyaml/st3/yaml/__init__.py": {
        "scan": {
            "name": "scan",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "stream": [
                    "int",
                    "Callable",
                    "str"
                ],
                "Loader": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "parse": {
            "name": "parse",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "stream": [
                    "int",
                    "Callable",
                    "str"
                ],
                "Loader": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "compose": {
            "name": "compose",
            "location": 42,
            "return": [
                "Tuple[str]",
                "str"
            ],
            "arguments": {
                "stream": [
                    "int",
                    "Callable",
                    "str"
                ],
                "Loader": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "compose_all": {
            "name": "compose_all",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "stream": [
                    "int",
                    "str",
                    "Set[str]"
                ],
                "Loader": [
                    "int",
                    "str",
                    "Set[str]"
                ]
            }
        },
        "load": {
            "name": "load",
            "location": 65,
            "return": [
                "str",
                "dict",
                "Optional[str]",
                "Callable",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "stream": [
                    "str",
                    "bool"
                ],
                "Loader": [
                    "str",
                    "bool"
                ]
            }
        },
        "load_all": {
            "name": "load_all",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "stream": [
                    "bool",
                    "float",
                    "List[str]",
                    "Dict[str, List[str]]",
                    "str"
                ],
                "Loader": [
                    "bool",
                    "float",
                    "List[str]",
                    "Dict[str, List[str]]",
                    "str"
                ]
            }
        },
        "safe_load": {
            "name": "safe_load",
            "location": 88,
            "return": [
                "str",
                "int",
                "List[str]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "stream": [
                    "str",
                    "TextIO",
                    "int"
                ]
            }
        },
        "safe_load_all": {
            "name": "safe_load_all",
            "location": 96,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "stream": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "emit": {
            "name": "emit",
            "location": 104,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "events": [
                    "int",
                    "bool"
                ],
                "stream": [
                    "int",
                    "TextIO",
                    "IO[bytes]",
                    "io.BytesIO",
                    "bytes"
                ],
                "Dumper": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "canonical": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "indent": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "width": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "allow_unicode": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "line_break": [
                    "int",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "serialize_all": {
            "name": "serialize_all",
            "location": 125,
            "return": [
                "int",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "nodes": [
                    "str"
                ],
                "stream": [
                    "str",
                    "BinaryIO"
                ],
                "Dumper": [
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "canonical": [
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "indent": [
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "width": [
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "allow_unicode": [
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "line_break": [
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "encoding": [
                    "str",
                    "int",
                    "Iterable[str]"
                ],
                "explicit_start": [
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "explicit_end": [
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "version": [
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "tags": [
                    "str",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "serialize": {
            "name": "serialize",
            "location": 155,
            "return": [
                "List[str]",
                "T",
                "bool"
            ],
            "arguments": {
                "node": [
                    "List[str]"
                ],
                "stream": [
                    "List[str]"
                ],
                "Dumper": [
                    "List[str]"
                ]
            }
        },
        "dump_all": {
            "name": "dump_all",
            "location": 162,
            "return": [
                "int",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "documents": [
                    "int",
                    "bool",
                    "Callable",
                    "dict",
                    "str"
                ],
                "stream": [
                    "bytes",
                    "TextIO",
                    "str",
                    "io.BytesIO",
                    "BinaryIO"
                ],
                "Dumper": [
                    "int",
                    "Sequence[int]",
                    "List[Tuple[int, int]]",
                    "str"
                ],
                "default_style": [
                    "int",
                    "Sequence[int]",
                    "List[Tuple[int, int]]",
                    "str"
                ],
                "default_flow_style": [
                    "int",
                    "Sequence[int]",
                    "List[Tuple[int, int]]",
                    "str"
                ],
                "canonical": [
                    "int",
                    "Sequence[int]",
                    "List[Tuple[int, int]]",
                    "str"
                ],
                "indent": [
                    "int",
                    "Sequence[int]",
                    "List[Tuple[int, int]]",
                    "str"
                ],
                "width": [
                    "int",
                    "Sequence[int]",
                    "List[Tuple[int, int]]",
                    "str"
                ],
                "allow_unicode": [
                    "int",
                    "Sequence[int]",
                    "List[Tuple[int, int]]",
                    "str"
                ],
                "line_break": [
                    "int",
                    "Sequence[int]",
                    "List[Tuple[int, int]]",
                    "str"
                ],
                "encoding": [
                    "Tuple[str, int]",
                    "Optional[int]"
                ],
                "explicit_start": [
                    "int",
                    "Sequence[int]",
                    "List[Tuple[int, int]]",
                    "str"
                ],
                "explicit_end": [
                    "int",
                    "Sequence[int]",
                    "List[Tuple[int, int]]",
                    "str"
                ],
                "version": [
                    "int",
                    "Sequence[int]",
                    "List[Tuple[int, int]]",
                    "str"
                ],
                "tags": [
                    "int",
                    "Sequence[int]",
                    "List[Tuple[int, int]]",
                    "str"
                ]
            }
        },
        "dump": {
            "name": "dump",
            "location": 195,
            "return": [
                "bytes",
                "dict",
                "int",
                "cmk.base.events.EventContext",
                "Dict[str, Any]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str"
                ],
                "stream": [
                    "bytes",
                    "str"
                ],
                "Dumper": [
                    "bytes",
                    "str"
                ]
            }
        },
        "safe_dump_all": {
            "name": "safe_dump_all",
            "location": 202,
            "return": [
                "bool",
                "str",
                "Optional[bool]",
                "Optional[str]",
                "List[str]",
                "Optional[float]"
            ],
            "arguments": {
                "documents": [
                    "int",
                    "io.BytesIO"
                ],
                "stream": [
                    "int",
                    "io.BytesIO"
                ]
            }
        },
        "safe_dump": {
            "name": "safe_dump",
            "location": 210,
            "return": [
                "bytes",
                "dict",
                "int",
                "cmk.base.events.EventContext",
                "Dict[str, Any]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "int"
                ],
                "stream": [
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "add_implicit_resolver": {
            "name": "add_implicit_resolver",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {
                "tag": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "Dict[str, Dict]",
                    "bytes"
                ],
                "regexp": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "Dict[str, Dict]",
                    "bytes"
                ],
                "first": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "Dict[str, Dict]",
                    "bytes"
                ],
                "Loader": [
                    "str",
                    "Optional[Dict]",
                    "List[str]",
                    "Optional[str]"
                ],
                "Dumper": [
                    "str",
                    "Optional[Dict]",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "add_path_resolver": {
            "name": "add_path_resolver",
            "location": 229,
            "return": [
                ""
            ],
            "arguments": {
                "tag": [
                    "str"
                ],
                "path": [
                    "str"
                ],
                "kind": [
                    "str"
                ],
                "Loader": [],
                "Dumper": []
            }
        },
        "add_constructor": {
            "name": "add_constructor",
            "location": 239,
            "return": [
                ""
            ],
            "arguments": {
                "tag": [
                    "str",
                    "float",
                    "Optional[Sequence[str]]",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "constructor": [
                    "str",
                    "float",
                    "Optional[Sequence[str]]",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "Loader": [
                    "str",
                    "float",
                    "Optional[Sequence[str]]",
                    "Optional[str]",
                    "Optional[bool]"
                ]
            }
        },
        "add_multi_constructor": {
            "name": "add_multi_constructor",
            "location": 247,
            "return": [
                ""
            ],
            "arguments": {
                "tag_prefix": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[List[str]]"
                ],
                "multi_constructor": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[List[str]]"
                ],
                "Loader": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[List[str]]"
                ]
            }
        },
        "add_representer": {
            "name": "add_representer",
            "location": 256,
            "return": [
                ""
            ],
            "arguments": {
                "data_type": [
                    "str"
                ],
                "representer": [
                    "str"
                ],
                "Dumper": [
                    "str"
                ]
            }
        },
        "add_multi_representer": {
            "name": "add_multi_representer",
            "location": 265,
            "return": [
                ""
            ],
            "arguments": {
                "data_type": [
                    "str",
                    "dict",
                    "mypy.nodes.TypeInfo"
                ],
                "multi_representer": [
                    "str",
                    "dict",
                    "mypy.nodes.TypeInfo"
                ],
                "Dumper": [
                    "str",
                    "dict",
                    "mypy.nodes.TypeInfo"
                ]
            }
        },
        "YAMLObjectMetaclass.__init__": {
            "name": "__init__",
            "location": 278,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable"
                ],
                "name": [
                    "str",
                    "bool",
                    "Dict[str, mypy.nodes.MypyFile]"
                ],
                "bases": [
                    "str",
                    "bool",
                    "Dict[str, mypy.nodes.MypyFile]"
                ],
                "kwds": [
                    "str",
                    "bool",
                    "Dict[str, mypy.nodes.MypyFile]",
                    "Callable[[dict], None]",
                    "List[str]"
                ]
            }
        },
        "YAMLObject.from_yaml": {
            "name": "from_yaml",
            "location": 299,
            "return": [
                "Callable",
                "Dict[str, Any]",
                "int",
                "str"
            ],
            "arguments": {
                "cls": [
                    "yaml.nodes.Node",
                    "Pattern",
                    "dict",
                    "bool"
                ],
                "loader": [
                    "yaml.nodes.Node",
                    "Pattern",
                    "dict",
                    "bool"
                ],
                "node": [
                    "yaml.nodes.Node",
                    "Pattern",
                    "dict",
                    "bool"
                ]
            }
        },
        "YAMLObject.to_yaml": {
            "name": "to_yaml",
            "location": 306,
            "return": [
                "str",
                "int",
                "IO[str]",
                "bool",
                "Iterable[int]"
            ],
            "arguments": {
                "cls": [
                    "type"
                ],
                "dumper": [
                    "type"
                ],
                "data": [
                    "type"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/SublimeLinter/commands.py": {
        "error_command": {
            "name": "error_command",
            "location": 33,
            "return": [],
            "arguments": {
                "method": []
            }
        },
        "select_line": {
            "name": "select_line",
            "location": 55,
            "return": [],
            "arguments": {
                "view": [],
                "line": []
            }
        },
        "choose_setting_command": {
            "name": "choose_setting_command",
            "location": 473,
            "return": [],
            "arguments": {
                "setting": [],
                "preview": []
            }
        },
        "error_command.run": {
            "name": "run",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "edit": []
            }
        },
        "SublimelinterLintCommand.is_enabled": {
            "name": "is_enabled",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SublimelinterLintCommand.run": {
            "name": "run",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "edit": []
            }
        },
        "HasErrorsCommand.is_enabled": {
            "name": "is_enabled",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GotoErrorCommand.goto_error": {
            "name": "goto_error",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "view": [],
                "errors": [],
                "direction": []
            }
        },
        "GotoErrorCommand.select_lint_region": {
            "name": "select_lint_region",
            "location": 170,
            "return": [],
            "arguments": {
                "cls": [],
                "view": [],
                "region": []
            }
        },
        "GotoErrorCommand.find_mark_within": {
            "name": "find_mark_within",
            "location": 194,
            "return": [],
            "arguments": {
                "cls": [],
                "view": [],
                "region": []
            }
        },
        "SublimelinterGotoErrorCommand.run": {
            "name": "run",
            "location": 212,
            "return": [],
            "arguments": {
                "self": [],
                "view": [],
                "errors": [],
                "highlights": []
            }
        },
        "SublimelinterShowAllErrors.run": {
            "name": "run",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "view": [],
                "errors": [],
                "highlights": []
            }
        },
        "SublimelinterShowAllErrors.select_error": {
            "name": "select_error",
            "location": 271,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "SublimelinterToggleSettingCommand.__init__": {
            "name": "__init__",
            "location": 285,
            "return": [],
            "arguments": {
                "self": [],
                "window": []
            }
        },
        "SublimelinterToggleSettingCommand.is_visible": {
            "name": "is_visible",
            "location": 289,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SublimelinterToggleSettingCommand.is_checked": {
            "name": "is_checked",
            "location": 300,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SublimelinterToggleSettingCommand.run": {
            "name": "run",
            "location": 308,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChooseSettingCommand.__init__": {
            "name": "__init__",
            "location": 326,
            "return": [],
            "arguments": {
                "self": [],
                "window": [],
                "setting": [],
                "preview": []
            }
        },
        "ChooseSettingCommand.description": {
            "name": "description",
            "location": 333,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChooseSettingCommand.is_checked": {
            "name": "is_checked",
            "location": 337,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChooseSettingCommand._get_settings": {
            "name": "_get_settings",
            "location": 346,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChooseSettingCommand.get_settings": {
            "name": "get_settings",
            "location": 355,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChooseSettingCommand.transform_setting": {
            "name": "transform_setting",
            "location": 359,
            "return": [],
            "arguments": {
                "self": [],
                "setting": [],
                "matching": []
            }
        },
        "ChooseSettingCommand.setting_value": {
            "name": "setting_value",
            "location": 368,
            "return": [],
            "arguments": {
                "self": [],
                "matching": []
            }
        },
        "ChooseSettingCommand.on_highlight": {
            "name": "on_highlight",
            "location": 372,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "ChooseSettingCommand.choose": {
            "name": "choose",
            "location": 377,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChooseSettingCommand.set": {
            "name": "set",
            "location": 416,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "ChooseSettingCommand.update_setting": {
            "name": "update_setting",
            "location": 437,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ChooseSettingCommand.settings_differ": {
            "name": "settings_differ",
            "location": 443,
            "return": [],
            "arguments": {
                "self": [],
                "old_setting": [],
                "new_setting": []
            }
        },
        "ChooseSettingCommand.selected_setting": {
            "name": "selected_setting",
            "location": 451,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "ChooseSettingCommand.setting_was_changed": {
            "name": "setting_was_changed",
            "location": 462,
            "return": [],
            "arguments": {
                "self": [],
                "setting": []
            }
        },
        "choose_setting_command.decorator": {
            "name": "decorator",
            "location": 476,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "SublimelinterChooseLintModeCommand.get_settings": {
            "name": "get_settings",
            "location": 496,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SublimelinterChooseLintModeCommand.setting_was_changed": {
            "name": "setting_was_changed",
            "location": 500,
            "return": [],
            "arguments": {
                "self": [],
                "setting": []
            }
        },
        "SublimelinterChooseMarkStyleCommand.get_settings": {
            "name": "get_settings",
            "location": 513,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SublimelinterChooseGutterThemeCommand.get_settings": {
            "name": "get_settings",
            "location": 522,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SublimelinterChooseGutterThemeCommand.find_gutter_themes": {
            "name": "find_gutter_themes",
            "location": 537,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SublimelinterChooseGutterThemeCommand.selected_setting": {
            "name": "selected_setting",
            "location": 606,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "SublimelinterChooseGutterThemeCommand.transform_setting": {
            "name": "transform_setting",
            "location": 610,
            "return": [],
            "arguments": {
                "self": [],
                "setting": [],
                "matching": []
            }
        },
        "SublimelinterChooseTooltipThemeCommand.get_settings": {
            "name": "get_settings",
            "location": 635,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SublimelinterChooseTooltipThemeCommand.find_tooltip_themes": {
            "name": "find_tooltip_themes",
            "location": 650,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SublimelinterChooseTooltipThemeCommand.selected_setting": {
            "name": "selected_setting",
            "location": 705,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "SublimelinterChooseTooltipThemeCommand.transform_setting": {
            "name": "transform_setting",
            "location": 709,
            "return": [],
            "arguments": {
                "self": [],
                "setting": [],
                "matching": []
            }
        },
        "SublimelinterToggleLinterCommand.__init__": {
            "name": "__init__",
            "location": 733,
            "return": [],
            "arguments": {
                "self": [],
                "window": []
            }
        },
        "SublimelinterToggleLinterCommand.is_visible": {
            "name": "is_visible",
            "location": 738,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SublimelinterToggleLinterCommand.run": {
            "name": "run",
            "location": 767,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SublimelinterToggleLinterCommand.on_done": {
            "name": "on_done",
            "location": 774,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "SublimelinterCreateLinterPluginCommand.run": {
            "name": "run",
            "location": 794,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SublimelinterCreateLinterPluginCommand.copy_linter": {
            "name": "copy_linter",
            "location": 812,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "SublimelinterCreateLinterPluginCommand.configure_linter": {
            "name": "configure_linter",
            "location": 839,
            "return": [],
            "arguments": {
                "self": [],
                "language": []
            }
        },
        "SublimelinterCreateLinterPluginCommand.get_linter_language": {
            "name": "get_linter_language",
            "location": 866,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "callback": []
            }
        },
        "SublimelinterCreateLinterPluginCommand.fill_template": {
            "name": "fill_template",
            "location": 881,
            "return": [],
            "arguments": {
                "self": [],
                "template_dir": [],
                "name": [],
                "fullname": [],
                "language": []
            }
        },
        "SublimelinterCreateLinterPluginCommand.camel_case": {
            "name": "camel_case",
            "location": 952,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "SublimelinterCreateLinterPluginCommand.wait_for_open": {
            "name": "wait_for_open",
            "location": 968,
            "return": [],
            "arguments": {
                "self": [],
                "dest": []
            }
        },
        "SublimelinterPackageControlCommand.__init__": {
            "name": "__init__",
            "location": 1004,
            "return": [],
            "arguments": {
                "self": [],
                "window": []
            }
        },
        "SublimelinterPackageControlCommand.is_visible": {
            "name": "is_visible",
            "location": 1009,
            "return": [],
            "arguments": {
                "self": [],
                "paths": []
            }
        },
        "SublimelinterPackageControlCommand.is_eligible_path": {
            "name": "is_eligible_path",
            "location": 1022,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "SublimelinterPackageControlCommand.get_current_tag": {
            "name": "get_current_tag",
            "location": 1036,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SublimelinterNewPackageControlMessageCommand.__init__": {
            "name": "__init__",
            "location": 1069,
            "return": [],
            "arguments": {
                "self": [],
                "window": []
            }
        },
        "SublimelinterNewPackageControlMessageCommand.run": {
            "name": "run",
            "location": 1073,
            "return": [],
            "arguments": {
                "self": [],
                "paths": []
            }
        },
        "SublimelinterNewPackageControlMessageCommand.make_new_version_message": {
            "name": "make_new_version_message",
            "location": 1080,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "SublimelinterNewPackageControlMessageCommand.rewrite_messages_json": {
            "name": "rewrite_messages_json",
            "location": 1113,
            "return": [],
            "arguments": {
                "self": [],
                "messages_path": [],
                "tag": []
            }
        },
        "SublimelinterNewPackageControlMessageCommand.sortable_tag": {
            "name": "sortable_tag",
            "location": 1145,
            "return": [],
            "arguments": {
                "self": [],
                "tag": []
            }
        },
        "SublimelinterNewPackageControlMessageCommand.get_commit_messages_since": {
            "name": "get_commit_messages_since",
            "location": 1161,
            "return": [],
            "arguments": {
                "self": [],
                "version": []
            }
        },
        "SublimelinterClearColorSchemeFolderCommand.run": {
            "name": "run",
            "location": 1186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SublimelinterClearCachesCommand.run": {
            "name": "run",
            "location": 1204,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SublimelinterReportCommand.run": {
            "name": "run",
            "location": 1221,
            "return": [],
            "arguments": {
                "self": [],
                "on": []
            }
        },
        "SublimelinterReportCommand.folder": {
            "name": "folder",
            "location": 1239,
            "return": [],
            "arguments": {
                "self": [],
                "output": [],
                "folder": []
            }
        },
        "SublimelinterReportCommand.report": {
            "name": "report",
            "location": 1251,
            "return": [],
            "arguments": {
                "self": [],
                "output": [],
                "view": []
            }
        },
        "choose_setting_command.decorator.init": {
            "name": "init",
            "location": 477,
            "return": [],
            "arguments": {
                "self": [],
                "window": []
            }
        },
        "choose_setting_command.decorator.run": {
            "name": "run",
            "location": 480,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SublimelinterCreateLinterPluginCommand.get_linter_language.on_done": {
            "name": "on_done",
            "location": 875,
            "return": [],
            "arguments": {
                "index": []
            }
        },
        "SublimelinterCreateLinterPluginCommand.wait_for_open.open_linter_py": {
            "name": "open_linter_py",
            "location": 971,
            "return": [],
            "arguments": {}
        },
        "SublimelinterReportCommand.report.finish_lint": {
            "name": "finish_lint",
            "location": 1254,
            "return": [],
            "arguments": {
                "view": [],
                "linters": [],
                "hit_time": []
            }
        },
        "SublimelinterReportCommand.report.finish_lint.insert": {
            "name": "insert",
            "location": 1258,
            "return": [],
            "arguments": {
                "edit": []
            }
        }
    },
    "devhost-master/sublime-packages/SublimeLinter/sublimelinter.py": {
        "plugin_loaded": {
            "name": "plugin_loaded",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "SublimeLinter.shared_plugin": {
            "name": "shared_plugin",
            "location": 61,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "type",
                    "int",
                    "List[int]"
                ]
            }
        },
        "SublimeLinter.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SublimeLinter.lint_all_views": {
            "name": "lint_all_views",
            "location": 81,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "str",
                    "static_frame.core.util.AnyCallable",
                    "List[dict]",
                    "dict"
                ]
            }
        },
        "SublimeLinter.lint": {
            "name": "lint",
            "location": 90,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "self": [],
                "view_id": [
                    "Optional[bytes]",
                    "str",
                    "int",
                    "dict",
                    "List[dict]"
                ],
                "hit_time": [
                    "None",
                    "int",
                    "str",
                    "List[str]",
                    "dict",
                    "bool"
                ],
                "callback": [
                    "None"
                ]
            }
        },
        "SublimeLinter.highlight": {
            "name": "highlight",
            "location": 122,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "int",
                    "float",
                    "str"
                ],
                "linters": [
                    "int",
                    "float",
                    "bool"
                ],
                "hit_time": [
                    "Optional[float]",
                    "bytes"
                ]
            }
        },
        "SublimeLinter.hit": {
            "name": "hit",
            "location": 177,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "sublime.View",
                    "int"
                ]
            }
        },
        "SublimeLinter.check_syntax": {
            "name": "check_syntax",
            "location": 192,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "sublime.View",
                    "int"
                ]
            }
        },
        "SublimeLinter.clear": {
            "name": "clear",
            "location": 212,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "SublimeLinter.is_scratch": {
            "name": "is_scratch",
            "location": 216,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "view": []
            }
        },
        "SublimeLinter.view_has_file_only_linter": {
            "name": "view_has_file_only_linter",
            "location": 241,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "vid": [
                    "int",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "SublimeLinter.on_modified": {
            "name": "on_modified",
            "location": 251,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "sublime.View",
                    "Optional[sublime.View]"
                ]
            }
        },
        "SublimeLinter.on_activated": {
            "name": "on_activated",
            "location": 270,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "sublime.View",
                    "Optional[sublime.View]"
                ]
            }
        },
        "SublimeLinter.on_open_settings": {
            "name": "on_open_settings",
            "location": 291,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "view": []
            }
        },
        "SublimeLinter.is_settings_file": {
            "name": "is_settings_file",
            "location": 301,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "str"
                ],
                "user_only": [
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "SublimeLinter.on_settings_updated": {
            "name": "on_settings_updated",
            "location": 322,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "bool"
                ],
                "relint": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "SublimeLinter.on_new": {
            "name": "on_new",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "sublime.View",
                    "Optional[sublime.View]",
                    "Optional[int]"
                ]
            }
        },
        "SublimeLinter.get_focused_view_id": {
            "name": "get_focused_view_id",
            "location": 340,
            "return": [
                "str",
                "int",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "sublime.View",
                    "Optional[sublime.View]"
                ]
            }
        },
        "SublimeLinter.on_selection_modified_async": {
            "name": "on_selection_modified_async",
            "location": 355,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "sublime.View",
                    "Optional[sublime.View]"
                ]
            }
        },
        "SublimeLinter.get_active_view": {
            "name": "get_active_view",
            "location": 413,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SublimeLinter.get_template": {
            "name": "get_template",
            "location": 418,
            "return": [
                "bool",
                "Template"
            ],
            "arguments": {
                "self": []
            }
        },
        "SublimeLinter.open_tooltip": {
            "name": "open_tooltip",
            "location": 436,
            "return": [
                "None",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "Union[tuple, list]",
                "str"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str",
                    "int",
                    "Tuple[str, str, int]",
                    "Union[int, float]"
                ],
                "errors": [
                    "str",
                    "int",
                    "Tuple[str, str, int]",
                    "Union[int, float]"
                ]
            }
        },
        "SublimeLinter.close_tooltip": {
            "name": "close_tooltip",
            "location": 457,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SublimeLinter.on_pre_save": {
            "name": "on_pre_save",
            "location": 462,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "SublimeLinter.on_post_save": {
            "name": "on_post_save",
            "location": 473,
            "return": [
                "None",
                "str",
                "T",
                "list",
                "int",
                "List[Dict]"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "Dict[str, Any]"
                ]
            }
        },
        "SublimeLinter.file_was_saved": {
            "name": "file_was_saved",
            "location": 497,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "List[int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "SublimeLinter.on_close": {
            "name": "on_close",
            "location": 529,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "int",
                    "sublime.View",
                    "sublime.Region"
                ]
            }
        },
        "SublimelinterEditCommand.run": {
            "name": "run",
            "location": 552,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "edit": [
                    "Optional[Callable[[None], None]]",
                    "bool",
                    "Sequence[int]",
                    "Awaitable[T_co]",
                    "Awaitable",
                    "Collection[T]"
                ]
            }
        },
        "SublimeLinter.lint_all_views.apply": {
            "name": "apply",
            "location": 84,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "view": [
                    "bool",
                    "float",
                    "int"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/SublimeLinter/lint/highlight.py": {
        "mark_style_names": {
            "name": "mark_style_names",
            "location": 60,
            "return": [
                "list[str]",
                "str",
                "dict",
                "List[str]"
            ],
            "arguments": {}
        },
        "HighlightSet.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HighlightSet.add": {
            "name": "add",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "highlight": [
                    "VT"
                ]
            }
        },
        "HighlightSet.draw": {
            "name": "draw",
            "location": 80,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "HighlightSet.clear": {
            "name": "clear",
            "location": 101,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "view": [
                    "str",
                    "int"
                ]
            }
        },
        "HighlightSet.redraw": {
            "name": "redraw",
            "location": 107,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "int"
                ]
            }
        },
        "HighlightSet.reset": {
            "name": "reset",
            "location": 112,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "int",
                    "sublime.View",
                    "Callable",
                    "str"
                ]
            }
        },
        "HighlightSet.line_type": {
            "name": "line_type",
            "location": 119,
            "return": [
                "None",
                "bool",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str",
                    "int",
                    "Union[int, bytes]",
                    "type"
                ]
            }
        },
        "Highlight.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "typing.Text",
                    "str",
                    "list",
                    "set",
                    "Set[str]"
                ]
            }
        },
        "Highlight.strip_quotes": {
            "name": "strip_quotes",
            "location": 175,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Highlight.full_line": {
            "name": "full_line",
            "location": 184,
            "return": [
                "tuple",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ]
            }
        },
        "Highlight.range": {
            "name": "range",
            "location": 206,
            "return": [
                "None",
                "str",
                "dict",
                "Iterable[Hashable]",
                "float"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "float",
                    "int",
                    "Optional[float]",
                    "Dict[int, Dict[int, Any]]"
                ],
                "pos": [
                    "int",
                    "float",
                    "Optional[int]",
                    "bool",
                    "Union[None, int, str]",
                    "Optional[float]"
                ],
                "length": [
                    "int",
                    "bool",
                    "str",
                    "List[int]",
                    "Set[int]"
                ],
                "near": [
                    "None",
                    "List[List[Callable]]",
                    "Optional[Iterable[float]]",
                    "Optional[float]",
                    "int",
                    "Optional[List[Any]]"
                ],
                "error_type": [
                    "bool",
                    "typing.Text"
                ],
                "word_re": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "Highlight.regex": {
            "name": "regex",
            "location": 264,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "int"
                ],
                "regex": [
                    "int",
                    "float",
                    "Union[int, str]",
                    "str",
                    "bool",
                    "Optional[int]"
                ],
                "error_type": [
                    "int",
                    "typing.Text"
                ],
                "line_match": [
                    "None",
                    "str",
                    "Optional[str]",
                    "Dict[str, dict]"
                ],
                "word_match": [
                    "None",
                    "str",
                    "Optional[str]",
                    "list",
                    "Set[int]"
                ],
                "word_re": [
                    "None",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "Highlight.near": {
            "name": "near",
            "location": 307,
            "return": [
                "None",
                "int",
                "str",
                "float",
                "Union[bool, List[bool]]"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ],
                "near": [
                    "str",
                    "int"
                ],
                "error_type": [
                    "typing.Text",
                    "str",
                    "type",
                    "bool"
                ],
                "word_re": [
                    "None",
                    "str",
                    "type",
                    "bool"
                ]
            }
        },
        "Highlight.update": {
            "name": "update",
            "location": 351,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "dict",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "Highlight.set_mark_style": {
            "name": "set_mark_style",
            "location": 374,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Highlight.draw": {
            "name": "draw",
            "location": 382,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "str"
                ]
            }
        },
        "Highlight.clear": {
            "name": "clear",
            "location": 426,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "view": [
                    "str",
                    "int"
                ]
            }
        },
        "Highlight.reset": {
            "name": "reset",
            "location": 432,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Highlight.line": {
            "name": "line",
            "location": 444,
            "return": [
                "None",
                "int",
                "Union[tuple, list]",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str",
                    "float"
                ],
                "error_type": [
                    "str"
                ]
            }
        },
        "Highlight.move_to": {
            "name": "move_to",
            "location": 454,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "char_offset": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/SublimeLinter/lint/linter.py": {
        "LinterMeta.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "name": [],
                "bases": [],
                "attrs": []
            }
        },
        "LinterMeta.map_args": {
            "name": "map_args",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "defaults": []
            }
        },
        "LinterMeta.make_alt_name": {
            "name": "make_alt_name",
            "location": 156,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "LinterMeta.name": {
            "name": "name",
            "location": 171,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Linter.initialize": {
            "name": "initialize",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Linter.reinitialize": {
            "name": "reinitialize",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Linter.__init__": {
            "name": "__init__",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [],
                "syntax": []
            }
        },
        "Linter.filename": {
            "name": "filename",
            "location": 402,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Linter.name": {
            "name": "name",
            "location": 407,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Linter.clear_settings_caches": {
            "name": "clear_settings_caches",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Linter.settings": {
            "name": "settings",
            "location": 417,
            "return": [
                "dict"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Linter.meta_settings": {
            "name": "meta_settings",
            "location": 428,
            "return": [
                "dict"
            ],
            "arguments": {
                "settings": []
            }
        },
        "Linter.get_view_settings": {
            "name": "get_view_settings",
            "location": 433,
            "return": [],
            "arguments": {
                "self": [],
                "inline": [
                    "bool"
                ]
            }
        },
        "Linter.get_merged_settings": {
            "name": "get_merged_settings",
            "location": 457,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Linter.get_inline_settings": {
            "name": "get_inline_settings",
            "location": 499,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Linter.replace_settings_tokens": {
            "name": "replace_settings_tokens",
            "location": 522,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "Linter.merge_rc_settings": {
            "name": "merge_rc_settings",
            "location": 599,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "Linter.merge_inline_settings": {
            "name": "merge_inline_settings",
            "location": 618,
            "return": [],
            "arguments": {
                "self": [],
                "view_settings": [],
                "inline_settings": []
            }
        },
        "Linter.merge_project_settings": {
            "name": "merge_project_settings",
            "location": 646,
            "return": [],
            "arguments": {
                "self": [],
                "view_settings": [],
                "project_settings": []
            }
        },
        "Linter.override_options": {
            "name": "override_options",
            "location": 658,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "options": [],
                "overrides": [],
                "sep": [
                    "typing.Text"
                ]
            }
        },
        "Linter.assign": {
            "name": "assign",
            "location": 706,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "view": [],
                "linter_name": [
                    "None"
                ],
                "reset": [
                    "bool"
                ]
            }
        },
        "Linter.remove": {
            "name": "remove",
            "location": 765,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "vid": []
            }
        },
        "Linter.reload": {
            "name": "reload",
            "location": 775,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Linter.apply_to_all_highlights": {
            "name": "apply_to_all_highlights",
            "location": 791,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "action": []
            }
        },
        "Linter.clear_all": {
            "name": "clear_all",
            "location": 803,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Linter.redraw_all": {
            "name": "redraw_all",
            "location": 809,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Linter.text": {
            "name": "text",
            "location": 814,
            "return": [],
            "arguments": {
                "cls": [],
                "view": []
            }
        },
        "Linter.get_view": {
            "name": "get_view",
            "location": 819,
            "return": [],
            "arguments": {
                "cls": [],
                "vid": []
            }
        },
        "Linter.get_linters": {
            "name": "get_linters",
            "location": 824,
            "return": [
                "tuple"
            ],
            "arguments": {
                "cls": [],
                "vid": []
            }
        },
        "Linter.get_selectors": {
            "name": "get_selectors",
            "location": 832,
            "return": [
                "list[tuple]"
            ],
            "arguments": {
                "cls": [],
                "vid": [],
                "syntax": []
            }
        },
        "Linter.lint_view": {
            "name": "lint_view",
            "location": 852,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "view": [],
                "filename": [],
                "code": [],
                "hit_time": [],
                "callback": []
            }
        },
        "Linter.compile_ignore_match": {
            "name": "compile_ignore_match",
            "location": 964,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pattern": []
            }
        },
        "Linter.compiled_ignore_matches": {
            "name": "compiled_ignore_matches",
            "location": 975,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "ignore_match": []
            }
        },
        "Linter.compile_demote_to_warning_match": {
            "name": "compile_demote_to_warning_match",
            "location": 1021,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pattern": []
            }
        },
        "Linter.compiled_demote_to_warning_matches": {
            "name": "compiled_demote_to_warning_matches",
            "location": 1032,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "demote_to_warning_match": []
            }
        },
        "Linter.reset": {
            "name": "reset",
            "location": 1078,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [],
                "settings": []
            }
        },
        "Linter.which": {
            "name": "which",
            "location": 1101,
            "return": [],
            "arguments": {
                "cls": [],
                "cmd": []
            }
        },
        "Linter.get_cmd": {
            "name": "get_cmd",
            "location": 1105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Linter.build_cmd": {
            "name": "build_cmd",
            "location": 1126,
            "return": [
                "None",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "None"
                ]
            }
        },
        "Linter.context_sensitive_executable_path": {
            "name": "context_sensitive_executable_path",
            "location": 1177,
            "return": [
                "tuple[typing.Optional[bool]]"
            ],
            "arguments": {
                "self": [],
                "cmd": []
            }
        },
        "Linter.insert_args": {
            "name": "insert_args",
            "location": 1186,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "self": [],
                "cmd": []
            }
        },
        "Linter.get_user_args": {
            "name": "get_user_args",
            "location": 1203,
            "return": [],
            "arguments": {
                "self": [],
                "settings": [
                    "None"
                ]
            }
        },
        "Linter.build_args": {
            "name": "build_args",
            "location": 1218,
            "return": [],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "Linter.build_options": {
            "name": "build_options",
            "location": 1319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "options": [],
                "type_map": [],
                "transform": [
                    "None"
                ]
            }
        },
        "Linter.get_chdir": {
            "name": "get_chdir",
            "location": 1355,
            "return": [],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "Linter.lint": {
            "name": "lint",
            "location": 1368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hit_time": []
            }
        },
        "Linter.draw": {
            "name": "draw",
            "location": 1501,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Linter.clear_view": {
            "name": "clear_view",
            "location": 1506,
            "return": [
                "None"
            ],
            "arguments": {
                "view": []
            }
        },
        "Linter.clear": {
            "name": "clear",
            "location": 1515,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Linter.can_lint": {
            "name": "can_lint",
            "location": 1523,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "syntax": []
            }
        },
        "Linter.can_lint_syntax": {
            "name": "can_lint_syntax",
            "location": 1610,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "syntax": []
            }
        },
        "Linter.fulfills_version_requirement": {
            "name": "fulfills_version_requirement",
            "location": 1623,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Linter.get_executable_version": {
            "name": "get_executable_version",
            "location": 1672,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Linter.replace_entity": {
            "name": "replace_entity",
            "location": 1702,
            "return": [
                "str"
            ],
            "arguments": {
                "match": []
            }
        },
        "Linter.error": {
            "name": "error",
            "location": 1715,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [],
                "col": [],
                "message": [],
                "error_type": []
            }
        },
        "Linter.find_errors": {
            "name": "find_errors",
            "location": 1730,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "self": [],
                "output": []
            }
        },
        "Linter.split_match": {
            "name": "split_match",
            "location": 1751,
            "return": [
                "tuple[typing.Union[None,int,typing.Text]]",
                "tuple[typing.Optional[typing.Text]]"
            ],
            "arguments": {
                "self": [],
                "match": []
            }
        },
        "Linter.run": {
            "name": "run",
            "location": 1781,
            "return": [],
            "arguments": {
                "self": [],
                "cmd": [],
                "code": []
            }
        },
        "Linter.get_tempfile_suffix": {
            "name": "get_tempfile_suffix",
            "location": 1805,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Linter.communicate": {
            "name": "communicate",
            "location": 1822,
            "return": [],
            "arguments": {
                "self": [],
                "cmd": [],
                "code": [
                    "None"
                ]
            }
        },
        "Linter.tmpfile": {
            "name": "tmpfile",
            "location": 1835,
            "return": [],
            "arguments": {
                "self": [],
                "cmd": [],
                "code": [],
                "suffix": [
                    "typing.Text"
                ]
            }
        },
        "Linter.tmpdir": {
            "name": "tmpdir",
            "location": 1845,
            "return": [],
            "arguments": {
                "self": [],
                "cmd": [],
                "files": [],
                "code": []
            }
        },
        "Linter.replace_settings_tokens.recursive_replace_value": {
            "name": "recursive_replace_value",
            "location": 538,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "expressions": [],
                "value": []
            }
        },
        "Linter.replace_settings_tokens.recursive_replace": {
            "name": "recursive_replace",
            "location": 552,
            "return": [],
            "arguments": {
                "expressions": [],
                "mutable_input": [],
                "nested": [
                    "bool"
                ]
            }
        },
        "Linter.apply_to_all_highlights.apply": {
            "name": "apply",
            "location": 794,
            "return": [
                "None"
            ],
            "arguments": {
                "view": []
            }
        }
    },
    "devhost-master/sublime-packages/SublimeLinter/lint/node_linter.py": {
        "NodeLinter.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "sublime.View",
                    "dict"
                ],
                "syntax": [
                    "sublime.View",
                    "dict"
                ]
            }
        },
        "NodeLinter.lint": {
            "name": "lint",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "hit_time": [
                    "int",
                    "str"
                ]
            }
        },
        "NodeLinter.is_dependency": {
            "name": "is_dependency",
            "location": 79,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeLinter.context_sensitive_executable_path": {
            "name": "context_sensitive_executable_path",
            "location": 104,
            "return": [
                "bool",
                "tuple[typing.Union[bool,typing.Text]]",
                "tuple[typing.Optional[bool]]"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "str",
                    "dict",
                    "List[str]",
                    "int",
                    "bool"
                ]
            }
        },
        "NodeLinter.get_manifest_path": {
            "name": "get_manifest_path",
            "location": 131,
            "return": [
                "None",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeLinter.rev_parse_manifest_path": {
            "name": "rev_parse_manifest_path",
            "location": 145,
            "return": [
                "None",
                "str",
                "Optional[str]",
                "List[str]",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "cwd": [
                    "str",
                    "IO",
                    "dict"
                ]
            }
        },
        "NodeLinter.find_local_cmd_path": {
            "name": "find_local_cmd_path",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "cmd": [
                    "str",
                    "bool"
                ]
            }
        },
        "NodeLinter.find_ancestor_cmd_path": {
            "name": "find_ancestor_cmd_path",
            "location": 188,
            "return": [
                "None",
                "str",
                "bool",
                "path.ImportPath"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "str",
                    "float",
                    "Optional[str]"
                ],
                "cwd": [
                    "str",
                    "os.PathLike",
                    "int"
                ]
            }
        },
        "NodeLinter.get_pkg_bin_cmd": {
            "name": "get_pkg_bin_cmd",
            "location": 208,
            "return": [
                "None",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "str",
                    "list",
                    "Optional[str]"
                ]
            }
        },
        "NodeLinter.get_manifest": {
            "name": "get_manifest",
            "location": 225,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeLinter.read_manifest": {
            "name": "read_manifest",
            "location": 236,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "current_manifest_mtime": [
                    "int",
                    "float",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "NodeLinter.hash_manifest": {
            "name": "hash_manifest",
            "location": 243,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeLinter.can_lint": {
            "name": "can_lint",
            "location": 251,
            "return": [
                "bool",
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "Union[int, slice]",
                    "Type['DataclassT']",
                    "dict",
                    "Sequence[str]"
                ],
                "syntax": [
                    "str",
                    "Callable[..., str]",
                    "dict",
                    "Tuple[str, float]"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/SublimeLinter/lint/persist.py": {
        "get_syntax": {
            "name": "get_syntax",
            "location": 362,
            "return": [
                "typing.Text",
                "str",
                "bool"
            ],
            "arguments": {
                "view": [
                    "int",
                    "List[Callable]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "edit": {
            "name": "edit",
            "location": 379,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "vid": [
                    "int",
                    "sublime.View",
                    "Callable",
                    "str"
                ],
                "edit": [
                    "int",
                    "sublime.View",
                    "Callable",
                    "str"
                ]
            }
        },
        "view_did_close": {
            "name": "view_did_close",
            "location": 387,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "vid": [
                    "str",
                    "List[str]",
                    "int",
                    "Exception"
                ]
            }
        },
        "debug_mode": {
            "name": "debug_mode",
            "location": 405,
            "return": [
                "bool",
                "str",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "debug": {
            "name": "debug",
            "location": 410,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "printf": {
            "name": "printf",
            "location": 416,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "import_sys_path": {
            "name": "import_sys_path",
            "location": 426,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "register_linter": {
            "name": "register_linter",
            "location": 437,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "linter_class": [
                    "str",
                    "dict"
                ],
                "name": [
                    "str"
                ],
                "attrs": [
                    "str",
                    "bool",
                    "List[str]",
                    "int",
                    "Mapping[str, Any]"
                ]
            }
        },
        "Settings.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.load": {
            "name": "load",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "force": [
                    "bool",
                    "str"
                ]
            }
        },
        "Settings.has_setting": {
            "name": "has_setting",
            "location": 58,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "setting": [
                    "bool",
                    "str",
                    "bytes",
                    "List[Dict]",
                    "Iterable[str]"
                ]
            }
        },
        "Settings.get": {
            "name": "get",
            "location": 62,
            "return": [
                "Optional[str]",
                "Optional[Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "setting": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ],
                "default": [
                    "None",
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "Settings.set": {
            "name": "set",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "setting": [
                    "str",
                    "dict",
                    "Sequence[str]"
                ],
                "value": [
                    "str",
                    "bool",
                    "dict",
                    "bytes"
                ],
                "changed": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Settings.pop": {
            "name": "pop",
            "location": 83,
            "return": [
                "Hashable",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "setting": [
                    "Iterable[str]",
                    "Set[Tuple[int, Any, Any]]",
                    "list",
                    "str",
                    "Tuple[int, str]"
                ],
                "default": [
                    "None",
                    "Iterable[str]",
                    "Set[Tuple[int, Any, Any]]",
                    "list",
                    "str",
                    "Tuple[int, str]"
                ]
            }
        },
        "Settings.copy": {
            "name": "copy",
            "location": 94,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.observe_prefs": {
            "name": "observe_prefs",
            "location": 98,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "observer": [
                    "int",
                    "None"
                ]
            }
        },
        "Settings.observe": {
            "name": "observe",
            "location": 104,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "observer": [
                    "None",
                    "dict",
                    "int"
                ]
            }
        },
        "Settings.on_update_call": {
            "name": "on_update_call",
            "location": 111,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "str",
                    "Tuple[int]",
                    "Sequence"
                ]
            }
        },
        "Settings.on_update": {
            "name": "on_update",
            "location": 115,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.save": {
            "name": "save",
            "location": 220,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "None",
                    "str",
                    "list"
                ]
            }
        },
        "Settings.on_prefs_update": {
            "name": "on_prefs_update",
            "location": 277,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.update_gutter_marks": {
            "name": "update_gutter_marks",
            "location": 281,
            "return": [
                "None",
                "str",
                "Set[str]",
                "DefaultDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.save.replace": {
            "name": "replace",
            "location": 262,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "edit": [
                    "sublime.View"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/SublimeLinter/lint/python_linter.py": {
        "PythonLinter.match_shebang": {
            "name": "match_shebang",
            "location": 69,
            "return": [
                "tuple[typing.Text]",
                "bool",
                "None",
                "Optional[Sequence[str]]",
                "Optional[Callable]",
                "dict"
            ],
            "arguments": {
                "code": [
                    "str",
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "PythonLinter.initialize": {
            "name": "initialize",
            "location": 82,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "float",
                    "type"
                ]
            }
        },
        "PythonLinter.reinitialize": {
            "name": "reinitialize",
            "location": 90,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cls": [
                    "Callable",
                    "Exception",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "PythonLinter.import_module": {
            "name": "import_module",
            "location": 100,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "NamedTuple",
                    "type",
                    "List[str]"
                ]
            }
        },
        "PythonLinter.context_sensitive_executable_path": {
            "name": "context_sensitive_executable_path",
            "location": 195,
            "return": [
                "bool",
                "tuple[typing.Optional[bool]]",
                "tuple[typing.Union[bool,typing.Text]]",
                "tuple[bool]"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "str",
                    "list",
                    "set",
                    "Pattern[str]",
                    "Pattern[bytes]",
                    "List[str]"
                ]
            }
        },
        "PythonLinter.get_module_version": {
            "name": "get_module_version",
            "location": 233,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "Optional[bool]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "type",
                    "Type",
                    "dict",
                    "str",
                    "Type['DataclassT']",
                    "Tuple[Type[Any]]"
                ]
            }
        },
        "PythonLinter.run": {
            "name": "run",
            "location": 258,
            "return": [
                "str",
                "List[str]",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "str",
                    "dict",
                    "bool"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "PythonLinter.check": {
            "name": "check",
            "location": 309,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "int",
                    "Optional[str]",
                    "str",
                    "Set[str]",
                    "float"
                ],
                "filename": [
                    "int",
                    "Optional[str]",
                    "str",
                    "Set[str]",
                    "float"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/SublimeLinter/lint/queue.py": {
        "Daemon.start": {
            "name": "start",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "int",
                    "Tuple[str, str]",
                    "str",
                    "list"
                ]
            }
        },
        "Daemon.loop": {
            "name": "loop",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Daemon.hit": {
            "name": "hit",
            "location": 93,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "int",
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "Daemon.delay": {
            "name": "delay",
            "location": 99,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "milliseconds": [
                    "int",
                    "multiprocessing.Queue",
                    "str"
                ]
            }
        },
        "Daemon.lint": {
            "name": "lint",
            "location": 103,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "view_id": [
                    "int",
                    "Dict[str, Any]"
                ],
                "timestamp": [
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "Daemon.get_delay": {
            "name": "get_delay",
            "location": 113,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "bytes",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/SublimeLinter/lint/ruby_linter.py": {
        "RubyLinter.initialize": {
            "name": "initialize",
            "location": 39,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "Tuple[List[str], Optional[Any]]",
                    "str",
                    "bool",
                    "Optional[dict]",
                    "Optional[str]",
                    "Type[T]"
                ]
            }
        },
        "RubyLinter.reinitialize": {
            "name": "reinitialize",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cls": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Mapping]",
                    "Iterable[Any]",
                    "str",
                    "Optional[Callable]"
                ]
            }
        },
        "RubyLinter.lookup_executables": {
            "name": "lookup_executables",
            "location": 64,
            "return": [
                "list",
                "int",
                "list[None]",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Union[int, str, bool]",
                    "Exception"
                ],
                "cmd": [
                    "str",
                    "Exception"
                ]
            }
        }
    },
    "devhost-master/sublime-packages/SublimeLinter/lint/util.py": {
        "merge_user_settings": {
            "name": "merge_user_settings",
            "location": 69,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]",
                "list"
            ],
            "arguments": {
                "settings": [
                    "dict",
                    "Mapping[str, Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "inline_settings": {
            "name": "inline_settings",
            "location": 93,
            "return": [
                "dict",
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "comment_re": [
                    "str",
                    "bytes",
                    "dict"
                ],
                "code": [
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "prefix": [
                    "str"
                ],
                "alt_prefix": [
                    "str"
                ]
            }
        },
        "get_view_rc_settings": {
            "name": "get_view_rc_settings",
            "location": 156,
            "return": [
                "None",
                "str",
                "dict"
            ],
            "arguments": {
                "view": [
                    "str",
                    "IO",
                    "dict"
                ],
                "limit": [
                    "None",
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "get_rc_settings": {
            "name": "get_rc_settings",
            "location": 167,
            "return": [
                "None",
                "Optional[int]",
                "Optional[str]",
                "bool",
                "dict",
                "str"
            ],
            "arguments": {
                "start_dir": [
                    "str",
                    "Tuple[int, int]"
                ],
                "limit": [
                    "None",
                    "str",
                    "Tuple[int, int]"
                ]
            }
        },
        "generate_color_scheme": {
            "name": "generate_color_scheme",
            "location": 196,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "from_reload": [
                    "bool"
                ]
            }
        },
        "generate_color_scheme_async": {
            "name": "generate_color_scheme_async",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "change_mark_colors": {
            "name": "change_mark_colors",
            "location": 291,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "error_color": [
                    "str",
                    "List[Tuple[str, str]]",
                    "int"
                ],
                "warning_color": [
                    "str",
                    "List[Tuple[str, str]]",
                    "int"
                ]
            }
        },
        "update_syntax_map": {
            "name": "update_syntax_map",
            "location": 313,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "indent_lines": {
            "name": "indent_lines",
            "location": 336,
            "return": [
                "Type",
                "str",
                "bool",
                "Union[int, float, complex]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int",
                    "bytes"
                ],
                "indent": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "generate_menus": {
            "name": "generate_menus",
            "location": 341,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "generate_menus_async": {
            "name": "generate_menus_async",
            "location": 346,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "generate_menu": {
            "name": "generate_menu",
            "location": 383,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int"
                ],
                "menu_text": [
                    "str",
                    "int"
                ]
            }
        },
        "build_submenu": {
            "name": "build_submenu",
            "location": 407,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "caption": [
                    "bool"
                ]
            }
        },
        "climb": {
            "name": "climb",
            "location": 429,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "start_dir": [
                    "str",
                    "Optional[str]"
                ],
                "limit": [
                    "Optional[str]",
                    "str",
                    "Optional[Union[Any, Any]]",
                    "Optional[List[str]]"
                ]
            }
        },
        "find_file": {
            "name": "find_file",
            "location": 449,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "start_dir": [
                    "str",
                    "bool",
                    "Optional[int]",
                    "int"
                ],
                "name": [
                    "str",
                    "Optional[int]"
                ],
                "parent": [
                    "bool",
                    "str",
                    "List[str]",
                    "List[List[str]]",
                    "Literal"
                ],
                "limit": [
                    "None",
                    "str",
                    "bool",
                    "Optional[int]",
                    "int"
                ],
                "aux_dirs": [
                    "list",
                    "bool",
                    "str",
                    "List[str]",
                    "List[List[str]]",
                    "Literal"
                ]
            }
        },
        "run_shell_cmd": {
            "name": "run_shell_cmd",
            "location": 484,
            "return": [
                "bytes",
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "cmd": [
                    "int",
                    "str",
                    "Optional[bytes]"
                ]
            }
        },
        "extract_path": {
            "name": "extract_path",
            "location": 500,
            "return": [
                "List[int]",
                "str",
                "List[str]",
                "typing.Text"
            ],
            "arguments": {
                "cmd": [
                    "bool",
                    "Union[str, List[str]]",
                    "dict",
                    "bytes"
                ],
                "delim": [
                    "typing.Text",
                    "str",
                    "dict"
                ]
            }
        },
        "get_shell_path": {
            "name": "get_shell_path",
            "location": 521,
            "return": [
                "str"
            ],
            "arguments": {
                "env": [
                    "str",
                    "int",
                    "Callable[[str], None]"
                ]
            }
        },
        "get_environment_variable": {
            "name": "get_environment_variable",
            "location": 563,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "get_path_components": {
            "name": "get_path_components",
            "location": 587,
            "return": [
                "list[int]",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "packages_relative_path": {
            "name": "packages_relative_path",
            "location": 609,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "prefix_packages": [
                    "bool",
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "create_environment": {
            "name": "create_environment",
            "location": 629,
            "return": [
                "dict[typing.Text, typing.Text]",
                "bool",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "can_exec": {
            "name": "can_exec",
            "location": 685,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "which": {
            "name": "which",
            "location": 691,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cmd": [
                    "str",
                    "Tuple[type]",
                    "Optional[str]"
                ],
                "module": [
                    "None",
                    "Callable",
                    "str"
                ]
            }
        },
        "extract_major_minor_version": {
            "name": "extract_major_minor_version",
            "location": 725,
            "return": [
                "dict[, typing.Union[int,None]]",
                "Optional[str]",
                "dict[typing.Text, None]",
                "bool",
                "dict"
            ],
            "arguments": {
                "version": [
                    "str",
                    "bytes",
                    "Pattern[str]"
                ]
            }
        },
        "get_python_version": {
            "name": "get_python_version",
            "location": 737,
            "return": [
                "dict[typing.Text, None]",
                "Callable",
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "find_python": {
            "name": "find_python",
            "location": 756,
            "return": [
                "tuple[typing.Optional[typing.Text]]",
                "str",
                "bool",
                "Union[int, float, complex]",
                "Optional[Any]",
                "int"
            ],
            "arguments": {
                "version": [
                    "None",
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "Dict[str, Any]",
                    "Callable",
                    "Dict[str, str]"
                ],
                "script": [
                    "None",
                    "str",
                    "Optional[Exception]"
                ],
                "module": [
                    "None",
                    "str",
                    "Optional[str]",
                    "bytes",
                    "Tuple[type]",
                    "Callable",
                    "Dict[str, str]"
                ]
            }
        },
        "version_fulfills_request": {
            "name": "version_fulfills_request",
            "location": 855,
            "return": [
                "bool"
            ],
            "arguments": {
                "available_version": [
                    "int",
                    "Optional[int]"
                ],
                "requested_version": [
                    "Optional[Dict[str, Any]]",
                    "Optional[Dict[str, str]]",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "find_posix_python": {
            "name": "find_posix_python",
            "location": 883,
            "return": [
                "str"
            ],
            "arguments": {
                "version": [
                    "str",
                    "List[str]",
                    "Optional[int]"
                ]
            }
        },
        "find_windows_python": {
            "name": "find_windows_python",
            "location": 910,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "version": [
                    "str",
                    "List[str]",
                    "List[object]"
                ]
            }
        },
        "find_python_script": {
            "name": "find_python_script",
            "location": 948,
            "return": [
                "None",
                "str",
                "xml.etree.ElementTree.Element"
            ],
            "arguments": {
                "python_path": [
                    "str"
                ],
                "script": [
                    "str"
                ]
            }
        },
        "get_python_paths": {
            "name": "get_python_paths",
            "location": 975,
            "return": [
                "list",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "find_executable": {
            "name": "find_executable",
            "location": 1002,
            "return": [
                "None",
                "str",
                "Optional[Tuple[str, str]]",
                "Optional[str]"
            ],
            "arguments": {
                "executable": [
                    "str",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "touch": {
            "name": "touch",
            "location": 1029,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "open_directory": {
            "name": "open_directory",
            "location": 1035,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "get_subl_executable_path": {
            "name": "get_subl_executable_path",
            "location": 1042,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "decode": {
            "name": "decode",
            "location": 1057,
            "return": [
                "typing.Text",
                "str",
                "bytearray",
                "int",
                "bytes",
                "Union[bytes, bytearray]",
                "bool"
            ],
            "arguments": {
                "bytes": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "combine_output": {
            "name": "combine_output",
            "location": 1075,
            "return": [
                "float",
                "bytearray",
                "List[int]"
            ],
            "arguments": {
                "out": [
                    "Optional[str]",
                    "str",
                    "Optional[Exception]"
                ],
                "sep": [
                    "typing.Text",
                    "Optional[str]",
                    "str",
                    "Optional[Exception]"
                ]
            }
        },
        "communicate": {
            "name": "communicate",
            "location": 1082,
            "return": [
                "typing.Text",
                "List[int]",
                "str"
            ],
            "arguments": {
                "cmd": [
                    "str",
                    "Optional[str]"
                ],
                "code": [
                    "None",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[bytes]"
                ],
                "output_stream": [
                    "int",
                    "Callable"
                ],
                "env": [
                    "None",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "create_tempdir": {
            "name": "create_tempdir",
            "location": 1128,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "tmpfile": {
            "name": "tmpfile",
            "location": 1162,
            "return": [
                "str"
            ],
            "arguments": {
                "cmd": [
                    "str",
                    "Union[str, List[str]]",
                    "Set[str]"
                ],
                "code": [
                    "str",
                    "Dict[str, str]",
                    "bool"
                ],
                "filename": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "bool",
                    "Callable[[str], Any]"
                ],
                "suffix": [
                    "typing.Text",
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "output_stream": [
                    "int",
                    "List[str]",
                    "bool",
                    "Iterable[List[str]]"
                ],
                "env": [
                    "None",
                    "List[str]",
                    "bool",
                    "int",
                    "Iterable[List[str]]"
                ]
            }
        },
        "tmpdir": {
            "name": "tmpdir",
            "location": 1204,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "cmd": [
                    "str",
                    "Dict[str, int]",
                    "Optional[Tuple[int, int]]",
                    "Optional[str]"
                ],
                "files": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "filename": [
                    "str"
                ],
                "code": [
                    "str",
                    "Dict[str, str]"
                ],
                "output_stream": [
                    "int",
                    "str",
                    "Dict[str, int]",
                    "Optional[Tuple[int, int]]",
                    "Optional[str]"
                ],
                "env": [
                    "None",
                    "str",
                    "Dict[str, int]",
                    "Optional[Tuple[int, int]]",
                    "Optional[str]"
                ]
            }
        },
        "popen": {
            "name": "popen",
            "location": 1254,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "cmd": [
                    "str",
                    "List[str]",
                    "Optional[Dict[str, str]]"
                ],
                "stdout": [
                    "None",
                    "str",
                    "List[str]",
                    "Optional[Dict[str, str]]"
                ],
                "stderr": [
                    "None",
                    "str",
                    "List[str]",
                    "Optional[Dict[str, str]]"
                ],
                "output_stream": [
                    "int",
                    "bytes",
                    "str",
                    "Dict[str, str]",
                    "IO[str]",
                    "list"
                ],
                "env": [
                    "Optional[str]",
                    "None"
                ],
                "extra_env": [
                    "None",
                    "Callable",
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[Union['AbstractSetIntStr', 'MappingIntStrAny']]",
                    "bool",
                    "Optional[float]"
                ]
            }
        },
        "apply_to_all_views": {
            "name": "apply_to_all_views",
            "location": 1298,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "callback": [
                    "int",
                    "str",
                    "List[int]",
                    "subprocess.Popen",
                    "set"
                ]
            }
        },
        "clear_path_caches": {
            "name": "clear_path_caches",
            "location": 1307,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "convert_type": {
            "name": "convert_type",
            "location": 1316,
            "return": [
                "Optional[str]",
                "list[str]",
                "Type[Any]",
                "list",
                "str",
                "Optional[int]",
                "float",
                "Dict[str, Any]",
                "None",
                "int",
                "list[Number]"
            ],
            "arguments": {
                "value": [
                    "Optional[str]",
                    "Optional[Mapping[str, Any]]",
                    "Optional[T]"
                ],
                "type_value": [
                    "bool"
                ],
                "sep": [
                    "Optional[str]",
                    "Optional[List[Type]]"
                ],
                "default": [
                    "None",
                    "bool",
                    "str",
                    "Dict[str, Dict]",
                    "Tuple[int]"
                ]
            }
        },
        "get_user_fullname": {
            "name": "get_user_fullname",
            "location": 1360,
            "return": [
                "str",
                "Callable",
                "List[List[int]]"
            ],
            "arguments": {}
        },
        "center_region_in_view": {
            "name": "center_region_in_view",
            "location": 1370,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "region": [
                    "bool",
                    "int"
                ],
                "view": [
                    "sublime.View"
                ]
            }
        },
        "cd.__init__": {
            "name": "__init__",
            "location": 1395,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "newPath": [
                    "str"
                ]
            }
        },
        "cd.__enter__": {
            "name": "__enter__",
            "location": 1399,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "cd.__exit__": {
            "name": "__exit__",
            "location": 1404,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "etype": [
                    "Optional[BaseException]",
                    "Callable[[str, object], None]",
                    "Iterable[float]",
                    "bool"
                ],
                "value": [
                    "Optional[BaseException]",
                    "Callable[[str, object], None]",
                    "Iterable[float]",
                    "bool"
                ],
                "traceback": [
                    "Optional[BaseException]",
                    "Callable[[str, object], None]",
                    "Iterable[float]",
                    "bool"
                ]
            }
        },
        "generate_color_scheme.prefs_reloaded": {
            "name": "prefs_reloaded",
            "location": 209,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "devhost-master/sublime-packages/SublimeLinter/lint/__init__.py": {},
    "devhost-master/sublime-packages/SublimeLinter/linter-plugin-template/linter.py": {}
}
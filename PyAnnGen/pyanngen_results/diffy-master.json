{
    "diffy-master/setup.py": {
        "load_requirements": {
            "name": "load_requirements",
            "location": 27,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "moto_broken": {
            "name": "moto_broken",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "diffy-master/diffy/accounts.py": {
        "get_fuzzy_accounts": {
            "name": "get_fuzzy_accounts",
            "location": 16,
            "return": [
                "str",
                "bool",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "identifier": [
                    "str",
                    "int",
                    "List[str]",
                    "Dict[str,object]",
                    "bool"
                ],
                "accounts": [
                    "List[int]",
                    "Literal"
                ]
            }
        },
        "valid_account": {
            "name": "valid_account",
            "location": 32,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "identifier": [
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "get_account_name": {
            "name": "get_account_name",
            "location": 43,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "identifier": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "get_account_id": {
            "name": "get_account_id",
            "location": 59,
            "return": [
                "str",
                "Set[int]",
                "Dict[str, str]"
            ],
            "arguments": {
                "identifier": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "diffy-master/diffy/config.py": {
        "configure_swag": {
            "name": "configure_swag",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "valid_region": {
            "name": "valid_region",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "region": [
                    "Callable[[str],bool]",
                    "List[object]",
                    "Callable[str,bool]",
                    "Dict",
                    "int",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "consume_envvars": {
            "name": "consume_envvars",
            "location": 43,
            "return": [
                "Dict",
                "List",
                "bool",
                "Dict[str,Any]"
            ],
            "arguments": {
                "defaults": [
                    "Dict",
                    "int",
                    "Tuple"
                ]
            }
        },
        "ConfigAttribute.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "Dict"
                ],
                "get_converter": [
                    "str",
                    "None",
                    "bool",
                    "int"
                ]
            }
        },
        "ConfigAttribute.__get__": {
            "name": "__get__",
            "location": 62,
            "return": [
                "ConfigAttribute",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "bool",
                    "None",
                    "List[str]",
                    "Optional[str]",
                    "int"
                ],
                "type": [
                    "str",
                    "None",
                    "Type",
                    "Optional[type]"
                ]
            }
        },
        "ConfigAttribute.__set__": {
            "name": "__set__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Dict[str,Any]",
                    "List",
                    "bool"
                ],
                "value": [
                    "str",
                    "Dict[str,Any]",
                    "List",
                    "bool"
                ]
            }
        },
        "Config.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root_path": [
                    "str",
                    "None",
                    "pathlib.Path"
                ],
                "defaults": [
                    "str",
                    "None",
                    "BinaryIO",
                    "TextIO",
                    "int",
                    "bool"
                ]
            }
        },
        "Config.from_envvar": {
            "name": "from_envvar",
            "location": 80,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "variable_name": [
                    "str",
                    "List[str]"
                ],
                "silent": [
                    "bool",
                    "str",
                    "Dict[str,Any]",
                    "Tuple[str,int]"
                ]
            }
        },
        "Config.from_yaml": {
            "name": "from_yaml",
            "location": 104,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "silent": [
                    "bool",
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "Config.from_mapping": {
            "name": "from_mapping",
            "location": 127,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.get_namespace": {
            "name": "get_namespace",
            "location": 147,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "namespace": [
                    "str"
                ],
                "lowercase": [
                    "bool",
                    "str",
                    "T",
                    "Dict"
                ],
                "trim_namespace": [
                    "bool",
                    "str",
                    "T",
                    "Dict"
                ]
            }
        },
        "Config.__repr__": {
            "name": "__repr__",
            "location": 189,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "diffy-master/diffy/core.py": {
        "analysis": {
            "name": "analysis",
            "location": 13,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "target_key": [
                    "str",
                    "TextIO",
                    "bytes"
                ],
                "target_plugin": [
                    "str",
                    "bytes",
                    "Dict",
                    "MutableMapping[str,Any]",
                    "Dict[str,str]",
                    "Dict[str,List[Any]]"
                ],
                "payload_plugin": [
                    "str",
                    "Dict",
                    "Mapping[str,Any]",
                    "Dict[str,Any]"
                ],
                "collection_plugin": [
                    "str",
                    "bytes",
                    "Dict",
                    "Callable[[T],Any]"
                ],
                "persistence_plugin": [
                    "str",
                    "bytes",
                    "Dict",
                    "Dict[str,str]"
                ],
                "analysis_plugin": [
                    "List[dict]",
                    "List",
                    "Dict",
                    "Dict[str,Any]",
                    "Optional[List[Dict]]",
                    "Optional[Any]"
                ]
            }
        },
        "baseline": {
            "name": "baseline",
            "location": 62,
            "return": [
                "Dict[(str, List[Dict[(_T0, Any)]])]"
            ],
            "arguments": {
                "target_key": [
                    "bytes",
                    "str",
                    "int"
                ],
                "target_plugin": [
                    "str",
                    "Dict",
                    "Tuple[Union[Literal,Literal]]",
                    "MutableMapping[str,Any]",
                    "Tuple[Literal,Literal]"
                ],
                "payload_plugin": [
                    "Optional[Any]",
                    "Any",
                    "Dict",
                    "None",
                    "str",
                    "MutableMapping[str,Any]",
                    "List",
                    "MutableMapping",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "logging.LogRecord"
                ],
                "collection_plugin": [
                    "str",
                    "Dict",
                    "MutableMapping",
                    "Dict[str,Union[int,str]]",
                    "int"
                ],
                "persistence_plugin": [
                    "str",
                    "List",
                    "Dict",
                    "Sequence",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "diffy-master/diffy/exceptions.py": {
        "DiffyException.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiffyException.__repr__": {
            "name": "__repr__",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidConfiguration.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidConfiguration.__repr__": {
            "name": "__repr__",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PendingException.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PendingException.__repr__": {
            "name": "__repr__",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaError.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema_error": [
                    "int",
                    "List[str]",
                    "float",
                    "bool",
                    "None",
                    "Optional[List[str]]"
                ]
            }
        },
        "SchemaError.__repr__": {
            "name": "__repr__",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BadArguments.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "validation_error": [
                    "int",
                    "List[str]",
                    "float",
                    "bool",
                    "None",
                    "Optional[List[str]]"
                ]
            }
        },
        "BadArguments.__repr__": {
            "name": "__repr__",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TargetNotFound.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target_key": [
                    "bytes",
                    "str",
                    "int"
                ],
                "plugin_slug": [
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "TargetNotFound.__repr__": {
            "name": "__repr__",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "diffy-master/diffy/extensions.py": {},
    "diffy-master/diffy/filters.py": {
        "replace": {
            "name": "replace",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "m": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "AWSFilter.filter": {
            "name": "filter",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str"
                ]
            }
        }
    },
    "diffy-master/diffy/schema.py": {
        "resolve_plugin_slug": {
            "name": "resolve_plugin_slug",
            "location": 90,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "slug": [
                    "str",
                    "float",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "DiffySchema.under": {
            "name": "under",
            "location": 24,
            "return": [
                "Union[(dict, List[dict])]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict",
                    "Dict[str,Any]",
                    "bytes"
                ],
                "many": [
                    "int",
                    "None",
                    "bytes",
                    "Dict",
                    "bool"
                ]
            }
        },
        "DiffySchema.camel": {
            "name": "camel",
            "location": 32,
            "return": [
                "Union[(dict, List[dict])]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str,Any]",
                    "Dict",
                    "bytes"
                ],
                "many": [
                    "int",
                    "None",
                    "bytes",
                    "Dict",
                    "bool"
                ]
            }
        },
        "DiffySchema.wrap_with_envelope": {
            "name": "wrap_with_envelope",
            "location": 48,
            "return": [
                "Union[(dict, _T0)]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str,Any]",
                    "Dict",
                    "bytes",
                    "List[int]",
                    "List[Tuple]",
                    "List[tuple]",
                    "Dict[AbstractSet[str],Set[Any]]",
                    "Dict[AbstractSet,set[Any]]"
                ],
                "many": [
                    "int",
                    "bytes",
                    "Dict",
                    "bool"
                ]
            }
        },
        "DiffyInputSchema.preprocess": {
            "name": "preprocess",
            "location": 57,
            "return": [
                "str",
                "Optional[float]",
                "bool",
                "marshmallow.Schema"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "Dict",
                    "str",
                    "List[int]",
                    "Iterable[Any]"
                ],
                "many": [
                    "bytes",
                    "Dict",
                    "str",
                    "List[int]",
                    "Iterable[Any]"
                ]
            }
        },
        "DiffyOutputSchema.preprocess": {
            "name": "preprocess",
            "location": 63,
            "return": [
                "str",
                "Optional[float]",
                "bool",
                "marshmallow.Schema"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "Dict",
                    "Dict[str,Any]"
                ],
                "many": [
                    "int",
                    "bytes",
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "DiffyOutputSchema.unwrap_envelope": {
            "name": "unwrap_envelope",
            "location": 68,
            "return": [
                "str",
                "bytes",
                "bytearray"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "Dict",
                    "bytearray",
                    "Union[bytes,bytearray,memoryview]"
                ],
                "many": [
                    "int",
                    "bytes",
                    "Dict",
                    "bool"
                ]
            }
        },
        "DiffyOutputSchema.post_process": {
            "name": "post_process",
            "location": 81,
            "return": [
                "int",
                "Dict",
                "bytes",
                "Dict[str,Any]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict",
                    "int",
                    "List[str]",
                    "Dict[str,Any]",
                    "bool"
                ],
                "many": [
                    "Dict",
                    "int",
                    "List[str]",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        },
        "PluginSchema.post_load": {
            "name": "post_load",
            "location": 108,
            "return": [
                "Callable[[Any], bool]",
                "dict",
                "Sequence",
                "bool",
                "sqlalchemy.engine.base.Engine",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "Dict"
                ]
            }
        }
    },
    "diffy-master/diffy/_version.py": {},
    "diffy-master/diffy/__init__.py": {},
    "diffy-master/diffy/common/managers.py": {
        "InstanceManager.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "class_list": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Sequence[str]",
                    "Union[None,int]",
                    "int",
                    "bool",
                    "List",
                    "Union[List,Dict,None]",
                    "Dict"
                ],
                "instances": [
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "InstanceManager.get_class_list": {
            "name": "get_class_list",
            "location": 23,
            "return": [
                "Tuple[int, int]",
                "Optional[Dict]",
                "bool",
                "Callable[[str], str]",
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstanceManager.add": {
            "name": "add",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "class_path": [
                    "str",
                    "Callable",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "InstanceManager.remove": {
            "name": "remove",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "class_path": [
                    "Pattern",
                    "Set[str]",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "InstanceManager.update": {
            "name": "update",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "class_list": [
                    "List[str]",
                    "List[Type]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        },
        "InstanceManager.all": {
            "name": "all",
            "location": 42,
            "return": [
                "int",
                "List",
                "Optional[Iterable[str]]",
                "str",
                "float",
                "Type",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "diffy-master/diffy/common/utils.py": {
        "chunk": {
            "name": "chunk",
            "location": 16,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "l": [
                    "int",
                    "list",
                    "Sequence",
                    "List[str]",
                    "List[int]"
                ],
                "n": [
                    "int",
                    "List",
                    "Sequence",
                    "List[str]",
                    "List[int]"
                ]
            }
        },
        "install_plugins": {
            "name": "install_plugins",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "diffy-master/diffy/common/__init__.py": {},
    "diffy-master/diffy/plugins/__init__.py": {},
    "diffy-master/diffy/plugins/base/manager.py": {
        "PluginManager.__iter__": {
            "name": "__iter__",
            "location": 17,
            "return": [
                "generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "PluginManager.__len__": {
            "name": "__len__",
            "location": 20,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PluginManager.all": {
            "name": "all",
            "location": 23,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "int",
                    "Optional[str]",
                    "Optional[int]",
                    "str",
                    "bool"
                ],
                "plugin_type": [
                    "Type",
                    "None",
                    "int",
                    "Dict[str,int]",
                    "Sequence[dict[str,Any]]",
                    "Sequence[Dict[str,Any]]",
                    "bool"
                ]
            }
        },
        "PluginManager.get": {
            "name": "get",
            "location": 35,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "slug": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "PluginManager.first": {
            "name": "first",
            "location": 47,
            "return": [
                "bool",
                "Dict",
                "Optional[Union[str,Any]]",
                "KeysView",
                "List"
            ],
            "arguments": {
                "self": [],
                "func_name": [
                    "str"
                ]
            }
        },
        "PluginManager.register": {
            "name": "register",
            "location": 66,
            "return": [
                "Type",
                "Dict[str,Any]",
                "str",
                "Callable[[str],T]"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Type"
                ]
            }
        },
        "PluginManager.unregister": {
            "name": "unregister",
            "location": 70,
            "return": [
                "Type",
                "Dict[str,Any]",
                "str",
                "Callable[[str],T]"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Type"
                ]
            }
        }
    },
    "diffy-master/diffy/plugins/base/v1.py": {
        "PluginMount.__new__": {
            "name": "__new__",
            "location": 21,
            "return": [
                "bool",
                "dict",
                "Optional[Any]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "bool"
                ],
                "name": [
                    "bool"
                ],
                "bases": [
                    "str"
                ],
                "attrs": [
                    "bool"
                ]
            }
        },
        "IPlugin.validate_options": {
            "name": "validate_options",
            "location": 62,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "options": [
                    "Optional[Dict]",
                    "Mapping",
                    "Dict",
                    "Type",
                    "None"
                ]
            }
        },
        "IPlugin.json_schema": {
            "name": "json_schema",
            "location": 70,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IPlugin.is_enabled": {
            "name": "is_enabled",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IPlugin.get_title": {
            "name": "get_title",
            "location": 87,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IPlugin.get_description": {
            "name": "get_description",
            "location": 94,
            "return": [
                "str",
                "int",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "IPlugin.get_resource_links": {
            "name": "get_resource_links",
            "location": 102,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "diffy-master/diffy/plugins/base/__init__.py": {},
    "diffy-master/diffy/plugins/bases/analysis.py": {
        "AnalysisPlugin.run": {
            "name": "run",
            "location": 16,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "List",
                    "List[dict]",
                    "IO",
                    "List[str]",
                    "bool",
                    "List[List[str]]",
                    "List[list[str]]"
                ]
            }
        }
    },
    "diffy-master/diffy/plugins/bases/collection.py": {
        "CollectionPlugin.get": {
            "name": "get",
            "location": 16,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "targets": [
                    "bool",
                    "str",
                    "int",
                    "T"
                ],
                "incident": [
                    "bool",
                    "str",
                    "int",
                    "T"
                ],
                "commands": [
                    "bool",
                    "str",
                    "int",
                    "T"
                ]
            }
        }
    },
    "diffy-master/diffy/plugins/bases/inventory.py": {
        "InventoryPlugin.get": {
            "name": "get",
            "location": 16,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "diffy-master/diffy/plugins/bases/payload.py": {
        "PayloadPlugin.generate": {
            "name": "generate",
            "location": 16,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "incident": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "diffy-master/diffy/plugins/bases/persistence.py": {
        "PersistencePlugin.get": {
            "name": "get",
            "location": 16,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "file_type": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "None",
                    "float",
                    "int",
                    "Optional[str]",
                    "Iterable[dict]",
                    "Iterable[Dict]"
                ],
                "key": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "None",
                    "float",
                    "int",
                    "Optional[str]",
                    "Iterable[dict]",
                    "Iterable[Dict]"
                ]
            }
        },
        "PersistencePlugin.get_all": {
            "name": "get_all",
            "location": 19,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistencePlugin.save": {
            "name": "save",
            "location": 22,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "file_type": [
                    "bool",
                    "str",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "key": [
                    "bool",
                    "str",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "item": [
                    "bool",
                    "str",
                    "None",
                    "int",
                    "Optional[str]"
                ]
            }
        }
    },
    "diffy-master/diffy/plugins/bases/target.py": {
        "TargetPlugin.get": {
            "name": "get",
            "location": 16,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Iterable[str]"
                ]
            }
        }
    },
    "diffy-master/diffy/plugins/bases/__init__.py": {},
    "diffy-master/diffy/plugins/diffy_aws/auto_scaling.py": {
        "retry_throttled": {
            "name": "retry_throttled",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "exception": [
                    "str",
                    "Exception",
                    "int",
                    "logging.Logger"
                ]
            }
        },
        "describe_auto_scaling_group": {
            "name": "describe_auto_scaling_group",
            "location": 39,
            "return": [
                "Callable",
                "bool",
                "Callable[[str], None]"
            ],
            "arguments": {
                "group_name": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "diffy-master/diffy/plugins/diffy_aws/plugin.py": {
        "get_default_aws_account_number": {
            "name": "get_default_aws_account_number",
            "location": 29,
            "return": [
                "str",
                "int",
                "bytes",
                "bool"
            ],
            "arguments": {}
        },
        "S3PersistencePlugin.get": {
            "name": "get",
            "location": 59,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "Optional[Dict[str, Any]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "S3PersistencePlugin.get_all": {
            "name": "get_all",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3PersistencePlugin.save": {
            "name": "save",
            "location": 69,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[str,int]",
                    "int"
                ],
                "item": [
                    "str",
                    "Dict"
                ]
            }
        },
        "AutoScalingTargetPlugin.get": {
            "name": "get",
            "location": 88,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "SSMCollectionPlugin.get": {
            "name": "get",
            "location": 113,
            "return": [
                "str",
                "Iterable[int]"
            ],
            "arguments": {
                "self": [],
                "targets": [
                    "List[str]",
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "commands": [
                    "List[str]",
                    "List",
                    "Dict[str,Any]",
                    "Optional[List[dict]]",
                    "str",
                    "List[dict]",
                    "None",
                    "boto3.resources.factory.ec2.Instance"
                ]
            }
        }
    },
    "diffy-master/diffy/plugins/diffy_aws/s3.py": {
        "_get_from_s3": {
            "name": "_get_from_s3",
            "location": 26,
            "return": [
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "bucket": [
                    "str"
                ],
                "data_file": [
                    "str"
                ]
            }
        },
        "_put_to_s3": {
            "name": "_put_to_s3",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "client": [
                    "str",
                    "Dict[str, Any]"
                ],
                "bucket": [
                    "str",
                    "Dict[str,Any]"
                ],
                "data_file": [
                    "str",
                    "Dict[str,Any]"
                ],
                "body": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "load_file": {
            "name": "load_file",
            "location": 46,
            "return": [
                "str",
                "IO",
                "dict",
                "Dict[str, Dict[str, str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "save_file": {
            "name": "save_file",
            "location": 62,
            "return": [
                "Dict",
                "Dict[str,str]",
                "str",
                "Optional[str]",
                "Dict[int,Set[str]]",
                "List[Tuple[str,str]]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "int",
                    "None",
                    "List[str]",
                    "Optional[str]",
                    "bool"
                ],
                "item": [
                    "str",
                    "bool",
                    "bytes",
                    "object"
                ],
                "dry_run": [
                    "bool",
                    "str",
                    "None"
                ]
            }
        }
    },
    "diffy-master/diffy/plugins/diffy_aws/ssm.py": {
        "encode_command": {
            "name": "encode_command",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str",
                    "Union[str,bytes]",
                    "AnyStr",
                    "bytes"
                ]
            }
        },
        "send_commands": {
            "name": "send_commands",
            "location": 40,
            "return": [
                "Tuple",
                "Dict[str,Any]",
                "Optional[str]",
                "Sequence[int]",
                "str",
                "werkzeug.exceptions.HTTPException"
            ],
            "arguments": {
                "instance_ids": [
                    "str"
                ],
                "commands": [
                    "str"
                ]
            }
        },
        "process": {
            "name": "process",
            "location": 71,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "instances": [
                    "str",
                    "trezor.utils.Writer"
                ],
                "commands": [
                    "Dict[str,str]",
                    "List[dict]",
                    "Optional[Exception]",
                    "Exception",
                    "Dict",
                    "None",
                    "Dict[str,Any]"
                ]
            }
        },
        "retry_throttled": {
            "name": "retry_throttled",
            "location": 87,
            "return": [
                "bool"
            ],
            "arguments": {
                "exception": [
                    "str",
                    "None",
                    "int",
                    "Union[None,int,str]",
                    "Optional[logging.Logger]",
                    "Type",
                    "Type[BaseException]"
                ]
            }
        },
        "get_command_invocation": {
            "name": "get_command_invocation",
            "location": 106,
            "return": [],
            "arguments": {
                "command_id": [
                    "int",
                    "str",
                    "bytes",
                    "bool"
                ],
                "instance_id": [
                    "int",
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "is_completed": {
            "name": "is_completed",
            "location": 117,
            "return": [
                "bool"
            ],
            "arguments": {
                "status": [
                    "str",
                    "bool",
                    "Callable[,bool]",
                    "None",
                    "Callable",
                    "Optional[int]"
                ]
            }
        },
        "retry_pending": {
            "name": "retry_pending",
            "location": 124,
            "return": [
                "bool"
            ],
            "arguments": {
                "exception": [
                    "str",
                    "Dict[str,str]",
                    "Exception",
                    "Dict[str,object]",
                    "List[str]"
                ]
            }
        },
        "poll": {
            "name": "poll",
            "location": 131,
            "return": [
                "Dict[int,int]",
                "str",
                "int"
            ],
            "arguments": {
                "command_ids": [
                    "Dict[int,int]",
                    "str",
                    "int"
                ]
            }
        }
    },
    "diffy-master/diffy/plugins/diffy_aws/sts.py": {
        "sts_client": {
            "name": "sts_client",
            "location": 18,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "service": [
                    "str",
                    "Set[str]",
                    "bool",
                    "Dict",
                    "Literal",
                    "int"
                ],
                "service_type": [
                    "Text",
                    "str",
                    "Literal",
                    "Set[str]",
                    "bool",
                    "Dict",
                    "int"
                ]
            }
        },
        "sts_client.decorator": {
            "name": "decorator",
            "location": 19,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "sts_client.decorator.decorated_function": {
            "name": "decorated_function",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "diffy-master/diffy/plugins/diffy_aws/__init__.py": {},
    "diffy-master/diffy/plugins/diffy_aws/tests/conftest.py": {},
    "diffy-master/diffy/plugins/diffy_aws/tests/__init__.py": {},
    "diffy-master/diffy/plugins/diffy_local/plugin.py": {
        "get_local_file_path": {
            "name": "get_local_file_path",
            "location": 27,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "file_type": [
                    "str",
                    "Pattern"
                ],
                "key": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "SimpleAnalysisPlugin.run": {
            "name": "run",
            "location": 46,
            "return": [
                "bool",
                "List",
                "Type",
                "List[dict]",
                "str",
                "List[str]",
                "List[list[str]]"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "List",
                    "List[dict]",
                    "List[str]",
                    "List[list[str]]",
                    "IO",
                    "List[List[str]]",
                    "bool"
                ]
            }
        },
        "ClusterAnalysisPlugin.run": {
            "name": "run",
            "location": 68,
            "return": [
                "bool",
                "Type",
                "List",
                "str",
                "List[dict]",
                "IO",
                "List[str]",
                "List[list[str]]"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "List",
                    "List[dict]",
                    "IO",
                    "List[str]",
                    "bool",
                    "List[List[str]]",
                    "List[list[str]]"
                ]
            }
        },
        "FilePersistencePlugin.get": {
            "name": "get",
            "location": 83,
            "return": [
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "file_type": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "FilePersistencePlugin.get_all": {
            "name": "get_all",
            "location": 92,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "file_type": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "FilePersistencePlugin.save": {
            "name": "save",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_type": [
                    "str",
                    "bytes"
                ],
                "key": [
                    "str",
                    "bytes"
                ],
                "item": [
                    "Dict",
                    "int",
                    "List[str]"
                ]
            }
        },
        "CommandPayloadPlugin.generate": {
            "name": "generate",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "incident": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "LocalShellCollectionPlugin.get": {
            "name": "get",
            "location": 135,
            "return": [
                "Dict[(int, List[Dict[(str, Any)]])]"
            ],
            "arguments": {
                "self": [],
                "targets": [
                    "bool",
                    "str",
                    "int",
                    "T"
                ],
                "commands": [
                    "str",
                    "List[str]",
                    "bool",
                    "pricemonitor.config.Coin"
                ]
            }
        },
        "LocalTargetPlugin.get": {
            "name": "get",
            "location": 181,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Iterable[str]",
                    "Optional[datetime.timedelta]",
                    "None"
                ]
            }
        }
    },
    "diffy-master/diffy/plugins/diffy_local/__init__.py": {},
    "diffy-master/diffy/plugins/diffy_local/tests/conftest.py": {},
    "diffy-master/diffy/plugins/diffy_local/tests/__init__.py": {},
    "diffy-master/diffy/plugins/diffy_osquery/plugin.py": {
        "OSQueryPayloadPlugin.generate": {
            "name": "generate",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "incident": [
                    "str",
                    "List[str]",
                    "Dict",
                    "Union[str,List[str]]"
                ]
            }
        }
    },
    "diffy-master/diffy/plugins/diffy_osquery/__init__.py": {},
    "diffy-master/diffy/plugins/diffy_osquery/tests/conftest.py": {},
    "diffy-master/diffy/plugins/diffy_osquery/tests/__init__.py": {},
    "diffy-master/diffy_api/core.py": {
        "async_baseline": {
            "name": "async_baseline",
            "location": 8,
            "return": [
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "kwargs": []
            }
        },
        "async_analysis": {
            "name": "async_analysis",
            "location": 17,
            "return": [
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "kwargs": []
            }
        }
    },
    "diffy-master/diffy_api/extensions.py": {},
    "diffy-master/diffy_api/factory.py": {
        "create_app": {
            "name": "create_app",
            "location": 31,
            "return": [
                "flask.Flask",
                "Flask"
            ],
            "arguments": {
                "app_name": [
                    "str",
                    "None"
                ],
                "blueprints": [
                    "cmk.utils.type_defs.HostName",
                    "int",
                    "bool"
                ],
                "config": [
                    "flask.Flask",
                    "None",
                    "str",
                    "Optional[dict]",
                    "Dict"
                ]
            }
        },
        "configure_app": {
            "name": "configure_app",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "str",
                    "Dict[str,Any]",
                    "config.Config",
                    "flask.Flask",
                    "meier.config.Config",
                    "Config"
                ],
                "config": [
                    "Dict[str,Any]",
                    "None",
                    "Dict",
                    "Dict[str,str]",
                    "str",
                    "meier.config.Config",
                    "flask.Flask"
                ]
            }
        },
        "configure_extensions": {
            "name": "configure_extensions",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "configure_blueprints": {
            "name": "configure_blueprints",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ],
                "blueprints": [
                    "flask.Flask"
                ]
            }
        },
        "configure_logging": {
            "name": "configure_logging",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        }
    },
    "diffy-master/diffy_api/schemas.py": {},
    "diffy-master/diffy_api/__init__.py": {
        "create_app": {
            "name": "create_app",
            "location": 22,
            "return": [
                "flask.Flask"
            ],
            "arguments": {
                "config": [
                    "Optional[Iterable[str]]",
                    "None",
                    "Dict[str,str]",
                    "Iterable[str]"
                ]
            }
        },
        "configure_hook": {
            "name": "configure_hook",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "configure_hook.handle_error": {
            "name": "handle_error",
            "location": 40,
            "return": [
                "Tuple[int]",
                "Dict[str,Any]",
                "Dict",
                "flask.Markup",
                "Dict[str,int]"
            ],
            "arguments": {
                "e": [
                    "Exception",
                    "Dict[str, Any]"
                ]
            }
        },
        "configure_hook.before_request": {
            "name": "before_request",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "configure_hook.after_request": {
            "name": "after_request",
            "location": 53,
            "return": [
                "dict",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "response": [
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "diffy-master/diffy_api/analysis/views.py": {
        "AnalysisList.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalysisList.get": {
            "name": "get",
            "location": 29,
            "return": [
                "Tuple[(Any, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalysisList.post": {
            "name": "post",
            "location": 57,
            "return": [
                "Tuple[Union[dict[Text,],int]]",
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict",
                    "None",
                    "str",
                    "Optional[dict]",
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]",
                    "Iterable[bytes]"
                ]
            }
        },
        "Analysis.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Analysis.get": {
            "name": "get",
            "location": 91,
            "return": [
                "str",
                "Callable[[Dict], Any]",
                "bool",
                "tuple",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        }
    },
    "diffy-master/diffy_api/baseline/views.py": {
        "BaselineList.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaselineList.get": {
            "name": "get",
            "location": 33,
            "return": [
                "Tuple[Union[dict,dict[str,str],str,dict[str,dict[str,Any]],int]]",
                "bytes",
                "Dict[str,Any]",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str],T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaselineList.post": {
            "name": "post",
            "location": 61,
            "return": [
                "Tuple[Union[dict[Text,],int]]",
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict",
                    "None",
                    "str",
                    "Optional[dict]",
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]",
                    "Iterable[bytes]"
                ]
            }
        },
        "Baseline.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Baseline.get": {
            "name": "get",
            "location": 95,
            "return": [
                "dict",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "diffy-master/diffy_api/common/health.py": {
        "health": {
            "name": "health",
            "location": 14,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "diffy-master/diffy_api/common/util.py": {
        "format_errors": {
            "name": "format_errors",
            "location": 10,
            "return": [
                "dict"
            ],
            "arguments": {
                "messages": [
                    "Dict[str,str]",
                    "Mapping"
                ]
            }
        },
        "wrap_errors": {
            "name": "wrap_errors",
            "location": 24,
            "return": [
                "dict"
            ],
            "arguments": {
                "messages": [
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "unwrap_pagination": {
            "name": "unwrap_pagination",
            "location": 33,
            "return": [
                "bool",
                "str",
                "Dict",
                "List[str]",
                "Dict[Text,]",
                "Dict[Text,int]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "Dict",
                    "bool",
                    "List[str]"
                ],
                "output_schema": [
                    "str",
                    "bool"
                ]
            }
        },
        "validate_schema": {
            "name": "validate_schema",
            "location": 56,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "input_schema": [
                    "bool"
                ],
                "output_schema": [
                    "bool"
                ]
            }
        },
        "validate_schema.decorator": {
            "name": "decorator",
            "location": 57,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "validate_schema.decorator.decorated_function": {
            "name": "decorated_function",
            "location": 59,
            "return": [
                "Tuple[int]",
                "Mapping[str,Any]",
                "Tuple",
                "List[Dict[str,Any]]",
                "Iterator[Dict[str,str]]"
            ],
            "arguments": {}
        }
    },
    "diffy-master/diffy_api/common/__init__.py": {},
    "diffy-master/diffy_api/plugins/views.py": {},
    "diffy-master/diffy_api/plugins/__init__.py": {},
    "diffy-master/diffy_api/tasks/views.py": {
        "TaskList.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskList.get": {
            "name": "get",
            "location": 27,
            "return": [
                "Tuple[int]",
                "bytes",
                "Dict[str,Any]",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str],T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.get": {
            "name": "get",
            "location": 61,
            "return": [
                "str",
                "Optional[str]",
                "Union[int, float]"
            ],
            "arguments": {
                "self": [],
                "task_id": [
                    "str"
                ]
            }
        }
    },
    "diffy-master/diffy_api/tasks/__init__.py": {},
    "diffy-master/diffy_cli/core.py": {
        "plugin_command_factory": {
            "name": "plugin_command_factory",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_plugin_properties": {
            "name": "get_plugin_properties",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "json_schema": [
                    "Dict[str, Any]",
                    "Dict[str, float]",
                    "dict",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "add_plugins_args": {
            "name": "add_plugins_args",
            "location": 55,
            "return": [
                "str",
                "Optional[str]",
                "Type",
                "dss.config.Replica",
                "click_@_Command"
            ],
            "arguments": {
                "f": [
                    "str",
                    "Type",
                    "T"
                ]
            }
        },
        "get_plugin_callback": {
            "name": "get_plugin_callback",
            "location": 83,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "Tuple[str]",
                    "click.Parameter",
                    "click.Context"
                ],
                "param": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "value": [
                    "str",
                    "List[Union[str,int]]",
                    "click.Context"
                ]
            }
        },
        "diffy_cli": {
            "name": "diffy_cli",
            "location": 106,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "str",
                    "click.core.Context",
                    "click.Context"
                ],
                "config": [
                    "bool",
                    "str",
                    "click.core.Context",
                    "click.Context"
                ],
                "dry_run": [
                    "bool",
                    "str",
                    "click.core.Context",
                    "click.Context"
                ]
            }
        },
        "plugins_group": {
            "name": "plugins_group",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "list_plugins": {
            "name": "list_plugins",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "new": {
            "name": "new",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "baseline_command": {
            "name": "baseline_command",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "target_key": [
                    "bytes",
                    "core.models.GroupingKey",
                    "Hashable",
                    "None",
                    "str",
                    "Optional[base.OrderSpec]"
                ],
                "target_plugin": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "None"
                ],
                "inventory_plugin": [
                    "str",
                    "int",
                    "bool"
                ],
                "persistence_plugin": [
                    "bytes",
                    "str",
                    "Union[List[str],List[Any]]",
                    "List[str]"
                ],
                "payload_plugin": [
                    "bytes",
                    "str",
                    "Union[List[str],List[Any]]",
                    "List[str]"
                ],
                "collection_plugin": [
                    "bytes",
                    "str",
                    "Union[List[str],List[Any]]",
                    "List[str]"
                ],
                "incident_id": [
                    "bytes",
                    "str",
                    "Union[List[str],List[Any]]",
                    "List[str]"
                ]
            }
        },
        "analysis_command": {
            "name": "analysis_command",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "target_key": [
                    "bytes",
                    "str"
                ],
                "analysis_plugin": [
                    "bytes",
                    "str"
                ],
                "target_plugin": [
                    "bytes",
                    "str"
                ],
                "persistence_plugin": [
                    "bytes",
                    "str"
                ],
                "collection_plugin": [
                    "bytes",
                    "str"
                ],
                "payload_plugin": [
                    "bytes",
                    "str"
                ],
                "incident_id": [
                    "str",
                    "Callable",
                    "core.models.GroupingKey"
                ]
            }
        },
        "entry_point": {
            "name": "entry_point",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "YAML.convert": {
            "name": "convert",
            "location": 75,
            "return": [
                "bool",
                "logging.LogRecord",
                "core.LazyNS",
                "Callable[..., None]",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Set[str]"
                ],
                "param": [
                    "None",
                    "str",
                    "Optional[click.Parameter]",
                    "Optional[click.Context]"
                ],
                "ctx": [
                    "None",
                    "str",
                    "Optional[click.Parameter]",
                    "Optional[click.Context]"
                ]
            }
        }
    },
    "diffy-master/diffy_cli/__init__.py": {},
    "diffy-master/diffy_cli/utils/dynamic_click.py": {
        "validate_schema_callback": {
            "name": "validate_schema_callback",
            "location": 22,
            "return": [
                "str",
                "Tuple[str]",
                "int",
                "Dict[str,Any]"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "Tuple[str]",
                    "click.Parameter",
                    "click.Context"
                ],
                "param": [
                    "str",
                    "Tuple[str]",
                    "click.Parameter",
                    "click.Context"
                ],
                "value": [
                    "str",
                    "Tuple[str]",
                    "click.Parameter",
                    "click.Context"
                ]
            }
        },
        "params_factory": {
            "name": "params_factory",
            "location": 27,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "schemas": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "func_factory": {
            "name": "func_factory",
            "location": 100,
            "return": [
                "Callable"
            ],
            "arguments": {
                "p": [
                    "str",
                    "Callable",
                    "bool",
                    "int"
                ],
                "method": [
                    "str",
                    "Callable",
                    "bool",
                    "int"
                ]
            }
        },
        "get_param_decals_from_name": {
            "name": "get_param_decals_from_name",
            "location": 117,
            "return": [
                "str"
            ],
            "arguments": {
                "option_name": [
                    "str"
                ]
            }
        },
        "get_flag_param_decals_from_bool": {
            "name": "get_flag_param_decals_from_bool",
            "location": 123,
            "return": [
                "str"
            ],
            "arguments": {
                "option_name": [
                    "str"
                ]
            }
        },
        "func_factory.callback": {
            "name": "callback",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "pretty": [
                    "bool",
                    "Callable",
                    "Dict[str,Any]",
                    "str",
                    "Dict"
                ]
            }
        }
    },
    "diffy-master/diffy_cli/utils/json_schema.py": {
        "handle_oneof": {
            "name": "handle_oneof",
            "location": 12,
            "return": [
                "Tuple[(Any, bool, Any)]"
            ],
            "arguments": {
                "oneof_schema": [
                    "List[float]",
                    "str",
                    "Dict",
                    "float",
                    "Sequence[cirq.Qid]"
                ]
            }
        },
        "json_schema_to_click_type": {
            "name": "json_schema_to_click_type",
            "location": 37,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "schema": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        }
    },
    "diffy-master/diffy_cli/utils/__init__.py": {},
    "diffy-master/docs/conf.py": {},
    "diffy-master/docs/internals/index.rst.py": {},
    "diffy-master/tests/conf.py": {},
    "diffy-master/tests/conftest.py": {
        "app": {
            "name": "app",
            "location": 20,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "request": []
            }
        },
        "client": {
            "name": "client",
            "location": 35,
            "return": [
                "typing.Generator[Exception]"
            ],
            "arguments": {
                "app": [
                    "Exception"
                ],
                "client": [
                    "Exception"
                ]
            }
        },
        "s3": {
            "name": "s3",
            "location": 40,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "ec2": {
            "name": "ec2",
            "location": 46,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "autoscaling": {
            "name": "autoscaling",
            "location": 52,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "ssm": {
            "name": "ssm",
            "location": 58,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "sts": {
            "name": "sts",
            "location": 64,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "iam": {
            "name": "iam",
            "location": 70,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "swag_accounts": {
            "name": "swag_accounts",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "s3": [
                    "str"
                ]
            }
        },
        "diffy_s3_bucket": {
            "name": "diffy_s3_bucket",
            "location": 119,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "s3": [
                    "str"
                ]
            }
        },
        "diffy_autoscaling_group": {
            "name": "diffy_autoscaling_group",
            "location": 126,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "ec2": [
                    "Callable",
                    "dict",
                    "bool"
                ],
                "autoscaling": [
                    "str",
                    "int"
                ]
            }
        },
        "diffy_role": {
            "name": "diffy_role",
            "location": 169,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "iam": [
                    "str",
                    "int",
                    "float",
                    "bool",
                    "bytes"
                ]
            }
        }
    },
    "diffy-master/tests/test_analysis.py": {
        "test_analysis_list_get": {
            "name": "test_analysis_list_get",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "Dict[str,str]"
                ],
                "token": [
                    "Dict[str,str]"
                ],
                "status": [
                    "Dict[str,str]"
                ]
            }
        },
        "test_analysis_list_post": {
            "name": "test_analysis_list_post",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "Dict",
                    "Optional[List[Type]]",
                    "List[Type]",
                    "None"
                ],
                "token": [
                    "str",
                    "Dict",
                    "Optional[List[Type]]",
                    "List[Type]",
                    "None"
                ],
                "status": [
                    "str",
                    "Dict",
                    "Optional[List[Type]]",
                    "List[Type]",
                    "None"
                ],
                "sts": [
                    "bool",
                    "List[List[int]]",
                    "List[list[int]]"
                ]
            }
        },
        "test_analysis_list_put": {
            "name": "test_analysis_list_put",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "token": [],
                "status": []
            }
        },
        "test_analysis_list_delete": {
            "name": "test_analysis_list_delete",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "int"
                ],
                "token": [
                    "int"
                ],
                "status": [
                    "int"
                ]
            }
        },
        "test_analysis_list_patch": {
            "name": "test_analysis_list_patch",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "Optional[List[Type]]",
                    "Dict",
                    "List[Type]",
                    "None"
                ],
                "token": [
                    "Optional[List[Type]]",
                    "Dict",
                    "List[Type]",
                    "None"
                ],
                "status": [
                    "Optional[List[Type]]",
                    "Dict",
                    "List[Type]",
                    "None"
                ]
            }
        },
        "test_analysis_get": {
            "name": "test_analysis_get",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "token": [
                    "str"
                ],
                "status": [
                    "str"
                ]
            }
        },
        "test_analysis_post": {
            "name": "test_analysis_post",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "Optional[str]",
                    "Dict",
                    "None",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "token": [
                    "str",
                    "Optional[str]",
                    "Dict",
                    "None",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "status": [
                    "str",
                    "Optional[str]",
                    "Dict",
                    "None",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "test_analysis_put": {
            "name": "test_analysis_put",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "Optional[str]",
                    "Dict",
                    "None",
                    "Optional[List[Type]]",
                    "List[Type]",
                    "Callable[...,Awaitable]",
                    "Callable[...,collections.abc.Awaitable]"
                ],
                "token": [
                    "str",
                    "Optional[str]",
                    "Dict",
                    "None",
                    "Optional[List[Type]]",
                    "List[Type]",
                    "Callable[...,Awaitable]",
                    "Callable[...,collections.abc.Awaitable]"
                ],
                "status": [
                    "str",
                    "Optional[str]",
                    "Dict",
                    "None",
                    "Optional[List[Type]]",
                    "List[Type]",
                    "Callable[...,Awaitable]",
                    "Callable[...,collections.abc.Awaitable]"
                ]
            }
        },
        "test_analysis_delete": {
            "name": "test_analysis_delete",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "int",
                    "str",
                    "Optional[List[Type]]",
                    "List[Type]",
                    "None"
                ],
                "token": [
                    "int",
                    "str",
                    "Optional[List[Type]]",
                    "List[Type]",
                    "None"
                ],
                "status": [
                    "int",
                    "str",
                    "Optional[List[Type]]",
                    "List[Type]",
                    "None"
                ]
            }
        },
        "test_analysis_patch": {
            "name": "test_analysis_patch",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "Optional[List[Type]]",
                    "List[Type]",
                    "str",
                    "Dict",
                    "int",
                    "None"
                ],
                "token": [
                    "Optional[List[Type]]",
                    "List[Type]",
                    "str",
                    "Dict",
                    "int",
                    "None"
                ],
                "status": [
                    "Optional[List[Type]]",
                    "List[Type]",
                    "str",
                    "Dict",
                    "int",
                    "None"
                ]
            }
        }
    },
    "diffy-master/tests/test_baseline.py": {
        "test_baseline_list_get": {
            "name": "test_baseline_list_get",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "Dict[str,str]"
                ],
                "token": [
                    "Dict[str,str]"
                ],
                "status": [
                    "Dict[str,str]"
                ]
            }
        },
        "test_baseline_list_post": {
            "name": "test_baseline_list_post",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "Dict",
                    "Optional[List[Type]]",
                    "List[Type]",
                    "None"
                ],
                "token": [
                    "str",
                    "Dict",
                    "Optional[List[Type]]",
                    "List[Type]",
                    "None"
                ],
                "status": [
                    "str",
                    "Dict",
                    "Optional[List[Type]]",
                    "List[Type]",
                    "None"
                ],
                "sts": [
                    "bool",
                    "List[List[int]]",
                    "List[list[int]]"
                ]
            }
        },
        "test_baseline_list_put": {
            "name": "test_baseline_list_put",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "token": [],
                "status": []
            }
        },
        "test_baseline_list_delete": {
            "name": "test_baseline_list_delete",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "int"
                ],
                "token": [
                    "int"
                ],
                "status": [
                    "int"
                ]
            }
        },
        "test_baseline_list_patch": {
            "name": "test_baseline_list_patch",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "Optional[List[Type]]",
                    "Dict",
                    "List[Type]",
                    "None"
                ],
                "token": [
                    "Optional[List[Type]]",
                    "Dict",
                    "List[Type]",
                    "None"
                ],
                "status": [
                    "Optional[List[Type]]",
                    "Dict",
                    "List[Type]",
                    "None"
                ]
            }
        },
        "test_baseline_get": {
            "name": "test_baseline_get",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "token": [
                    "str"
                ],
                "status": [
                    "str"
                ]
            }
        },
        "test_baseline_post": {
            "name": "test_baseline_post",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "Optional[str]",
                    "Dict",
                    "None",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "token": [
                    "str",
                    "Optional[str]",
                    "Dict",
                    "None",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "status": [
                    "str",
                    "Optional[str]",
                    "Dict",
                    "None",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "test_baseline_put": {
            "name": "test_baseline_put",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "Optional[str]",
                    "Dict",
                    "None",
                    "Optional[List[Type]]",
                    "List[Type]",
                    "Callable[...,Awaitable]",
                    "Callable[...,collections.abc.Awaitable]"
                ],
                "token": [
                    "str",
                    "Optional[str]",
                    "Dict",
                    "None",
                    "Optional[List[Type]]",
                    "List[Type]",
                    "Callable[...,Awaitable]",
                    "Callable[...,collections.abc.Awaitable]"
                ],
                "status": [
                    "str",
                    "Optional[str]",
                    "Dict",
                    "None",
                    "Optional[List[Type]]",
                    "List[Type]",
                    "Callable[...,Awaitable]",
                    "Callable[...,collections.abc.Awaitable]"
                ]
            }
        },
        "test_baseline_delete": {
            "name": "test_baseline_delete",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "int",
                    "str",
                    "Optional[List[Type]]",
                    "List[Type]",
                    "None"
                ],
                "token": [
                    "int",
                    "str",
                    "Optional[List[Type]]",
                    "List[Type]",
                    "None"
                ],
                "status": [
                    "int",
                    "str",
                    "Optional[List[Type]]",
                    "List[Type]",
                    "None"
                ]
            }
        },
        "test_baseline_patch": {
            "name": "test_baseline_patch",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "Optional[List[Type]]",
                    "List[Type]",
                    "str",
                    "Dict",
                    "int",
                    "None"
                ],
                "token": [
                    "Optional[List[Type]]",
                    "List[Type]",
                    "str",
                    "Dict",
                    "int",
                    "None"
                ],
                "status": [
                    "Optional[List[Type]]",
                    "List[Type]",
                    "str",
                    "Dict",
                    "int",
                    "None"
                ]
            }
        }
    },
    "diffy-master/tests/__init__.py": {}
}